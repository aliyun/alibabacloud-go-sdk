// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type DataResultValue struct {
	SqlId      *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	Count      *int32  `json:"count,omitempty" xml:"count,omitempty"`
}

func (s DataResultValue) String() string {
	return tea.Prettify(s)
}

func (s DataResultValue) GoString() string {
	return s.String()
}

func (s *DataResultValue) SetSqlId(v string) *DataResultValue {
	s.SqlId = &v
	return s
}

func (s *DataResultValue) SetInstanceId(v string) *DataResultValue {
	s.InstanceId = &v
	return s
}

func (s *DataResultValue) SetCount(v int32) *DataResultValue {
	s.Count = &v
	return s
}

type DataSessionStatClientStatsValue struct {
	// The number of clients whose IP addresses are active.
	//
	// example:
	//
	// 0
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The total number of IP addresses of clients.
	//
	// example:
	//
	// 11
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DataSessionStatClientStatsValue) String() string {
	return tea.Prettify(s)
}

func (s DataSessionStatClientStatsValue) GoString() string {
	return s.String()
}

func (s *DataSessionStatClientStatsValue) SetActiveCount(v int64) *DataSessionStatClientStatsValue {
	s.ActiveCount = &v
	return s
}

func (s *DataSessionStatClientStatsValue) SetTotalCount(v int64) *DataSessionStatClientStatsValue {
	s.TotalCount = &v
	return s
}

type DataSessionStatDbStatsValue struct {
	// The number of active namespaces.
	//
	// example:
	//
	// 0
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The total number of namespaces.
	//
	// example:
	//
	// 11
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DataSessionStatDbStatsValue) String() string {
	return tea.Prettify(s)
}

func (s DataSessionStatDbStatsValue) GoString() string {
	return s.String()
}

func (s *DataSessionStatDbStatsValue) SetActiveCount(v int64) *DataSessionStatDbStatsValue {
	s.ActiveCount = &v
	return s
}

func (s *DataSessionStatDbStatsValue) SetTotalCount(v int64) *DataSessionStatDbStatsValue {
	s.TotalCount = &v
	return s
}

type DataValue struct {
	// The timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1681975870000
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The value of the metric.
	//
	// example:
	//
	// 478.28
	Value interface{} `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DataValue) String() string {
	return tea.Prettify(s)
}

func (s DataValue) GoString() string {
	return s.String()
}

func (s *DataValue) SetTimestamp(v string) *DataValue {
	s.Timestamp = &v
	return s
}

func (s *DataValue) SetValue(v interface{}) *DataValue {
	s.Value = v
	return s
}

type AddHDMInstanceRequest struct {
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PolarDBPostgreSQL**
	//
	// 	- **Redis**
	//
	// 	- **MongoDB**
	//
	// 	- **PolarDBOracle**
	//
	// 	- **PolarDBX**
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	FlushAccount *string `json:"FlushAccount,omitempty" xml:"FlushAccount,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// yuecq--test****
	InstanceAlias *string `json:"InstanceAlias,omitempty" xml:"InstanceAlias,omitempty"`
	// The type of the instance on which the database is deployed. Valid values:
	//
	// 	- **RDS**: an Alibaba Cloud database instance.
	//
	// 	- **ECS**: an Elastic Compute Service (ECS) instance on which a self-managed database is deployed.
	//
	// 	- **IDC**: a self-managed database instance that is not deployed on Alibaba Cloud.
	//
	// >  IDC refers to your data center.
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS
	InstanceArea *string `json:"InstanceArea,omitempty" xml:"InstanceArea,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The endpoint that is used to access the instance over internal networks.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****.mysql.rds.aliyuncs.com
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The network type of the instance.
	//
	// example:
	//
	// VPC
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	// The password for the username.
	//
	// example:
	//
	// 122****
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The port that is used to access the instance over internal networks.
	//
	// example:
	//
	// 3306
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the instance resides.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The username that is used to log on to the database.
	//
	// example:
	//
	// test****
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
	// The virtual private cloud (VPC) ID.
	//
	// example:
	//
	// vpc-m5e666n89m2bx8jar****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Context *string `json:"__context,omitempty" xml:"__context,omitempty"`
}

func (s AddHDMInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddHDMInstanceRequest) GoString() string {
	return s.String()
}

func (s *AddHDMInstanceRequest) SetEngine(v string) *AddHDMInstanceRequest {
	s.Engine = &v
	return s
}

func (s *AddHDMInstanceRequest) SetFlushAccount(v string) *AddHDMInstanceRequest {
	s.FlushAccount = &v
	return s
}

func (s *AddHDMInstanceRequest) SetInstanceAlias(v string) *AddHDMInstanceRequest {
	s.InstanceAlias = &v
	return s
}

func (s *AddHDMInstanceRequest) SetInstanceArea(v string) *AddHDMInstanceRequest {
	s.InstanceArea = &v
	return s
}

func (s *AddHDMInstanceRequest) SetInstanceId(v string) *AddHDMInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *AddHDMInstanceRequest) SetIp(v string) *AddHDMInstanceRequest {
	s.Ip = &v
	return s
}

func (s *AddHDMInstanceRequest) SetNetworkType(v string) *AddHDMInstanceRequest {
	s.NetworkType = &v
	return s
}

func (s *AddHDMInstanceRequest) SetPassword(v string) *AddHDMInstanceRequest {
	s.Password = &v
	return s
}

func (s *AddHDMInstanceRequest) SetPort(v string) *AddHDMInstanceRequest {
	s.Port = &v
	return s
}

func (s *AddHDMInstanceRequest) SetRegion(v string) *AddHDMInstanceRequest {
	s.Region = &v
	return s
}

func (s *AddHDMInstanceRequest) SetUsername(v string) *AddHDMInstanceRequest {
	s.Username = &v
	return s
}

func (s *AddHDMInstanceRequest) SetVpcId(v string) *AddHDMInstanceRequest {
	s.VpcId = &v
	return s
}

func (s *AddHDMInstanceRequest) SetContext(v string) *AddHDMInstanceRequest {
	s.Context = &v
	return s
}

type AddHDMInstanceResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *AddHDMInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s AddHDMInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddHDMInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *AddHDMInstanceResponseBody) SetCode(v string) *AddHDMInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *AddHDMInstanceResponseBody) SetData(v *AddHDMInstanceResponseBodyData) *AddHDMInstanceResponseBody {
	s.Data = v
	return s
}

func (s *AddHDMInstanceResponseBody) SetMessage(v string) *AddHDMInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *AddHDMInstanceResponseBody) SetRequestId(v string) *AddHDMInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddHDMInstanceResponseBody) SetSuccess(v string) *AddHDMInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *AddHDMInstanceResponseBody) SetSynchro(v string) *AddHDMInstanceResponseBody {
	s.Synchro = &v
	return s
}

type AddHDMInstanceResponseBodyData struct {
	// The user ID of the caller.
	//
	// example:
	//
	// 31063db679****
	CallerUid *string `json:"CallerUid,omitempty" xml:"CallerUid,omitempty"`
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned if the request failed.
	//
	// example:
	//
	// InvalidRequestURL
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The endpoint of the instance.
	//
	// example:
	//
	// rm-de21209****.mysql.rds.aliyuncs.com
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The ID of the instance owner.
	//
	// example:
	//
	// 325352345
	OwnerId *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The port number of the instance that you want to access.
	//
	// example:
	//
	// 3306
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The role of the current API caller.
	//
	// example:
	//
	// master
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The tenant ID.
	//
	// example:
	//
	// L0EPfLS****=SCE00000*****
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// tokenID
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// The unique identifier of the instance.
	//
	// example:
	//
	// hdm_3063db6792965c080a4bcb6e6304****
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The VPC ID.
	//
	// example:
	//
	// vpc-m5e666n89m2bx8jar****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s AddHDMInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddHDMInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddHDMInstanceResponseBodyData) SetCallerUid(v string) *AddHDMInstanceResponseBodyData {
	s.CallerUid = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetCode(v int32) *AddHDMInstanceResponseBodyData {
	s.Code = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetError(v string) *AddHDMInstanceResponseBodyData {
	s.Error = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetInstanceId(v string) *AddHDMInstanceResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetIp(v string) *AddHDMInstanceResponseBodyData {
	s.Ip = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetOwnerId(v string) *AddHDMInstanceResponseBodyData {
	s.OwnerId = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetPort(v int32) *AddHDMInstanceResponseBodyData {
	s.Port = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetRole(v string) *AddHDMInstanceResponseBodyData {
	s.Role = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetTenantId(v string) *AddHDMInstanceResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetToken(v string) *AddHDMInstanceResponseBodyData {
	s.Token = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetUuid(v string) *AddHDMInstanceResponseBodyData {
	s.Uuid = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetVpcId(v string) *AddHDMInstanceResponseBodyData {
	s.VpcId = &v
	return s
}

type AddHDMInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddHDMInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddHDMInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddHDMInstanceResponse) GoString() string {
	return s.String()
}

func (s *AddHDMInstanceResponse) SetHeaders(v map[string]*string) *AddHDMInstanceResponse {
	s.Headers = v
	return s
}

func (s *AddHDMInstanceResponse) SetStatusCode(v int32) *AddHDMInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddHDMInstanceResponse) SetBody(v *AddHDMInstanceResponseBody) *AddHDMInstanceResponse {
	s.Body = v
	return s
}

type CreateCacheAnalysisJobRequest struct {
	// The ID of the backup file. You can call the [DescribeBackups](https://help.aliyun.com/document_detail/61081.html) operation to query the ID.
	//
	// 	- If you need to specify multiple backup file IDs, separate them with commas (,). For example, you can set this parameter to `12345,67890`.
	//
	// 	- If you do not specify this parameter, the system automatically backs up the task and performs cache analysis on the backup file.
	//
	// example:
	//
	// 12345
	BackupSetId *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	// The ID of the ApsaraDB for Redis instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data node on the instance. You can specify this parameter to query the monitoring information about the specified node.
	//
	// >  If you specify the BackupSetId parameter, the system ignores the NodeId parameter. You can call the [DescribeLogicInstanceTopology](https://help.aliyun.com/document_detail/94665.html) operation to query the node ID.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The delimiters used to identify the prefixes of keys. You do not need to specify this parameter if one or more of the following default delimiters are used: `: ; , _ - + @ = | #`
	//
	// example:
	//
	// &
	Separators *string `json:"Separators,omitempty" xml:"Separators,omitempty"`
}

func (s CreateCacheAnalysisJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobRequest) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobRequest) SetBackupSetId(v string) *CreateCacheAnalysisJobRequest {
	s.BackupSetId = &v
	return s
}

func (s *CreateCacheAnalysisJobRequest) SetInstanceId(v string) *CreateCacheAnalysisJobRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateCacheAnalysisJobRequest) SetNodeId(v string) *CreateCacheAnalysisJobRequest {
	s.NodeId = &v
	return s
}

func (s *CreateCacheAnalysisJobRequest) SetSeparators(v string) *CreateCacheAnalysisJobRequest {
	s.Separators = &v
	return s
}

type CreateCacheAnalysisJobResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *CreateCacheAnalysisJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCacheAnalysisJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponseBody) SetCode(v string) *CreateCacheAnalysisJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBody) SetData(v *CreateCacheAnalysisJobResponseBodyData) *CreateCacheAnalysisJobResponseBody {
	s.Data = v
	return s
}

func (s *CreateCacheAnalysisJobResponseBody) SetMessage(v string) *CreateCacheAnalysisJobResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBody) SetRequestId(v string) *CreateCacheAnalysisJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBody) SetSuccess(v string) *CreateCacheAnalysisJobResponseBody {
	s.Success = &v
	return s
}

type CreateCacheAnalysisJobResponseBodyData struct {
	// The number of elements in the key.
	BigKeys *CreateCacheAnalysisJobResponseBodyDataBigKeys `json:"BigKeys,omitempty" xml:"BigKeys,omitempty" type:"Struct"`
	// The instance ID.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the cache analysis task.
	//
	// >  This parameter can be used to query a specific cache analysis task. When you call the CreateCacheAnalysisJob operation, it takes some time to create a cache analysis task. As a result, the analysis results cannot be immediately returned. You can call the [DescribeCacheAnalysisJob](https://help.aliyun.com/document_detail/180983.html) operation to query the analysis results of the specified cache analysis task.
	//
	// example:
	//
	// sf79-sd99-sa37-****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the data node on the instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The state of the cache analysis task. Valid values:
	//
	// 	- **BACKUP**: The data is being backed up.
	//
	// 	- **ANALYZING**: The data is being analyzed.
	//
	// 	- **FINISHED**: The data is analyzed.
	//
	// 	- **FAILED**: An error occurred.
	//
	// example:
	//
	// BACKUP
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
}

func (s CreateCacheAnalysisJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetBigKeys(v *CreateCacheAnalysisJobResponseBodyDataBigKeys) *CreateCacheAnalysisJobResponseBodyData {
	s.BigKeys = v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetInstanceId(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetJobId(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetMessage(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.Message = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetNodeId(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetTaskState(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.TaskState = &v
	return s
}

type CreateCacheAnalysisJobResponseBodyDataBigKeys struct {
	KeyInfo []*CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s CreateCacheAnalysisJobResponseBodyDataBigKeys) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponseBodyDataBigKeys) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeys) SetKeyInfo(v []*CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) *CreateCacheAnalysisJobResponseBodyDataBigKeys {
	s.KeyInfo = v
	return s
}

type CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo struct {
	// The number of bytes that are occupied by the key.
	//
	// example:
	//
	// 12345
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 127
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	//
	// example:
	//
	// hashtable
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
	//
	// example:
	//
	// 1596256542547
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The name of the key.
	//
	// example:
	//
	// task_x****
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the ApsaraDB for Redis instance.
	//
	// example:
	//
	// hash
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetBytes(v int64) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Bytes = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetCount(v int64) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Count = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetDb(v int32) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Db = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetEncoding(v string) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Encoding = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetExpirationTimeMillis(v int64) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetKey(v string) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Key = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetNodeId(v string) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.NodeId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetType(v string) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Type = &v
	return s
}

type CreateCacheAnalysisJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCacheAnalysisJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCacheAnalysisJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponse) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponse) SetHeaders(v map[string]*string) *CreateCacheAnalysisJobResponse {
	s.Headers = v
	return s
}

func (s *CreateCacheAnalysisJobResponse) SetStatusCode(v int32) *CreateCacheAnalysisJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCacheAnalysisJobResponse) SetBody(v *CreateCacheAnalysisJobResponseBody) *CreateCacheAnalysisJobResponse {
	s.Body = v
	return s
}

type CreateCloudBenchTasksRequest struct {
	// The total number of stress testing tasks that you want to create. Valid values: **0*	- to **30**. Default value: **1**.
	//
	// example:
	//
	// 1
	Amount *string `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The ID of the backup set. You can call the [DescribeBackups](https://help.aliyun.com/document_detail/26273.html) operation to query the ID of the backup set.
	//
	// example:
	//
	// 229132
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The time when the backup starts. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// example:
	//
	// 2021-04-23T13:22:14Z
	BackupTime *string `json:"BackupTime,omitempty" xml:"BackupTime,omitempty"`
	// The type of the stress testing client. Valid values:
	//
	// 	- **ECS**: indicates that you must create the [DBGateway](https://help.aliyun.com/document_detail/64905.html).
	//
	// 	- **DAS_ECS**: indicates that DAS automatically purchases and deploys an Elastic Compute Service (ECS) instance for stress testing.
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The description of the stress testing task.
	//
	// This parameter is required.
	//
	// if can be null:
	// false
	//
	// example:
	//
	// test-das-bench-0501
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The endpoint of the destination instance. The specified endpoint must be the endpoint of an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance.
	//
	// >  This parameter takes effect only if you set **DstType*	- to **ConnectionString**.
	//
	// example:
	//
	// rm-de21209****.mysql.rds.aliyuncs.com
	DstConnectionString *string `json:"DstConnectionString,omitempty" xml:"DstConnectionString,omitempty"`
	// The ID of the destination instance. The instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance. You can call the [GetInstanceInspections](https://help.aliyun.com/document_detail/202857.html) operation to query the ID.
	//
	// >  This parameter must be specified if you set **DstType*	- to **Instance**.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	DstInstanceId *string `json:"DstInstanceId,omitempty" xml:"DstInstanceId,omitempty"`
	// The port number of the instance that you want to access.
	//
	// >  This parameter takes effect only if you set **DstType*	- to **ConnectionString**.
	//
	// example:
	//
	// 3306
	DstPort *string `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	// The name of the privileged account for the destination instance.
	//
	// example:
	//
	// root
	DstSuperAccount *string `json:"DstSuperAccount,omitempty" xml:"DstSuperAccount,omitempty"`
	// The password of the privileged account for the destination instance.
	//
	// example:
	//
	// test123
	DstSuperPassword *string `json:"DstSuperPassword,omitempty" xml:"DstSuperPassword,omitempty"`
	// The type of the identifier that is used to indicate the destination instance. Valid values:
	//
	// 	- **Instance**: the instance ID. This is the default value.
	//
	// 	- **ConnectionString**: the endpoint of the instance.
	//
	// example:
	//
	// Instance
	DstType *string `json:"DstType,omitempty" xml:"DstType,omitempty"`
	// The specification of the Data Transmission Service (DTS) migration task. You can call the [DescribeCloudbenchTask](https://help.aliyun.com/document_detail/230669.html) operation to query the specification.
	//
	// >  You must migrate the basic data in the source instance to the destination instance before you start a stress testing task. When you create a DTS migration task, you must specify this parameter.
	//
	// example:
	//
	// medium
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The ID of the DTS migration task. You can call the [ConfigureDtsJob](https://help.aliyun.com/document_detail/208399.html) operation to query the ID.
	//
	// >  After a DTS migration task is created in the DTS console, you must specify this parameter.
	//
	// example:
	//
	// 23127
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The state that specifies the last operation that is performed for the stress testing task. Valid values:
	//
	// 	- **WAIT_TARGET**: prepares the destination instance
	//
	// 	- **WAIT_DBGATEWAY**: prepares the DBGateway
	//
	// 	- **WAIT_SQL**: prepares the full SQL statistics
	//
	// 	- **WAIT_LOGIC**: prepares to replay the traffic
	//
	// >  When the state of a stress testing task changes to the state that is specified by the EndState parameter, the stress testing task becomes completed.
	//
	// example:
	//
	// WAIT_TARGET
	EndState *string `json:"EndState,omitempty" xml:"EndState,omitempty"`
	// The ID of the virtual private cloud (VPC) in which the database gateway (DBGateway) is deployed.
	//
	// >  This parameter must be specified if you set **ClientType*	- to **ECS**.
	//
	// example:
	//
	// vpc-t4nsnwvpbc1h76ja4****
	GatewayVpcId *string `json:"GatewayVpcId,omitempty" xml:"GatewayVpcId,omitempty"`
	// The IP address or domain name of the DBGateway.
	//
	// >  This parameter must be specified if you set **ClientType*	- to **ECS**.
	//
	// example:
	//
	// 172.30.XX.XX
	GatewayVpcIp *string `json:"GatewayVpcIp,omitempty" xml:"GatewayVpcIp,omitempty"`
	// The rate at which the traffic captured from the source instance is replayed on the destination instance. The value must be a positive integer. Valid values: **1*	- to **30**. Default value: **1**.
	//
	// example:
	//
	// 1
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The duration of the stress testing task for which the traffic is captured from the source instance. Unit: milliseconds.
	//
	// example:
	//
	// 86400000
	RequestDuration *string `json:"RequestDuration,omitempty" xml:"RequestDuration,omitempty"`
	// The time when the stress testing task ends. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1608888296001
	RequestEndTime *string `json:"RequestEndTime,omitempty" xml:"RequestEndTime,omitempty"`
	// The time when the stress testing task starts. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1608888296000
	RequestStartTime *string `json:"RequestStartTime,omitempty" xml:"RequestStartTime,omitempty"`
	// The duration within which the traffic generation stressing test takes effect. Unit: milliseconds.
	//
	// >  This parameter must be specified if you set **TaskType*	- to **smart pressure test**.
	//
	// example:
	//
	// 86400000
	SmartPressureTime *string `json:"SmartPressureTime,omitempty" xml:"SmartPressureTime,omitempty"`
	// The ID of the source instance. The instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance. You can call the [GetInstanceInspections](https://help.aliyun.com/document_detail/202857.html) operation to query the ID.
	//
	// >  This parameter must be specified if you set **DstType*	- to **Instance**.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	SrcInstanceId *string `json:"SrcInstanceId,omitempty" xml:"SrcInstanceId,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	SrcPublicIp *string `json:"SrcPublicIp,omitempty" xml:"SrcPublicIp,omitempty"`
	// The name of the privileged account for the source instance. Set the value to **admin**.
	//
	// >  This parameter must be specified if you set **DstType*	- to **Instance**.
	//
	// example:
	//
	// admin
	SrcSuperAccount *string `json:"SrcSuperAccount,omitempty" xml:"SrcSuperAccount,omitempty"`
	// The password of the privileged account for the source instance.
	//
	// >  This parameter must be specified if you set **DstType*	- to **Instance**.
	//
	// example:
	//
	// test123
	SrcSuperPassword *string `json:"SrcSuperPassword,omitempty" xml:"SrcSuperPassword,omitempty"`
	// The type of the stress testing task. Valid values:
	//
	// 	- **pressure test*	- (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
	//
	// 	- **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
	//
	// This parameter is required.
	//
	// example:
	//
	// pressure test
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The temporary directory generated for stress testing.
	//
	// example:
	//
	// /tmp/bench/
	WorkDir *string `json:"WorkDir,omitempty" xml:"WorkDir,omitempty"`
}

func (s CreateCloudBenchTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudBenchTasksRequest) GoString() string {
	return s.String()
}

func (s *CreateCloudBenchTasksRequest) SetAmount(v string) *CreateCloudBenchTasksRequest {
	s.Amount = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetBackupId(v string) *CreateCloudBenchTasksRequest {
	s.BackupId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetBackupTime(v string) *CreateCloudBenchTasksRequest {
	s.BackupTime = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetClientType(v string) *CreateCloudBenchTasksRequest {
	s.ClientType = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDescription(v string) *CreateCloudBenchTasksRequest {
	s.Description = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstConnectionString(v string) *CreateCloudBenchTasksRequest {
	s.DstConnectionString = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstInstanceId(v string) *CreateCloudBenchTasksRequest {
	s.DstInstanceId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstPort(v string) *CreateCloudBenchTasksRequest {
	s.DstPort = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstSuperAccount(v string) *CreateCloudBenchTasksRequest {
	s.DstSuperAccount = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstSuperPassword(v string) *CreateCloudBenchTasksRequest {
	s.DstSuperPassword = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstType(v string) *CreateCloudBenchTasksRequest {
	s.DstType = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDtsJobClass(v string) *CreateCloudBenchTasksRequest {
	s.DtsJobClass = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDtsJobId(v string) *CreateCloudBenchTasksRequest {
	s.DtsJobId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetEndState(v string) *CreateCloudBenchTasksRequest {
	s.EndState = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetGatewayVpcId(v string) *CreateCloudBenchTasksRequest {
	s.GatewayVpcId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetGatewayVpcIp(v string) *CreateCloudBenchTasksRequest {
	s.GatewayVpcIp = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetRate(v string) *CreateCloudBenchTasksRequest {
	s.Rate = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetRequestDuration(v string) *CreateCloudBenchTasksRequest {
	s.RequestDuration = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetRequestEndTime(v string) *CreateCloudBenchTasksRequest {
	s.RequestEndTime = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetRequestStartTime(v string) *CreateCloudBenchTasksRequest {
	s.RequestStartTime = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSmartPressureTime(v string) *CreateCloudBenchTasksRequest {
	s.SmartPressureTime = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSrcInstanceId(v string) *CreateCloudBenchTasksRequest {
	s.SrcInstanceId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSrcPublicIp(v string) *CreateCloudBenchTasksRequest {
	s.SrcPublicIp = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSrcSuperAccount(v string) *CreateCloudBenchTasksRequest {
	s.SrcSuperAccount = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSrcSuperPassword(v string) *CreateCloudBenchTasksRequest {
	s.SrcSuperPassword = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetTaskType(v string) *CreateCloudBenchTasksRequest {
	s.TaskType = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetWorkDir(v string) *CreateCloudBenchTasksRequest {
	s.WorkDir = &v
	return s
}

type CreateCloudBenchTasksResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *CreateCloudBenchTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCloudBenchTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudBenchTasksResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCloudBenchTasksResponseBody) SetCode(v string) *CreateCloudBenchTasksResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCloudBenchTasksResponseBody) SetData(v *CreateCloudBenchTasksResponseBodyData) *CreateCloudBenchTasksResponseBody {
	s.Data = v
	return s
}

func (s *CreateCloudBenchTasksResponseBody) SetMessage(v string) *CreateCloudBenchTasksResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCloudBenchTasksResponseBody) SetRequestId(v string) *CreateCloudBenchTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCloudBenchTasksResponseBody) SetSuccess(v string) *CreateCloudBenchTasksResponseBody {
	s.Success = &v
	return s
}

type CreateCloudBenchTasksResponseBodyData struct {
	TaskIds []*string `json:"taskIds,omitempty" xml:"taskIds,omitempty" type:"Repeated"`
}

func (s CreateCloudBenchTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudBenchTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateCloudBenchTasksResponseBodyData) SetTaskIds(v []*string) *CreateCloudBenchTasksResponseBodyData {
	s.TaskIds = v
	return s
}

type CreateCloudBenchTasksResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCloudBenchTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCloudBenchTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudBenchTasksResponse) GoString() string {
	return s.String()
}

func (s *CreateCloudBenchTasksResponse) SetHeaders(v map[string]*string) *CreateCloudBenchTasksResponse {
	s.Headers = v
	return s
}

func (s *CreateCloudBenchTasksResponse) SetStatusCode(v int32) *CreateCloudBenchTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCloudBenchTasksResponse) SetBody(v *CreateCloudBenchTasksResponseBody) *CreateCloudBenchTasksResponse {
	s.Body = v
	return s
}

type CreateDiagnosticReportRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to create the diagnostic report. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be later than the end time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1596177993001
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The beginning of the time range to create the diagnostic report. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1596177993000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateDiagnosticReportRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportRequest) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportRequest) SetDBInstanceId(v string) *CreateDiagnosticReportRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetEndTime(v string) *CreateDiagnosticReportRequest {
	s.EndTime = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetStartTime(v string) *CreateDiagnosticReportRequest {
	s.StartTime = &v
	return s
}

type CreateDiagnosticReportResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	//
	// example:
	//
	// 70af71852fcdf2c5dc7b90596e2cf05b
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ac544623-f6ad-45fd-9a74-9be3db65****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDiagnosticReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponseBody) SetCode(v string) *CreateDiagnosticReportResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetData(v string) *CreateDiagnosticReportResponseBody {
	s.Data = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetMessage(v string) *CreateDiagnosticReportResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetRequestId(v string) *CreateDiagnosticReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetSuccess(v string) *CreateDiagnosticReportResponseBody {
	s.Success = &v
	return s
}

type CreateDiagnosticReportResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDiagnosticReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDiagnosticReportResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponse) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponse) SetHeaders(v map[string]*string) *CreateDiagnosticReportResponse {
	s.Headers = v
	return s
}

func (s *CreateDiagnosticReportResponse) SetStatusCode(v int32) *CreateDiagnosticReportResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDiagnosticReportResponse) SetBody(v *CreateDiagnosticReportResponseBody) *CreateDiagnosticReportResponse {
	s.Body = v
	return s
}

type CreateKillInstanceSessionTaskRequest struct {
	// The database account that has the permissions to terminate sessions.
	//
	// This parameter is required.
	//
	// example:
	//
	// testUser
	DbUser *string `json:"DbUser,omitempty" xml:"DbUser,omitempty"`
	// The password of the database account.
	//
	// This parameter is required.
	//
	// example:
	//
	// testPassword
	DbUserPassword *string `json:"DbUserPassword,omitempty" xml:"DbUserPassword,omitempty"`
	// The account whose sessions do not need to be terminated.
	//
	// >  Set this parameter to a JSON array. Separate database accounts with commas (,). Example: [\\"Database account 1\\",\\"Database account 2\\"].
	//
	// example:
	//
	// [\\"db_user1\\",\\"db_user2\\"]
	IgnoredUsers *string `json:"IgnoredUsers,omitempty" xml:"IgnoredUsers,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies whether to terminate all sessions.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  If you set this parameter to **true**, sessions of the accounts that are specified by **IgnoredUsers**, sessions of internal O\\&M accounts of Alibaba Cloud, and **Binlog Dump*	- sessions are not terminated.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	KillAllSessions *bool `json:"KillAllSessions,omitempty" xml:"KillAllSessions,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster. If you do not specify a node ID and set **KillAllSessions*	- to **true**, the system traverses all nodes in the PolarDB for MySQL cluster and terminates the active sessions on each node.
	//
	// example:
	//
	// pi-bp1v203xzzh0a****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The IDs of sessions that need to be terminated.
	//
	// >  Set this parameter to a JSON array. Separate session IDs with commas (,). Example: [\\"Session ID1\\",\\"Session ID2\\"]. If **KillAllSessions*	- is set to **true**, this parameter does not take effect.
	//
	// example:
	//
	// [10805639,10805623,10805645,10805553,10805566,10805616]
	SessionIds *string `json:"SessionIds,omitempty" xml:"SessionIds,omitempty"`
}

func (s CreateKillInstanceSessionTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskRequest) SetDbUser(v string) *CreateKillInstanceSessionTaskRequest {
	s.DbUser = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetDbUserPassword(v string) *CreateKillInstanceSessionTaskRequest {
	s.DbUserPassword = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetIgnoredUsers(v string) *CreateKillInstanceSessionTaskRequest {
	s.IgnoredUsers = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetInstanceId(v string) *CreateKillInstanceSessionTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetKillAllSessions(v bool) *CreateKillInstanceSessionTaskRequest {
	s.KillAllSessions = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetNodeId(v string) *CreateKillInstanceSessionTaskRequest {
	s.NodeId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetSessionIds(v string) *CreateKillInstanceSessionTaskRequest {
	s.SessionIds = &v
	return s
}

type CreateKillInstanceSessionTaskResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the task that terminated the sessions.
	//
	// >  If the sessions of a PolarDB for MySQL cluster were terminated, **NodeId*	- is left empty, and **KillAllSessions*	- is set to **true**, the task IDs are returned based on the number of nodes. Example: ["f77d535b45405bd462b21caa3ee8\\*\\*\\*\\*", "e93ab549abb081eb5dcd5396a29b\\*\\*\\*\\*"].
	//
	// example:
	//
	// f77d535b45405bd462b21caa3ee8****
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateKillInstanceSessionTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetCode(v int64) *CreateKillInstanceSessionTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetData(v string) *CreateKillInstanceSessionTaskResponseBody {
	s.Data = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetMessage(v string) *CreateKillInstanceSessionTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetRequestId(v string) *CreateKillInstanceSessionTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetSuccess(v bool) *CreateKillInstanceSessionTaskResponseBody {
	s.Success = &v
	return s
}

type CreateKillInstanceSessionTaskResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateKillInstanceSessionTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateKillInstanceSessionTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskResponse) SetHeaders(v map[string]*string) *CreateKillInstanceSessionTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateKillInstanceSessionTaskResponse) SetStatusCode(v int32) *CreateKillInstanceSessionTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponse) SetBody(v *CreateKillInstanceSessionTaskResponseBody) *CreateKillInstanceSessionTaskResponse {
	s.Body = v
	return s
}

type CreateKillInstanceSessionTaskWithMaintainUserRequest struct {
	IgnoredUsers *string `json:"IgnoredUsers,omitempty" xml:"IgnoredUsers,omitempty"`
	// This parameter is required.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	KillAllSessions *bool   `json:"KillAllSessions,omitempty" xml:"KillAllSessions,omitempty"`
	NodeId          *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	SessionIds      *string `json:"SessionIds,omitempty" xml:"SessionIds,omitempty"`
}

func (s CreateKillInstanceSessionTaskWithMaintainUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskWithMaintainUserRequest) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetIgnoredUsers(v string) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.IgnoredUsers = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetInstanceId(v string) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetKillAllSessions(v bool) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.KillAllSessions = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetNodeId(v string) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.NodeId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetSessionIds(v string) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.SessionIds = &v
	return s
}

type CreateKillInstanceSessionTaskWithMaintainUserResponseBody struct {
	Code      *int64  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateKillInstanceSessionTaskWithMaintainUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskWithMaintainUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetCode(v int64) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.Code = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetData(v string) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.Data = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetMessage(v string) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.Message = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetRequestId(v string) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetSuccess(v bool) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.Success = &v
	return s
}

type CreateKillInstanceSessionTaskWithMaintainUserResponse struct {
	Headers    map[string]*string                                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateKillInstanceSessionTaskWithMaintainUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateKillInstanceSessionTaskWithMaintainUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskWithMaintainUserResponse) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponse) SetHeaders(v map[string]*string) *CreateKillInstanceSessionTaskWithMaintainUserResponse {
	s.Headers = v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponse) SetStatusCode(v int32) *CreateKillInstanceSessionTaskWithMaintainUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponse) SetBody(v *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) *CreateKillInstanceSessionTaskWithMaintainUserResponse {
	s.Body = v
	return s
}

type CreateLatestDeadLockAnalysisRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// pc-bp1u5mas9exx7****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// pi-bp16v3824rt73****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s CreateLatestDeadLockAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLatestDeadLockAnalysisRequest) GoString() string {
	return s.String()
}

func (s *CreateLatestDeadLockAnalysisRequest) SetInstanceId(v string) *CreateLatestDeadLockAnalysisRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateLatestDeadLockAnalysisRequest) SetNodeId(v string) *CreateLatestDeadLockAnalysisRequest {
	s.NodeId = &v
	return s
}

type CreateLatestDeadLockAnalysisResponseBody struct {
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateLatestDeadLockAnalysisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLatestDeadLockAnalysisResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLatestDeadLockAnalysisResponseBody) SetCode(v int64) *CreateLatestDeadLockAnalysisResponseBody {
	s.Code = &v
	return s
}

func (s *CreateLatestDeadLockAnalysisResponseBody) SetData(v bool) *CreateLatestDeadLockAnalysisResponseBody {
	s.Data = &v
	return s
}

func (s *CreateLatestDeadLockAnalysisResponseBody) SetMessage(v string) *CreateLatestDeadLockAnalysisResponseBody {
	s.Message = &v
	return s
}

func (s *CreateLatestDeadLockAnalysisResponseBody) SetRequestId(v string) *CreateLatestDeadLockAnalysisResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLatestDeadLockAnalysisResponseBody) SetSuccess(v bool) *CreateLatestDeadLockAnalysisResponseBody {
	s.Success = &v
	return s
}

type CreateLatestDeadLockAnalysisResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLatestDeadLockAnalysisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLatestDeadLockAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLatestDeadLockAnalysisResponse) GoString() string {
	return s.String()
}

func (s *CreateLatestDeadLockAnalysisResponse) SetHeaders(v map[string]*string) *CreateLatestDeadLockAnalysisResponse {
	s.Headers = v
	return s
}

func (s *CreateLatestDeadLockAnalysisResponse) SetStatusCode(v int32) *CreateLatestDeadLockAnalysisResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLatestDeadLockAnalysisResponse) SetBody(v *CreateLatestDeadLockAnalysisResponseBody) *CreateLatestDeadLockAnalysisResponse {
	s.Body = v
	return s
}

type CreateQueryOptimizeTagRequest struct {
	// The remarks.
	//
	// The remarks can be 1 to 300 characters in length.
	//
	// example:
	//
	// Slow SQL queries of offline synchronization. No optimization is required.
	Comments *string `json:"Comments,omitempty" xml:"Comments,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**: ApsaraDB RDS for MySQL
	//
	// 	- **PolarDBMySQL**: PolarDB for MySQL
	//
	// 	- **PostgreSQL**: ApsaraDB RDS for PostgreSQL
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The SQL template IDs. You can call the [GetQueryOptimizeExecErrorStats](https://help.aliyun.com/document_detail/405261.html) operation to obtain the SQL template ID. Separate multiple SQL template IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// 6068ce044e3dc9b903979672fb0b69df,d12515c015fc9f41a0778a9e1de0e941
	SqlIds *string `json:"SqlIds,omitempty" xml:"SqlIds,omitempty"`
	// The status of **Tags**. Valid values:
	//
	// 	- **0**: removes all tags added to the SQL templates that are specified by **SqlIds*	- and leaves **Tags*	- empty.
	//
	// 	- **1**: adds the tags specified by **Tags*	- to the SQL templates that are specified by **SqlIds**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The SQL tags. Separate multiple SQL tags with commas (,). Valid values:
	//
	// 	- **DAS_IMPORTANT**: The SQL template is important.
	//
	// 	- **DAS_NOT_IMPORTANT**: The SQL template is unimportant.
	//
	// 	- **USER_IGNORE**: The scheduling of the SQL template does not need to be optimized.
	//
	// 	- **DAS_IN_PLAN**: The scheduling of the SQL template needs to be optimized.
	//
	// This parameter is required.
	//
	// example:
	//
	// DAS_IN_PLAN,DAS_NOT_IMPORTANT
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s CreateQueryOptimizeTagRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQueryOptimizeTagRequest) GoString() string {
	return s.String()
}

func (s *CreateQueryOptimizeTagRequest) SetComments(v string) *CreateQueryOptimizeTagRequest {
	s.Comments = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetEngine(v string) *CreateQueryOptimizeTagRequest {
	s.Engine = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetInstanceId(v string) *CreateQueryOptimizeTagRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetSqlIds(v string) *CreateQueryOptimizeTagRequest {
	s.SqlIds = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetStatus(v int32) *CreateQueryOptimizeTagRequest {
	s.Status = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetTags(v string) *CreateQueryOptimizeTagRequest {
	s.Tags = &v
	return s
}

type CreateQueryOptimizeTagResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the tags were added to the SQL templates.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateQueryOptimizeTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQueryOptimizeTagResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQueryOptimizeTagResponseBody) SetCode(v string) *CreateQueryOptimizeTagResponseBody {
	s.Code = &v
	return s
}

func (s *CreateQueryOptimizeTagResponseBody) SetData(v bool) *CreateQueryOptimizeTagResponseBody {
	s.Data = &v
	return s
}

func (s *CreateQueryOptimizeTagResponseBody) SetMessage(v string) *CreateQueryOptimizeTagResponseBody {
	s.Message = &v
	return s
}

func (s *CreateQueryOptimizeTagResponseBody) SetRequestId(v string) *CreateQueryOptimizeTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateQueryOptimizeTagResponseBody) SetSuccess(v string) *CreateQueryOptimizeTagResponseBody {
	s.Success = &v
	return s
}

type CreateQueryOptimizeTagResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateQueryOptimizeTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateQueryOptimizeTagResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQueryOptimizeTagResponse) GoString() string {
	return s.String()
}

func (s *CreateQueryOptimizeTagResponse) SetHeaders(v map[string]*string) *CreateQueryOptimizeTagResponse {
	s.Headers = v
	return s
}

func (s *CreateQueryOptimizeTagResponse) SetStatusCode(v int32) *CreateQueryOptimizeTagResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateQueryOptimizeTagResponse) SetBody(v *CreateQueryOptimizeTagResponseBody) *CreateQueryOptimizeTagResponse {
	s.Body = v
	return s
}

type CreateRequestDiagnosisRequest struct {
	// The name of the database.
	//
	// This parameter is required.
	//
	// example:
	//
	// das
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-0iwhhl8gx0ld6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified for PolarDB for MySQL, PolarDB for PostgreSQL (Compatible with Oracle), and ApsaraDB for MongoDB instances.
	//
	// example:
	//
	// 202****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The SQL statement that you want to diagnose.
	//
	// This parameter is required.
	//
	// example:
	//
	// select 	- from test where name = \\"mockUser\\"
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
}

func (s CreateRequestDiagnosisRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRequestDiagnosisRequest) GoString() string {
	return s.String()
}

func (s *CreateRequestDiagnosisRequest) SetDatabase(v string) *CreateRequestDiagnosisRequest {
	s.Database = &v
	return s
}

func (s *CreateRequestDiagnosisRequest) SetInstanceId(v string) *CreateRequestDiagnosisRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateRequestDiagnosisRequest) SetNodeId(v string) *CreateRequestDiagnosisRequest {
	s.NodeId = &v
	return s
}

func (s *CreateRequestDiagnosisRequest) SetSql(v string) *CreateRequestDiagnosisRequest {
	s.Sql = &v
	return s
}

type CreateRequestDiagnosisResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The diagnostics ID, which is the unique identifier of the diagnosis. This parameter can be used to query the result of the diagnosis.
	//
	// example:
	//
	// 61820b594664275c4429****
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 800FBAF5-A539-5B97-A09E-C63AB2F7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateRequestDiagnosisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRequestDiagnosisResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRequestDiagnosisResponseBody) SetCode(v string) *CreateRequestDiagnosisResponseBody {
	s.Code = &v
	return s
}

func (s *CreateRequestDiagnosisResponseBody) SetData(v string) *CreateRequestDiagnosisResponseBody {
	s.Data = &v
	return s
}

func (s *CreateRequestDiagnosisResponseBody) SetMessage(v string) *CreateRequestDiagnosisResponseBody {
	s.Message = &v
	return s
}

func (s *CreateRequestDiagnosisResponseBody) SetRequestId(v string) *CreateRequestDiagnosisResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRequestDiagnosisResponseBody) SetSuccess(v string) *CreateRequestDiagnosisResponseBody {
	s.Success = &v
	return s
}

type CreateRequestDiagnosisResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRequestDiagnosisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRequestDiagnosisResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRequestDiagnosisResponse) GoString() string {
	return s.String()
}

func (s *CreateRequestDiagnosisResponse) SetHeaders(v map[string]*string) *CreateRequestDiagnosisResponse {
	s.Headers = v
	return s
}

func (s *CreateRequestDiagnosisResponse) SetStatusCode(v int32) *CreateRequestDiagnosisResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRequestDiagnosisResponse) SetBody(v *CreateRequestDiagnosisResponseBody) *CreateRequestDiagnosisResponse {
	s.Body = v
	return s
}

type CreateSqlLogTaskRequest struct {
	// The end of the time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
	//
	// example:
	//
	// 1608888296000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter conditions.
	Filters []*CreateSqlLogTaskRequestFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The ID of the database instance.
	//
	// example:
	//
	// pc-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// test01
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The node ID.
	//
	// >  This parameter is available only for instances that run in a cluster architecture. You can specify this parameter to query the offline tasks of a specific node. By default, if this parameter is not specified, the information about the offline tasks of the primary node is returned.
	//
	// example:
	//
	// pi-uf6k5f6g3912i0dqz
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The role of the node of the PolarDB-X 2.0 database instance. Valid values:
	//
	// 	- **polarx_cn**: compute node
	//
	// 	- **polarx_dn**: data node
	//
	// example:
	//
	// polarx_cn
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The beginning of the time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
	//
	// example:
	//
	// 1596177993000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The type of the task. Valid values:
	//
	// 	- **Export**
	//
	// 	- **Query**
	//
	// 	- **Insight**
	//
	// example:
	//
	// Export
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateSqlLogTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSqlLogTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateSqlLogTaskRequest) SetEndTime(v int64) *CreateSqlLogTaskRequest {
	s.EndTime = &v
	return s
}

func (s *CreateSqlLogTaskRequest) SetFilters(v []*CreateSqlLogTaskRequestFilters) *CreateSqlLogTaskRequest {
	s.Filters = v
	return s
}

func (s *CreateSqlLogTaskRequest) SetInstanceId(v string) *CreateSqlLogTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSqlLogTaskRequest) SetName(v string) *CreateSqlLogTaskRequest {
	s.Name = &v
	return s
}

func (s *CreateSqlLogTaskRequest) SetNodeId(v string) *CreateSqlLogTaskRequest {
	s.NodeId = &v
	return s
}

func (s *CreateSqlLogTaskRequest) SetRole(v string) *CreateSqlLogTaskRequest {
	s.Role = &v
	return s
}

func (s *CreateSqlLogTaskRequest) SetStartTime(v int64) *CreateSqlLogTaskRequest {
	s.StartTime = &v
	return s
}

func (s *CreateSqlLogTaskRequest) SetType(v string) *CreateSqlLogTaskRequest {
	s.Type = &v
	return s
}

type CreateSqlLogTaskRequestFilters struct {
	// The name of the filter parameter.
	//
	// >  For more information about the supported filter parameters and their valid values, see the following **supplement about the Key parameter**.
	//
	// example:
	//
	// KeyWords
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the filter parameter.
	//
	// example:
	//
	// select
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateSqlLogTaskRequestFilters) String() string {
	return tea.Prettify(s)
}

func (s CreateSqlLogTaskRequestFilters) GoString() string {
	return s.String()
}

func (s *CreateSqlLogTaskRequestFilters) SetKey(v string) *CreateSqlLogTaskRequestFilters {
	s.Key = &v
	return s
}

func (s *CreateSqlLogTaskRequestFilters) SetValue(v string) *CreateSqlLogTaskRequestFilters {
	s.Value = &v
	return s
}

type CreateSqlLogTaskResponseBody struct {
	// The response code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *CreateSqlLogTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, error information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 83D9D59B-057A-54A9-BFF9-CF2B42F05645
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSqlLogTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSqlLogTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSqlLogTaskResponseBody) SetCode(v string) *CreateSqlLogTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSqlLogTaskResponseBody) SetData(v *CreateSqlLogTaskResponseBodyData) *CreateSqlLogTaskResponseBody {
	s.Data = v
	return s
}

func (s *CreateSqlLogTaskResponseBody) SetMessage(v string) *CreateSqlLogTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSqlLogTaskResponseBody) SetRequestId(v string) *CreateSqlLogTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSqlLogTaskResponseBody) SetSuccess(v string) *CreateSqlLogTaskResponseBody {
	s.Success = &v
	return s
}

type CreateSqlLogTaskResponseBodyData struct {
	// The time when the task was created. This value is a UNIX timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1681363254423
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1608888296000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The ID of the database instance.
	//
	// example:
	//
	// pc-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// Export_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1596177993000
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The state of the task. Valid values:
	//
	// 	- **INIT**: The task is to be scheduled.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **FAILED**: The task failed.
	//
	// 	- **CANCELED**: The task is canceled.
	//
	// 	- **COMPLETED**: The task is complete.
	//
	// >  You can view the result of a task that is in the **COMPLETED*	- state.
	//
	// example:
	//
	// COMPLETED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 54f8041743ca3a9ac5cb9342d050527c
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateSqlLogTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateSqlLogTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateSqlLogTaskResponseBodyData) SetCreateTime(v int64) *CreateSqlLogTaskResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *CreateSqlLogTaskResponseBodyData) SetEnd(v int64) *CreateSqlLogTaskResponseBodyData {
	s.End = &v
	return s
}

func (s *CreateSqlLogTaskResponseBodyData) SetInstanceId(v string) *CreateSqlLogTaskResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *CreateSqlLogTaskResponseBodyData) SetName(v string) *CreateSqlLogTaskResponseBodyData {
	s.Name = &v
	return s
}

func (s *CreateSqlLogTaskResponseBodyData) SetStart(v int64) *CreateSqlLogTaskResponseBodyData {
	s.Start = &v
	return s
}

func (s *CreateSqlLogTaskResponseBodyData) SetStatus(v string) *CreateSqlLogTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *CreateSqlLogTaskResponseBodyData) SetTaskId(v string) *CreateSqlLogTaskResponseBodyData {
	s.TaskId = &v
	return s
}

type CreateSqlLogTaskResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSqlLogTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSqlLogTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSqlLogTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateSqlLogTaskResponse) SetHeaders(v map[string]*string) *CreateSqlLogTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateSqlLogTaskResponse) SetStatusCode(v int32) *CreateSqlLogTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSqlLogTaskResponse) SetBody(v *CreateSqlLogTaskResponseBody) *CreateSqlLogTaskResponse {
	s.Body = v
	return s
}

type CreateStorageAnalysisTaskRequest struct {
	// The database name. If you specify a database, the operation analyzes the storage usage of the specified database.
	//
	// example:
	//
	// testdb01
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID. For ApsaraDB for MongoDB instances, you can use this parameter to specify a node for storage analysis. You can call the [DescribeRoleZoneInfo](https://help.aliyun.com/document_detail/123802.html) operation to query the information about nodes of an ApsaraDB for MongoDB instance.
	//
	// 	- If you set this parameter to a value in the **InsName*	- format, such as `d-bp1872fa24d5****`, you can call this operation to analyze the hidden node that corresponds to the node ID.
	//
	// 	- If you set this parameter to a value in the `InsName#RoleId` format, such as `d-bp1872fa24d5****#299****5`, you can call this operation to analyze the specified node.
	//
	// >  If you run a storage analysis task on an ApsaraDB for MongoDB replica set instance and you do not specify this parameter, only the hidden node of the instance is analyzed by default. If you run a storage analysis task on an ApsaraDB for MongoDB sharded cluster instance, we recommend that you set this parameter to specify a node.
	//
	// example:
	//
	// 23302528
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The table name. If you specify a table in the specified database, the operation analyzes the storage usage of the specified table. If you specify a table, you must also specify the database to which the table belongs by using **DbName**.
	//
	// example:
	//
	// test_table
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s CreateStorageAnalysisTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageAnalysisTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateStorageAnalysisTaskRequest) SetDbName(v string) *CreateStorageAnalysisTaskRequest {
	s.DbName = &v
	return s
}

func (s *CreateStorageAnalysisTaskRequest) SetInstanceId(v string) *CreateStorageAnalysisTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateStorageAnalysisTaskRequest) SetNodeId(v string) *CreateStorageAnalysisTaskRequest {
	s.NodeId = &v
	return s
}

func (s *CreateStorageAnalysisTaskRequest) SetTableName(v string) *CreateStorageAnalysisTaskRequest {
	s.TableName = &v
	return s
}

type CreateStorageAnalysisTaskResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *CreateStorageAnalysisTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request is successful, **Successful*	- is returned. Otherwise, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateStorageAnalysisTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageAnalysisTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStorageAnalysisTaskResponseBody) SetCode(v int64) *CreateStorageAnalysisTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateStorageAnalysisTaskResponseBody) SetData(v *CreateStorageAnalysisTaskResponseBodyData) *CreateStorageAnalysisTaskResponseBody {
	s.Data = v
	return s
}

func (s *CreateStorageAnalysisTaskResponseBody) SetMessage(v string) *CreateStorageAnalysisTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateStorageAnalysisTaskResponseBody) SetRequestId(v string) *CreateStorageAnalysisTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStorageAnalysisTaskResponseBody) SetSuccess(v bool) *CreateStorageAnalysisTaskResponseBody {
	s.Success = &v
	return s
}

type CreateStorageAnalysisTaskResponseBodyData struct {
	// Indicates whether the task is created. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	CreateTaskSuccess *bool `json:"CreateTaskSuccess,omitempty" xml:"CreateTaskSuccess,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// unknown error
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 910f83f4b96df0524ddc5749f61539f8
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateStorageAnalysisTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageAnalysisTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateStorageAnalysisTaskResponseBodyData) SetCreateTaskSuccess(v bool) *CreateStorageAnalysisTaskResponseBodyData {
	s.CreateTaskSuccess = &v
	return s
}

func (s *CreateStorageAnalysisTaskResponseBodyData) SetErrorMessage(v string) *CreateStorageAnalysisTaskResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *CreateStorageAnalysisTaskResponseBodyData) SetTaskId(v string) *CreateStorageAnalysisTaskResponseBodyData {
	s.TaskId = &v
	return s
}

type CreateStorageAnalysisTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStorageAnalysisTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStorageAnalysisTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageAnalysisTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateStorageAnalysisTaskResponse) SetHeaders(v map[string]*string) *CreateStorageAnalysisTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateStorageAnalysisTaskResponse) SetStatusCode(v int32) *CreateStorageAnalysisTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStorageAnalysisTaskResponse) SetBody(v *CreateStorageAnalysisTaskResponseBody) *CreateStorageAnalysisTaskResponse {
	s.Body = v
	return s
}

type DeleteCloudBenchTaskRequest struct {
	// The ID of the stress testing task. You can call the [DescribeCloudBenchTasks](https://help.aliyun.com/document_detail/230670.html) operation to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// e5cec704-0518-430f-8263-76f4dcds****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteCloudBenchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudBenchTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteCloudBenchTaskRequest) SetTaskId(v string) *DeleteCloudBenchTaskRequest {
	s.TaskId = &v
	return s
}

type DeleteCloudBenchTaskResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCloudBenchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudBenchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCloudBenchTaskResponseBody) SetCode(v string) *DeleteCloudBenchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCloudBenchTaskResponseBody) SetData(v string) *DeleteCloudBenchTaskResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteCloudBenchTaskResponseBody) SetMessage(v string) *DeleteCloudBenchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCloudBenchTaskResponseBody) SetRequestId(v string) *DeleteCloudBenchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCloudBenchTaskResponseBody) SetSuccess(v string) *DeleteCloudBenchTaskResponseBody {
	s.Success = &v
	return s
}

type DeleteCloudBenchTaskResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCloudBenchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCloudBenchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudBenchTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteCloudBenchTaskResponse) SetHeaders(v map[string]*string) *DeleteCloudBenchTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteCloudBenchTaskResponse) SetStatusCode(v int32) *DeleteCloudBenchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCloudBenchTaskResponse) SetBody(v *DeleteCloudBenchTaskResponseBody) *DeleteCloudBenchTaskResponse {
	s.Body = v
	return s
}

type DeleteStopGatewayRequest struct {
	// The ID that can uniquely identify the DBGateway. You can obtain the DBGateway ID by calling the [DescribeCloudbenchTask](https://help.aliyun.com/document_detail/230669.html) operation. The DBGateway ID is the value of the **ClientGatewayId*	- field in the response.
	//
	// This parameter is required.
	//
	// example:
	//
	// 22938c83fcfbced4b4869b9695e3****
	GatewayId *string `json:"GatewayId,omitempty" xml:"GatewayId,omitempty"`
}

func (s DeleteStopGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStopGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteStopGatewayRequest) SetGatewayId(v string) *DeleteStopGatewayRequest {
	s.GatewayId = &v
	return s
}

type DeleteStopGatewayResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the DeleteStopGateway operation. Valid values:
	//
	// 	- **0**: The metadata of the DBGateway is deleted.
	//
	// 	- **-1**: A system error occurs.
	//
	// 	- **-2**: The DBGateway does not exist.
	//
	// 	- **-3**: The DBGateway is not stopped and the metadata cannot be deleted.
	//
	// 	- **-4**: The metadata of the DBGateway fails to be deleted.
	//
	// example:
	//
	// 0
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// FC6C0929-29E1-59FD-8DFE-70D9D41E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteStopGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStopGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStopGatewayResponseBody) SetCode(v string) *DeleteStopGatewayResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteStopGatewayResponseBody) SetData(v string) *DeleteStopGatewayResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteStopGatewayResponseBody) SetMessage(v string) *DeleteStopGatewayResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteStopGatewayResponseBody) SetRequestId(v string) *DeleteStopGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteStopGatewayResponseBody) SetSuccess(v string) *DeleteStopGatewayResponseBody {
	s.Success = &v
	return s
}

type DeleteStopGatewayResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteStopGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteStopGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStopGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteStopGatewayResponse) SetHeaders(v map[string]*string) *DeleteStopGatewayResponse {
	s.Headers = v
	return s
}

func (s *DeleteStopGatewayResponse) SetStatusCode(v int32) *DeleteStopGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStopGatewayResponse) SetBody(v *DeleteStopGatewayResponseBody) *DeleteStopGatewayResponse {
	s.Body = v
	return s
}

type DescribeAutoScalingConfigRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// pc-2ze1prap1k46r****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeAutoScalingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigRequest) SetInstanceId(v string) *DescribeAutoScalingConfigRequest {
	s.InstanceId = &v
	return s
}

type DescribeAutoScalingConfigResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The configurations of the auto scaling feature for instances.
	Data *DescribeAutoScalingConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBody) SetCode(v string) *DescribeAutoScalingConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBody) SetData(v *DescribeAutoScalingConfigResponseBodyData) *DescribeAutoScalingConfigResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBody) SetMessage(v string) *DescribeAutoScalingConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBody) SetRequestId(v string) *DescribeAutoScalingConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBody) SetSuccess(v string) *DescribeAutoScalingConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyData struct {
	// The configurations of the automatic bandwidth adjustment feature.
	Bandwidth *DescribeAutoScalingConfigResponseBodyDataBandwidth `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" type:"Struct"`
	// The configurations of the auto scaling feature for local resources.
	Resource *DescribeAutoScalingConfigResponseBodyDataResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// The configurations of the auto scaling feature for shards.
	Shard *DescribeAutoScalingConfigResponseBodyDataShard `json:"Shard,omitempty" xml:"Shard,omitempty" type:"Struct"`
	// The configurations of the auto scaling feature for specifications.
	Spec *DescribeAutoScalingConfigResponseBodyDataSpec `json:"Spec,omitempty" xml:"Spec,omitempty" type:"Struct"`
	// The configurations of the automatic storage expansion feature.
	Storage *DescribeAutoScalingConfigResponseBodyDataStorage `json:"Storage,omitempty" xml:"Storage,omitempty" type:"Struct"`
}

func (s DescribeAutoScalingConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetBandwidth(v *DescribeAutoScalingConfigResponseBodyDataBandwidth) *DescribeAutoScalingConfigResponseBodyData {
	s.Bandwidth = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetResource(v *DescribeAutoScalingConfigResponseBodyDataResource) *DescribeAutoScalingConfigResponseBodyData {
	s.Resource = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetShard(v *DescribeAutoScalingConfigResponseBodyDataShard) *DescribeAutoScalingConfigResponseBodyData {
	s.Shard = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetSpec(v *DescribeAutoScalingConfigResponseBodyDataSpec) *DescribeAutoScalingConfigResponseBodyData {
	s.Spec = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetStorage(v *DescribeAutoScalingConfigResponseBodyDataStorage) *DescribeAutoScalingConfigResponseBodyData {
	s.Storage = v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataBandwidth struct {
	// The average bandwidth usage threshold that triggers automatic bandwidth downgrade. Unit: %.
	//
	// example:
	//
	// 30
	BandwidthUsageLowerThreshold *int32 `json:"BandwidthUsageLowerThreshold,omitempty" xml:"BandwidthUsageLowerThreshold,omitempty"`
	// The average bandwidth usage threshold that triggers automatic bandwidth adjustment. Unit: %.
	//
	// example:
	//
	// 70
	BandwidthUsageUpperThreshold *int32 `json:"BandwidthUsageUpperThreshold,omitempty" xml:"BandwidthUsageUpperThreshold,omitempty"`
	// Indicates whether the automatic bandwidth downgrade feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The observation window of the automatic bandwidth adjustment feature. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// 	- **s**: seconds.
	//
	// 	- **m**: minutes.
	//
	// 	- **h**: hours.
	//
	// 	- **d**: days.
	//
	// >  A value of **5m*	- indicates 5 minutes.
	//
	// example:
	//
	// 5m
	ObservationWindowSize *string `json:"ObservationWindowSize,omitempty" xml:"ObservationWindowSize,omitempty"`
	// Indicates whether the automatic bandwidth adjustment feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataBandwidth) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataBandwidth) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetBandwidthUsageLowerThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.BandwidthUsageLowerThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetBandwidthUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.BandwidthUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetDowngrade(v bool) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.Downgrade = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.ObservationWindowSize = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetUpgrade(v bool) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.Upgrade = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataResource struct {
	// The scale-out step size of CPU.
	//
	// example:
	//
	// 2
	CpuStep *int32 `json:"CpuStep,omitempty" xml:"CpuStep,omitempty"`
	// The average CPU utilization threshold that triggers automatic scale-out of local resources. Unit: %.
	//
	// example:
	//
	// 70
	CpuUsageUpperThreshold *int32 `json:"CpuUsageUpperThreshold,omitempty" xml:"CpuUsageUpperThreshold,omitempty"`
	// The observation window of the automatic scale-in feature for local resources. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// 	- **s**: seconds.
	//
	// 	- **m**: minutes.
	//
	// 	- **h**: hours.
	//
	// 	- **d**: days.
	//
	// >  A value of **5m*	- indicates 5 minutes.
	//
	// example:
	//
	// 5m
	DowngradeObservationWindowSize *string `json:"DowngradeObservationWindowSize,omitempty" xml:"DowngradeObservationWindowSize,omitempty"`
	// Indicates whether the auto scaling feature is enabled for local resources. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// The observation window of the automatic scale-out feature for local resources. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// 	- **s**: seconds.
	//
	// 	- **m**: minutes.
	//
	// 	- **h**: hours.
	//
	// 	- **d**: days.
	//
	// >  A value of **5m*	- indicates 5 minutes.
	//
	// example:
	//
	// 5m
	UpgradeObservationWindowSize *string `json:"UpgradeObservationWindowSize,omitempty" xml:"UpgradeObservationWindowSize,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataResource) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetCpuStep(v int32) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.CpuStep = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetCpuUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.CpuUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetDowngradeObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.DowngradeObservationWindowSize = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetEnable(v bool) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.Enable = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetUpgradeObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.UpgradeObservationWindowSize = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataShard struct {
	// Indicates whether the feature of automatically removing shards is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The observation window of the feature of automatically removing shards. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// 	- **s**: seconds.
	//
	// 	- **m**: minutes.
	//
	// 	- **h**: hours.
	//
	// 	- **d**: days.
	//
	// >  A value of **1d*	- indicates one day.
	//
	// example:
	//
	// 1d
	DowngradeObservationWindowSize *string `json:"DowngradeObservationWindowSize,omitempty" xml:"DowngradeObservationWindowSize,omitempty"`
	// The maximum number of shards in the instance.
	//
	// example:
	//
	// 16
	MaxShards *int32 `json:"MaxShards,omitempty" xml:"MaxShards,omitempty"`
	// The average memory usage threshold that triggers automatic removal of shards. Unit: %.
	//
	// example:
	//
	// 30
	MemUsageLowerThreshold *int32 `json:"MemUsageLowerThreshold,omitempty" xml:"MemUsageLowerThreshold,omitempty"`
	// The average memory usage threshold that triggers automatic adding of shards. Unit: %.
	//
	// example:
	//
	// 70
	MemUsageUpperThreshold *int32 `json:"MemUsageUpperThreshold,omitempty" xml:"MemUsageUpperThreshold,omitempty"`
	// The minimum number of shards in the instance.
	//
	// example:
	//
	// 4
	MinShards *int32 `json:"MinShards,omitempty" xml:"MinShards,omitempty"`
	// Indicates whether the feature of automatically adding shards is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
	// The observation window of the feature of automatically adding shards. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// 	- **s**: seconds.
	//
	// 	- **m**: minutes.
	//
	// 	- **h**: hours.
	//
	// 	- **d**: days.
	//
	// >  A value of **5m*	- indicates 5 minutes.
	//
	// example:
	//
	// 5m
	UpgradeObservationWindowSize *string `json:"UpgradeObservationWindowSize,omitempty" xml:"UpgradeObservationWindowSize,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataShard) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataShard) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetDowngrade(v bool) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.Downgrade = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetDowngradeObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.DowngradeObservationWindowSize = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetMaxShards(v int32) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.MaxShards = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetMemUsageLowerThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.MemUsageLowerThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetMemUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.MemUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetMinShards(v int32) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.MinShards = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetUpgrade(v bool) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.Upgrade = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetUpgradeObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.UpgradeObservationWindowSize = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataSpec struct {
	// The quiescent period. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// 	- **s**: seconds.
	//
	// 	- **m**: minutes.
	//
	// 	- **h**: hours.
	//
	// 	- **d**: days.
	//
	// >  A value of **5m*	- indicates 5 minutes.
	//
	// example:
	//
	// 5m
	CoolDownTime *string `json:"CoolDownTime,omitempty" xml:"CoolDownTime,omitempty"`
	// The average CPU utilization threshold that triggers automatic specification scale-up. Unit: %.
	//
	// example:
	//
	// 70
	CpuUsageUpperThreshold *int32 `json:"CpuUsageUpperThreshold,omitempty" xml:"CpuUsageUpperThreshold,omitempty"`
	// Indicates whether the automatic specification scale-down feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The maximum number of read-only nodes of the instance.
	//
	// example:
	//
	// 10
	MaxReadOnlyNodes *int32 `json:"MaxReadOnlyNodes,omitempty" xml:"MaxReadOnlyNodes,omitempty"`
	// The maximum specifications to which the cluster can be scaled up. For more information about the specifications of each type of supported database instances, see the following topics:
	//
	// 	- PolarDB for MySQL Cluster Edition instances: [Compute node specifications of PolarDB for MySQL Enterprise Edition](https://help.aliyun.com/document_detail/102542.html)
	//
	// 	- ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs: [Specifications](https://help.aliyun.com/document_detail/276974.html)
	//
	// example:
	//
	// polar.mysql.x8.12xlarge
	MaxSpec *string `json:"MaxSpec,omitempty" xml:"MaxSpec,omitempty"`
	// The average memory usage threshold that triggers automatic specification scale-up. Unit: %.
	//
	// example:
	//
	// 70
	MemUsageUpperThreshold *int32 `json:"MemUsageUpperThreshold,omitempty" xml:"MemUsageUpperThreshold,omitempty"`
	// The observation window. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// 	- **s**: seconds.
	//
	// 	- **m**: minutes.
	//
	// 	- **h**: hours.
	//
	// 	- **d**: days.
	//
	// >  A value of **5m*	- indicates 5 minutes.
	//
	// example:
	//
	// 5m
	ObservationWindowSize *string `json:"ObservationWindowSize,omitempty" xml:"ObservationWindowSize,omitempty"`
	// Indicates whether the automatic specification scale-up feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataSpec) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataSpec) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetCoolDownTime(v string) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.CoolDownTime = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetCpuUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.CpuUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetDowngrade(v bool) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.Downgrade = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetMaxReadOnlyNodes(v int32) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.MaxReadOnlyNodes = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetMaxSpec(v string) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.MaxSpec = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetMemUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.MemUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.ObservationWindowSize = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetUpgrade(v bool) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.Upgrade = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataStorage struct {
	// The average storage usage threshold that triggers automatic storage expansion. Unit: %.
	//
	// example:
	//
	// 70
	DiskUsageUpperThreshold *int32 `json:"DiskUsageUpperThreshold,omitempty" xml:"DiskUsageUpperThreshold,omitempty"`
	// The maximum storage size. Unit: GB.
	//
	// example:
	//
	// 32000
	MaxStorage *int32 `json:"MaxStorage,omitempty" xml:"MaxStorage,omitempty"`
	// Indicates whether the automatic storage expansion feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataStorage) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataStorage) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataStorage) SetDiskUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataStorage {
	s.DiskUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataStorage) SetMaxStorage(v int32) *DescribeAutoScalingConfigResponseBodyDataStorage {
	s.MaxStorage = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataStorage) SetUpgrade(v bool) *DescribeAutoScalingConfigResponseBodyDataStorage {
	s.Upgrade = &v
	return s
}

type DescribeAutoScalingConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAutoScalingConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAutoScalingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponse) SetHeaders(v map[string]*string) *DescribeAutoScalingConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoScalingConfigResponse) SetStatusCode(v int32) *DescribeAutoScalingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAutoScalingConfigResponse) SetBody(v *DescribeAutoScalingConfigResponseBody) *DescribeAutoScalingConfigResponse {
	s.Body = v
	return s
}

type DescribeAutoScalingHistoryRequest struct {
	// The type of the auto scaling task that you want to query. Set the value to **SPEC**, which indicates that you can query the history of only automatic performance scaling tasks.
	//
	// This parameter is required.
	//
	// example:
	//
	// SPEC
	AutoScalingTaskType *string `json:"AutoScalingTaskType,omitempty" xml:"AutoScalingTaskType,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// > The end time must be later than the start time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1676605305796
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	//
	// > Only ApsaraDB RDS for MySQL instances are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// > The maximum time range that can be specified is 45 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1675833788056
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeAutoScalingHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryRequest) SetAutoScalingTaskType(v string) *DescribeAutoScalingHistoryRequest {
	s.AutoScalingTaskType = &v
	return s
}

func (s *DescribeAutoScalingHistoryRequest) SetEndTime(v int64) *DescribeAutoScalingHistoryRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAutoScalingHistoryRequest) SetInstanceId(v string) *DescribeAutoScalingHistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAutoScalingHistoryRequest) SetStartTime(v int64) *DescribeAutoScalingHistoryRequest {
	s.StartTime = &v
	return s
}

type DescribeAutoScalingHistoryResponseBody struct {
	// The HTTP status code returned. The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The history of auto scaling.
	Data *DescribeAutoScalingHistoryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// > If the request was successful, **Successful*	- is returned. Otherwise, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAutoScalingHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryResponseBody) SetCode(v string) *DescribeAutoScalingHistoryResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBody) SetData(v *DescribeAutoScalingHistoryResponseBodyData) *DescribeAutoScalingHistoryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBody) SetMessage(v string) *DescribeAutoScalingHistoryResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBody) SetRequestId(v string) *DescribeAutoScalingHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBody) SetSuccess(v string) *DescribeAutoScalingHistoryResponseBody {
	s.Success = &v
	return s
}

type DescribeAutoScalingHistoryResponseBodyData struct {
	// The history of automatic bandwidth scaling of ApsaraDB for Redis instances. This feature is not supported.
	Bandwidth []map[string]interface{} `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" type:"Repeated"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The history of resource scale-out of ApsaraDB for Redis instances. This feature is not supported.
	Resource []map[string]interface{} `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
	// The history of automatic shard scale-out of ApsaraDB for Redis instances. This feature is not supported.
	Shard []map[string]interface{} `json:"Shard,omitempty" xml:"Shard,omitempty" type:"Repeated"`
	// The history of automatic performance scaling.
	SpecHistory []*DescribeAutoScalingHistoryResponseBodyDataSpecHistory `json:"SpecHistory,omitempty" xml:"SpecHistory,omitempty" type:"Repeated"`
	// The history of storage expansion. This feature is not supported.
	Storage []map[string]interface{} `json:"Storage,omitempty" xml:"Storage,omitempty" type:"Repeated"`
}

func (s DescribeAutoScalingHistoryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetBandwidth(v []map[string]interface{}) *DescribeAutoScalingHistoryResponseBodyData {
	s.Bandwidth = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetInstanceId(v string) *DescribeAutoScalingHistoryResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetResource(v []map[string]interface{}) *DescribeAutoScalingHistoryResponseBodyData {
	s.Resource = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetShard(v []map[string]interface{}) *DescribeAutoScalingHistoryResponseBodyData {
	s.Shard = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetSpecHistory(v []*DescribeAutoScalingHistoryResponseBodyDataSpecHistory) *DescribeAutoScalingHistoryResponseBodyData {
	s.SpecHistory = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetStorage(v []map[string]interface{}) *DescribeAutoScalingHistoryResponseBodyData {
	s.Storage = v
	return s
}

type DescribeAutoScalingHistoryResponseBodyDataSpecHistory struct {
	// The error code returned by the scaling task. Valid values:
	//
	// 	- **Insufficient_Balance**: The account has insufficient balance or an unpaid order.
	//
	// 	- **REACH_SPEC_UPPERBOUND**: The instance type reaches the upper limit.
	//
	// 	- **Control_Error_Timeout_Msg**: The management task timed out.
	//
	// 	- **Invoke_Rds_Api_Error_Msg**: Failed to call the ApsaraDB RDS API.
	//
	// example:
	//
	// Insufficient_Balance
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The original number of CPU cores of the instance.
	//
	// example:
	//
	// 4
	OriginCore *int32 `json:"OriginCore,omitempty" xml:"OriginCore,omitempty"`
	// The original instance type.
	//
	// example:
	//
	// mysql.n2.large.2c
	OriginInstanceClass *string `json:"OriginInstanceClass,omitempty" xml:"OriginInstanceClass,omitempty"`
	// The original memory size of the instance. Unit: GB.
	//
	// example:
	//
	// 8
	OriginMemory *float64 `json:"OriginMemory,omitempty" xml:"OriginMemory,omitempty"`
	// The type of the automatic performance scaling task. Valid values:
	//
	// 	- **SCALE_UP**: automatic instance type scale-up task.
	//
	// 	- **SCALE_DOWN**: automatic instance type scale-down task.
	//
	// example:
	//
	// SCALE_UP
	ScaleType *string `json:"ScaleType,omitempty" xml:"ScaleType,omitempty"`
	// The destination number of CPU cores of the instance.
	//
	// example:
	//
	// 8
	TargetCore *int32 `json:"TargetCore,omitempty" xml:"TargetCore,omitempty"`
	// The destination instance type.
	//
	// example:
	//
	// mysql.n2.xlarge.2c
	TargetInstanceClass *string `json:"TargetInstanceClass,omitempty" xml:"TargetInstanceClass,omitempty"`
	// The destination memory size of the instance. Unit: GB.
	//
	// example:
	//
	// 16
	TargetMemory *float64 `json:"TargetMemory,omitempty" xml:"TargetMemory,omitempty"`
	// The status of the task. Valid values:
	//
	// 	- **true**: The task was successful.
	//
	// 	- **false**: The task failed.
	//
	// example:
	//
	// true
	TaskExcuteStatus *bool `json:"TaskExcuteStatus,omitempty" xml:"TaskExcuteStatus,omitempty"`
	// The time when the task was run. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1684830763000
	TaskTime *int64 `json:"TaskTime,omitempty" xml:"TaskTime,omitempty"`
}

func (s DescribeAutoScalingHistoryResponseBodyDataSpecHistory) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryResponseBodyDataSpecHistory) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetErrorCode(v string) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.ErrorCode = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetOriginCore(v int32) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.OriginCore = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetOriginInstanceClass(v string) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.OriginInstanceClass = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetOriginMemory(v float64) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.OriginMemory = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetScaleType(v string) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.ScaleType = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTargetCore(v int32) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TargetCore = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTargetInstanceClass(v string) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TargetInstanceClass = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTargetMemory(v float64) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TargetMemory = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTaskExcuteStatus(v bool) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TaskExcuteStatus = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTaskTime(v int64) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TaskTime = &v
	return s
}

type DescribeAutoScalingHistoryResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAutoScalingHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAutoScalingHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryResponse) SetHeaders(v map[string]*string) *DescribeAutoScalingHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoScalingHistoryResponse) SetStatusCode(v int32) *DescribeAutoScalingHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponse) SetBody(v *DescribeAutoScalingHistoryResponseBody) *DescribeAutoScalingHistoryResponse {
	s.Body = v
	return s
}

type DescribeCacheAnalysisJobRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the cache analysis task. You can obtain the task ID from the response parameters of the [CreateCacheAnalysisJob](https://help.aliyun.com/document_detail/180982.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// sf79-sd99-sa37-****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DescribeCacheAnalysisJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobRequest) SetInstanceId(v string) *DescribeCacheAnalysisJobRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeCacheAnalysisJobRequest) SetJobId(v string) *DescribeCacheAnalysisJobRequest {
	s.JobId = &v
	return s
}

type DescribeCacheAnalysisJobResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the cache analysis task.
	Data *DescribeCacheAnalysisJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message that is returned for the request.
	//
	// >  If the request is successful, **Successful*	- is returned. If the request fails, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBody) SetCode(v string) *DescribeCacheAnalysisJobResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBody) SetData(v *DescribeCacheAnalysisJobResponseBodyData) *DescribeCacheAnalysisJobResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBody) SetMessage(v string) *DescribeCacheAnalysisJobResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBody) SetRequestId(v string) *DescribeCacheAnalysisJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBody) SetSuccess(v string) *DescribeCacheAnalysisJobResponseBody {
	s.Success = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyData struct {
	// The details of the large keys. The returned large keys are sorted in descending order based on the number of bytes occupied by the keys.
	BigKeys *DescribeCacheAnalysisJobResponseBodyDataBigKeys `json:"BigKeys,omitempty" xml:"BigKeys,omitempty" type:"Struct"`
	// The details of the large keys. The returned large keys are sorted in descending order based on the number of keys.
	BigKeysOfNum *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum `json:"BigKeysOfNum,omitempty" xml:"BigKeysOfNum,omitempty" type:"Struct"`
	// The statistics of the keys that have expired.
	ExpiryKeysLevelCount *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount `json:"ExpiryKeysLevelCount,omitempty" xml:"ExpiryKeysLevelCount,omitempty" type:"Struct"`
	// The instance ID.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the cache analysis task.
	//
	// example:
	//
	// sf79-sd99-sa37-****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The prefixes of the keys.
	KeyPrefixes *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes `json:"KeyPrefixes,omitempty" xml:"KeyPrefixes,omitempty" type:"Struct"`
	// The message that is returned for the request.
	//
	// >  If the request is successful, **Successful*	- is returned. If the request fails, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the data node on the instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The state of the cache analysis task. Valid values:
	//
	// 	- **BACKUP**: The data is being backed up.
	//
	// 	- **ANALYZING**: The data is being analyzed.
	//
	// 	- **FINISHED**: The data is analyzed.
	//
	// 	- **FAILED**: An error occurred.
	//
	// example:
	//
	// BACKUP
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	// The details of permanent keys. The returned keys are sorted in descending order based on the number of bytes occupied by the keys.
	UnexBigKeysOfBytes *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes `json:"UnexBigKeysOfBytes,omitempty" xml:"UnexBigKeysOfBytes,omitempty" type:"Struct"`
	// The details of permanent keys. The returned keys are sorted in descending order based on the number of keys.
	UnexBigKeysOfNum *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum `json:"UnexBigKeysOfNum,omitempty" xml:"UnexBigKeysOfNum,omitempty" type:"Struct"`
}

func (s DescribeCacheAnalysisJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetBigKeys(v *DescribeCacheAnalysisJobResponseBodyDataBigKeys) *DescribeCacheAnalysisJobResponseBodyData {
	s.BigKeys = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetBigKeysOfNum(v *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum) *DescribeCacheAnalysisJobResponseBodyData {
	s.BigKeysOfNum = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetExpiryKeysLevelCount(v *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount) *DescribeCacheAnalysisJobResponseBodyData {
	s.ExpiryKeysLevelCount = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetInstanceId(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetJobId(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetKeyPrefixes(v *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes) *DescribeCacheAnalysisJobResponseBodyData {
	s.KeyPrefixes = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetMessage(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.Message = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetTaskState(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.TaskState = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetUnexBigKeysOfBytes(v *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes) *DescribeCacheAnalysisJobResponseBodyData {
	s.UnexBigKeysOfBytes = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetUnexBigKeysOfNum(v *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum) *DescribeCacheAnalysisJobResponseBodyData {
	s.UnexBigKeysOfNum = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataBigKeys struct {
	KeyInfo []*DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeys) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeys) SetKeyInfo(v []*DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) *DescribeCacheAnalysisJobResponseBodyDataBigKeys {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo struct {
	// The number of bytes that are occupied by the key.
	//
	// example:
	//
	// 12345
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 127
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The database name.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	//
	// example:
	//
	// hashtable
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The time when the key expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A value of 0 indicates that the key never expires.
	//
	// example:
	//
	// 1596256542547
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The key name.
	//
	// example:
	//
	// task_x****
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	//
	// example:
	//
	// hash
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum struct {
	KeyInfo []*DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum) SetKeyInfo(v []*DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo struct {
	// The number of bytes that are occupied by the key.
	//
	// example:
	//
	// 12345
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 127
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The database name.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	//
	// example:
	//
	// hashtable
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The time when the key expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A value of 0 indicates that the key never expires.
	//
	// example:
	//
	// 1596256542547
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The key name.
	//
	// example:
	//
	// task_x****
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	//
	// example:
	//
	// hash
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount struct {
	ExpiryLevel []*DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel `json:"ExpiryLevel,omitempty" xml:"ExpiryLevel,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount) SetExpiryLevel(v []*DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel) *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCount {
	s.ExpiryLevel = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel struct {
	// The time when the cache analysis task was complete. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1717469347000
	AnalysisTs *int64 `json:"AnalysisTs,omitempty" xml:"AnalysisTs,omitempty"`
	// The expiration level. Valid values:
	//
	// 	- **0**: The key never expires.
	//
	// 	- **1**: The key has expired.
	//
	// 	- **2**: The key has expired for 0 to 1 hour.
	//
	// 	- **3**: The key has expired for 1 to 3 hours.
	//
	// 	- **4**: The key has expired for 3 to 12 hours.
	//
	// 	- **5**: The key has expired for 12 to 24 hours.
	//
	// 	- **6**: The key has expired for one to two days.
	//
	// 	- **7**: The key has expired for three to seven days.
	//
	// 	- **8**: The key has expired for more than seven days.
	//
	// example:
	//
	// 0
	Level *int32 `json:"Level,omitempty" xml:"Level,omitempty"`
	// The number of bytes occupied by the keys that have expired.
	//
	// example:
	//
	// 8064
	TotalBytes *int64 `json:"TotalBytes,omitempty" xml:"TotalBytes,omitempty"`
	// The total number of the keys that have expired.
	//
	// example:
	//
	// 62
	TotalKeys *int64 `json:"TotalKeys,omitempty" xml:"TotalKeys,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel) SetAnalysisTs(v int64) *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel {
	s.AnalysisTs = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel) SetLevel(v int32) *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel {
	s.Level = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel) SetTotalBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel {
	s.TotalBytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel) SetTotalKeys(v int64) *DescribeCacheAnalysisJobResponseBodyDataExpiryKeysLevelCountExpiryLevel {
	s.TotalKeys = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes struct {
	Prefix []*DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix `json:"Prefix,omitempty" xml:"Prefix,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes) SetPrefix(v []*DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes {
	s.Prefix = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix struct {
	// The number of bytes that are occupied by the key.
	//
	// example:
	//
	// 12345
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 127
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The number of keys that contain the prefix.
	//
	// example:
	//
	// 123
	KeyNum *int64 `json:"KeyNum,omitempty" xml:"KeyNum,omitempty"`
	// The prefix of the key.
	//
	// example:
	//
	// task_
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
	// The data type of the instance.
	//
	// example:
	//
	// hash
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetKeyNum(v int64) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.KeyNum = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetPrefix(v string) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.Prefix = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes struct {
	KeyInfo []*DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes) SetKeyInfo(v []*DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo struct {
	// The number of bytes that are occupied by the key.
	//
	// example:
	//
	// 12345
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 127
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The database name.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	//
	// example:
	//
	// hashtable
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The time when the key expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A value of 0 indicates that the key never expires.
	//
	// example:
	//
	// 1596256542547
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The key name.
	//
	// example:
	//
	// task_x****
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	//
	// example:
	//
	// hash
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum struct {
	KeyInfo []*DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum) SetKeyInfo(v []*DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo struct {
	// The number of bytes that are occupied by the key.
	//
	// example:
	//
	// 12345
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 127
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The database name.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	//
	// example:
	//
	// hashtable
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The time when the key expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. A value of 0 indicates that the key never expires.
	//
	// example:
	//
	// 1596256542547
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The key name.
	//
	// example:
	//
	// task_x****
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	//
	// example:
	//
	// hash
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCacheAnalysisJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCacheAnalysisJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponse) SetHeaders(v map[string]*string) *DescribeCacheAnalysisJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeCacheAnalysisJobResponse) SetStatusCode(v int32) *DescribeCacheAnalysisJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponse) SetBody(v *DescribeCacheAnalysisJobResponseBody) *DescribeCacheAnalysisJobResponse {
	s.Body = v
	return s
}

type DescribeCacheAnalysisJobsRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1596177993001
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. The value must be an integer that is greater than 0. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1596177993000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeCacheAnalysisJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsRequest) SetEndTime(v string) *DescribeCacheAnalysisJobsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCacheAnalysisJobsRequest) SetInstanceId(v string) *DescribeCacheAnalysisJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsRequest) SetPageNo(v string) *DescribeCacheAnalysisJobsRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeCacheAnalysisJobsRequest) SetPageSize(v string) *DescribeCacheAnalysisJobsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCacheAnalysisJobsRequest) SetStartTime(v string) *DescribeCacheAnalysisJobsRequest {
	s.StartTime = &v
	return s
}

type DescribeCacheAnalysisJobsResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The list of cache analysis tasks.
	Data *DescribeCacheAnalysisJobsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCacheAnalysisJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetCode(v string) *DescribeCacheAnalysisJobsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetData(v *DescribeCacheAnalysisJobsResponseBodyData) *DescribeCacheAnalysisJobsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetMessage(v string) *DescribeCacheAnalysisJobsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetRequestId(v string) *DescribeCacheAnalysisJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetSuccess(v string) *DescribeCacheAnalysisJobsResponseBody {
	s.Success = &v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The ID of the data node on the instance.
	List *DescribeCacheAnalysisJobsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The page number. The value must be an integer that is greater than 0. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 4
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCacheAnalysisJobsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetExtra(v string) *DescribeCacheAnalysisJobsResponseBodyData {
	s.Extra = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetList(v *DescribeCacheAnalysisJobsResponseBodyDataList) *DescribeCacheAnalysisJobsResponseBodyData {
	s.List = v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetPageNo(v int64) *DescribeCacheAnalysisJobsResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetPageSize(v int64) *DescribeCacheAnalysisJobsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetTotal(v int64) *DescribeCacheAnalysisJobsResponseBodyData {
	s.Total = &v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyDataList struct {
	CacheAnalysisJob []*DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob `json:"CacheAnalysisJob,omitempty" xml:"CacheAnalysisJob,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataList) SetCacheAnalysisJob(v []*DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) *DescribeCacheAnalysisJobsResponseBodyDataList {
	s.CacheAnalysisJob = v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob struct {
	// The details about the large keys.
	//
	// > The sub-parameters of this parameter and the content of the sub-parameters are not returned. To query the detailed information about the cache analysis tasks, call the [DescribeCacheAnalysisJob](https://help.aliyun.com/document_detail/443012.html) operation.
	BigKeys *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys `json:"BigKeys,omitempty" xml:"BigKeys,omitempty" type:"Struct"`
	// The instance ID.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the cache analysis task.
	//
	// example:
	//
	// sf79-sd99-sa37-****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the data node on the instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The state of the cache analysis task. Valid values:
	//
	// 	- **BACKUP**: The data is being backed up.
	//
	// 	- **ANALYZING**: The data is being analyzed.
	//
	// 	- **FINISHED**: The data is analyzed.
	//
	// 	- **FAILED**: An error occurred.
	//
	// example:
	//
	// BACKUP
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetBigKeys(v *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.BigKeys = v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetInstanceId(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.InstanceId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetJobId(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.JobId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetMessage(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.Message = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetNodeId(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetTaskState(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.TaskState = &v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys struct {
	KeyInfo []*DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys) SetKeyInfo(v []*DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo struct {
	// The number of bytes that are occupied by the key.
	//
	// example:
	//
	// 12345
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 127
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	//
	// example:
	//
	// hashtable
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
	//
	// example:
	//
	// 1596256542547
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The name of the key.
	//
	// example:
	//
	// task_*****
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	//
	// example:
	//
	// r-****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	//
	// example:
	//
	// hash
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetType(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCacheAnalysisJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCacheAnalysisJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponse) SetHeaders(v map[string]*string) *DescribeCacheAnalysisJobsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCacheAnalysisJobsResponse) SetStatusCode(v int32) *DescribeCacheAnalysisJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponse) SetBody(v *DescribeCacheAnalysisJobsResponseBody) *DescribeCacheAnalysisJobsResponse {
	s.Body = v
	return s
}

type DescribeCloudBenchTasksRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	//
	// example:
	//
	// 1596177993001
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. The value must be a positive integer. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1596177993000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the stress testing task. Valid values:
	//
	// 	- **SUCCESS**: The task is successful.
	//
	// 	- **IGNORED**: The task is ignored.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **EXCEPTION**: The task is abnormal.
	//
	// example:
	//
	// SUCCESS
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the stress testing task. Valid values:
	//
	// 	- **pressure test*	- (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
	//
	// 	- **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
	//
	// example:
	//
	// pressure test
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeCloudBenchTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksRequest) SetEndTime(v string) *DescribeCloudBenchTasksRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetPageNo(v string) *DescribeCloudBenchTasksRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetPageSize(v string) *DescribeCloudBenchTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetStartTime(v string) *DescribeCloudBenchTasksRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetStatus(v string) *DescribeCloudBenchTasksRequest {
	s.Status = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetTaskType(v string) *DescribeCloudBenchTasksRequest {
	s.TaskType = &v
	return s
}

type DescribeCloudBenchTasksResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *DescribeCloudBenchTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudBenchTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponseBody) SetCode(v string) *DescribeCloudBenchTasksResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBody) SetData(v *DescribeCloudBenchTasksResponseBodyData) *DescribeCloudBenchTasksResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCloudBenchTasksResponseBody) SetMessage(v string) *DescribeCloudBenchTasksResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBody) SetRequestId(v string) *DescribeCloudBenchTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBody) SetSuccess(v string) *DescribeCloudBenchTasksResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudBenchTasksResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The detailed information of the stress testing task.
	List *DescribeCloudBenchTasksResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCloudBenchTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetExtra(v string) *DescribeCloudBenchTasksResponseBodyData {
	s.Extra = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetList(v *DescribeCloudBenchTasksResponseBodyDataList) *DescribeCloudBenchTasksResponseBodyData {
	s.List = v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetPageNo(v int32) *DescribeCloudBenchTasksResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetPageSize(v int32) *DescribeCloudBenchTasksResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetTotal(v int64) *DescribeCloudBenchTasksResponseBodyData {
	s.Total = &v
	return s
}

type DescribeCloudBenchTasksResponseBodyDataList struct {
	CloudbenchTasks []*DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks `json:"cloudbenchTasks,omitempty" xml:"cloudbenchTasks,omitempty" type:"Repeated"`
}

func (s DescribeCloudBenchTasksResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponseBodyDataList) SetCloudbenchTasks(v []*DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) *DescribeCloudBenchTasksResponseBodyDataList {
	s.CloudbenchTasks = v
	return s
}

type DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks struct {
	// The archiving task ID.
	//
	// example:
	//
	// \\"202105211430070112231480820340758****
	ArchiveJobId *string `json:"ArchiveJobId,omitempty" xml:"ArchiveJobId,omitempty"`
	// The name of the table that was archived to Object Storage Service (OSS).
	//
	// example:
	//
	// custins15546355_161604665****
	ArchiveOssTableName *string `json:"ArchiveOssTableName,omitempty" xml:"ArchiveOssTableName,omitempty"`
	// The archiving status of the file that stores the analysis result of full SQL statistics. Valid values:
	//
	// 	- **0**: The file archiving is not started.
	//
	// 	- **1**: The file is archived.
	//
	// 	- **2**: An error occurred.
	//
	// 	- **3**: The file is being archived.
	//
	// 	- **4**: The archived file does not need to be downloaded.
	//
	// example:
	//
	// 1
	ArchiveState *int32 `json:"ArchiveState,omitempty" xml:"ArchiveState,omitempty"`
	// The ID of the backup set. You can call the [DescribeBackups](https://help.aliyun.com/document_detail/26273.html) operation to query the ID of the backup set.
	//
	// example:
	//
	// 229132
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The backup type. Valid values:
	//
	// 	- **TIMESTAMP**: Data is restored to the state at a specific point in time.
	//
	// 	- **BACKUPID**: Data is restored from a backup set that is identified by an ID.
	//
	// example:
	//
	// TIMESTAMP
	BackupType *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
	// The substep in the stress testing task. Valid values:
	//
	// 	- **NEW**: Initialize the stress testing task.
	//
	// 	- **WAIT_BUY_ECS**: Purchase an ECS instance.
	//
	// 	- **WAIT_START_ECS**: Start the ECS instance.
	//
	// 	- **WAIT_INSTALL_JDK**: Install the Java Development Kit (JDK).
	//
	// 	- **WAIT_INSTALL_DBGATEWAY**: Install the database gateway (DBGateway).
	//
	// 	- **ADD_SECURITY_IPS_STEP**: Configure the whitelist of the security group.
	//
	// 	- **ARCHIVE**: Archive the file that stores the analysis results of full SQL statistics.
	//
	// 	- **DOWNLOAD**: Download the file that stores the analysis result of full SQL statistics.
	//
	// 	- **PROCEED**: Preprocess the file that stores the analysis result of full SQL statistics.
	//
	// 	- **PRE_LOAD**: Preload the file that stores the analysis result of full SQL statistics.
	//
	// 	- **VALIDATE**: Verify the functionality of stress testing.
	//
	// 	- **PRESSURE**: Start the stress testing task.
	//
	// example:
	//
	// PROCEED
	BenchStep *string `json:"BenchStep,omitempty" xml:"BenchStep,omitempty"`
	// The status that indicates the substep performed for the stress testing task. Valid values:
	//
	// 	- **NEW**: The task is being initialized.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **FAILED**: The task failed.
	//
	// 	- **FINISHED**: The task is complete.
	//
	// 	- **Terminated**: The task is terminated.
	//
	// 	- **Deleted**: The task is deleted.
	//
	// example:
	//
	// FINISHED
	BenchStepStatus *string `json:"BenchStepStatus,omitempty" xml:"BenchStepStatus,omitempty"`
	// The DBGateway ID of the stress testing client.
	//
	// example:
	//
	// 58598b2af48a0193dfc16fc6964ef****
	ClientGatewayId *string `json:"ClientGatewayId,omitempty" xml:"ClientGatewayId,omitempty"`
	// The type of the stress testing client. Valid values:
	//
	// 	- **ECS**: indicates that you must prepare the DBGateway.
	//
	// 	- **DAS_ECS**: indicates that DAS automatically purchases and deploys an ECS instance for stress testing.
	//
	// example:
	//
	// ECS
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The description of the stress testing task.
	//
	// example:
	//
	// test-das-bench-0501
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The UUID of the destination instance.
	//
	// example:
	//
	// hdm_d887b5ccf99fa0dc9a1e5aaac368****
	DstInstanceUuid *string `json:"DstInstanceUuid,omitempty" xml:"DstInstanceUuid,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	DstIp *string `json:"DstIp,omitempty" xml:"DstIp,omitempty"`
	// The port number of the destination instance.
	//
	// example:
	//
	// 3306
	DstPort *int32 `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	// The type of the identifier that is used to indicate the destination instance. Valid values:
	//
	// 	- **Instance*	- (default): the instance ID.
	//
	// 	- **ConnectionString**: the endpoint of the instance.
	//
	// example:
	//
	// Instance
	DstType *string `json:"DstType,omitempty" xml:"DstType,omitempty"`
	// The specification of the DTS instance.
	//
	// > For more information about the specifications of DTS instances and the test performance of each instance, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html).
	//
	// example:
	//
	// medium
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The ID of the DTS migration task.
	//
	// example:
	//
	// i03e3zty16i****
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the Data Transmission Service (DTS) migration task.
	//
	// example:
	//
	// RDS_TO_RDS_MIGRATION
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The status of the DTS migration task. Valid values:
	//
	// 	- **NOT_STARTED**: The task is not started.
	//
	// 	- **PRE_CHECKING**: The task is in precheck.
	//
	// 	- **PRE_CHECK_FAILED**: The precheck failed.
	//
	// 	- **CHECKING**: The task is being checked.
	//
	// 	- **MIGRATING**: The data is being migrated.
	//
	// 	- **CATCHED**: The data is migrated from the source instance to the destination instance.
	//
	// 	- **SUSPENDING**: The task is suspended.
	//
	// 	- **MIGRATION_FAILED**: The data failed to be migrated.
	//
	// 	- **FINISHED**: The task is complete.
	//
	// 	- **INITIALIZING**: The synchronization is being initialized.
	//
	// 	- **INITIALIZE_FAILED**: The synchronization failed to be initialized.
	//
	// 	- **SYNCHRONIZING**: The data is being synchronized.
	//
	// 	- **MODIFYING**: The roles of the instances are being changed.
	//
	// 	- **SWITCHING**: The roles of the instances are being switched.
	//
	// 	- **FAILED**: The task failed.
	//
	// example:
	//
	// CHECKING
	DtsJobState *int32 `json:"DtsJobState,omitempty" xml:"DtsJobState,omitempty"`
	// The status of the DTS migration task. Valid values:
	//
	// 	- **NOT_STARTED**: The task is not started.
	//
	// 	- **PRE_CHECKING**: The task is in precheck.
	//
	// 	- **PRE_CHECK_FAILED**: The precheck failed.
	//
	// 	- **CHECKING**: The task is being checked.
	//
	// 	- **MIGRATING**: The data is being migrated.
	//
	// 	- **CATCHED**: The data is migrated from the source instance to the destination instance.
	//
	// 	- **SUSPENDING**: The task is suspended.
	//
	// 	- **MIGRATION_FAILED**: The data failed to be migrated.
	//
	// 	- **FINISHED**: The task is complete.
	//
	// 	- **INITIALIZING**: The synchronization is being initialized.
	//
	// 	- **INITIALIZE_FAILED**: The synchronization failed to be initialized.
	//
	// 	- **SYNCHRONIZING**: The data is being synchronized.
	//
	// 	- **MODIFYING**: The roles of the instances are being changed.
	//
	// 	- **SWITCHING**: The roles of the instances are being switched.
	//
	// 	- **FAILED**: The task failed.
	//
	// example:
	//
	// PRE_CHECK_FAILED
	DtsJobStatus *string `json:"DtsJobStatus,omitempty" xml:"DtsJobStatus,omitempty"`
	// The ID of the Elastic Compute Service (ECS) instance.
	//
	// example:
	//
	// i-bp1ecr5go2go1****
	EcsInstanceId *string `json:"EcsInstanceId,omitempty" xml:"EcsInstanceId,omitempty"`
	// The state that indicates the last operation performed for the stress testing task. Valid values:
	//
	// 	- **WAIT_TARGET**: prepares the destination instance.
	//
	// 	- **WAIT_DBGATEWAY**: prepares the DBGateway.
	//
	// 	- **WAIT_SQL**: prepares the full SQL statistics.
	//
	// 	- **WAIT_LOGIC**: prepares to replay the traffic.
	//
	// > When the state of a stress testing task changes to the state that is specified by the EndState parameter, the stress testing task is complete.
	//
	// example:
	//
	// WAIT_TARGET
	EndState *string `json:"EndState,omitempty" xml:"EndState,omitempty"`
	// The error code returned for the substep of the stress testing task.
	//
	// example:
	//
	// 10109
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the task failed.
	//
	// example:
	//
	// DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The additional information.
	//
	// example:
	//
	// Null
	External *string `json:"External,omitempty" xml:"External,omitempty"`
	// The rate at which the stress testing task replayed the traffic. This value is a positive integer. Valid values: **0*	- to **30**. Default value: **1**.
	//
	// example:
	//
	// 1
	Rate *int32 `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The duration of the stress testing task. Unit: millisecond.
	//
	// example:
	//
	// 86400000
	RequestDuration *int64 `json:"RequestDuration,omitempty" xml:"RequestDuration,omitempty"`
	// The duration of the stress testing task of the smart pressure test type. Unit: millisecond.
	//
	// example:
	//
	// 86400000
	SmartPressureTime *int32 `json:"SmartPressureTime,omitempty" xml:"SmartPressureTime,omitempty"`
	// The source of the task. Valid values:
	//
	// 	- **DAS**
	//
	// 	- **OPEN_API**
	//
	// example:
	//
	// DAS
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The reused information about the analysis result of full SQL statistics.
	//
	// example:
	//
	// {"sqlUuid":"task_a37d2f07-45cb-4413-a2a6-c66c68****","metaUuid":"task_211e2561-5c0c-486b-864c-56b511****","sqlFile":"cl-1620057600000-1800626.sc","metaFile":"cl-1620057600000-1800626.meta"}
	SqlCompleteReuse *string `json:"SqlCompleteReuse,omitempty" xml:"SqlCompleteReuse,omitempty"`
	// The database engine of the source instance. Valid values:
	//
	// example:
	//
	// RDS
	SrcInstanceArea *string `json:"SrcInstanceArea,omitempty" xml:"SrcInstanceArea,omitempty"`
	// The UUID of the source instance.
	//
	// example:
	//
	// hdm_3063db6792965c080a4bcb6e6304****
	SrcInstanceUuid *string `json:"SrcInstanceUuid,omitempty" xml:"SrcInstanceUuid,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	SrcPublicIp *string `json:"SrcPublicIp,omitempty" xml:"SrcPublicIp,omitempty"`
	// The state that indicates the operation performed for the stress testing task. Valid values:
	//
	// 	- **WAIT_TARGET**: prepares the destination instance.
	//
	// 	- **WAIT_DBGATEWAY**: prepares the DBGateway.
	//
	// 	- **WAIT_SQL**: prepares the full SQL statistics.
	//
	// 	- **WAIT_LOGIC**: prepares to replay the traffic.
	//
	// example:
	//
	// WAIT_TARGET
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The status of the stress testing task. Valid values:
	//
	// 	- **SUCCESS**: The task was successful.
	//
	// 	- **IGNORED**: The task was ignored.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **EXCEPTION**: The task is abnormal.
	//
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the table that is used for stress testing.
	//
	// example:
	//
	// [{"TABLE_NAME":"customer1","TABLE_SCHEMA":"tpcc"}]
	TableSchema *string `json:"TableSchema,omitempty" xml:"TableSchema,omitempty"`
	// The task ID.
	//
	// example:
	//
	// e5cec704-0518-430f-8263-76f4dcds****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the stress testing task. Valid values:
	//
	// 	- **pressure test*	- (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
	//
	// 	- **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
	//
	// example:
	//
	// pressure test
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The topic that contains the consumed data. This topic is a topic in Message Queue for Apache Kafka.
	//
	// example:
	//
	// das
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// The Alibaba Cloud account ID.
	//
	// example:
	//
	// 1091411816252****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The version of the stress testing task. Valid values:
	//
	// 	- **V2.0**
	//
	// 	- **V3.0**
	//
	// example:
	//
	// V3.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
	// The path of the temporary directory that is generated for stress testing.
	//
	// example:
	//
	// /tmp/bench/
	WorkDir *string `json:"WorkDir,omitempty" xml:"WorkDir,omitempty"`
}

func (s DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetArchiveJobId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ArchiveJobId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetArchiveOssTableName(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ArchiveOssTableName = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetArchiveState(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ArchiveState = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetBackupId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.BackupId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetBackupType(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.BackupType = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetBenchStep(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.BenchStep = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetBenchStepStatus(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.BenchStepStatus = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetClientGatewayId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ClientGatewayId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetClientType(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ClientType = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDescription(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Description = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDstInstanceUuid(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DstInstanceUuid = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDstIp(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DstIp = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDstPort(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DstPort = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDstType(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DstType = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobClass(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobName(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobName = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobState(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobState = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobStatus(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobStatus = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetEcsInstanceId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.EcsInstanceId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetEndState(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.EndState = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetErrorCode(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetErrorMessage(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetExternal(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.External = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetRate(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Rate = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetRequestDuration(v int64) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.RequestDuration = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSmartPressureTime(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SmartPressureTime = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSource(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Source = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSqlCompleteReuse(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SqlCompleteReuse = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSrcInstanceArea(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SrcInstanceArea = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSrcInstanceUuid(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SrcInstanceUuid = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSrcPublicIp(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SrcPublicIp = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetState(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.State = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetStatus(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Status = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetTableSchema(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.TableSchema = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetTaskId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.TaskId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetTaskType(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.TaskType = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetTopic(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Topic = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetUserId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.UserId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetVersion(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Version = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetWorkDir(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.WorkDir = &v
	return s
}

type DescribeCloudBenchTasksResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudBenchTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudBenchTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponse) SetHeaders(v map[string]*string) *DescribeCloudBenchTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudBenchTasksResponse) SetStatusCode(v int32) *DescribeCloudBenchTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudBenchTasksResponse) SetBody(v *DescribeCloudBenchTasksResponseBody) *DescribeCloudBenchTasksResponse {
	s.Body = v
	return s
}

type DescribeCloudbenchTaskRequest struct {
	// The ID of the stress testing task. You can call the [DescribeCloudBenchTasks](https://help.aliyun.com/document_detail/230670.html) operation to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// e5cec704-0518-430f-8263-76f4dcds****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeCloudbenchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskRequest) SetTaskId(v string) *DescribeCloudbenchTaskRequest {
	s.TaskId = &v
	return s
}

type DescribeCloudbenchTaskResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *DescribeCloudbenchTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudbenchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskResponseBody) SetCode(v string) *DescribeCloudbenchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBody) SetData(v *DescribeCloudbenchTaskResponseBodyData) *DescribeCloudbenchTaskResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCloudbenchTaskResponseBody) SetMessage(v string) *DescribeCloudbenchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBody) SetRequestId(v string) *DescribeCloudbenchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBody) SetSuccess(v string) *DescribeCloudbenchTaskResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudbenchTaskResponseBodyData struct {
	// The ID of the archiving task.
	//
	// example:
	//
	// \\"202105211430070112231480820340758****
	ArchiveJobId *string `json:"ArchiveJobId,omitempty" xml:"ArchiveJobId,omitempty"`
	// The name of the table that was archived to Object Storage Service (OSS).
	//
	// example:
	//
	// custins15546355_161604665****
	ArchiveOssTableName *string `json:"ArchiveOssTableName,omitempty" xml:"ArchiveOssTableName,omitempty"`
	// The archiving state of the file that stores the analysis result of full SQL statistics. Valid values:
	//
	// 	- **0**: The file archiving is not started.
	//
	// 	- **1**: The file is archived.
	//
	// 	- **2**: An error occurred.
	//
	// 	- **3**: The file is being archived.
	//
	// 	- **4**: The archived file does not need to be downloaded.
	//
	// example:
	//
	// 1
	ArchiveState *int32 `json:"ArchiveState,omitempty" xml:"ArchiveState,omitempty"`
	// The ID of the backup set. You can call the [DescribeBackups](https://help.aliyun.com/document_detail/26273.html) operation to query the ID of the backup set.
	//
	// example:
	//
	// 229132
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The backup type. Valid values:
	//
	// 	- **TIMESTAMP**
	//
	// 	- **BACKUPID**
	//
	// example:
	//
	// TIMESTAMP
	BackupType *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
	// The substep in the stress testing task. Valid values:
	//
	// 	- **NEW**: initializes the stress testing task.
	//
	// 	- **WAIT_BUY_ECS**: purchases an ECS instance.
	//
	// 	- **WAIT_START_ECS**: starts an ECS instance.
	//
	// 	- **WAIT_INSTALL_JDK**: installs the Java Development Kit (JDK).
	//
	// 	- **WAIT_INSTALL_DBGATEWAY**: installs the database gateway (DBGateway).
	//
	// 	- **ADD_SECURITY_IPS_STEP**: configure a security group whitelist.
	//
	// 	- **ARCHIVE**: archives the full SQL statistics.
	//
	// 	- **DOWNLOAD**: downloads the file that stores the analysis result of full SQL statistics.
	//
	// 	- **PROCEED**: preprocesses the file that stores the analysis result of full SQL statistics.
	//
	// 	- **PRE_LOAD**: preloads the file that stores the analysis result of full SQL statistics.
	//
	// 	- **VALIDATE**: verifies the functionality of stress testing.
	//
	// 	- **PRESSURE**: starts the stress testing task.
	//
	// example:
	//
	// PROCEED
	BenchStep *string `json:"BenchStep,omitempty" xml:"BenchStep,omitempty"`
	// The status that indicates the substep performed on the stress testing task. Valid values:
	//
	// 	- **NEW**: The task is being initialized.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **FAILED**: The task failed.
	//
	// 	- **FINISHED**: The task is complete.
	//
	// 	- **Terminated**: The task is terminated.
	//
	// 	- **Deleted**: The task is deleted.
	//
	// example:
	//
	// FINISHED
	BenchStepStatus *string `json:"BenchStepStatus,omitempty" xml:"BenchStepStatus,omitempty"`
	// The DBGateway ID of the stress testing client.
	//
	// example:
	//
	// 58598b2af48a0193dfc16fc6964ef****
	ClientGatewayId *string `json:"ClientGatewayId,omitempty" xml:"ClientGatewayId,omitempty"`
	// The type of the stress testing client. Valid values:
	//
	// 	- **ECS**: indicates that you must create the [DBGateway](https://help.aliyun.com/document_detail/64905.html).
	//
	// 	- **DAS_ECS**: indicates that DAS automatically purchases and deploys an ECS instance for stress testing.
	//
	// example:
	//
	// ECS
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The description of the stress testing task.
	//
	// example:
	//
	// test-das-bench-0501
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The UUID of the destination instance.
	//
	// example:
	//
	// hdm_d887b5ccf99fa0dc9a1e5aaac368****
	DstInstanceUuid *string `json:"DstInstanceUuid,omitempty" xml:"DstInstanceUuid,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	DstIp *string `json:"DstIp,omitempty" xml:"DstIp,omitempty"`
	// The port number of the destination instance.
	//
	// example:
	//
	// 3306
	DstPort *int32 `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	// The type of the identifier that is used to indicate the destination instance. Valid values:
	//
	// 	- **Instance*	- (default): the instance ID.
	//
	// 	- **ConnectionString**: the endpoint of the instance.
	//
	// example:
	//
	// Instance
	DstType *string `json:"DstType,omitempty" xml:"DstType,omitempty"`
	// The specification of the DTS task.
	//
	// example:
	//
	// medium
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The ID of the DTS migration task.
	//
	// example:
	//
	// i03e3zty16i****
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the Data Transmission Service (DTS) task.
	//
	// example:
	//
	// RDS_TO_RDS_MIGRATION
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The state of the DTS task. Valid values:
	//
	// 	- **NOT_STARTED**: The task is not started.
	//
	// 	- **PRE_CHECKING**: The task is in precheck.
	//
	// 	- **PRE_CHECK_FAILED**: The precheck failed.
	//
	// 	- **CHECKING**: The task is being checked.
	//
	// 	- **MIGRATING**: The data is being migrated.
	//
	// 	- **CATCHED**: The data is migrated from the source instance to the destination instance.
	//
	// 	- **SUSPENDING**: The task is suspended.
	//
	// 	- **MIGRATION_FAILED**: The data failed to be migrated.
	//
	// 	- **FINISHED**: The task is complete.
	//
	// 	- **INITIALIZING**: The synchronization is being initialized.
	//
	// 	- **INITIALIZE_FAILED**: The synchronization failed to be initialized.
	//
	// 	- **SYNCHRONIZING**: The data is being synchronized.
	//
	// 	- **MODIFYING**: The objects to be synchronized are being changed.
	//
	// 	- **SWITCHING**: The roles of the instances are being switched.
	//
	// 	- **FAILED**: The task failed.
	//
	// example:
	//
	// CHECKING
	DtsJobState *int32 `json:"DtsJobState,omitempty" xml:"DtsJobState,omitempty"`
	// The state of the DTS task. Valid values:
	//
	// 	- **NOT_STARTED**: The task is not started.
	//
	// 	- **PRE_CHECKING**: The task is in precheck.
	//
	// 	- **PRE_CHECK_FAILED**: The precheck failed.
	//
	// 	- **CHECKING**: The task is being checked.
	//
	// 	- **MIGRATING**: The data is being migrated.
	//
	// 	- **CATCHED**: The data is migrated from the source instance to the destination instance.
	//
	// 	- **SUSPENDING**: The task is suspended.
	//
	// 	- **MIGRATION_FAILED**: The data failed to be migrated.
	//
	// 	- **FINISHED**: The task is complete.
	//
	// 	- **INITIALIZING**: The synchronization is being initialized.
	//
	// 	- **INITIALIZE_FAILED**: The synchronization failed to be initialized.
	//
	// 	- **SYNCHRONIZING**: The data is being synchronized.
	//
	// 	- **MODIFYING**: The objects to be synchronized are being changed.
	//
	// 	- **SWITCHING**: The roles of the instances are being switched.
	//
	// 	- **FAILED**: The task failed.
	//
	// example:
	//
	// PRE_CHECKING
	DtsJobStatus *string `json:"DtsJobStatus,omitempty" xml:"DtsJobStatus,omitempty"`
	// The ID of the Elastic Compute Service (ECS) instance.
	//
	// example:
	//
	// i-bp1ecr5go2go1****
	EcsInstanceId *string `json:"EcsInstanceId,omitempty" xml:"EcsInstanceId,omitempty"`
	// The state that specifies the last operation that is performed for the stress testing task. Valid values:
	//
	// 	- **WAIT_TARGET**: prepares the destination instance.
	//
	// 	- **WAIT_DBGATEWAY**: prepares the DBGateway.
	//
	// 	- **WAIT_SQL**: prepares the full SQL statistics.
	//
	// 	- **WAIT_LOGIC**: prepares to replay the traffic.
	//
	// >  When the state of a stress testing task changes to the state that is specified by the EndState parameter, the stress testing task becomes completed.
	//
	// example:
	//
	// WAIT_LOGIC
	EndState *string `json:"EndState,omitempty" xml:"EndState,omitempty"`
	// The error code returned for the substep of the stress testing task.
	//
	// example:
	//
	// 10910
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the request failed.
	//
	// example:
	//
	// DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The additional information.
	//
	// example:
	//
	// Null
	External *string `json:"External,omitempty" xml:"External,omitempty"`
	// The rate at which the stress testing task replayed the traffic. The value is a positive integer. Valid values:**1*	- to **30**. Default value: **1**.
	//
	// example:
	//
	// 1
	Rate *int64 `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The duration of the stress testing task for which traffic was captured from the source instance.
	//
	// example:
	//
	// 864000
	RequestDuration *int64 `json:"RequestDuration,omitempty" xml:"RequestDuration,omitempty"`
	// The duration of the stress testing task for which the traffic was generated on the destination instance. Unit: milliseconds.
	//
	// example:
	//
	// 86400000
	SmartPressureTime *int32 `json:"SmartPressureTime,omitempty" xml:"SmartPressureTime,omitempty"`
	// The source of the task. Valid values:
	//
	// 	- **DAS**
	//
	// 	- **OPEN_API**
	//
	// example:
	//
	// DAS
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The reuse information about the analysis result of full SQL statistics.
	//
	// example:
	//
	// {"sqlUuid":"task_a37d2f07-45cb-****-a2a6-c66c62****","metaUuid":"task_211e2561-5c0c-486b-864c-56b511****","sqlFile":"cl-1620057600000-1800626.sc","metaFile":"cl-1620057600000-180****.meta"}
	SqlCompleteReuse *string `json:"SqlCompleteReuse,omitempty" xml:"SqlCompleteReuse,omitempty"`
	// The database type of the source instance. Valid values:
	//
	// example:
	//
	// RDS
	SrcInstanceArea *string `json:"SrcInstanceArea,omitempty" xml:"SrcInstanceArea,omitempty"`
	// The UUID of the source instance.
	//
	// example:
	//
	// a364e414-e68b-4e5c-9166-65b3a153****
	SrcInstanceUuid *string `json:"SrcInstanceUuid,omitempty" xml:"SrcInstanceUuid,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	SrcPublicIp *string `json:"SrcPublicIp,omitempty" xml:"SrcPublicIp,omitempty"`
	// The state that indicates the operation performed for the stress testing task. Valid values:
	//
	// 	- **WAIT_TARGET**: prepares the destination instance.
	//
	// 	- **WAIT_DBGATEWAY**: prepares the DBGateway.
	//
	// 	- **WAIT_SQL**: prepares the full SQL statistics.
	//
	// 	- **WAIT_LOGIC**: prepares to replay the traffic.
	//
	// example:
	//
	// WAIT_TARGET
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The state of the stress testing task. Valid values:
	//
	// 	- **SUCCESS**: The task is successful.
	//
	// 	- **IGNORED**: The task is ignored.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **EXCEPTION**: An error occurred.
	//
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the table that is used for stress testing.
	//
	// example:
	//
	// [{"TABLE_NAME":"customer1","TABLE_SCHEMA":"tpcc"}]
	TableSchema *string `json:"TableSchema,omitempty" xml:"TableSchema,omitempty"`
	// The task ID.
	//
	// example:
	//
	// e5cec704-0518-430f-8263-76f4dcds****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the stress testing task. Valid values:
	//
	// 	- **pressure test*	- (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
	//
	// 	- **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
	//
	// example:
	//
	// pressure test
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The topic that contains the consumed data. This topic is a topic in Message Queue for Apache Kafka.
	//
	// example:
	//
	// das
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// The ID of the Alibaba Cloud account.
	//
	// example:
	//
	// 109141182625****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The version of the stress testing task. Valid values:
	//
	// 	- **V2.0**
	//
	// 	- **V3.0**
	//
	// example:
	//
	// V3.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
	// The temporary directory generated for stress testing.
	//
	// example:
	//
	// /tmp/bench/
	WorkDir *string `json:"WorkDir,omitempty" xml:"WorkDir,omitempty"`
}

func (s DescribeCloudbenchTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetArchiveJobId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ArchiveJobId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetArchiveOssTableName(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ArchiveOssTableName = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetArchiveState(v int32) *DescribeCloudbenchTaskResponseBodyData {
	s.ArchiveState = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetBackupId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.BackupId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetBackupType(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.BackupType = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetBenchStep(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.BenchStep = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetBenchStepStatus(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.BenchStepStatus = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetClientGatewayId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ClientGatewayId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetClientType(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ClientType = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDescription(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDstInstanceUuid(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DstInstanceUuid = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDstIp(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DstIp = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDstPort(v int32) *DescribeCloudbenchTaskResponseBodyData {
	s.DstPort = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDstType(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DstType = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobClass(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobName(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobName = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobState(v int32) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobState = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobStatus(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobStatus = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetEcsInstanceId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.EcsInstanceId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetEndState(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.EndState = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetErrorCode(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetErrorMessage(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetExternal(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.External = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetRate(v int64) *DescribeCloudbenchTaskResponseBodyData {
	s.Rate = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetRequestDuration(v int64) *DescribeCloudbenchTaskResponseBodyData {
	s.RequestDuration = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSmartPressureTime(v int32) *DescribeCloudbenchTaskResponseBodyData {
	s.SmartPressureTime = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSource(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Source = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSqlCompleteReuse(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.SqlCompleteReuse = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSrcInstanceArea(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.SrcInstanceArea = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSrcInstanceUuid(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.SrcInstanceUuid = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSrcPublicIp(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.SrcPublicIp = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetState(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.State = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetStatus(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetTableSchema(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.TableSchema = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetTaskId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetTaskType(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.TaskType = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetTopic(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Topic = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetUserId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.UserId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetVersion(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Version = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetWorkDir(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.WorkDir = &v
	return s
}

type DescribeCloudbenchTaskResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudbenchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudbenchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskResponse) SetHeaders(v map[string]*string) *DescribeCloudbenchTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudbenchTaskResponse) SetStatusCode(v int32) *DescribeCloudbenchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudbenchTaskResponse) SetBody(v *DescribeCloudbenchTaskResponseBody) *DescribeCloudbenchTaskResponse {
	s.Body = v
	return s
}

type DescribeCloudbenchTaskConfigRequest struct {
	// The task ID. You can call the [DescribeCloudBenchTasks](https://help.aliyun.com/document_detail/230670.html) operation to query the task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// e5cec704-0518-430f-8263-76f4dcds****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeCloudbenchTaskConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskConfigRequest) SetTaskId(v string) *DescribeCloudbenchTaskConfigRequest {
	s.TaskId = &v
	return s
}

type DescribeCloudbenchTaskConfigResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *DescribeCloudbenchTaskConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudbenchTaskConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetCode(v string) *DescribeCloudbenchTaskConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetData(v *DescribeCloudbenchTaskConfigResponseBodyData) *DescribeCloudbenchTaskConfigResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetMessage(v string) *DescribeCloudbenchTaskConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetRequestId(v string) *DescribeCloudbenchTaskConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetSuccess(v string) *DescribeCloudbenchTaskConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudbenchTaskConfigResponseBodyData struct {
	// The path in which the files are archived.
	//
	// example:
	//
	// /tmp/das/cloudbench/archive-sqls/
	ArchiveFolder *string `json:"ArchiveFolder,omitempty" xml:"ArchiveFolder,omitempty"`
	// The command that was run to start the stress testing task.
	//
	// example:
	//
	// java -jar /tmp/das/cloudbench/CloudBenchClient.jar --bench --rocksdb /tmp/das/cloudbench/rocksdb --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-a836-49e6-9f70-1c3822fc9239 --result_file /tmp/das/cloudbench/null.result --user cloudb***	- --pwd \\"cloudbench@****\\" --host rm-bp1j5f8s5x26kq79216****.mysql.rds.aliyuncs.com --port 3306 --charset utf8mb4 --interval 1 --bench_time 3600 --rate_factor 1.0 --start_time 1621353601 --rt > /tmp/das/cloudbench/null.log
	BenchCmd *string `json:"BenchCmd,omitempty" xml:"BenchCmd,omitempty"`
	// The path to the JAR file that is used for stress testing.
	//
	// example:
	//
	// /tmp/das/cloudbench/CloudBenchClient.jar
	ClientJarPath *string `json:"ClientJarPath,omitempty" xml:"ClientJarPath,omitempty"`
	// The path to the JAR file that is stored in OSS. The JAR file is used for stress testing.
	//
	// example:
	//
	// https://cloudbench-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/CloudBenchClient.jar?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=28p%2BCe4tNHpr9VPOcHc3Si9iOb****
	JarOnOss *string `json:"JarOnOss,omitempty" xml:"JarOnOss,omitempty"`
	// The command that was run to preload the file that stores the analysis result of full SQL statistics.
	//
	// example:
	//
	// java -jar /tmp/das/cloudbench/CloudBenchClient.jar --load --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-****-49e6-9f70-1c3822fc***	- --rocksdb /tmp/das/cloudbench/rocksdb
	LoadCmd *string `json:"LoadCmd,omitempty" xml:"LoadCmd,omitempty"`
	// The name of the metadata file.
	//
	// example:
	//
	// cl-1621353601000-360****.meta
	MetaFileName *string `json:"MetaFileName,omitempty" xml:"MetaFileName,omitempty"`
	// The name of the metadata file stored in Object Storage Service (OSS).
	//
	// example:
	//
	// "https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.meta?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=Qsehg3tzeA57M%2BIixAbWPWAtvl****
	MetaFileOnOss *string `json:"MetaFileOnOss,omitempty" xml:"MetaFileOnOss,omitempty"`
	// The path to the metadata file.
	//
	// example:
	//
	// /tmp/das/cloudbench/cl-1621353601000-360****.meta
	MetaFilePath *string `json:"MetaFilePath,omitempty" xml:"MetaFilePath,omitempty"`
	// The command that was run to parse the file that stores the analysis result of full SQL statistics.
	//
	// example:
	//
	// cd /tmp/das/cloudbench && java -jar CloudBenchClient.jar --parse --threads 32 --file /tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc9239.archiveSql --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --parent_patmp/das/cloudbench --source RDS --h /thost rm-bp1j5f8s5x266****.mysql.rds.aliyuncs.com --port 3306 --user cloudb***	- --pwd \\"cloudbench@****\\" --cutSqlLen 8192 --db_black_list=information_schema,test,unknow,null
	ParseCmd *string `json:"ParseCmd,omitempty" xml:"ParseCmd,omitempty"`
	// The path to the file that is parsed. The file stores the analysis result of full SQL statistics.
	//
	// example:
	//
	// /tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc****.archiveSql
	ParseFilePath *string `json:"ParseFilePath,omitempty" xml:"ParseFilePath,omitempty"`
	// The location where the RocksDB storage system is deployed in the stress testing client.
	//
	// example:
	//
	// /tmp/das/cloudbench/rocksdb
	RocksDbPath *string `json:"RocksDbPath,omitempty" xml:"RocksDbPath,omitempty"`
	// The name of the file that stores the analysis result of full SQL statistics.
	//
	// example:
	//
	// cl-1621353601000-360****.sc
	SqlFileName *string `json:"SqlFileName,omitempty" xml:"SqlFileName,omitempty"`
	// The name of the file that stores the analysis result of full SQL statistics and that is stored in OSS.
	//
	// example:
	//
	// https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.sc?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=LYMADwo%2BRrJeqR3e4d8OlIkVmw****
	SqlFileOnOss *string `json:"SqlFileOnOss,omitempty" xml:"SqlFileOnOss,omitempty"`
	// The path to the file that stores the analysis result of full SQL statistics.
	//
	// example:
	//
	// /tmp/das/cloudbench/cl-1621353601000-360****.sc
	SqlFilePath *string `json:"SqlFilePath,omitempty" xml:"SqlFilePath,omitempty"`
	// The task ID.
	//
	// example:
	//
	// e5cec704-0518-430f-8263-76f4dcds****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The Alibaba Cloud account ID.
	//
	// example:
	//
	// 1091411816252****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The path of the temporary directory that is generated for stress testing.
	//
	// example:
	//
	// /tmp/bench/
	WorkDir *string `json:"WorkDir,omitempty" xml:"WorkDir,omitempty"`
}

func (s DescribeCloudbenchTaskConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetArchiveFolder(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.ArchiveFolder = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetBenchCmd(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.BenchCmd = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetClientJarPath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.ClientJarPath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetJarOnOss(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.JarOnOss = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetLoadCmd(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.LoadCmd = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetMetaFileName(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.MetaFileName = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetMetaFileOnOss(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.MetaFileOnOss = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetMetaFilePath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.MetaFilePath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetParseCmd(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.ParseCmd = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetParseFilePath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.ParseFilePath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetRocksDbPath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.RocksDbPath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetSqlFileName(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.SqlFileName = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetSqlFileOnOss(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.SqlFileOnOss = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetSqlFilePath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.SqlFilePath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetTaskId(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetUserId(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.UserId = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetWorkDir(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.WorkDir = &v
	return s
}

type DescribeCloudbenchTaskConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudbenchTaskConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudbenchTaskConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskConfigResponse) SetHeaders(v map[string]*string) *DescribeCloudbenchTaskConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponse) SetStatusCode(v int32) *DescribeCloudbenchTaskConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponse) SetBody(v *DescribeCloudbenchTaskConfigResponseBody) *DescribeCloudbenchTaskConfigResponse {
	s.Body = v
	return s
}

type DescribeDiagnosticReportListRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1668420492000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1668398892000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDiagnosticReportListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListRequest) SetDBInstanceId(v string) *DescribeDiagnosticReportListRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDiagnosticReportListRequest) SetEndTime(v string) *DescribeDiagnosticReportListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDiagnosticReportListRequest) SetPageNo(v string) *DescribeDiagnosticReportListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeDiagnosticReportListRequest) SetPageSize(v string) *DescribeDiagnosticReportListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDiagnosticReportListRequest) SetStartTime(v string) *DescribeDiagnosticReportListRequest {
	s.StartTime = &v
	return s
}

type DescribeDiagnosticReportListResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information of the diagnostics reports. Valid values:
	//
	// 	- **total**: the number of diagnostics reports.
	//
	// 	- **score**: the health score.
	//
	// 	- **diagnosticTime**: the time when the diagnostics report was generated. The time is displayed in UTC.
	//
	// 	- **startTime**: the start time of the query. The time is displayed in UTC.
	//
	// 	- **endTime**: the end time of the query. The time is displayed in UTC.
	//
	// example:
	//
	// {     "total": 1,     "list": [       {         "score": 100,         "diagnosticTime": "2022-11-14T08:17:00Z",         "startTime": "2022-11-14T07:16:59Z",         "endTime": "2022-11-14T08:16:59Z"       }     ]   }
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// D00DB161-FEF6-5428-B37A-8D29A4C2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s DescribeDiagnosticReportListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListResponseBody) SetCode(v string) *DescribeDiagnosticReportListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetData(v string) *DescribeDiagnosticReportListResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetMessage(v string) *DescribeDiagnosticReportListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetRequestId(v string) *DescribeDiagnosticReportListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetSuccess(v string) *DescribeDiagnosticReportListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetSynchro(v string) *DescribeDiagnosticReportListResponseBody {
	s.Synchro = &v
	return s
}

type DescribeDiagnosticReportListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnosticReportListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnosticReportListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListResponse) SetHeaders(v map[string]*string) *DescribeDiagnosticReportListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosticReportListResponse) SetStatusCode(v int32) *DescribeDiagnosticReportListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosticReportListResponse) SetBody(v *DescribeDiagnosticReportListResponseBody) *DescribeDiagnosticReportListResponse {
	s.Body = v
	return s
}

type DescribeHotBigKeysRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The ID of the ApsaraDB for Redis instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	//
	// example:
	//
	// r-****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeHotBigKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysRequest) SetConsoleContext(v string) *DescribeHotBigKeysRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DescribeHotBigKeysRequest) SetInstanceId(v string) *DescribeHotBigKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeHotBigKeysRequest) SetNodeId(v string) *DescribeHotBigKeysRequest {
	s.NodeId = &v
	return s
}

type DescribeHotBigKeysResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The list of hot keys and large keys.
	Data *DescribeHotBigKeysResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeHotBigKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBody) SetCode(v string) *DescribeHotBigKeysResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHotBigKeysResponseBody) SetData(v *DescribeHotBigKeysResponseBodyData) *DescribeHotBigKeysResponseBody {
	s.Data = v
	return s
}

func (s *DescribeHotBigKeysResponseBody) SetMessage(v string) *DescribeHotBigKeysResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHotBigKeysResponseBody) SetRequestId(v string) *DescribeHotBigKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHotBigKeysResponseBody) SetSuccess(v string) *DescribeHotBigKeysResponseBody {
	s.Success = &v
	return s
}

type DescribeHotBigKeysResponseBodyData struct {
	// The reason why the large key failed to be queried.
	//
	// example:
	//
	// current version doesn\\"t support
	BigKeyMsg *string `json:"BigKeyMsg,omitempty" xml:"BigKeyMsg,omitempty"`
	// The list of large keys.
	BigKeys *DescribeHotBigKeysResponseBodyDataBigKeys `json:"BigKeys,omitempty" xml:"BigKeys,omitempty" type:"Struct"`
	// The reason why the hot key failed to be queried.
	//
	// example:
	//
	// current version doesn\\"t support
	HotKeyMsg *string `json:"HotKeyMsg,omitempty" xml:"HotKeyMsg,omitempty"`
	// The list of hot keys.
	HotKeys *DescribeHotBigKeysResponseBodyDataHotKeys `json:"HotKeys,omitempty" xml:"HotKeys,omitempty" type:"Struct"`
}

func (s DescribeHotBigKeysResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyData) SetBigKeyMsg(v string) *DescribeHotBigKeysResponseBodyData {
	s.BigKeyMsg = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyData) SetBigKeys(v *DescribeHotBigKeysResponseBodyDataBigKeys) *DescribeHotBigKeysResponseBodyData {
	s.BigKeys = v
	return s
}

func (s *DescribeHotBigKeysResponseBodyData) SetHotKeyMsg(v string) *DescribeHotBigKeysResponseBodyData {
	s.HotKeyMsg = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyData) SetHotKeys(v *DescribeHotBigKeysResponseBodyDataHotKeys) *DescribeHotBigKeysResponseBodyData {
	s.HotKeys = v
	return s
}

type DescribeHotBigKeysResponseBodyDataBigKeys struct {
	BigKey []*DescribeHotBigKeysResponseBodyDataBigKeysBigKey `json:"BigKey,omitempty" xml:"BigKey,omitempty" type:"Repeated"`
}

func (s DescribeHotBigKeysResponseBodyDataBigKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyDataBigKeys) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeys) SetBigKey(v []*DescribeHotBigKeysResponseBodyDataBigKeysBigKey) *DescribeHotBigKeysResponseBodyDataBigKeys {
	s.BigKey = v
	return s
}

type DescribeHotBigKeysResponseBodyDataBigKeysBigKey struct {
	// The database in which the key is stored.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The key.
	//
	// example:
	//
	// abc:def:eng
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	//
	// example:
	//
	// zset
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 2
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeHotBigKeysResponseBodyDataBigKeysBigKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyDataBigKeysBigKey) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetDb(v int32) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.Db = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetKey(v string) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.Key = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetKeyType(v string) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.KeyType = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetNodeId(v string) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.NodeId = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetSize(v int64) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.Size = &v
	return s
}

type DescribeHotBigKeysResponseBodyDataHotKeys struct {
	HotKey []*DescribeHotBigKeysResponseBodyDataHotKeysHotKey `json:"HotKey,omitempty" xml:"HotKey,omitempty" type:"Repeated"`
}

func (s DescribeHotBigKeysResponseBodyDataHotKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyDataHotKeys) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeys) SetHotKey(v []*DescribeHotBigKeysResponseBodyDataHotKeysHotKey) *DescribeHotBigKeysResponseBodyDataHotKeys {
	s.HotKey = v
	return s
}

type DescribeHotBigKeysResponseBodyDataHotKeysHotKey struct {
	// The database in which the key is stored.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The frequency at which the key is accessed, which indicates the queries per second (QPS) of the key.
	//
	// example:
	//
	// 5500~6000
	Hot *string `json:"Hot,omitempty" xml:"Hot,omitempty"`
	// The key.
	//
	// example:
	//
	// abc:def:eng
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	//
	// example:
	//
	// zset
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The statistical value that is calculated based on the least frequently used (LFU) caching algorithm.
	//
	// example:
	//
	// 253
	Lfu *int32 `json:"Lfu,omitempty" xml:"Lfu,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeHotBigKeysResponseBodyDataHotKeysHotKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyDataHotKeysHotKey) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetDb(v int32) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.Db = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetHot(v string) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.Hot = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetKey(v string) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.Key = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetKeyType(v string) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.KeyType = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetLfu(v int32) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.Lfu = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetNodeId(v string) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.NodeId = &v
	return s
}

type DescribeHotBigKeysResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHotBigKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHotBigKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponse) SetHeaders(v map[string]*string) *DescribeHotBigKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeHotBigKeysResponse) SetStatusCode(v int32) *DescribeHotBigKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHotBigKeysResponse) SetBody(v *DescribeHotBigKeysResponseBody) *DescribeHotBigKeysResponse {
	s.Body = v
	return s
}

type DescribeHotKeysRequest struct {
	// The ID of the ApsaraDB for Redis instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeHotKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysRequest) SetInstanceId(v string) *DescribeHotKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeHotKeysRequest) SetNodeId(v string) *DescribeHotKeysRequest {
	s.NodeId = &v
	return s
}

type DescribeHotKeysResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the hot keys.
	Data *DescribeHotKeysResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeHotKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysResponseBody) SetCode(v string) *DescribeHotKeysResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHotKeysResponseBody) SetData(v *DescribeHotKeysResponseBodyData) *DescribeHotKeysResponseBody {
	s.Data = v
	return s
}

func (s *DescribeHotKeysResponseBody) SetMessage(v string) *DescribeHotKeysResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHotKeysResponseBody) SetRequestId(v string) *DescribeHotKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHotKeysResponseBody) SetSuccess(v string) *DescribeHotKeysResponseBody {
	s.Success = &v
	return s
}

type DescribeHotKeysResponseBodyData struct {
	HotKey []*DescribeHotKeysResponseBodyDataHotKey `json:"HotKey,omitempty" xml:"HotKey,omitempty" type:"Repeated"`
}

func (s DescribeHotKeysResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysResponseBodyData) SetHotKey(v []*DescribeHotKeysResponseBodyDataHotKey) *DescribeHotKeysResponseBodyData {
	s.HotKey = v
	return s
}

type DescribeHotKeysResponseBodyDataHotKey struct {
	// The database in which the key is stored.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The frequency at which the key is accessed, which indicates the queries per second (QPS) of the key.
	//
	// example:
	//
	// 5500~6000
	Hot *string `json:"Hot,omitempty" xml:"Hot,omitempty"`
	// The name of the key.
	//
	// example:
	//
	// abc:def:eng
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	//
	// example:
	//
	// zset
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 2
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeHotKeysResponseBodyDataHotKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysResponseBodyDataHotKey) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetDb(v int32) *DescribeHotKeysResponseBodyDataHotKey {
	s.Db = &v
	return s
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetHot(v string) *DescribeHotKeysResponseBodyDataHotKey {
	s.Hot = &v
	return s
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetKey(v string) *DescribeHotKeysResponseBodyDataHotKey {
	s.Key = &v
	return s
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetKeyType(v string) *DescribeHotKeysResponseBodyDataHotKey {
	s.KeyType = &v
	return s
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetSize(v int64) *DescribeHotKeysResponseBodyDataHotKey {
	s.Size = &v
	return s
}

type DescribeHotKeysResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHotKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHotKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysResponse) SetHeaders(v map[string]*string) *DescribeHotKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeHotKeysResponse) SetStatusCode(v int32) *DescribeHotKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHotKeysResponse) SetBody(v *DescribeHotKeysResponseBody) *DescribeHotKeysResponse {
	s.Body = v
	return s
}

type DescribeInstanceDasProRequest struct {
	// The database instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceDasProRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDasProRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDasProRequest) SetInstanceId(v string) *DescribeInstanceDasProRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceDasProResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether DAS Enterprise Edition is enabled for the database instance. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9CB97BC4-6479-55D0-B9D0-EA925AFE****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInstanceDasProResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDasProResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDasProResponseBody) SetCode(v string) *DescribeInstanceDasProResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceDasProResponseBody) SetData(v bool) *DescribeInstanceDasProResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeInstanceDasProResponseBody) SetMessage(v string) *DescribeInstanceDasProResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceDasProResponseBody) SetRequestId(v string) *DescribeInstanceDasProResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceDasProResponseBody) SetSuccess(v string) *DescribeInstanceDasProResponseBody {
	s.Success = &v
	return s
}

type DescribeInstanceDasProResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceDasProResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceDasProResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDasProResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDasProResponse) SetHeaders(v map[string]*string) *DescribeInstanceDasProResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceDasProResponse) SetStatusCode(v int32) *DescribeInstanceDasProResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceDasProResponse) SetBody(v *DescribeInstanceDasProResponseBody) *DescribeInstanceDasProResponse {
	s.Body = v
	return s
}

type DescribeSlowLogHistogramAsyncRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1662518540764
	EndTime *int64                                         `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Filters []*DescribeSlowLogHistogramAsyncRequestFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// r-****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1596177993000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeSlowLogHistogramAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogHistogramAsyncRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogHistogramAsyncRequest) SetEndTime(v int64) *DescribeSlowLogHistogramAsyncRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncRequest) SetFilters(v []*DescribeSlowLogHistogramAsyncRequestFilters) *DescribeSlowLogHistogramAsyncRequest {
	s.Filters = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncRequest) SetInstanceId(v string) *DescribeSlowLogHistogramAsyncRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncRequest) SetNodeId(v string) *DescribeSlowLogHistogramAsyncRequest {
	s.NodeId = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncRequest) SetStartTime(v int64) *DescribeSlowLogHistogramAsyncRequest {
	s.StartTime = &v
	return s
}

type DescribeSlowLogHistogramAsyncRequestFilters struct {
	// example:
	//
	// None
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// None
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSlowLogHistogramAsyncRequestFilters) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogHistogramAsyncRequestFilters) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogHistogramAsyncRequestFilters) SetKey(v string) *DescribeSlowLogHistogramAsyncRequestFilters {
	s.Key = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncRequestFilters) SetValue(v string) *DescribeSlowLogHistogramAsyncRequestFilters {
	s.Value = &v
	return s
}

type DescribeSlowLogHistogramAsyncResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// AsyncResult<Histogram>。
	Data *DescribeSlowLogHistogramAsyncResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSlowLogHistogramAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogHistogramAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogHistogramAsyncResponseBody) SetCode(v string) *DescribeSlowLogHistogramAsyncResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBody) SetData(v *DescribeSlowLogHistogramAsyncResponseBodyData) *DescribeSlowLogHistogramAsyncResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBody) SetMessage(v string) *DescribeSlowLogHistogramAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBody) SetRequestId(v string) *DescribeSlowLogHistogramAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBody) SetSuccess(v string) *DescribeSlowLogHistogramAsyncResponseBody {
	s.Success = &v
	return s
}

type DescribeSlowLogHistogramAsyncResponseBodyData struct {
	Data *DescribeSlowLogHistogramAsyncResponseBodyDataData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 10910
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// true
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// example:
	//
	// Successful
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestKey *string `json:"RequestKey,omitempty" xml:"RequestKey,omitempty"`
	// example:
	//
	// async__20ee808e72257f16a4fe024057ca****
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// example:
	//
	// SUCCESS
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 1645668213000
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s DescribeSlowLogHistogramAsyncResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogHistogramAsyncResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyData) SetData(v *DescribeSlowLogHistogramAsyncResponseBodyDataData) *DescribeSlowLogHistogramAsyncResponseBodyData {
	s.Data = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyData) SetErrorCode(v int32) *DescribeSlowLogHistogramAsyncResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyData) SetIsFinish(v bool) *DescribeSlowLogHistogramAsyncResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyData) SetMessage(v string) *DescribeSlowLogHistogramAsyncResponseBodyData {
	s.Message = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyData) SetRequestKey(v string) *DescribeSlowLogHistogramAsyncResponseBodyData {
	s.RequestKey = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyData) SetResultId(v string) *DescribeSlowLogHistogramAsyncResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyData) SetState(v string) *DescribeSlowLogHistogramAsyncResponseBodyData {
	s.State = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyData) SetTimestamp(v int64) *DescribeSlowLogHistogramAsyncResponseBodyData {
	s.Timestamp = &v
	return s
}

type DescribeSlowLogHistogramAsyncResponseBodyDataData struct {
	AvgCPUTime               []*float64                                               `json:"AvgCPUTime,omitempty" xml:"AvgCPUTime,omitempty" type:"Repeated"`
	AvgDocExamined           []*float64                                               `json:"AvgDocExamined,omitempty" xml:"AvgDocExamined,omitempty" type:"Repeated"`
	AvgFrows                 []*float64                                               `json:"AvgFrows,omitempty" xml:"AvgFrows,omitempty" type:"Repeated"`
	AvgIOWrites              []*float64                                               `json:"AvgIOWrites,omitempty" xml:"AvgIOWrites,omitempty" type:"Repeated"`
	AvgKeysExamined          []*float64                                               `json:"AvgKeysExamined,omitempty" xml:"AvgKeysExamined,omitempty" type:"Repeated"`
	AvgLastRowsCountAffected []*float64                                               `json:"AvgLastRowsCountAffected,omitempty" xml:"AvgLastRowsCountAffected,omitempty" type:"Repeated"`
	AvgLockTime              []*float64                                               `json:"AvgLockTime,omitempty" xml:"AvgLockTime,omitempty" type:"Repeated"`
	AvgLogicalIOReads        []*float64                                               `json:"AvgLogicalIOReads,omitempty" xml:"AvgLogicalIOReads,omitempty" type:"Repeated"`
	AvgPhysicalIOReads       []*float64                                               `json:"AvgPhysicalIOReads,omitempty" xml:"AvgPhysicalIOReads,omitempty" type:"Repeated"`
	AvgReturnNum             []*float64                                               `json:"AvgReturnNum,omitempty" xml:"AvgReturnNum,omitempty" type:"Repeated"`
	AvgRows                  []*float64                                               `json:"AvgRows,omitempty" xml:"AvgRows,omitempty" type:"Repeated"`
	AvgRowsCountAffected     []*float64                                               `json:"AvgRowsCountAffected,omitempty" xml:"AvgRowsCountAffected,omitempty" type:"Repeated"`
	AvgRowsExamined          []*float64                                               `json:"AvgRowsExamined,omitempty" xml:"AvgRowsExamined,omitempty" type:"Repeated"`
	AvgRowsSent              []*float64                                               `json:"AvgRowsSent,omitempty" xml:"AvgRowsSent,omitempty" type:"Repeated"`
	AvgRt                    []*float64                                               `json:"AvgRt,omitempty" xml:"AvgRt,omitempty" type:"Repeated"`
	AvgScnt                  []*float64                                               `json:"AvgScnt,omitempty" xml:"AvgScnt,omitempty" type:"Repeated"`
	CPUTime                  []*float64                                               `json:"CPUTime,omitempty" xml:"CPUTime,omitempty" type:"Repeated"`
	Count                    []*int64                                                 `json:"Count,omitempty" xml:"Count,omitempty" type:"Repeated"`
	DocExamined              []*int64                                                 `json:"DocExamined,omitempty" xml:"DocExamined,omitempty" type:"Repeated"`
	Frows                    []*int64                                                 `json:"Frows,omitempty" xml:"Frows,omitempty" type:"Repeated"`
	IOWrites                 []*int64                                                 `json:"IOWrites,omitempty" xml:"IOWrites,omitempty" type:"Repeated"`
	Item                     []*DescribeSlowLogHistogramAsyncResponseBodyDataDataItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
	KeysExamined             []*int64                                                 `json:"KeysExamined,omitempty" xml:"KeysExamined,omitempty" type:"Repeated"`
	LastRowsCountAffected    []*int64                                                 `json:"LastRowsCountAffected,omitempty" xml:"LastRowsCountAffected,omitempty" type:"Repeated"`
	LockTime                 []*float64                                               `json:"LockTime,omitempty" xml:"LockTime,omitempty" type:"Repeated"`
	LogicalIOReads           []*int64                                                 `json:"LogicalIOReads,omitempty" xml:"LogicalIOReads,omitempty" type:"Repeated"`
	MaxCPUTime               []*float64                                               `json:"MaxCPUTime,omitempty" xml:"MaxCPUTime,omitempty" type:"Repeated"`
	MaxDocExamined           []*int64                                                 `json:"MaxDocExamined,omitempty" xml:"MaxDocExamined,omitempty" type:"Repeated"`
	MaxFrows                 []*int64                                                 `json:"MaxFrows,omitempty" xml:"MaxFrows,omitempty" type:"Repeated"`
	MaxIOWrites              []*int64                                                 `json:"MaxIOWrites,omitempty" xml:"MaxIOWrites,omitempty" type:"Repeated"`
	MaxKeysExamined          []*int64                                                 `json:"MaxKeysExamined,omitempty" xml:"MaxKeysExamined,omitempty" type:"Repeated"`
	MaxLastRowsCountAffected []*int64                                                 `json:"MaxLastRowsCountAffected,omitempty" xml:"MaxLastRowsCountAffected,omitempty" type:"Repeated"`
	MaxLockTime              []*float64                                               `json:"MaxLockTime,omitempty" xml:"MaxLockTime,omitempty" type:"Repeated"`
	MaxLogicalIOReads        []*int64                                                 `json:"MaxLogicalIOReads,omitempty" xml:"MaxLogicalIOReads,omitempty" type:"Repeated"`
	MaxPhysicalIOReads       []*int64                                                 `json:"MaxPhysicalIOReads,omitempty" xml:"MaxPhysicalIOReads,omitempty" type:"Repeated"`
	MaxReturnNum             []*int64                                                 `json:"MaxReturnNum,omitempty" xml:"MaxReturnNum,omitempty" type:"Repeated"`
	MaxRows                  []*int64                                                 `json:"MaxRows,omitempty" xml:"MaxRows,omitempty" type:"Repeated"`
	MaxRowsCountAffected     []*int64                                                 `json:"MaxRowsCountAffected,omitempty" xml:"MaxRowsCountAffected,omitempty" type:"Repeated"`
	MaxRowsExamined          []*int64                                                 `json:"MaxRowsExamined,omitempty" xml:"MaxRowsExamined,omitempty" type:"Repeated"`
	MaxRowsSent              []*int64                                                 `json:"MaxRowsSent,omitempty" xml:"MaxRowsSent,omitempty" type:"Repeated"`
	MaxRt                    []*float64                                               `json:"MaxRt,omitempty" xml:"MaxRt,omitempty" type:"Repeated"`
	MaxScnt                  []*int64                                                 `json:"MaxScnt,omitempty" xml:"MaxScnt,omitempty" type:"Repeated"`
	PhysicalIOReads          []*int64                                                 `json:"PhysicalIOReads,omitempty" xml:"PhysicalIOReads,omitempty" type:"Repeated"`
	ReturnNum                []*int64                                                 `json:"ReturnNum,omitempty" xml:"ReturnNum,omitempty" type:"Repeated"`
	Rows                     []*int64                                                 `json:"Rows,omitempty" xml:"Rows,omitempty" type:"Repeated"`
	RowsCountAffected        []*int64                                                 `json:"RowsCountAffected,omitempty" xml:"RowsCountAffected,omitempty" type:"Repeated"`
	RowsExamined             []*int64                                                 `json:"RowsExamined,omitempty" xml:"RowsExamined,omitempty" type:"Repeated"`
	RowsSent                 []*int64                                                 `json:"RowsSent,omitempty" xml:"RowsSent,omitempty" type:"Repeated"`
	Rt                       []*float64                                               `json:"Rt,omitempty" xml:"Rt,omitempty" type:"Repeated"`
	Scnt                     []*int64                                                 `json:"Scnt,omitempty" xml:"Scnt,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Total *int64   `json:"Total,omitempty" xml:"Total,omitempty"`
	Ts    []*int64 `json:"Ts,omitempty" xml:"Ts,omitempty" type:"Repeated"`
	TsEnd []*int64 `json:"TsEnd,omitempty" xml:"TsEnd,omitempty" type:"Repeated"`
}

func (s DescribeSlowLogHistogramAsyncResponseBodyDataData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogHistogramAsyncResponseBodyDataData) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgCPUTime(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgCPUTime = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgDocExamined(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgDocExamined = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgFrows(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgFrows = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgIOWrites(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgIOWrites = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgKeysExamined(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgKeysExamined = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgLastRowsCountAffected(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgLastRowsCountAffected = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgLockTime(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgLockTime = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgLogicalIOReads(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgLogicalIOReads = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgPhysicalIOReads(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgPhysicalIOReads = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgReturnNum(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgReturnNum = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgRows(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgRows = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgRowsCountAffected(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgRowsCountAffected = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgRowsExamined(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgRowsExamined = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgRowsSent(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgRowsSent = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgRt(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgRt = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetAvgScnt(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.AvgScnt = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetCPUTime(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.CPUTime = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetCount(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.Count = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetDocExamined(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.DocExamined = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetFrows(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.Frows = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetIOWrites(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.IOWrites = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetItem(v []*DescribeSlowLogHistogramAsyncResponseBodyDataDataItem) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.Item = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetKeysExamined(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.KeysExamined = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetLastRowsCountAffected(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.LastRowsCountAffected = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetLockTime(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.LockTime = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetLogicalIOReads(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.LogicalIOReads = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxCPUTime(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxCPUTime = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxDocExamined(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxDocExamined = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxFrows(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxFrows = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxIOWrites(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxIOWrites = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxKeysExamined(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxKeysExamined = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxLastRowsCountAffected(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxLastRowsCountAffected = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxLockTime(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxLockTime = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxLogicalIOReads(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxLogicalIOReads = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxPhysicalIOReads(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxPhysicalIOReads = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxReturnNum(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxReturnNum = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxRows(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxRows = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxRowsCountAffected(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxRowsCountAffected = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxRowsExamined(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxRowsExamined = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxRowsSent(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxRowsSent = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxRt(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxRt = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetMaxScnt(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.MaxScnt = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetPhysicalIOReads(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.PhysicalIOReads = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetReturnNum(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.ReturnNum = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetRows(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.Rows = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetRowsCountAffected(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.RowsCountAffected = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetRowsExamined(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.RowsExamined = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetRowsSent(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.RowsSent = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetRt(v []*float64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.Rt = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetScnt(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.Scnt = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetTotal(v int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.Total = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetTs(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.Ts = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataData) SetTsEnd(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataData {
	s.TsEnd = v
	return s
}

type DescribeSlowLogHistogramAsyncResponseBodyDataDataItem struct {
	Count    []*int64                                                         `json:"Count,omitempty" xml:"Count,omitempty" type:"Repeated"`
	InsItems []*DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems `json:"InsItems,omitempty" xml:"InsItems,omitempty" type:"Repeated"`
	// example:
	//
	// r-bp1hi0wg57s3n0i3n8-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeSlowLogHistogramAsyncResponseBodyDataDataItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogHistogramAsyncResponseBodyDataDataItem) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataDataItem) SetCount(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataDataItem {
	s.Count = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataDataItem) SetInsItems(v []*DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems) *DescribeSlowLogHistogramAsyncResponseBodyDataDataItem {
	s.InsItems = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataDataItem) SetNodeId(v string) *DescribeSlowLogHistogramAsyncResponseBodyDataDataItem {
	s.NodeId = &v
	return s
}

type DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems struct {
	Count []*int64 `json:"Count,omitempty" xml:"Count,omitempty" type:"Repeated"`
	// example:
	//
	// 2492
	InsId *string `json:"InsId,omitempty" xml:"InsId,omitempty"`
	// example:
	//
	// userAdmin
	InsRole *string `json:"InsRole,omitempty" xml:"InsRole,omitempty"`
}

func (s DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems) SetCount(v []*int64) *DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems {
	s.Count = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems) SetInsId(v string) *DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems {
	s.InsId = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems) SetInsRole(v string) *DescribeSlowLogHistogramAsyncResponseBodyDataDataItemInsItems {
	s.InsRole = &v
	return s
}

type DescribeSlowLogHistogramAsyncResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSlowLogHistogramAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSlowLogHistogramAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogHistogramAsyncResponse) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogHistogramAsyncResponse) SetHeaders(v map[string]*string) *DescribeSlowLogHistogramAsyncResponse {
	s.Headers = v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponse) SetStatusCode(v int32) *DescribeSlowLogHistogramAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSlowLogHistogramAsyncResponse) SetBody(v *DescribeSlowLogHistogramAsyncResponseBody) *DescribeSlowLogHistogramAsyncResponse {
	s.Body = v
	return s
}

type DescribeSlowLogStatisticRequest struct {
	// example:
	//
	// true
	Asc *bool `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1608888296000
	EndTime *int64                                    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Filters []*DescribeSlowLogStatisticRequestFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// count
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1568269711000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 04ea3310df40c3fa8a6b4854db49f79a
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSlowLogStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticRequest) SetAsc(v bool) *DescribeSlowLogStatisticRequest {
	s.Asc = &v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetEndTime(v int64) *DescribeSlowLogStatisticRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetFilters(v []*DescribeSlowLogStatisticRequestFilters) *DescribeSlowLogStatisticRequest {
	s.Filters = v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetInstanceId(v string) *DescribeSlowLogStatisticRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetNodeId(v string) *DescribeSlowLogStatisticRequest {
	s.NodeId = &v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetOrderBy(v string) *DescribeSlowLogStatisticRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetPageNumber(v int32) *DescribeSlowLogStatisticRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetPageSize(v int32) *DescribeSlowLogStatisticRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetStartTime(v int64) *DescribeSlowLogStatisticRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetTemplateId(v string) *DescribeSlowLogStatisticRequest {
	s.TemplateId = &v
	return s
}

func (s *DescribeSlowLogStatisticRequest) SetType(v string) *DescribeSlowLogStatisticRequest {
	s.Type = &v
	return s
}

type DescribeSlowLogStatisticRequestFilters struct {
	// example:
	//
	// KeyWords
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// select
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSlowLogStatisticRequestFilters) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticRequestFilters) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticRequestFilters) SetKey(v string) *DescribeSlowLogStatisticRequestFilters {
	s.Key = &v
	return s
}

func (s *DescribeSlowLogStatisticRequestFilters) SetValue(v string) *DescribeSlowLogStatisticRequestFilters {
	s.Value = &v
	return s
}

type DescribeSlowLogStatisticResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// AsyncResult<DBLogRecords<SlowLogStat>>
	Data *DescribeSlowLogStatisticResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 52D540CF-C517-1F57-BB42-9035F96******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSlowLogStatisticResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticResponseBody) SetCode(v string) *DescribeSlowLogStatisticResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBody) SetData(v *DescribeSlowLogStatisticResponseBodyData) *DescribeSlowLogStatisticResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBody) SetMessage(v string) *DescribeSlowLogStatisticResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBody) SetRequestId(v string) *DescribeSlowLogStatisticResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBody) SetSuccess(v string) *DescribeSlowLogStatisticResponseBody {
	s.Success = &v
	return s
}

type DescribeSlowLogStatisticResponseBodyData struct {
	Data *DescribeSlowLogStatisticResponseBodyDataData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 10910
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// true
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 123456789
	RequestKey *string `json:"RequestKey,omitempty" xml:"RequestKey,omitempty"`
	// example:
	//
	// async__665ee69612f1627c7fd9f3c85075****
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// example:
	//
	// SUCCESS
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 1735104224250
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s DescribeSlowLogStatisticResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticResponseBodyData) SetData(v *DescribeSlowLogStatisticResponseBodyDataData) *DescribeSlowLogStatisticResponseBodyData {
	s.Data = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyData) SetErrorCode(v int32) *DescribeSlowLogStatisticResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyData) SetIsFinish(v bool) *DescribeSlowLogStatisticResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyData) SetMessage(v string) *DescribeSlowLogStatisticResponseBodyData {
	s.Message = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyData) SetRequestKey(v string) *DescribeSlowLogStatisticResponseBodyData {
	s.RequestKey = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyData) SetResultId(v string) *DescribeSlowLogStatisticResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyData) SetState(v string) *DescribeSlowLogStatisticResponseBodyData {
	s.State = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyData) SetTimestamp(v int64) *DescribeSlowLogStatisticResponseBodyData {
	s.Timestamp = &v
	return s
}

type DescribeSlowLogStatisticResponseBodyDataData struct {
	// example:
	//
	// rm-k2ja51w7cnusg5a1x
	DbInstanceId *int64 `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty"`
	// example:
	//
	// 0
	DbInstanceName *string `json:"DbInstanceName,omitempty" xml:"DbInstanceName,omitempty"`
	// example:
	//
	// 2024-08-08T02:15:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 10
	ItemsNumbers *int64                                              `json:"ItemsNumbers,omitempty" xml:"ItemsNumbers,omitempty"`
	Logs         []*DescribeSlowLogStatisticResponseBodyDataDataLogs `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	MaxRecordsPerPage *int32 `json:"MaxRecordsPerPage,omitempty" xml:"MaxRecordsPerPage,omitempty"`
	// example:
	//
	// pi-wz99g5rn7w1x8h0sf
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// 1
	PageNumbers *int32 `json:"PageNumbers,omitempty" xml:"PageNumbers,omitempty"`
	// example:
	//
	// 2024-10-08T02:01:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 13
	TotalRecords *int64 `json:"TotalRecords,omitempty" xml:"TotalRecords,omitempty"`
}

func (s DescribeSlowLogStatisticResponseBodyDataData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticResponseBodyDataData) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetDbInstanceId(v int64) *DescribeSlowLogStatisticResponseBodyDataData {
	s.DbInstanceId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetDbInstanceName(v string) *DescribeSlowLogStatisticResponseBodyDataData {
	s.DbInstanceName = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetEndTime(v string) *DescribeSlowLogStatisticResponseBodyDataData {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetItemsNumbers(v int64) *DescribeSlowLogStatisticResponseBodyDataData {
	s.ItemsNumbers = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetLogs(v []*DescribeSlowLogStatisticResponseBodyDataDataLogs) *DescribeSlowLogStatisticResponseBodyDataData {
	s.Logs = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetMaxRecordsPerPage(v int32) *DescribeSlowLogStatisticResponseBodyDataData {
	s.MaxRecordsPerPage = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetNodeId(v string) *DescribeSlowLogStatisticResponseBodyDataData {
	s.NodeId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetPageNumbers(v int32) *DescribeSlowLogStatisticResponseBodyDataData {
	s.PageNumbers = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetStartTime(v string) *DescribeSlowLogStatisticResponseBodyDataData {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataData) SetTotalRecords(v int64) *DescribeSlowLogStatisticResponseBodyDataData {
	s.TotalRecords = &v
	return s
}

type DescribeSlowLogStatisticResponseBodyDataDataLogs struct {
	// example:
	//
	// edu_admin
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// example:
	//
	// -
	AvgCPUTime        *float64 `json:"AvgCPUTime,omitempty" xml:"AvgCPUTime,omitempty"`
	AvgCPUTimeSeconds *float64 `json:"AvgCPUTimeSeconds,omitempty" xml:"AvgCPUTimeSeconds,omitempty"`
	// example:
	//
	// 10000
	AvgDocExamined *float64 `json:"AvgDocExamined,omitempty" xml:"AvgDocExamined,omitempty"`
	AvgFrows       *float64 `json:"AvgFrows,omitempty" xml:"AvgFrows,omitempty"`
	// example:
	//
	// 1000
	AvgIOWrites *float64 `json:"AvgIOWrites,omitempty" xml:"AvgIOWrites,omitempty"`
	// example:
	//
	// 20000
	AvgKeysExamined *float64 `json:"AvgKeysExamined,omitempty" xml:"AvgKeysExamined,omitempty"`
	// example:
	//
	// 1000
	AvgLastRowsCountAffected *float64 `json:"AvgLastRowsCountAffected,omitempty" xml:"AvgLastRowsCountAffected,omitempty"`
	// example:
	//
	// -
	AvgLockTime *float64 `json:"AvgLockTime,omitempty" xml:"AvgLockTime,omitempty"`
	// example:
	//
	// 0.0
	AvgLockTimeSeconds *float64 `json:"AvgLockTimeSeconds,omitempty" xml:"AvgLockTimeSeconds,omitempty"`
	// example:
	//
	// 1000
	AvgLogicalIOReads *float64 `json:"AvgLogicalIOReads,omitempty" xml:"AvgLogicalIOReads,omitempty"`
	// example:
	//
	// 1000
	AvgPhysicalIOReads *float64 `json:"AvgPhysicalIOReads,omitempty" xml:"AvgPhysicalIOReads,omitempty"`
	// example:
	//
	// -
	AvgQueryTime *float64 `json:"AvgQueryTime,omitempty" xml:"AvgQueryTime,omitempty"`
	// example:
	//
	// 6.211
	AvgQueryTimeSeconds *float64 `json:"AvgQueryTimeSeconds,omitempty" xml:"AvgQueryTimeSeconds,omitempty"`
	// example:
	//
	// 1
	AvgReturnNum *float64 `json:"AvgReturnNum,omitempty" xml:"AvgReturnNum,omitempty"`
	AvgRows      *float64 `json:"AvgRows,omitempty" xml:"AvgRows,omitempty"`
	// example:
	//
	// 1000
	AvgRowsCountAffected *float64 `json:"AvgRowsCountAffected,omitempty" xml:"AvgRowsCountAffected,omitempty"`
	// example:
	//
	// 53421.0
	AvgRowsExamined *float64 `json:"AvgRowsExamined,omitempty" xml:"AvgRowsExamined,omitempty"`
	// example:
	//
	// 2.0
	AvgRowsSent *float64 `json:"AvgRowsSent,omitempty" xml:"AvgRowsSent,omitempty"`
	AvgScnt     *float64 `json:"AvgScnt,omitempty" xml:"AvgScnt,omitempty"`
	// example:
	//
	// -
	CPUTime        *float64 `json:"CPUTime,omitempty" xml:"CPUTime,omitempty"`
	CPUTimeSeconds *float64 `json:"CPUTimeSeconds,omitempty" xml:"CPUTimeSeconds,omitempty"`
	// example:
	//
	// SELECT b?.id,b?.t?,b?.id,b?.t? FROM testtb? b? JOIN testtb? b? ON b?.id=b?.id WHERE b?.t? LIKE ? ORDER BY b?.t? DESC
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// example:
	//
	// 12
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// 0.2034
	CountRate *float64 `json:"CountRate,omitempty" xml:"CountRate,omitempty"`
	// example:
	//
	// member_score
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// example:
	//
	// work-wechat-api
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// example:
	//
	// 0
	DbInstanceName *string `json:"DbInstanceName,omitempty" xml:"DbInstanceName,omitempty"`
	// example:
	//
	// 2000000
	DocExamined *int64 `json:"DocExamined,omitempty" xml:"DocExamined,omitempty"`
	// example:
	//
	// 1
	DocsExamined *int64                                                     `json:"DocsExamined,omitempty" xml:"DocsExamined,omitempty"`
	Frows        *int64                                                     `json:"Frows,omitempty" xml:"Frows,omitempty"`
	Histogram    *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram `json:"Histogram,omitempty" xml:"Histogram,omitempty" type:"Struct"`
	// example:
	//
	// 172.23.142.178
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// example:
	//
	// mongo-abc123456
	HostInsId *string `json:"HostInsId,omitempty" xml:"HostInsId,omitempty"`
	// example:
	//
	// 1000
	IOWrites *int64 `json:"IOWrites,omitempty" xml:"IOWrites,omitempty"`
	// example:
	//
	// rm-uf6zix1z2jh1y6fe5
	InsName *string `json:"InsName,omitempty" xml:"InsName,omitempty"`
	// example:
	//
	// __system
	InsRole *string `json:"InsRole,omitempty" xml:"InsRole,omitempty"`
	// example:
	//
	// 20000
	KeysExamined *int64 `json:"KeysExamined,omitempty" xml:"KeysExamined,omitempty"`
	// example:
	//
	// 1000
	LastRowsCountAffected *int64 `json:"LastRowsCountAffected,omitempty" xml:"LastRowsCountAffected,omitempty"`
	// example:
	//
	// -
	LockTime *float64 `json:"LockTime,omitempty" xml:"LockTime,omitempty"`
	// example:
	//
	// 0.0
	LockTimeSeconds *float64 `json:"LockTimeSeconds,omitempty" xml:"LockTimeSeconds,omitempty"`
	// example:
	//
	// 1000
	LogicalIOReads *int64 `json:"LogicalIOReads,omitempty" xml:"LogicalIOReads,omitempty"`
	// example:
	//
	// -
	MaxCPUTime        *float64 `json:"MaxCPUTime,omitempty" xml:"MaxCPUTime,omitempty"`
	MaxCPUTimeSeconds *float64 `json:"MaxCPUTimeSeconds,omitempty" xml:"MaxCPUTimeSeconds,omitempty"`
	// example:
	//
	// 1000000
	MaxDocExamined *int64 `json:"MaxDocExamined,omitempty" xml:"MaxDocExamined,omitempty"`
	MaxFrows       *int64 `json:"MaxFrows,omitempty" xml:"MaxFrows,omitempty"`
	// example:
	//
	// 1000
	MaxIOWrites *int64 `json:"MaxIOWrites,omitempty" xml:"MaxIOWrites,omitempty"`
	// example:
	//
	// 2000000
	MaxKeysExamined *int64 `json:"MaxKeysExamined,omitempty" xml:"MaxKeysExamined,omitempty"`
	// example:
	//
	// 1000
	MaxLastRowsCountAffected *int64 `json:"MaxLastRowsCountAffected,omitempty" xml:"MaxLastRowsCountAffected,omitempty"`
	// example:
	//
	// -
	MaxLockTime *float64 `json:"MaxLockTime,omitempty" xml:"MaxLockTime,omitempty"`
	// example:
	//
	// 0.0
	MaxLockTimeSeconds *float64 `json:"MaxLockTimeSeconds,omitempty" xml:"MaxLockTimeSeconds,omitempty"`
	// example:
	//
	// 1000
	MaxLogicalIOReads *int64 `json:"MaxLogicalIOReads,omitempty" xml:"MaxLogicalIOReads,omitempty"`
	// example:
	//
	// 1000
	MaxPhysicalIOReads *int64 `json:"MaxPhysicalIOReads,omitempty" xml:"MaxPhysicalIOReads,omitempty"`
	// example:
	//
	// -
	MaxQueryTime *float64 `json:"MaxQueryTime,omitempty" xml:"MaxQueryTime,omitempty"`
	// example:
	//
	// 14.402
	MaxQueryTimeSeconds *float64 `json:"MaxQueryTimeSeconds,omitempty" xml:"MaxQueryTimeSeconds,omitempty"`
	// example:
	//
	// 1
	MaxReturnNum *int64 `json:"MaxReturnNum,omitempty" xml:"MaxReturnNum,omitempty"`
	MaxRows      *int64 `json:"MaxRows,omitempty" xml:"MaxRows,omitempty"`
	// example:
	//
	// 1000
	MaxRowsCountAffected *int64 `json:"MaxRowsCountAffected,omitempty" xml:"MaxRowsCountAffected,omitempty"`
	// example:
	//
	// 318613
	MaxRowsExamined *int64 `json:"MaxRowsExamined,omitempty" xml:"MaxRowsExamined,omitempty"`
	// example:
	//
	// 256
	MaxRowsSent *int64 `json:"MaxRowsSent,omitempty" xml:"MaxRowsSent,omitempty"`
	MaxScnt     *int64 `json:"MaxScnt,omitempty" xml:"MaxScnt,omitempty"`
	// example:
	//
	// database.collection
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// example:
	//
	// DLNode
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// example:
	//
	// Insert
	OpType *string `json:"OpType,omitempty" xml:"OpType,omitempty"`
	// example:
	//
	// order-1
	OriginAlias *string `json:"OriginAlias,omitempty" xml:"OriginAlias,omitempty"`
	// example:
	//
	// 1000
	PhysicalIOReads *int64 `json:"PhysicalIOReads,omitempty" xml:"PhysicalIOReads,omitempty"`
	// example:
	//
	// SELECT b?.id,b?.t?,b?.id,b?.t? FROM testtb? b? JOIN testtb? b? ON b?.id=b?.id WHERE b?.t? LIKE ? ORDER BY b?.id DESC
	Psql *string `json:"Psql,omitempty" xml:"Psql,omitempty"`
	// example:
	//
	// sq-1pzcdMwRb
	QueryId *string `json:"QueryId,omitempty" xml:"QueryId,omitempty"`
	// example:
	//
	// 2024-12-25T03:00:00Z
	QueryStartTime *string `json:"QueryStartTime,omitempty" xml:"QueryStartTime,omitempty"`
	// example:
	//
	// 272.444
	QueryTime *int64 `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
	// example:
	//
	// 0.1018
	QueryTimeRate *float64 `json:"QueryTimeRate,omitempty" xml:"QueryTimeRate,omitempty"`
	// example:
	//
	// 25.472
	QueryTimeSeconds  *float64 `json:"QueryTimeSeconds,omitempty" xml:"QueryTimeSeconds,omitempty"`
	ReturnItemNumbers *string  `json:"ReturnItemNumbers,omitempty" xml:"ReturnItemNumbers,omitempty"`
	// example:
	//
	// 1
	ReturnNum *int64 `json:"ReturnNum,omitempty" xml:"ReturnNum,omitempty"`
	Rows      *int64 `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// example:
	//
	// 1000
	RowsCountAffected *int64 `json:"RowsCountAffected,omitempty" xml:"RowsCountAffected,omitempty"`
	// example:
	//
	// 2444081
	RowsExamined *int64 `json:"RowsExamined,omitempty" xml:"RowsExamined,omitempty"`
	// example:
	//
	// 772
	RowsSent *int64 `json:"RowsSent,omitempty" xml:"RowsSent,omitempty"`
	// example:
	//
	// SELECT \\"Hello, World!\\" FROM DUAL
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// example:
	//
	// HTTP
	Scheme *string `json:"Scheme,omitempty" xml:"Scheme,omitempty"`
	Scnt   *int64  `json:"Scnt,omitempty" xml:"Scnt,omitempty"`
	// SQL ID。
	//
	// example:
	//
	// 2dca88762ec6b3812504ab8a4b******
	SqlId  *string                                                 `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	SqlTag *DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag `json:"SqlTag,omitempty" xml:"SqlTag,omitempty" type:"Struct"`
	// example:
	//
	// LOGIN
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// example:
	//
	// r-8vba51c588ba3a94
	SubInstanceId *string `json:"SubInstanceId,omitempty" xml:"SubInstanceId,omitempty"`
	// example:
	//
	// users\\nifconfig\\n
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// example:
	//
	// 1
	ThreadId *string `json:"ThreadId,omitempty" xml:"ThreadId,omitempty"`
	// example:
	//
	// 1708568930
	Timestamp *int64                                                   `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Trend     []*DescribeSlowLogStatisticResponseBodyDataDataLogsTrend `json:"Trend,omitempty" xml:"Trend,omitempty" type:"Repeated"`
	// example:
	//
	// user-1
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogs) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAccountName(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AccountName = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgCPUTime(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgCPUTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgCPUTimeSeconds(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgCPUTimeSeconds = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgDocExamined(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgDocExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgFrows(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgFrows = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgIOWrites(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgIOWrites = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgKeysExamined(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgKeysExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgLastRowsCountAffected(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgLastRowsCountAffected = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgLockTime(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgLockTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgLockTimeSeconds(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgLockTimeSeconds = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgLogicalIOReads(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgLogicalIOReads = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgPhysicalIOReads(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgPhysicalIOReads = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgQueryTime(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgQueryTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgQueryTimeSeconds(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgQueryTimeSeconds = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgReturnNum(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgReturnNum = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgRows(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgRows = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgRowsCountAffected(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgRowsCountAffected = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgRowsExamined(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgRowsExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgRowsSent(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgRowsSent = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetAvgScnt(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.AvgScnt = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetCPUTime(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.CPUTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetCPUTimeSeconds(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.CPUTimeSeconds = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetCommand(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Command = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetCount(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Count = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetCountRate(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.CountRate = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetDBName(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.DBName = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetDatabase(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Database = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetDbInstanceName(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.DbInstanceName = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetDocExamined(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.DocExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetDocsExamined(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.DocsExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetFrows(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Frows = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetHistogram(v *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Histogram = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetHostAddress(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.HostAddress = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetHostInsId(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.HostInsId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetIOWrites(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.IOWrites = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetInsName(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.InsName = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetInsRole(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.InsRole = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetKeysExamined(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.KeysExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetLastRowsCountAffected(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.LastRowsCountAffected = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetLockTime(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.LockTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetLockTimeSeconds(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.LockTimeSeconds = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetLogicalIOReads(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.LogicalIOReads = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxCPUTime(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxCPUTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxCPUTimeSeconds(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxCPUTimeSeconds = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxDocExamined(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxDocExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxFrows(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxFrows = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxIOWrites(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxIOWrites = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxKeysExamined(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxKeysExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxLastRowsCountAffected(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxLastRowsCountAffected = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxLockTime(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxLockTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxLockTimeSeconds(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxLockTimeSeconds = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxLogicalIOReads(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxLogicalIOReads = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxPhysicalIOReads(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxPhysicalIOReads = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxQueryTime(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxQueryTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxQueryTimeSeconds(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxQueryTimeSeconds = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxReturnNum(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxReturnNum = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxRows(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxRows = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxRowsCountAffected(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxRowsCountAffected = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxRowsExamined(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxRowsExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxRowsSent(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxRowsSent = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetMaxScnt(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.MaxScnt = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetNamespace(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Namespace = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetNodeType(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.NodeType = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetOpType(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.OpType = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetOriginAlias(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.OriginAlias = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetPhysicalIOReads(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.PhysicalIOReads = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetPsql(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Psql = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetQueryId(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.QueryId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetQueryStartTime(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.QueryStartTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetQueryTime(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.QueryTime = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetQueryTimeRate(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.QueryTimeRate = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetQueryTimeSeconds(v float64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.QueryTimeSeconds = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetReturnItemNumbers(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.ReturnItemNumbers = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetReturnNum(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.ReturnNum = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetRows(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Rows = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetRowsCountAffected(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.RowsCountAffected = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetRowsExamined(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.RowsExamined = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetRowsSent(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.RowsSent = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetSQLText(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.SQLText = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetScheme(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Scheme = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetScnt(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Scnt = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetSqlId(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.SqlId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetSqlTag(v *DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.SqlTag = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetSqlType(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.SqlType = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetSubInstanceId(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.SubInstanceId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetTableName(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.TableName = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetThreadId(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.ThreadId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetTimestamp(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Timestamp = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetTrend(v []*DescribeSlowLogStatisticResponseBodyDataDataLogsTrend) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.Trend = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogs) SetUser(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogs {
	s.User = &v
	return s
}

type DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram struct {
	AvgLockTime     []*float64                                                       `json:"AvgLockTime,omitempty" xml:"AvgLockTime,omitempty" type:"Repeated"`
	AvgRowsExamined []*float64                                                       `json:"AvgRowsExamined,omitempty" xml:"AvgRowsExamined,omitempty" type:"Repeated"`
	AvgRowsSent     []*float64                                                       `json:"AvgRowsSent,omitempty" xml:"AvgRowsSent,omitempty" type:"Repeated"`
	AvgRt           []*float64                                                       `json:"AvgRt,omitempty" xml:"AvgRt,omitempty" type:"Repeated"`
	Count           []*int64                                                         `json:"Count,omitempty" xml:"Count,omitempty" type:"Repeated"`
	Item            []*DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
	LockTime        []*float64                                                       `json:"LockTime,omitempty" xml:"LockTime,omitempty" type:"Repeated"`
	MaxLockTime     []*float64                                                       `json:"MaxLockTime,omitempty" xml:"MaxLockTime,omitempty" type:"Repeated"`
	MaxRowsExamined []*int64                                                         `json:"MaxRowsExamined,omitempty" xml:"MaxRowsExamined,omitempty" type:"Repeated"`
	MaxRowsSent     []*int64                                                         `json:"MaxRowsSent,omitempty" xml:"MaxRowsSent,omitempty" type:"Repeated"`
	MaxRt           []*float64                                                       `json:"MaxRt,omitempty" xml:"MaxRt,omitempty" type:"Repeated"`
	RowsExamined    []*int64                                                         `json:"RowsExamined,omitempty" xml:"RowsExamined,omitempty" type:"Repeated"`
	RowsSent        []*int64                                                         `json:"RowsSent,omitempty" xml:"RowsSent,omitempty" type:"Repeated"`
	Rt              []*float64                                                       `json:"Rt,omitempty" xml:"Rt,omitempty" type:"Repeated"`
	// example:
	//
	// 7
	Total *int64   `json:"Total,omitempty" xml:"Total,omitempty"`
	Ts    []*int64 `json:"Ts,omitempty" xml:"Ts,omitempty" type:"Repeated"`
	TsEnd []*int64 `json:"TsEnd,omitempty" xml:"TsEnd,omitempty" type:"Repeated"`
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetAvgLockTime(v []*float64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.AvgLockTime = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetAvgRowsExamined(v []*float64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.AvgRowsExamined = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetAvgRowsSent(v []*float64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.AvgRowsSent = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetAvgRt(v []*float64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.AvgRt = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetCount(v []*int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.Count = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetItem(v []*DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.Item = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetLockTime(v []*float64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.LockTime = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetMaxLockTime(v []*float64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.MaxLockTime = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetMaxRowsExamined(v []*int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.MaxRowsExamined = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetMaxRowsSent(v []*int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.MaxRowsSent = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetMaxRt(v []*float64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.MaxRt = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetRowsExamined(v []*int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.RowsExamined = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetRowsSent(v []*int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.RowsSent = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetRt(v []*float64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.Rt = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetTotal(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.Total = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetTs(v []*int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.Ts = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram) SetTsEnd(v []*int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogram {
	s.TsEnd = v
	return s
}

type DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem struct {
	Count []*int64 `json:"Count,omitempty" xml:"Count,omitempty" type:"Repeated"`
	// example:
	//
	// r-bp1s1m8hwzrm77kfvz-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem) SetCount(v []*int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem {
	s.Count = v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem) SetNodeId(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogsHistogramItem {
	s.NodeId = &v
	return s
}

type DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag struct {
	Comments *string `json:"Comments,omitempty" xml:"Comments,omitempty"`
	// SQL ID。
	//
	// example:
	//
	// a3931d8c3a9315dd5ed016d71cf*****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// example:
	//
	// DAS_IN_PLAN
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag) SetComments(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag {
	s.Comments = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag) SetSqlId(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag {
	s.SqlId = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag) SetTags(v string) *DescribeSlowLogStatisticResponseBodyDataDataLogsSqlTag {
	s.Tags = &v
	return s
}

type DescribeSlowLogStatisticResponseBodyDataDataLogsTrend struct {
	// example:
	//
	// 1723775362
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// tf-testacc-oos-parameter
	Value interface{} `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogsTrend) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticResponseBodyDataDataLogsTrend) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsTrend) SetTimestamp(v int64) *DescribeSlowLogStatisticResponseBodyDataDataLogsTrend {
	s.Timestamp = &v
	return s
}

func (s *DescribeSlowLogStatisticResponseBodyDataDataLogsTrend) SetValue(v interface{}) *DescribeSlowLogStatisticResponseBodyDataDataLogsTrend {
	s.Value = v
	return s
}

type DescribeSlowLogStatisticResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSlowLogStatisticResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSlowLogStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogStatisticResponse) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogStatisticResponse) SetHeaders(v map[string]*string) *DescribeSlowLogStatisticResponse {
	s.Headers = v
	return s
}

func (s *DescribeSlowLogStatisticResponse) SetStatusCode(v int32) *DescribeSlowLogStatisticResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSlowLogStatisticResponse) SetBody(v *DescribeSlowLogStatisticResponseBody) *DescribeSlowLogStatisticResponse {
	s.Body = v
	return s
}

type DescribeSqlLogConfigRequest struct {
	// The ID of the database instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeSqlLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogConfigRequest) SetInstanceId(v string) *DescribeSqlLogConfigRequest {
	s.InstanceId = &v
	return s
}

type DescribeSqlLogConfigResponseBody struct {
	// The response code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data that is returned.
	Data *DescribeSqlLogConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0A74B755-98B7-59DB-8724-1321B394****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSqlLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogConfigResponseBody) SetCode(v string) *DescribeSqlLogConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBody) SetData(v *DescribeSqlLogConfigResponseBodyData) *DescribeSqlLogConfigResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSqlLogConfigResponseBody) SetMessage(v string) *DescribeSqlLogConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBody) SetRequestId(v string) *DescribeSqlLogConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBody) SetSuccess(v string) *DescribeSqlLogConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeSqlLogConfigResponseBodyData struct {
	// Indicates whether the cold data storage is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	ColdEnable *bool `json:"ColdEnable,omitempty" xml:"ColdEnable,omitempty"`
	// The number of days for which the SQL Explorer and Audit data is stored in cold storage.
	//
	// example:
	//
	// 23
	ColdRetention *int32 `json:"ColdRetention,omitempty" xml:"ColdRetention,omitempty"`
	// The time when the cold data storage was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1683712800000
	ColdStartTime *int64 `json:"ColdStartTime,omitempty" xml:"ColdStartTime,omitempty"`
	// The collector version. Valid values:
	//
	// 	- **MYSQL_V0**
	//
	// 	- **MYSQL_V1**
	//
	// 	- **MYSQL_V2**
	//
	// 	- **MYSQL_V3**
	//
	// 	- **PG_V1**
	//
	// 	- **rdspg_v1**
	//
	// 	- **polarpg_v1**
	//
	// example:
	//
	// MYSQL_V3
	CollectorVersion *string `json:"CollectorVersion,omitempty" xml:"CollectorVersion,omitempty"`
	// Indicates whether the hot data storage is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	HotEnable *bool `json:"HotEnable,omitempty" xml:"HotEnable,omitempty"`
	// The number of days for which the SQL Explorer and Audit data is stored in hot storage.
	//
	// example:
	//
	// 7
	HotRetention *int32 `json:"HotRetention,omitempty" xml:"HotRetention,omitempty"`
	// The time when the hot data storage was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1683712800000
	HotStartTime *int64 `json:"HotStartTime,omitempty" xml:"HotStartTime,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	LogFilter *string `json:"LogFilter,omitempty" xml:"LogFilter,omitempty"`
	// Indicates whether the SQL Explorer feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	RequestEnable *bool `json:"RequestEnable,omitempty" xml:"RequestEnable,omitempty"`
	// The time when the SQL Explorer feature was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1683712800000
	RequestStartTime *int64 `json:"RequestStartTime,omitempty" xml:"RequestStartTime,omitempty"`
	// The time when DAS Enterprise Edition V1 expired. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1715335200000
	RequestStopTime *int64 `json:"RequestStopTime,omitempty" xml:"RequestStopTime,omitempty"`
	// The total storage duration of the SQL Explorer and Audit data. The value of this parameter is the sum of the values of **HotRetention*	- and **ColdRetention**. Unit: day.
	//
	// example:
	//
	// 30
	Retention *int32 `json:"Retention,omitempty" xml:"Retention,omitempty"`
	// Indicates whether DAS Enterprise Edition is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	SqlLogEnable *bool `json:"SqlLogEnable,omitempty" xml:"SqlLogEnable,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	SqlLogSource *string `json:"SqlLogSource,omitempty" xml:"SqlLogSource,omitempty"`
	// The state of data migration. Valid values:
	//
	// 	- **FINISH**: The historical data is migrated.
	//
	// 	- **RUNNING**: The historical data is being migrated.
	//
	// 	- **FAILURE**: The historical data fails to be migrated.
	//
	// example:
	//
	// FINISH
	SqlLogState *string `json:"SqlLogState,omitempty" xml:"SqlLogState,omitempty"`
	// The time when DAS Enterprise Edition was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1683712800000
	SqlLogVisibleTime *int64 `json:"SqlLogVisibleTime,omitempty" xml:"SqlLogVisibleTime,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	SupportMigration *bool `json:"SupportMigration,omitempty" xml:"SupportMigration,omitempty"`
	// The latest version of DAS Enterprise Edition that supports the database instance. Valid values:
	//
	// 	- **SQL_LOG_V0**: DAS Enterprise Edition V0.
	//
	// 	- **SQL_LOG_V1**: DAS Enterprise version V1.
	//
	// 	- **SQL_LOG_V2**: DAS Enterprise Edition V2.
	//
	// 	- **SQL_LOG_V3**: DAS Enterprise Edition V3.
	//
	// 	- **SQL_LOG_NOT_ENABLE**: DAS Enterprise Edition is not enabled.
	//
	// 	- **SQL_LOG_NOT_SUPPORT**: DAS Enterprise Edition is not supported.
	//
	// example:
	//
	// SQL_LOG_V3
	SupportVersion *string `json:"SupportVersion,omitempty" xml:"SupportVersion,omitempty"`
	// The version of DAS Enterprise Edition that is enabled for the database instance. Valid values:
	//
	// 	- **SQL_LOG_V0**: DAS Enterprise Edition V0.
	//
	// 	- **SQL_LOG_V1**: DAS Enterprise version V1.
	//
	// 	- **SQL_LOG_V2**: DAS Enterprise Edition V2.
	//
	// 	- **SQL_LOG_V3**: DAS Enterprise Edition V3.
	//
	// 	- **SQL_LOG_NOT_ENABLE**: DAS Enterprise Edition is not enabled.
	//
	// 	- **SQL_LOG_NOT_SUPPORT**: DAS Enterprise Edition is not supported.
	//
	// example:
	//
	// SQL_LOG_V3
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeSqlLogConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogConfigResponseBodyData) SetColdEnable(v bool) *DescribeSqlLogConfigResponseBodyData {
	s.ColdEnable = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetColdRetention(v int32) *DescribeSqlLogConfigResponseBodyData {
	s.ColdRetention = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetColdStartTime(v int64) *DescribeSqlLogConfigResponseBodyData {
	s.ColdStartTime = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetCollectorVersion(v string) *DescribeSqlLogConfigResponseBodyData {
	s.CollectorVersion = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetHotEnable(v bool) *DescribeSqlLogConfigResponseBodyData {
	s.HotEnable = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetHotRetention(v int32) *DescribeSqlLogConfigResponseBodyData {
	s.HotRetention = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetHotStartTime(v int64) *DescribeSqlLogConfigResponseBodyData {
	s.HotStartTime = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetLogFilter(v string) *DescribeSqlLogConfigResponseBodyData {
	s.LogFilter = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetRequestEnable(v bool) *DescribeSqlLogConfigResponseBodyData {
	s.RequestEnable = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetRequestStartTime(v int64) *DescribeSqlLogConfigResponseBodyData {
	s.RequestStartTime = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetRequestStopTime(v int64) *DescribeSqlLogConfigResponseBodyData {
	s.RequestStopTime = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetRetention(v int32) *DescribeSqlLogConfigResponseBodyData {
	s.Retention = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetSqlLogEnable(v bool) *DescribeSqlLogConfigResponseBodyData {
	s.SqlLogEnable = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetSqlLogSource(v string) *DescribeSqlLogConfigResponseBodyData {
	s.SqlLogSource = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetSqlLogState(v string) *DescribeSqlLogConfigResponseBodyData {
	s.SqlLogState = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetSqlLogVisibleTime(v int64) *DescribeSqlLogConfigResponseBodyData {
	s.SqlLogVisibleTime = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetSupportMigration(v bool) *DescribeSqlLogConfigResponseBodyData {
	s.SupportMigration = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetSupportVersion(v string) *DescribeSqlLogConfigResponseBodyData {
	s.SupportVersion = &v
	return s
}

func (s *DescribeSqlLogConfigResponseBodyData) SetVersion(v string) *DescribeSqlLogConfigResponseBodyData {
	s.Version = &v
	return s
}

type DescribeSqlLogConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSqlLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSqlLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogConfigResponse) SetHeaders(v map[string]*string) *DescribeSqlLogConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeSqlLogConfigResponse) SetStatusCode(v int32) *DescribeSqlLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSqlLogConfigResponse) SetBody(v *DescribeSqlLogConfigResponseBody) *DescribeSqlLogConfigResponse {
	s.Body = v
	return s
}

type DescribeSqlLogRecordsRequest struct {
	// The end of the time range to query. This value is a UNIX timestamp. Unit: millisecond.
	//
	// example:
	//
	// 1608888296000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter conditions.
	Filters []*DescribeSqlLogRecordsRequestFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The database instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// pc-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// 	- For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this parameter is valid only for instances of the Cluster Edition. If you do not specify this parameter, the log details of the primary node is queried by default.
	//
	// 	- For PolarDB-X 2.0 instances, set this parameter to **polarx_cn*	- if the node is a compute node, or **polarx_dn*	- if the node is a data node.
	//
	// example:
	//
	// pi-uf6k5f6g3912i****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The role of the node of the PolarDB-X 2.0 instance. Valid values:
	//
	// 	- \\*\\*polarx_cn\\*\\*: compute node
	//
	// 	- \\*\\*polarx_dn\\*\\*: data node
	//
	// example:
	//
	// polarx_cn
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The beginning of the time range to query. This value is a UNIX timestamp. Unit: millisecond.
	//
	// example:
	//
	// 1596177993000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeSqlLogRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogRecordsRequest) SetEndTime(v int64) *DescribeSqlLogRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSqlLogRecordsRequest) SetFilters(v []*DescribeSqlLogRecordsRequestFilters) *DescribeSqlLogRecordsRequest {
	s.Filters = v
	return s
}

func (s *DescribeSqlLogRecordsRequest) SetInstanceId(v string) *DescribeSqlLogRecordsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSqlLogRecordsRequest) SetNodeId(v string) *DescribeSqlLogRecordsRequest {
	s.NodeId = &v
	return s
}

func (s *DescribeSqlLogRecordsRequest) SetPageNo(v int32) *DescribeSqlLogRecordsRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeSqlLogRecordsRequest) SetPageSize(v int32) *DescribeSqlLogRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSqlLogRecordsRequest) SetRole(v string) *DescribeSqlLogRecordsRequest {
	s.Role = &v
	return s
}

func (s *DescribeSqlLogRecordsRequest) SetStartTime(v int64) *DescribeSqlLogRecordsRequest {
	s.StartTime = &v
	return s
}

type DescribeSqlLogRecordsRequestFilters struct {
	// The filter parameter.
	//
	// >  For more information about the supported filter parameters and their valid values, see the **Supported parameters and values for Key*	- section of this topic.
	//
	// example:
	//
	// keyWords
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the filter parameter.
	//
	// example:
	//
	// select
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSqlLogRecordsRequestFilters) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogRecordsRequestFilters) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogRecordsRequestFilters) SetKey(v string) *DescribeSqlLogRecordsRequestFilters {
	s.Key = &v
	return s
}

func (s *DescribeSqlLogRecordsRequestFilters) SetValue(v string) *DescribeSqlLogRecordsRequestFilters {
	s.Value = &v
	return s
}

type DescribeSqlLogRecordsResponseBody struct {
	// The HTTP status code that is returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data that is returned.
	Data *DescribeSqlLogRecordsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message that is returned.
	//
	// >  If the request is successful, **Successful*	- is returned. If the request fails, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// F43E7FB3-CE67-5FFD-A59C-EFD278BCD7BE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSqlLogRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogRecordsResponseBody) SetCode(v string) *DescribeSqlLogRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBody) SetData(v *DescribeSqlLogRecordsResponseBodyData) *DescribeSqlLogRecordsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSqlLogRecordsResponseBody) SetMessage(v string) *DescribeSqlLogRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBody) SetRequestId(v string) *DescribeSqlLogRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBody) SetSuccess(v string) *DescribeSqlLogRecordsResponseBody {
	s.Success = &v
	return s
}

type DescribeSqlLogRecordsResponseBodyData struct {
	// The end of the time range to query. This value is a UNIX timestamp. Unit: millisecond.
	//
	// example:
	//
	// 1608888296000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Indicates whether the task was complete. Valid values:
	//
	// 	- **0**: no
	//
	// 	- **1**: yes
	//
	// >  If the value of **Finish*	- is 0 and the value of **JobId*	- is returned, the request is an asynchronous request and the return result cannot be directly obtained. You must query the return result based on the value of **JobId**. Specify JobId as the key of **Filters*	- and the value of **JobId*	- as the value of Filters. Example: `Filters=[{"Key": "JobId", "Value": "******"}]`.
	//
	// example:
	//
	// 1
	Finish *string `json:"Finish,omitempty" xml:"Finish,omitempty"`
	// The data.
	Items *DescribeSqlLogRecordsResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The ID of the asynchronous task.
	//
	// example:
	//
	// MzI4NTZfUUlOR0RBT19DTTlfTlUyMF9NWVNRTF9PREJTX0xWU18zMjg1Nl9teXNxbF9XZWQgTWFyIDA2IDE0OjUwOjQ3IENTVCAyMDI0XzBfMzBfRXhlY3V0ZVRpbWVfREVTQ19XZWQgTWFyIDA2IDE0OjM1OjQ3IENTVCAyMDI0Xw==_1709708406465
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The beginning of the time range to query. This value is a UNIX timestamp. Unit: millisecond.
	//
	// example:
	//
	// 1596177993000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The total number of entries.
	//
	// example:
	//
	// 1
	TotalRecords *int64 `json:"TotalRecords,omitempty" xml:"TotalRecords,omitempty"`
}

func (s DescribeSqlLogRecordsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogRecordsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogRecordsResponseBodyData) SetEndTime(v int64) *DescribeSqlLogRecordsResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyData) SetFinish(v string) *DescribeSqlLogRecordsResponseBodyData {
	s.Finish = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyData) SetItems(v *DescribeSqlLogRecordsResponseBodyDataItems) *DescribeSqlLogRecordsResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyData) SetJobId(v string) *DescribeSqlLogRecordsResponseBodyData {
	s.JobId = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyData) SetStartTime(v int64) *DescribeSqlLogRecordsResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyData) SetTotalRecords(v int64) *DescribeSqlLogRecordsResponseBodyData {
	s.TotalRecords = &v
	return s
}

type DescribeSqlLogRecordsResponseBodyDataItems struct {
	// The SQL log data.
	SQLLogRecord []*DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord `json:"SQLLogRecord,omitempty" xml:"SQLLogRecord,omitempty" type:"Repeated"`
}

func (s DescribeSqlLogRecordsResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogRecordsResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogRecordsResponseBodyDataItems) SetSQLLogRecord(v []*DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) *DescribeSqlLogRecordsResponseBodyDataItems {
	s.SQLLogRecord = v
	return s
}

type DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord struct {
	// The account of the database.
	//
	// example:
	//
	// testname
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	Collection *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The amount of time that is consumed to execute the SQL statement. Unit: millisecond.
	//
	// example:
	//
	// 58
	Consume *int64 `json:"Consume,omitempty" xml:"Consume,omitempty"`
	// The CPU execution duration. Unit: microsecond.
	//
	// example:
	//
	// 100
	CpuTime *int64 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The database name.
	//
	// example:
	//
	// testdb
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The time when the SQL statement was executed. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-12-07T02:15:32Z
	ExecuteTime *string `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// The extended information. This parameter is a reserved parameter.
	//
	// example:
	//
	// None
	Ext *string `json:"Ext,omitempty" xml:"Ext,omitempty"`
	// The number of rows that are pulled by the compute nodes of the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 10
	Frows *int64 `json:"Frows,omitempty" xml:"Frows,omitempty"`
	// The IP address of the client.
	//
	// example:
	//
	// 11.197.XX.XX
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The lock wait duration. Unit: millisecond.
	//
	// example:
	//
	// 0
	LockTime *int64 `json:"LockTime,omitempty" xml:"LockTime,omitempty"`
	// The number of logical reads.
	//
	// example:
	//
	// 0
	LogicRead *int64 `json:"LogicRead,omitempty" xml:"LogicRead,omitempty"`
	// The node ID.
	//
	// example:
	//
	// pi-uf6k5f6g3912i****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The timestamp generated when the SQL statement was executed. The value of this parameter is a UNIX timestamp. Unit: millisecond.
	//
	// example:
	//
	// 1701886532000
	OriginTime *int64 `json:"OriginTime,omitempty" xml:"OriginTime,omitempty"`
	// The parallel queue time of the PolarDB for MySQL instance. Unit: millisecond.
	//
	// example:
	//
	// 10
	ParallelDegree *string `json:"ParallelDegree,omitempty" xml:"ParallelDegree,omitempty"`
	// The parallelism of the PolarDB for MySQL cluster.
	//
	// example:
	//
	// 2
	ParallelQueueTime *string `json:"ParallelQueueTime,omitempty" xml:"ParallelQueueTime,omitempty"`
	// The number of physical asynchronous reads.
	//
	// example:
	//
	// 0
	PhysicAsyncRead *int64 `json:"PhysicAsyncRead,omitempty" xml:"PhysicAsyncRead,omitempty"`
	// The total number of physical reads.
	//
	// example:
	//
	// 0
	PhysicRead *int64 `json:"PhysicRead,omitempty" xml:"PhysicRead,omitempty"`
	// The number of physical synchronous reads.
	//
	// example:
	//
	// 0
	PhysicSyncRead *int64 `json:"PhysicSyncRead,omitempty" xml:"PhysicSyncRead,omitempty"`
	// The number of rows returned by the SQL statement.
	//
	// example:
	//
	// 0
	ReturnRows *int64 `json:"ReturnRows,omitempty" xml:"ReturnRows,omitempty"`
	// The total number of rows that are updated or returned by the compute nodes of the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 10
	Rows *int64 `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The number of scanned rows.
	//
	// example:
	//
	// 0
	ScanRows *int64 `json:"ScanRows,omitempty" xml:"ScanRows,omitempty"`
	// The number of requests that are sent from the compute nodes to the data nodes of the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 10
	Scnt *int64 `json:"Scnt,omitempty" xml:"Scnt,omitempty"`
	// The SQL statement ID.
	//
	// example:
	//
	// c67649d4a7fb62c4f8c7a447c52b5b17
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// select resource_id as cluster_id, tpl_name \\n\\tfrom dbfree_alert_resource_tpl_ref\\n\\twhere user_id=? and type=\\"cluster\\" group by resource_id, tpl_name
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The type of the SQL statement.
	//
	// example:
	//
	// select
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The execution status of the SQL statement.
	//
	// 	- **0**: The execution was successful.
	//
	// 	- **1**: The execution failed.
	//
	// example:
	//
	// 0
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The thread ID.
	//
	// example:
	//
	// None
	ThreadId *int64 `json:"ThreadId,omitempty" xml:"ThreadId,omitempty"`
	// The trace ID of the PolarDB-X 2.0 instance. The value is the execution ID of the SQL statement on the data node.
	//
	// example:
	//
	// 14c93b7c7bf00000
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	// The transaction ID.
	//
	// example:
	//
	// 200000
	TrxId *string `json:"TrxId,omitempty" xml:"TrxId,omitempty"`
	// The number of rows that are updated.
	//
	// example:
	//
	// 0
	UpdateRows *int64 `json:"UpdateRows,omitempty" xml:"UpdateRows,omitempty"`
	// Indicates whether the In-Memory Column Index (IMCI) feature is enabled for the PolarDB for MySQL cluster. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	UseImciEngine *string `json:"UseImciEngine,omitempty" xml:"UseImciEngine,omitempty"`
	// The IP address that is resolved from the endpoint of the query link.
	//
	// example:
	//
	// 100.115.XX.XX
	Vip *string `json:"Vip,omitempty" xml:"Vip,omitempty"`
	// The number of writes to the ApsaraDB RDS for SQL Server instance.
	//
	// example:
	//
	// 10
	Writes *int64 `json:"Writes,omitempty" xml:"Writes,omitempty"`
}

func (s DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetAccountName(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.AccountName = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetCollection(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.Collection = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetConsume(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.Consume = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetCpuTime(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.CpuTime = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetDBName(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.DBName = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetExecuteTime(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetExt(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.Ext = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetFrows(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.Frows = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetHostAddress(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.HostAddress = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetLockTime(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.LockTime = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetLogicRead(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.LogicRead = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetNodeId(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.NodeId = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetOriginTime(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.OriginTime = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetParallelDegree(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.ParallelDegree = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetParallelQueueTime(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.ParallelQueueTime = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetPhysicAsyncRead(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.PhysicAsyncRead = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetPhysicRead(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.PhysicRead = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetPhysicSyncRead(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.PhysicSyncRead = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetReturnRows(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.ReturnRows = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetRows(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.Rows = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetScanRows(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.ScanRows = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetScnt(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.Scnt = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetSqlId(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.SqlId = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetSqlText(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.SqlText = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetSqlType(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.SqlType = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetState(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.State = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetThreadId(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.ThreadId = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetTraceId(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.TraceId = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetTrxId(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.TrxId = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetUpdateRows(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.UpdateRows = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetUseImciEngine(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.UseImciEngine = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetVip(v string) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.Vip = &v
	return s
}

func (s *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord) SetWrites(v int64) *DescribeSqlLogRecordsResponseBodyDataItemsSQLLogRecord {
	s.Writes = &v
	return s
}

type DescribeSqlLogRecordsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSqlLogRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSqlLogRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogRecordsResponse) SetHeaders(v map[string]*string) *DescribeSqlLogRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSqlLogRecordsResponse) SetStatusCode(v int32) *DescribeSqlLogRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSqlLogRecordsResponse) SetBody(v *DescribeSqlLogRecordsResponseBody) *DescribeSqlLogRecordsResponse {
	s.Body = v
	return s
}

type DescribeSqlLogStatisticRequest struct {
	// The ID of the database instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeSqlLogStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogStatisticRequest) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogStatisticRequest) SetInstanceId(v string) *DescribeSqlLogStatisticRequest {
	s.InstanceId = &v
	return s
}

type DescribeSqlLogStatisticResponseBody struct {
	// The response code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DescribeSqlLogStatisticResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSqlLogStatisticResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogStatisticResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogStatisticResponseBody) SetCode(v string) *DescribeSqlLogStatisticResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSqlLogStatisticResponseBody) SetData(v *DescribeSqlLogStatisticResponseBodyData) *DescribeSqlLogStatisticResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSqlLogStatisticResponseBody) SetMessage(v string) *DescribeSqlLogStatisticResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSqlLogStatisticResponseBody) SetRequestId(v string) *DescribeSqlLogStatisticResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSqlLogStatisticResponseBody) SetSuccess(v string) *DescribeSqlLogStatisticResponseBody {
	s.Success = &v
	return s
}

type DescribeSqlLogStatisticResponseBodyData struct {
	// The size of the SQL Explorer and Audit data that is stored in cold storage. Unit: bytes.
	//
	// example:
	//
	// 8585901
	ColdSqlSize *int64 `json:"ColdSqlSize,omitempty" xml:"ColdSqlSize,omitempty"`
	// The free quota for cold data storage. Unit: bytes.
	//
	// example:
	//
	// 5041450
	FreeColdSqlSize *int64 `json:"FreeColdSqlSize,omitempty" xml:"FreeColdSqlSize,omitempty"`
	// The free quota for hot data storage. Unit: bytes.
	//
	// example:
	//
	// 297245
	FreeHotSqlSize *int64 `json:"FreeHotSqlSize,omitempty" xml:"FreeHotSqlSize,omitempty"`
	// The size of the SQL Explorer and Audit data that is stored in hot storage. Unit: bytes.
	//
	// example:
	//
	// 1118042
	HotSqlSize *int64 `json:"HotSqlSize,omitempty" xml:"HotSqlSize,omitempty"`
	// The size of the SQL Explorer and Audit data that was generated in the most recent day. Unit: bytes.
	//
	// example:
	//
	// 23
	ImportSqlSize *int64 `json:"ImportSqlSize,omitempty" xml:"ImportSqlSize,omitempty"`
	// The timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1712568564928
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s DescribeSqlLogStatisticResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogStatisticResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogStatisticResponseBodyData) SetColdSqlSize(v int64) *DescribeSqlLogStatisticResponseBodyData {
	s.ColdSqlSize = &v
	return s
}

func (s *DescribeSqlLogStatisticResponseBodyData) SetFreeColdSqlSize(v int64) *DescribeSqlLogStatisticResponseBodyData {
	s.FreeColdSqlSize = &v
	return s
}

func (s *DescribeSqlLogStatisticResponseBodyData) SetFreeHotSqlSize(v int64) *DescribeSqlLogStatisticResponseBodyData {
	s.FreeHotSqlSize = &v
	return s
}

func (s *DescribeSqlLogStatisticResponseBodyData) SetHotSqlSize(v int64) *DescribeSqlLogStatisticResponseBodyData {
	s.HotSqlSize = &v
	return s
}

func (s *DescribeSqlLogStatisticResponseBodyData) SetImportSqlSize(v int64) *DescribeSqlLogStatisticResponseBodyData {
	s.ImportSqlSize = &v
	return s
}

func (s *DescribeSqlLogStatisticResponseBodyData) SetTimestamp(v int64) *DescribeSqlLogStatisticResponseBodyData {
	s.Timestamp = &v
	return s
}

type DescribeSqlLogStatisticResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSqlLogStatisticResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSqlLogStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogStatisticResponse) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogStatisticResponse) SetHeaders(v map[string]*string) *DescribeSqlLogStatisticResponse {
	s.Headers = v
	return s
}

func (s *DescribeSqlLogStatisticResponse) SetStatusCode(v int32) *DescribeSqlLogStatisticResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSqlLogStatisticResponse) SetBody(v *DescribeSqlLogStatisticResponseBody) *DescribeSqlLogStatisticResponse {
	s.Body = v
	return s
}

type DescribeSqlLogTaskRequest struct {
	// The ID of the database instance.
	//
	// example:
	//
	// r-bp1nti25tc7bq5****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The task ID.
	//
	// example:
	//
	// a4f5c4494dbd6713185d87a97aa53e8
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeSqlLogTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTaskRequest) SetInstanceId(v string) *DescribeSqlLogTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSqlLogTaskRequest) SetPageNo(v int32) *DescribeSqlLogTaskRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeSqlLogTaskRequest) SetPageSize(v int32) *DescribeSqlLogTaskRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSqlLogTaskRequest) SetTaskId(v string) *DescribeSqlLogTaskRequest {
	s.TaskId = &v
	return s
}

type DescribeSqlLogTaskResponseBody struct {
	// The response code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DescribeSqlLogTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSqlLogTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTaskResponseBody) SetCode(v string) *DescribeSqlLogTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBody) SetData(v *DescribeSqlLogTaskResponseBodyData) *DescribeSqlLogTaskResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSqlLogTaskResponseBody) SetMessage(v string) *DescribeSqlLogTaskResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBody) SetRequestId(v string) *DescribeSqlLogTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBody) SetSuccess(v string) *DescribeSqlLogTaskResponseBody {
	s.Success = &v
	return s
}

type DescribeSqlLogTaskResponseBodyData struct {
	// The time when the task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1681363254423
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1608888296000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// Indicates whether the task has expired. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Expire *bool `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// The download URL of the export task.
	//
	// example:
	//
	// "https://das-sqllog-download-cn-hongkong.oss-cn-hongkong.aliyuncs.com/****"
	Export *string `json:"Export,omitempty" xml:"Export,omitempty"`
	// The filter parameters.
	Filters []*DescribeSqlLogTaskResponseBodyDataFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The task name.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The results of the offline querying task.
	Queries []*DescribeSqlLogTaskResponseBodyDataQueries `json:"Queries,omitempty" xml:"Queries,omitempty" type:"Repeated"`
	// The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1596177993000
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The task state. Valid values:
	//
	// 	- **INIT**: The task is to be scheduled.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **FAILED**: The task failed.
	//
	// 	- **CANCELED**: The task is canceled.
	//
	// 	- **COMPLETED**: The task is complete.
	//
	// >  If a task is in the **COMPLETED*	- state, you can view the results of the task.
	//
	// example:
	//
	// COMPLETED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 9a4f5c4494dbd6713185d87a97aa53e8
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The task type. Valid values:
	//
	// 	- **Export**
	//
	// 	- **Query**
	//
	// example:
	//
	// Query
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The total number of tasks.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeSqlLogTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTaskResponseBodyData) SetCreateTime(v int64) *DescribeSqlLogTaskResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetEnd(v int64) *DescribeSqlLogTaskResponseBodyData {
	s.End = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetExpire(v bool) *DescribeSqlLogTaskResponseBodyData {
	s.Expire = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetExport(v string) *DescribeSqlLogTaskResponseBodyData {
	s.Export = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetFilters(v []*DescribeSqlLogTaskResponseBodyDataFilters) *DescribeSqlLogTaskResponseBodyData {
	s.Filters = v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetName(v string) *DescribeSqlLogTaskResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetQueries(v []*DescribeSqlLogTaskResponseBodyDataQueries) *DescribeSqlLogTaskResponseBodyData {
	s.Queries = v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetStart(v int64) *DescribeSqlLogTaskResponseBodyData {
	s.Start = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetStatus(v string) *DescribeSqlLogTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetTaskId(v string) *DescribeSqlLogTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetTaskType(v string) *DescribeSqlLogTaskResponseBodyData {
	s.TaskType = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyData) SetTotal(v int64) *DescribeSqlLogTaskResponseBodyData {
	s.Total = &v
	return s
}

type DescribeSqlLogTaskResponseBodyDataFilters struct {
	// The name of the filter parameter.
	//
	// >  For more information about the filter parameters, see the **Valid values of Key*	- section of this topic.
	//
	// example:
	//
	// keyWords
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the filter parameter.
	//
	// example:
	//
	// select
	Value interface{} `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSqlLogTaskResponseBodyDataFilters) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTaskResponseBodyDataFilters) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTaskResponseBodyDataFilters) SetKey(v string) *DescribeSqlLogTaskResponseBodyDataFilters {
	s.Key = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataFilters) SetValue(v interface{}) *DescribeSqlLogTaskResponseBodyDataFilters {
	s.Value = v
	return s
}

type DescribeSqlLogTaskResponseBodyDataQueries struct {
	// The database account.
	//
	// example:
	//
	// testname
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	Collection  *string `json:"Collection,omitempty" xml:"Collection,omitempty"`
	// The execution duration. Unit: millisecond.
	//
	// example:
	//
	// 58
	Consume *int64 `json:"Consume,omitempty" xml:"Consume,omitempty"`
	// The CPU execution time. Unit: microsecond.
	//
	// example:
	//
	// 100
	CpuTime *int64 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The database name.
	//
	// example:
	//
	// testdb01
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The execution time. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-12-07T02:15:32Z
	ExecuteTime *string `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// The extended information. This parameter is a reserved parameter.
	//
	// example:
	//
	// None
	Ext *string `json:"Ext,omitempty" xml:"Ext,omitempty"`
	// The number of rows pulled by the CNs of the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 10
	Frows *int64 `json:"Frows,omitempty" xml:"Frows,omitempty"`
	// The IP address of the client.
	//
	// example:
	//
	// 11.197.XX.XX
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The lock wait time. Unit: millisecond.
	//
	// example:
	//
	// 0
	LockTime *int64 `json:"LockTime,omitempty" xml:"LockTime,omitempty"`
	// The number of logical reads.
	//
	// example:
	//
	// 0
	LogicRead *int64 `json:"LogicRead,omitempty" xml:"LogicRead,omitempty"`
	// The ID of the child node.
	//
	// example:
	//
	// pi-bp1o58x3ib7e6****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The execution timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1701886532000
	OriginTime *int64 `json:"OriginTime,omitempty" xml:"OriginTime,omitempty"`
	// The wait time of parallel queries in the queue in the PolarDB for MySQL instance. Unit: millisecond.
	//
	// example:
	//
	// 10
	ParallelDegree *string `json:"ParallelDegree,omitempty" xml:"ParallelDegree,omitempty"`
	// The degree of parallelism (DOP) value of the PolarDB for MySQL instance.
	//
	// example:
	//
	// 2
	ParallelQueueTime *string `json:"ParallelQueueTime,omitempty" xml:"ParallelQueueTime,omitempty"`
	// The number of physical asynchronous reads.
	//
	// example:
	//
	// 0
	PhysicAsyncRead *int64 `json:"PhysicAsyncRead,omitempty" xml:"PhysicAsyncRead,omitempty"`
	// The total number of physical reads.
	//
	// example:
	//
	// 0
	PhysicRead *int64 `json:"PhysicRead,omitempty" xml:"PhysicRead,omitempty"`
	// The number of physical synchronous reads.
	//
	// example:
	//
	// 0
	PhysicSyncRead *int64 `json:"PhysicSyncRead,omitempty" xml:"PhysicSyncRead,omitempty"`
	// The number of rows returned.
	//
	// example:
	//
	// 0
	ReturnRows *int64 `json:"ReturnRows,omitempty" xml:"ReturnRows,omitempty"`
	// The total number of rows updated or returned by the CNs of the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 10
	Rows *int64 `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The number of rows scanned.
	//
	// example:
	//
	// 0
	ScanRows *int64 `json:"ScanRows,omitempty" xml:"ScanRows,omitempty"`
	// The number of requests from the compute nodes (CNs) to the data nodes (DNs) in the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 10
	Scnt *int64 `json:"Scnt,omitempty" xml:"Scnt,omitempty"`
	// The ID of the SQL statement.
	//
	// example:
	//
	// a4111670e80596c5bf42cf5154438a91
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The queried SQL statement.
	//
	// example:
	//
	// SELECT @@session.transaction_read_only
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The type of the SQL statement. Valid values:
	//
	// 	- **SELECT**
	//
	// 	- **UPDATE**
	//
	// 	- **DELETE**
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The execution result of the SQL statement. Valid values:
	//
	// 	- **0**: The execution was successful.
	//
	// 	- **1**: The execution failed.
	//
	// example:
	//
	// 0
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The thread ID.
	//
	// example:
	//
	// None
	ThreadId *int64 `json:"ThreadId,omitempty" xml:"ThreadId,omitempty"`
	// The trace ID of the PolarDB-X 2.0 instance, which is the execution ID of the SQL statement on the DN.
	//
	// example:
	//
	// 14c93b7c7bf00000
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	// The transaction ID.
	//
	// example:
	//
	// 200000
	TrxId *string `json:"TrxId,omitempty" xml:"TrxId,omitempty"`
	// The number of rows updated.
	//
	// example:
	//
	// 0
	UpdateRows *int64 `json:"UpdateRows,omitempty" xml:"UpdateRows,omitempty"`
	// Indicates whether the PolarDB for MySQL instance uses In-Memory Column Indexes (IMCIs). Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	UseImciEngine *string `json:"UseImciEngine,omitempty" xml:"UseImciEngine,omitempty"`
	// The IP address to which the endpoint used for query is resolved.
	//
	// example:
	//
	// 10.146.XX.XX
	Vip *string `json:"Vip,omitempty" xml:"Vip,omitempty"`
	// The number of writes to the ApsaraDB RDS for SQL Server instance.
	//
	// example:
	//
	// 10
	Writes *int64 `json:"Writes,omitempty" xml:"Writes,omitempty"`
}

func (s DescribeSqlLogTaskResponseBodyDataQueries) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTaskResponseBodyDataQueries) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetAccountName(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.AccountName = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetCollection(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.Collection = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetConsume(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.Consume = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetCpuTime(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.CpuTime = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetDBName(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.DBName = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetExecuteTime(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetExt(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.Ext = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetFrows(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.Frows = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetHostAddress(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.HostAddress = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetLockTime(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.LockTime = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetLogicRead(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.LogicRead = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetNodeId(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.NodeId = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetOriginTime(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.OriginTime = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetParallelDegree(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.ParallelDegree = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetParallelQueueTime(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.ParallelQueueTime = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetPhysicAsyncRead(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.PhysicAsyncRead = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetPhysicRead(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.PhysicRead = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetPhysicSyncRead(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.PhysicSyncRead = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetReturnRows(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.ReturnRows = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetRows(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.Rows = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetScanRows(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.ScanRows = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetScnt(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.Scnt = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetSqlId(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.SqlId = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetSqlText(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.SqlText = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetSqlType(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.SqlType = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetState(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.State = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetThreadId(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.ThreadId = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetTraceId(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.TraceId = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetTrxId(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.TrxId = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetUpdateRows(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.UpdateRows = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetUseImciEngine(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.UseImciEngine = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetVip(v string) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.Vip = &v
	return s
}

func (s *DescribeSqlLogTaskResponseBodyDataQueries) SetWrites(v int64) *DescribeSqlLogTaskResponseBodyDataQueries {
	s.Writes = &v
	return s
}

type DescribeSqlLogTaskResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSqlLogTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSqlLogTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTaskResponse) SetHeaders(v map[string]*string) *DescribeSqlLogTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeSqlLogTaskResponse) SetStatusCode(v int32) *DescribeSqlLogTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSqlLogTaskResponse) SetBody(v *DescribeSqlLogTaskResponseBody) *DescribeSqlLogTaskResponse {
	s.Body = v
	return s
}

type DescribeSqlLogTasksRequest struct {
	// The end of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1608888296000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter parameters.
	Filters []*DescribeSqlLogTasksRequestFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The ID of the database instance.
	//
	// example:
	//
	// r-bp1nti25tc7bq5****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter is available only for instances that are deployed in the cluster architecture. You can specify this parameter to query the tasks of a specific node. If this parameter is not specified, the tasks of the primary node are returned by default.
	//
	// example:
	//
	// pi-bp1o58x3ib7e6z496
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1596177993000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeSqlLogTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTasksRequest) SetEndTime(v int64) *DescribeSqlLogTasksRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSqlLogTasksRequest) SetFilters(v []*DescribeSqlLogTasksRequestFilters) *DescribeSqlLogTasksRequest {
	s.Filters = v
	return s
}

func (s *DescribeSqlLogTasksRequest) SetInstanceId(v string) *DescribeSqlLogTasksRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSqlLogTasksRequest) SetNodeId(v string) *DescribeSqlLogTasksRequest {
	s.NodeId = &v
	return s
}

func (s *DescribeSqlLogTasksRequest) SetPageNo(v int32) *DescribeSqlLogTasksRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeSqlLogTasksRequest) SetPageSize(v int32) *DescribeSqlLogTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSqlLogTasksRequest) SetStartTime(v int64) *DescribeSqlLogTasksRequest {
	s.StartTime = &v
	return s
}

type DescribeSqlLogTasksRequestFilters struct {
	// The name of the filter parameter.
	//
	// >  For more information about the filter parameters, see the **Valid values of Key*	- section of this topic.
	//
	// example:
	//
	// delimiter
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the filter parameter.
	//
	// example:
	//
	// ,
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSqlLogTasksRequestFilters) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTasksRequestFilters) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTasksRequestFilters) SetKey(v string) *DescribeSqlLogTasksRequestFilters {
	s.Key = &v
	return s
}

func (s *DescribeSqlLogTasksRequestFilters) SetValue(v string) *DescribeSqlLogTasksRequestFilters {
	s.Value = &v
	return s
}

type DescribeSqlLogTasksResponseBody struct {
	// The response code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DescribeSqlLogTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSqlLogTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTasksResponseBody) SetCode(v string) *DescribeSqlLogTasksResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBody) SetData(v *DescribeSqlLogTasksResponseBodyData) *DescribeSqlLogTasksResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSqlLogTasksResponseBody) SetMessage(v string) *DescribeSqlLogTasksResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBody) SetRequestId(v string) *DescribeSqlLogTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBody) SetSuccess(v string) *DescribeSqlLogTasksResponseBody {
	s.Success = &v
	return s
}

type DescribeSqlLogTasksResponseBodyData struct {
	// The details of the data returned.
	List []*DescribeSqlLogTasksResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The number of tasks.
	//
	// example:
	//
	// 40
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeSqlLogTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTasksResponseBodyData) SetList(v []*DescribeSqlLogTasksResponseBodyDataList) *DescribeSqlLogTasksResponseBodyData {
	s.List = v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyData) SetPageNo(v int64) *DescribeSqlLogTasksResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyData) SetPageSize(v int64) *DescribeSqlLogTasksResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyData) SetTotal(v int64) *DescribeSqlLogTasksResponseBodyData {
	s.Total = &v
	return s
}

type DescribeSqlLogTasksResponseBodyDataList struct {
	// The time when the analysis task was complete. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1712751923000
	AnalysisTaskFinishTime *int64 `json:"AnalysisTaskFinishTime,omitempty" xml:"AnalysisTaskFinishTime,omitempty"`
	// The state of the analysis task.
	//
	// >  This parameter is a system parameter. You do not need to pay attention to the parameter.
	//
	// example:
	//
	// SCAN_ANALYZE_COMPLETED
	AnalysisTaskStatus *string `json:"AnalysisTaskStatus,omitempty" xml:"AnalysisTaskStatus,omitempty"`
	// The time when the task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1681363254423
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the task ended. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1705975320000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// Indicates whether the task expired. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Expire *bool `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// The filter parameters.
	Filters []*DescribeSqlLogTasksResponseBodyDataListFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The ID of the database instance.
	//
	// example:
	//
	// rm-2zew761kf7ho18752
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of log records.
	//
	// example:
	//
	// 99999
	LogCount *int64 `json:"LogCount,omitempty" xml:"LogCount,omitempty"`
	// The task name.
	//
	// example:
	//
	// test01
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The task progress.
	//
	// example:
	//
	// 100
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The URL that is returned if the value of TaskType is **Export**.
	//
	// example:
	//
	// https://das-sqllog-download-cn-shanghai.oss-cn-shanghai.aliyuncs.com/la
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// The number of files that are scanned.
	//
	// example:
	//
	// 3000
	ScanFileSize *int64 `json:"ScanFileSize,omitempty" xml:"ScanFileSize,omitempty"`
	// The time when the task started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1683859555482
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The task state. Valid values:
	//
	// 	- **INIT**: The task is to be scheduled.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **FAILED**: The task failed.
	//
	// 	- **CANCELED**: The task is canceled.
	//
	// 	- **COMPLETED**: The task is complete.
	//
	// >  If a task is in the **COMPLETED*	- state, you can view the results of the task.
	//
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 9a4f5c4494dbd6713185d87a97aa53e8
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The task type. Valid values:
	//
	// 	- **Export**
	//
	// 	- **Query**
	//
	// example:
	//
	// Export
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeSqlLogTasksResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTasksResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetAnalysisTaskFinishTime(v int64) *DescribeSqlLogTasksResponseBodyDataList {
	s.AnalysisTaskFinishTime = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetAnalysisTaskStatus(v string) *DescribeSqlLogTasksResponseBodyDataList {
	s.AnalysisTaskStatus = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetCreateTime(v int64) *DescribeSqlLogTasksResponseBodyDataList {
	s.CreateTime = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetEnd(v int64) *DescribeSqlLogTasksResponseBodyDataList {
	s.End = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetExpire(v bool) *DescribeSqlLogTasksResponseBodyDataList {
	s.Expire = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetFilters(v []*DescribeSqlLogTasksResponseBodyDataListFilters) *DescribeSqlLogTasksResponseBodyDataList {
	s.Filters = v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetInstanceId(v string) *DescribeSqlLogTasksResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetLogCount(v int64) *DescribeSqlLogTasksResponseBodyDataList {
	s.LogCount = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetName(v string) *DescribeSqlLogTasksResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetProgress(v int32) *DescribeSqlLogTasksResponseBodyDataList {
	s.Progress = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetResult(v string) *DescribeSqlLogTasksResponseBodyDataList {
	s.Result = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetScanFileSize(v int64) *DescribeSqlLogTasksResponseBodyDataList {
	s.ScanFileSize = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetStart(v int64) *DescribeSqlLogTasksResponseBodyDataList {
	s.Start = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetStatus(v string) *DescribeSqlLogTasksResponseBodyDataList {
	s.Status = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetTaskId(v string) *DescribeSqlLogTasksResponseBodyDataList {
	s.TaskId = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataList) SetTaskType(v string) *DescribeSqlLogTasksResponseBodyDataList {
	s.TaskType = &v
	return s
}

type DescribeSqlLogTasksResponseBodyDataListFilters struct {
	// The name of the filter parameter.
	//
	// >  For more information about the filter parameters, see the **Valid values of Key*	- section of this topic.
	//
	// example:
	//
	// delimiter
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the filter parameter.
	//
	// example:
	//
	// ,
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSqlLogTasksResponseBodyDataListFilters) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTasksResponseBodyDataListFilters) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTasksResponseBodyDataListFilters) SetKey(v string) *DescribeSqlLogTasksResponseBodyDataListFilters {
	s.Key = &v
	return s
}

func (s *DescribeSqlLogTasksResponseBodyDataListFilters) SetValue(v string) *DescribeSqlLogTasksResponseBodyDataListFilters {
	s.Value = &v
	return s
}

type DescribeSqlLogTasksResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSqlLogTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSqlLogTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSqlLogTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeSqlLogTasksResponse) SetHeaders(v map[string]*string) *DescribeSqlLogTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeSqlLogTasksResponse) SetStatusCode(v int32) *DescribeSqlLogTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSqlLogTasksResponse) SetBody(v *DescribeSqlLogTasksResponseBody) *DescribeSqlLogTasksResponse {
	s.Body = v
	return s
}

type DescribeTopBigKeysRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >
	//
	// 	- The end time must be later than the start time.
	//
	// 	- Only data within the last four days can be queried.
	//
	// 	- The maximum interval between the **start time*	- and the*	- end time*	- is 3 hours.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1596177993001
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the ApsaraDB for Redis instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1596177993000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeTopBigKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysRequest) SetConsoleContext(v string) *DescribeTopBigKeysRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DescribeTopBigKeysRequest) SetEndTime(v string) *DescribeTopBigKeysRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTopBigKeysRequest) SetInstanceId(v string) *DescribeTopBigKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTopBigKeysRequest) SetNodeId(v string) *DescribeTopBigKeysRequest {
	s.NodeId = &v
	return s
}

func (s *DescribeTopBigKeysRequest) SetStartTime(v string) *DescribeTopBigKeysRequest {
	s.StartTime = &v
	return s
}

type DescribeTopBigKeysResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information about the large keys.
	//
	// > This parameter is left empty If no large keys exist within the specified time range.
	Data *DescribeTopBigKeysResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeTopBigKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysResponseBody) SetCode(v string) *DescribeTopBigKeysResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTopBigKeysResponseBody) SetData(v *DescribeTopBigKeysResponseBodyData) *DescribeTopBigKeysResponseBody {
	s.Data = v
	return s
}

func (s *DescribeTopBigKeysResponseBody) SetMessage(v string) *DescribeTopBigKeysResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTopBigKeysResponseBody) SetRequestId(v string) *DescribeTopBigKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTopBigKeysResponseBody) SetSuccess(v string) *DescribeTopBigKeysResponseBody {
	s.Success = &v
	return s
}

type DescribeTopBigKeysResponseBodyData struct {
	BigKey []*DescribeTopBigKeysResponseBodyDataBigKey `json:"BigKey,omitempty" xml:"BigKey,omitempty" type:"Repeated"`
}

func (s DescribeTopBigKeysResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysResponseBodyData) SetBigKey(v []*DescribeTopBigKeysResponseBodyDataBigKey) *DescribeTopBigKeysResponseBodyData {
	s.BigKey = v
	return s
}

type DescribeTopBigKeysResponseBodyDataBigKey struct {
	// The database in which the key is stored.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The key.
	//
	// example:
	//
	// abc:def:eng
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	//
	// example:
	//
	// zset
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The number of elements in the key.
	//
	// example:
	//
	// 2
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeTopBigKeysResponseBodyDataBigKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysResponseBodyDataBigKey) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetDb(v int32) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.Db = &v
	return s
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetKey(v string) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.Key = &v
	return s
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetKeyType(v string) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.KeyType = &v
	return s
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetNodeId(v string) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.NodeId = &v
	return s
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetSize(v int64) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.Size = &v
	return s
}

type DescribeTopBigKeysResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTopBigKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTopBigKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysResponse) SetHeaders(v map[string]*string) *DescribeTopBigKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeTopBigKeysResponse) SetStatusCode(v int32) *DescribeTopBigKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTopBigKeysResponse) SetBody(v *DescribeTopBigKeysResponseBody) *DescribeTopBigKeysResponse {
	s.Body = v
	return s
}

type DescribeTopHotKeysRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >
	//
	// 	- The end time must be later than the start time.
	//
	// 	- Only data within the last four days can be queried.
	//
	// 	- The maximum interval between the **start time*	- and the*	- end time*	- is 3 hours.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1596177993001
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the ApsaraDB for Redis instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-bp18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	//
	// example:
	//
	// r-****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1596177993000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeTopHotKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysRequest) SetConsoleContext(v string) *DescribeTopHotKeysRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DescribeTopHotKeysRequest) SetEndTime(v string) *DescribeTopHotKeysRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTopHotKeysRequest) SetInstanceId(v string) *DescribeTopHotKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTopHotKeysRequest) SetNodeId(v string) *DescribeTopHotKeysRequest {
	s.NodeId = &v
	return s
}

func (s *DescribeTopHotKeysRequest) SetStartTime(v string) *DescribeTopHotKeysRequest {
	s.StartTime = &v
	return s
}

type DescribeTopHotKeysResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information about the hot keys.
	Data *DescribeTopHotKeysResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeTopHotKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysResponseBody) SetCode(v string) *DescribeTopHotKeysResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTopHotKeysResponseBody) SetData(v *DescribeTopHotKeysResponseBodyData) *DescribeTopHotKeysResponseBody {
	s.Data = v
	return s
}

func (s *DescribeTopHotKeysResponseBody) SetMessage(v string) *DescribeTopHotKeysResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTopHotKeysResponseBody) SetRequestId(v string) *DescribeTopHotKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTopHotKeysResponseBody) SetSuccess(v string) *DescribeTopHotKeysResponseBody {
	s.Success = &v
	return s
}

type DescribeTopHotKeysResponseBodyData struct {
	HotKey []*DescribeTopHotKeysResponseBodyDataHotKey `json:"HotKey,omitempty" xml:"HotKey,omitempty" type:"Repeated"`
}

func (s DescribeTopHotKeysResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysResponseBodyData) SetHotKey(v []*DescribeTopHotKeysResponseBodyDataHotKey) *DescribeTopHotKeysResponseBodyData {
	s.HotKey = v
	return s
}

type DescribeTopHotKeysResponseBodyDataHotKey struct {
	// The database in which the key is stored.
	//
	// example:
	//
	// 0
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The frequency at which the key is accessed, which indicates the QPS of the key.
	//
	// example:
	//
	// 5500~6000
	Hot *string `json:"Hot,omitempty" xml:"Hot,omitempty"`
	// The key.
	//
	// example:
	//
	// abc:def:eng
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	//
	// example:
	//
	// zset
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The statistical value that is calculated based on the least frequently used (LFU) caching algorithm.
	//
	// example:
	//
	// 253
	Lfu *int32 `json:"Lfu,omitempty" xml:"Lfu,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeTopHotKeysResponseBodyDataHotKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysResponseBodyDataHotKey) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetDb(v int32) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.Db = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetHot(v string) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.Hot = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetKey(v string) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.Key = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetKeyType(v string) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.KeyType = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetLfu(v int32) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.Lfu = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetNodeId(v string) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.NodeId = &v
	return s
}

type DescribeTopHotKeysResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTopHotKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTopHotKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysResponse) SetHeaders(v map[string]*string) *DescribeTopHotKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeTopHotKeysResponse) SetStatusCode(v int32) *DescribeTopHotKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTopHotKeysResponse) SetBody(v *DescribeTopHotKeysResponseBody) *DescribeTopHotKeysResponse {
	s.Body = v
	return s
}

type DisableAllSqlConcurrencyControlRulesRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  You must specify this parameter only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAllSqlConcurrencyControlRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableAllSqlConcurrencyControlRulesRequest) GoString() string {
	return s.String()
}

func (s *DisableAllSqlConcurrencyControlRulesRequest) SetConsoleContext(v string) *DisableAllSqlConcurrencyControlRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesRequest) SetInstanceId(v string) *DisableAllSqlConcurrencyControlRulesRequest {
	s.InstanceId = &v
	return s
}

type DisableAllSqlConcurrencyControlRulesResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableAllSqlConcurrencyControlRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableAllSqlConcurrencyControlRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetCode(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetData(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.Data = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetMessage(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetRequestId(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetSuccess(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.Success = &v
	return s
}

type DisableAllSqlConcurrencyControlRulesResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableAllSqlConcurrencyControlRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableAllSqlConcurrencyControlRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableAllSqlConcurrencyControlRulesResponse) GoString() string {
	return s.String()
}

func (s *DisableAllSqlConcurrencyControlRulesResponse) SetHeaders(v map[string]*string) *DisableAllSqlConcurrencyControlRulesResponse {
	s.Headers = v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponse) SetStatusCode(v int32) *DisableAllSqlConcurrencyControlRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponse) SetBody(v *DisableAllSqlConcurrencyControlRulesResponseBody) *DisableAllSqlConcurrencyControlRulesResponse {
	s.Body = v
	return s
}

type DisableAutoResourceOptimizeRulesRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance ID.
	//
	// >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\", \\"Instance ID2\\"]`.
	//
	// This parameter is required.
	//
	// example:
	//
	// [\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesRequest) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesRequest) SetConsoleContext(v string) *DisableAutoResourceOptimizeRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesRequest) SetInstanceIds(v string) *DisableAutoResourceOptimizeRulesRequest {
	s.InstanceIds = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DisableAutoResourceOptimizeRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetCode(v int64) *DisableAutoResourceOptimizeRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetData(v *DisableAutoResourceOptimizeRulesResponseBodyData) *DisableAutoResourceOptimizeRulesResponseBody {
	s.Data = v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetMessage(v string) *DisableAutoResourceOptimizeRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetRequestId(v string) *DisableAutoResourceOptimizeRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetSuccess(v bool) *DisableAutoResourceOptimizeRulesResponseBody {
	s.Success = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponseBodyData struct {
	// The number of database instances for which the automatic tablespace fragment recycling feature failed to be disabled.
	//
	// example:
	//
	// 1
	ConfigFailInstanceCount *int64 `json:"ConfigFailInstanceCount,omitempty" xml:"ConfigFailInstanceCount,omitempty"`
	// The list of database instances for which the automatic tablespace fragment recycling feature failed to be disabled.
	ConfigFailInstanceList []*DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList `json:"ConfigFailInstanceList,omitempty" xml:"ConfigFailInstanceList,omitempty" type:"Repeated"`
	// The number of database instances for which the automatic tablespace fragment recycling feature is disabled.
	//
	// example:
	//
	// 1
	ConfigSuccessInstanceCount *int64 `json:"ConfigSuccessInstanceCount,omitempty" xml:"ConfigSuccessInstanceCount,omitempty"`
	// The list of database instances for which the automatic tablespace fragment recycling feature is disabled.
	ConfigSuccessInstanceList []*DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList `json:"ConfigSuccessInstanceList,omitempty" xml:"ConfigSuccessInstanceList,omitempty" type:"Repeated"`
	// The total number of database instances.
	//
	// example:
	//
	// 2
	TotalInstanceCount *int64 `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetConfigFailInstanceCount(v int64) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.ConfigFailInstanceCount = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetConfigFailInstanceList(v []*DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.ConfigFailInstanceList = v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetConfigSuccessInstanceCount(v int64) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.ConfigSuccessInstanceCount = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetConfigSuccessInstanceList(v []*DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.ConfigSuccessInstanceList = v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetTotalInstanceCount(v int64) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.TotalInstanceCount = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList struct {
	// Indicates whether the automatic tablespace fragment recycling feature is disabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The error message returned if the request failed.
	//
	// example:
	//
	// cannot found instance by rm-2ze9xrhze0709****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze9xrhze0709****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) SetConfigSuccess(v bool) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) SetErrorMessage(v string) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList {
	s.ErrorMessage = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) SetInstanceId(v string) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList {
	s.InstanceId = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList struct {
	// Indicates whether the automatic tablespace fragment recycling feature is disabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) SetConfigSuccess(v bool) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) SetInstanceId(v string) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList {
	s.InstanceId = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableAutoResourceOptimizeRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponse) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponse) SetHeaders(v map[string]*string) *DisableAutoResourceOptimizeRulesResponse {
	s.Headers = v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponse) SetStatusCode(v int32) *DisableAutoResourceOptimizeRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponse) SetBody(v *DisableAutoResourceOptimizeRulesResponseBody) *DisableAutoResourceOptimizeRulesResponse {
	s.Body = v
	return s
}

type DisableAutoThrottleRulesRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance IDs.
	//
	// >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\",\\"Instance ID2\\"]`.
	//
	// This parameter is required.
	//
	// example:
	//
	// [\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s DisableAutoThrottleRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesRequest) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesRequest) SetConsoleContext(v string) *DisableAutoThrottleRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DisableAutoThrottleRulesRequest) SetInstanceIds(v string) *DisableAutoThrottleRulesRequest {
	s.InstanceIds = &v
	return s
}

type DisableAutoThrottleRulesResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DisableAutoThrottleRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableAutoThrottleRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponseBody) SetCode(v int64) *DisableAutoThrottleRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBody) SetData(v *DisableAutoThrottleRulesResponseBodyData) *DisableAutoThrottleRulesResponseBody {
	s.Data = v
	return s
}

func (s *DisableAutoThrottleRulesResponseBody) SetMessage(v string) *DisableAutoThrottleRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBody) SetRequestId(v string) *DisableAutoThrottleRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBody) SetSuccess(v bool) *DisableAutoThrottleRulesResponseBody {
	s.Success = &v
	return s
}

type DisableAutoThrottleRulesResponseBodyData struct {
	// The number of database instances for which the automatic SQL throttling feature failed to be disabled.
	//
	// example:
	//
	// 1
	ConfigFailInstanceCount *int64 `json:"ConfigFailInstanceCount,omitempty" xml:"ConfigFailInstanceCount,omitempty"`
	// The database instances for which the automatic SQL throttling feature failed to be disabled.
	ConfigFailInstanceList []*DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList `json:"ConfigFailInstanceList,omitempty" xml:"ConfigFailInstanceList,omitempty" type:"Repeated"`
	// The number of database instances for which the automatic SQL throttling feature is disabled.
	//
	// example:
	//
	// 1
	ConfigSuccessInstanceCount *int64 `json:"ConfigSuccessInstanceCount,omitempty" xml:"ConfigSuccessInstanceCount,omitempty"`
	// The database instances for which the automatic SQL throttling feature is disabled.
	ConfigSuccessInstanceList []*DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList `json:"ConfigSuccessInstanceList,omitempty" xml:"ConfigSuccessInstanceList,omitempty" type:"Repeated"`
	// The total number of database instances.
	//
	// example:
	//
	// 2
	TotalInstanceCount *int64 `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
}

func (s DisableAutoThrottleRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetConfigFailInstanceCount(v int64) *DisableAutoThrottleRulesResponseBodyData {
	s.ConfigFailInstanceCount = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetConfigFailInstanceList(v []*DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) *DisableAutoThrottleRulesResponseBodyData {
	s.ConfigFailInstanceList = v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetConfigSuccessInstanceCount(v int64) *DisableAutoThrottleRulesResponseBodyData {
	s.ConfigSuccessInstanceCount = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetConfigSuccessInstanceList(v []*DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) *DisableAutoThrottleRulesResponseBodyData {
	s.ConfigSuccessInstanceList = v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetTotalInstanceCount(v int64) *DisableAutoThrottleRulesResponseBodyData {
	s.TotalInstanceCount = &v
	return s
}

type DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList struct {
	// Indicates whether the automatic SQL throttling feature is disabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// cannot found instance by rm-2ze9xrhze0709****
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze9xrhze0709****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) SetConfigSuccess(v bool) *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) SetErrorMessage(v string) *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList {
	s.ErrorMessage = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) SetInstanceId(v string) *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList {
	s.InstanceId = &v
	return s
}

type DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList struct {
	// Indicates whether the automatic SQL throttling feature is disabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) SetConfigSuccess(v bool) *DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) SetInstanceId(v string) *DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList {
	s.InstanceId = &v
	return s
}

type DisableAutoThrottleRulesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableAutoThrottleRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableAutoThrottleRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponse) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponse) SetHeaders(v map[string]*string) *DisableAutoThrottleRulesResponse {
	s.Headers = v
	return s
}

func (s *DisableAutoThrottleRulesResponse) SetStatusCode(v int32) *DisableAutoThrottleRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableAutoThrottleRulesResponse) SetBody(v *DisableAutoThrottleRulesResponseBody) *DisableAutoThrottleRulesResponse {
	s.Body = v
	return s
}

type DisableDasProRequest struct {
	// The database instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId that you set when you call this operation.
	//
	// example:
	//
	// 196278346919****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DisableDasProRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableDasProRequest) GoString() string {
	return s.String()
}

func (s *DisableDasProRequest) SetInstanceId(v string) *DisableDasProRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableDasProRequest) SetUserId(v string) *DisableDasProRequest {
	s.UserId = &v
	return s
}

type DisableDasProResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7172BECE-588A-5961-8126-C216E16B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s DisableDasProResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableDasProResponseBody) GoString() string {
	return s.String()
}

func (s *DisableDasProResponseBody) SetCode(v string) *DisableDasProResponseBody {
	s.Code = &v
	return s
}

func (s *DisableDasProResponseBody) SetData(v string) *DisableDasProResponseBody {
	s.Data = &v
	return s
}

func (s *DisableDasProResponseBody) SetMessage(v string) *DisableDasProResponseBody {
	s.Message = &v
	return s
}

func (s *DisableDasProResponseBody) SetRequestId(v string) *DisableDasProResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableDasProResponseBody) SetSuccess(v string) *DisableDasProResponseBody {
	s.Success = &v
	return s
}

func (s *DisableDasProResponseBody) SetSynchro(v string) *DisableDasProResponseBody {
	s.Synchro = &v
	return s
}

type DisableDasProResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableDasProResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableDasProResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableDasProResponse) GoString() string {
	return s.String()
}

func (s *DisableDasProResponse) SetHeaders(v map[string]*string) *DisableDasProResponse {
	s.Headers = v
	return s
}

func (s *DisableDasProResponse) SetStatusCode(v int32) *DisableDasProResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableDasProResponse) SetBody(v *DisableDasProResponseBody) *DisableDasProResponse {
	s.Body = v
	return s
}

type DisableInstanceDasConfigRequest struct {
	// The database engine. Set the value to Redis.
	//
	// This parameter is required.
	//
	// example:
	//
	// Redis
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The database instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-bp1nti25tc7bq5****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of auto scaling. Valid values:
	//
	// 	- **specScale**: The specifications of a database instance are automatically scaled up or down.
	//
	// 	- **shardScale**: The number of shards for a database instance is automatically increased or decreased.
	//
	// 	- **bandwidthScale**: The bandwidth of a database instance is automatically increased or decreased.
	//
	// This parameter is required.
	//
	// example:
	//
	// bandwidthScale
	ScaleType *string `json:"ScaleType,omitempty" xml:"ScaleType,omitempty"`
}

func (s DisableInstanceDasConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceDasConfigRequest) GoString() string {
	return s.String()
}

func (s *DisableInstanceDasConfigRequest) SetEngine(v string) *DisableInstanceDasConfigRequest {
	s.Engine = &v
	return s
}

func (s *DisableInstanceDasConfigRequest) SetInstanceId(v string) *DisableInstanceDasConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableInstanceDasConfigRequest) SetScaleType(v string) *DisableInstanceDasConfigRequest {
	s.ScaleType = &v
	return s
}

type DisableInstanceDasConfigResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of disabling the auto scaling feature for the database instance.
	//
	// example:
	//
	// success
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7172BECE-588A-5961-8126-C216E16B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableInstanceDasConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceDasConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DisableInstanceDasConfigResponseBody) SetCode(v string) *DisableInstanceDasConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DisableInstanceDasConfigResponseBody) SetData(v string) *DisableInstanceDasConfigResponseBody {
	s.Data = &v
	return s
}

func (s *DisableInstanceDasConfigResponseBody) SetMessage(v string) *DisableInstanceDasConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DisableInstanceDasConfigResponseBody) SetRequestId(v string) *DisableInstanceDasConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableInstanceDasConfigResponseBody) SetSuccess(v string) *DisableInstanceDasConfigResponseBody {
	s.Success = &v
	return s
}

type DisableInstanceDasConfigResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableInstanceDasConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableInstanceDasConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceDasConfigResponse) GoString() string {
	return s.String()
}

func (s *DisableInstanceDasConfigResponse) SetHeaders(v map[string]*string) *DisableInstanceDasConfigResponse {
	s.Headers = v
	return s
}

func (s *DisableInstanceDasConfigResponse) SetStatusCode(v int32) *DisableInstanceDasConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableInstanceDasConfigResponse) SetBody(v *DisableInstanceDasConfigResponseBody) *DisableInstanceDasConfigResponse {
	s.Body = v
	return s
}

type DisableSqlConcurrencyControlRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  The database instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the throttling rule that is applied to the instance. You can call the [GetRunningSqlConcurrencyControlRules](https://help.aliyun.com/document_detail/223538.html) operation to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
}

func (s DisableSqlConcurrencyControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSqlConcurrencyControlRequest) GoString() string {
	return s.String()
}

func (s *DisableSqlConcurrencyControlRequest) SetConsoleContext(v string) *DisableSqlConcurrencyControlRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DisableSqlConcurrencyControlRequest) SetInstanceId(v string) *DisableSqlConcurrencyControlRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableSqlConcurrencyControlRequest) SetItemId(v int64) *DisableSqlConcurrencyControlRequest {
	s.ItemId = &v
	return s
}

type DisableSqlConcurrencyControlResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	//
	// example:
	//
	// Null
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableSqlConcurrencyControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableSqlConcurrencyControlResponseBody) GoString() string {
	return s.String()
}

func (s *DisableSqlConcurrencyControlResponseBody) SetCode(v string) *DisableSqlConcurrencyControlResponseBody {
	s.Code = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponseBody) SetData(v string) *DisableSqlConcurrencyControlResponseBody {
	s.Data = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponseBody) SetMessage(v string) *DisableSqlConcurrencyControlResponseBody {
	s.Message = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponseBody) SetRequestId(v string) *DisableSqlConcurrencyControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponseBody) SetSuccess(v string) *DisableSqlConcurrencyControlResponseBody {
	s.Success = &v
	return s
}

type DisableSqlConcurrencyControlResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableSqlConcurrencyControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableSqlConcurrencyControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSqlConcurrencyControlResponse) GoString() string {
	return s.String()
}

func (s *DisableSqlConcurrencyControlResponse) SetHeaders(v map[string]*string) *DisableSqlConcurrencyControlResponse {
	s.Headers = v
	return s
}

func (s *DisableSqlConcurrencyControlResponse) SetStatusCode(v int32) *DisableSqlConcurrencyControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponse) SetBody(v *DisableSqlConcurrencyControlResponseBody) *DisableSqlConcurrencyControlResponse {
	s.Body = v
	return s
}

type EnableDasProRequest struct {
	// The database instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The storage duration of SQL Explorer data. Unit: day. Default value: **30**. Valid values:
	//
	// 	- **30**
	//
	// 	- **180**
	//
	// 	- **365**
	//
	// 	- **1095**
	//
	// 	- **1825**
	//
	// example:
	//
	// 30
	SqlRetention *int32 `json:"SqlRetention,omitempty" xml:"SqlRetention,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
	//
	// example:
	//
	// 196278346919****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s EnableDasProRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableDasProRequest) GoString() string {
	return s.String()
}

func (s *EnableDasProRequest) SetInstanceId(v string) *EnableDasProRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableDasProRequest) SetSqlRetention(v int32) *EnableDasProRequest {
	s.SqlRetention = &v
	return s
}

func (s *EnableDasProRequest) SetUserId(v string) *EnableDasProRequest {
	s.UserId = &v
	return s
}

type EnableDasProResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7172BECE-588A-5961-8126-C216E16B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s EnableDasProResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableDasProResponseBody) GoString() string {
	return s.String()
}

func (s *EnableDasProResponseBody) SetCode(v string) *EnableDasProResponseBody {
	s.Code = &v
	return s
}

func (s *EnableDasProResponseBody) SetData(v string) *EnableDasProResponseBody {
	s.Data = &v
	return s
}

func (s *EnableDasProResponseBody) SetMessage(v string) *EnableDasProResponseBody {
	s.Message = &v
	return s
}

func (s *EnableDasProResponseBody) SetRequestId(v string) *EnableDasProResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableDasProResponseBody) SetSuccess(v string) *EnableDasProResponseBody {
	s.Success = &v
	return s
}

func (s *EnableDasProResponseBody) SetSynchro(v string) *EnableDasProResponseBody {
	s.Synchro = &v
	return s
}

type EnableDasProResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableDasProResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableDasProResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableDasProResponse) GoString() string {
	return s.String()
}

func (s *EnableDasProResponse) SetHeaders(v map[string]*string) *EnableDasProResponse {
	s.Headers = v
	return s
}

func (s *EnableDasProResponse) SetStatusCode(v int32) *EnableDasProResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableDasProResponse) SetBody(v *EnableDasProResponseBody) *EnableDasProResponse {
	s.Body = v
	return s
}

type EnableSqlConcurrencyControlRequest struct {
	// The duration within which the SQL throttling rule takes effect. Unit: seconds.
	//
	// >  The throttling rule takes effect only within this duration.
	//
	// This parameter is required.
	//
	// example:
	//
	// 300
	ConcurrencyControlTime *int64 `json:"ConcurrencyControlTime,omitempty" xml:"ConcurrencyControlTime,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  You must specify the instance ID only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The maximum number of concurrent SQL statements. Set this parameter to a positive integer.
	//
	// >  When the number of concurrent SQL statements that contain the specified keywords reaches this upper limit, the throttling rule is triggered.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	MaxConcurrency *int64 `json:"MaxConcurrency,omitempty" xml:"MaxConcurrency,omitempty"`
	// The keywords that are used to identify the SQL statements that need to be throttled.
	//
	// >  If you specify multiple SQL keywords, separate them with tildes (~). If the number of concurrent SQL statements that contain all the specified SQL keywords reaches the specified upper limit, the throttling rule is triggered.
	//
	// This parameter is required.
	//
	// example:
	//
	// call~open~api~test~4~from~POP
	SqlKeywords *string `json:"SqlKeywords,omitempty" xml:"SqlKeywords,omitempty"`
	// The type of the SQL statements. Valid values:
	//
	// 	- **SELECT**
	//
	// 	- **UPDATE**
	//
	// 	- **DELETE**
	//
	// This parameter is required.
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
}

func (s EnableSqlConcurrencyControlRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSqlConcurrencyControlRequest) GoString() string {
	return s.String()
}

func (s *EnableSqlConcurrencyControlRequest) SetConcurrencyControlTime(v int64) *EnableSqlConcurrencyControlRequest {
	s.ConcurrencyControlTime = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetConsoleContext(v string) *EnableSqlConcurrencyControlRequest {
	s.ConsoleContext = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetInstanceId(v string) *EnableSqlConcurrencyControlRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetMaxConcurrency(v int64) *EnableSqlConcurrencyControlRequest {
	s.MaxConcurrency = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetSqlKeywords(v string) *EnableSqlConcurrencyControlRequest {
	s.SqlKeywords = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetSqlType(v string) *EnableSqlConcurrencyControlRequest {
	s.SqlType = &v
	return s
}

type EnableSqlConcurrencyControlResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	//
	// example:
	//
	// Null
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableSqlConcurrencyControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableSqlConcurrencyControlResponseBody) GoString() string {
	return s.String()
}

func (s *EnableSqlConcurrencyControlResponseBody) SetCode(v string) *EnableSqlConcurrencyControlResponseBody {
	s.Code = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponseBody) SetData(v string) *EnableSqlConcurrencyControlResponseBody {
	s.Data = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponseBody) SetMessage(v string) *EnableSqlConcurrencyControlResponseBody {
	s.Message = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponseBody) SetRequestId(v string) *EnableSqlConcurrencyControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponseBody) SetSuccess(v string) *EnableSqlConcurrencyControlResponseBody {
	s.Success = &v
	return s
}

type EnableSqlConcurrencyControlResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableSqlConcurrencyControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableSqlConcurrencyControlResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSqlConcurrencyControlResponse) GoString() string {
	return s.String()
}

func (s *EnableSqlConcurrencyControlResponse) SetHeaders(v map[string]*string) *EnableSqlConcurrencyControlResponse {
	s.Headers = v
	return s
}

func (s *EnableSqlConcurrencyControlResponse) SetStatusCode(v int32) *EnableSqlConcurrencyControlResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponse) SetBody(v *EnableSqlConcurrencyControlResponseBody) *EnableSqlConcurrencyControlResponse {
	s.Body = v
	return s
}

type GetAsyncErrorRequestListByCodeRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	//
	// example:
	//
	// 1642566830000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The error code. You can call the [GetAsyncErrorRequestStatByCode](https://help.aliyun.com/document_detail/409804.html) operation to query the MySQL error codes that may be generated in the SQL Explorer results of an instance.
	//
	// example:
	//
	// 1064
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster.
	//
	// example:
	//
	// pi-wz9s658475e58****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer feature of the database instance, and can be up to 90 days earlier than the current time.
	//
	// example:
	//
	// 1642556990714
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetAsyncErrorRequestListByCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeRequest) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetEnd(v int64) *GetAsyncErrorRequestListByCodeRequest {
	s.End = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetErrorCode(v string) *GetAsyncErrorRequestListByCodeRequest {
	s.ErrorCode = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetInstanceId(v string) *GetAsyncErrorRequestListByCodeRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetNodeId(v string) *GetAsyncErrorRequestListByCodeRequest {
	s.NodeId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetStart(v int64) *GetAsyncErrorRequestListByCodeRequest {
	s.Start = &v
	return s
}

type GetAsyncErrorRequestListByCodeResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	//
	// example:
	//
	// {         "fail": false,         "data": [             {                 "sqlId": "ad78a4e7d3ce81590c9dc2d5f4bc****",                 "instanceId": "rm-2ze8g2am97624****"             },             {                 "sqlId": "0f92feacd92c048b06a16617a633****",                 "instanceId": "rm-2ze8g2am97624****"             }         ],         "resultId": "async__c39d43ece52d35267cc4b92a0c26****",         "isFinish": true,         "state": "SUCCESS",         "complete": true,         "timestamp": 1644559407740     }
	Data *GetAsyncErrorRequestListByCodeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9CB97BC4-6479-55D0-B9D0-EA925AFE****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAsyncErrorRequestListByCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetCode(v int64) *GetAsyncErrorRequestListByCodeResponseBody {
	s.Code = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetData(v *GetAsyncErrorRequestListByCodeResponseBodyData) *GetAsyncErrorRequestListByCodeResponseBody {
	s.Data = v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetMessage(v string) *GetAsyncErrorRequestListByCodeResponseBody {
	s.Message = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetRequestId(v string) *GetAsyncErrorRequestListByCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetSuccess(v bool) *GetAsyncErrorRequestListByCodeResponseBody {
	s.Success = &v
	return s
}

type GetAsyncErrorRequestListByCodeResponseBodyData struct {
	// Indicates whether the asynchronous request was complete.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Complete *bool `json:"complete,omitempty" xml:"complete,omitempty"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Fail *bool `json:"fail,omitempty" xml:"fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsFinish *bool `json:"isFinish,omitempty" xml:"isFinish,omitempty"`
	// The instance ID.
	Result []*GetAsyncErrorRequestListByCodeResponseBodyDataResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// The ID of the asynchronous request.
	//
	// example:
	//
	// async__c39d43ece52d35267cc4b92a0c26****
	ResultId *string `json:"resultId,omitempty" xml:"resultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// 	- **RUNNING**
	//
	// 	- **SUCCESS**
	//
	// 	- **FAIL**
	//
	// example:
	//
	// SUCCESS
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1644559407740
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetAsyncErrorRequestListByCodeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetComplete(v bool) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.Complete = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetFail(v bool) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetIsFinish(v bool) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetResult(v []*GetAsyncErrorRequestListByCodeResponseBodyDataResult) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.Result = v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetResultId(v string) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetState(v string) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.State = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetTimestamp(v int64) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetAsyncErrorRequestListByCodeResponseBodyDataResult struct {
	// The instance ID
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// SQL ID.
	//
	// example:
	//
	// ad78a4e7d3ce81590c9dc2d5f4bc****
	SqlId *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
}

func (s GetAsyncErrorRequestListByCodeResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyDataResult) SetInstanceId(v string) *GetAsyncErrorRequestListByCodeResponseBodyDataResult {
	s.InstanceId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyDataResult) SetSqlId(v string) *GetAsyncErrorRequestListByCodeResponseBodyDataResult {
	s.SqlId = &v
	return s
}

type GetAsyncErrorRequestListByCodeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAsyncErrorRequestListByCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAsyncErrorRequestListByCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeResponse) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeResponse) SetHeaders(v map[string]*string) *GetAsyncErrorRequestListByCodeResponse {
	s.Headers = v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponse) SetStatusCode(v int32) *GetAsyncErrorRequestListByCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponse) SetBody(v *GetAsyncErrorRequestListByCodeResponseBody) *GetAsyncErrorRequestListByCodeResponse {
	s.Body = v
	return s
}

type GetAsyncErrorRequestStatByCodeRequest struct {
	// The name of a database.
	//
	// example:
	//
	// testdb01
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	//
	// example:
	//
	// 1642566830000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified for PolarDB for MySQL clusters.
	//
	// example:
	//
	// pi-wz9s658475e58****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer feature of the database instance and can be up to 90 days earlier than the current time.
	//
	// example:
	//
	// 1642556990714
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetAsyncErrorRequestStatByCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeRequest) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetDbName(v string) *GetAsyncErrorRequestStatByCodeRequest {
	s.DbName = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetEnd(v int64) *GetAsyncErrorRequestStatByCodeRequest {
	s.End = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetInstanceId(v string) *GetAsyncErrorRequestStatByCodeRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetNodeId(v string) *GetAsyncErrorRequestStatByCodeRequest {
	s.NodeId = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetStart(v int64) *GetAsyncErrorRequestStatByCodeRequest {
	s.Start = &v
	return s
}

type GetAsyncErrorRequestStatByCodeResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	//
	// example:
	//
	// {     "fail": false,     "data": [       {         "instanceId": "rm-2ze8g2am97624****",         "count": 1,         "errorCode": "1062"       },       {         "instanceId": "rm-2ze8g2am97624****",         "count": 2,         "errorCode": "1064"      }     ],     "resultId": "async__fcd7c35788e62324622c3b4a03de****",     "isFinish": true,     "state": "SUCCESS",     "complete": true,     "timestamp": 1644560866961   }
	Data *GetAsyncErrorRequestStatByCodeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 840F51F7-9C01-538D-94F6-AE712905****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAsyncErrorRequestStatByCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetCode(v int64) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.Code = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetData(v *GetAsyncErrorRequestStatByCodeResponseBodyData) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.Data = v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetMessage(v string) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.Message = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetRequestId(v string) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetSuccess(v bool) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.Success = &v
	return s
}

type GetAsyncErrorRequestStatByCodeResponseBodyData struct {
	// Indicates whether the asynchronous request was complete.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Complete *bool `json:"complete,omitempty" xml:"complete,omitempty"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Fail *bool `json:"fail,omitempty" xml:"fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsFinish *bool `json:"isFinish,omitempty" xml:"isFinish,omitempty"`
	// The number of SQL queries corresponding to the error code.
	Result []*GetAsyncErrorRequestStatByCodeResponseBodyDataResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// The ID of the asynchronous request.
	//
	// example:
	//
	// async__fcd7c35788e62324622c3b4a03de****
	ResultId *string `json:"resultId,omitempty" xml:"resultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// 	- **RUNNING**
	//
	// 	- **SUCCESS**
	//
	// 	- **FAIL**
	//
	// example:
	//
	// SUCCESS
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1644560866961
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetAsyncErrorRequestStatByCodeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetComplete(v bool) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.Complete = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetFail(v bool) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetIsFinish(v bool) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetResult(v []*GetAsyncErrorRequestStatByCodeResponseBodyDataResult) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.Result = v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetResultId(v string) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetState(v string) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.State = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetTimestamp(v int64) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetAsyncErrorRequestStatByCodeResponseBodyDataResult struct {
	// The number of SQL queries corresponding to the error code.
	//
	// example:
	//
	// 1
	Count *int32 `json:"count,omitempty" xml:"count,omitempty"`
	// The error code returned if the request failed.
	//
	// example:
	//
	// 1062
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
}

func (s GetAsyncErrorRequestStatByCodeResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyDataResult) SetCount(v int32) *GetAsyncErrorRequestStatByCodeResponseBodyDataResult {
	s.Count = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyDataResult) SetErrorCode(v string) *GetAsyncErrorRequestStatByCodeResponseBodyDataResult {
	s.ErrorCode = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyDataResult) SetInstanceId(v string) *GetAsyncErrorRequestStatByCodeResponseBodyDataResult {
	s.InstanceId = &v
	return s
}

type GetAsyncErrorRequestStatByCodeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAsyncErrorRequestStatByCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAsyncErrorRequestStatByCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeResponse) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeResponse) SetHeaders(v map[string]*string) *GetAsyncErrorRequestStatByCodeResponse {
	s.Headers = v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponse) SetStatusCode(v int32) *GetAsyncErrorRequestStatByCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponse) SetBody(v *GetAsyncErrorRequestStatByCodeResponseBody) *GetAsyncErrorRequestStatByCodeResponse {
	s.Body = v
	return s
}

type GetAsyncErrorRequestStatResultRequest struct {
	// The name of the database.
	//
	// example:
	//
	// testdb01
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	//
	// example:
	//
	// 1642566830000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified for PolarDB for MySQL instances.
	//
	// example:
	//
	// pi-bp179lg03445l****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The ID of the SQL template. Separate multiple SQL IDs with commas (,). You can call the [GetAsyncErrorRequestListByCode](https://help.aliyun.com/document_detail/410746.html) operation to query the ID of the SQL query for which MySQL error code is returned.
	//
	// example:
	//
	// ad78a4e7d3ce81590c9dc2d5f4bc****,0f92feacd92c048b06a16617a633****
	SqlIdList *string `json:"SqlIdList,omitempty" xml:"SqlIdList,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The beginning of the time range to query must be within the storage duration of the database instance and can be up to 90 days earlier than the current time.
	//
	// example:
	//
	// 1642556990714
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetAsyncErrorRequestStatResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatResultRequest) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatResultRequest) SetDbName(v string) *GetAsyncErrorRequestStatResultRequest {
	s.DbName = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetEnd(v int64) *GetAsyncErrorRequestStatResultRequest {
	s.End = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetInstanceId(v string) *GetAsyncErrorRequestStatResultRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetNodeId(v string) *GetAsyncErrorRequestStatResultRequest {
	s.NodeId = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetSqlIdList(v string) *GetAsyncErrorRequestStatResultRequest {
	s.SqlIdList = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetStart(v int64) *GetAsyncErrorRequestStatResultRequest {
	s.Start = &v
	return s
}

type GetAsyncErrorRequestStatResultResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	//
	// example:
	//
	// {         "fail": false,         "data": {             "ad78a4e7d3ce81590c9dc2d5f4bc****": {                 "sqlId": "ad78a4e7d3ce81590c9dc2d5f4bc****",                 "instanceId": "rm-2ze8g2am97624****",                 "count": 1             },             "0f92feacd92c048b06a16617a633****": {                 "sqlId": "0f92feacd92c048b06a16617a633****",                 "instanceId": "rm-2ze8g2am97624****",                 "count": 2             }         },         "resultId": "async__61f45ee381b2fa4e8a6545e3bee9****",         "isFinish": true,         "state": "SUCCESS",         "complete": true,         "timestamp": 1644558576717     }
	Data *GetAsyncErrorRequestStatResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3FC3F8EB-3564-5D1A-B187-3B03E5B0****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAsyncErrorRequestStatResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetCode(v int64) *GetAsyncErrorRequestStatResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetData(v *GetAsyncErrorRequestStatResultResponseBodyData) *GetAsyncErrorRequestStatResultResponseBody {
	s.Data = v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetMessage(v string) *GetAsyncErrorRequestStatResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetRequestId(v string) *GetAsyncErrorRequestStatResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetSuccess(v bool) *GetAsyncErrorRequestStatResultResponseBody {
	s.Success = &v
	return s
}

type GetAsyncErrorRequestStatResultResponseBodyData struct {
	// Indicates whether the asynchronous request was complete.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Complete *bool `json:"complete,omitempty" xml:"complete,omitempty"`
	// Indicates whether the request failed. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Fail *bool `json:"fail,omitempty" xml:"fail,omitempty"`
	// Indicates whether the asynchronous request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsFinish *bool `json:"isFinish,omitempty" xml:"isFinish,omitempty"`
	// The returned data of the asynchronous request.
	Result map[string]*DataResultValue `json:"result,omitempty" xml:"result,omitempty"`
	// The ID of the asynchronous request.
	//
	// example:
	//
	// async__61f45ee381b2fa4e8a6545e3bee9****
	ResultId *string `json:"resultId,omitempty" xml:"resultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// 	- **RUNNING**: The asynchronous request is running.
	//
	// 	- **SUCCESS**: The asynchronous request is successful.
	//
	// 	- **FAIL**: The asynchronous request fails.
	//
	// example:
	//
	// SUCCESS
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1644558576717
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetAsyncErrorRequestStatResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetComplete(v bool) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.Complete = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetFail(v bool) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetIsFinish(v bool) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetResult(v map[string]*DataResultValue) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.Result = v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetResultId(v string) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetState(v string) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.State = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetTimestamp(v int64) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetAsyncErrorRequestStatResultResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAsyncErrorRequestStatResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAsyncErrorRequestStatResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatResultResponse) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatResultResponse) SetHeaders(v map[string]*string) *GetAsyncErrorRequestStatResultResponse {
	s.Headers = v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponse) SetStatusCode(v int32) *GetAsyncErrorRequestStatResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponse) SetBody(v *GetAsyncErrorRequestStatResultResponseBody) *GetAsyncErrorRequestStatResultResponse {
	s.Body = v
	return s
}

type GetAutoIncrementUsageStatisticRequest struct {
	// The database name. If you specify a database, the operation queries the usage of auto-increment table IDs in the specified database. Otherwise, the operation queries the usage of auto-increment table IDs in all databases on the instance.
	//
	// >  Specify the parameter value as a JSON array, such as [\\"db1\\",\\"db2\\"]. Separate multiple database names with commas (,).
	//
	// example:
	//
	// [\\"db1\\",\\"db2\\"]
	DbNames *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The usage threshold of auto-increment IDs. Only usage that exceeds the threshold can be returned. Valid values are decimals that range from 0 to 1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0.9
	RatioFilter *float64 `json:"RatioFilter,omitempty" xml:"RatioFilter,omitempty"`
	// Specifies whether to query real-time data. Valid values:
	//
	// 	- **true**: queries data in real time except for data generated in the last 10 minutes.****
	//
	// 	- **false**: queries data generated in the last 2 hours. If no such data exists, queries the latest data.
	//
	// This parameter is required.
	//
	// example:
	//
	// false
	RealTime *bool `json:"RealTime,omitempty" xml:"RealTime,omitempty"`
}

func (s GetAutoIncrementUsageStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAutoIncrementUsageStatisticRequest) GoString() string {
	return s.String()
}

func (s *GetAutoIncrementUsageStatisticRequest) SetDbNames(v string) *GetAutoIncrementUsageStatisticRequest {
	s.DbNames = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticRequest) SetInstanceId(v string) *GetAutoIncrementUsageStatisticRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticRequest) SetRatioFilter(v float64) *GetAutoIncrementUsageStatisticRequest {
	s.RatioFilter = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticRequest) SetRealTime(v bool) *GetAutoIncrementUsageStatisticRequest {
	s.RealTime = &v
	return s
}

type GetAutoIncrementUsageStatisticResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetAutoIncrementUsageStatisticResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request is successful, **Successful*	- is returned. Otherwise, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0A74B755-98B7-59DB-8724-1321B394****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAutoIncrementUsageStatisticResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAutoIncrementUsageStatisticResponseBody) GoString() string {
	return s.String()
}

func (s *GetAutoIncrementUsageStatisticResponseBody) SetCode(v int64) *GetAutoIncrementUsageStatisticResponseBody {
	s.Code = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBody) SetData(v *GetAutoIncrementUsageStatisticResponseBodyData) *GetAutoIncrementUsageStatisticResponseBody {
	s.Data = v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBody) SetMessage(v string) *GetAutoIncrementUsageStatisticResponseBody {
	s.Message = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBody) SetRequestId(v string) *GetAutoIncrementUsageStatisticResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBody) SetSuccess(v bool) *GetAutoIncrementUsageStatisticResponseBody {
	s.Success = &v
	return s
}

type GetAutoIncrementUsageStatisticResponseBodyData struct {
	// The usage details of auto-increment IDs.
	AutoIncrementUsageList []*GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList `json:"AutoIncrementUsageList,omitempty" xml:"AutoIncrementUsageList,omitempty" type:"Repeated"`
	// The error message returned if the task fails.
	//
	// example:
	//
	// the given database name list invalid, none of the database names in the list exist on the instance
	ErrorInfo *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
	// Indicates whether the task is complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Finish *bool `json:"Finish,omitempty" xml:"Finish,omitempty"`
	// The task status. Valid values:
	//
	// 	- **INIT**: The task is being initialized.
	//
	// 	- **RUNNING**: The task is being executed.
	//
	// 	- **SUCCESS**: The task succeeds.
	//
	// 	- **FAIL**: The task fails.
	//
	// example:
	//
	// INIT
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// The time when the request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1697183353000
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetAutoIncrementUsageStatisticResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAutoIncrementUsageStatisticResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAutoIncrementUsageStatisticResponseBodyData) SetAutoIncrementUsageList(v []*GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList) *GetAutoIncrementUsageStatisticResponseBodyData {
	s.AutoIncrementUsageList = v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBodyData) SetErrorInfo(v string) *GetAutoIncrementUsageStatisticResponseBodyData {
	s.ErrorInfo = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBodyData) SetFinish(v bool) *GetAutoIncrementUsageStatisticResponseBodyData {
	s.Finish = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBodyData) SetTaskStatus(v string) *GetAutoIncrementUsageStatisticResponseBodyData {
	s.TaskStatus = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBodyData) SetTimestamp(v int64) *GetAutoIncrementUsageStatisticResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList struct {
	// The latest auto-increment ID.
	//
	// example:
	//
	// 2147483647
	AutoIncrementCurrentValue *int64 `json:"AutoIncrementCurrentValue,omitempty" xml:"AutoIncrementCurrentValue,omitempty"`
	// The usage ratio of auto-increment IDs.
	//
	// example:
	//
	// 1
	AutoIncrementRatio *float64 `json:"AutoIncrementRatio,omitempty" xml:"AutoIncrementRatio,omitempty"`
	// The column name.
	//
	// example:
	//
	// id
	ColumnName *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	// The database name.
	//
	// example:
	//
	// db01
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The maximum auto-increment ID that is supported by the current data type.
	//
	// example:
	//
	// 2147483647
	MaximumValue *int64 `json:"MaximumValue,omitempty" xml:"MaximumValue,omitempty"`
	// The table name.
	//
	// example:
	//
	// test_table
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList) GoString() string {
	return s.String()
}

func (s *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList) SetAutoIncrementCurrentValue(v int64) *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList {
	s.AutoIncrementCurrentValue = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList) SetAutoIncrementRatio(v float64) *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList {
	s.AutoIncrementRatio = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList) SetColumnName(v string) *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList {
	s.ColumnName = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList) SetDbName(v string) *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList {
	s.DbName = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList) SetMaximumValue(v int64) *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList {
	s.MaximumValue = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList) SetTableName(v string) *GetAutoIncrementUsageStatisticResponseBodyDataAutoIncrementUsageList {
	s.TableName = &v
	return s
}

type GetAutoIncrementUsageStatisticResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAutoIncrementUsageStatisticResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAutoIncrementUsageStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAutoIncrementUsageStatisticResponse) GoString() string {
	return s.String()
}

func (s *GetAutoIncrementUsageStatisticResponse) SetHeaders(v map[string]*string) *GetAutoIncrementUsageStatisticResponse {
	s.Headers = v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponse) SetStatusCode(v int32) *GetAutoIncrementUsageStatisticResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAutoIncrementUsageStatisticResponse) SetBody(v *GetAutoIncrementUsageStatisticResponseBody) *GetAutoIncrementUsageStatisticResponse {
	s.Body = v
	return s
}

type GetAutoResourceOptimizeRulesRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance IDs.
	//
	// 	- Specify the parameter value as a JSON array, such as `[\\"Database account 1\\",\\"Database account 2\\"]`. Separate database instance IDs with commas (,).
	//
	// 	- By default, if you leave this parameter empty, all database instances for which the automatic fragment recycling feature has been enabled within the current Alibaba Cloud account are returned. The following types of database instances are returned:
	//
	//     	- Database instances for which the automatic fragment recycling feature is currently enabled.
	//
	//     	- Database instances for which the automatic fragment recycling feature was once enabled but is currently disabled, including those for which DAS Enterprise Edition has been disabled but excluding those that have been released.
	//
	// example:
	//
	// [\\"rm-2ze8g2am97624****\\",\\"rm-2vc54m2a6pd6p****\\",\\"rm-2ze9xrhze0709****\\",\\"rm-2ze8g2am97627****\\"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s GetAutoResourceOptimizeRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesRequest) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesRequest) SetConsoleContext(v string) *GetAutoResourceOptimizeRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesRequest) SetInstanceIds(v string) *GetAutoResourceOptimizeRulesRequest {
	s.InstanceIds = &v
	return s
}

type GetAutoResourceOptimizeRulesResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetAutoResourceOptimizeRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAutoResourceOptimizeRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBody) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetCode(v int64) *GetAutoResourceOptimizeRulesResponseBody {
	s.Code = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetData(v *GetAutoResourceOptimizeRulesResponseBodyData) *GetAutoResourceOptimizeRulesResponseBody {
	s.Data = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetMessage(v string) *GetAutoResourceOptimizeRulesResponseBody {
	s.Message = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetRequestId(v string) *GetAutoResourceOptimizeRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetSuccess(v bool) *GetAutoResourceOptimizeRulesResponseBody {
	s.Success = &v
	return s
}

type GetAutoResourceOptimizeRulesResponseBodyData struct {
	// The number of database instances for which the automatic fragment recycling feature is currently enabled.
	//
	// example:
	//
	// 1
	EnableAutoResourceOptimizeCount *int64 `json:"EnableAutoResourceOptimizeCount,omitempty" xml:"EnableAutoResourceOptimizeCount,omitempty"`
	// The database instances for which the automatic fragment recycling feature is currently enabled.
	EnableAutoResourceOptimizeList []*GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList `json:"EnableAutoResourceOptimizeList,omitempty" xml:"EnableAutoResourceOptimizeList,omitempty" type:"Repeated"`
	// The number of database instances for which the automatic fragment recycling feature is enabled and DAS Enterprise Edition is disabled.
	//
	// example:
	//
	// 1
	HasEnableRuleButNotDasProCount *int64 `json:"HasEnableRuleButNotDasProCount,omitempty" xml:"HasEnableRuleButNotDasProCount,omitempty"`
	// The database instances for which the automatic fragment recycling feature is enabled and DAS Enterprise Edition is disabled.
	//
	// >  Automatic fragment recycling tasks are run on this type of database instances only if DAS Enterprise Edition is enabled for the database instances again.
	HasEnableRuleButNotDasProList []*GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList `json:"HasEnableRuleButNotDasProList,omitempty" xml:"HasEnableRuleButNotDasProList,omitempty" type:"Repeated"`
	// The number of database instances that do not exist or for which the automatic fragment recycling feature has never been enabled.
	//
	// >  If a database instance does not exist, the instance has been released or the specified instance ID is invalid.
	//
	// example:
	//
	// 1
	NeverEnableAutoResourceOptimizeOrReleasedInstanceCount *int64 `json:"NeverEnableAutoResourceOptimizeOrReleasedInstanceCount,omitempty" xml:"NeverEnableAutoResourceOptimizeOrReleasedInstanceCount,omitempty"`
	// The database instances that do not exist or for which the automatic fragment recycling feature has never been enabled.
	NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList []*string `json:"NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList,omitempty" xml:"NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList,omitempty" type:"Repeated"`
	// The number of database instances for which the automatic fragment recycling feature has been enabled.
	//
	// example:
	//
	// 3
	TotalAutoResourceOptimizeRulesCount *int64 `json:"TotalAutoResourceOptimizeRulesCount,omitempty" xml:"TotalAutoResourceOptimizeRulesCount,omitempty"`
	// The number of database instances for which the automatic fragment recycling feature was once enabled but is currently disabled.
	//
	// example:
	//
	// 1
	TurnOffAutoResourceOptimizeCount *int64 `json:"TurnOffAutoResourceOptimizeCount,omitempty" xml:"TurnOffAutoResourceOptimizeCount,omitempty"`
	// The database instances for which the automatic fragment recycling feature was once enabled but is currently disabled.
	TurnOffAutoResourceOptimizeList []*GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList `json:"TurnOffAutoResourceOptimizeList,omitempty" xml:"TurnOffAutoResourceOptimizeList,omitempty" type:"Repeated"`
}

func (s GetAutoResourceOptimizeRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetEnableAutoResourceOptimizeCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.EnableAutoResourceOptimizeCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetEnableAutoResourceOptimizeList(v []*GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.EnableAutoResourceOptimizeList = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetHasEnableRuleButNotDasProCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.HasEnableRuleButNotDasProCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetHasEnableRuleButNotDasProList(v []*GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.HasEnableRuleButNotDasProList = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetNeverEnableAutoResourceOptimizeOrReleasedInstanceCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.NeverEnableAutoResourceOptimizeOrReleasedInstanceCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetNeverEnableAutoResourceOptimizeOrReleasedInstanceIdList(v []*string) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetTotalAutoResourceOptimizeRulesCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.TotalAutoResourceOptimizeRulesCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetTurnOffAutoResourceOptimizeCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.TurnOffAutoResourceOptimizeCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetTurnOffAutoResourceOptimizeList(v []*GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.TurnOffAutoResourceOptimizeList = v
	return s
}

type GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList struct {
	// Indicates whether the automatic fragment recycling feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	AutoDefragment *bool `json:"AutoDefragment,omitempty" xml:"AutoDefragment,omitempty"`
	// Indicates whether DAS Enterprise Edition is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	DasProOn *bool `json:"DasProOn,omitempty" xml:"DasProOn,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The fragmentation rate of a single physical table for which the automatic fragment recycling feature is enabled.
	//
	// example:
	//
	// 0.2
	TableFragmentationRatio *float64 `json:"TableFragmentationRatio,omitempty" xml:"TableFragmentationRatio,omitempty"`
	// The minimum storage usage of a single physical table for which the automatic fragment recycling feature is enabled. Unit: GB.
	//
	// example:
	//
	// 10
	TableSpaceSize *float64 `json:"TableSpaceSize,omitempty" xml:"TableSpaceSize,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// example:
	//
	// 140692647406****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetAutoDefragment(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.AutoDefragment = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetDasProOn(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.DasProOn = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetInstanceId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetTableFragmentationRatio(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.TableFragmentationRatio = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetTableSpaceSize(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.TableSpaceSize = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetUserId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.UserId = &v
	return s
}

type GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList struct {
	// Indicates whether the automatic fragment recycling feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	AutoDefragment *bool `json:"AutoDefragment,omitempty" xml:"AutoDefragment,omitempty"`
	// Indicates whether DAS Enterprise Edition is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	DasProOn *bool `json:"DasProOn,omitempty" xml:"DasProOn,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze9xrhze0709****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The fragmentation rate of a single physical table for which the automatic fragment recycling feature is enabled.
	//
	// example:
	//
	// 0.2
	TableFragmentationRatio *float64 `json:"TableFragmentationRatio,omitempty" xml:"TableFragmentationRatio,omitempty"`
	// The minimum storage usage of a single physical table for which the automatic fragment recycling feature is enabled. Unit: GB.
	//
	// example:
	//
	// 10
	TableSpaceSize *float64 `json:"TableSpaceSize,omitempty" xml:"TableSpaceSize,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// example:
	//
	// 140692647406****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetAutoDefragment(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.AutoDefragment = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetDasProOn(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.DasProOn = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetInstanceId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetTableFragmentationRatio(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.TableFragmentationRatio = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetTableSpaceSize(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.TableSpaceSize = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetUserId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.UserId = &v
	return s
}

type GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList struct {
	// Indicates whether the automatic fragment recycling feature is enabled. Valid values:
	//
	// 	- **true**:
	//
	// 	- **false**
	//
	// example:
	//
	// false
	AutoDefragment *bool `json:"AutoDefragment,omitempty" xml:"AutoDefragment,omitempty"`
	// Indicates whether DAS Enterprise Edition is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	DasProOn *bool `json:"DasProOn,omitempty" xml:"DasProOn,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2vc54m2a6pd6p****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The fragmentation rate of a single physical table for which the automatic fragment recycling feature is enabled.
	//
	// example:
	//
	// 0.2
	TableFragmentationRatio *float64 `json:"TableFragmentationRatio,omitempty" xml:"TableFragmentationRatio,omitempty"`
	// The minimum storage usage of a single physical table for which the automatic fragment recycling feature is enabled. Unit: GB.
	//
	// example:
	//
	// 10
	TableSpaceSize *float64 `json:"TableSpaceSize,omitempty" xml:"TableSpaceSize,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// example:
	//
	// 140692647406****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetAutoDefragment(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.AutoDefragment = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetDasProOn(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.DasProOn = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetInstanceId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetTableFragmentationRatio(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.TableFragmentationRatio = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetTableSpaceSize(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.TableSpaceSize = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetUserId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.UserId = &v
	return s
}

type GetAutoResourceOptimizeRulesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAutoResourceOptimizeRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAutoResourceOptimizeRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponse) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponse) SetHeaders(v map[string]*string) *GetAutoResourceOptimizeRulesResponse {
	s.Headers = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponse) SetStatusCode(v int32) *GetAutoResourceOptimizeRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponse) SetBody(v *GetAutoResourceOptimizeRulesResponseBody) *GetAutoResourceOptimizeRulesResponse {
	s.Body = v
	return s
}

type GetAutoThrottleRulesRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance IDs.
	//
	// 	- Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\",\\"Instance ID2\\"]`.
	//
	// 	- By default, if you leave this parameter empty, all database instances for which the automatic SQL throttling feature has been enabled within the current Alibaba Cloud account are returned. The following types of database instances are returned:
	//
	//     	- Database instances for which the automatic SQL throttling feature is currently enabled.
	//
	//     	- Database instances for which the automatic SQL throttling feature was once enabled but is currently disabled. Released database instances are not included.
	//
	// example:
	//
	// [\\"rm-2ze8g2am97624****\\",\\"rm-2vc54m2a6pd6p****\\",\\"rm-2ze9xrhze0709****\\"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s GetAutoThrottleRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesRequest) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesRequest) SetConsoleContext(v string) *GetAutoThrottleRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetAutoThrottleRulesRequest) SetInstanceIds(v string) *GetAutoThrottleRulesRequest {
	s.InstanceIds = &v
	return s
}

type GetAutoThrottleRulesResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetAutoThrottleRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7172BECE-588A-5961-8126-C216E16B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAutoThrottleRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponseBody) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponseBody) SetCode(v int64) *GetAutoThrottleRulesResponseBody {
	s.Code = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBody) SetData(v *GetAutoThrottleRulesResponseBodyData) *GetAutoThrottleRulesResponseBody {
	s.Data = v
	return s
}

func (s *GetAutoThrottleRulesResponseBody) SetMessage(v string) *GetAutoThrottleRulesResponseBody {
	s.Message = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBody) SetRequestId(v string) *GetAutoThrottleRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBody) SetSuccess(v bool) *GetAutoThrottleRulesResponseBody {
	s.Success = &v
	return s
}

type GetAutoThrottleRulesResponseBodyData struct {
	// The number of database instances for which the automatic SQL throttling feature is currently enabled.
	//
	// example:
	//
	// 1
	EnableAutoThrottleCount *int64 `json:"EnableAutoThrottleCount,omitempty" xml:"EnableAutoThrottleCount,omitempty"`
	// The database instances for which the automatic SQL throttling feature is currently enabled.
	EnableAutoThrottleList []*GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList `json:"EnableAutoThrottleList,omitempty" xml:"EnableAutoThrottleList,omitempty" type:"Repeated"`
	// The number of database instances that do not exist or for which the automatic SQL throttling feature has never been enabled.
	//
	// >  If a database instance does not exist, the instance has been released or the specified instance ID is invalid.
	//
	// example:
	//
	// 1
	NeverEnableAutoThrottleOrReleasedInstanceCount *int64 `json:"NeverEnableAutoThrottleOrReleasedInstanceCount,omitempty" xml:"NeverEnableAutoThrottleOrReleasedInstanceCount,omitempty"`
	// The number of database instances that do not exist or for which the automatic SQL throttling feature has never been enabled.
	//
	// >  If a database instance does not exist, the instance has been released or the specified instance ID is invalid.
	NeverEnableAutoThrottleOrReleasedInstanceIdList []*string `json:"NeverEnableAutoThrottleOrReleasedInstanceIdList,omitempty" xml:"NeverEnableAutoThrottleOrReleasedInstanceIdList,omitempty" type:"Repeated"`
	// The number of databases for which the automatic SQL throttling feature has been enabled.
	//
	// example:
	//
	// 3
	TotalAutoThrottleRulesCount *int64 `json:"TotalAutoThrottleRulesCount,omitempty" xml:"TotalAutoThrottleRulesCount,omitempty"`
	// The number of database instances for which the automatic SQL throttling feature was once enabled but is currently disabled.
	//
	// example:
	//
	// 1
	TurnOffAutoThrottleCount *int64 `json:"TurnOffAutoThrottleCount,omitempty" xml:"TurnOffAutoThrottleCount,omitempty"`
	// The database instances for which the automatic SQL throttling feature was once enabled but is currently disabled.
	TurnOffAutoThrottleList []*GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList `json:"TurnOffAutoThrottleList,omitempty" xml:"TurnOffAutoThrottleList,omitempty" type:"Repeated"`
}

func (s GetAutoThrottleRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponseBodyData) SetEnableAutoThrottleCount(v int64) *GetAutoThrottleRulesResponseBodyData {
	s.EnableAutoThrottleCount = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetEnableAutoThrottleList(v []*GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) *GetAutoThrottleRulesResponseBodyData {
	s.EnableAutoThrottleList = v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetNeverEnableAutoThrottleOrReleasedInstanceCount(v int64) *GetAutoThrottleRulesResponseBodyData {
	s.NeverEnableAutoThrottleOrReleasedInstanceCount = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetNeverEnableAutoThrottleOrReleasedInstanceIdList(v []*string) *GetAutoThrottleRulesResponseBodyData {
	s.NeverEnableAutoThrottleOrReleasedInstanceIdList = v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetTotalAutoThrottleRulesCount(v int64) *GetAutoThrottleRulesResponseBodyData {
	s.TotalAutoThrottleRulesCount = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetTurnOffAutoThrottleCount(v int64) *GetAutoThrottleRulesResponseBodyData {
	s.TurnOffAutoThrottleCount = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetTurnOffAutoThrottleList(v []*GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) *GetAutoThrottleRulesResponseBodyData {
	s.TurnOffAutoThrottleList = v
	return s
}

type GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList struct {
	// The maximum period of time during which an exception occurs when automatic SQL throttling is triggered. Unit: minutes.
	//
	// example:
	//
	// 2
	AbnormalDuration *float64 `json:"AbnormalDuration,omitempty" xml:"AbnormalDuration,omitempty"`
	// The maximum number of active sessions.
	//
	// example:
	//
	// 32
	ActiveSessions *int64 `json:"ActiveSessions,omitempty" xml:"ActiveSessions,omitempty"`
	// The end time of the throttling window. The value of this parameter is in UTC.
	//
	// example:
	//
	// 23:59Z
	AllowThrottleEndTime *string `json:"AllowThrottleEndTime,omitempty" xml:"AllowThrottleEndTime,omitempty"`
	// The start time of the throttling window. The value of this parameter is in UTC.
	//
	// example:
	//
	// 00:00Z
	AllowThrottleStartTime *string `json:"AllowThrottleStartTime,omitempty" xml:"AllowThrottleStartTime,omitempty"`
	// Indicates whether abnormal SQL statements in execution are terminated at a time. Valid values:
	//
	// > Abnormal SQL statements use the same template as the SQL statements that need to be throttled.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	AutoKillSession *bool `json:"AutoKillSession,omitempty" xml:"AutoKillSession,omitempty"`
	// The logical relationship between the CPU utilization threshold and the maximum number of active sessions. Valid values:
	//
	// 	- **AND**
	//
	// 	- **OR**
	//
	// example:
	//
	// AND
	CpuSessionRelation *string `json:"CpuSessionRelation,omitempty" xml:"CpuSessionRelation,omitempty"`
	// The CPU utilization threshold.
	//
	// example:
	//
	// 70
	CpuUsage *float64 `json:"CpuUsage,omitempty" xml:"CpuUsage,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The maximum throttling duration. Unit: minutes.
	//
	// example:
	//
	// 10
	MaxThrottleTime *float64 `json:"MaxThrottleTime,omitempty" xml:"MaxThrottleTime,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// example:
	//
	// 140692647406****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// Indicates whether the automatic SQL throttling feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Visible *bool `json:"Visible,omitempty" xml:"Visible,omitempty"`
}

func (s GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetAbnormalDuration(v float64) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.AbnormalDuration = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetActiveSessions(v int64) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.ActiveSessions = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetAllowThrottleEndTime(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.AllowThrottleEndTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetAllowThrottleStartTime(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.AllowThrottleStartTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetAutoKillSession(v bool) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.AutoKillSession = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetCpuSessionRelation(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.CpuSessionRelation = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetCpuUsage(v float64) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.CpuUsage = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetInstanceId(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetMaxThrottleTime(v float64) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.MaxThrottleTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetUserId(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.UserId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetVisible(v bool) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.Visible = &v
	return s
}

type GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList struct {
	// The maximum period of time during which the automatic SQL throttling feature is triggered. Unit: minutes.
	//
	// example:
	//
	// 2
	AbnormalDuration *float64 `json:"AbnormalDuration,omitempty" xml:"AbnormalDuration,omitempty"`
	// The maximum number of active sessions.
	//
	// example:
	//
	// 64
	ActiveSessions *int64 `json:"ActiveSessions,omitempty" xml:"ActiveSessions,omitempty"`
	// The end time of the throttling window. The value of this parameter is in UTC.
	//
	// example:
	//
	// 23:59Z
	AllowThrottleEndTime *string `json:"AllowThrottleEndTime,omitempty" xml:"AllowThrottleEndTime,omitempty"`
	// The start time of the throttling window. The value of this parameter is in UTC.
	//
	// example:
	//
	// 00:00Z
	AllowThrottleStartTime *string `json:"AllowThrottleStartTime,omitempty" xml:"AllowThrottleStartTime,omitempty"`
	// Indicates whether abnormal SQL statements in execution are terminated at a time. Valid values:
	//
	// > Abnormal SQL statements use the same template as the SQL statements that need to be throttled.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	AutoKillSession *bool `json:"AutoKillSession,omitempty" xml:"AutoKillSession,omitempty"`
	// The logical relationship between the CPU utilization threshold and the maximum number of active sessions. Valid values:
	//
	// 	- **AND**
	//
	// 	- **OR**
	//
	// example:
	//
	// OR
	CpuSessionRelation *string `json:"CpuSessionRelation,omitempty" xml:"CpuSessionRelation,omitempty"`
	// The CPU utilization threshold.
	//
	// example:
	//
	// 80
	CpuUsage *float64 `json:"CpuUsage,omitempty" xml:"CpuUsage,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze9xrhze0709****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The maximum throttling duration. Unit: minutes.
	//
	// example:
	//
	// 10
	MaxThrottleTime *float64 `json:"MaxThrottleTime,omitempty" xml:"MaxThrottleTime,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// example:
	//
	// 140692647406****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// Indicates whether the automatic SQL throttling feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Visible *bool `json:"Visible,omitempty" xml:"Visible,omitempty"`
}

func (s GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetAbnormalDuration(v float64) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.AbnormalDuration = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetActiveSessions(v int64) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.ActiveSessions = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetAllowThrottleEndTime(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.AllowThrottleEndTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetAllowThrottleStartTime(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.AllowThrottleStartTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetAutoKillSession(v bool) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.AutoKillSession = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetCpuSessionRelation(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.CpuSessionRelation = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetCpuUsage(v float64) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.CpuUsage = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetInstanceId(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetMaxThrottleTime(v float64) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.MaxThrottleTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetUserId(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.UserId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetVisible(v bool) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.Visible = &v
	return s
}

type GetAutoThrottleRulesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAutoThrottleRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAutoThrottleRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponse) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponse) SetHeaders(v map[string]*string) *GetAutoThrottleRulesResponse {
	s.Headers = v
	return s
}

func (s *GetAutoThrottleRulesResponse) SetStatusCode(v int32) *GetAutoThrottleRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAutoThrottleRulesResponse) SetBody(v *GetAutoThrottleRulesResponseBody) *GetAutoThrottleRulesResponse {
	s.Body = v
	return s
}

type GetAutonomousNotifyEventContentRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The unique identifier of the event. You can call the [GetAutonomousNotifyEventsInRange](https://help.aliyun.com/document_detail/288371.html) operation to query the unique identifier returned by the SpanId response parameter.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7e7b2774-95b8-4fa3-bd9c-0ab47cb7****
	SpanId *string `json:"SpanId,omitempty" xml:"SpanId,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Context *string `json:"__context,omitempty" xml:"__context,omitempty"`
}

func (s GetAutonomousNotifyEventContentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventContentRequest) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventContentRequest) SetInstanceId(v string) *GetAutonomousNotifyEventContentRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAutonomousNotifyEventContentRequest) SetSpanId(v string) *GetAutonomousNotifyEventContentRequest {
	s.SpanId = &v
	return s
}

func (s *GetAutonomousNotifyEventContentRequest) SetContext(v string) *GetAutonomousNotifyEventContentRequest {
	s.Context = &v
	return s
}

type GetAutonomousNotifyEventContentResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the notification events.
	//
	// example:
	//
	// {\\"taskId\\":\\"7e1ba595-0889-48ff-a6ff-010f54991d****\\",\\"taskType\\":\\"SQL_OPTIMIZE\\",\\"advisorId\\":\\"636dc5f34664dd56ff0****\\",\\"sqlId\\":\\"e2b1d6c1ee1bb29555a828b59f16****\\",\\"indexAdviceCount\\":1,\\"indexAdvices\\":[{\\"schemaName\\":\\"das\\",\\"tableName\\":\\"students\\",\\"indexName\\":\\"idx_name\\",\\"columns\\":[\\"name\\"],\\"unique\\":false,\\"ddlAddIndex\\":\\"ALTER TABLE `das`.`students` ADD INDEX `idx_name` (`name`)\\",\\"priority\\":0,\\"optimizeId\\":\\"96232794517277511\\"}],\\"tuningAdvices\\":[],\\"improvement\\":8127.25,\\"supportLevel\\":3,\\"priority\\":\\"HIGH\\"}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAutonomousNotifyEventContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventContentResponseBody) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetCode(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.Code = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetData(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.Data = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetMessage(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.Message = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetRequestId(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetSuccess(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.Success = &v
	return s
}

type GetAutonomousNotifyEventContentResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAutonomousNotifyEventContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAutonomousNotifyEventContentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventContentResponse) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventContentResponse) SetHeaders(v map[string]*string) *GetAutonomousNotifyEventContentResponse {
	s.Headers = v
	return s
}

func (s *GetAutonomousNotifyEventContentResponse) SetStatusCode(v int32) *GetAutonomousNotifyEventContentResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponse) SetBody(v *GetAutonomousNotifyEventContentResponseBody) *GetAutonomousNotifyEventContentResponse {
	s.Body = v
	return s
}

type GetAutonomousNotifyEventsInRangeRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1568265711221
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	EventContext *string `json:"EventContext,omitempty" xml:"EventContext,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-18ff4a195d****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The urgency level of the events. If you specify this parameter, the MinLevel parameter does not take effect. Valid values:
	//
	// 	- **Notice**: events for which the system sends notifications.
	//
	// 	- **Optimization**: events that need to be optimized.
	//
	// 	- **Warn**: events for which the system sends warnings.
	//
	// 	- **Critical**: critical events.
	//
	// example:
	//
	// Warn
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The minimum urgency level of the events. Valid values:
	//
	// 	- **Notice**: events for which the system sends notifications.
	//
	// 	- **Optimization**: events that need to be optimized.
	//
	// 	- **Warn**: events for which the system sends warnings.
	//
	// 	- **Critical**: critical events.
	//
	// example:
	//
	// Notice
	MinLevel *string `json:"MinLevel,omitempty" xml:"MinLevel,omitempty"`
	// The ID of the node in a PolarDB for MySQL cluster. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/98094.html) operation to query the node ID returned by the DBNodeId response parameter.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	//
	// example:
	//
	// 1
	PageOffset *string `json:"PageOffset,omitempty" xml:"PageOffset,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 30
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1568269711000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Context *string `json:"__context,omitempty" xml:"__context,omitempty"`
}

func (s GetAutonomousNotifyEventsInRangeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeRequest) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetEndTime(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.EndTime = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetEventContext(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.EventContext = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetInstanceId(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetLevel(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.Level = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetMinLevel(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.MinLevel = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetNodeId(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.NodeId = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetPageOffset(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.PageOffset = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetPageSize(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.PageSize = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetStartTime(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.StartTime = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetContext(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.Context = &v
	return s
}

type GetAutonomousNotifyEventsInRangeResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetAutonomousNotifyEventsInRangeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAutonomousNotifyEventsInRangeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeResponseBody) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetCode(v string) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.Code = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetData(v *GetAutonomousNotifyEventsInRangeResponseBodyData) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.Data = v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetMessage(v string) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.Message = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetRequestId(v string) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetSuccess(v string) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.Success = &v
	return s
}

type GetAutonomousNotifyEventsInRangeResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	List *GetAutonomousNotifyEventsInRangeResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 4
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetAutonomousNotifyEventsInRangeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetExtra(v string) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetList(v *GetAutonomousNotifyEventsInRangeResponseBodyDataList) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.List = v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetPageNo(v int64) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetPageSize(v int64) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetTotal(v int64) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.Total = &v
	return s
}

type GetAutonomousNotifyEventsInRangeResponseBodyDataList struct {
	T []*string `json:"T,omitempty" xml:"T,omitempty" type:"Repeated"`
}

func (s GetAutonomousNotifyEventsInRangeResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyDataList) SetT(v []*string) *GetAutonomousNotifyEventsInRangeResponseBodyDataList {
	s.T = v
	return s
}

type GetAutonomousNotifyEventsInRangeResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAutonomousNotifyEventsInRangeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAutonomousNotifyEventsInRangeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeResponse) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeResponse) SetHeaders(v map[string]*string) *GetAutonomousNotifyEventsInRangeResponse {
	s.Headers = v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponse) SetStatusCode(v int32) *GetAutonomousNotifyEventsInRangeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponse) SetBody(v *GetAutonomousNotifyEventsInRangeResponseBody) *GetAutonomousNotifyEventsInRangeResponse {
	s.Body = v
	return s
}

type GetBlockingDetailListRequest struct {
	// The name of the database. Separate multiple database names with commas (,).
	//
	// example:
	//
	// school1,school2
	DbNameList *string `json:"DbNameList,omitempty" xml:"DbNameList,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1682490480548
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the database instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-t4nfalp2ap421312z
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. The value must be an integer that is greater than 0. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. The value must be an integer that is greater than 0. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The hash value of the SQL statement. The hash values of SQL statements of the same type are the same.
	//
	// example:
	//
	// DC08B955CAD25E7B
	QueryHash *string `json:"QueryHash,omitempty" xml:"QueryHash,omitempty"`
	// The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1679429913757
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetBlockingDetailListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBlockingDetailListRequest) GoString() string {
	return s.String()
}

func (s *GetBlockingDetailListRequest) SetDbNameList(v string) *GetBlockingDetailListRequest {
	s.DbNameList = &v
	return s
}

func (s *GetBlockingDetailListRequest) SetEndTime(v string) *GetBlockingDetailListRequest {
	s.EndTime = &v
	return s
}

func (s *GetBlockingDetailListRequest) SetInstanceId(v string) *GetBlockingDetailListRequest {
	s.InstanceId = &v
	return s
}

func (s *GetBlockingDetailListRequest) SetPageNo(v string) *GetBlockingDetailListRequest {
	s.PageNo = &v
	return s
}

func (s *GetBlockingDetailListRequest) SetPageSize(v string) *GetBlockingDetailListRequest {
	s.PageSize = &v
	return s
}

func (s *GetBlockingDetailListRequest) SetQueryHash(v string) *GetBlockingDetailListRequest {
	s.QueryHash = &v
	return s
}

func (s *GetBlockingDetailListRequest) SetStartTime(v string) *GetBlockingDetailListRequest {
	s.StartTime = &v
	return s
}

type GetBlockingDetailListResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetBlockingDetailListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request is successful, **Successful*	- is returned. Otherwise, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetBlockingDetailListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBlockingDetailListResponseBody) GoString() string {
	return s.String()
}

func (s *GetBlockingDetailListResponseBody) SetCode(v string) *GetBlockingDetailListResponseBody {
	s.Code = &v
	return s
}

func (s *GetBlockingDetailListResponseBody) SetData(v *GetBlockingDetailListResponseBodyData) *GetBlockingDetailListResponseBody {
	s.Data = v
	return s
}

func (s *GetBlockingDetailListResponseBody) SetMessage(v string) *GetBlockingDetailListResponseBody {
	s.Message = &v
	return s
}

func (s *GetBlockingDetailListResponseBody) SetRequestId(v string) *GetBlockingDetailListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBlockingDetailListResponseBody) SetSuccess(v string) *GetBlockingDetailListResponseBody {
	s.Success = &v
	return s
}

type GetBlockingDetailListResponseBodyData struct {
	// The details of the data returned.
	List []*GetBlockingDetailListResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number of the page returned.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 19
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetBlockingDetailListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetBlockingDetailListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetBlockingDetailListResponseBodyData) SetList(v []*GetBlockingDetailListResponseBodyDataList) *GetBlockingDetailListResponseBodyData {
	s.List = v
	return s
}

func (s *GetBlockingDetailListResponseBodyData) SetPageNo(v int64) *GetBlockingDetailListResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyData) SetPageSize(v int64) *GetBlockingDetailListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyData) SetTotal(v int64) *GetBlockingDetailListResponseBodyData {
	s.Total = &v
	return s
}

type GetBlockingDetailListResponseBodyDataList struct {
	// The batch ID.
	//
	// example:
	//
	// 1683530096156
	BatchId *int64 `json:"BatchId,omitempty" xml:"BatchId,omitempty"`
	// The client name.
	//
	// example:
	//
	// .Net SqlClient Data Provider
	ClientAppName *string `json:"ClientAppName,omitempty" xml:"ClientAppName,omitempty"`
	// The time when the blocking data was collected. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1700065800000
	CurrentCollectionTime *int64 `json:"CurrentCollectionTime,omitempty" xml:"CurrentCollectionTime,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// school
	DataBase *string `json:"DataBase,omitempty" xml:"DataBase,omitempty"`
	// The client hostname.
	//
	// example:
	//
	// ALLBNMGTAPPRD01
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The username that is used for the logon.
	//
	// example:
	//
	// Cheney603
	LoginId *string `json:"LoginId,omitempty" xml:"LoginId,omitempty"`
	// The hash value of the SQL statement.
	//
	// example:
	//
	// 6977DD06CD9CAFF2
	QueryHash *string `json:"QueryHash,omitempty" xml:"QueryHash,omitempty"`
	// The session ID.
	//
	// example:
	//
	// 1717
	Spid *string `json:"Spid,omitempty" xml:"Spid,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// select 	- from test1
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The time when the execution started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1608888296000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The duration of the blocking. Unit: milliseconds.
	//
	// example:
	//
	// 30000
	WaitTimeMs *int64 `json:"WaitTimeMs,omitempty" xml:"WaitTimeMs,omitempty"`
	// The wait type. For more information about wait types, see [sys.dm_os_wait_stats (Transact-SQL)](https://learn.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-os-wait-stats-transact-sql?view=sql-server-ver15).
	//
	// example:
	//
	// MISCELLANEOUS
	WaitType *string `json:"WaitType,omitempty" xml:"WaitType,omitempty"`
}

func (s GetBlockingDetailListResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetBlockingDetailListResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetBlockingDetailListResponseBodyDataList) SetBatchId(v int64) *GetBlockingDetailListResponseBodyDataList {
	s.BatchId = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetClientAppName(v string) *GetBlockingDetailListResponseBodyDataList {
	s.ClientAppName = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetCurrentCollectionTime(v int64) *GetBlockingDetailListResponseBodyDataList {
	s.CurrentCollectionTime = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetDataBase(v string) *GetBlockingDetailListResponseBodyDataList {
	s.DataBase = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetHostName(v string) *GetBlockingDetailListResponseBodyDataList {
	s.HostName = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetLoginId(v string) *GetBlockingDetailListResponseBodyDataList {
	s.LoginId = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetQueryHash(v string) *GetBlockingDetailListResponseBodyDataList {
	s.QueryHash = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetSpid(v string) *GetBlockingDetailListResponseBodyDataList {
	s.Spid = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetSqlText(v string) *GetBlockingDetailListResponseBodyDataList {
	s.SqlText = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetStartTime(v string) *GetBlockingDetailListResponseBodyDataList {
	s.StartTime = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetWaitTimeMs(v int64) *GetBlockingDetailListResponseBodyDataList {
	s.WaitTimeMs = &v
	return s
}

func (s *GetBlockingDetailListResponseBodyDataList) SetWaitType(v string) *GetBlockingDetailListResponseBodyDataList {
	s.WaitType = &v
	return s
}

type GetBlockingDetailListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBlockingDetailListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBlockingDetailListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBlockingDetailListResponse) GoString() string {
	return s.String()
}

func (s *GetBlockingDetailListResponse) SetHeaders(v map[string]*string) *GetBlockingDetailListResponse {
	s.Headers = v
	return s
}

func (s *GetBlockingDetailListResponse) SetStatusCode(v int32) *GetBlockingDetailListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBlockingDetailListResponse) SetBody(v *GetBlockingDetailListResponseBody) *GetBlockingDetailListResponse {
	s.Body = v
	return s
}

type GetDBInstanceConnectivityDiagnosisRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The source IP address.
	//
	// This parameter is required.
	//
	// example:
	//
	// 47.110.180.62
	SrcIp *string `json:"SrcIp,omitempty" xml:"SrcIp,omitempty"`
}

func (s GetDBInstanceConnectivityDiagnosisRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceConnectivityDiagnosisRequest) GoString() string {
	return s.String()
}

func (s *GetDBInstanceConnectivityDiagnosisRequest) SetInstanceId(v string) *GetDBInstanceConnectivityDiagnosisRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisRequest) SetSrcIp(v string) *GetDBInstanceConnectivityDiagnosisRequest {
	s.SrcIp = &v
	return s
}

type GetDBInstanceConnectivityDiagnosisResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetDBInstanceConnectivityDiagnosisResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// > If the request was successful, **Successful*	- is returned. Otherwise, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDBInstanceConnectivityDiagnosisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceConnectivityDiagnosisResponseBody) GoString() string {
	return s.String()
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetCode(v string) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.Code = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetData(v *GetDBInstanceConnectivityDiagnosisResponseBodyData) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.Data = v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetMessage(v string) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.Message = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetRequestId(v string) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetSuccess(v string) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.Success = &v
	return s
}

type GetDBInstanceConnectivityDiagnosisResponseBodyData struct {
	// The exception detection items:
	//
	// 	- **SRC_IP_NOT_IN_USER_WHITELIST**: The source IP address is not added to the whitelist of the user.
	//
	// 	- **VIP_NOT_EXISTS**: The Application Load Balancer (ALB) instance corresponding to the virtual IP address (VIP) does not exist.
	//
	// 	- **RS_NOT_EXISTS**: The resource sharing (RS) is not properly mounted.
	//
	// 	- **VIP_TUNNEL_ID_NOT_CONSISTENT**: The tunnel ID used by the VIP of the virtual private cloud (VPC) type is different from the tunnel ID of the VPC.
	//
	// 	- **VIP_VPC_CLOUD_INSTANCE_NOT_EXISTS**: The VIP of the VPC type does not exist.
	//
	// 	- **VIP_IS_NOT_NGLB**: The NGLB mode is disabled for the VIP.
	//
	// 	- **CUSTINS_NOT_ASSOCIATE_ECS_SECURITY_GROUP**: No security group is associated with the instance.
	//
	// 	- **SRC_IP_NOT_IN_USER_WHITELIST**: The source IP address is not added to the whitelist of the user.
	//
	// 	- **SRC_IP_NOT_IN_ADMIN_WHITELIST**: The source IP address is not added to the whitelist of the instance.
	//
	// 	- **SRC_IP_NOT_IN_ECS_SECURITY_GROUP**: The source IP address is not added to the security group that is associated with the instance.
	//
	// 	- **VPC_INSTANCE_IP_NOT_WORKING_STATUS**: The IP address in the VPC is in an abnormal state.
	//
	// example:
	//
	// SRC_IP_NOT_IN_USER_WHITELIST
	ConnCheckErrorCode *string `json:"connCheckErrorCode,omitempty" xml:"connCheckErrorCode,omitempty"`
	// The details of the exception detection.
	//
	// example:
	//
	// Src ip:47.110.180.62 not in user whitelist
	ConnCheckErrorMessage *string `json:"connCheckErrorMessage,omitempty" xml:"connCheckErrorMessage,omitempty"`
	// The type of the exception:
	//
	// 	- **0**: an exception that can be handled by the user.
	//
	// 	- **1**: an exception that can be handled by a technical engineer.
	//
	// example:
	//
	// 0
	FailType *string `json:"failType,omitempty" xml:"failType,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// Indicates whether the connectivity test was passed:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetDBInstanceConnectivityDiagnosisResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceConnectivityDiagnosisResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetConnCheckErrorCode(v string) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.ConnCheckErrorCode = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetConnCheckErrorMessage(v string) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.ConnCheckErrorMessage = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetFailType(v string) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.FailType = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetInstanceId(v string) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetSuccess(v bool) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.Success = &v
	return s
}

type GetDBInstanceConnectivityDiagnosisResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDBInstanceConnectivityDiagnosisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDBInstanceConnectivityDiagnosisResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceConnectivityDiagnosisResponse) GoString() string {
	return s.String()
}

func (s *GetDBInstanceConnectivityDiagnosisResponse) SetHeaders(v map[string]*string) *GetDBInstanceConnectivityDiagnosisResponse {
	s.Headers = v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponse) SetStatusCode(v int32) *GetDBInstanceConnectivityDiagnosisResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponse) SetBody(v *GetDBInstanceConnectivityDiagnosisResponseBody) *GetDBInstanceConnectivityDiagnosisResponse {
	s.Body = v
	return s
}

type GetDasProServiceUsageRequest struct {
	// The database instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
	//
	// example:
	//
	// 196278346919****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetDasProServiceUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDasProServiceUsageRequest) GoString() string {
	return s.String()
}

func (s *GetDasProServiceUsageRequest) SetInstanceId(v string) *GetDasProServiceUsageRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDasProServiceUsageRequest) SetUserId(v string) *GetDasProServiceUsageRequest {
	s.UserId = &v
	return s
}

type GetDasProServiceUsageResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	//
	// example:
	//
	// {         "storageFreeQuotaInMB": 5120,         "ip": "rm-2ze8g2am97624****.mysql.****.com",         "custinsId": 12448331,         "userId": "196278346919****",         "uuid": "hdm_b0ae36343407609bf3e8df8709d8****",         "expireTime": 1924963200000,         "instanceId": "rm-2ze8g2am97624****",         "storageUsed": 10773752667393,         "engine": "MySQL",         "instanceAlias": "TESTDB01_PROD",         "port": 3310,         "vpcId": "hdm_****",         "commodityInstanceId": "daspro-****",         "startTime": 1606381940000,         "isSpare": false,         "region": "cn-shanghai",         "serviceUnitId": "5",         "sqlRetention": 30     }
	Data *GetDasProServiceUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7172BECE-588A-5961-8126-C216E16B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDasProServiceUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDasProServiceUsageResponseBody) GoString() string {
	return s.String()
}

func (s *GetDasProServiceUsageResponseBody) SetCode(v int64) *GetDasProServiceUsageResponseBody {
	s.Code = &v
	return s
}

func (s *GetDasProServiceUsageResponseBody) SetData(v *GetDasProServiceUsageResponseBodyData) *GetDasProServiceUsageResponseBody {
	s.Data = v
	return s
}

func (s *GetDasProServiceUsageResponseBody) SetMessage(v string) *GetDasProServiceUsageResponseBody {
	s.Message = &v
	return s
}

func (s *GetDasProServiceUsageResponseBody) SetRequestId(v string) *GetDasProServiceUsageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBody) SetSuccess(v bool) *GetDasProServiceUsageResponseBody {
	s.Success = &v
	return s
}

type GetDasProServiceUsageResponseBodyData struct {
	// The ID of the DAS Enterprise Edition instance.
	//
	// example:
	//
	// daspro-cn-v0h1l6i****
	CommodityInstanceId *string `json:"commodityInstanceId,omitempty" xml:"commodityInstanceId,omitempty"`
	// The type of the database engine.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// The point of time when DAS Enterprise Edition for the database instance expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1648742400000
	ExpireTime *int64 `json:"expireTime,omitempty" xml:"expireTime,omitempty"`
	// The name of the database instance.
	//
	// example:
	//
	// TESTDB01
	InstanceAlias *string `json:"instanceAlias,omitempty" xml:"instanceAlias,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// The endpoint of the database instance.
	//
	// example:
	//
	// rm-2ze8g2am97624****.mysql.****.com
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// Indicates whether DAS Enterprise Edition for the database instance has expired. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	IsSpare *bool `json:"isSpare,omitempty" xml:"isSpare,omitempty"`
	// The estimated remaining time for migrating the data generated by the SQL Explorer and Audit feature from the previous version to the new version. Unit: milliseconds.
	//
	// >  This parameter is returned only when the SQL Explorer and Audit feature is migrated from the previous version to the new version.
	//
	// example:
	//
	// 60000
	MigrationPredictRemainingTime *int64 `json:"migrationPredictRemainingTime,omitempty" xml:"migrationPredictRemainingTime,omitempty"`
	// The port number that is used to connect to the database instance.
	//
	// example:
	//
	// 3306
	Port *int32 `json:"port,omitempty" xml:"port,omitempty"`
	// The region in which the database instance resides.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// The service unit ID.
	//
	// example:
	//
	// 4
	ServiceUnitId *string `json:"serviceUnitId,omitempty" xml:"serviceUnitId,omitempty"`
	// The storage duration of SQL Explorer data. Unit: days.
	//
	// example:
	//
	// 180
	SqlRetention *string `json:"sqlRetention,omitempty" xml:"sqlRetention,omitempty"`
	// The time when DAS Enterprise Edition was enabled for the database instance. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1646100892000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// The SQL Explorer storage space that is offered free-of-charge. Unit: MB.
	//
	// example:
	//
	// 5120
	StorageFreeQuotaInMB *float64 `json:"storageFreeQuotaInMB,omitempty" xml:"storageFreeQuotaInMB,omitempty"`
	// The storage usage of SQL Explorer of the database instance. Unit: bytes.
	//
	// example:
	//
	// 35903498
	StorageUsed *int64 `json:"storageUsed,omitempty" xml:"storageUsed,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// example:
	//
	// 196278346919****
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
	// The virtual private cloud (VPC) ID.
	//
	// example:
	//
	// vpc-2zentqj1sk4qmolci****
	VpcId *string `json:"vpcId,omitempty" xml:"vpcId,omitempty"`
}

func (s GetDasProServiceUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDasProServiceUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDasProServiceUsageResponseBodyData) SetCommodityInstanceId(v string) *GetDasProServiceUsageResponseBodyData {
	s.CommodityInstanceId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetEngine(v string) *GetDasProServiceUsageResponseBodyData {
	s.Engine = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetExpireTime(v int64) *GetDasProServiceUsageResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetInstanceAlias(v string) *GetDasProServiceUsageResponseBodyData {
	s.InstanceAlias = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetInstanceId(v string) *GetDasProServiceUsageResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetIp(v string) *GetDasProServiceUsageResponseBodyData {
	s.Ip = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetIsSpare(v bool) *GetDasProServiceUsageResponseBodyData {
	s.IsSpare = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetMigrationPredictRemainingTime(v int64) *GetDasProServiceUsageResponseBodyData {
	s.MigrationPredictRemainingTime = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetPort(v int32) *GetDasProServiceUsageResponseBodyData {
	s.Port = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetRegion(v string) *GetDasProServiceUsageResponseBodyData {
	s.Region = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetServiceUnitId(v string) *GetDasProServiceUsageResponseBodyData {
	s.ServiceUnitId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetSqlRetention(v string) *GetDasProServiceUsageResponseBodyData {
	s.SqlRetention = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetStartTime(v int64) *GetDasProServiceUsageResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetStorageFreeQuotaInMB(v float64) *GetDasProServiceUsageResponseBodyData {
	s.StorageFreeQuotaInMB = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetStorageUsed(v int64) *GetDasProServiceUsageResponseBodyData {
	s.StorageUsed = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetUserId(v string) *GetDasProServiceUsageResponseBodyData {
	s.UserId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetVpcId(v string) *GetDasProServiceUsageResponseBodyData {
	s.VpcId = &v
	return s
}

type GetDasProServiceUsageResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDasProServiceUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDasProServiceUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDasProServiceUsageResponse) GoString() string {
	return s.String()
}

func (s *GetDasProServiceUsageResponse) SetHeaders(v map[string]*string) *GetDasProServiceUsageResponse {
	s.Headers = v
	return s
}

func (s *GetDasProServiceUsageResponse) SetStatusCode(v int32) *GetDasProServiceUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDasProServiceUsageResponse) SetBody(v *GetDasProServiceUsageResponseBody) *GetDasProServiceUsageResponse {
	s.Body = v
	return s
}

type GetDasSQLLogHotDataRequest struct {
	// The account of the database.
	//
	// >  You can specify multiple database accounts that are separated by spaces. Example: `user1 user2 user3`.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster.
	//
	// example:
	//
	// pi-bp179lg03445l****
	ChildDBInstanceIDs *string `json:"ChildDBInstanceIDs,omitempty" xml:"ChildDBInstanceIDs,omitempty"`
	// The name of the database.
	//
	// >  You can specify multiple database names that are separated by spaces. Example: `DB1 DB2 DB3`.
	//
	// example:
	//
	// testDB
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1684820697000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The error code of SQL execution. You can call the [GetAsyncErrorRequestStatByCode](https://help.aliyun.com/document_detail/409804.html) operation to query MySQL error codes in SQL Explorer data.
	//
	// example:
	//
	// 1064
	Fail *string `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// The IP address of the client.
	//
	// >  You can specify multiple IP addresses that are separated by spaces. Example: `IP1 IP2 IP3`.
	//
	// example:
	//
	// 47.100.XX.XX
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The ID of the database instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The logical relationship among multiple keywords.
	//
	// 	- **or**
	//
	// 	- **and**
	//
	// example:
	//
	// or
	LogicalOperator *string `json:"LogicalOperator,omitempty" xml:"LogicalOperator,omitempty"`
	// The maximum execution duration. Unit: microseconds. You can specify this parameter to query the SQL statements whose execution duration is smaller than the value of this parameter.
	//
	// example:
	//
	// 100
	MaxLatancy *int64 `json:"MaxLatancy,omitempty" xml:"MaxLatancy,omitempty"`
	// The maximum number of entries per page. Valid values: 5 to 100.
	//
	// example:
	//
	// 10
	MaxRecordsPerPage *int64 `json:"MaxRecordsPerPage,omitempty" xml:"MaxRecordsPerPage,omitempty"`
	// The reserved parameter. This parameter is not supported.
	//
	// example:
	//
	// None
	MaxRows *int64 `json:"MaxRows,omitempty" xml:"MaxRows,omitempty"`
	// The maximum number of scanned rows. You can specify this parameter to query the SQL statements that scan a smaller number of rows than the value of this parameter.
	//
	// example:
	//
	// 10000
	MaxScanRows *int64 `json:"MaxScanRows,omitempty" xml:"MaxScanRows,omitempty"`
	// The reserved parameter. This parameter is not supported.
	//
	// example:
	//
	// None
	MaxSpillCnt *int64 `json:"MaxSpillCnt,omitempty" xml:"MaxSpillCnt,omitempty"`
	// The minimum execution duration. Unit: microseconds. You can specify this parameter to query the SQL statements whose execution duration is greater than or equal to the value of this parameter.
	//
	// example:
	//
	// 10
	MinLatancy *int64 `json:"MinLatancy,omitempty" xml:"MinLatancy,omitempty"`
	// The reserved parameter. This parameter is not supported.
	//
	// example:
	//
	// None
	MinRows *int64 `json:"MinRows,omitempty" xml:"MinRows,omitempty"`
	// The minimum number of scanned rows. You can specify this parameter to query the SQL statements that scan a larger or an equal number of rows than the value of this parameter.
	//
	// example:
	//
	// 10
	MinScanRows *int64 `json:"MinScanRows,omitempty" xml:"MinScanRows,omitempty"`
	// The reserved parameter. This parameter is not supported.
	//
	// example:
	//
	// None
	MinSpillCnt *int64 `json:"MinSpillCnt,omitempty" xml:"MinSpillCnt,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 2
	PageNumbers *int64 `json:"PageNumbers,omitempty" xml:"PageNumbers,omitempty"`
	// The keyword that is used for the query.
	//
	// >  Fuzzy search is not supported. You can query data by using multiple keywords. Separate keywords with spaces.
	//
	// example:
	//
	// test
	QueryKeyword *string `json:"QueryKeyword,omitempty" xml:"QueryKeyword,omitempty"`
	// The reserved parameter. This parameter is not supported.
	//
	// example:
	//
	// None
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The basis on which you want to sort the query results.
	//
	// 	- **SCAN_ROWS**: the number of scanned rows.
	//
	// 	- **UPDATE_ROWS**: the number of updated rows.
	//
	// 	- **CONSUME**: the time consumed.
	//
	// 	- **ORIGIN_TIME**: the execution duration.
	//
	// example:
	//
	// SCAN_ROWS
	SortKey *string `json:"SortKey,omitempty" xml:"SortKey,omitempty"`
	// The order in which you want to sort the query results.
	//
	// 	- **ase**: ascending order.
	//
	// 	- **desc**: descending order.
	//
	// example:
	//
	// ase
	SortMethod *string `json:"SortMethod,omitempty" xml:"SortMethod,omitempty"`
	// The type of the SQL statement. Valid values:
	//
	// 	- **SELECT**
	//
	// 	- **UPDATE**
	//
	// 	- **DELETE**
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The beginning of the time range to query. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The beginning of the time range to query must be later than the time when DAS Enterprise Edition is enabled, and can be up to seven days earlier than the current time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1684734297000
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The execution results. You can specify **0*	- to query the SQL statements that are successfully executed. You can also specify an error code to query the corresponding SQL statements that fail to be executed.
	//
	// example:
	//
	// 0
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The thread ID.
	//
	// >  You can specify multiple thread IDs that are separated by spaces. Example: `Thread ID1 Thread ID2 Thread ID3`.
	//
	// example:
	//
	// 657
	ThreadID *string `json:"ThreadID,omitempty" xml:"ThreadID,omitempty"`
	// The reserved parameter. This parameter is not supported.
	//
	// example:
	//
	// None
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	// The transaction ID.
	//
	// example:
	//
	// 0
	TransactionId *string `json:"TransactionId,omitempty" xml:"TransactionId,omitempty"`
}

func (s GetDasSQLLogHotDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataRequest) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataRequest) SetAccountName(v string) *GetDasSQLLogHotDataRequest {
	s.AccountName = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetChildDBInstanceIDs(v string) *GetDasSQLLogHotDataRequest {
	s.ChildDBInstanceIDs = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetDBName(v string) *GetDasSQLLogHotDataRequest {
	s.DBName = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetEnd(v int64) *GetDasSQLLogHotDataRequest {
	s.End = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetFail(v string) *GetDasSQLLogHotDataRequest {
	s.Fail = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetHostAddress(v string) *GetDasSQLLogHotDataRequest {
	s.HostAddress = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetInstanceId(v string) *GetDasSQLLogHotDataRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetLogicalOperator(v string) *GetDasSQLLogHotDataRequest {
	s.LogicalOperator = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxLatancy(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxLatancy = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxRecordsPerPage(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxRecordsPerPage = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxRows(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxRows = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxScanRows(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxScanRows = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxSpillCnt(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxSpillCnt = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMinLatancy(v int64) *GetDasSQLLogHotDataRequest {
	s.MinLatancy = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMinRows(v int64) *GetDasSQLLogHotDataRequest {
	s.MinRows = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMinScanRows(v int64) *GetDasSQLLogHotDataRequest {
	s.MinScanRows = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMinSpillCnt(v int64) *GetDasSQLLogHotDataRequest {
	s.MinSpillCnt = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetPageNumbers(v int64) *GetDasSQLLogHotDataRequest {
	s.PageNumbers = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetQueryKeyword(v string) *GetDasSQLLogHotDataRequest {
	s.QueryKeyword = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetRole(v string) *GetDasSQLLogHotDataRequest {
	s.Role = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetSortKey(v string) *GetDasSQLLogHotDataRequest {
	s.SortKey = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetSortMethod(v string) *GetDasSQLLogHotDataRequest {
	s.SortMethod = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetSqlType(v string) *GetDasSQLLogHotDataRequest {
	s.SqlType = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetStart(v int64) *GetDasSQLLogHotDataRequest {
	s.Start = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetState(v string) *GetDasSQLLogHotDataRequest {
	s.State = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetThreadID(v string) *GetDasSQLLogHotDataRequest {
	s.ThreadID = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetTraceId(v string) *GetDasSQLLogHotDataRequest {
	s.TraceId = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetTransactionId(v string) *GetDasSQLLogHotDataRequest {
	s.TransactionId = &v
	return s
}

type GetDasSQLLogHotDataResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetDasSQLLogHotDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// > If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0A74B755-98B7-59DB-8724-1321B394****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDasSQLLogHotDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataResponseBody) SetCode(v string) *GetDasSQLLogHotDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBody) SetData(v *GetDasSQLLogHotDataResponseBodyData) *GetDasSQLLogHotDataResponseBody {
	s.Data = v
	return s
}

func (s *GetDasSQLLogHotDataResponseBody) SetMessage(v string) *GetDasSQLLogHotDataResponseBody {
	s.Message = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBody) SetRequestId(v string) *GetDasSQLLogHotDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBody) SetSuccess(v string) *GetDasSQLLogHotDataResponseBody {
	s.Success = &v
	return s
}

type GetDasSQLLogHotDataResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra interface{} `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The details of the data returned.
	List []*GetDasSQLLogHotDataResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 2
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 20
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetDasSQLLogHotDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetExtra(v interface{}) *GetDasSQLLogHotDataResponseBodyData {
	s.Extra = v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetList(v []*GetDasSQLLogHotDataResponseBodyDataList) *GetDasSQLLogHotDataResponseBodyData {
	s.List = v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetPageNo(v int64) *GetDasSQLLogHotDataResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetPageSize(v int64) *GetDasSQLLogHotDataResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetTotal(v int64) *GetDasSQLLogHotDataResponseBodyData {
	s.Total = &v
	return s
}

type GetDasSQLLogHotDataResponseBodyDataList struct {
	// The account of the database.
	//
	// example:
	//
	// testuser
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testDB
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The execution time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-05-23 T12:11:20Z
	ExecuteTime *string `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// The extended information. This parameter is a reserved parameter.
	//
	// example:
	//
	// None
	Ext *string `json:"Ext,omitempty" xml:"Ext,omitempty"`
	// The IP address of the client.
	//
	// example:
	//
	// 47.100.XX.XX
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The execution duration. Unit: microseconds.
	//
	// example:
	//
	// 10000
	Latancy *int64 `json:"Latancy,omitempty" xml:"Latancy,omitempty"`
	// The lock wait duration. Unit: microseconds.
	//
	// example:
	//
	// 1
	LockTime *int64 `json:"LockTime,omitempty" xml:"LockTime,omitempty"`
	// The number of logical reads.
	//
	// example:
	//
	// 12
	LogicRead *int64 `json:"LogicRead,omitempty" xml:"LogicRead,omitempty"`
	// The execution time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-05-23 T12:11:20.999Z
	OriginTime *string `json:"OriginTime,omitempty" xml:"OriginTime,omitempty"`
	// The number of physical asynchronous reads.
	//
	// example:
	//
	// 0
	PhysicAsyncRead *int64 `json:"PhysicAsyncRead,omitempty" xml:"PhysicAsyncRead,omitempty"`
	// The number of physical synchronous reads.
	//
	// example:
	//
	// 0
	PhysicSyncRead *int64 `json:"PhysicSyncRead,omitempty" xml:"PhysicSyncRead,omitempty"`
	// The number of rows returned.
	//
	// example:
	//
	// 1
	ReturnRows *int64 `json:"ReturnRows,omitempty" xml:"ReturnRows,omitempty"`
	// The content of the SQL statement.
	//
	// example:
	//
	// select 1
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// The number of rows scanned by the SQL statement.
	//
	// example:
	//
	// 29
	ScanRows *int64 `json:"ScanRows,omitempty" xml:"ScanRows,omitempty"`
	// The type of the SQL statement. Valid values:
	//
	// 	- **SELECT**
	//
	// 	- **UPDATE**
	//
	// 	- **DELETE**
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The execution result. If a **0*	- is returned, the SQL statement was successfully executed. If an error code is returned, the SQL statement failed to be executed.
	//
	// example:
	//
	// 0
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The thread ID.
	//
	// example:
	//
	// 657
	ThreadID *int64 `json:"ThreadID,omitempty" xml:"ThreadID,omitempty"`
	// The transaction ID.
	//
	// example:
	//
	// 0
	TransactionId *string `json:"TransactionId,omitempty" xml:"TransactionId,omitempty"`
	// The number of updated rows.
	//
	// example:
	//
	// 30
	UpdateRows *int64 `json:"UpdateRows,omitempty" xml:"UpdateRows,omitempty"`
}

func (s GetDasSQLLogHotDataResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetAccountName(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.AccountName = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetDBName(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.DBName = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetExecuteTime(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.ExecuteTime = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetExt(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.Ext = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetHostAddress(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.HostAddress = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetLatancy(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.Latancy = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetLockTime(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.LockTime = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetLogicRead(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.LogicRead = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetOriginTime(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.OriginTime = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetPhysicAsyncRead(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.PhysicAsyncRead = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetPhysicSyncRead(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.PhysicSyncRead = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetReturnRows(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.ReturnRows = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetSQLText(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.SQLText = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetScanRows(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.ScanRows = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetSqlType(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.SqlType = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetState(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.State = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetThreadID(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.ThreadID = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetTransactionId(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.TransactionId = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetUpdateRows(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.UpdateRows = &v
	return s
}

type GetDasSQLLogHotDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDasSQLLogHotDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDasSQLLogHotDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataResponse) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataResponse) SetHeaders(v map[string]*string) *GetDasSQLLogHotDataResponse {
	s.Headers = v
	return s
}

func (s *GetDasSQLLogHotDataResponse) SetStatusCode(v int32) *GetDasSQLLogHotDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDasSQLLogHotDataResponse) SetBody(v *GetDasSQLLogHotDataResponseBody) *GetDasSQLLogHotDataResponse {
	s.Body = v
	return s
}

type GetDeadLockDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// pc-bp1u5mas9exx7****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// pi-bp16v3824rt73****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// AUTO
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// a0e390cd5aca9ae964448f040153****
	TextId *string `json:"TextId,omitempty" xml:"TextId,omitempty"`
}

func (s GetDeadLockDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockDetailRequest) GoString() string {
	return s.String()
}

func (s *GetDeadLockDetailRequest) SetInstanceId(v string) *GetDeadLockDetailRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDeadLockDetailRequest) SetNodeId(v string) *GetDeadLockDetailRequest {
	s.NodeId = &v
	return s
}

func (s *GetDeadLockDetailRequest) SetSource(v string) *GetDeadLockDetailRequest {
	s.Source = &v
	return s
}

func (s *GetDeadLockDetailRequest) SetTextId(v string) *GetDeadLockDetailRequest {
	s.TextId = &v
	return s
}

type GetDeadLockDetailResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 9CB97BC4-6479-55D0-B9D0-EA925AFE****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// None
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s GetDeadLockDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeadLockDetailResponseBody) SetCode(v string) *GetDeadLockDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeadLockDetailResponseBody) SetData(v string) *GetDeadLockDetailResponseBody {
	s.Data = &v
	return s
}

func (s *GetDeadLockDetailResponseBody) SetMessage(v string) *GetDeadLockDetailResponseBody {
	s.Message = &v
	return s
}

func (s *GetDeadLockDetailResponseBody) SetRequestId(v string) *GetDeadLockDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeadLockDetailResponseBody) SetSuccess(v string) *GetDeadLockDetailResponseBody {
	s.Success = &v
	return s
}

func (s *GetDeadLockDetailResponseBody) SetSynchro(v string) *GetDeadLockDetailResponseBody {
	s.Synchro = &v
	return s
}

type GetDeadLockDetailResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDeadLockDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDeadLockDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockDetailResponse) GoString() string {
	return s.String()
}

func (s *GetDeadLockDetailResponse) SetHeaders(v map[string]*string) *GetDeadLockDetailResponse {
	s.Headers = v
	return s
}

func (s *GetDeadLockDetailResponse) SetStatusCode(v int32) *GetDeadLockDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDeadLockDetailResponse) SetBody(v *GetDeadLockDetailResponseBody) *GetDeadLockDetailResponse {
	s.Body = v
	return s
}

type GetDeadLockDetailListRequest struct {
	// The name of the database. When you specify multiple databases, you must separate the database names with commas (,).
	//
	// example:
	//
	// school1,school2
	DbNameList *string `json:"DbNameList,omitempty" xml:"DbNameList,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1702360530292
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the database instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze2016723b328gs2
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. The value must be an integer that is greater than 0. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 5
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1701755730292
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetDeadLockDetailListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockDetailListRequest) GoString() string {
	return s.String()
}

func (s *GetDeadLockDetailListRequest) SetDbNameList(v string) *GetDeadLockDetailListRequest {
	s.DbNameList = &v
	return s
}

func (s *GetDeadLockDetailListRequest) SetEndTime(v string) *GetDeadLockDetailListRequest {
	s.EndTime = &v
	return s
}

func (s *GetDeadLockDetailListRequest) SetInstanceId(v string) *GetDeadLockDetailListRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDeadLockDetailListRequest) SetPageNo(v string) *GetDeadLockDetailListRequest {
	s.PageNo = &v
	return s
}

func (s *GetDeadLockDetailListRequest) SetPageSize(v string) *GetDeadLockDetailListRequest {
	s.PageSize = &v
	return s
}

func (s *GetDeadLockDetailListRequest) SetStartTime(v string) *GetDeadLockDetailListRequest {
	s.StartTime = &v
	return s
}

type GetDeadLockDetailListResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetDeadLockDetailListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request is successful, **Successful*	- is returned. Otherwise, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 840F51F7-9C01-538D-94F6-AE712905****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDeadLockDetailListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockDetailListResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeadLockDetailListResponseBody) SetCode(v string) *GetDeadLockDetailListResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeadLockDetailListResponseBody) SetData(v *GetDeadLockDetailListResponseBodyData) *GetDeadLockDetailListResponseBody {
	s.Data = v
	return s
}

func (s *GetDeadLockDetailListResponseBody) SetMessage(v string) *GetDeadLockDetailListResponseBody {
	s.Message = &v
	return s
}

func (s *GetDeadLockDetailListResponseBody) SetRequestId(v string) *GetDeadLockDetailListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeadLockDetailListResponseBody) SetSuccess(v string) *GetDeadLockDetailListResponseBody {
	s.Success = &v
	return s
}

type GetDeadLockDetailListResponseBodyData struct {
	// The details of the data returned.
	List []*GetDeadLockDetailListResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetDeadLockDetailListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockDetailListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDeadLockDetailListResponseBodyData) SetList(v []*GetDeadLockDetailListResponseBodyDataList) *GetDeadLockDetailListResponseBodyData {
	s.List = v
	return s
}

func (s *GetDeadLockDetailListResponseBodyData) SetPageNo(v int64) *GetDeadLockDetailListResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyData) SetPageSize(v int64) *GetDeadLockDetailListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyData) SetTotal(v int64) *GetDeadLockDetailListResponseBodyData {
	s.Total = &v
	return s
}

type GetDeadLockDetailListResponseBodyDataList struct {
	// The time when the data was collected. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1702301170701
	BatchId *int64 `json:"BatchId,omitempty" xml:"BatchId,omitempty"`
	// The blocking details of the instance. The details are information about the session that caused the lock.
	BlockProcessList []*GetDeadLockDetailListResponseBodyDataListBlockProcessList `json:"BlockProcessList,omitempty" xml:"BlockProcessList,omitempty" type:"Repeated"`
	// The name of the client.
	//
	// example:
	//
	// Microsoft SQL Server Management Studio - Query
	ClientApp *string `json:"ClientApp,omitempty" xml:"ClientApp,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// school
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The hostname.
	//
	// example:
	//
	// sd74020124
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The time when the transaction was started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1702301141000
	LastTranStarted *int64 `json:"LastTranStarted,omitempty" xml:"LastTranStarted,omitempty"`
	// The mode of the lock. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
	//
	// example:
	//
	// U
	LockMode *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	// The size of the logs generated in the session. Unit: bytes.
	//
	// example:
	//
	// 352
	LogUsed *int64 `json:"LogUsed,omitempty" xml:"LogUsed,omitempty"`
	// The logon name of the user.
	//
	// example:
	//
	// sd74020124\\\\Administrator
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// The locked object.
	//
	// example:
	//
	// school.dbo.test1
	ObjectOwned *string `json:"ObjectOwned,omitempty" xml:"ObjectOwned,omitempty"`
	// The object that the transaction requested to lock.
	//
	// example:
	//
	// school.dbo.test2
	ObjectRequested *string `json:"ObjectRequested,omitempty" xml:"ObjectRequested,omitempty"`
	// The lock mode held by the session. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
	//
	// example:
	//
	// X
	OwnMode *string `json:"OwnMode,omitempty" xml:"OwnMode,omitempty"`
	// The ID of the session in which the transaction is started.
	//
	// example:
	//
	// 56
	Spid *int64 `json:"Spid,omitempty" xml:"Spid,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// update test2 set col1 =88
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The status of the transaction.
	//
	// example:
	//
	// suspended
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Indicates whether the session is the victim of the deadlock. Valid values:
	//
	// 	- **0**: no.
	//
	// 	- **1**: yes.
	//
	// example:
	//
	// 1
	Victim *int64 `json:"Victim,omitempty" xml:"Victim,omitempty"`
	// The lock mode requested by the session. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
	//
	// example:
	//
	// U
	WaitMode *string `json:"WaitMode,omitempty" xml:"WaitMode,omitempty"`
	// The resources requested by the transaction.
	//
	// example:
	//
	// RID: 5:1:376:0
	WaitResource *string `json:"WaitResource,omitempty" xml:"WaitResource,omitempty"`
	// The details of the resources requested by the transaction.
	//
	// example:
	//
	// RID:school:school.mdf:376:0
	WaitResourceDescription *string `json:"WaitResourceDescription,omitempty" xml:"WaitResourceDescription,omitempty"`
}

func (s GetDeadLockDetailListResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockDetailListResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetBatchId(v int64) *GetDeadLockDetailListResponseBodyDataList {
	s.BatchId = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetBlockProcessList(v []*GetDeadLockDetailListResponseBodyDataListBlockProcessList) *GetDeadLockDetailListResponseBodyDataList {
	s.BlockProcessList = v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetClientApp(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.ClientApp = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetDatabaseName(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.DatabaseName = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetHostName(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.HostName = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetLastTranStarted(v int64) *GetDeadLockDetailListResponseBodyDataList {
	s.LastTranStarted = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetLockMode(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.LockMode = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetLogUsed(v int64) *GetDeadLockDetailListResponseBodyDataList {
	s.LogUsed = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetLoginName(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.LoginName = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetObjectOwned(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.ObjectOwned = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetObjectRequested(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.ObjectRequested = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetOwnMode(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.OwnMode = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetSpid(v int64) *GetDeadLockDetailListResponseBodyDataList {
	s.Spid = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetSqlText(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.SqlText = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetStatus(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.Status = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetVictim(v int64) *GetDeadLockDetailListResponseBodyDataList {
	s.Victim = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetWaitMode(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.WaitMode = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetWaitResource(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.WaitResource = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataList) SetWaitResourceDescription(v string) *GetDeadLockDetailListResponseBodyDataList {
	s.WaitResourceDescription = &v
	return s
}

type GetDeadLockDetailListResponseBodyDataListBlockProcessList struct {
	// The name of the client that initiates the transaction in the session.
	//
	// example:
	//
	// Microsoft SQL Server Management Studio - Query
	ClientApp *string `json:"ClientApp,omitempty" xml:"ClientApp,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// school
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The hostname.
	//
	// example:
	//
	// sd74020124
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The time when the transaction was started. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1702301152000
	LastTranStarted *int64 `json:"LastTranStarted,omitempty" xml:"LastTranStarted,omitempty"`
	// The mode of the lock. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
	//
	// example:
	//
	// U
	LockMode *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	// The size of the logs generated in the session. Unit: bytes.
	//
	// example:
	//
	// 352
	LogUsed *int64 `json:"LogUsed,omitempty" xml:"LogUsed,omitempty"`
	// The logon name of the user.
	//
	// example:
	//
	// sd74020124\\\\Administrator
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// The locked object.
	//
	// example:
	//
	// school.dbo.test2
	ObjectOwned *string `json:"ObjectOwned,omitempty" xml:"ObjectOwned,omitempty"`
	// The object that the transaction requested to lock.
	//
	// example:
	//
	// school.dbo.test1
	ObjectRequested *string `json:"ObjectRequested,omitempty" xml:"ObjectRequested,omitempty"`
	// The lock mode held by the session. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
	//
	// example:
	//
	// X
	OwnMode *string `json:"OwnMode,omitempty" xml:"OwnMode,omitempty"`
	// The ID of the session in which the transaction is started.
	//
	// example:
	//
	// 61
	Spid *int64 `json:"Spid,omitempty" xml:"Spid,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// update test1 set col1 =9
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The status of the transaction.
	//
	// example:
	//
	// suspended
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Indicates whether the session is the victim of the deadlock. Valid values:
	//
	// 	- **0**: no.
	//
	// 	- **1**: yes.
	//
	// example:
	//
	// 0
	Victim *int64 `json:"Victim,omitempty" xml:"Victim,omitempty"`
	// The lock mode requested by the session. For more information, see [Lock modes](https://help.aliyun.com/document_detail/2362804.html).
	//
	// example:
	//
	// U
	WaitMode *string `json:"WaitMode,omitempty" xml:"WaitMode,omitempty"`
	// The resources requested by the transaction.
	//
	// example:
	//
	// RID: 5:1:312:0
	WaitResource *string `json:"WaitResource,omitempty" xml:"WaitResource,omitempty"`
	// The details of the resources requested by the transaction.
	//
	// example:
	//
	// RID:school:school.mdf:312:0
	WaitResourceDescription *string `json:"WaitResourceDescription,omitempty" xml:"WaitResourceDescription,omitempty"`
}

func (s GetDeadLockDetailListResponseBodyDataListBlockProcessList) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockDetailListResponseBodyDataListBlockProcessList) GoString() string {
	return s.String()
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetClientApp(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.ClientApp = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetDatabaseName(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.DatabaseName = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetHostName(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.HostName = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetLastTranStarted(v int64) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.LastTranStarted = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetLockMode(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.LockMode = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetLogUsed(v int64) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.LogUsed = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetLoginName(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.LoginName = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetObjectOwned(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.ObjectOwned = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetObjectRequested(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.ObjectRequested = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetOwnMode(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.OwnMode = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetSpid(v int64) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.Spid = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetSqlText(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.SqlText = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetStatus(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.Status = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetVictim(v int64) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.Victim = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetWaitMode(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.WaitMode = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetWaitResource(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.WaitResource = &v
	return s
}

func (s *GetDeadLockDetailListResponseBodyDataListBlockProcessList) SetWaitResourceDescription(v string) *GetDeadLockDetailListResponseBodyDataListBlockProcessList {
	s.WaitResourceDescription = &v
	return s
}

type GetDeadLockDetailListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDeadLockDetailListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDeadLockDetailListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockDetailListResponse) GoString() string {
	return s.String()
}

func (s *GetDeadLockDetailListResponse) SetHeaders(v map[string]*string) *GetDeadLockDetailListResponse {
	s.Headers = v
	return s
}

func (s *GetDeadLockDetailListResponse) SetStatusCode(v int32) *GetDeadLockDetailListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDeadLockDetailListResponse) SetBody(v *GetDeadLockDetailListResponseBody) *GetDeadLockDetailListResponse {
	s.Body = v
	return s
}

type GetDeadLockHistoryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1732069466000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// pc-bp1u5mas9exx7****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// pi-bp16v3824rt73****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// AUTO
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1731983066000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetDeadLockHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockHistoryRequest) GoString() string {
	return s.String()
}

func (s *GetDeadLockHistoryRequest) SetEndTime(v int64) *GetDeadLockHistoryRequest {
	s.EndTime = &v
	return s
}

func (s *GetDeadLockHistoryRequest) SetInstanceId(v string) *GetDeadLockHistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDeadLockHistoryRequest) SetNodeId(v string) *GetDeadLockHistoryRequest {
	s.NodeId = &v
	return s
}

func (s *GetDeadLockHistoryRequest) SetPageNo(v int32) *GetDeadLockHistoryRequest {
	s.PageNo = &v
	return s
}

func (s *GetDeadLockHistoryRequest) SetPageSize(v int32) *GetDeadLockHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *GetDeadLockHistoryRequest) SetSource(v string) *GetDeadLockHistoryRequest {
	s.Source = &v
	return s
}

func (s *GetDeadLockHistoryRequest) SetStartTime(v int64) *GetDeadLockHistoryRequest {
	s.StartTime = &v
	return s
}

type GetDeadLockHistoryResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// {
	//
	//     "total": 2,
	//
	//     "list": [
	//
	//         {
	//
	//             "accountId": "108************",
	//
	//             "textId": "35303d12d52d29ba73bb85fa2d5b****",
	//
	//             "gmtModified": 1732712680000,
	//
	//             "lockTime": 1732687047000,
	//
	//             "gmtCreate": 1732712680000,
	//
	//             "nodeId": "pi-8****************",
	//
	//             "uuid": "pc-8v**************"
	//
	//         },
	//
	//         {
	//
	//             "accountId": "108************",
	//
	//             "textId": "50a24bdcc5fe7e03f92a55ae7574****",
	//
	//             "gmtModified": 1732626448000,
	//
	//             "lockTime": 1722500305000,
	//
	//             "gmtCreate": 1732626448000,
	//
	//             "nodeId": "pi-8****************",
	//
	//             "uuid": "pc-8v**************"
	//
	//         }
	//
	//     ]
	//
	// }
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// None
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s GetDeadLockHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeadLockHistoryResponseBody) SetCode(v string) *GetDeadLockHistoryResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeadLockHistoryResponseBody) SetData(v string) *GetDeadLockHistoryResponseBody {
	s.Data = &v
	return s
}

func (s *GetDeadLockHistoryResponseBody) SetMessage(v string) *GetDeadLockHistoryResponseBody {
	s.Message = &v
	return s
}

func (s *GetDeadLockHistoryResponseBody) SetRequestId(v string) *GetDeadLockHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeadLockHistoryResponseBody) SetSuccess(v string) *GetDeadLockHistoryResponseBody {
	s.Success = &v
	return s
}

func (s *GetDeadLockHistoryResponseBody) SetSynchro(v string) *GetDeadLockHistoryResponseBody {
	s.Synchro = &v
	return s
}

type GetDeadLockHistoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDeadLockHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDeadLockHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeadLockHistoryResponse) GoString() string {
	return s.String()
}

func (s *GetDeadLockHistoryResponse) SetHeaders(v map[string]*string) *GetDeadLockHistoryResponse {
	s.Headers = v
	return s
}

func (s *GetDeadLockHistoryResponse) SetStatusCode(v int32) *GetDeadLockHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDeadLockHistoryResponse) SetBody(v *GetDeadLockHistoryResponseBody) *GetDeadLockHistoryResponse {
	s.Body = v
	return s
}

type GetDeadlockHistogramRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1732069466000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// pc-bp1u5mas9exx7****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// pi-bp16v3824rt73****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1731983066000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// SUCCESS
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDeadlockHistogramRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeadlockHistogramRequest) GoString() string {
	return s.String()
}

func (s *GetDeadlockHistogramRequest) SetEndTime(v int64) *GetDeadlockHistogramRequest {
	s.EndTime = &v
	return s
}

func (s *GetDeadlockHistogramRequest) SetInstanceId(v string) *GetDeadlockHistogramRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDeadlockHistogramRequest) SetNodeId(v string) *GetDeadlockHistogramRequest {
	s.NodeId = &v
	return s
}

func (s *GetDeadlockHistogramRequest) SetStartTime(v int64) *GetDeadlockHistogramRequest {
	s.StartTime = &v
	return s
}

func (s *GetDeadlockHistogramRequest) SetStatus(v string) *GetDeadlockHistogramRequest {
	s.Status = &v
	return s
}

type GetDeadlockHistogramResponseBody struct {
	// example:
	//
	// 200
	Code *int64                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*GetDeadlockHistogramResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 0A74B755-98B7-59DB-8724-1321B394****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDeadlockHistogramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeadlockHistogramResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeadlockHistogramResponseBody) SetCode(v int64) *GetDeadlockHistogramResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeadlockHistogramResponseBody) SetData(v []*GetDeadlockHistogramResponseBodyData) *GetDeadlockHistogramResponseBody {
	s.Data = v
	return s
}

func (s *GetDeadlockHistogramResponseBody) SetMessage(v string) *GetDeadlockHistogramResponseBody {
	s.Message = &v
	return s
}

func (s *GetDeadlockHistogramResponseBody) SetRequestId(v string) *GetDeadlockHistogramResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeadlockHistogramResponseBody) SetSuccess(v bool) *GetDeadlockHistogramResponseBody {
	s.Success = &v
	return s
}

type GetDeadlockHistogramResponseBodyData struct {
	// example:
	//
	// 1729998000000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// pc-bp1u5mas9exx7****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 2
	LockNumber *int32 `json:"LockNumber,omitempty" xml:"LockNumber,omitempty"`
	// example:
	//
	// pi-bp16v3824rt73****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// 1729994400000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// SUCCESS
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-1321B394****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 108************
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetDeadlockHistogramResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDeadlockHistogramResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDeadlockHistogramResponseBodyData) SetEndTime(v string) *GetDeadlockHistogramResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *GetDeadlockHistogramResponseBodyData) SetInstanceId(v string) *GetDeadlockHistogramResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetDeadlockHistogramResponseBodyData) SetLockNumber(v int32) *GetDeadlockHistogramResponseBodyData {
	s.LockNumber = &v
	return s
}

func (s *GetDeadlockHistogramResponseBodyData) SetNodeId(v string) *GetDeadlockHistogramResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetDeadlockHistogramResponseBodyData) SetStartTime(v string) *GetDeadlockHistogramResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *GetDeadlockHistogramResponseBodyData) SetStatus(v string) *GetDeadlockHistogramResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetDeadlockHistogramResponseBodyData) SetTaskId(v string) *GetDeadlockHistogramResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *GetDeadlockHistogramResponseBodyData) SetUserId(v string) *GetDeadlockHistogramResponseBodyData {
	s.UserId = &v
	return s
}

type GetDeadlockHistogramResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDeadlockHistogramResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDeadlockHistogramResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeadlockHistogramResponse) GoString() string {
	return s.String()
}

func (s *GetDeadlockHistogramResponse) SetHeaders(v map[string]*string) *GetDeadlockHistogramResponse {
	s.Headers = v
	return s
}

func (s *GetDeadlockHistogramResponse) SetStatusCode(v int32) *GetDeadlockHistogramResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDeadlockHistogramResponse) SetBody(v *GetDeadlockHistogramResponseBody) *GetDeadlockHistogramResponse {
	s.Body = v
	return s
}

type GetEndpointSwitchTaskRequest struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Uid       *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Context   *string `json:"__context,omitempty" xml:"__context,omitempty"`
	AccessKey *string `json:"accessKey,omitempty" xml:"accessKey,omitempty"`
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	SkipAuth  *string `json:"skipAuth,omitempty" xml:"skipAuth,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetEndpointSwitchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEndpointSwitchTaskRequest) GoString() string {
	return s.String()
}

func (s *GetEndpointSwitchTaskRequest) SetTaskId(v string) *GetEndpointSwitchTaskRequest {
	s.TaskId = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetUid(v string) *GetEndpointSwitchTaskRequest {
	s.Uid = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetUserId(v string) *GetEndpointSwitchTaskRequest {
	s.UserId = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetContext(v string) *GetEndpointSwitchTaskRequest {
	s.Context = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetAccessKey(v string) *GetEndpointSwitchTaskRequest {
	s.AccessKey = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetSignature(v string) *GetEndpointSwitchTaskRequest {
	s.Signature = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetSkipAuth(v string) *GetEndpointSwitchTaskRequest {
	s.SkipAuth = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetTimestamp(v string) *GetEndpointSwitchTaskRequest {
	s.Timestamp = &v
	return s
}

type GetEndpointSwitchTaskResponseBody struct {
	Code      *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetEndpointSwitchTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string                                `json:"Success,omitempty" xml:"Success,omitempty"`
	Synchro   *string                                `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s GetEndpointSwitchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEndpointSwitchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetEndpointSwitchTaskResponseBody) SetCode(v string) *GetEndpointSwitchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetData(v *GetEndpointSwitchTaskResponseBodyData) *GetEndpointSwitchTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetMessage(v string) *GetEndpointSwitchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetRequestId(v string) *GetEndpointSwitchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetSuccess(v string) *GetEndpointSwitchTaskResponseBody {
	s.Success = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetSynchro(v string) *GetEndpointSwitchTaskResponseBody {
	s.Synchro = &v
	return s
}

type GetEndpointSwitchTaskResponseBodyData struct {
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	DbLinkId  *int64  `json:"DbLinkId,omitempty" xml:"DbLinkId,omitempty"`
	ErrMsg    *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	OriUuid   *string `json:"OriUuid,omitempty" xml:"OriUuid,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Uuid      *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s GetEndpointSwitchTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEndpointSwitchTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetAccountId(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetDbLinkId(v int64) *GetEndpointSwitchTaskResponseBodyData {
	s.DbLinkId = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetErrMsg(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.ErrMsg = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetOriUuid(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.OriUuid = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetStatus(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetTaskId(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetUuid(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.Uuid = &v
	return s
}

type GetEndpointSwitchTaskResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEndpointSwitchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEndpointSwitchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEndpointSwitchTaskResponse) GoString() string {
	return s.String()
}

func (s *GetEndpointSwitchTaskResponse) SetHeaders(v map[string]*string) *GetEndpointSwitchTaskResponse {
	s.Headers = v
	return s
}

func (s *GetEndpointSwitchTaskResponse) SetStatusCode(v int32) *GetEndpointSwitchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEndpointSwitchTaskResponse) SetBody(v *GetEndpointSwitchTaskResponseBody) *GetEndpointSwitchTaskResponse {
	s.Body = v
	return s
}

type GetErrorRequestSampleRequest struct {
	// The name of the database.
	//
	// example:
	//
	// testdb01
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval cannot exceed 24 hours.
	//
	// example:
	//
	// 1642566830000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster.
	//
	// example:
	//
	// pi-bp179lg03445l****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The SQL query ID. You can call the [GetAsyncErrorRequestListByCode](https://help.aliyun.com/document_detail/410746.html) operation to query the ID of the SQL query for which MySQL error code is returned.
	//
	// example:
	//
	// 2cd4432556c3dab9d825ba363637****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer feature of the database instance, and can be up to 90 days earlier than the current time.
	//
	// example:
	//
	// 1642556990714
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetErrorRequestSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetErrorRequestSampleRequest) GoString() string {
	return s.String()
}

func (s *GetErrorRequestSampleRequest) SetDbName(v string) *GetErrorRequestSampleRequest {
	s.DbName = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetEnd(v int64) *GetErrorRequestSampleRequest {
	s.End = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetInstanceId(v string) *GetErrorRequestSampleRequest {
	s.InstanceId = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetNodeId(v string) *GetErrorRequestSampleRequest {
	s.NodeId = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetSqlId(v string) *GetErrorRequestSampleRequest {
	s.SqlId = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetStart(v int64) *GetErrorRequestSampleRequest {
	s.Start = &v
	return s
}

type GetErrorRequestSampleResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	//
	// example:
	//
	// [         {             "sqlId": "2cd4432556c3dab9d825ba363637****",             "database": "dbgateway",             "originHost": "172.16.1****",             "tables": [                 "meter_****"             ],             "instanceId": "rm-2ze8g2am97624****",             "errorCode": "1062",             "user": "dbgat****",             "sql": "insert into meter_****\\n        ( \\n        ****\\n     )\\n        values (now(), now(), \\"bbbc8624-5e19-455a-9714-8466f688****\\", \\"2022-02-10 14:00:00\\", \\"{\\"endTime\\":\\"2022-02-10 14:00:00\\",\\"endTimestamp\\":1644472800,\\"startTime\\":\\"2022-02-10 13:00:00\\",\\"startTimestamp\\":1644469200}\\", null, null)",             "timestamp": 1644476100435         }]
	Data []*GetErrorRequestSampleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7172BECE-588A-5961-8126-C216E16B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetErrorRequestSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetErrorRequestSampleResponseBody) GoString() string {
	return s.String()
}

func (s *GetErrorRequestSampleResponseBody) SetCode(v int64) *GetErrorRequestSampleResponseBody {
	s.Code = &v
	return s
}

func (s *GetErrorRequestSampleResponseBody) SetData(v []*GetErrorRequestSampleResponseBodyData) *GetErrorRequestSampleResponseBody {
	s.Data = v
	return s
}

func (s *GetErrorRequestSampleResponseBody) SetMessage(v string) *GetErrorRequestSampleResponseBody {
	s.Message = &v
	return s
}

func (s *GetErrorRequestSampleResponseBody) SetRequestId(v string) *GetErrorRequestSampleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetErrorRequestSampleResponseBody) SetSuccess(v bool) *GetErrorRequestSampleResponseBody {
	s.Success = &v
	return s
}

type GetErrorRequestSampleResponseBodyData struct {
	// The database name.
	//
	// example:
	//
	// dbgateway
	Database *string `json:"database,omitempty" xml:"database,omitempty"`
	// The error code that is returned.
	//
	// example:
	//
	// 1062
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// The IP address of the client that executes the SQL statement.
	//
	// example:
	//
	// 172.16.1****
	OriginHost *string `json:"originHost,omitempty" xml:"originHost,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// insert into meter_****
	Sql *string `json:"sql,omitempty" xml:"sql,omitempty"`
	// The SQL query ID.
	//
	// example:
	//
	// 2cd4432556c3dab9d825ba363637****
	SqlId *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
	// The table information.
	Tables []*string `json:"tables,omitempty" xml:"tables,omitempty" type:"Repeated"`
	// The time when the SQL query was executed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1644476100435
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// The username of the account that is used to log on to the database.
	//
	// example:
	//
	// dbgat****
	User *string `json:"user,omitempty" xml:"user,omitempty"`
}

func (s GetErrorRequestSampleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetErrorRequestSampleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetErrorRequestSampleResponseBodyData) SetDatabase(v string) *GetErrorRequestSampleResponseBodyData {
	s.Database = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetErrorCode(v string) *GetErrorRequestSampleResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetInstanceId(v string) *GetErrorRequestSampleResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetOriginHost(v string) *GetErrorRequestSampleResponseBodyData {
	s.OriginHost = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetSql(v string) *GetErrorRequestSampleResponseBodyData {
	s.Sql = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetSqlId(v string) *GetErrorRequestSampleResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetTables(v []*string) *GetErrorRequestSampleResponseBodyData {
	s.Tables = v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetTimestamp(v int64) *GetErrorRequestSampleResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetUser(v string) *GetErrorRequestSampleResponseBodyData {
	s.User = &v
	return s
}

type GetErrorRequestSampleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetErrorRequestSampleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetErrorRequestSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetErrorRequestSampleResponse) GoString() string {
	return s.String()
}

func (s *GetErrorRequestSampleResponse) SetHeaders(v map[string]*string) *GetErrorRequestSampleResponse {
	s.Headers = v
	return s
}

func (s *GetErrorRequestSampleResponse) SetStatusCode(v int32) *GetErrorRequestSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetErrorRequestSampleResponse) SetBody(v *GetErrorRequestSampleResponseBody) *GetErrorRequestSampleResponse {
	s.Body = v
	return s
}

type GetEventSubscriptionRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetEventSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionRequest) SetInstanceId(v string) *GetEventSubscriptionRequest {
	s.InstanceId = &v
	return s
}

type GetEventSubscriptionResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetEventSubscriptionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetEventSubscriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponseBody) SetCode(v string) *GetEventSubscriptionResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventSubscriptionResponseBody) SetData(v *GetEventSubscriptionResponseBodyData) *GetEventSubscriptionResponseBody {
	s.Data = v
	return s
}

func (s *GetEventSubscriptionResponseBody) SetMessage(v string) *GetEventSubscriptionResponseBody {
	s.Message = &v
	return s
}

func (s *GetEventSubscriptionResponseBody) SetRequestId(v string) *GetEventSubscriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventSubscriptionResponseBody) SetSuccess(v string) *GetEventSubscriptionResponseBody {
	s.Success = &v
	return s
}

type GetEventSubscriptionResponseBodyData struct {
	// Indicates whether the event subscription feature is enabled. Valid values:
	//
	// 	- **0**: The event subscription feature is disabled.
	//
	// 	- **1**: The event subscription feature is enabled.
	//
	// example:
	//
	// 1
	Active *int32 `json:"active,omitempty" xml:"active,omitempty"`
	// The notification method. Valid values:
	//
	// 	- **hdm_alarm_sms**: text message.
	//
	// 	- **dingtalk**: DingTalk chatbot.
	//
	// 	- **hdm_alarm_sms_and_email**: text message and email.
	//
	// 	- **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
	//
	// example:
	//
	// hdm_alarm_sms,dingtalk
	ChannelType *string `json:"channelType,omitempty" xml:"channelType,omitempty"`
	// The name of the contact group that receives alert notifications. Multiple names are separated by commas (,).
	//
	// example:
	//
	// Default contact group
	ContactGroupName *string `json:"contactGroupName,omitempty" xml:"contactGroupName,omitempty"`
	// The alert contact groups.
	ContactGroups []*GetEventSubscriptionResponseBodyDataContactGroups `json:"contactGroups,omitempty" xml:"contactGroups,omitempty" type:"Repeated"`
	// The name of the subscriber who receives alert notifications. Multiple names are separated by commas (,).
	//
	// example:
	//
	// Default contact
	ContactName *string `json:"contactName,omitempty" xml:"contactName,omitempty"`
	// The user ID.
	Contacts []*GetEventSubscriptionResponseBodyDataContacts `json:"contacts,omitempty" xml:"contacts,omitempty" type:"Repeated"`
	// The supported event scenarios. Only **AllContext*	- may be returned, which indicates that all scenarios are supported.
	//
	// example:
	//
	// AllContext
	EventContext *string `json:"eventContext,omitempty" xml:"eventContext,omitempty"`
	// The supported event scenarios in which event subscription can be sent.
	EventSendGroup []*string `json:"eventSendGroup,omitempty" xml:"eventSendGroup,omitempty" type:"Repeated"`
	// The time when event subscription was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1633071840000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// The time when the event subscription settings were most recently modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1633071850000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// The primary key ID of the database.
	//
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// The language of event notifications. Only **zh-CN*	- may be returned, which indicates that event notifications are sent in Chinese.
	//
	// example:
	//
	// zh_CN
	Lang *string `json:"lang,omitempty" xml:"lang,omitempty"`
	// The risk level of the events that trigger notifications. Valid values:
	//
	// 	- **Notice**
	//
	// 	- **Optimization**
	//
	// 	- **Warn**
	//
	// 	- **Critical**
	//
	// example:
	//
	// Optimization
	Level *string `json:"level,omitempty" xml:"level,omitempty"`
	// The minimum interval between event notifications. Unit: seconds.
	//
	// example:
	//
	// 60
	MinInterval *string `json:"minInterval,omitempty" xml:"minInterval,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1088760496****
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GetEventSubscriptionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponseBodyData) SetActive(v int32) *GetEventSubscriptionResponseBodyData {
	s.Active = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetChannelType(v string) *GetEventSubscriptionResponseBodyData {
	s.ChannelType = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetContactGroupName(v string) *GetEventSubscriptionResponseBodyData {
	s.ContactGroupName = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetContactGroups(v []*GetEventSubscriptionResponseBodyDataContactGroups) *GetEventSubscriptionResponseBodyData {
	s.ContactGroups = v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetContactName(v string) *GetEventSubscriptionResponseBodyData {
	s.ContactName = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetContacts(v []*GetEventSubscriptionResponseBodyDataContacts) *GetEventSubscriptionResponseBodyData {
	s.Contacts = v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetEventContext(v string) *GetEventSubscriptionResponseBodyData {
	s.EventContext = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetEventSendGroup(v []*string) *GetEventSubscriptionResponseBodyData {
	s.EventSendGroup = v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetGmtCreate(v int64) *GetEventSubscriptionResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetGmtModified(v int64) *GetEventSubscriptionResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetId(v int64) *GetEventSubscriptionResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetInstanceId(v string) *GetEventSubscriptionResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetLang(v string) *GetEventSubscriptionResponseBodyData {
	s.Lang = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetLevel(v string) *GetEventSubscriptionResponseBodyData {
	s.Level = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetMinInterval(v string) *GetEventSubscriptionResponseBodyData {
	s.MinInterval = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetUserId(v string) *GetEventSubscriptionResponseBodyData {
	s.UserId = &v
	return s
}

type GetEventSubscriptionResponseBodyDataContactGroups struct {
	// The members of the alert contact group.
	//
	// example:
	//
	// "[\\"Mr. Zhang\\",\\"Ms. Wang\\",\\"Mr. Li\\"]"
	Contacts *string `json:"contacts,omitempty" xml:"contacts,omitempty"`
	// The description of the alert contact group.
	//
	// example:
	//
	// Default contact
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// The name of the alert contact group.
	//
	// example:
	//
	// Mr. Zhang
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1088760496****
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GetEventSubscriptionResponseBodyDataContactGroups) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponseBodyDataContactGroups) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponseBodyDataContactGroups) SetContacts(v string) *GetEventSubscriptionResponseBodyDataContactGroups {
	s.Contacts = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContactGroups) SetDescription(v string) *GetEventSubscriptionResponseBodyDataContactGroups {
	s.Description = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContactGroups) SetName(v string) *GetEventSubscriptionResponseBodyDataContactGroups {
	s.Name = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContactGroups) SetUserId(v string) *GetEventSubscriptionResponseBodyDataContactGroups {
	s.UserId = &v
	return s
}

type GetEventSubscriptionResponseBodyDataContacts struct {
	// The webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=68fa29a9eaf3ba9994f54fxxxc1aa9879700308f90e9c23ebfb3663642c9****
	DingtalkHook *string `json:"dingtalkHook,omitempty" xml:"dingtalkHook,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// a***@example.net
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// The contact groups to which the alert contact belongs.
	Groups []*string `json:"groups,omitempty" xml:"groups,omitempty" type:"Repeated"`
	// Indicates whether the alert contact name is the same as the contact name on CloudMonitor.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsCmsReduplicated *bool `json:"isCmsReduplicated,omitempty" xml:"isCmsReduplicated,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// Mr. Zhang
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The mobile number of the alert contact.
	//
	// example:
	//
	// 1390000****
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1088760496****
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GetEventSubscriptionResponseBodyDataContacts) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponseBodyDataContacts) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetDingtalkHook(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.DingtalkHook = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetEmail(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.Email = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetGroups(v []*string) *GetEventSubscriptionResponseBodyDataContacts {
	s.Groups = v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetIsCmsReduplicated(v bool) *GetEventSubscriptionResponseBodyDataContacts {
	s.IsCmsReduplicated = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetName(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.Name = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetPhone(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.Phone = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetUserId(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.UserId = &v
	return s
}

type GetEventSubscriptionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventSubscriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponse) SetHeaders(v map[string]*string) *GetEventSubscriptionResponse {
	s.Headers = v
	return s
}

func (s *GetEventSubscriptionResponse) SetStatusCode(v int32) *GetEventSubscriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventSubscriptionResponse) SetBody(v *GetEventSubscriptionResponseBody) *GetEventSubscriptionResponse {
	s.Body = v
	return s
}

type GetFullRequestOriginStatByInstanceIdRequest struct {
	// Specifies whether to sort the results in ascending order. By default, the results are not sorted in ascending order.
	//
	// example:
	//
	// Disabled
	Asc *bool `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1644803409000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster.
	//
	// example:
	//
	// pi-bp12v7243x012****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The field by which the results to be returned are sorted. Default value: **count**. Valid values:
	//
	// 	- **count**: the number of executions.
	//
	// 	- **avgRt**: the average execution duration.
	//
	// 	- **rtRate**: the execution duration percentage.
	//
	// 	- **rowsExamined**: the total number of scanned rows.
	//
	// 	- **avgRowsExamined**: the average number of scanned rows.
	//
	// 	- **avgRowsReturned**: the average number of returned rows.
	//
	// example:
	//
	// count
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The role of the PolarDB-X 2.0 node. Valid values:
	//
	// 	- **polarx_cn**: compute node.
	//
	// 	- **polarx_en**: data node.
	//
	// example:
	//
	// polarx_cn
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The type of the SQL statement. Valid values: **SELECT**, **INSERT**, **UPDATE**, **DELETE**, **MERGE**, **ALTER**, **CREATEINDEX**, **DROPINDEX**, **CREATE**, **DROP**, **SET**, **DESC**, **REPLACE**, **CALL**, **BEGIN**, **DESCRIBE**, **ROLLBACK**, **FLUSH**, **USE**, **SHOW**, **START**, **COMMIT**, and **RENAME**.
	//
	// >  If the database instance is an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL instance, or a PolarDB-X 2.0 instance, statistics can be collected based on the SQL statement type.
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer of the database instance, and can be up to 90 days earlier than the current time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1644716649000
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
	//
	// example:
	//
	// 196278346919****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetFullRequestOriginStatByInstanceIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdRequest) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetAsc(v bool) *GetFullRequestOriginStatByInstanceIdRequest {
	s.Asc = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetEnd(v int64) *GetFullRequestOriginStatByInstanceIdRequest {
	s.End = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetInstanceId(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.InstanceId = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetNodeId(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.NodeId = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetOrderBy(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.OrderBy = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetPageNo(v int32) *GetFullRequestOriginStatByInstanceIdRequest {
	s.PageNo = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetPageSize(v int32) *GetFullRequestOriginStatByInstanceIdRequest {
	s.PageSize = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetRole(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.Role = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetSqlType(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.SqlType = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetStart(v int64) *GetFullRequestOriginStatByInstanceIdRequest {
	s.Start = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetUserId(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.UserId = &v
	return s
}

type GetFullRequestOriginStatByInstanceIdResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetFullRequestOriginStatByInstanceIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7172BECE-588A-5961-8126-C216E16B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFullRequestOriginStatByInstanceIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetCode(v int64) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetData(v *GetFullRequestOriginStatByInstanceIdResponseBodyData) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.Data = v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetMessage(v string) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetRequestId(v string) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetSuccess(v bool) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.Success = &v
	return s
}

type GetFullRequestOriginStatByInstanceIdResponseBodyData struct {
	// The details of the full request data.
	List []*GetFullRequestOriginStatByInstanceIdResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetFullRequestOriginStatByInstanceIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyData) SetList(v []*GetFullRequestOriginStatByInstanceIdResponseBodyDataList) *GetFullRequestOriginStatByInstanceIdResponseBodyData {
	s.List = v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyData) SetTotal(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyData {
	s.Total = &v
	return s
}

type GetFullRequestOriginStatByInstanceIdResponseBodyDataList struct {
	// The average number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	//
	// example:
	//
	// 10000
	AvgExaminedRows *float64 `json:"AvgExaminedRows,omitempty" xml:"AvgExaminedRows,omitempty"`
	// The average number of rows that are fetched from data nodes by compute nodes on the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 0
	AvgFetchRows *int64 `json:"AvgFetchRows,omitempty" xml:"AvgFetchRows,omitempty"`
	// The average lock wait duration. Unit: seconds.
	//
	// example:
	//
	// 0.00009589874265269765
	AvgLockWaitTime *float64 `json:"AvgLockWaitTime,omitempty" xml:"AvgLockWaitTime,omitempty"`
	// The average number of logical reads.
	//
	// example:
	//
	// 654.4470327860251
	AvgLogicalRead *float64 `json:"AvgLogicalRead,omitempty" xml:"AvgLogicalRead,omitempty"`
	// The average number of physical asynchronous reads.
	//
	// example:
	//
	// 0
	AvgPhysicalAsyncRead *int64 `json:"AvgPhysicalAsyncRead,omitempty" xml:"AvgPhysicalAsyncRead,omitempty"`
	// The average number of physical synchronous reads.
	//
	// example:
	//
	// 0
	AvgPhysicalSyncRead *float64 `json:"AvgPhysicalSyncRead,omitempty" xml:"AvgPhysicalSyncRead,omitempty"`
	// The average number of returned rows.
	//
	// example:
	//
	// 10000
	AvgReturnedRows *float64 `json:"AvgReturnedRows,omitempty" xml:"AvgReturnedRows,omitempty"`
	// The average number of rows.
	//
	// example:
	//
	// 0
	AvgRows *int64 `json:"AvgRows,omitempty" xml:"AvgRows,omitempty"`
	// The average execution duration.
	//
	// example:
	//
	// 2.499
	AvgRt *float64 `json:"AvgRt,omitempty" xml:"AvgRt,omitempty"`
	// The average number of SQL statements.
	//
	// example:
	//
	// 10000
	AvgSqlCount *int64 `json:"AvgSqlCount,omitempty" xml:"AvgSqlCount,omitempty"`
	// The average number of updated rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL and PolarDB-X 2.0 databases.
	//
	// example:
	//
	// 10000
	AvgUpdatedRows *float64 `json:"AvgUpdatedRows,omitempty" xml:"AvgUpdatedRows,omitempty"`
	// The total number of executions.
	//
	// example:
	//
	// 100000
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The percentage of the total number of executions.
	//
	// example:
	//
	// 0.0586
	CountRate *float64 `json:"CountRate,omitempty" xml:"CountRate,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// dbtest01
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The number of failed executions.
	//
	// example:
	//
	// 1
	ErrorCount *int64 `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	// The total number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	//
	// example:
	//
	// 10000
	ExaminedRows *int64 `json:"ExaminedRows,omitempty" xml:"ExaminedRows,omitempty"`
	// The number of rows that are fetched from data nodes by compute nodes on the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 200
	FetchRows *int64 `json:"FetchRows,omitempty" xml:"FetchRows,omitempty"`
	// The network address of the database instance.
	//
	// example:
	//
	// rm-uf6dyi58dm6****.mysql.rds.aliy****.com
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The IP address of the client that executes the SQL statement.
	//
	// example:
	//
	// 172.26.6****
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The lock wait duration. Unit: seconds.
	//
	// example:
	//
	// 1089.4177720290281
	LockWaitTime *float64 `json:"LockWaitTime,omitempty" xml:"LockWaitTime,omitempty"`
	// The number of logical reads.
	//
	// example:
	//
	// 7.434573266E9
	LogicalRead *int64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// The IP address of the client that executes the SQL statement.
	//
	// example:
	//
	// 172.26.6****
	OriginHost *string `json:"OriginHost,omitempty" xml:"OriginHost,omitempty"`
	// The number of physical asynchronous reads.
	//
	// example:
	//
	// 0
	PhysicalAsyncRead *int64 `json:"PhysicalAsyncRead,omitempty" xml:"PhysicalAsyncRead,omitempty"`
	// The number of physical synchronous reads.
	//
	// example:
	//
	// 0
	PhysicalSyncRead *int64 `json:"PhysicalSyncRead,omitempty" xml:"PhysicalSyncRead,omitempty"`
	// The port number that is used to connect to the database instance.
	//
	// example:
	//
	// 3306
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The total number of rows updated or returned by the compute nodes of the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 0
	Rows *int64 `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The number of SQL statements that take longer than 1 second to execute.
	//
	// example:
	//
	// 2
	RtGreaterThanOneSecondCount *int64 `json:"RtGreaterThanOneSecondCount,omitempty" xml:"RtGreaterThanOneSecondCount,omitempty"`
	// The execution duration percentage.
	//
	// example:
	//
	// 0.1384
	RtRate *float64 `json:"RtRate,omitempty" xml:"RtRate,omitempty"`
	// The number of SQL statements.
	//
	// example:
	//
	// 200
	SqlCount *int64 `json:"SqlCount,omitempty" xml:"SqlCount,omitempty"`
	// The total number of updated rows.
	//
	// example:
	//
	// 200
	SumUpdatedRows *int64 `json:"SumUpdatedRows,omitempty" xml:"SumUpdatedRows,omitempty"`
	// The version number.
	//
	// example:
	//
	// 1
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
	// The virtual private cloud (VPC) ID.
	//
	// example:
	//
	// vpc-2zentqj1sk4qmolci****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetFullRequestOriginStatByInstanceIdResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgExaminedRows(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgExaminedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgFetchRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgFetchRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgLockWaitTime(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgLockWaitTime = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgLogicalRead(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgLogicalRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgPhysicalAsyncRead(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgPhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgPhysicalSyncRead(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgPhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgReturnedRows(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgReturnedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgRt(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgRt = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgSqlCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgSqlCount = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgUpdatedRows(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgUpdatedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Count = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetCountRate(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.CountRate = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetDatabase(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Database = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetErrorCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.ErrorCount = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetExaminedRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.ExaminedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetFetchRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.FetchRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetIp(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Ip = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetKey(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Key = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetLockWaitTime(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.LockWaitTime = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetLogicalRead(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.LogicalRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetOriginHost(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.OriginHost = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetPhysicalAsyncRead(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.PhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetPhysicalSyncRead(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.PhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetPort(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Port = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Rows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetRtGreaterThanOneSecondCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.RtGreaterThanOneSecondCount = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetRtRate(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.RtRate = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetSqlCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.SqlCount = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetSumUpdatedRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.SumUpdatedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetVersion(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Version = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetVpcId(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.VpcId = &v
	return s
}

type GetFullRequestOriginStatByInstanceIdResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFullRequestOriginStatByInstanceIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFullRequestOriginStatByInstanceIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdResponse) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdResponse) SetHeaders(v map[string]*string) *GetFullRequestOriginStatByInstanceIdResponse {
	s.Headers = v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponse) SetStatusCode(v int32) *GetFullRequestOriginStatByInstanceIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponse) SetBody(v *GetFullRequestOriginStatByInstanceIdResponseBody) *GetFullRequestOriginStatByInstanceIdResponse {
	s.Body = v
	return s
}

type GetFullRequestSampleByInstanceIdRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time must be equal to or greater than 1 hour.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1660104621000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The role of the PolarDB-X 2.0 node. Valid values:
	//
	// 	- **polarx_cn**: compute node.
	//
	// 	- **polarx_en**: data node.
	//
	// example:
	//
	// polarx_cn
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The SQL statement ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 651b56fe9418d48edb8fdf0980ec****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer feature of the database instance, and can be up to 90 days earlier than the current time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1660097421000
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
	//
	// example:
	//
	// 196278346919****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetFullRequestSampleByInstanceIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestSampleByInstanceIdRequest) GoString() string {
	return s.String()
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetEnd(v int64) *GetFullRequestSampleByInstanceIdRequest {
	s.End = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetInstanceId(v string) *GetFullRequestSampleByInstanceIdRequest {
	s.InstanceId = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetRole(v string) *GetFullRequestSampleByInstanceIdRequest {
	s.Role = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetSqlId(v string) *GetFullRequestSampleByInstanceIdRequest {
	s.SqlId = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetStart(v int64) *GetFullRequestSampleByInstanceIdRequest {
	s.Start = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetUserId(v string) *GetFullRequestSampleByInstanceIdRequest {
	s.UserId = &v
	return s
}

type GetFullRequestSampleByInstanceIdResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data []*GetFullRequestSampleByInstanceIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0A74B755-98B7-59DB-8724-1321B394****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFullRequestSampleByInstanceIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestSampleByInstanceIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetCode(v int64) *GetFullRequestSampleByInstanceIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetData(v []*GetFullRequestSampleByInstanceIdResponseBodyData) *GetFullRequestSampleByInstanceIdResponseBody {
	s.Data = v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetMessage(v string) *GetFullRequestSampleByInstanceIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetRequestId(v string) *GetFullRequestSampleByInstanceIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetSuccess(v bool) *GetFullRequestSampleByInstanceIdResponseBody {
	s.Success = &v
	return s
}

type GetFullRequestSampleByInstanceIdResponseBodyData struct {
	// The name of the database.
	//
	// example:
	//
	// dbtest
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The number of rows fetched by PolarDB-X 2.0 compute nodes.
	//
	// example:
	//
	// 0
	Frows *int64 `json:"Frows,omitempty" xml:"Frows,omitempty"`
	// The lock wait duration. Unit: seconds.
	//
	// example:
	//
	// 0.0137
	LockWaitTime *float64 `json:"LockWaitTime,omitempty" xml:"LockWaitTime,omitempty"`
	// The number of logical reads.
	//
	// example:
	//
	// 165848
	LogicalRead *float64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// The source IP address.
	//
	// example:
	//
	// 172.17.XX.XX
	OriginHost *string `json:"OriginHost,omitempty" xml:"OriginHost,omitempty"`
	// The number of physical asynchronous reads.
	//
	// example:
	//
	// 0
	PhysicalAsyncRead *float64 `json:"PhysicalAsyncRead,omitempty" xml:"PhysicalAsyncRead,omitempty"`
	// The number of physical synchronous reads.
	//
	// example:
	//
	// 0
	PhysicalSyncRead *float64 `json:"PhysicalSyncRead,omitempty" xml:"PhysicalSyncRead,omitempty"`
	// The number of rows updated or returned on PolarDB-X 2.0 compute nodes.
	//
	// example:
	//
	// 0
	Rows *int64 `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The total number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	//
	// example:
	//
	// 2048576
	RowsExamined *int64 `json:"RowsExamined,omitempty" xml:"RowsExamined,omitempty"`
	// The number of rows returned by the SQL statement.
	//
	// example:
	//
	// 14
	RowsReturned *int64 `json:"RowsReturned,omitempty" xml:"RowsReturned,omitempty"`
	// The amount of time consumed to execute the SQL statement. Unit: seconds.
	//
	// example:
	//
	// 0.409789
	Rt *float64 `json:"Rt,omitempty" xml:"Rt,omitempty"`
	// The number of scanned rows.
	//
	// example:
	//
	// 0
	ScanRows *int64 `json:"ScanRows,omitempty" xml:"ScanRows,omitempty"`
	// The number of requests sent from PolarDB-X 2.0 compute nodes to data nodes.
	//
	// example:
	//
	// 0
	Scnt *int64 `json:"Scnt,omitempty" xml:"Scnt,omitempty"`
	// The sample SQL statement.
	//
	// example:
	//
	// select 	- from testdb01 where ****
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
	// The SQL statement ID.
	//
	// example:
	//
	// 651b56fe9418d48edb8fdf0980ec****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The type of the SQL statement. Valid values: **SELECT**, **INSERT**, **UPDATE**, **DELETE**, **LOGIN**, **LOGOUT**, **MERGE**, **ALTER**, **CREATEINDEX**, **DROPINDEX**, **CREATE**, **DROP**, **SET**, **DESC**, **REPLACE**, **CALL**, **BEGIN**, **DESCRIBE**, **ROLLBACK**, **FLUSH**, **USE**, **SHOW**, **START**, **COMMIT**, and **RENAME**.
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The time when the SQL statement was executed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1660100753556
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The number of updated rows.
	//
	// example:
	//
	// 0
	UpdateRows *int64 `json:"UpdateRows,omitempty" xml:"UpdateRows,omitempty"`
	// The name of the user who executes the SQL statement.
	//
	// example:
	//
	// testuser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetFullRequestSampleByInstanceIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestSampleByInstanceIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetDatabase(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Database = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetFrows(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Frows = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetLockWaitTime(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.LockWaitTime = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetLogicalRead(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.LogicalRead = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetOriginHost(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.OriginHost = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetPhysicalAsyncRead(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.PhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetPhysicalSyncRead(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.PhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetRows(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Rows = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetRowsExamined(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.RowsExamined = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetRowsReturned(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.RowsReturned = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetRt(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Rt = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetScanRows(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.ScanRows = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetScnt(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Scnt = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetSql(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Sql = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetSqlId(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetSqlType(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.SqlType = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetTimestamp(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetUpdateRows(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.UpdateRows = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetUser(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.User = &v
	return s
}

type GetFullRequestSampleByInstanceIdResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFullRequestSampleByInstanceIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFullRequestSampleByInstanceIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestSampleByInstanceIdResponse) GoString() string {
	return s.String()
}

func (s *GetFullRequestSampleByInstanceIdResponse) SetHeaders(v map[string]*string) *GetFullRequestSampleByInstanceIdResponse {
	s.Headers = v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponse) SetStatusCode(v int32) *GetFullRequestSampleByInstanceIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponse) SetBody(v *GetFullRequestSampleByInstanceIdResponseBody) *GetFullRequestSampleByInstanceIdResponse {
	s.Body = v
	return s
}

type GetFullRequestStatResultByInstanceIdRequest struct {
	// Specifies whether to sort the results in ascending order. By default, the results are not sorted in ascending order.
	//
	// example:
	//
	// Disabled
	Asc *bool `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// dbtest01
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval cannot exceed one day.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1645668213000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The keywords that are used for query.
	//
	// example:
	//
	// dbtest01
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The node ID.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster.
	//
	// example:
	//
	// pi-bp12v7243x012****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The field by which to sort the returned entries. Default value: **count**. Valid values:
	//
	// 	- **count**: the number of executions.
	//
	// 	- **avgRt**: the average execution duration.
	//
	// 	- **rtRate**: the execution duration percentage.
	//
	// 	- **rowsExamined**: the total number of scanned rows.
	//
	// 	- **avgRowsExamined**: the average number of scanned rows.
	//
	// 	- **avgRowsReturned**: the average number of returned rows.
	//
	// example:
	//
	// count
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The IP address of the client that executes the SQL statement.
	//
	// >  This parameter is optional. If this parameter is specified, the full request statistics of the specified IP address are collected. If this parameter is left empty, the full request statistics of the entire database instance are collected.
	//
	// example:
	//
	// 172.26.XX.XXX
	OriginHost *string `json:"OriginHost,omitempty" xml:"OriginHost,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The role of the node in the PolarDB-X 2.0 instance. Valid values:
	//
	// 	- **polarx_cn**: compute node.
	//
	// 	- **polarx_dn**: data node.
	//
	// example:
	//
	// polarx_cn
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The SQL ID.
	//
	// >  If this parameter is specified, the full request statistics of the specified SQL query are collected. If this parameter is left empty, the full request statistics of the entire database instance are collected.
	//
	// example:
	//
	// d71f82be1eef72bd105128204d2e****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The type of the SQL statement. Valid values: **SELECT**, **INSERT**, **UPDATE**, **DELETE**, **LOGIN**, **LOGOUT**, **MERGE**, **ALTER**, **CREATEINDEX**, **DROPINDEX**, **CREATE**, **DROP**, **SET**, **DESC**, **REPLACE**, **CALL**, **BEGIN**, **DESCRIBE**, **ROLLBACK**, **FLUSH**, **USE**, **SHOW**, **START**, **COMMIT**, and **RENAME**.
	//
	// >  If your database instance is an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, or a PolarDB-X 2.0 instance, the statistics can be collected based on the SQL statement type.
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time can be up to 90 days earlier than the current time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1645581813000
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The ID of the Alibaba Cloud account that was used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the Alibaba Cloud account ID based on the value of InstanceId when you call the GetFullRequestOriginStatByInstanceId operation.
	//
	// example:
	//
	// 196278346919****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdRequest) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetAsc(v bool) *GetFullRequestStatResultByInstanceIdRequest {
	s.Asc = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetDbName(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.DbName = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetEnd(v int64) *GetFullRequestStatResultByInstanceIdRequest {
	s.End = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetInstanceId(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.InstanceId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetKeyword(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.Keyword = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetNodeId(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.NodeId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetOrderBy(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.OrderBy = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetOriginHost(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.OriginHost = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetPageNo(v int32) *GetFullRequestStatResultByInstanceIdRequest {
	s.PageNo = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetPageSize(v int32) *GetFullRequestStatResultByInstanceIdRequest {
	s.PageSize = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetRole(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.Role = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetSqlId(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.SqlId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetSqlType(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.SqlType = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetStart(v int64) *GetFullRequestStatResultByInstanceIdRequest {
	s.Start = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetUserId(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.UserId = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetFullRequestStatResultByInstanceIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7172BECE-588A-5961-8126-C216E16B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetCode(v int64) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetData(v *GetFullRequestStatResultByInstanceIdResponseBodyData) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.Data = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetMessage(v string) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetRequestId(v string) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetSuccess(v bool) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.Success = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponseBodyData struct {
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Fail *bool `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// The returned full request data.
	Result *GetFullRequestStatResultByInstanceIdResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 9CB97BC4-6479-55D0-B9D0-EA925AFE****
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// 	- **RUNNING**
	//
	// 	- **SUCCESS**
	//
	// 	- **FAIL**
	//
	// example:
	//
	// SUCCESS
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The time when the asynchronous request was sent. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1645668213000
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetFail(v bool) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetIsFinish(v bool) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetResult(v *GetFullRequestStatResultByInstanceIdResponseBodyDataResult) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.Result = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetResultId(v string) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetState(v string) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.State = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetTimestamp(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponseBodyDataResult struct {
	// The full request data.
	List []*GetFullRequestStatResultByInstanceIdResponseBodyDataResultList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResult) SetList(v []*GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) *GetFullRequestStatResultByInstanceIdResponseBodyDataResult {
	s.List = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResult) SetTotal(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResult {
	s.Total = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponseBodyDataResultList struct {
	// The average number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	//
	// example:
	//
	// 10000
	AvgExaminedRows *float64 `json:"AvgExaminedRows,omitempty" xml:"AvgExaminedRows,omitempty"`
	// The average number of rows that are fetched by compute nodes from data nodes on the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 0
	AvgFetchRows *int64 `json:"AvgFetchRows,omitempty" xml:"AvgFetchRows,omitempty"`
	// The average lock wait latency. Unit: seconds.
	//
	// example:
	//
	// 0.00009589874265269765
	AvgLockWaitTime *float64 `json:"AvgLockWaitTime,omitempty" xml:"AvgLockWaitTime,omitempty"`
	// The average number of logical reads.
	//
	// example:
	//
	// 654.4470327860251
	AvgLogicalRead *float64 `json:"AvgLogicalRead,omitempty" xml:"AvgLogicalRead,omitempty"`
	// The average number of physical asynchronous reads.
	//
	// example:
	//
	// 0
	AvgPhysicalAsyncRead *int64 `json:"AvgPhysicalAsyncRead,omitempty" xml:"AvgPhysicalAsyncRead,omitempty"`
	// The average number of physical synchronous reads.
	//
	// example:
	//
	// 0
	AvgPhysicalSyncRead *int64 `json:"AvgPhysicalSyncRead,omitempty" xml:"AvgPhysicalSyncRead,omitempty"`
	// The average number of returned rows.
	//
	// example:
	//
	// 10000
	AvgReturnedRows *float64 `json:"AvgReturnedRows,omitempty" xml:"AvgReturnedRows,omitempty"`
	// The average execution duration.
	//
	// example:
	//
	// 2.499
	AvgRt *float64 `json:"AvgRt,omitempty" xml:"AvgRt,omitempty"`
	// The average number of SQL statements.
	//
	// example:
	//
	// 10000
	AvgSqlCount *int64 `json:"AvgSqlCount,omitempty" xml:"AvgSqlCount,omitempty"`
	// The average number of updated rows.
	//
	//  > This parameter is returned only for ApsaraDB RDS for MySQL and PolarDB-X 2.0 databases.
	//
	// example:
	//
	// 10000
	AvgUpdatedRows *int64 `json:"AvgUpdatedRows,omitempty" xml:"AvgUpdatedRows,omitempty"`
	// The total number of executions.
	//
	// example:
	//
	// 100000
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The percentage of the total number of executions.
	//
	// example:
	//
	// 0.0586
	CountRate *float64 `json:"CountRate,omitempty" xml:"CountRate,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// dbtest01
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The number of failed executions.
	//
	// example:
	//
	// 1
	ErrorCount *int64 `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	// The total number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	//
	// example:
	//
	// 10000
	ExaminedRows *int64 `json:"ExaminedRows,omitempty" xml:"ExaminedRows,omitempty"`
	// The number of rows that are fetched by compute nodes from data nodes on the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 0
	FetchRows *int64 `json:"FetchRows,omitempty" xml:"FetchRows,omitempty"`
	// The IP address of the database instance.
	//
	// example:
	//
	// rm-uf6dyi58dm6****.mysql.rds.aliy****.com
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The lock wait latency. Unit: seconds.
	//
	// example:
	//
	// 1089.4177720290281
	LockWaitTime *float64 `json:"LockWaitTime,omitempty" xml:"LockWaitTime,omitempty"`
	// The number of logical reads.
	//
	// example:
	//
	// 7.434573266E9
	LogicalRead *int64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// The number of physical asynchronous reads.
	//
	// example:
	//
	// 0
	PhysicalAsyncRead *int64 `json:"PhysicalAsyncRead,omitempty" xml:"PhysicalAsyncRead,omitempty"`
	// The number of physical synchronous reads.
	//
	// example:
	//
	// 0
	PhysicalSyncRead *int64 `json:"PhysicalSyncRead,omitempty" xml:"PhysicalSyncRead,omitempty"`
	// The port number that is used to connect to the database instance.
	//
	// example:
	//
	// 3306
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The SQL template.
	//
	// example:
	//
	// select 	- from dbtest01 where ****
	Psql *string `json:"Psql,omitempty" xml:"Psql,omitempty"`
	// The total number of rows updated or returned by the compute nodes of the PolarDB-X 2.0 instance.
	//
	// example:
	//
	// 0
	Rows *int64 `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The number of SQL statements that take longer than 1 second to execute.
	//
	// example:
	//
	// 20
	RtGreaterThanOneSecondCount *int64 `json:"RtGreaterThanOneSecondCount,omitempty" xml:"RtGreaterThanOneSecondCount,omitempty"`
	// The execution duration percentage.
	//
	// example:
	//
	// 2.499
	RtRate *float64 `json:"RtRate,omitempty" xml:"RtRate,omitempty"`
	// The number of SQL statements.
	//
	// example:
	//
	// 200
	SqlCount *int64 `json:"SqlCount,omitempty" xml:"SqlCount,omitempty"`
	// The SQL ID.
	//
	// example:
	//
	// d71f82be1eef72bd105128204d2e****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The total number of updated rows.
	//
	// example:
	//
	// 100
	SumUpdatedRows *int64 `json:"SumUpdatedRows,omitempty" xml:"SumUpdatedRows,omitempty"`
	// The names of tables in the database.
	Tables []*string `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The version number.
	//
	// example:
	//
	// 1
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
	// The virtual private cloud (VPC) ID.
	//
	// example:
	//
	// vpc-2zentqj1sk4qmolci****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgExaminedRows(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgExaminedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgFetchRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgFetchRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgLockWaitTime(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgLockWaitTime = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgLogicalRead(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgLogicalRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgPhysicalAsyncRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgPhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgPhysicalSyncRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgPhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgReturnedRows(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgReturnedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgRt(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgRt = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgSqlCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgSqlCount = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgUpdatedRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgUpdatedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Count = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetCountRate(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.CountRate = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetDatabase(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Database = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetErrorCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.ErrorCount = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetExaminedRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.ExaminedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetFetchRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.FetchRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetIp(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Ip = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetLockWaitTime(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.LockWaitTime = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetLogicalRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.LogicalRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetPhysicalAsyncRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.PhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetPhysicalSyncRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.PhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetPort(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Port = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetPsql(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Psql = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Rows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetRtGreaterThanOneSecondCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.RtGreaterThanOneSecondCount = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetRtRate(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.RtRate = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetSqlCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.SqlCount = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetSqlId(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.SqlId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetSumUpdatedRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.SumUpdatedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetTables(v []*string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Tables = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetVersion(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Version = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetVpcId(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.VpcId = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFullRequestStatResultByInstanceIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponse) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponse) SetHeaders(v map[string]*string) *GetFullRequestStatResultByInstanceIdResponse {
	s.Headers = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponse) SetStatusCode(v int32) *GetFullRequestStatResultByInstanceIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponse) SetBody(v *GetFullRequestStatResultByInstanceIdResponseBody) *GetFullRequestStatResultByInstanceIdResponse {
	s.Body = v
	return s
}

type GetHDMAliyunResourceSyncResultRequest struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Uid       *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Context   *string `json:"__context,omitempty" xml:"__context,omitempty"`
	AccessKey *string `json:"accessKey,omitempty" xml:"accessKey,omitempty"`
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	SkipAuth  *string `json:"skipAuth,omitempty" xml:"skipAuth,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetHDMAliyunResourceSyncResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultRequest) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetTaskId(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.TaskId = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetUid(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.Uid = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetUserId(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.UserId = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetContext(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.Context = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetAccessKey(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.AccessKey = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetSignature(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.Signature = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetSkipAuth(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.SkipAuth = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetTimestamp(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.Timestamp = &v
	return s
}

type GetHDMAliyunResourceSyncResultResponseBody struct {
	Code      *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetHDMAliyunResourceSyncResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string                                         `json:"Success,omitempty" xml:"Success,omitempty"`
	Synchro   *string                                         `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s GetHDMAliyunResourceSyncResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetCode(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetData(v *GetHDMAliyunResourceSyncResultResponseBodyData) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Data = v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetMessage(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetRequestId(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetSuccess(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Success = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetSynchro(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Synchro = &v
	return s
}

type GetHDMAliyunResourceSyncResultResponseBodyData struct {
	ErrorMsg   *string                                                   `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	Results    *string                                                   `json:"Results,omitempty" xml:"Results,omitempty"`
	SubResults *GetHDMAliyunResourceSyncResultResponseBodyDataSubResults `json:"SubResults,omitempty" xml:"SubResults,omitempty" type:"Struct"`
	SyncStatus *string                                                   `json:"SyncStatus,omitempty" xml:"SyncStatus,omitempty"`
}

func (s GetHDMAliyunResourceSyncResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyData) SetErrorMsg(v string) *GetHDMAliyunResourceSyncResultResponseBodyData {
	s.ErrorMsg = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyData) SetResults(v string) *GetHDMAliyunResourceSyncResultResponseBodyData {
	s.Results = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyData) SetSubResults(v *GetHDMAliyunResourceSyncResultResponseBodyDataSubResults) *GetHDMAliyunResourceSyncResultResponseBodyData {
	s.SubResults = v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyData) SetSyncStatus(v string) *GetHDMAliyunResourceSyncResultResponseBodyData {
	s.SyncStatus = &v
	return s
}

type GetHDMAliyunResourceSyncResultResponseBodyDataSubResults struct {
	ResourceSyncSubResult []*GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult `json:"ResourceSyncSubResult,omitempty" xml:"ResourceSyncSubResult,omitempty" type:"Repeated"`
}

func (s GetHDMAliyunResourceSyncResultResponseBodyDataSubResults) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponseBodyDataSubResults) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResults) SetResourceSyncSubResult(v []*GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResults {
	s.ResourceSyncSubResult = v
	return s
}

type GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult struct {
	ErrMsg       *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	SyncCount    *int32  `json:"SyncCount,omitempty" xml:"SyncCount,omitempty"`
}

func (s GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetErrMsg(v string) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.ErrMsg = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetResourceType(v string) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.ResourceType = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetSuccess(v bool) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.Success = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetSyncCount(v int32) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.SyncCount = &v
	return s
}

type GetHDMAliyunResourceSyncResultResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHDMAliyunResourceSyncResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHDMAliyunResourceSyncResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponse) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponse) SetHeaders(v map[string]*string) *GetHDMAliyunResourceSyncResultResponse {
	s.Headers = v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponse) SetStatusCode(v int32) *GetHDMAliyunResourceSyncResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponse) SetBody(v *GetHDMAliyunResourceSyncResultResponseBody) *GetHDMAliyunResourceSyncResultResponse {
	s.Body = v
	return s
}

type GetHDMLastAliyunResourceSyncResultRequest struct {
	Uid       *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Context   *string `json:"__context,omitempty" xml:"__context,omitempty"`
	AccessKey *string `json:"accessKey,omitempty" xml:"accessKey,omitempty"`
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	SkipAuth  *string `json:"skipAuth,omitempty" xml:"skipAuth,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetHDMLastAliyunResourceSyncResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultRequest) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetUid(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.Uid = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetUserId(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.UserId = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetContext(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.Context = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetAccessKey(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.AccessKey = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetSignature(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.Signature = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetSkipAuth(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.SkipAuth = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetTimestamp(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.Timestamp = &v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponseBody struct {
	Code      *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetHDMLastAliyunResourceSyncResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	Synchro   *string                                             `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s GetHDMLastAliyunResourceSyncResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetCode(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetData(v *GetHDMLastAliyunResourceSyncResultResponseBodyData) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Data = v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetMessage(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetRequestId(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetSuccess(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Success = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetSynchro(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Synchro = &v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponseBodyData struct {
	ErrorMsg   *string                                                       `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	Results    *string                                                       `json:"Results,omitempty" xml:"Results,omitempty"`
	SubResults *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults `json:"SubResults,omitempty" xml:"SubResults,omitempty" type:"Struct"`
	SyncStatus *string                                                       `json:"SyncStatus,omitempty" xml:"SyncStatus,omitempty"`
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyData) SetErrorMsg(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyData {
	s.ErrorMsg = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyData) SetResults(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyData {
	s.Results = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyData) SetSubResults(v *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults) *GetHDMLastAliyunResourceSyncResultResponseBodyData {
	s.SubResults = v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyData) SetSyncStatus(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyData {
	s.SyncStatus = &v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults struct {
	ResourceSyncSubResult []*GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult `json:"ResourceSyncSubResult,omitempty" xml:"ResourceSyncSubResult,omitempty" type:"Repeated"`
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults) SetResourceSyncSubResult(v []*GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults {
	s.ResourceSyncSubResult = v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult struct {
	ErrMsg       *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	SyncCount    *int32  `json:"SyncCount,omitempty" xml:"SyncCount,omitempty"`
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetErrMsg(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.ErrMsg = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetResourceType(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.ResourceType = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetSuccess(v bool) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.Success = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetSyncCount(v int32) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.SyncCount = &v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHDMLastAliyunResourceSyncResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHDMLastAliyunResourceSyncResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponse) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponse) SetHeaders(v map[string]*string) *GetHDMLastAliyunResourceSyncResultResponse {
	s.Headers = v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponse) SetStatusCode(v int32) *GetHDMLastAliyunResourceSyncResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponse) SetBody(v *GetHDMLastAliyunResourceSyncResultResponseBody) *GetHDMLastAliyunResourceSyncResultResponse {
	s.Body = v
	return s
}

type GetInstanceInspectionsRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1655427625000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Redis**
	//
	// 	- **PolarDBMySQL**
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The type of the instance on which the database is deployed. Valid values:
	//
	// 	- **RDS**: an Alibaba Cloud database instance.
	//
	// 	- **ECS**: an ECS instance on which a self-managed database is deployed.
	//
	// 	- **IDC**: a self-managed database instance that is not deployed on Alibaba Cloud.
	//
	// >  The value IDC specifies that the instance is deployed in a data center.
	//
	// This parameter is required.
	//
	// example:
	//
	// RDS
	InstanceArea *string `json:"InstanceArea,omitempty" xml:"InstanceArea,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// rg-aek2eil6npi****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The filter condition, which can be specified in one of the following formats:
	//
	// 	- Specify the ID of a single instance in the {"InstanceId":"Instance ID"} format.
	//
	// 	- Specify the IDs of multiple instances in the {"InstanceIds":["Instance ID1","Instance ID2"]} format. Separate the instance IDs with commas (,).
	//
	// 	- Specify the region in which the instance resides in the {"region":"Region of the instance"} format.
	//
	// example:
	//
	// {"InstanceId":"rm-bp10usoc1erj7****"}
	SearchMap *string `json:"SearchMap,omitempty" xml:"SearchMap,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1655416825000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetInstanceInspectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsRequest) SetEndTime(v string) *GetInstanceInspectionsRequest {
	s.EndTime = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetEngine(v string) *GetInstanceInspectionsRequest {
	s.Engine = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetInstanceArea(v string) *GetInstanceInspectionsRequest {
	s.InstanceArea = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetPageNo(v string) *GetInstanceInspectionsRequest {
	s.PageNo = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetPageSize(v string) *GetInstanceInspectionsRequest {
	s.PageSize = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetResourceGroupId(v string) *GetInstanceInspectionsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetSearchMap(v string) *GetInstanceInspectionsRequest {
	s.SearchMap = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetStartTime(v string) *GetInstanceInspectionsRequest {
	s.StartTime = &v
	return s
}

type GetInstanceInspectionsResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details.
	Data *GetInstanceInspectionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceInspectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBody) SetCode(v string) *GetInstanceInspectionsResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceInspectionsResponseBody) SetData(v *GetInstanceInspectionsResponseBodyData) *GetInstanceInspectionsResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceInspectionsResponseBody) SetMessage(v string) *GetInstanceInspectionsResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceInspectionsResponseBody) SetRequestId(v string) *GetInstanceInspectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceInspectionsResponseBody) SetSuccess(v string) *GetInstanceInspectionsResponseBody {
	s.Success = &v
	return s
}

type GetInstanceInspectionsResponseBodyData struct {
	// The detailed information.
	List []*GetInstanceInspectionsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number. The value returned is a positive integer. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 4
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetInstanceInspectionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBodyData) SetList(v []*GetInstanceInspectionsResponseBodyDataList) *GetInstanceInspectionsResponseBodyData {
	s.List = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyData) SetPageNo(v int64) *GetInstanceInspectionsResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyData) SetPageSize(v int64) *GetInstanceInspectionsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyData) SetTotal(v int64) *GetInstanceInspectionsResponseBodyData {
	s.Total = &v
	return s
}

type GetInstanceInspectionsResponseBodyDataList struct {
	// Indicates whether the autonomy service is enabled.
	AutoFunction *GetInstanceInspectionsResponseBodyDataListAutoFunction `json:"AutoFunction,omitempty" xml:"AutoFunction,omitempty" type:"Struct"`
	// The data returned.
	//
	// example:
	//
	// "data": { "hasDeadLock": false, "exceptionTableMap": {}, "bigTransactionCount": 0, "cpu": 4, "isRds": true, "rdsEnable": true, "enable": false, "activeSessions": [], "bigTransactionList": [], "bigSessionList": [ { "blockDuration": 0, "active": false, "Time": 0, "db": "" },
	Data map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// Indicates whether DAS Enterprise Edition is enabled. Valid values:
	//
	// 	- **0**: disabled.
	//
	// 	- **1**: enabled.
	//
	// 	- **2**: not supported.
	//
	// example:
	//
	// 0
	EnableDasPro *int32 `json:"EnableDasPro,omitempty" xml:"EnableDasPro,omitempty"`
	// The end time of the inspection and scoring task. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	//
	// example:
	//
	// 1608888296001
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The time when the task was created. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1603247192000
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The information about the instance.
	Instance *GetInstanceInspectionsResponseBodyDataListInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Struct"`
	// The inspection score of the instance.
	//
	// example:
	//
	// 100
	Score *int32 `json:"Score,omitempty" xml:"Score,omitempty"`
	// The scores that are deducted for the instance.
	ScoreMap map[string]interface{} `json:"ScoreMap,omitempty" xml:"ScoreMap,omitempty"`
	// The start time of the inspection and scoring task. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1608888296000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The state of the inspection and scoring task. Valid values:
	//
	// 	- **0**: The task is waiting for execution.
	//
	// 	- **1**: The task is in progress.
	//
	// 	- **2**: The task is complete.
	//
	// example:
	//
	// 2
	State *int32 `json:"State,omitempty" xml:"State,omitempty"`
	// The mode in which the inspection and scoring task was initiated. Valid values:
	//
	// 	- **0**: automatic mode.
	//
	// 	- **1**: manual mode.
	//
	// example:
	//
	// 0
	TaskType *int32 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetInstanceInspectionsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetAutoFunction(v *GetInstanceInspectionsResponseBodyDataListAutoFunction) *GetInstanceInspectionsResponseBodyDataList {
	s.AutoFunction = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetData(v map[string]interface{}) *GetInstanceInspectionsResponseBodyDataList {
	s.Data = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetEnableDasPro(v int32) *GetInstanceInspectionsResponseBodyDataList {
	s.EnableDasPro = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetEndTime(v int64) *GetInstanceInspectionsResponseBodyDataList {
	s.EndTime = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetGmtCreate(v int64) *GetInstanceInspectionsResponseBodyDataList {
	s.GmtCreate = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetInstance(v *GetInstanceInspectionsResponseBodyDataListInstance) *GetInstanceInspectionsResponseBodyDataList {
	s.Instance = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetScore(v int32) *GetInstanceInspectionsResponseBodyDataList {
	s.Score = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetScoreMap(v map[string]interface{}) *GetInstanceInspectionsResponseBodyDataList {
	s.ScoreMap = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetStartTime(v int64) *GetInstanceInspectionsResponseBodyDataList {
	s.StartTime = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetState(v int32) *GetInstanceInspectionsResponseBodyDataList {
	s.State = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetTaskType(v int32) *GetInstanceInspectionsResponseBodyDataList {
	s.TaskType = &v
	return s
}

type GetInstanceInspectionsResponseBodyDataListAutoFunction struct {
	// Indicates whether the feature of automatically creating and deleting indexes is enabled. Valid values:
	//
	// 	- **0**: disabled.
	//
	// 	- **1**: enabled.
	//
	// 	- **2**: not supported.
	//
	// example:
	//
	// 2
	AutoIndex *int32 `json:"AutoIndex,omitempty" xml:"AutoIndex,omitempty"`
	// Indicates whether the automatic throttling feature is enabled. Valid values:
	//
	// 	- **0**: disabled.
	//
	// 	- **1**: enabled.
	//
	// 	- **2**: not supported.
	//
	// example:
	//
	// 2
	AutoLimitedSql *int32 `json:"AutoLimitedSql,omitempty" xml:"AutoLimitedSql,omitempty"`
	// Indicates whether the automatic fragment recycling feature is enabled. Valid values:
	//
	// 	- **0**: disabled.
	//
	// 	- **1**: enabled.
	//
	// 	- **2**: not supported.
	//
	// example:
	//
	// 0
	AutoResourceOptimize *int32 `json:"AutoResourceOptimize,omitempty" xml:"AutoResourceOptimize,omitempty"`
	// Indicates whether the auto scaling feature is enabled. Valid values:
	//
	// 	- **0**: disabled.
	//
	// 	- **1**: enabled.
	//
	// 	- **2**: not supported.
	//
	// example:
	//
	// 0
	AutoScale *int32 `json:"AutoScale,omitempty" xml:"AutoScale,omitempty"`
	// Indicates whether the event subscription feature is enabled. Valid values:
	//
	// 	- **0**: disabled.
	//
	// 	- **1**: enabled.
	//
	// 	- **2**: not supported.
	//
	// example:
	//
	// 0
	EventSubscription *int32 `json:"EventSubscription,omitempty" xml:"EventSubscription,omitempty"`
}

func (s GetInstanceInspectionsResponseBodyDataListAutoFunction) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBodyDataListAutoFunction) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetAutoIndex(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.AutoIndex = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetAutoLimitedSql(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.AutoLimitedSql = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetAutoResourceOptimize(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.AutoResourceOptimize = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetAutoScale(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.AutoScale = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetEventSubscription(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.EventSubscription = &v
	return s
}

type GetInstanceInspectionsResponseBodyDataListInstance struct {
	// The account ID. You can view the ID of the logon account by moving the pointer over the profile in the Alibaba Cloud management console.
	//
	// example:
	//
	// 108398049688****
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The connection mode of the instance. Valid values:
	//
	// 	- **standard**: standard mode.
	//
	// 	- **safe**: database proxy mode.
	//
	// example:
	//
	// standard
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The CPU specification of the instance. For example, if a value of 8 is returned, the instance has eight CPU cores.
	//
	// example:
	//
	// 8
	Cpu *string `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **Redis**
	//
	// 	- **PolarDBMySQL**
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The version number of the database engine.
	//
	// example:
	//
	// 8.0
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	// The instance name.
	//
	// example:
	//
	// test-01
	InstanceAlias *string `json:"InstanceAlias,omitempty" xml:"InstanceAlias,omitempty"`
	// The type of the instance on which the database is deployed. Valid values:
	//
	// 	- **RDS**: an Alibaba Cloud database instance.
	//
	// 	- **ECS**: an Elastic Compute Service (ECS) instance on which a self-managed database is deployed.
	//
	// 	- **IDC**: a self-managed database instance that is not deployed on Alibaba Cloud.
	//
	// >  The value IDC indicates that the instance is deployed in a data center.
	//
	// example:
	//
	// RDS
	InstanceArea *string `json:"InstanceArea,omitempty" xml:"InstanceArea,omitempty"`
	// The instance type.
	//
	// example:
	//
	// rds.mysql.s2.xlarge
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-bp10usoc1erj7****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The memory capacity of the database that is deployed on the instance. Unit: MB.
	//
	// example:
	//
	// 32768
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The network type of the instance.
	//
	// example:
	//
	// VPC
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	// The ID of the node on the instance.
	//
	// example:
	//
	// rm-bp10usoc1erj7****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The storage space of the instance. Unit: GB.
	//
	// example:
	//
	// 150
	Storage *int32 `json:"Storage,omitempty" xml:"Storage,omitempty"`
	// The unique identifier of the instance.
	//
	// example:
	//
	// hdm_3063db6792965c080a4bcb6e6304****
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The ID of the virtual private cloud (VPC) in which the instance is deployed.
	//
	// example:
	//
	// vpc-bp1knt7m55z9exoo7****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetInstanceInspectionsResponseBodyDataListInstance) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBodyDataListInstance) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetAccountId(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.AccountId = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetCategory(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Category = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetCpu(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Cpu = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetEngine(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Engine = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetEngineVersion(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.EngineVersion = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetInstanceAlias(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.InstanceAlias = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetInstanceArea(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.InstanceArea = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetInstanceClass(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.InstanceClass = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetInstanceId(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetMemory(v int32) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Memory = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetNetworkType(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.NetworkType = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetNodeId(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.NodeId = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetRegion(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Region = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetStorage(v int32) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Storage = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetUuid(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Uuid = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetVpcId(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.VpcId = &v
	return s
}

type GetInstanceInspectionsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceInspectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceInspectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponse) SetHeaders(v map[string]*string) *GetInstanceInspectionsResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceInspectionsResponse) SetStatusCode(v int32) *GetInstanceInspectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceInspectionsResponse) SetBody(v *GetInstanceInspectionsResponseBody) *GetInstanceInspectionsResponse {
	s.Body = v
	return s
}

type GetInstanceMissingIndexListRequest struct {
	// The query condition based on the average cost savings.
	//
	// example:
	//
	// <=|8
	AvgTotalUserCost *string `json:"AvgTotalUserCost,omitempty" xml:"AvgTotalUserCost,omitempty"`
	// The query condition based on the performance improvement.
	//
	// example:
	//
	// >|10000
	AvgUserImpact *string `json:"AvgUserImpact,omitempty" xml:"AvgUserImpact,omitempty"`
	// The end time of the last seek.
	//
	// example:
	//
	// 1681869544000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The query condition based on the number of indexes.
	//
	// example:
	//
	// >=|8
	IndexCount *string `json:"IndexCount,omitempty" xml:"IndexCount,omitempty"`
	// The database instance ID.
	//
	// >  Only ApsaraDB RDS for SQL Server instances are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-************
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The object name.
	//
	// example:
	//
	// bas_customer
	ObjectName *string `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The query condition based on the total number of pages.
	//
	// example:
	//
	// >=|100
	ReservedPages *string `json:"ReservedPages,omitempty" xml:"ReservedPages,omitempty"`
	// The query condition based on the table size.
	//
	// example:
	//
	// >=|100
	ReservedSize *string `json:"ReservedSize,omitempty" xml:"ReservedSize,omitempty"`
	// The query condition based on the number of table rows.
	//
	// example:
	//
	// >=|100000
	RowCount *string `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// The start time of the last seek.
	//
	// example:
	//
	// 1679414400000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The query condition based on the number of compilations.
	//
	// example:
	//
	// >=|10000
	UniqueCompiles *string `json:"UniqueCompiles,omitempty" xml:"UniqueCompiles,omitempty"`
	// The query condition based on the number of scans.
	//
	// example:
	//
	// >=|10000
	UserScans *string `json:"UserScans,omitempty" xml:"UserScans,omitempty"`
	// The query condition based on the number of seeks.
	//
	// example:
	//
	// >=|1000
	UserSeeks *string `json:"UserSeeks,omitempty" xml:"UserSeeks,omitempty"`
}

func (s GetInstanceMissingIndexListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceMissingIndexListRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceMissingIndexListRequest) SetAvgTotalUserCost(v string) *GetInstanceMissingIndexListRequest {
	s.AvgTotalUserCost = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetAvgUserImpact(v string) *GetInstanceMissingIndexListRequest {
	s.AvgUserImpact = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetEndTime(v string) *GetInstanceMissingIndexListRequest {
	s.EndTime = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetIndexCount(v string) *GetInstanceMissingIndexListRequest {
	s.IndexCount = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetInstanceId(v string) *GetInstanceMissingIndexListRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetObjectName(v string) *GetInstanceMissingIndexListRequest {
	s.ObjectName = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetPageNo(v string) *GetInstanceMissingIndexListRequest {
	s.PageNo = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetPageSize(v string) *GetInstanceMissingIndexListRequest {
	s.PageSize = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetReservedPages(v string) *GetInstanceMissingIndexListRequest {
	s.ReservedPages = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetReservedSize(v string) *GetInstanceMissingIndexListRequest {
	s.ReservedSize = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetRowCount(v string) *GetInstanceMissingIndexListRequest {
	s.RowCount = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetStartTime(v string) *GetInstanceMissingIndexListRequest {
	s.StartTime = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetUniqueCompiles(v string) *GetInstanceMissingIndexListRequest {
	s.UniqueCompiles = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetUserScans(v string) *GetInstanceMissingIndexListRequest {
	s.UserScans = &v
	return s
}

func (s *GetInstanceMissingIndexListRequest) SetUserSeeks(v string) *GetInstanceMissingIndexListRequest {
	s.UserSeeks = &v
	return s
}

type GetInstanceMissingIndexListResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetInstanceMissingIndexListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0A74B755-98B7-59DB-8724-1321B394****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceMissingIndexListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceMissingIndexListResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceMissingIndexListResponseBody) SetCode(v string) *GetInstanceMissingIndexListResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBody) SetData(v *GetInstanceMissingIndexListResponseBodyData) *GetInstanceMissingIndexListResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceMissingIndexListResponseBody) SetMessage(v string) *GetInstanceMissingIndexListResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBody) SetRequestId(v string) *GetInstanceMissingIndexListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBody) SetSuccess(v string) *GetInstanceMissingIndexListResponseBody {
	s.Success = &v
	return s
}

type GetInstanceMissingIndexListResponseBodyData struct {
	// The returned data.
	List []*GetInstanceMissingIndexListResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number of the page returned.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 16
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetInstanceMissingIndexListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceMissingIndexListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInstanceMissingIndexListResponseBodyData) SetList(v []*GetInstanceMissingIndexListResponseBodyDataList) *GetInstanceMissingIndexListResponseBodyData {
	s.List = v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyData) SetPageNo(v int64) *GetInstanceMissingIndexListResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyData) SetPageSize(v int64) *GetInstanceMissingIndexListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyData) SetTotal(v int64) *GetInstanceMissingIndexListResponseBodyData {
	s.Total = &v
	return s
}

type GetInstanceMissingIndexListResponseBodyDataList struct {
	// The average cost savings.
	//
	// example:
	//
	// 4.67
	AvgTotalUserCost *float64 `json:"AvgTotalUserCost,omitempty" xml:"AvgTotalUserCost,omitempty"`
	// The performance improvement, in percentage.
	//
	// example:
	//
	// 98.3
	AvgUserImpact *float64 `json:"AvgUserImpact,omitempty" xml:"AvgUserImpact,omitempty"`
	// The statement used to create the missing indexes.
	//
	// example:
	//
	// CREATE INDEX [IX_CLOUDDBA_school_dbo_stu@col1_@col2] ON [school].[dbo].[stu]([col1],[col2],[col3]) INCLUDE ([col4],[col5]) WITH (FILLFACTOR = 90, ONLINE = OFF);
	CreateIndex *string `json:"CreateIndex,omitempty" xml:"CreateIndex,omitempty"`
	// The database name.
	//
	// example:
	//
	// school
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The index columns included in the equal operation.
	//
	// example:
	//
	// col1,col2,col3
	EqualityColumns *string `json:"EqualityColumns,omitempty" xml:"EqualityColumns,omitempty"`
	// The columns on which indexes are missing.
	//
	// example:
	//
	// col3,col4
	IncludedColumns *string `json:"IncludedColumns,omitempty" xml:"IncludedColumns,omitempty"`
	// The number of indexes.
	//
	// example:
	//
	// 1
	IndexCount *int64 `json:"IndexCount,omitempty" xml:"IndexCount,omitempty"`
	// The index columns included in the not equal operation.
	//
	// example:
	//
	// 2392
	InequalityColumns *string `json:"InequalityColumns,omitempty" xml:"InequalityColumns,omitempty"`
	// The last seek time of a user.
	//
	// example:
	//
	// 1702023327000
	LastUserSeek *int64 `json:"LastUserSeek,omitempty" xml:"LastUserSeek,omitempty"`
	// The object name.
	//
	// example:
	//
	// stu
	ObjectName *string `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
	// The total number of returned pages.
	//
	// example:
	//
	// 5025
	ReservedPages *int64 `json:"ReservedPages,omitempty" xml:"ReservedPages,omitempty"`
	// The table size.
	//
	// example:
	//
	// 39.26
	ReservedSize *float64 `json:"ReservedSize,omitempty" xml:"ReservedSize,omitempty"`
	// The number of table rows.
	//
	// example:
	//
	// 226945
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// The schema name.
	//
	// example:
	//
	// dbo
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The number of scans.
	//
	// example:
	//
	// 0
	SystemScans *int64 `json:"SystemScans,omitempty" xml:"SystemScans,omitempty"`
	// The number of seeks.
	//
	// example:
	//
	// 0
	SystemSeeks *int64 `json:"SystemSeeks,omitempty" xml:"SystemSeeks,omitempty"`
	// The number of compilations.
	//
	// example:
	//
	// 2392
	UniqueCompiles *int64 `json:"UniqueCompiles,omitempty" xml:"UniqueCompiles,omitempty"`
	// The number of scans performed by users.
	//
	// example:
	//
	// 0
	UserScans *int64 `json:"UserScans,omitempty" xml:"UserScans,omitempty"`
	// The number of seeks performed by users.
	//
	// example:
	//
	// 1081
	UserSeeks *int64 `json:"UserSeeks,omitempty" xml:"UserSeeks,omitempty"`
}

func (s GetInstanceMissingIndexListResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceMissingIndexListResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetAvgTotalUserCost(v float64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.AvgTotalUserCost = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetAvgUserImpact(v float64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.AvgUserImpact = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetCreateIndex(v string) *GetInstanceMissingIndexListResponseBodyDataList {
	s.CreateIndex = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetDatabaseName(v string) *GetInstanceMissingIndexListResponseBodyDataList {
	s.DatabaseName = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetEqualityColumns(v string) *GetInstanceMissingIndexListResponseBodyDataList {
	s.EqualityColumns = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetIncludedColumns(v string) *GetInstanceMissingIndexListResponseBodyDataList {
	s.IncludedColumns = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetIndexCount(v int64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.IndexCount = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetInequalityColumns(v string) *GetInstanceMissingIndexListResponseBodyDataList {
	s.InequalityColumns = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetLastUserSeek(v int64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.LastUserSeek = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetObjectName(v string) *GetInstanceMissingIndexListResponseBodyDataList {
	s.ObjectName = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetReservedPages(v int64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.ReservedPages = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetReservedSize(v float64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.ReservedSize = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetRowCount(v int64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.RowCount = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetSchemaName(v string) *GetInstanceMissingIndexListResponseBodyDataList {
	s.SchemaName = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetSystemScans(v int64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.SystemScans = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetSystemSeeks(v int64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.SystemSeeks = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetUniqueCompiles(v int64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.UniqueCompiles = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetUserScans(v int64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.UserScans = &v
	return s
}

func (s *GetInstanceMissingIndexListResponseBodyDataList) SetUserSeeks(v int64) *GetInstanceMissingIndexListResponseBodyDataList {
	s.UserSeeks = &v
	return s
}

type GetInstanceMissingIndexListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceMissingIndexListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceMissingIndexListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceMissingIndexListResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceMissingIndexListResponse) SetHeaders(v map[string]*string) *GetInstanceMissingIndexListResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceMissingIndexListResponse) SetStatusCode(v int32) *GetInstanceMissingIndexListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceMissingIndexListResponse) SetBody(v *GetInstanceMissingIndexListResponseBody) *GetInstanceMissingIndexListResponse {
	s.Body = v
	return s
}

type GetInstanceSqlOptimizeStatisticRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1662518540764
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Specifies whether to filter instances for which DAS Enterprise Edition is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  If you set this parameter to **true**, only database instances for which DAS Enterprise Edition is disabled are queried. If you set this parameter to **false**, all database instances are queried.
	//
	// example:
	//
	// false
	FilterEnable *string `json:"FilterEnable,omitempty" xml:"FilterEnable,omitempty"`
	// The database instance ID.
	//
	// >  The database instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// pc-wz90h9560rvdz****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  For ApsaraDB RDS for MySQL Cluster Edition instances or PolarDB for MySQL clusters, you must specify the node ID.
	//
	// example:
	//
	// pi-bp12v7243x012****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1661308902060
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The duration threshold for automatic SQL optimization events. After this parameter is specified, the system collects statistics on automatic SQL optimization events whose duration does not exceed the specified threshold.
	//
	// >  This parameter is a reserved parameter and does not take effect.
	//
	// example:
	//
	// None
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// Specifies whether to merge automatic SQL optimization events. Valid values:
	//
	// 	- **true**: merges automatic SQL optimization events.
	//
	// 	- **false**: does not merge automatic SQL optimization events.
	//
	// >  This parameter is a reserved parameter and does not take effect.
	//
	// example:
	//
	// true
	UseMerging *string `json:"UseMerging,omitempty" xml:"UseMerging,omitempty"`
}

func (s GetInstanceSqlOptimizeStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSqlOptimizeStatisticRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetEndTime(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.EndTime = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetFilterEnable(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.FilterEnable = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetInstanceId(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetNodeId(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.NodeId = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetStartTime(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.StartTime = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetThreshold(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.Threshold = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetUseMerging(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.UseMerging = &v
	return s
}

type GetInstanceSqlOptimizeStatisticResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the automatic SQL optimization events.
	Data *GetInstanceSqlOptimizeStatisticResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceSqlOptimizeStatisticResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSqlOptimizeStatisticResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetCode(v string) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetData(v *GetInstanceSqlOptimizeStatisticResponseBodyData) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetMessage(v string) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetRequestId(v string) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetSuccess(v string) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.Success = &v
	return s
}

type GetInstanceSqlOptimizeStatisticResponseBodyData struct {
	// The total number of automatic SQL optimization events.
	//
	// example:
	//
	// 16
	Count *int32 `json:"count,omitempty" xml:"count,omitempty"`
	// The multiple of the maximum improvement for returned automatic SQL optimization events.
	//
	// example:
	//
	// 1003
	Improvement *float64 `json:"improvement,omitempty" xml:"improvement,omitempty"`
}

func (s GetInstanceSqlOptimizeStatisticResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSqlOptimizeStatisticResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInstanceSqlOptimizeStatisticResponseBodyData) SetCount(v int32) *GetInstanceSqlOptimizeStatisticResponseBodyData {
	s.Count = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBodyData) SetImprovement(v float64) *GetInstanceSqlOptimizeStatisticResponseBodyData {
	s.Improvement = &v
	return s
}

type GetInstanceSqlOptimizeStatisticResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceSqlOptimizeStatisticResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceSqlOptimizeStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSqlOptimizeStatisticResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceSqlOptimizeStatisticResponse) SetHeaders(v map[string]*string) *GetInstanceSqlOptimizeStatisticResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponse) SetStatusCode(v int32) *GetInstanceSqlOptimizeStatisticResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponse) SetBody(v *GetInstanceSqlOptimizeStatisticResponseBody) *GetInstanceSqlOptimizeStatisticResponse {
	s.Body = v
	return s
}

type GetKillInstanceSessionTaskResultRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  You must specify this parameter if your database instance is a PolarDB for MySQL cluster.
	//
	// example:
	//
	// pi-8vbkfj5a756um****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The task ID. You can obtain the task ID from the response parameters of the [CreateKillInstanceSessionTask](https://help.aliyun.com/document_detail/609246.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// f77d535b45405bd462b21caa3ee8****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetKillInstanceSessionTaskResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultRequest) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultRequest) SetInstanceId(v string) *GetKillInstanceSessionTaskResultRequest {
	s.InstanceId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultRequest) SetNodeId(v string) *GetKillInstanceSessionTaskResultRequest {
	s.NodeId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultRequest) SetTaskId(v string) *GetKillInstanceSessionTaskResultRequest {
	s.TaskId = &v
	return s
}

type GetKillInstanceSessionTaskResultResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetKillInstanceSessionTaskResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetKillInstanceSessionTaskResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetCode(v int64) *GetKillInstanceSessionTaskResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetData(v *GetKillInstanceSessionTaskResultResponseBodyData) *GetKillInstanceSessionTaskResultResponseBody {
	s.Data = v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetMessage(v string) *GetKillInstanceSessionTaskResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetRequestId(v string) *GetKillInstanceSessionTaskResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetSuccess(v bool) *GetKillInstanceSessionTaskResultResponseBody {
	s.Success = &v
	return s
}

type GetKillInstanceSessionTaskResultResponseBodyData struct {
	// The number of ignored sessions, including sessions of the accounts that are specified by IgnoredUsers, sessions of internal O\\&M accounts of Alibaba Cloud, and **Binlog Dump*	- sessions.
	//
	// example:
	//
	// 9
	IgnoredUserSessionCount *int64 `json:"IgnoredUserSessionCount,omitempty" xml:"IgnoredUserSessionCount,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of sessions that failed to be terminated.
	//
	// example:
	//
	// 0
	KillFailCount *int64 `json:"KillFailCount,omitempty" xml:"KillFailCount,omitempty"`
	// The number of sessions that were terminated.
	//
	// example:
	//
	// 100
	KillSuccessCount *int64 `json:"KillSuccessCount,omitempty" xml:"KillSuccessCount,omitempty"`
	// The node ID.
	//
	// >  This parameter is returned only if the instance is a PolarDB for MySQL cluster.
	//
	// example:
	//
	// pi-bp1h12rv501cv****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The details of the task that terminated sessions.
	Result []*GetKillInstanceSessionTaskResultResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// The session IDs.
	//
	// >  If all sessions are terminated, the IDs of all sessions on the instance or node are returned.
	Sessions []*int64 `json:"Sessions,omitempty" xml:"Sessions,omitempty" type:"Repeated"`
	// The task ID.
	//
	// example:
	//
	// f77d535b45405bd462b21caa3ee8****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The state of the task that terminates sessions.
	//
	// 	- **RUNNING**: The task is in progress.
	//
	// 	- **SUCCESS**: The task is successful.
	//
	// 	- **FAILURE**: The task failed.
	//
	// 	- **ERROR**: Other errors occur.
	//
	// example:
	//
	// SUCCESS
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	// The ID of the Alibaba Cloud account.
	//
	// example:
	//
	// 164882191396****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetKillInstanceSessionTaskResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetIgnoredUserSessionCount(v int64) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.IgnoredUserSessionCount = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetInstanceId(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetKillFailCount(v int64) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.KillFailCount = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetKillSuccessCount(v int64) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.KillSuccessCount = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetNodeId(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetResult(v []*GetKillInstanceSessionTaskResultResponseBodyDataResult) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.Result = v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetSessions(v []*int64) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.Sessions = v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetTaskId(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetTaskState(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.TaskState = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetUserId(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.UserId = &v
	return s
}

type GetKillInstanceSessionTaskResultResponseBodyDataResult struct {
	// Indicates whether the session is active.
	//
	// > If the type of the command is Query or Execute and the session in the transaction is not terminated, the session is active.
	//
	// example:
	//
	// true
	Active *bool `json:"Active,omitempty" xml:"Active,omitempty"`
	// The type of the command executed in the session.
	//
	// example:
	//
	// Sleep
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// dbTest
	Db *string `json:"Db,omitempty" xml:"Db,omitempty"`
	// The IP address and port number of the host that initiated the session.
	//
	// example:
	//
	// 100.104.XX.XX:23428
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// The session ID.
	//
	// example:
	//
	// 8357518
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The SQL statement executed in the session.
	//
	// example:
	//
	// SELECT sleep(60)
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The description of the session when the session was terminated.
	//
	// 	- **SESSION_KILLED**: The session is terminated.
	//
	// 	- **SESSION_EXPIRED**: The session has expired.
	//
	// 	- **SESSION_NO_PERMISSION**: The account used to terminate the session has insufficient permissions.
	//
	// 	- **SESSION_ACCOUNT_ERROR**: The account or password used to terminate the session is invalid.
	//
	// 	- **SESSION_IGNORED_USER**: The session of the account does not need to be terminated.
	//
	// 	- **SESSION_INTERNAL_USER_OR_COMMAND**: The session is a session initiated by or a command run by an Alibaba Cloud O\\&M account.
	//
	// 	- **SESSION_KILL_TASK_TIMEOUT**: Timeout occurs when the session is terminated.
	//
	// 	- **SESSION_OTHER_ERROR**: Other errors occurred.
	//
	// example:
	//
	// SESSION_KILLED
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The status of the session.
	//
	// example:
	//
	// Sending data
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The ID of the subtask that terminates the session.
	//
	// example:
	//
	// task_d9e94107-6116-4ac3-b874-81466aff****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The execution duration. Unit: seconds.
	//
	// example:
	//
	// 1
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The account of the database.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetKillInstanceSessionTaskResultResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetActive(v bool) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Active = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetCommand(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Command = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetDb(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Db = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetHost(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Host = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetId(v int64) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Id = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetInfo(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Info = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetReason(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Reason = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetState(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.State = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetTaskId(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.TaskId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetTime(v int64) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Time = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetUser(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.User = &v
	return s
}

type GetKillInstanceSessionTaskResultResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetKillInstanceSessionTaskResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetKillInstanceSessionTaskResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultResponse) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultResponse) SetHeaders(v map[string]*string) *GetKillInstanceSessionTaskResultResponse {
	s.Headers = v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponse) SetStatusCode(v int32) *GetKillInstanceSessionTaskResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponse) SetBody(v *GetKillInstanceSessionTaskResultResponseBody) *GetKillInstanceSessionTaskResultResponse {
	s.Body = v
	return s
}

type GetMongoDBCurrentOpRequest struct {
	// The `db.currentOp()` command that is used to filter sessions. For more information, see [db.currentOp()](https://docs.mongodb.com/manual/reference/method/db.currentOp/) of MongoDB Documentation.
	//
	// example:
	//
	// { "active" : true }
	FilterDoc *string `json:"FilterDoc,omitempty" xml:"FilterDoc,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// dds-uf608087********
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  If you do not specify a node ID, the sessions of the primary node are queried by default.
	//
	// example:
	//
	// 23302531
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// A reserved parameter. You do not need to specify the parameter.
	//
	// example:
	//
	// None
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s GetMongoDBCurrentOpRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpRequest) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpRequest) SetFilterDoc(v string) *GetMongoDBCurrentOpRequest {
	s.FilterDoc = &v
	return s
}

func (s *GetMongoDBCurrentOpRequest) SetInstanceId(v string) *GetMongoDBCurrentOpRequest {
	s.InstanceId = &v
	return s
}

func (s *GetMongoDBCurrentOpRequest) SetNodeId(v string) *GetMongoDBCurrentOpRequest {
	s.NodeId = &v
	return s
}

func (s *GetMongoDBCurrentOpRequest) SetRole(v string) *GetMongoDBCurrentOpRequest {
	s.Role = &v
	return s
}

type GetMongoDBCurrentOpResponseBody struct {
	// The response code.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the sessions.
	Data *GetMongoDBCurrentOpResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. Otherwise, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// FC6C0929-29E1-59FD-8DFE-70D9D41E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMongoDBCurrentOpResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponseBody) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponseBody) SetCode(v int64) *GetMongoDBCurrentOpResponseBody {
	s.Code = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBody) SetData(v *GetMongoDBCurrentOpResponseBodyData) *GetMongoDBCurrentOpResponseBody {
	s.Data = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBody) SetMessage(v string) *GetMongoDBCurrentOpResponseBody {
	s.Message = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBody) SetRequestId(v string) *GetMongoDBCurrentOpResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBody) SetSuccess(v bool) *GetMongoDBCurrentOpResponseBody {
	s.Success = &v
	return s
}

type GetMongoDBCurrentOpResponseBodyData struct {
	// The sessions.
	SessionList []*GetMongoDBCurrentOpResponseBodyDataSessionList `json:"SessionList,omitempty" xml:"SessionList,omitempty" type:"Repeated"`
	// The statistics on the sessions.
	SessionStat *GetMongoDBCurrentOpResponseBodyDataSessionStat `json:"SessionStat,omitempty" xml:"SessionStat,omitempty" type:"Struct"`
	// The time when the database sessions were returned. The value is in the UNIX timestamp format. Unit: milliseconds.
	//
	// example:
	//
	// 1692029584428
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetMongoDBCurrentOpResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponseBodyData) SetSessionList(v []*GetMongoDBCurrentOpResponseBodyDataSessionList) *GetMongoDBCurrentOpResponseBodyData {
	s.SessionList = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyData) SetSessionStat(v *GetMongoDBCurrentOpResponseBodyDataSessionStat) *GetMongoDBCurrentOpResponseBodyData {
	s.SessionStat = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyData) SetTimestamp(v int64) *GetMongoDBCurrentOpResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetMongoDBCurrentOpResponseBodyDataSessionList struct {
	// Indicates whether the operation is active. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Active *bool `json:"Active,omitempty" xml:"Active,omitempty"`
	// The IP address of the client.
	//
	// example:
	//
	// 219.143.177.4:52324
	Client *string `json:"Client,omitempty" xml:"Client,omitempty"`
	// The document that contains the complete command object associated with the operation.
	//
	// example:
	//
	// "command" : {
	//
	//   "find" : "items",
	//
	//   "filter" : {
	//
	//     "sku" : 1403978
	//
	//   },
	//
	//   ...
	//
	//   "$db" : "test"
	//
	// }
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The connection ID.
	//
	// example:
	//
	// 66378736
	ConnectionId *int64 `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	// The description of the connection.
	//
	// example:
	//
	// conn1013858
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// The driver for MongoDB.
	//
	// example:
	//
	// mongo-java-driver|legacy@3.11.2
	Driver *string `json:"Driver,omitempty" xml:"Driver,omitempty"`
	// The host.
	//
	// example:
	//
	// a79******.cloud.et15:3328
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// Indicates whether the operation is marked as terminated.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	KillPending *bool `json:"KillPending,omitempty" xml:"KillPending,omitempty"`
	// The namespace.
	//
	// example:
	//
	// admin.cmd
	Ns *string `json:"Ns,omitempty" xml:"Ns,omitempty"`
	// The type of the operation.
	//
	// example:
	//
	// update
	Op *string `json:"Op,omitempty" xml:"Op,omitempty"`
	// The operation ID.
	//
	// example:
	//
	// 14508
	OpId *string `json:"OpId,omitempty" xml:"OpId,omitempty"`
	// The architecture of the operating system.
	//
	// example:
	//
	// amd64
	OsArch *string `json:"OsArch,omitempty" xml:"OsArch,omitempty"`
	// The name of the operating system.
	//
	// example:
	//
	// Linux
	OsName *string `json:"OsName,omitempty" xml:"OsName,omitempty"`
	// The type of the operating system.
	//
	// example:
	//
	// Linux
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The description of the execution plan.
	//
	// example:
	//
	// None
	PlanSummary *string `json:"PlanSummary,omitempty" xml:"PlanSummary,omitempty"`
	// The platform.
	//
	// example:
	//
	// Java/Alibaba/1.8.0_152-b5
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	// The duration of the operation. Unit: seconds.
	//
	// example:
	//
	// 5
	SecsRunning *int64 `json:"SecsRunning,omitempty" xml:"SecsRunning,omitempty"`
	// The ID of the data shard.
	//
	// >  This parameter is returned for sharded cluster instances.
	//
	// example:
	//
	// d-bp1689995b78****
	Shard *string `json:"Shard,omitempty" xml:"Shard,omitempty"`
}

func (s GetMongoDBCurrentOpResponseBodyDataSessionList) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponseBodyDataSessionList) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetActive(v bool) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Active = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetClient(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Client = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetCommand(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Command = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetConnectionId(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.ConnectionId = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetDesc(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Desc = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetDriver(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Driver = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetHost(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Host = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetKillPending(v bool) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.KillPending = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetNs(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Ns = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOp(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Op = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOpId(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.OpId = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOsArch(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.OsArch = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOsName(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.OsName = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOsType(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.OsType = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetPlanSummary(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.PlanSummary = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetPlatform(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Platform = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetSecsRunning(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.SecsRunning = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetShard(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Shard = &v
	return s
}

type GetMongoDBCurrentOpResponseBodyDataSessionStat struct {
	// The number of active sessions.
	//
	// example:
	//
	// 0
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The statistics on the IP addresses of the clients.
	ClientStats map[string]*DataSessionStatClientStatsValue `json:"ClientStats,omitempty" xml:"ClientStats,omitempty"`
	// The statistics on the namespaces.
	DbStats map[string]*DataSessionStatDbStatsValue `json:"DbStats,omitempty" xml:"DbStats,omitempty"`
	// The longest duration of a session. Unit: seconds.
	//
	// example:
	//
	// 0
	LongestSecsRunning *int64 `json:"LongestSecsRunning,omitempty" xml:"LongestSecsRunning,omitempty"`
	// The total number of sessions.
	//
	// example:
	//
	// 55
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMongoDBCurrentOpResponseBodyDataSessionStat) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponseBodyDataSessionStat) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetActiveCount(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.ActiveCount = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetClientStats(v map[string]*DataSessionStatClientStatsValue) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.ClientStats = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetDbStats(v map[string]*DataSessionStatDbStatsValue) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.DbStats = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetLongestSecsRunning(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.LongestSecsRunning = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetTotalCount(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.TotalCount = &v
	return s
}

type GetMongoDBCurrentOpResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMongoDBCurrentOpResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMongoDBCurrentOpResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponse) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponse) SetHeaders(v map[string]*string) *GetMongoDBCurrentOpResponse {
	s.Headers = v
	return s
}

func (s *GetMongoDBCurrentOpResponse) SetStatusCode(v int32) *GetMongoDBCurrentOpResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMongoDBCurrentOpResponse) SetBody(v *GetMongoDBCurrentOpResponseBody) *GetMongoDBCurrentOpResponse {
	s.Body = v
	return s
}

type GetMySQLAllSessionAsyncRequest struct {
	// The instance ID.
	//
	// >  Only ApsaraDB RDS for MySQL, PolarDB for MySQL, and PolarDB-X 2.0 instances are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  You must specify this parameter for PolarDB for MySQL clusters. If you do not specify a node ID, the session data of the primary node is returned by default.
	//
	// example:
	//
	// pi-wz954ryd8f893****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The asynchronous request ID.
	//
	// >  GetMySQLAllSessionAsync is an asynchronous operation. After a request is sent, the system does not return complete results but returns a **request ID**. You need to use the **request ID*	- to initiate requests until the value of the **isFinish*	- field in the returned results is **true**, the complete results are returned. This indicates that to obtain complete data, you must call this operation at least twice.
	//
	// example:
	//
	// async__507044db6c4eadfa2dab9b084e80****
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
}

func (s GetMySQLAllSessionAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncRequest) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncRequest) SetInstanceId(v string) *GetMySQLAllSessionAsyncRequest {
	s.InstanceId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncRequest) SetNodeId(v string) *GetMySQLAllSessionAsyncRequest {
	s.NodeId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncRequest) SetResultId(v string) *GetMySQLAllSessionAsyncRequest {
	s.ResultId = &v
	return s
}

type GetMySQLAllSessionAsyncResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetMySQLAllSessionAsyncResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMySQLAllSessionAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetCode(v int64) *GetMySQLAllSessionAsyncResponseBody {
	s.Code = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetData(v *GetMySQLAllSessionAsyncResponseBodyData) *GetMySQLAllSessionAsyncResponseBody {
	s.Data = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetMessage(v string) *GetMySQLAllSessionAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetRequestId(v string) *GetMySQLAllSessionAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetSuccess(v bool) *GetMySQLAllSessionAsyncResponseBody {
	s.Success = &v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyData struct {
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Complete *bool `json:"Complete,omitempty" xml:"Complete,omitempty"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Fail *bool `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// The ID of the asynchronous request.
	//
	// example:
	//
	// async__507044db6c4eadfa2dab9b084e80****
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The session data.
	SessionData *GetMySQLAllSessionAsyncResponseBodyDataSessionData `json:"SessionData,omitempty" xml:"SessionData,omitempty" type:"Struct"`
	// The state of the asynchronous request. Valid values:
	//
	// 	- **RUNNING**
	//
	// 	- **SUCCESS**
	//
	// 	- **FAIL**
	//
	// example:
	//
	// SUCCESS
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1660100753556
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetMySQLAllSessionAsyncResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetComplete(v bool) *GetMySQLAllSessionAsyncResponseBodyData {
	s.Complete = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetFail(v bool) *GetMySQLAllSessionAsyncResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetIsFinish(v bool) *GetMySQLAllSessionAsyncResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetResultId(v string) *GetMySQLAllSessionAsyncResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetSessionData(v *GetMySQLAllSessionAsyncResponseBodyDataSessionData) *GetMySQLAllSessionAsyncResponseBodyData {
	s.SessionData = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetState(v string) *GetMySQLAllSessionAsyncResponseBodyData {
	s.State = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetTimestamp(v int64) *GetMySQLAllSessionAsyncResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionData struct {
	// The total number of active sessions.
	//
	// example:
	//
	// 10
	ActiveSessionCount *int64 `json:"ActiveSessionCount,omitempty" xml:"ActiveSessionCount,omitempty"`
	// The sessions that are counted by client IP address.
	ClientStats []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats `json:"ClientStats,omitempty" xml:"ClientStats,omitempty" type:"Repeated"`
	// The sessions that are counted by database.
	DbStats []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats `json:"DbStats,omitempty" xml:"DbStats,omitempty" type:"Repeated"`
	// The maximum execution duration of an active session. Unit: seconds.
	//
	// example:
	//
	// 6
	MaxActiveTime *int64 `json:"MaxActiveTime,omitempty" xml:"MaxActiveTime,omitempty"`
	// The sessions.
	SessionList []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList `json:"SessionList,omitempty" xml:"SessionList,omitempty" type:"Repeated"`
	// The time when the session was queried. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1659581514000020
	TimeStamp *int64 `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	// The total number of sessions.
	//
	// example:
	//
	// 988
	TotalSessionCount *int64 `json:"TotalSessionCount,omitempty" xml:"TotalSessionCount,omitempty"`
	// The sessions that are counted by database account.
	UserStats []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats `json:"UserStats,omitempty" xml:"UserStats,omitempty" type:"Repeated"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionData) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionData) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetActiveSessionCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.ActiveSessionCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetClientStats(v []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.ClientStats = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetDbStats(v []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.DbStats = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetMaxActiveTime(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.MaxActiveTime = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetSessionList(v []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.SessionList = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetTimeStamp(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.TimeStamp = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetTotalSessionCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.TotalSessionCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetUserStats(v []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.UserStats = v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats struct {
	// The number of active sessions that belong to the client IP address.
	//
	// >  If the type of the command executed in the session is Query or Execute and the session in the transaction is not terminated, the session is active.
	//
	// example:
	//
	// 1
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The IP address of the client.
	//
	// example:
	//
	// 47.100.XX.XX
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The IDs of the sessions that belong to the client IP address.
	ThreadIdList []*int64 `json:"ThreadIdList,omitempty" xml:"ThreadIdList,omitempty" type:"Repeated"`
	// The total number of sessions that belong to the client IP address.
	//
	// example:
	//
	// 2
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The database accounts to which the sessions belong.
	UserList []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetActiveCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.ActiveCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetKey(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.Key = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetThreadIdList(v []*int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.ThreadIdList = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetTotalCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.TotalCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetUserList(v []*string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.UserList = v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats struct {
	// The number of active sessions of the database.
	//
	// >  If the type of the command executed in the session is Query or Execute and the session in the transaction is not terminated, the session is active.
	//
	// example:
	//
	// 1
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The database name.
	//
	// example:
	//
	// dbTest
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The IDs of the sessions of the database.
	ThreadIdList []*int64 `json:"ThreadIdList,omitempty" xml:"ThreadIdList,omitempty" type:"Repeated"`
	// The total number of sessions of the database.
	//
	// example:
	//
	// 2
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The database accounts to which the sessions belong.
	UserList []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetActiveCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.ActiveCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetKey(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.Key = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetThreadIdList(v []*int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.ThreadIdList = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetTotalCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.TotalCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetUserList(v []*string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.UserList = v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList struct {
	// The IP address of the client.
	//
	// example:
	//
	// 47.100.XX.XX
	Client *string `json:"Client,omitempty" xml:"Client,omitempty"`
	// The type of the command executed in the session.
	//
	// example:
	//
	// Query
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The database name.
	//
	// example:
	//
	// dbTest
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The session ID.
	//
	// example:
	//
	// 14521783
	SessionId *int64 `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// The SQL template ID.
	//
	// >  This parameter is returned only when you use a PolarDB-X 2.0 instance.
	//
	// example:
	//
	// a7cac1a9
	SqlTemplateId *string `json:"SqlTemplateId,omitempty" xml:"SqlTemplateId,omitempty"`
	// The SQL statement executed in the session.
	//
	// example:
	//
	// INSERT INTO ...
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The status of the session.
	//
	// example:
	//
	// starting
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The execution duration of the session. Unit: seconds.
	//
	// example:
	//
	// 6
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The duration of the transaction. Unit: seconds.
	//
	// example:
	//
	// 6
	TrxDuration *int64 `json:"TrxDuration,omitempty" xml:"TrxDuration,omitempty"`
	// The ID of the transaction to which the session belongs.
	//
	// example:
	//
	// 754300775132
	TrxId *string `json:"TrxId,omitempty" xml:"TrxId,omitempty"`
	// The username of the database account.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The alias of the IP address of the client.
	//
	// example:
	//
	// master-shanghai
	UserClientAlias *string `json:"UserClientAlias,omitempty" xml:"UserClientAlias,omitempty"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetClient(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.Client = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetCommand(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.Command = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetDbName(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.DbName = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetSessionId(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.SessionId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetSqlTemplateId(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.SqlTemplateId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetSqlText(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.SqlText = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetState(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.State = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetTime(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.Time = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetTrxDuration(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.TrxDuration = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetTrxId(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.TrxId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetUser(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.User = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetUserClientAlias(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.UserClientAlias = &v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats struct {
	// The number of active sessions within the account.
	//
	// >  If the type of the command executed in the session is Query or Execute and the session in the transaction is not terminated, the session is active.
	//
	// example:
	//
	// 1
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The database account.
	//
	// example:
	//
	// testUser
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The IDs of the sessions within the account.
	ThreadIdList []*int64 `json:"ThreadIdList,omitempty" xml:"ThreadIdList,omitempty" type:"Repeated"`
	// The total number of sessions within the account.
	//
	// example:
	//
	// 2
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The database accounts to which the sessions belong.
	UserList []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetActiveCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.ActiveCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetKey(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.Key = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetThreadIdList(v []*int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.ThreadIdList = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetTotalCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.TotalCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetUserList(v []*string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.UserList = v
	return s
}

type GetMySQLAllSessionAsyncResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMySQLAllSessionAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMySQLAllSessionAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponse) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponse) SetHeaders(v map[string]*string) *GetMySQLAllSessionAsyncResponse {
	s.Headers = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponse) SetStatusCode(v int32) *GetMySQLAllSessionAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponse) SetBody(v *GetMySQLAllSessionAsyncResponseBody) *GetMySQLAllSessionAsyncResponse {
	s.Body = v
	return s
}

type GetPartitionsHeatmapRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// pxc-hzrciqy62c****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The time range to be queried. Valid values:
	//
	// 	- **LAST_ONE_HOURS**: the last hour.
	//
	// 	- **LAST_SIX_HOURS**: the last six hours.
	//
	// 	- **LAST_ONE_DAYS**: the last day.
	//
	// 	- **LAST_THREE_DAYS**: the last three days.
	//
	// 	- **LAST_SEVEN_DAYS**: the last seven days.
	//
	// example:
	//
	// LAST_SIX_HOURS
	TimeRange *string `json:"TimeRange,omitempty" xml:"TimeRange,omitempty"`
	// The type of the data to be queried. Valid values:
	//
	// 	- **READ_ROWS**: the read rows.
	//
	// 	- **WRITTEN_ROWS**: the written rows.
	//
	// 	- **READ_WRITTEN_ROWS**: the read and written rows.
	//
	// 	- **UPDATE_ROWS**: the updated rows.
	//
	// 	- **INSERTED_ROWS**: the inserted rows.
	//
	// 	- **DELETED_ROWS**: the deleted rows.
	//
	// 	- **READ_ROWS_WITH_DN**: the read rows returned from a data node.
	//
	// 	- **WRITTEN_ROWS_WITH_DN**: the written rows returned from a data node.
	//
	// 	- **READ_WRITTEN_ROWS_WITH_DN**: the read and written rows returned from a data node.
	//
	// example:
	//
	// WRITTEN_ROWS_WITH_DN
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPartitionsHeatmapRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPartitionsHeatmapRequest) GoString() string {
	return s.String()
}

func (s *GetPartitionsHeatmapRequest) SetConsoleContext(v string) *GetPartitionsHeatmapRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetPartitionsHeatmapRequest) SetInstanceId(v string) *GetPartitionsHeatmapRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPartitionsHeatmapRequest) SetTimeRange(v string) *GetPartitionsHeatmapRequest {
	s.TimeRange = &v
	return s
}

func (s *GetPartitionsHeatmapRequest) SetType(v string) *GetPartitionsHeatmapRequest {
	s.Type = &v
	return s
}

type GetPartitionsHeatmapResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The hot data of the PolarDB-X 2.0 instance. The data is returned in JSON format.
	//
	// example:
	//
	// {
	//
	//     "boundAxis": [
	//
	//         {
	//
	//             "bound": "A,B,C,D",
	//
	//             "labels": [
	//
	//                 "L1",
	//
	//                 "L2",
	//
	//                 "L3",
	//
	//                 "L4"
	//
	//             ],
	//
	//             "rows": 3171
	//
	//         },
	//
	//         {
	//
	//             "bound": "A,B,C,D",
	//
	//             "labels": [
	//
	//                 "L1",
	//
	//                 "L2",
	//
	//                 "L3",
	//
	//                 "L4"
	//
	//             ],
	//
	//             "rows": 277128
	//
	//         }
	//
	//     ],
	//
	//     "dataMap": {
	//
	//         "READ_WRITTEN_ROWS": [
	//
	//             [
	//
	//                 0,
	//
	//                 0,
	//
	//                 0
	//
	//             ],
	//
	//             [
	//
	//                 0,
	//
	//                 0,
	//
	//                 0
	//
	//             ]
	//
	//         ]
	//
	//     },
	//
	//     "timeAxis": [
	//
	//         1671701056070,
	//
	//         1671701116551,
	//
	//         1671701177020
	//
	//     ]
	//
	// }
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// D00DB161-FEF6-5428-B37A-8D29A4C2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPartitionsHeatmapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPartitionsHeatmapResponseBody) GoString() string {
	return s.String()
}

func (s *GetPartitionsHeatmapResponseBody) SetCode(v string) *GetPartitionsHeatmapResponseBody {
	s.Code = &v
	return s
}

func (s *GetPartitionsHeatmapResponseBody) SetData(v string) *GetPartitionsHeatmapResponseBody {
	s.Data = &v
	return s
}

func (s *GetPartitionsHeatmapResponseBody) SetMessage(v string) *GetPartitionsHeatmapResponseBody {
	s.Message = &v
	return s
}

func (s *GetPartitionsHeatmapResponseBody) SetRequestId(v string) *GetPartitionsHeatmapResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPartitionsHeatmapResponseBody) SetSuccess(v string) *GetPartitionsHeatmapResponseBody {
	s.Success = &v
	return s
}

type GetPartitionsHeatmapResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPartitionsHeatmapResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPartitionsHeatmapResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPartitionsHeatmapResponse) GoString() string {
	return s.String()
}

func (s *GetPartitionsHeatmapResponse) SetHeaders(v map[string]*string) *GetPartitionsHeatmapResponse {
	s.Headers = v
	return s
}

func (s *GetPartitionsHeatmapResponse) SetStatusCode(v int32) *GetPartitionsHeatmapResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPartitionsHeatmapResponse) SetBody(v *GetPartitionsHeatmapResponseBody) *GetPartitionsHeatmapResponse {
	s.Body = v
	return s
}

type GetPfsMetricTrendsRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. You can view the data of up to seven days in the previous 30 days.
	//
	// example:
	//
	// 1678432430967
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-m5ea73876ukci****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The metric whose trend you want to query. Valid values:
	//
	// 	- **count**: the number of executions.
	//
	// 	- **avgRt**: the average execution duration.
	//
	// 	- **rtRate**: the execution duration percentage.
	//
	// 	- **rowsExamined**: the total number of scanned rows.
	//
	// example:
	//
	// Count
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The node ID.
	//
	// >  This parameter is required if the database instance is an ApsaraDB RDS for MySQL Cluster Edition instance or a PolarDB for MySQL clusters.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1677461663092
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetPfsMetricTrendsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPfsMetricTrendsRequest) GoString() string {
	return s.String()
}

func (s *GetPfsMetricTrendsRequest) SetEndTime(v int64) *GetPfsMetricTrendsRequest {
	s.EndTime = &v
	return s
}

func (s *GetPfsMetricTrendsRequest) SetInstanceId(v string) *GetPfsMetricTrendsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPfsMetricTrendsRequest) SetMetric(v string) *GetPfsMetricTrendsRequest {
	s.Metric = &v
	return s
}

func (s *GetPfsMetricTrendsRequest) SetNodeId(v string) *GetPfsMetricTrendsRequest {
	s.NodeId = &v
	return s
}

func (s *GetPfsMetricTrendsRequest) SetStartTime(v int64) *GetPfsMetricTrendsRequest {
	s.StartTime = &v
	return s
}

type GetPfsMetricTrendsResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data map[string][]*DataValue `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// F4C27966-284E-51C4-9407-DB50CAB8****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPfsMetricTrendsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPfsMetricTrendsResponseBody) GoString() string {
	return s.String()
}

func (s *GetPfsMetricTrendsResponseBody) SetCode(v int64) *GetPfsMetricTrendsResponseBody {
	s.Code = &v
	return s
}

func (s *GetPfsMetricTrendsResponseBody) SetData(v map[string][]*DataValue) *GetPfsMetricTrendsResponseBody {
	s.Data = v
	return s
}

func (s *GetPfsMetricTrendsResponseBody) SetMessage(v string) *GetPfsMetricTrendsResponseBody {
	s.Message = &v
	return s
}

func (s *GetPfsMetricTrendsResponseBody) SetRequestId(v string) *GetPfsMetricTrendsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPfsMetricTrendsResponseBody) SetSuccess(v bool) *GetPfsMetricTrendsResponseBody {
	s.Success = &v
	return s
}

type GetPfsMetricTrendsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPfsMetricTrendsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPfsMetricTrendsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPfsMetricTrendsResponse) GoString() string {
	return s.String()
}

func (s *GetPfsMetricTrendsResponse) SetHeaders(v map[string]*string) *GetPfsMetricTrendsResponse {
	s.Headers = v
	return s
}

func (s *GetPfsMetricTrendsResponse) SetStatusCode(v int32) *GetPfsMetricTrendsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPfsMetricTrendsResponse) SetBody(v *GetPfsMetricTrendsResponseBody) *GetPfsMetricTrendsResponse {
	s.Body = v
	return s
}

type GetPfsSqlSampleRequest struct {
	// The end of the time range to query. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. You can view the data of up to seven days in the previous 30 days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1678074351197
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	//
	// >  Only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters are supported
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  For ApsaraDB RDS for MySQL Cluster Edition instances or PolarDB for MySQL clusters, you must specify the node ID.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The SQL ID.
	//
	// example:
	//
	// 651b56fe9418d48edb8fdf0980ec****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The beginning of the time range to query. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1676511134614
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetPfsSqlSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSampleRequest) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSampleRequest) SetEndTime(v int64) *GetPfsSqlSampleRequest {
	s.EndTime = &v
	return s
}

func (s *GetPfsSqlSampleRequest) SetInstanceId(v string) *GetPfsSqlSampleRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPfsSqlSampleRequest) SetNodeId(v string) *GetPfsSqlSampleRequest {
	s.NodeId = &v
	return s
}

func (s *GetPfsSqlSampleRequest) SetSqlId(v string) *GetPfsSqlSampleRequest {
	s.SqlId = &v
	return s
}

func (s *GetPfsSqlSampleRequest) SetStartTime(v int64) *GetPfsSqlSampleRequest {
	s.StartTime = &v
	return s
}

type GetPfsSqlSampleResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The SQL sample data.
	Data []*GetPfsSqlSampleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9CB97BC4-6479-55D0-B9D0-EA925AFE****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPfsSqlSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSampleResponseBody) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSampleResponseBody) SetCode(v int64) *GetPfsSqlSampleResponseBody {
	s.Code = &v
	return s
}

func (s *GetPfsSqlSampleResponseBody) SetData(v []*GetPfsSqlSampleResponseBodyData) *GetPfsSqlSampleResponseBody {
	s.Data = v
	return s
}

func (s *GetPfsSqlSampleResponseBody) SetMessage(v string) *GetPfsSqlSampleResponseBody {
	s.Message = &v
	return s
}

func (s *GetPfsSqlSampleResponseBody) SetRequestId(v string) *GetPfsSqlSampleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBody) SetSuccess(v bool) *GetPfsSqlSampleResponseBody {
	s.Success = &v
	return s
}

type GetPfsSqlSampleResponseBodyData struct {
	// The number of internal on-disk temporary tables that were created when the SQL statement was executed.
	//
	// example:
	//
	// 0
	CreateTmpDiskTables *int32 `json:"CreateTmpDiskTables,omitempty" xml:"CreateTmpDiskTables,omitempty"`
	// The number of internal temporary tables that were created when the SQL statement was executed.
	//
	// example:
	//
	// 0
	CreateTmpTables *int32 `json:"CreateTmpTables,omitempty" xml:"CreateTmpTables,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testDB
	Db *string `json:"Db,omitempty" xml:"Db,omitempty"`
	// The end ID of the event. By default, the value of this parameter is NULL when the event starts and is changed to the event ID when the event ends.
	//
	// example:
	//
	// 0
	EndEventId *int32 `json:"EndEventId,omitempty" xml:"EndEventId,omitempty"`
	// The number of errors returned for the SQL statement.
	//
	// example:
	//
	// 0
	Errors *int32 `json:"Errors,omitempty" xml:"Errors,omitempty"`
	// The event ID.
	//
	// example:
	//
	// 63735293
	EventId *int32 `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// The name of the event.
	//
	// example:
	//
	// statement/sql/select
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The execution duration. Unit: millisecond.
	//
	// example:
	//
	// 0.199
	Latency *float64 `json:"Latency,omitempty" xml:"Latency,omitempty"`
	// The lock wait duration. Unit: millisecond.
	//
	// example:
	//
	// 0.09
	LockLatency *float64 `json:"LockLatency,omitempty" xml:"LockLatency,omitempty"`
	// The ID of the logical database.
	//
	// example:
	//
	// xxxxx
	LogicId *string `json:"LogicId,omitempty" xml:"LogicId,omitempty"`
	// Indicates whether the server failed to find an index that can be used for the SQL statement. Valid values:
	//
	// 	- **1**: yes.
	//
	// 	- **0**: no.
	//
	// example:
	//
	// 1
	NoGoodIndexUsed *int32 `json:"NoGoodIndexUsed,omitempty" xml:"NoGoodIndexUsed,omitempty"`
	// Indicates whether table scans were performed when indexes were not used. Valid values:
	//
	// 	- **1**: yes.
	//
	// 	- **0**: no.
	//
	// example:
	//
	// 1
	NoIndexUsed *int32 `json:"NoIndexUsed,omitempty" xml:"NoIndexUsed,omitempty"`
	// The node ID.
	//
	// >  This parameter is returned only for ApsaraDB RDS for MySQL Cluster Edition instances or PolarDB for MySQL clusters.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The number of rows affected by the SQL statement.
	//
	// example:
	//
	// 0
	RowsAffected *int32 `json:"RowsAffected,omitempty" xml:"RowsAffected,omitempty"`
	// The number of rows scanned by the SQL statement.
	//
	// example:
	//
	// 2048576
	RowsExamined *int32 `json:"RowsExamined,omitempty" xml:"RowsExamined,omitempty"`
	// The number of rows returned by the SQL statement.
	//
	// example:
	//
	// 0
	RowsSent *int32 `json:"RowsSent,omitempty" xml:"RowsSent,omitempty"`
	// The number of joins that are used to perform table scans without using indexes.
	//
	// > : This parameter is used for the scenario in which indexes are not used in a union query. If the returned value is not 0, check the indexes of tables.
	//
	// example:
	//
	// 0
	SelectFullJoin *int32 `json:"SelectFullJoin,omitempty" xml:"SelectFullJoin,omitempty"`
	// The number of joins that used ranges on referenced tables.
	//
	// example:
	//
	// 0
	SelectFullRangeJoin *int32 `json:"SelectFullRangeJoin,omitempty" xml:"SelectFullRangeJoin,omitempty"`
	// The number of joins that used ranges on the first table.
	//
	// example:
	//
	// 0
	SelectRange *int32 `json:"SelectRange,omitempty" xml:"SelectRange,omitempty"`
	// The number of joins that did not have key values. The keys and values were checked for each row of data.
	//
	// > : This parameter is used for the scenario in which indexes are not used in a union query. If the returned value is not 0, check the indexes of tables.
	//
	// example:
	//
	// 0
	SelectRangeCheck *int32 `json:"SelectRangeCheck,omitempty" xml:"SelectRangeCheck,omitempty"`
	// The number of scans.
	//
	// example:
	//
	// 0
	SelectScan *int32 `json:"SelectScan,omitempty" xml:"SelectScan,omitempty"`
	// The number of merges that the sorting algorithm must perform.
	//
	// example:
	//
	// 0
	SortMergePasses *int32 `json:"SortMergePasses,omitempty" xml:"SortMergePasses,omitempty"`
	// The number of times the data was sorted by using ranges.
	//
	// example:
	//
	// 0
	SortRange *int32 `json:"SortRange,omitempty" xml:"SortRange,omitempty"`
	// The number of sorted rows.
	//
	// example:
	//
	// 0
	SortRows *int32 `json:"SortRows,omitempty" xml:"SortRows,omitempty"`
	// The number of sorts that were performed during table scans.
	//
	// example:
	//
	// 1
	SortScan *int32 `json:"SortScan,omitempty" xml:"SortScan,omitempty"`
	// The sample SQL statement.
	//
	// example:
	//
	// select 	- from xxxx where ****
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
	// The SQL statement ID.
	//
	// example:
	//
	// 651b56fe9418d48edb8fdf0980ec****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The thread ID.
	//
	// example:
	//
	// 81751940
	ThreadId *int32 `json:"ThreadId,omitempty" xml:"ThreadId,omitempty"`
	// The time when the SQL statement was executed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1660100753556
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 196278346919****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The number of warnings returned for the SQL statement.
	//
	// example:
	//
	// 0
	Warnings *int32 `json:"Warnings,omitempty" xml:"Warnings,omitempty"`
}

func (s GetPfsSqlSampleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSampleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSampleResponseBodyData) SetCreateTmpDiskTables(v int32) *GetPfsSqlSampleResponseBodyData {
	s.CreateTmpDiskTables = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetCreateTmpTables(v int32) *GetPfsSqlSampleResponseBodyData {
	s.CreateTmpTables = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetDb(v string) *GetPfsSqlSampleResponseBodyData {
	s.Db = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetEndEventId(v int32) *GetPfsSqlSampleResponseBodyData {
	s.EndEventId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetErrors(v int32) *GetPfsSqlSampleResponseBodyData {
	s.Errors = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetEventId(v int32) *GetPfsSqlSampleResponseBodyData {
	s.EventId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetEventName(v string) *GetPfsSqlSampleResponseBodyData {
	s.EventName = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetInstanceId(v string) *GetPfsSqlSampleResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetLatency(v float64) *GetPfsSqlSampleResponseBodyData {
	s.Latency = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetLockLatency(v float64) *GetPfsSqlSampleResponseBodyData {
	s.LockLatency = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetLogicId(v string) *GetPfsSqlSampleResponseBodyData {
	s.LogicId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetNoGoodIndexUsed(v int32) *GetPfsSqlSampleResponseBodyData {
	s.NoGoodIndexUsed = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetNoIndexUsed(v int32) *GetPfsSqlSampleResponseBodyData {
	s.NoIndexUsed = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetNodeId(v string) *GetPfsSqlSampleResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetRowsAffected(v int32) *GetPfsSqlSampleResponseBodyData {
	s.RowsAffected = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetRowsExamined(v int32) *GetPfsSqlSampleResponseBodyData {
	s.RowsExamined = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetRowsSent(v int32) *GetPfsSqlSampleResponseBodyData {
	s.RowsSent = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectFullJoin(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectFullJoin = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectFullRangeJoin(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectFullRangeJoin = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectRange(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectRange = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectRangeCheck(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectRangeCheck = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectScan(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectScan = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSortMergePasses(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SortMergePasses = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSortRange(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SortRange = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSortRows(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SortRows = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSortScan(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SortScan = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSql(v string) *GetPfsSqlSampleResponseBodyData {
	s.Sql = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSqlId(v string) *GetPfsSqlSampleResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetThreadId(v int32) *GetPfsSqlSampleResponseBodyData {
	s.ThreadId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetTimestamp(v int64) *GetPfsSqlSampleResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetUserId(v string) *GetPfsSqlSampleResponseBodyData {
	s.UserId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetWarnings(v int32) *GetPfsSqlSampleResponseBodyData {
	s.Warnings = &v
	return s
}

type GetPfsSqlSampleResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPfsSqlSampleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPfsSqlSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSampleResponse) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSampleResponse) SetHeaders(v map[string]*string) *GetPfsSqlSampleResponse {
	s.Headers = v
	return s
}

func (s *GetPfsSqlSampleResponse) SetStatusCode(v int32) *GetPfsSqlSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPfsSqlSampleResponse) SetBody(v *GetPfsSqlSampleResponseBody) *GetPfsSqlSampleResponse {
	s.Body = v
	return s
}

type GetPfsSqlSummariesRequest struct {
	// Specifies whether to sort the returned entries in ascending order. Default value: **false**. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Asc *bool `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. You can view the data of up to seven days within the last month.
	//
	// example:
	//
	// 1679297005999
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-uf61swc4cru0b****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The keywords of the SQL template. Separate multiple keywords with spaces.
	//
	// example:
	//
	// select update
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The node ID.
	//
	// >  This parameter is required if the database instance is an ApsaraDB RDS for MySQL Cluster Edition instance or a PolarDB for MySQL cluster.
	//
	// example:
	//
	// r-****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The field by which to sort the returned entries. Default value: **count**.
	//
	// 	- **count**: the number of executions.
	//
	// 	- **avgRt**: the average execution duration.
	//
	// 	- **rtRate**: the execution duration percentage.
	//
	// 	- **rowsExamined**: the total number of scanned rows.
	//
	// 	- **avgRowsExamined**: the average number of scanned rows.
	//
	// 	- **avgRowsReturned**: the average number of returned rows.
	//
	// example:
	//
	// count
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 1 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The SQL ID.
	//
	// >  If this parameter is specified, the full request statistics of the specified SQL query are collected. If this parameter is left empty, the full request statistics of the entire database instance are collected.
	//
	// example:
	//
	// 651b56fe9418d48edb8fdf0980ec****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1675833788056
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetPfsSqlSummariesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesRequest) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesRequest) SetAsc(v bool) *GetPfsSqlSummariesRequest {
	s.Asc = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetEndTime(v int64) *GetPfsSqlSummariesRequest {
	s.EndTime = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetInstanceId(v string) *GetPfsSqlSummariesRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetKeywords(v string) *GetPfsSqlSummariesRequest {
	s.Keywords = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetNodeId(v string) *GetPfsSqlSummariesRequest {
	s.NodeId = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetOrderBy(v string) *GetPfsSqlSummariesRequest {
	s.OrderBy = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetPageNo(v int32) *GetPfsSqlSummariesRequest {
	s.PageNo = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetPageSize(v int32) *GetPfsSqlSummariesRequest {
	s.PageSize = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetSqlId(v string) *GetPfsSqlSummariesRequest {
	s.SqlId = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetStartTime(v int64) *GetPfsSqlSummariesRequest {
	s.StartTime = &v
	return s
}

type GetPfsSqlSummariesResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetPfsSqlSummariesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 54F3DBAE-9420-511A-9C29-265E8C04****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPfsSqlSummariesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesResponseBody) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesResponseBody) SetCode(v int64) *GetPfsSqlSummariesResponseBody {
	s.Code = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBody) SetData(v *GetPfsSqlSummariesResponseBodyData) *GetPfsSqlSummariesResponseBody {
	s.Data = v
	return s
}

func (s *GetPfsSqlSummariesResponseBody) SetMessage(v string) *GetPfsSqlSummariesResponseBody {
	s.Message = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBody) SetRequestId(v string) *GetPfsSqlSummariesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBody) SetSuccess(v bool) *GetPfsSqlSummariesResponseBody {
	s.Success = &v
	return s
}

type GetPfsSqlSummariesResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra interface{} `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The details of the data returned.
	List []*GetPfsSqlSummariesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 264
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetPfsSqlSummariesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesResponseBodyData) SetExtra(v interface{}) *GetPfsSqlSummariesResponseBodyData {
	s.Extra = v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyData) SetList(v []*GetPfsSqlSummariesResponseBodyDataList) *GetPfsSqlSummariesResponseBodyData {
	s.List = v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyData) SetPageNo(v int64) *GetPfsSqlSummariesResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyData) SetPageSize(v int64) *GetPfsSqlSummariesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyData) SetTotal(v int64) *GetPfsSqlSummariesResponseBodyData {
	s.Total = &v
	return s
}

type GetPfsSqlSummariesResponseBodyDataList struct {
	// The average execution latency. Unit: millisecond.
	//
	// example:
	//
	// 0.1717
	AvgLatency *float64 `json:"AvgLatency,omitempty" xml:"AvgLatency,omitempty"`
	// The total number of executions.
	//
	// example:
	//
	// 100000
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The percentage of the number of executions.
	//
	// example:
	//
	// 0.0586
	CountRate *float64 `json:"CountRate,omitempty" xml:"CountRate,omitempty"`
	// The ratio of the CPU execution duration to the total execution duration of the SQL statement.
	//
	// example:
	//
	// 0
	CpuRate *float64 `json:"CpuRate,omitempty" xml:"CpuRate,omitempty"`
	// The CPU execution duration. Unit: millisecond.
	//
	// example:
	//
	// 0
	CpuTime *float64 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The data read duration. Unit: millisecond.
	//
	// example:
	//
	// 0
	DataReadTime *float64 `json:"DataReadTime,omitempty" xml:"DataReadTime,omitempty"`
	// The number of nodes from which data can be read.
	//
	// example:
	//
	// 0
	DataReads *int32 `json:"DataReads,omitempty" xml:"DataReads,omitempty"`
	// The data write duration. Unit: millisecond.
	//
	// example:
	//
	// 0
	DataWriteTime *float64 `json:"DataWriteTime,omitempty" xml:"DataWriteTime,omitempty"`
	// The number of nodes to which data can be written.
	//
	// example:
	//
	// 0
	DataWrites *int32 `json:"DataWrites,omitempty" xml:"DataWrites,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testDB
	Db *string `json:"Db,omitempty" xml:"Db,omitempty"`
	// The execution duration. Unit: millisecond.
	//
	// example:
	//
	// 0
	ElapsedTime *float64 `json:"ElapsedTime,omitempty" xml:"ElapsedTime,omitempty"`
	// The number of errors.
	//
	// example:
	//
	// 0
	ErrCount *int64 `json:"ErrCount,omitempty" xml:"ErrCount,omitempty"`
	// The time when the SQL statement was executed for the first time. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1659308149000
	FirstTime *int64 `json:"FirstTime,omitempty" xml:"FirstTime,omitempty"`
	// Indicates whether full table scan was enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	FullScan *bool `json:"FullScan,omitempty" xml:"FullScan,omitempty"`
	// The primary key ID.
	//
	// example:
	//
	// 26186357
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The time when the SQL statement was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1661306520000
	LastTime *int64 `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	// The average lock wait latency. Unit: millisecond.
	//
	// example:
	//
	// 0
	LockLatencyAvg *float64 `json:"LockLatencyAvg,omitempty" xml:"LockLatencyAvg,omitempty"`
	// The logical database ID.
	//
	// example:
	//
	// 58275984
	LogicId *int64 `json:"LogicId,omitempty" xml:"LogicId,omitempty"`
	// The number of logical nodes.
	//
	// example:
	//
	// 0
	LogicReads *int64 `json:"LogicReads,omitempty" xml:"LogicReads,omitempty"`
	// The maximum execution latency. Unit: millisecond.
	//
	// example:
	//
	// 36.233
	MaxLatency *float64 `json:"MaxLatency,omitempty" xml:"MaxLatency,omitempty"`
	// The number of mutex spins.
	//
	// example:
	//
	// 1
	MutexSpins *int32 `json:"MutexSpins,omitempty" xml:"MutexSpins,omitempty"`
	// The number of mutex waits.
	//
	// example:
	//
	// 1
	MutexWaits *int32 `json:"MutexWaits,omitempty" xml:"MutexWaits,omitempty"`
	// The node ID.
	//
	// >  This parameter is returned only if the database instance is an ApsaraDB RDS for MySQL Cluster Edition instance or a PolarDB for MySQL cluster.
	//
	// example:
	//
	// r-x****-db-0
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The number of physical asynchronous nodes.
	//
	// example:
	//
	// 0
	PhysicalAsyncReads *int64 `json:"PhysicalAsyncReads,omitempty" xml:"PhysicalAsyncReads,omitempty"`
	// The number of physical nodes.
	//
	// example:
	//
	// 0
	PhysicalReads *int64 `json:"PhysicalReads,omitempty" xml:"PhysicalReads,omitempty"`
	// The SQL template.
	//
	// example:
	//
	// select ?
	Psql *string `json:"Psql,omitempty" xml:"Psql,omitempty"`
	// The number of redo nodes.
	//
	// example:
	//
	// 0
	RedoWrites *int64 `json:"RedoWrites,omitempty" xml:"RedoWrites,omitempty"`
	// The number of rows that are affected by the SQL statement.
	//
	// example:
	//
	// 0
	RowsAffected *int64 `json:"RowsAffected,omitempty" xml:"RowsAffected,omitempty"`
	// The average number of rows affected by the SQL statement.
	//
	// example:
	//
	// 0
	RowsAffectedAvg *float64 `json:"RowsAffectedAvg,omitempty" xml:"RowsAffectedAvg,omitempty"`
	// The total number of scanned rows.
	//
	// example:
	//
	// 100
	RowsExamined *int64 `json:"RowsExamined,omitempty" xml:"RowsExamined,omitempty"`
	// The average number of scanned rows.
	//
	// example:
	//
	// 0
	RowsExaminedAvg *float64 `json:"RowsExaminedAvg,omitempty" xml:"RowsExaminedAvg,omitempty"`
	// The average number of returned rows.
	//
	// example:
	//
	// 0
	RowsSendAvg *float64 `json:"RowsSendAvg,omitempty" xml:"RowsSendAvg,omitempty"`
	// The number of rows returned by the SQL statement.
	//
	// example:
	//
	// 0
	RowsSent *int64 `json:"RowsSent,omitempty" xml:"RowsSent,omitempty"`
	// The average number of rows returned for the SQL statement.
	//
	// example:
	//
	// 0.52
	RowsSentAvg *float64 `json:"RowsSentAvg,omitempty" xml:"RowsSentAvg,omitempty"`
	// The number of sorted rows.
	//
	// example:
	//
	// 0
	RowsSorted *int64 `json:"RowsSorted,omitempty" xml:"RowsSorted,omitempty"`
	// The execution duration percentage.
	//
	// example:
	//
	// 0.1384
	RtRate *float64 `json:"RtRate,omitempty" xml:"RtRate,omitempty"`
	// Indicates whether read/write splitting was enabled. Valid values:
	//
	// 	- **0:*	- Read/write splitting was disabled.
	//
	// 	- **1:*	- Read/write splitting was enabled.
	//
	// example:
	//
	// 0
	RwlockOsWaits *int32 `json:"RwlockOsWaits,omitempty" xml:"RwlockOsWaits,omitempty"`
	// The read/write splitting parameters.
	//
	// example:
	//
	// 0
	RwlockSpinRounds *int32 `json:"RwlockSpinRounds,omitempty" xml:"RwlockSpinRounds,omitempty"`
	// Indices whether multi-index scanning was enabled. Valid values:
	//
	// 	- **0:*	- Multi-index scanning was disabled.
	//
	// 	- **1:*	- Multi-index scanning was enabled.
	//
	// example:
	//
	// 0
	RwlockSpinWaits *int32 `json:"RwlockSpinWaits,omitempty" xml:"RwlockSpinWaits,omitempty"`
	// The average number of joins that performed table scans without using indexes.
	//
	// > If the value of this parameter is not 0, check the table indexes.
	//
	// example:
	//
	// 0
	SelectFullJoinAvg *float64 `json:"SelectFullJoinAvg,omitempty" xml:"SelectFullJoinAvg,omitempty"`
	// The average number of joins that selected a range.
	//
	// example:
	//
	// 0
	SelectFullRangeJoinAvg *float64 `json:"SelectFullRangeJoinAvg,omitempty" xml:"SelectFullRangeJoinAvg,omitempty"`
	// The average selected range.
	//
	// example:
	//
	// 0
	SelectRangeAvg *float64 `json:"SelectRangeAvg,omitempty" xml:"SelectRangeAvg,omitempty"`
	// The average number of scanned rows.
	//
	// example:
	//
	// 0
	SelectScanAvg *float64 `json:"SelectScanAvg,omitempty" xml:"SelectScanAvg,omitempty"`
	// The semi-synchronous replication latency. Unit: millisecond.
	//
	// example:
	//
	// 0.12
	SemisyncDelayTime *float64 `json:"SemisyncDelayTime,omitempty" xml:"SemisyncDelayTime,omitempty"`
	// The amount of time consumed for locking the server. Unit: millisecond.
	//
	// example:
	//
	// 0
	ServerLockTime *float64 `json:"ServerLockTime,omitempty" xml:"ServerLockTime,omitempty"`
	// The number of merges that the sorting algorithm must perform.
	//
	// example:
	//
	// 0
	SortMergePasses *int64 `json:"SortMergePasses,omitempty" xml:"SortMergePasses,omitempty"`
	// The average number of sorts that were performed by using a range.
	//
	// example:
	//
	// 0
	SortRangeAvg *float64 `json:"SortRangeAvg,omitempty" xml:"SortRangeAvg,omitempty"`
	// The average number of sorted rows.
	//
	// example:
	//
	// 0
	SortRowsAvg *float64 `json:"SortRowsAvg,omitempty" xml:"SortRowsAvg,omitempty"`
	// The average number of sorts that were performed during table scans.
	//
	// example:
	//
	// 0
	SortScanAvg *float64 `json:"SortScanAvg,omitempty" xml:"SortScanAvg,omitempty"`
	// The SQL template ID.
	//
	// example:
	//
	// 2e8147b5ca2dfc640dfd5e43d96a****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The type of the SQL statement. Valid values:
	//
	// 	- **SELECT**
	//
	// 	- **UPDATE**
	//
	// 	- **DELETE**
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The names of tables in the database.
	Tables []*string `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	TimerWaitAvg *float64 `json:"TimerWaitAvg,omitempty" xml:"TimerWaitAvg,omitempty"`
	// The data timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1643040000000
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The number of on-disk temporary tables.
	//
	// example:
	//
	// 0
	TmpDiskTables *int64 `json:"TmpDiskTables,omitempty" xml:"TmpDiskTables,omitempty"`
	// The average number of on-disk temporary tables.
	//
	// example:
	//
	// 0
	TmpDiskTablesAvg *float64 `json:"TmpDiskTablesAvg,omitempty" xml:"TmpDiskTablesAvg,omitempty"`
	// The number of temporary tables.
	//
	// example:
	//
	// 0
	TmpTables *int64 `json:"TmpTables,omitempty" xml:"TmpTables,omitempty"`
	// The average number of temporary tables.
	//
	// example:
	//
	// 0
	TmpTablesAvg *float64 `json:"TmpTablesAvg,omitempty" xml:"TmpTablesAvg,omitempty"`
	// The execution latency. Unit: millisecond.
	//
	// example:
	//
	// 60913.256
	TotalLatency *float64 `json:"TotalLatency,omitempty" xml:"TotalLatency,omitempty"`
	// The amount of time consumed for locking the storage transaction. Unit: millisecond.
	//
	// example:
	//
	// 0
	TransactionLockTime *float64 `json:"TransactionLockTime,omitempty" xml:"TransactionLockTime,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 196278346919****
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The number of warnings.
	//
	// example:
	//
	// 0
	WarnCount *int64 `json:"WarnCount,omitempty" xml:"WarnCount,omitempty"`
}

func (s GetPfsSqlSummariesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetAvgLatency(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.AvgLatency = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetCount(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.Count = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetCountRate(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.CountRate = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetCpuRate(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.CpuRate = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetCpuTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.CpuTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDataReadTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.DataReadTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDataReads(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.DataReads = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDataWriteTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.DataWriteTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDataWrites(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.DataWrites = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDb(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.Db = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetElapsedTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.ElapsedTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetErrCount(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.ErrCount = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetFirstTime(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.FirstTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetFullScan(v bool) *GetPfsSqlSummariesResponseBodyDataList {
	s.FullScan = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetId(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.Id = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetInstanceId(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetLastTime(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.LastTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetLockLatencyAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.LockLatencyAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetLogicId(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.LogicId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetLogicReads(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.LogicReads = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetMaxLatency(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.MaxLatency = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetMutexSpins(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.MutexSpins = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetMutexWaits(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.MutexWaits = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetNodeId(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.NodeId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetPhysicalAsyncReads(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.PhysicalAsyncReads = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetPhysicalReads(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.PhysicalReads = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetPsql(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.Psql = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRedoWrites(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RedoWrites = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsAffected(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsAffected = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsAffectedAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsAffectedAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsExamined(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsExamined = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsExaminedAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsExaminedAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsSendAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsSendAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsSent(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsSent = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsSentAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsSentAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsSorted(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsSorted = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRtRate(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RtRate = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRwlockOsWaits(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.RwlockOsWaits = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRwlockSpinRounds(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.RwlockSpinRounds = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRwlockSpinWaits(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.RwlockSpinWaits = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSelectFullJoinAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SelectFullJoinAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSelectFullRangeJoinAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SelectFullRangeJoinAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSelectRangeAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SelectRangeAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSelectScanAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SelectScanAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSemisyncDelayTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SemisyncDelayTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetServerLockTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.ServerLockTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSortMergePasses(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SortMergePasses = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSortRangeAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SortRangeAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSortRowsAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SortRowsAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSortScanAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SortScanAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSqlId(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSqlType(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.SqlType = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTables(v []*string) *GetPfsSqlSummariesResponseBodyDataList {
	s.Tables = v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTimerWaitAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TimerWaitAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTimestamp(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.Timestamp = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTmpDiskTables(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TmpDiskTables = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTmpDiskTablesAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TmpDiskTablesAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTmpTables(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TmpTables = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTmpTablesAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TmpTablesAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTotalLatency(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TotalLatency = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTransactionLockTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TransactionLockTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetUserId(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.UserId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetWarnCount(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.WarnCount = &v
	return s
}

type GetPfsSqlSummariesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPfsSqlSummariesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPfsSqlSummariesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesResponse) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesResponse) SetHeaders(v map[string]*string) *GetPfsSqlSummariesResponse {
	s.Headers = v
	return s
}

func (s *GetPfsSqlSummariesResponse) SetStatusCode(v int32) *GetPfsSqlSummariesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPfsSqlSummariesResponse) SetBody(v *GetPfsSqlSummariesResponseBody) *GetPfsSqlSummariesResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeDataStatsRequest struct {
	// Specifies whether to sort the returned entries in ascending order. Default value: **true**. Valid values:
	//
	// 	- **true**: sorts the returned entries in ascending order.
	//
	// 	- **false**: does not sort the returned entries in ascending order.
	//
	// example:
	//
	// true
	Asc *string `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The name of the database to be queried.
	//
	// example:
	//
	// testdb01
	DbNames *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PostgreSQL**
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The keywords of the SQL template. Separate multiple keywords with spaces.
	//
	// example:
	//
	// select update
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The logical relationship between multiple keywords. Valid values:
	//
	// 	- **or**
	//
	// 	- **and**
	//
	// example:
	//
	// or
	LogicalOperator *string `json:"LogicalOperator,omitempty" xml:"LogicalOperator,omitempty"`
	// Specifies whether to query only SQL templates that need to be optimized. Default value: **false**. Valid values:
	//
	// 	- **true**: queries only SQL templates that need to be optimized.
	//
	// 	- **false**: does not query only SQL statements that need to be optimized.
	//
	// example:
	//
	// false
	OnlyOptimizedSql *string `json:"OnlyOptimizedSql,omitempty" xml:"OnlyOptimizedSql,omitempty"`
	// The field by which to sort the returned entries. Default value: **count**. Valid values:
	//
	// 	- **count**: the number of executions.
	//
	// 	- **maxQueryTime**: the longest execution time.
	//
	// 	- **avgQueryTime**: the average execution time.
	//
	// 	- **maxLockTime**: the longest lock wait time.
	//
	// 	- **avgLockTime**: the longest lock wait time.
	//
	// 	- **maxRowsExamined**: the largest number of scanned rows.
	//
	// 	- **avgRowsExamined**: the average number of scanned rows.
	//
	// 	- **maxRowsSent**: the largest number of returned rows.
	//
	// 	- **avgRowsSent**: the average number of returned rows.
	//
	// example:
	//
	// count
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// 	- **cn-china**: Chinese mainland
	//
	// 	- **cn-hongkong**: China (Hong Kong)
	//
	// 	- **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds*	- is left empty. If you leave **InstanceIds*	- empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region*	- does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  Set this parameter to **cn-china*	- for the instances that are created in the regions in the Chinese mainland.
	//
	// example:
	//
	// cn-china
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The tags that are used to filter SQL templates. Separate multiple tags with commas (,). For more information, see [Query governance](https://help.aliyun.com/document_detail/290038.html).
	//
	// example:
	//
	// DAS_NOT_IMPORTANT
	Rules *string `json:"Rules,omitempty" xml:"Rules,omitempty"`
	// The SQL template ID. You can query the ID of a template by calling the [GetQueryOptimizeExecErrorStats](https://help.aliyun.com/document_detail/405235.html) operation.
	//
	// example:
	//
	// 2e8147b5ca2dfc640dfd5e43d96a****
	SqlIds *string `json:"SqlIds,omitempty" xml:"SqlIds,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
	// The time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1642953600000
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// The account of the database to be queried.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetQueryOptimizeDataStatsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsRequest) SetAsc(v string) *GetQueryOptimizeDataStatsRequest {
	s.Asc = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetDbNames(v string) *GetQueryOptimizeDataStatsRequest {
	s.DbNames = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetEngine(v string) *GetQueryOptimizeDataStatsRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetInstanceIds(v string) *GetQueryOptimizeDataStatsRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetKeywords(v string) *GetQueryOptimizeDataStatsRequest {
	s.Keywords = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetLogicalOperator(v string) *GetQueryOptimizeDataStatsRequest {
	s.LogicalOperator = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetOnlyOptimizedSql(v string) *GetQueryOptimizeDataStatsRequest {
	s.OnlyOptimizedSql = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetOrderBy(v string) *GetQueryOptimizeDataStatsRequest {
	s.OrderBy = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetPageNo(v string) *GetQueryOptimizeDataStatsRequest {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetPageSize(v string) *GetQueryOptimizeDataStatsRequest {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetRegion(v string) *GetQueryOptimizeDataStatsRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetRules(v string) *GetQueryOptimizeDataStatsRequest {
	s.Rules = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetSqlIds(v string) *GetQueryOptimizeDataStatsRequest {
	s.SqlIds = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetTagNames(v string) *GetQueryOptimizeDataStatsRequest {
	s.TagNames = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetTime(v string) *GetQueryOptimizeDataStatsRequest {
	s.Time = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetUser(v string) *GetQueryOptimizeDataStatsRequest {
	s.User = &v
	return s
}

type GetQueryOptimizeDataStatsResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetQueryOptimizeDataStatsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeDataStatsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetCode(v string) *GetQueryOptimizeDataStatsResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetData(v *GetQueryOptimizeDataStatsResponseBodyData) *GetQueryOptimizeDataStatsResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetMessage(v string) *GetQueryOptimizeDataStatsResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetRequestId(v string) *GetQueryOptimizeDataStatsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetSuccess(v string) *GetQueryOptimizeDataStatsResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeDataStatsResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The information about the SQL templates.
	List []*GetQueryOptimizeDataStatsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeDataStatsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetExtra(v string) *GetQueryOptimizeDataStatsResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetList(v []*GetQueryOptimizeDataStatsResponseBodyDataList) *GetQueryOptimizeDataStatsResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeDataStatsResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeDataStatsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetTotal(v int64) *GetQueryOptimizeDataStatsResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeDataStatsResponseBodyDataList struct {
	// The average lock wait time. Unit: seconds.
	//
	// example:
	//
	// 0.1
	AvgLockTime *float64 `json:"AvgLockTime,omitempty" xml:"AvgLockTime,omitempty"`
	// The average query execution time. Unit: seconds.
	//
	// example:
	//
	// 1.1
	AvgQueryTime *float64 `json:"AvgQueryTime,omitempty" xml:"AvgQueryTime,omitempty"`
	// The average number of rows affected by the SQL statement.
	//
	// > A value of -1 indicates that this parameter is not collected.
	//
	// example:
	//
	// 100.1
	AvgRowsAffected *float64 `json:"AvgRowsAffected,omitempty" xml:"AvgRowsAffected,omitempty"`
	// The average number of scanned rows.
	//
	// example:
	//
	// 100.1
	AvgRowsExamined *float64 `json:"AvgRowsExamined,omitempty" xml:"AvgRowsExamined,omitempty"`
	// The average number of returned rows.
	//
	// example:
	//
	// 100.1
	AvgRowsSent *float64 `json:"AvgRowsSent,omitempty" xml:"AvgRowsSent,omitempty"`
	// The number of times that the SQL template is executed.
	//
	// example:
	//
	// 100
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database to which the SQL template belongs.
	//
	// example:
	//
	// testdb01
	Dbname *string `json:"Dbname,omitempty" xml:"Dbname,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The longest lock wait time. Unit: seconds.
	//
	// example:
	//
	// 0.1
	MaxLockTime *float64 `json:"MaxLockTime,omitempty" xml:"MaxLockTime,omitempty"`
	// The longest query execution time. Unit: seconds.
	//
	// example:
	//
	// 1.1
	MaxQueryTime *float64 `json:"MaxQueryTime,omitempty" xml:"MaxQueryTime,omitempty"`
	// The largest number of rows affected by the SQL template.
	//
	// > A value of -1 indicates that this parameter is not collected.
	//
	// example:
	//
	// 10000
	MaxRowsAffected *int64 `json:"MaxRowsAffected,omitempty" xml:"MaxRowsAffected,omitempty"`
	// The largest number of scanned rows.
	//
	// example:
	//
	// 100000
	MaxRowsExamined *int64 `json:"MaxRowsExamined,omitempty" xml:"MaxRowsExamined,omitempty"`
	// The largest number of returned rows.
	//
	// example:
	//
	// 10000
	MaxRowsSent *int64 `json:"MaxRowsSent,omitempty" xml:"MaxRowsSent,omitempty"`
	// The SQL template.
	//
	// example:
	//
	// select 1
	Psql *string `json:"Psql,omitempty" xml:"Psql,omitempty"`
	// The information about the rules.
	RuleList []*GetQueryOptimizeDataStatsResponseBodyDataListRuleList `json:"RuleList,omitempty" xml:"RuleList,omitempty" type:"Repeated"`
	// The SQL template ID.
	//
	// example:
	//
	// 2e8147b5ca2dfc640dfd5e43d96a****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The sample query that took the longest time to execute.
	//
	// example:
	//
	// select 2
	SqlSample *string `json:"SqlSample,omitempty" xml:"SqlSample,omitempty"`
	// The type of the SQL statement.
	//
	// example:
	//
	// INSERT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The account of the database.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetQueryOptimizeDataStatsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgLockTime(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgLockTime = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgQueryTime(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgQueryTime = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgRowsAffected(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgRowsAffected = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgRowsExamined(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgRowsExamined = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgRowsSent(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgRowsSent = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetCount(v int32) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.Count = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetDbname(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.Dbname = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetInstanceId(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxLockTime(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxLockTime = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxQueryTime(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxQueryTime = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxRowsAffected(v int64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxRowsAffected = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxRowsExamined(v int64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxRowsExamined = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxRowsSent(v int64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxRowsSent = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetPsql(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.Psql = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetRuleList(v []*GetQueryOptimizeDataStatsResponseBodyDataListRuleList) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.RuleList = v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetSqlId(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetSqlSample(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.SqlSample = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetSqlType(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.SqlType = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetUser(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.User = &v
	return s
}

type GetQueryOptimizeDataStatsResponseBodyDataListRuleList struct {
	// The rule name.
	//
	// example:
	//
	// DAS_NOT_IMPORTANT
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the rule. Valid values:
	//
	// 	- **Predefined**
	//
	// 	- **UserDefined**
	//
	// example:
	//
	// Predefined
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetQueryOptimizeDataStatsResponseBodyDataListRuleList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponseBodyDataListRuleList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataListRuleList) SetName(v string) *GetQueryOptimizeDataStatsResponseBodyDataListRuleList {
	s.Name = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataListRuleList) SetType(v string) *GetQueryOptimizeDataStatsResponseBodyDataListRuleList {
	s.Type = &v
	return s
}

type GetQueryOptimizeDataStatsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetQueryOptimizeDataStatsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetQueryOptimizeDataStatsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeDataStatsResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeDataStatsResponse) SetStatusCode(v int32) *GetQueryOptimizeDataStatsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponse) SetBody(v *GetQueryOptimizeDataStatsResponseBody) *GetQueryOptimizeDataStatsResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeDataTopRequest struct {
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PostgreSQL**
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// 	- **cn-china**: Chinese mainland
	//
	// 	- **cn-hongkong**: China (Hong Kong)
	//
	// 	- **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds*	- is left empty. If you leave **InstanceIds*	- empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region*	- does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  Set this parameter to **cn-china*	- for all your instances that reside in the regions in the Chinese mainland.
	//
	// example:
	//
	// cn-china
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
	// The time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1642953600000
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// The type of instances that you want to query. Valid values:
	//
	// 	- **RED**: the best-performing instances
	//
	// 	- **BLACK**: the worst-performing instances
	//
	// This parameter is required.
	//
	// example:
	//
	// RED
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetQueryOptimizeDataTopRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopRequest) SetEngine(v string) *GetQueryOptimizeDataTopRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetInstanceIds(v string) *GetQueryOptimizeDataTopRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetRegion(v string) *GetQueryOptimizeDataTopRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetTagNames(v string) *GetQueryOptimizeDataTopRequest {
	s.TagNames = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetTime(v string) *GetQueryOptimizeDataTopRequest {
	s.Time = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetType(v string) *GetQueryOptimizeDataTopRequest {
	s.Type = &v
	return s
}

type GetQueryOptimizeDataTopResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetQueryOptimizeDataTopResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeDataTopResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopResponseBody) SetCode(v string) *GetQueryOptimizeDataTopResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBody) SetData(v *GetQueryOptimizeDataTopResponseBodyData) *GetQueryOptimizeDataTopResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBody) SetMessage(v string) *GetQueryOptimizeDataTopResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBody) SetRequestId(v string) *GetQueryOptimizeDataTopResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBody) SetSuccess(v string) *GetQueryOptimizeDataTopResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeDataTopResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The information about the instances.
	List []*GetQueryOptimizeDataTopResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeDataTopResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetExtra(v string) *GetQueryOptimizeDataTopResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetList(v []*GetQueryOptimizeDataTopResponseBodyDataList) *GetQueryOptimizeDataTopResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeDataTopResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeDataTopResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetTotal(v int64) *GetQueryOptimizeDataTopResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeDataTopResponseBodyDataList struct {
	// The instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The metric name. Valid values:
	//
	// 	- **sqlExecuteCount**: the number of slow SQL executions.
	//
	// 	- **optimizedSqlExecuteCount**: the number of slow SQL executions that need to be optimized.
	//
	// example:
	//
	// sqlExecuteCount
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The metric value.
	//
	// example:
	//
	// 100
	Value *float64 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetQueryOptimizeDataTopResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopResponseBodyDataList) SetInstanceId(v string) *GetQueryOptimizeDataTopResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyDataList) SetType(v string) *GetQueryOptimizeDataTopResponseBodyDataList {
	s.Type = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyDataList) SetValue(v float64) *GetQueryOptimizeDataTopResponseBodyDataList {
	s.Value = &v
	return s
}

type GetQueryOptimizeDataTopResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetQueryOptimizeDataTopResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetQueryOptimizeDataTopResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeDataTopResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeDataTopResponse) SetStatusCode(v int32) *GetQueryOptimizeDataTopResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponse) SetBody(v *GetQueryOptimizeDataTopResponseBody) *GetQueryOptimizeDataTopResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeDataTrendRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time, but not later than 00:00:00 (UTC+8) on the current day.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1643040000000
	End *string `json:"End,omitempty" xml:"End,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PostgreSQL**
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// 	- **cn-china**: Chinese mainland.
	//
	// 	- **cn-hongkong**: China (Hong Kong).
	//
	// 	- **ap-southeast-1**: Singapore.
	//
	// This parameter takes effect only if **InstanceIds*	- is left empty. If you leave **InstanceIds*	- empty, the system obtains data from the region specified by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region*	- does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  If your instances reside in the regions inside the Chinese mainland, set this parameter to **cn-china**.
	//
	// example:
	//
	// cn-china
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  You can specify a start time up to two months earlier than the current time.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1642435200000
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
}

func (s GetQueryOptimizeDataTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendRequest) SetEnd(v string) *GetQueryOptimizeDataTrendRequest {
	s.End = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetEngine(v string) *GetQueryOptimizeDataTrendRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetInstanceIds(v string) *GetQueryOptimizeDataTrendRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetRegion(v string) *GetQueryOptimizeDataTrendRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetStart(v string) *GetQueryOptimizeDataTrendRequest {
	s.Start = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetTagNames(v string) *GetQueryOptimizeDataTrendRequest {
	s.TagNames = &v
	return s
}

type GetQueryOptimizeDataTrendResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetQueryOptimizeDataTrendResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeDataTrendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetCode(v string) *GetQueryOptimizeDataTrendResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetData(v *GetQueryOptimizeDataTrendResponseBodyData) *GetQueryOptimizeDataTrendResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetMessage(v string) *GetQueryOptimizeDataTrendResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetRequestId(v string) *GetQueryOptimizeDataTrendResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetSuccess(v string) *GetQueryOptimizeDataTrendResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeDataTrendResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The details of the trend data.
	List []*GetQueryOptimizeDataTrendResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeDataTrendResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetExtra(v string) *GetQueryOptimizeDataTrendResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetList(v []*GetQueryOptimizeDataTrendResponseBodyDataList) *GetQueryOptimizeDataTrendResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeDataTrendResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeDataTrendResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetTotal(v int64) *GetQueryOptimizeDataTrendResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeDataTrendResponseBodyDataList struct {
	// The name of the metric. Valid values:
	//
	// 	- **sqlExecuteCount**: the number of executions of slow SQL queries.
	//
	// 	- **sqlExecuteCountDiff**: the difference in the number of executions of slow SQL queries compared to the previous day.
	//
	// 	- **sqlCount**: the number of slow SQL templates.
	//
	// 	- **sqlCountDiff**: the difference in the number of slow SQL templates compared to the previous day.
	//
	// 	- **optimizedSqlExecuteCount**: the number of optimizable executions of slow SQL queries.
	//
	// 	- **optimizedSqlExecuteCountDiff**: the difference in the number of optimizable executions of slow SQL queries compared to the previous day.
	//
	// 	- **optimizedSqlCount**: the number of optimizable slow SQL templates.
	//
	// 	- **optimizedSqlCountDiff**: the difference in the number of optimizable slow SQL templates compared to the previous day.
	//
	// example:
	//
	// sqlExecuteCount
	Kpi *string `json:"Kpi,omitempty" xml:"Kpi,omitempty"`
	// The data timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1643040000000
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The value of the metric.
	//
	// example:
	//
	// 1000
	Value *float64 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetQueryOptimizeDataTrendResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendResponseBodyDataList) SetKpi(v string) *GetQueryOptimizeDataTrendResponseBodyDataList {
	s.Kpi = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyDataList) SetTimestamp(v int64) *GetQueryOptimizeDataTrendResponseBodyDataList {
	s.Timestamp = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyDataList) SetValue(v float64) *GetQueryOptimizeDataTrendResponseBodyDataList {
	s.Value = &v
	return s
}

type GetQueryOptimizeDataTrendResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetQueryOptimizeDataTrendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetQueryOptimizeDataTrendResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeDataTrendResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeDataTrendResponse) SetStatusCode(v int32) *GetQueryOptimizeDataTrendResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponse) SetBody(v *GetQueryOptimizeDataTrendResponseBody) *GetQueryOptimizeDataTrendResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeExecErrorSampleRequest struct {
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PostgreSQL**
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The SQL template ID. You can call the [GetQueryOptimizeExecErrorStats](https://help.aliyun.com/document_detail/405235.html) operation to obtain the SQL template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2e8147b5ca2dfc640dfd5e43d96a****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The date to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1642953600000
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s GetQueryOptimizeExecErrorSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleRequest) SetEngine(v string) *GetQueryOptimizeExecErrorSampleRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleRequest) SetInstanceId(v string) *GetQueryOptimizeExecErrorSampleRequest {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleRequest) SetSqlId(v string) *GetQueryOptimizeExecErrorSampleRequest {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleRequest) SetTime(v string) *GetQueryOptimizeExecErrorSampleRequest {
	s.Time = &v
	return s
}

type GetQueryOptimizeExecErrorSampleResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetQueryOptimizeExecErrorSampleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeExecErrorSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetCode(v string) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetData(v *GetQueryOptimizeExecErrorSampleResponseBodyData) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetMessage(v string) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetRequestId(v string) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetSuccess(v string) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeExecErrorSampleResponseBodyData struct {
	// A reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The queried data.
	List []*GetQueryOptimizeExecErrorSampleResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeExecErrorSampleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetExtra(v string) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetList(v []*GetQueryOptimizeExecErrorSampleResponseBodyDataList) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetTotal(v int64) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeExecErrorSampleResponseBodyDataList struct {
	// The name of the database.
	//
	// example:
	//
	// testdb01
	Dbname *string `json:"Dbname,omitempty" xml:"Dbname,omitempty"`
	// The error code returned.
	//
	// example:
	//
	// 1146
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The IP address of the client that executes the SQL statement.
	//
	// example:
	//
	// 100.104.XX.XX
	OrigHost *string `json:"OrigHost,omitempty" xml:"OrigHost,omitempty"`
	// The SQL template ID.
	//
	// example:
	//
	// 2e8147b5ca2dfc640dfd5e43d96a****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The content of the SQL statement that failed to be executed.
	//
	// example:
	//
	// select 	- from test1
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The point in time when the failed SQL statement was executed. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1643020306739
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The username of the client that executes the SQL statement.
	//
	// example:
	//
	// test01
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetQueryOptimizeExecErrorSampleResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetDbname(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.Dbname = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetErrorCode(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.ErrorCode = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetOrigHost(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.OrigHost = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetSqlId(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetSqlText(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.SqlText = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetTimestamp(v int64) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.Timestamp = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetUser(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.User = &v
	return s
}

type GetQueryOptimizeExecErrorSampleResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetQueryOptimizeExecErrorSampleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetQueryOptimizeExecErrorSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeExecErrorSampleResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponse) SetStatusCode(v int32) *GetQueryOptimizeExecErrorSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponse) SetBody(v *GetQueryOptimizeExecErrorSampleResponseBody) *GetQueryOptimizeExecErrorSampleResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeExecErrorStatsRequest struct {
	// Specifies whether to sort the returned entries in ascending order. Default value: **true**. Valid values:
	//
	// 	- **true**: sorts the returned entries in ascending order.
	//
	// 	- **false**: does not sort the returned entries in ascending order.
	//
	// example:
	//
	// true
	Asc *string `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The name of the database to be queried.
	//
	// example:
	//
	// testdb01
	DbNames *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PostgreSQL**
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The keywords of the SQL template. Separate multiple keywords with spaces.
	//
	// example:
	//
	// select update
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The logical relationship between multiple keywords. Valid values:
	//
	// 	- **or**
	//
	// 	- **and**
	//
	// example:
	//
	// or
	LogicalOperator *string `json:"LogicalOperator,omitempty" xml:"LogicalOperator,omitempty"`
	// The field by which to sort the returned entries. Only error_count is supported, which specifies that the entries are sorted based on the number of failed executions.
	//
	// example:
	//
	// error_count
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// 	- **cn-china**: Chinese mainland
	//
	// 	- **cn-hongkong**: China (Hong Kong)
	//
	// 	- **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds*	- is left empty. If you leave **InstanceIds*	- empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region*	- does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  Set this parameter to **cn-china*	- for the instances that are created in the regions in the Chinese mainland.
	//
	// example:
	//
	// cn-china
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1642953600000
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s GetQueryOptimizeExecErrorStatsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetAsc(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Asc = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetDbNames(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.DbNames = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetEngine(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetInstanceIds(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetKeywords(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Keywords = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetLogicalOperator(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.LogicalOperator = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetOrderBy(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.OrderBy = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetPageNo(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetPageSize(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetRegion(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetTime(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Time = &v
	return s
}

type GetQueryOptimizeExecErrorStatsResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetQueryOptimizeExecErrorStatsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeExecErrorStatsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetCode(v string) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetData(v *GetQueryOptimizeExecErrorStatsResponseBodyData) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetMessage(v string) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetRequestId(v string) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetSuccess(v string) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeExecErrorStatsResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The information about the SQL templates that failed to execute.
	List []*GetQueryOptimizeExecErrorStatsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 19
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeExecErrorStatsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetExtra(v string) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetList(v []*GetQueryOptimizeExecErrorStatsResponseBodyDataList) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetTotal(v int64) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeExecErrorStatsResponseBodyDataList struct {
	// The name of the database.
	//
	// example:
	//
	// testdb01
	Dbname *string `json:"Dbname,omitempty" xml:"Dbname,omitempty"`
	// The error code returned if the request failed.
	//
	// example:
	//
	// 1146
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The number of errors.
	//
	// example:
	//
	// 10
	ErrorCount *int64 `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The alias of the database instance.
	//
	// example:
	//
	// test01
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The SQL template ID.
	//
	// example:
	//
	// 2e8147b5ca2dfc640dfd5e43d96a****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The content of the SQL template.
	//
	// example:
	//
	// select 	- from test1
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
}

func (s GetQueryOptimizeExecErrorStatsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetDbname(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.Dbname = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetErrorCode(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.ErrorCode = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetErrorCount(v int64) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.ErrorCount = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetInstanceId(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetInstanceName(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.InstanceName = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetSqlId(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetSqlText(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.SqlText = &v
	return s
}

type GetQueryOptimizeExecErrorStatsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetQueryOptimizeExecErrorStatsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetQueryOptimizeExecErrorStatsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeExecErrorStatsResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponse) SetStatusCode(v int32) *GetQueryOptimizeExecErrorStatsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponse) SetBody(v *GetQueryOptimizeExecErrorStatsResponseBody) *GetQueryOptimizeExecErrorStatsResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeRuleListRequest struct {
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PostgreSQL**
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// 	- **cn-china**: Chinese mainland
	//
	// 	- **cn-hongkong**: China (Hong Kong)
	//
	// 	- **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds*	- is left empty. If you leave **InstanceIds*	- empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region*	- does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  If your instances reside in the regions in the Chinese mainland, set this parameter to **cn-china**.
	//
	// example:
	//
	// cn-china
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
}

func (s GetQueryOptimizeRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListRequest) SetEngine(v string) *GetQueryOptimizeRuleListRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeRuleListRequest) SetInstanceIds(v string) *GetQueryOptimizeRuleListRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeRuleListRequest) SetRegion(v string) *GetQueryOptimizeRuleListRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeRuleListRequest) SetTagNames(v string) *GetQueryOptimizeRuleListRequest {
	s.TagNames = &v
	return s
}

type GetQueryOptimizeRuleListResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetQueryOptimizeRuleListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeRuleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListResponseBody) SetCode(v string) *GetQueryOptimizeRuleListResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBody) SetData(v *GetQueryOptimizeRuleListResponseBodyData) *GetQueryOptimizeRuleListResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBody) SetMessage(v string) *GetQueryOptimizeRuleListResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBody) SetRequestId(v string) *GetQueryOptimizeRuleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBody) SetSuccess(v string) *GetQueryOptimizeRuleListResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeRuleListResponseBodyData struct {
	// A reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The information about tags.
	List []*GetQueryOptimizeRuleListResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeRuleListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetExtra(v string) *GetQueryOptimizeRuleListResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetList(v []*GetQueryOptimizeRuleListResponseBodyDataList) *GetQueryOptimizeRuleListResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeRuleListResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeRuleListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetTotal(v int64) *GetQueryOptimizeRuleListResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeRuleListResponseBodyDataList struct {
	// The name of the tag.
	//
	// example:
	//
	// LARGE_ROWS_EXAMINED
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The type of the tag. **Predefined*	- is returned, which indicates that the tag is added by the system.
	//
	// example:
	//
	// Predefined
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetQueryOptimizeRuleListResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListResponseBodyDataList) SetName(v string) *GetQueryOptimizeRuleListResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyDataList) SetRuleId(v string) *GetQueryOptimizeRuleListResponseBodyDataList {
	s.RuleId = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyDataList) SetType(v string) *GetQueryOptimizeRuleListResponseBodyDataList {
	s.Type = &v
	return s
}

type GetQueryOptimizeRuleListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetQueryOptimizeRuleListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetQueryOptimizeRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeRuleListResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeRuleListResponse) SetStatusCode(v int32) *GetQueryOptimizeRuleListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponse) SetBody(v *GetQueryOptimizeRuleListResponseBody) *GetQueryOptimizeRuleListResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeShareUrlRequest struct {
	// Specifies whether to sort the returned entries in ascending order. Default value: **true**. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Asc *bool `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The name of the database to be queried.
	//
	// example:
	//
	// testdb01
	DbNames *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**: ApsaraDB RDS for MySQL
	//
	// 	- **PolarDBMySQL**: PolarDB for MySQL
	//
	// 	- **PostgreSQL**: ApsaraDB RDS for PostgreSQL
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The keywords of the SQL template. Separate multiple keywords with spaces.
	//
	// example:
	//
	// select update
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The logical relationship between multiple keywords. Valid values:
	//
	// 	- **or**
	//
	// 	- **and**
	//
	// example:
	//
	// or
	LogicalOperator *string `json:"LogicalOperator,omitempty" xml:"LogicalOperator,omitempty"`
	// Specifies whether to query only SQL templates that need to be optimized. Default value: **false**. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	OnlyOptimizedSql *bool `json:"OnlyOptimizedSql,omitempty" xml:"OnlyOptimizedSql,omitempty"`
	// The field by which to sort the returned entries. Default value: **count**. Valid values:
	//
	// 	- **count**: the number of executions.
	//
	// 	- **maxQueryTime**: the longest execution duration.
	//
	// 	- **avgQueryTime**: the average execution duration.
	//
	// 	- **maxLockTime**: the longest lock wait duration.
	//
	// 	- **avgLockTime**: the average lock wait duration.
	//
	// 	- **maxRowsExamined**: the largest number of scanned rows.
	//
	// 	- **avgRowsExamined**: the average number of scanned rows.
	//
	// 	- **maxRowsSent**: the largest number of returned rows.
	//
	// 	- **avgRowsSent**: the average number of returned rows.
	//
	// example:
	//
	// count
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// 	- **cn-china**: Chinese mainland
	//
	// 	- **cn-hongkong**: China (Hong Kong)
	//
	// 	- **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds*	- is left empty. If you leave **InstanceIds*	- empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region*	- does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  If your instances reside in the regions in the Chinese mainland, set this parameter to **cn-china**.
	//
	// example:
	//
	// cn-china
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The tags that are used to filter SQL templates. Separate multiple tags with commas (,). For more information, see [Query governance](https://help.aliyun.com/document_detail/290038.html).
	//
	// example:
	//
	// DAS_NOT_IMPORTANT
	Rules *string `json:"Rules,omitempty" xml:"Rules,omitempty"`
	// The SQL template IDs. You can call the [GetQueryOptimizeExecErrorStats](https://help.aliyun.com/document_detail/405261.html) operation to obtain the SQL template IDs.
	//
	// example:
	//
	// 6068ce044e3dc9b903979672fb0b69df,d12515c015fc9f41a0778a9e1de0****
	SqlIds *string `json:"SqlIds,omitempty" xml:"SqlIds,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
	// The date to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1642953600000
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The account of the database to be queried.
	//
	// example:
	//
	// testUser
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetQueryOptimizeShareUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeShareUrlRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeShareUrlRequest) SetAsc(v bool) *GetQueryOptimizeShareUrlRequest {
	s.Asc = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetDbNames(v string) *GetQueryOptimizeShareUrlRequest {
	s.DbNames = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetEngine(v string) *GetQueryOptimizeShareUrlRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetInstanceIds(v string) *GetQueryOptimizeShareUrlRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetKeywords(v string) *GetQueryOptimizeShareUrlRequest {
	s.Keywords = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetLogicalOperator(v string) *GetQueryOptimizeShareUrlRequest {
	s.LogicalOperator = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetOnlyOptimizedSql(v bool) *GetQueryOptimizeShareUrlRequest {
	s.OnlyOptimizedSql = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetOrderBy(v string) *GetQueryOptimizeShareUrlRequest {
	s.OrderBy = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetPageNo(v int32) *GetQueryOptimizeShareUrlRequest {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetPageSize(v int32) *GetQueryOptimizeShareUrlRequest {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetRegion(v string) *GetQueryOptimizeShareUrlRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetRules(v string) *GetQueryOptimizeShareUrlRequest {
	s.Rules = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetSqlIds(v string) *GetQueryOptimizeShareUrlRequest {
	s.SqlIds = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetTagNames(v string) *GetQueryOptimizeShareUrlRequest {
	s.TagNames = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetTime(v int64) *GetQueryOptimizeShareUrlRequest {
	s.Time = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetUser(v string) *GetQueryOptimizeShareUrlRequest {
	s.User = &v
	return s
}

type GetQueryOptimizeShareUrlResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The share URL.
	//
	// example:
	//
	// https://hdm.console.aliyun.com/#/queryOptimize?Keywords=&OnlyOptimizedSql=true&Time=1684771200000&Engine=MySQL&InstanceIds=&Rules=&PageNo=1&PageSize=10&OrderBy=count&Asc=false&SqlIds=&dbNames=&region=cn-china&user=
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeShareUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeShareUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetCode(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetData(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.Data = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetMessage(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetRequestId(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetSuccess(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeShareUrlResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetQueryOptimizeShareUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetQueryOptimizeShareUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeShareUrlResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeShareUrlResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeShareUrlResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeShareUrlResponse) SetStatusCode(v int32) *GetQueryOptimizeShareUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponse) SetBody(v *GetQueryOptimizeShareUrlResponseBody) *GetQueryOptimizeShareUrlResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeSolutionRequest struct {
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PostgreSQL**
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID. You can call the [GetQueryOptimizeDataStats](https://help.aliyun.com/document_detail/405261.html) operation to query the instance ID.
	//
	// example:
	//
	// rm-bp1o3z6beqpej****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The tag ID. For more information, see [Query governance](https://help.aliyun.com/document_detail/290038.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// LARGE_ROWS_EXAMINED
	RuleIds *string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty"`
	// The SQL template ID. You can call the [GetQueryOptimizeDataStats](https://help.aliyun.com/document_detail/405261.html) operation to query the SQL template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 05fecf7e7b3efd123c4d5197035f****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
}

func (s GetQueryOptimizeSolutionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionRequest) SetEngine(v string) *GetQueryOptimizeSolutionRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeSolutionRequest) SetInstanceId(v string) *GetQueryOptimizeSolutionRequest {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeSolutionRequest) SetRuleIds(v string) *GetQueryOptimizeSolutionRequest {
	s.RuleIds = &v
	return s
}

func (s *GetQueryOptimizeSolutionRequest) SetSqlId(v string) *GetQueryOptimizeSolutionRequest {
	s.SqlId = &v
	return s
}

type GetQueryOptimizeSolutionResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetQueryOptimizeSolutionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30FF4E40-17F3-5A51-AB23-43F30D9B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeSolutionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionResponseBody) SetCode(v string) *GetQueryOptimizeSolutionResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBody) SetData(v *GetQueryOptimizeSolutionResponseBodyData) *GetQueryOptimizeSolutionResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBody) SetMessage(v string) *GetQueryOptimizeSolutionResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBody) SetRequestId(v string) *GetQueryOptimizeSolutionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBody) SetSuccess(v string) *GetQueryOptimizeSolutionResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeSolutionResponseBodyData struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The optimization suggestions.
	List []*GetQueryOptimizeSolutionResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeSolutionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetExtra(v string) *GetQueryOptimizeSolutionResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetList(v []*GetQueryOptimizeSolutionResponseBodyDataList) *GetQueryOptimizeSolutionResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeSolutionResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeSolutionResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetTotal(v int64) *GetQueryOptimizeSolutionResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeSolutionResponseBodyDataList struct {
	// The severity level. Valid values:
	//
	// 	- **INFO**
	//
	// 	- **WARN**
	//
	// example:
	//
	// INFO
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The tag ID.
	//
	// example:
	//
	// LARGE_ROWS_EXAMINED
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The suggestion.
	//
	// example:
	//
	// LARGE_ROWS_EXAMINED_SOLUTION
	Solution *string `json:"Solution,omitempty" xml:"Solution,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	SolutionExt *string `json:"SolutionExt,omitempty" xml:"SolutionExt,omitempty"`
}

func (s GetQueryOptimizeSolutionResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionResponseBodyDataList) SetLevel(v string) *GetQueryOptimizeSolutionResponseBodyDataList {
	s.Level = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyDataList) SetRuleId(v string) *GetQueryOptimizeSolutionResponseBodyDataList {
	s.RuleId = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyDataList) SetSolution(v string) *GetQueryOptimizeSolutionResponseBodyDataList {
	s.Solution = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyDataList) SetSolutionExt(v string) *GetQueryOptimizeSolutionResponseBodyDataList {
	s.SolutionExt = &v
	return s
}

type GetQueryOptimizeSolutionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetQueryOptimizeSolutionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetQueryOptimizeSolutionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeSolutionResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeSolutionResponse) SetStatusCode(v int32) *GetQueryOptimizeSolutionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponse) SetBody(v *GetQueryOptimizeSolutionResponseBody) *GetQueryOptimizeSolutionResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeTagRequest struct {
	// The database engine. Valid values:
	//
	// 	- **MySQL**: ApsaraDB RDS for MySQL
	//
	// 	- **PolarDBMySQL**: PolarDB for MySQL
	//
	// 	- **PostgreSQL**: ApsaraDB RDS for PostgreSQL
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The SQL template ID. You can call the [GetQueryOptimizeDataStats](https://help.aliyun.com/document_detail/405261.html) operation to query the SQL template ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 29d9fef63e347d39c3436658a5fe5f2b
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
}

func (s GetQueryOptimizeTagRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeTagRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeTagRequest) SetEngine(v string) *GetQueryOptimizeTagRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeTagRequest) SetInstanceId(v string) *GetQueryOptimizeTagRequest {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeTagRequest) SetSqlId(v string) *GetQueryOptimizeTagRequest {
	s.SqlId = &v
	return s
}

type GetQueryOptimizeTagResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned SQL tag data.
	Data *GetQueryOptimizeTagResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeTagResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeTagResponseBody) SetCode(v string) *GetQueryOptimizeTagResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBody) SetData(v *GetQueryOptimizeTagResponseBodyData) *GetQueryOptimizeTagResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeTagResponseBody) SetMessage(v string) *GetQueryOptimizeTagResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBody) SetRequestId(v string) *GetQueryOptimizeTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBody) SetSuccess(v string) *GetQueryOptimizeTagResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeTagResponseBodyData struct {
	// The remarks.
	//
	// example:
	//
	// Slow SQL queries of offline synchronization. No optimization is required.
	Comments *string `json:"Comments,omitempty" xml:"Comments,omitempty"`
	// The SQL template ID.
	//
	// example:
	//
	// 651b56fe9418d48edb8fdf0980ec****
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The SQL tags. Multiple tags are separated by commas (,).
	//
	// example:
	//
	// DAS_IN_PLAN,DAS_NOT_IMPORTANT
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s GetQueryOptimizeTagResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeTagResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeTagResponseBodyData) SetComments(v string) *GetQueryOptimizeTagResponseBodyData {
	s.Comments = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBodyData) SetSqlId(v string) *GetQueryOptimizeTagResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBodyData) SetTags(v string) *GetQueryOptimizeTagResponseBodyData {
	s.Tags = &v
	return s
}

type GetQueryOptimizeTagResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetQueryOptimizeTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetQueryOptimizeTagResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeTagResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeTagResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeTagResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeTagResponse) SetStatusCode(v int32) *GetQueryOptimizeTagResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeTagResponse) SetBody(v *GetQueryOptimizeTagResponseBody) *GetQueryOptimizeTagResponse {
	s.Body = v
	return s
}

type GetRedisAllSessionRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-2zemyfd1sh1u2i****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetRedisAllSessionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionRequest) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionRequest) SetConsoleContext(v string) *GetRedisAllSessionRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetRedisAllSessionRequest) SetInstanceId(v string) *GetRedisAllSessionRequest {
	s.InstanceId = &v
	return s
}

type GetRedisAllSessionResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The session data.
	Data *GetRedisAllSessionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 40C6E9AF-6C23-5614-AA83-34344CC6****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRedisAllSessionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponseBody) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponseBody) SetCode(v int64) *GetRedisAllSessionResponseBody {
	s.Code = &v
	return s
}

func (s *GetRedisAllSessionResponseBody) SetData(v *GetRedisAllSessionResponseBodyData) *GetRedisAllSessionResponseBody {
	s.Data = v
	return s
}

func (s *GetRedisAllSessionResponseBody) SetMessage(v string) *GetRedisAllSessionResponseBody {
	s.Message = &v
	return s
}

func (s *GetRedisAllSessionResponseBody) SetRequestId(v string) *GetRedisAllSessionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRedisAllSessionResponseBody) SetSuccess(v bool) *GetRedisAllSessionResponseBody {
	s.Success = &v
	return s
}

type GetRedisAllSessionResponseBodyData struct {
	// The information about the sessions.
	Sessions []*GetRedisAllSessionResponseBodyDataSessions `json:"Sessions,omitempty" xml:"Sessions,omitempty" type:"Repeated"`
	// The statistics on the access source.
	SourceStats []*GetRedisAllSessionResponseBodyDataSourceStats `json:"SourceStats,omitempty" xml:"SourceStats,omitempty" type:"Repeated"`
	// The time when the instance sessions were returned. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1660100753556
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The total number of sessions.
	//
	// example:
	//
	// 2
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetRedisAllSessionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponseBodyData) SetSessions(v []*GetRedisAllSessionResponseBodyDataSessions) *GetRedisAllSessionResponseBodyData {
	s.Sessions = v
	return s
}

func (s *GetRedisAllSessionResponseBodyData) SetSourceStats(v []*GetRedisAllSessionResponseBodyDataSourceStats) *GetRedisAllSessionResponseBodyData {
	s.SourceStats = v
	return s
}

func (s *GetRedisAllSessionResponseBodyData) SetTimestamp(v int64) *GetRedisAllSessionResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyData) SetTotal(v int64) *GetRedisAllSessionResponseBodyData {
	s.Total = &v
	return s
}

type GetRedisAllSessionResponseBodyDataSessions struct {
	// The IP address and port number of the client.
	//
	// example:
	//
	// 172.16.XX.XX:53458
	Addr *string `json:"Addr,omitempty" xml:"Addr,omitempty"`
	// The connection duration of the session. Unit: seconds.
	//
	// example:
	//
	// 12
	Age *string `json:"Age,omitempty" xml:"Age,omitempty"`
	// The IP address of the client.
	//
	// example:
	//
	// 172.16.XX.XX
	Client *string `json:"Client,omitempty" xml:"Client,omitempty"`
	// The alias of the client.
	//
	// example:
	//
	// prod ip
	ClientDesc *string `json:"ClientDesc,omitempty" xml:"ClientDesc,omitempty"`
	// The command that was last run.
	//
	// example:
	//
	// PING
	Cmd *string `json:"Cmd,omitempty" xml:"Cmd,omitempty"`
	// The ID of the database that the client is using.
	//
	// example:
	//
	// 0
	Db *int64 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The file descriptor event. Valid values:
	//
	// 	- **r**: Client sockets are readable in the event loop.
	//
	// 	- **w**: Client sockets are writable in the event loop.
	//
	// example:
	//
	// r
	Events *string `json:"Events,omitempty" xml:"Events,omitempty"`
	// The file descriptor that is used by sockets.
	//
	// example:
	//
	// 73
	Fd *int64 `json:"Fd,omitempty" xml:"Fd,omitempty"`
	// The client flag. Valid values:
	//
	// 	- **A**: The connection needs to be closed at the earliest opportunity.
	//
	// 	- **b**: The client is waiting for blocked events.
	//
	// 	- **c**: The connection is closed after all replies are written.
	//
	// 	- **d**: The monitored keys have been modified, and the `EXEC` command is about to fail.
	//
	// 	- **i**: The client is waiting for VM I/O operations. This value is no longer used.
	//
	// 	- **M**: The client is the primary node.
	//
	// 	- **N**: No special flags are configured.
	//
	// 	- **O**: The client is in monitor mode.
	//
	// 	- **r**: The client is a cluster node in read-only mode.
	//
	// 	- **S**: The client is a replica node in normal mode.
	//
	// 	- **u**: The client is not blocked.
	//
	// 	- **U**: The client is connected by using UNIX domain sockets.
	//
	// 	- **x**: The client is executing a transaction.
	//
	// example:
	//
	// N
	Flags *string `json:"Flags,omitempty" xml:"Flags,omitempty"`
	// The client ID.
	//
	// example:
	//
	// 9080586
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The duration during which the session is in the idle state. Unit: seconds.
	//
	// example:
	//
	// 8
	Idle *int64 `json:"Idle,omitempty" xml:"Idle,omitempty"`
	// The number of commands in `MULTI` or `EXEC`.
	//
	// example:
	//
	// -1
	Multi *int64 `json:"Multi,omitempty" xml:"Multi,omitempty"`
	// The name of the client.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The node ID.
	//
	// example:
	//
	// r-2zemyfd1sh1u2i****-proxy-14#1679****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The size of the fixed output buffer. Unit: bytes.
	//
	// example:
	//
	// 0
	Obl *int64 `json:"Obl,omitempty" xml:"Obl,omitempty"`
	// The number of objects contained in the output list.
	//
	// example:
	//
	// 0
	Oll *int64 `json:"Oll,omitempty" xml:"Oll,omitempty"`
	// The size of the output buffer. Unit: bytes.
	//
	// example:
	//
	// 0
	Omem *int64 `json:"Omem,omitempty" xml:"Omem,omitempty"`
	// The number of subscriptions that match the pattern.
	//
	// example:
	//
	// 0
	Psub *int64 `json:"Psub,omitempty" xml:"Psub,omitempty"`
	// The size of the input buffer. Unit: bytes.
	//
	// example:
	//
	// 0
	Qbuf *int64 `json:"Qbuf,omitempty" xml:"Qbuf,omitempty"`
	// The remaining size of the input buffer. Unit: bytes.
	//
	// example:
	//
	// 0
	QbufFree *int64 `json:"QbufFree,omitempty" xml:"QbufFree,omitempty"`
	// The number of subscribed channels.
	//
	// example:
	//
	// 0
	Sub *int64 `json:"Sub,omitempty" xml:"Sub,omitempty"`
}

func (s GetRedisAllSessionResponseBodyDataSessions) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponseBodyDataSessions) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetAddr(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Addr = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetAge(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Age = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetClient(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Client = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetClientDesc(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.ClientDesc = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetCmd(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Cmd = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetDb(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Db = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetEvents(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Events = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetFd(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Fd = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetFlags(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Flags = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetId(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Id = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetIdle(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Idle = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetMulti(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Multi = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetName(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Name = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetNodeId(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.NodeId = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetObl(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Obl = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetOll(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Oll = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetOmem(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Omem = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetPsub(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Psub = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetQbuf(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Qbuf = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetQbufFree(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.QbufFree = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetSub(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Sub = &v
	return s
}

type GetRedisAllSessionResponseBodyDataSourceStats struct {
	// The total number of sessions from the access source.
	//
	// example:
	//
	// 1
	Count *string `json:"Count,omitempty" xml:"Count,omitempty"`
	// The client IDs.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The access source.
	//
	// example:
	//
	// 172.16.XX.XX
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s GetRedisAllSessionResponseBodyDataSourceStats) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponseBodyDataSourceStats) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponseBodyDataSourceStats) SetCount(v string) *GetRedisAllSessionResponseBodyDataSourceStats {
	s.Count = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSourceStats) SetIds(v []*int64) *GetRedisAllSessionResponseBodyDataSourceStats {
	s.Ids = v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSourceStats) SetKey(v string) *GetRedisAllSessionResponseBodyDataSourceStats {
	s.Key = &v
	return s
}

type GetRedisAllSessionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRedisAllSessionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRedisAllSessionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponse) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponse) SetHeaders(v map[string]*string) *GetRedisAllSessionResponse {
	s.Headers = v
	return s
}

func (s *GetRedisAllSessionResponse) SetStatusCode(v int32) *GetRedisAllSessionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRedisAllSessionResponse) SetBody(v *GetRedisAllSessionResponseBody) *GetRedisAllSessionResponse {
	s.Body = v
	return s
}

type GetRequestDiagnosisPageRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1634972640000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-0iwhhl8gx0ld6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL, PolarDB for PostgreSQL (Compatible with Oracle), or ApsaraDB for MongoDB instance.
	//
	// example:
	//
	// 202****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. The value must be a positive integer. Default value: 10.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1633071840000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetRequestDiagnosisPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageRequest) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageRequest) SetEndTime(v int64) *GetRequestDiagnosisPageRequest {
	s.EndTime = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetInstanceId(v string) *GetRequestDiagnosisPageRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetNodeId(v string) *GetRequestDiagnosisPageRequest {
	s.NodeId = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetPageNo(v int32) *GetRequestDiagnosisPageRequest {
	s.PageNo = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetPageSize(v int32) *GetRequestDiagnosisPageRequest {
	s.PageSize = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetStartTime(v int64) *GetRequestDiagnosisPageRequest {
	s.StartTime = &v
	return s
}

type GetRequestDiagnosisPageResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetRequestDiagnosisPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message that contains information such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 800FBAF5-A539-5B97-A09E-C63AB2F7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRequestDiagnosisPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageResponseBody) SetCode(v string) *GetRequestDiagnosisPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBody) SetData(v *GetRequestDiagnosisPageResponseBodyData) *GetRequestDiagnosisPageResponseBody {
	s.Data = v
	return s
}

func (s *GetRequestDiagnosisPageResponseBody) SetMessage(v string) *GetRequestDiagnosisPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBody) SetRequestId(v string) *GetRequestDiagnosisPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBody) SetSuccess(v string) *GetRequestDiagnosisPageResponseBody {
	s.Success = &v
	return s
}

type GetRequestDiagnosisPageResponseBodyData struct {
	// Additional information.
	//
	// example:
	//
	// {"":""}
	Extra *string `json:"extra,omitempty" xml:"extra,omitempty"`
	// The SQL diagnostics records returned.
	List []*GetRequestDiagnosisPageResponseBodyDataList `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// The page number. The value must be a positive integer. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"pageNo,omitempty" xml:"pageNo,omitempty"`
	// The number of entries per page. The value must be a positive integer. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 100
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s GetRequestDiagnosisPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetExtra(v string) *GetRequestDiagnosisPageResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetList(v []*GetRequestDiagnosisPageResponseBodyDataList) *GetRequestDiagnosisPageResponseBodyData {
	s.List = v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetPageNo(v int64) *GetRequestDiagnosisPageResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetPageSize(v int64) *GetRequestDiagnosisPageResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetTotal(v int64) *GetRequestDiagnosisPageResponseBodyData {
	s.Total = &v
	return s
}

type GetRequestDiagnosisPageResponseBodyDataList struct {
	// The user ID.
	//
	// example:
	//
	// 2093****
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// das
	DbSchema *string `json:"dbSchema,omitempty" xml:"dbSchema,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PolarDBOracle**
	//
	// 	- **MongoDB**
	//
	// example:
	//
	// MySQL
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// The time when the SQL diagnostics task was created. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1633071840000
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// The time when the SQL diagnostics task was modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1633071850000
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// The unique ID of the diagnostics task.
	//
	// example:
	//
	// 61820b594664275c4429****
	MessageId *string `json:"messageId,omitempty" xml:"messageId,omitempty"`
	// Additional information.
	//
	// example:
	//
	// {"":""}
	Param *string `json:"param,omitempty" xml:"param,omitempty"`
	// The result of the SQL diagnostics task. The result includes the following information:
	//
	// 	- **endTime**: the end time of the SQL diagnostics task.
	//
	// 	- **errorCode**: indicates whether the SQL diagnostics task is complete. Valid values:
	//
	//   	- **0001**: The SQL diagnostics task is complete.
	//
	//   	- **0003**: The SQL diagnostics task failed.
	//
	// 	- **errorMessage**: the error message.
	//
	// 	- **estimateCost**: the estimated cost.
	//
	//   	- **cpu**: the estimated CPU utilization of the index.
	//
	//   	- **io**: the estimated I/O usage of the index.
	//
	//   	- **rows**: the estimated values of the rows returned for the index.
	//
	// 	- **improvement**: the performance improvement ratio.
	//
	// 	- **indexAdvices**: the index recommendations, which include the following information:
	//
	//   	- **columns**: the index columns.
	//
	//   	- **ddlAddIndex**: the DDL statement for the index.
	//
	//   	- **indexName**: the name of the index.
	//
	//   	- **schemaName**: the name of the database.
	//
	//   	- **tableName**: the name of the table.
	//
	//   	- **unique**: indicates whether the index is unique.
	//
	// 	- **ip**: the IP address of the instance.
	//
	// 	- **messageId**: the ID of the diagnostics task.
	//
	// 	- **port**: the port used to connect to the instance.
	//
	// 	- **sqlTag**: the SQL tag.
	//
	// 	- **startTime**: the start time of the SQL diagnostics task.
	//
	// 	- **success**: indicates whether the request was successful.
	//
	// 	- **support**: indicates whether the SQL statement can be diagnosed. Valid values:
	//
	//   	- **true**: The SQL statement can be diagnosed.
	//
	//   	- **false**: The SQL statement cannot be diagnosed.
	//
	// 	- **tuningAdvices**: the SQL rewrite suggestions.
	//
	// example:
	//
	// { "endTime":1636354256000, "errorCode":"0001", "errorMessage":"TFX Successful", "estimateCost":{ "cpu":1.7878745150389268, "io":9.948402604746128, "rows":8.889372575194633 }, "improvement":12933.97, "indexAdvices":[ { "columns":[ "work_no" ], "ddlAddIndex":"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)", "indexName":"idx_workno", "schemaName":"test", "tableName":"work_order", "unique":false } ], "ip":"****.mysql.rds.aliyuncs.com", "messageId":"6188c8cb2f1365b16aee****", "port":3306, "sqlTag":"{\\"PRED_EQUAL\\":\\"Y\\",\\"CNT_QB\\":\\"1\\",\\"CNT_TB\\":\\"1\\"}", "startTime":1636354252000, "success":true, "support":true, "tuningAdvices":[ ] }
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// The SQL template ID.
	//
	// example:
	//
	// 0c95dae3afef77be06572612df9b****
	SqlId *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
	// The status of the diagnostics task. Valid values:
	//
	// 	- **0**: The diagnostics task is in progress.
	//
	// 	- **1**: A diagnostics error occurred.
	//
	// 	- **2**: The diagnostics task is complete.
	//
	// 	- **3**: An SQL error occurred.
	//
	// 	- **4**: An engine error occurred.
	//
	// example:
	//
	// 2
	State *int32 `json:"state,omitempty" xml:"state,omitempty"`
	// The unique ID of the diagnostics instance.
	//
	// example:
	//
	// hdm_51fe9bc19ec413f4d530431af87a****
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
}

func (s GetRequestDiagnosisPageResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetAccountId(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.AccountId = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetDbSchema(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.DbSchema = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetEngine(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.Engine = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetGmtCreate(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.GmtCreate = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetGmtModified(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.GmtModified = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetMessageId(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.MessageId = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetParam(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.Param = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetResult(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.Result = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetSqlId(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetState(v int32) *GetRequestDiagnosisPageResponseBodyDataList {
	s.State = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetUuid(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.Uuid = &v
	return s
}

type GetRequestDiagnosisPageResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRequestDiagnosisPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRequestDiagnosisPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageResponse) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageResponse) SetHeaders(v map[string]*string) *GetRequestDiagnosisPageResponse {
	s.Headers = v
	return s
}

func (s *GetRequestDiagnosisPageResponse) SetStatusCode(v int32) *GetRequestDiagnosisPageResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRequestDiagnosisPageResponse) SetBody(v *GetRequestDiagnosisPageResponseBody) *GetRequestDiagnosisPageResponse {
	s.Body = v
	return s
}

type GetRequestDiagnosisResultRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-0iwhhl8gx0ld6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The unique ID of the diagnostic task.[](~~341609~~)
	//
	// >  If you set MessageId to the task ID of the automatic SQL optimization feature, no result is returned.
	//
	// This parameter is required.
	//
	// example:
	//
	// 61820b594664275c4429****
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	// The node ID.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster, a PolarDB for PostgreSQL (compatible with Oracle) instance, or an ApsaraDB for MongoDB database.
	//
	// example:
	//
	// 202****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The source of the task.
	//
	// >  This parameter is required if you call this operation in the DAS console. You do not need to specify this parameter when you call this operation.
	//
	// example:
	//
	// None
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The SQL template ID.
	//
	// >  This parameter is required if you call this operation in the DAS console. You do not need to specify this parameter when you call this operation.
	//
	// example:
	//
	// None
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
}

func (s GetRequestDiagnosisResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisResultRequest) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisResultRequest) SetInstanceId(v string) *GetRequestDiagnosisResultRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRequestDiagnosisResultRequest) SetMessageId(v string) *GetRequestDiagnosisResultRequest {
	s.MessageId = &v
	return s
}

func (s *GetRequestDiagnosisResultRequest) SetNodeId(v string) *GetRequestDiagnosisResultRequest {
	s.NodeId = &v
	return s
}

func (s *GetRequestDiagnosisResultRequest) SetSource(v string) *GetRequestDiagnosisResultRequest {
	s.Source = &v
	return s
}

func (s *GetRequestDiagnosisResultRequest) SetSqlId(v string) *GetRequestDiagnosisResultRequest {
	s.SqlId = &v
	return s
}

type GetRequestDiagnosisResultResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetRequestDiagnosisResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 800FBAF5-A539-5B97-A09E-C63AB2F7****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRequestDiagnosisResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisResultResponseBody) SetCode(v string) *GetRequestDiagnosisResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBody) SetData(v *GetRequestDiagnosisResultResponseBodyData) *GetRequestDiagnosisResultResponseBody {
	s.Data = v
	return s
}

func (s *GetRequestDiagnosisResultResponseBody) SetMessage(v string) *GetRequestDiagnosisResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBody) SetRequestId(v string) *GetRequestDiagnosisResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBody) SetSuccess(v string) *GetRequestDiagnosisResultResponseBody {
	s.Success = &v
	return s
}

type GetRequestDiagnosisResultResponseBodyData struct {
	// The user ID.
	//
	// example:
	//
	// 2093****
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// das
	DbSchema *string `json:"dbSchema,omitempty" xml:"dbSchema,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**
	//
	// 	- **PostgreSQL**
	//
	// 	- **SQLServer**
	//
	// 	- **PolarDBMySQL**
	//
	// 	- **PolarDBOracle**
	//
	// 	- **MongoDB**
	//
	// example:
	//
	// MySQL
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// The time when the SQL diagnostics task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1633071840000
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// The time when the SQL diagnostics task was modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1633071850000
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// The unique ID of the diagnostics task.
	//
	// example:
	//
	// 61820b594664275c4429****
	MessageId *string `json:"messageId,omitempty" xml:"messageId,omitempty"`
	// The additional information.
	//
	// example:
	//
	// {"":""}
	Param *string `json:"param,omitempty" xml:"param,omitempty"`
	// The result of the SQL diagnostics task. The result includes the following information:
	//
	// 	- **endTime**: the end time of the SQL diagnostics task.
	//
	// 	- **errorCode**: the error code.
	//
	//     	- **0001**: The SQL diagnostics task is complete.
	//
	//     	- **0003**: The SQL diagnostics task failed.
	//
	// 	- **errorMessage**: the error message.
	//
	// 	- **estimateCost**: the estimated cost.
	//
	//     	- **cpu**: the estimated CPU utilization of the index.
	//
	//     	- **io**: the estimated I/O usage of the index.
	//
	//     	- **rows**: the estimated values of the rows returned for the index.
	//
	// 	- **improvement**: the performance improvement ratio.
	//
	// 	- **indexAdvices**: the index recommendations, which include the following information:
	//
	//     	- **columns**: the index columns.
	//
	//     	- **ddlAddIndex**: the DDL statement for the index.
	//
	//     	- **indexName**: the name of the index.
	//
	//     	- **schemaName**: the name of the database.
	//
	//     	- **tableName**: the name of the table.
	//
	//     	- **unique**: indicates whether the index is unique.
	//
	// 	- **ip**: the IP address of the instance.
	//
	// 	- **messageId**: the ID of the diagnostics task.
	//
	// 	- **port**: the port used to connect to the instance.
	//
	// 	- **sqlTag**: the SQL tag.
	//
	// 	- **startTime**: the start time of the SQL diagnostics task.
	//
	// 	- **success**: indicates whether the request was successful.
	//
	// 	- **support**: indicates whether the SQL statement can be diagnosed. Valid values:
	//
	//     	- **true**
	//
	//     	- **false**
	//
	// 	- **tuningAdvices*	- : the SQL rewrite suggestions.
	//
	// example:
	//
	// { "endTime":1636354256000, "errorCode":"0001", "errorMessage":"TFX succeeded", "estimateCost":{ "cpu":1.7878745150389268, "io":9.948402604746128, "rows":8.889372575194633 }, "improvement":12933.97, "indexAdvices":[ { "columns":[ "work_no" ], "ddlAddIndex":"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)", "indexName":"idx_workno", "schemaName":"test", "tableName":"work_order", "unique":false } ], "ip":"****.mysql.rds.aliyuncs.com", "messageId":"6188c8cb2f1365b16aee****", "port":3306, "sqlTag":"{\\"PRED_EQUAL\\":\\"Y\\",\\"CNT_QB\\":\\"1\\",\\"CNT_TB\\":\\"1\\"}", "startTime":1636354252000, "success":true, "support":true, "tuningAdvices":[ ] }
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// The SQL template ID.
	//
	// example:
	//
	// 0c95dae3afef77be06572612df9b****
	SqlId *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
	// The state of the diagnostics task. Valid values:
	//
	// 	- **0**: The diagnostics task is in progress.
	//
	// 	- **1**: A diagnostics error occurred.
	//
	// 	- **2**: The diagnostics task is complete.
	//
	// 	- **3**: An SQL error occurred.
	//
	// 	- **4**: An engine error occurred.
	//
	// example:
	//
	// 2
	State *int32 `json:"state,omitempty" xml:"state,omitempty"`
	// The unique ID of the diagnostics instance.
	//
	// example:
	//
	// hdm_51fe9bc19ec413f4d530431af87a****
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
}

func (s GetRequestDiagnosisResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetAccountId(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetDbSchema(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.DbSchema = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetEngine(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.Engine = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetGmtCreate(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetGmtModified(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetMessageId(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.MessageId = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetParam(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.Param = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetResult(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.Result = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetSqlId(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetState(v int32) *GetRequestDiagnosisResultResponseBodyData {
	s.State = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetUuid(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.Uuid = &v
	return s
}

type GetRequestDiagnosisResultResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRequestDiagnosisResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRequestDiagnosisResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisResultResponse) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisResultResponse) SetHeaders(v map[string]*string) *GetRequestDiagnosisResultResponse {
	s.Headers = v
	return s
}

func (s *GetRequestDiagnosisResultResponse) SetStatusCode(v int32) *GetRequestDiagnosisResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRequestDiagnosisResultResponse) SetBody(v *GetRequestDiagnosisResultResponseBody) *GetRequestDiagnosisResultResponse {
	s.Body = v
	return s
}

type GetRunningSqlConcurrencyControlRulesRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  You must specify this parameter only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. The value must be a positive integer. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetRunningSqlConcurrencyControlRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesRequest) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesRequest) SetConsoleContext(v string) *GetRunningSqlConcurrencyControlRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesRequest) SetInstanceId(v string) *GetRunningSqlConcurrencyControlRulesRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesRequest) SetPageNo(v int64) *GetRunningSqlConcurrencyControlRulesRequest {
	s.PageNo = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesRequest) SetPageSize(v int64) *GetRunningSqlConcurrencyControlRulesRequest {
	s.PageSize = &v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetRunningSqlConcurrencyControlRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRunningSqlConcurrencyControlRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponseBody) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetCode(v string) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.Code = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetData(v *GetRunningSqlConcurrencyControlRulesResponseBodyData) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.Data = v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetMessage(v string) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.Message = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetRequestId(v string) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetSuccess(v string) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.Success = &v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponseBodyData struct {
	// The returned data.
	List *GetRunningSqlConcurrencyControlRulesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyData) SetList(v *GetRunningSqlConcurrencyControlRulesResponseBodyDataList) *GetRunningSqlConcurrencyControlRulesResponseBodyData {
	s.List = v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyData) SetTotal(v int64) *GetRunningSqlConcurrencyControlRulesResponseBodyData {
	s.Total = &v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponseBodyDataList struct {
	RunningRules []*GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules `json:"runningRules,omitempty" xml:"runningRules,omitempty" type:"Repeated"`
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataList) SetRunningRules(v []*GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) *GetRunningSqlConcurrencyControlRulesResponseBodyDataList {
	s.RunningRules = v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules struct {
	// The duration within which the SQL throttling rule takes effect. Unit: seconds.
	//
	// > The throttling rule takes effect only within this duration.
	//
	// example:
	//
	// 600
	ConcurrencyControlTime *int64 `json:"ConcurrencyControlTime,omitempty" xml:"ConcurrencyControlTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the throttling rule that is applied to the instance.
	//
	// example:
	//
	// 16
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	// The hash value of the SQL keywords. The hash value is calculated based on the SQL keywords that are contained in the SQL statements to which the throttling rule is applied.
	//
	// example:
	//
	// b0b8aceeb43baea87b219c81767b****
	KeywordsHash *string `json:"KeywordsHash,omitempty" xml:"KeywordsHash,omitempty"`
	// The maximum number of concurrent SQL statements. The value is a positive integer.
	//
	// > If the number of concurrent SQL statements that contain the specified keywords reaches this upper limit, the throttling rule is triggered.
	//
	// example:
	//
	// 2
	MaxConcurrency *string `json:"MaxConcurrency,omitempty" xml:"MaxConcurrency,omitempty"`
	// The keywords contained in the SQL statements to which the throttling rule was applied.
	//
	// > SQL keywords are separated by tildes (~). If the number of concurrent SQL statements that contain all the specified SQL keywords reaches the specified upper limit, the throttling rule is triggered.
	//
	// example:
	//
	// call~open~api~test~4~from~POP
	SqlKeywords *string `json:"SqlKeywords,omitempty" xml:"SqlKeywords,omitempty"`
	// The type of the SQL statements. Valid values:
	//
	// 	- **SELECT**
	//
	// 	- **UPDATE**
	//
	// 	- **DELETE**
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The time when the throttling rule started to take effect. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1608888296000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the throttling rule. The value of **Open*	- indicates that the throttling rule is in effect.
	//
	// example:
	//
	// Open
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The Alibaba Cloud account ID.
	//
	// example:
	//
	// testxxx
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetConcurrencyControlTime(v int64) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.ConcurrencyControlTime = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetInstanceId(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.InstanceId = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetItemId(v int64) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.ItemId = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetKeywordsHash(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.KeywordsHash = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetMaxConcurrency(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.MaxConcurrency = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetSqlKeywords(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.SqlKeywords = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetSqlType(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.SqlType = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetStartTime(v int64) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.StartTime = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetStatus(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.Status = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetUserId(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.UserId = &v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRunningSqlConcurrencyControlRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRunningSqlConcurrencyControlRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponse) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponse) SetHeaders(v map[string]*string) *GetRunningSqlConcurrencyControlRulesResponse {
	s.Headers = v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponse) SetStatusCode(v int32) *GetRunningSqlConcurrencyControlRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponse) SetBody(v *GetRunningSqlConcurrencyControlRulesResponseBody) *GetRunningSqlConcurrencyControlRulesResponse {
	s.Body = v
	return s
}

type GetSqlConcurrencyControlKeywordsFromSqlTextRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze5hpn2b99d2****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The SQL statement based on which a throttling keyword string is to be generated.
	//
	// This parameter is required.
	//
	// example:
	//
	// SELECT 	- FROM test where name = \\"das\\"
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextRequest) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextRequest) SetConsoleContext(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextRequest) SetInstanceId(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextRequest) SetSqlText(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextRequest {
	s.SqlText = &v
	return s
}

type GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The throttling keyword string that was generated based on the SQL statement.
	//
	// example:
	//
	// SELECT~FROM~test~where~name
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30A643F5-D7A6-55F5-AB75-DF501427****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetCode(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.Code = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetData(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.Data = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetMessage(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.Message = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetRequestId(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetSuccess(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.Success = &v
	return s
}

type GetSqlConcurrencyControlKeywordsFromSqlTextResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextResponse) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponse) SetHeaders(v map[string]*string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponse {
	s.Headers = v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponse) SetStatusCode(v int32) *GetSqlConcurrencyControlKeywordsFromSqlTextResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponse) SetBody(v *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) *GetSqlConcurrencyControlKeywordsFromSqlTextResponse {
	s.Body = v
	return s
}

type GetSqlConcurrencyControlRulesHistoryRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  Only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. The value must be an integer that is greater than 0. Default value: 1.
	//
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. The value must be an integer that is greater than 0. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetSqlConcurrencyControlRulesHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryRequest) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryRequest) SetConsoleContext(v string) *GetSqlConcurrencyControlRulesHistoryRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryRequest) SetInstanceId(v string) *GetSqlConcurrencyControlRulesHistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryRequest) SetPageNo(v int64) *GetSqlConcurrencyControlRulesHistoryRequest {
	s.PageNo = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryRequest) SetPageSize(v int64) *GetSqlConcurrencyControlRulesHistoryRequest {
	s.PageSize = &v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetSqlConcurrencyControlRulesHistoryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**: The request was successful.
	//
	// 	- **false**: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetCode(v string) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.Code = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetData(v *GetSqlConcurrencyControlRulesHistoryResponseBodyData) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.Data = v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetMessage(v string) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.Message = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetRequestId(v string) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetSuccess(v string) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.Success = &v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponseBodyData struct {
	// The list of the queried throttling rules.
	List *GetSqlConcurrencyControlRulesHistoryResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The total number of entries returned.
	//
	// example:
	//
	// 4
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyData) SetList(v *GetSqlConcurrencyControlRulesHistoryResponseBodyDataList) *GetSqlConcurrencyControlRulesHistoryResponseBodyData {
	s.List = v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyData) SetTotal(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyData {
	s.Total = &v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponseBodyDataList struct {
	Rules []*GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules `json:"rules,omitempty" xml:"rules,omitempty" type:"Repeated"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataList) SetRules(v []*GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataList {
	s.Rules = v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules struct {
	// The duration within which the SQL throttling rule takes effect. Unit: seconds.
	//
	// >  The throttling rule takes effect only within this duration.
	//
	// example:
	//
	// 600
	ConcurrencyControlTime *int64 `json:"ConcurrencyControlTime,omitempty" xml:"ConcurrencyControlTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the throttling rule that is applied to the instance.
	//
	// example:
	//
	// 16
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	// The hash value of the SQL keywords. The SQL keywords are contained in the SQL statements to which the throttling rule is applied.
	//
	// example:
	//
	// b0b8aceeb43baea87b219c81767b****
	KeywordsHash *string `json:"KeywordsHash,omitempty" xml:"KeywordsHash,omitempty"`
	// The maximum number of concurrent SQL statements. Set this parameter to a positive integer.
	//
	// >  When the number of concurrent SQL statements that contain the specified keywords reaches this upper limit, the throttling rule is triggered.
	//
	// example:
	//
	// 2
	MaxConcurrency *int64 `json:"MaxConcurrency,omitempty" xml:"MaxConcurrency,omitempty"`
	// The keywords that are used to identify the SQL statements that need to be throttled.
	//
	// > SQL keywords are separated with tildes (~). When the number of concurrent SQL statements that contain all the specified SQL keywords reaches the specified upper limit, the throttling rule is triggered.
	//
	// example:
	//
	// call~open~api~test~4~from~POP
	SqlKeywords *string `json:"SqlKeywords,omitempty" xml:"SqlKeywords,omitempty"`
	// The type of the SQL statements. Valid values:
	//
	// 	- **SELECT**
	//
	// 	- **UPDATE**
	//
	// 	- **DELETE**
	//
	// example:
	//
	// SELECT
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1608888296000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The state of the throttling rule. Valid values:
	//
	// 	- **Open**: The throttling rule is in effect.
	//
	// 	- **Closed**: The throttling rule was in effect.
	//
	// example:
	//
	// Open
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The user ID.
	//
	// example:
	//
	// testxxx
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetConcurrencyControlTime(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.ConcurrencyControlTime = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetInstanceId(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.InstanceId = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetItemId(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.ItemId = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetKeywordsHash(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.KeywordsHash = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetMaxConcurrency(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.MaxConcurrency = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetSqlKeywords(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.SqlKeywords = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetSqlType(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.SqlType = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetStartTime(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.StartTime = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetStatus(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.Status = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetUserId(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.UserId = &v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSqlConcurrencyControlRulesHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponse) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponse) SetHeaders(v map[string]*string) *GetSqlConcurrencyControlRulesHistoryResponse {
	s.Headers = v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponse) SetStatusCode(v int32) *GetSqlConcurrencyControlRulesHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponse) SetBody(v *GetSqlConcurrencyControlRulesHistoryResponseBody) *GetSqlConcurrencyControlRulesHistoryResponse {
	s.Body = v
	return s
}

type GetSqlOptimizeAdviceRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The end date of the time range to query. Specify the date in the *yyyyMMdd	- format. The time must be in UTC.
	//
	// 	- The default value of this parameter is one day before the current day.
	//
	// 	- The value must be earlier than the current day. The interval between the start date and the end date cannot exceed 30 days.
	//
	// example:
	//
	// 20210917
	EndDt *string `json:"EndDt,omitempty" xml:"EndDt,omitempty"`
	// The database engine. Valid values:
	//
	// 	- **MySQL**: ApsaraDB RDS for MySQL.
	//
	// 	- **PolarDBMySQL**: PolarDB for MySQL.
	//
	// example:
	//
	// MySQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID.
	//
	// >  You must specify the instance ID only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	//
	// example:
	//
	// rm-2ze1jdv45i7l6****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// 	- **cn-china**: Chinese mainland.
	//
	// 	- **cn-hongkong**: China (Hong Kong).
	//
	// 	- **ap-southeast-1**: Singapore.
	//
	// This parameter takes effect only if **InstanceIds*	- is left empty. If you leave **InstanceIds*	- empty, the system obtains data from the region specified by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region*	- does not take effect, and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  If your instances reside in the regions inside the Chinese mainland, set this parameter to **cn-china**.
	//
	// example:
	//
	// cn-china
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The start date of the time range to query. Specify the date in the *yyyyMMdd	- format. The time must be in UTC.
	//
	// 	- The default value of this parameter is one day before the current day.
	//
	// 	- The value must be earlier than the current day.
	//
	// example:
	//
	// 20210916
	StartDt *string `json:"StartDt,omitempty" xml:"StartDt,omitempty"`
}

func (s GetSqlOptimizeAdviceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSqlOptimizeAdviceRequest) GoString() string {
	return s.String()
}

func (s *GetSqlOptimizeAdviceRequest) SetConsoleContext(v string) *GetSqlOptimizeAdviceRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetEndDt(v string) *GetSqlOptimizeAdviceRequest {
	s.EndDt = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetEngine(v string) *GetSqlOptimizeAdviceRequest {
	s.Engine = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetInstanceIds(v string) *GetSqlOptimizeAdviceRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetRegion(v string) *GetSqlOptimizeAdviceRequest {
	s.Region = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetStartDt(v string) *GetSqlOptimizeAdviceRequest {
	s.StartDt = &v
	return s
}

type GetSqlOptimizeAdviceResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetSqlOptimizeAdviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSqlOptimizeAdviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSqlOptimizeAdviceResponseBody) GoString() string {
	return s.String()
}

func (s *GetSqlOptimizeAdviceResponseBody) SetCode(v string) *GetSqlOptimizeAdviceResponseBody {
	s.Code = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBody) SetData(v *GetSqlOptimizeAdviceResponseBodyData) *GetSqlOptimizeAdviceResponseBody {
	s.Data = v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBody) SetMessage(v string) *GetSqlOptimizeAdviceResponseBody {
	s.Message = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBody) SetRequestId(v string) *GetSqlOptimizeAdviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBody) SetSuccess(v string) *GetSqlOptimizeAdviceResponseBody {
	s.Success = &v
	return s
}

type GetSqlOptimizeAdviceResponseBodyData struct {
	// The time when the task was created. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1632303861000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The URL that is used to download the file.
	//
	// example:
	//
	// https://das-sql-optimize.oss-cn-shanghai.aliyuncs.com/adb/oss_sql_optimize_advice/1083*******
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// The time when the file expires. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The file expires three days after the task is created.
	//
	// example:
	//
	// 1632563061000
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The status of the task. Valid values:
	//
	// 	- **INIT**: The task is being initialized.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **FINISH**: The task is complete.
	//
	// 	- **FAILED**: The task failed.
	//
	// example:
	//
	// FINISH
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The status code of the task. Valid values:
	//
	// 	- **NO_DATA**: No data is returned.
	//
	// 	- **INTERNAL_ERROR**: An internal error occurred.
	//
	// 	- **SUCCESS**: The task is successful.
	//
	// example:
	//
	// SUCCESS
	StatusCode *string `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 2021091710461519216****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetSqlOptimizeAdviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSqlOptimizeAdviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetCreateTime(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetDownloadUrl(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.DownloadUrl = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetExpireTime(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetStatus(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetStatusCode(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.StatusCode = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetTaskId(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.TaskId = &v
	return s
}

type GetSqlOptimizeAdviceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSqlOptimizeAdviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSqlOptimizeAdviceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSqlOptimizeAdviceResponse) GoString() string {
	return s.String()
}

func (s *GetSqlOptimizeAdviceResponse) SetHeaders(v map[string]*string) *GetSqlOptimizeAdviceResponse {
	s.Headers = v
	return s
}

func (s *GetSqlOptimizeAdviceResponse) SetStatusCode(v int32) *GetSqlOptimizeAdviceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponse) SetBody(v *GetSqlOptimizeAdviceResponseBody) *GetSqlOptimizeAdviceResponse {
	s.Body = v
	return s
}

type GetStorageAnalysisResultRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-bp10xxxxxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter is reserved.
	//
	// example:
	//
	// 202****
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The task ID. You can obtain the task ID from the response of the [CreateStorageAnalysisTask](https://help.aliyun.com/document_detail/2639140.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 910f83f4b96df0524ddc5749f615****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetStorageAnalysisResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetStorageAnalysisResultRequest) GoString() string {
	return s.String()
}

func (s *GetStorageAnalysisResultRequest) SetInstanceId(v string) *GetStorageAnalysisResultRequest {
	s.InstanceId = &v
	return s
}

func (s *GetStorageAnalysisResultRequest) SetNodeId(v string) *GetStorageAnalysisResultRequest {
	s.NodeId = &v
	return s
}

func (s *GetStorageAnalysisResultRequest) SetTaskId(v string) *GetStorageAnalysisResultRequest {
	s.TaskId = &v
	return s
}

type GetStorageAnalysisResultResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetStorageAnalysisResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request is successful, **Successful*	- is returned. Otherwise, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetStorageAnalysisResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetStorageAnalysisResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetStorageAnalysisResultResponseBody) SetCode(v int64) *GetStorageAnalysisResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBody) SetData(v *GetStorageAnalysisResultResponseBodyData) *GetStorageAnalysisResultResponseBody {
	s.Data = v
	return s
}

func (s *GetStorageAnalysisResultResponseBody) SetMessage(v string) *GetStorageAnalysisResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBody) SetRequestId(v string) *GetStorageAnalysisResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBody) SetSuccess(v bool) *GetStorageAnalysisResultResponseBody {
	s.Success = &v
	return s
}

type GetStorageAnalysisResultResponseBodyData struct {
	// The number of databases that have been analyzed.
	//
	// example:
	//
	// 2
	AnalyzedDbCount *int64 `json:"AnalyzedDbCount,omitempty" xml:"AnalyzedDbCount,omitempty"`
	// The details of storage analysis.
	StorageAnalysisResult *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult `json:"StorageAnalysisResult,omitempty" xml:"StorageAnalysisResult,omitempty" type:"Struct"`
	// Indicates whether the task is complete.
	//
	// example:
	//
	// true
	TaskFinish *bool `json:"TaskFinish,omitempty" xml:"TaskFinish,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 910f83f4b96df0524ddc5749f615****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The task progress.
	//
	// >  Valid values are integers that range from 0 to 100.
	//
	// example:
	//
	// 50
	TaskProgress *int64 `json:"TaskProgress,omitempty" xml:"TaskProgress,omitempty"`
	// The status of the storage analysis task. Valid values:
	//
	// 	- **INIT**: The task is being initialized.
	//
	// 	- **PENDING**: The task is being queued for execution.
	//
	// 	- **RECEIVED**: The task is received for execution.
	//
	// 	- **RUNNING**: The task is being executed.
	//
	// 	- **RETRY**: The task is being retried.
	//
	// 	- **SUCCESS**: The task succeeds.
	//
	// 	- **FAILURE**: The task fails.
	//
	// example:
	//
	// RUNNING
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	// Indicates whether the task is successful.
	//
	// example:
	//
	// true
	TaskSuccess *bool `json:"TaskSuccess,omitempty" xml:"TaskSuccess,omitempty"`
	// The number of databases that need to be analyzed in the storage analysis task.
	//
	// example:
	//
	// 32
	TotalDbCount *int64 `json:"TotalDbCount,omitempty" xml:"TotalDbCount,omitempty"`
}

func (s GetStorageAnalysisResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetStorageAnalysisResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetStorageAnalysisResultResponseBodyData) SetAnalyzedDbCount(v int64) *GetStorageAnalysisResultResponseBodyData {
	s.AnalyzedDbCount = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyData) SetStorageAnalysisResult(v *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) *GetStorageAnalysisResultResponseBodyData {
	s.StorageAnalysisResult = v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyData) SetTaskFinish(v bool) *GetStorageAnalysisResultResponseBodyData {
	s.TaskFinish = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyData) SetTaskId(v string) *GetStorageAnalysisResultResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyData) SetTaskProgress(v int64) *GetStorageAnalysisResultResponseBodyData {
	s.TaskProgress = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyData) SetTaskState(v string) *GetStorageAnalysisResultResponseBodyData {
	s.TaskState = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyData) SetTaskSuccess(v bool) *GetStorageAnalysisResultResponseBodyData {
	s.TaskSuccess = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyData) SetTotalDbCount(v int64) *GetStorageAnalysisResultResponseBodyData {
	s.TotalDbCount = &v
	return s
}

type GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult struct {
	// The reason why the analysis on the database and table fails.
	//
	// 	- **DB_OR_TABLE_NOT_EXIST**: The specified database or table does not exist.
	//
	// 	- **DB_NOT_EXIST**: The specified database does not exist.
	//
	// example:
	//
	// DB_NOT_EXIST
	AnalysisErrorType *string `json:"AnalysisErrorType,omitempty" xml:"AnalysisErrorType,omitempty"`
	// Indicates whether the analysis on the database and table is successful.
	//
	// example:
	//
	// true
	AnalysisSuccess *bool `json:"AnalysisSuccess,omitempty" xml:"AnalysisSuccess,omitempty"`
	// The estimated average daily growth of the used storage space in the previous seven days. Unit: bytes.
	//
	// example:
	//
	// 0
	DailyIncrement *int64 `json:"DailyIncrement,omitempty" xml:"DailyIncrement,omitempty"`
	// The estimated number of days for which the remaining storage space is available.
	//
	// example:
	//
	// 99
	EstimateAvailableDays *int64 `json:"EstimateAvailableDays,omitempty" xml:"EstimateAvailableDays,omitempty"`
	// The items to be optimized, which are generated based on DAS default rules. You can ignore these items based on your business requirements, and create custom rules to generate items to be optimized based on other basic data that is returned.
	NeedOptimizeItemList []*GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList `json:"NeedOptimizeItemList,omitempty" xml:"NeedOptimizeItemList,omitempty" type:"Repeated"`
	// The information about the table.
	TableStats []*GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats `json:"TableStats,omitempty" xml:"TableStats,omitempty" type:"Repeated"`
	// The size of remaining storage.
	//
	// >  Unit: bytes.
	//
	// example:
	//
	// 146403229696
	TotalFreeStorageSize *int64 `json:"TotalFreeStorageSize,omitempty" xml:"TotalFreeStorageSize,omitempty"`
	// The total size of instance storage.
	//
	// >  Unit: bytes.
	//
	// example:
	//
	// 214748364800
	TotalStorageSize *int64 `json:"TotalStorageSize,omitempty" xml:"TotalStorageSize,omitempty"`
	// The size of used storage.
	//
	// >  Unit: bytes.
	//
	// example:
	//
	// 68345135104
	TotalUsedStorageSize *int64 `json:"TotalUsedStorageSize,omitempty" xml:"TotalUsedStorageSize,omitempty"`
}

func (s GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) String() string {
	return tea.Prettify(s)
}

func (s GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) GoString() string {
	return s.String()
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) SetAnalysisErrorType(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult {
	s.AnalysisErrorType = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) SetAnalysisSuccess(v bool) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult {
	s.AnalysisSuccess = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) SetDailyIncrement(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult {
	s.DailyIncrement = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) SetEstimateAvailableDays(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult {
	s.EstimateAvailableDays = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) SetNeedOptimizeItemList(v []*GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult {
	s.NeedOptimizeItemList = v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) SetTableStats(v []*GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult {
	s.TableStats = v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) SetTotalFreeStorageSize(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult {
	s.TotalFreeStorageSize = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) SetTotalStorageSize(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult {
	s.TotalStorageSize = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult) SetTotalUsedStorageSize(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResult {
	s.TotalUsedStorageSize = &v
	return s
}

type GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList struct {
	// The data associated with the items to be optimized, which is in the JSON format.
	//
	// example:
	//
	// {
	//
	//     "autoIncrementCurrentValue": 2147483647,
	//
	//     "autoIncrementRatio": 1,
	//
	//     "dbName": "testdb01",
	//
	//     "maximumValue": 2147483647,
	//
	//     "columnName": "id",
	//
	//     "tableName": "test_table"
	//
	// }
	AssociatedData *string `json:"AssociatedData,omitempty" xml:"AssociatedData,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testdb01
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The optimization suggestion. Valid values:
	//
	// 	- **NEED_ANALYZE_TABLE**: You can execute the `ANALYZE TABLE` statement on the table during off-peak hours. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **NEED_OPTIMIZE_TABLE**: You can reclaim fragments during off-peak hours.
	//
	// 	- **CHANGE_TABLE_ENGINE_IF_NECESSARY**: Change the storage engine type of a table after risk assessment. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **AUTO_INCREMENT_ID_BE_TO_RUN_OUT**: Pay attention to the usage of auto-increment IDs. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **DUPLICATE_INDEX**: Optimize indexes of tables. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **TABLE_SIZE**: Pay attention to the table size. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **TABLE_ROWS_AND_AVG_ROW_LENGTH**: Pay attention to the number of rows in a table and the average row length. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **STORAGE_USED_PERCENT**: Pay attention to the space usage to prevent the instance from being locked if the instance is full.
	//
	// example:
	//
	// NEED_OPTIMIZE_TABLE
	OptimizeAdvice *string `json:"OptimizeAdvice,omitempty" xml:"OptimizeAdvice,omitempty"`
	// The item to be optimized. Valid values:
	//
	// 	- **NEED_ANALYZE_TABLE**: tables whose storage statistics obtained from `information_schema.tables` are 50 GB larger or smaller than the physical file sizes. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **NEED_OPTIMIZE_TABLE**: tables whose space fragments are larger than 6 GB and whose fragmentation rates are greater than 30%. The fragmentation rate of a table is generally calculated based on the following formulas:
	//
	//     	- ApsaraDB RDS for MySQL and PolarDB for MySQL: `Fragmentation rate = DataFree/(DataSize + IndexSize + DataFree)`. In this topic, PhyTotalSize = DataSize + IndexSize + DataFree. Thus, the fragmentation rate can be calculated based on the following formula: `Fragmentation rate = DataFree/PhyTotalSize`.
	//
	//     	- ApsaraDB for MongoDB: `Fragmentation rate = FragmentSize/PhyTotalSize`.
	//
	// 	- **TABLE_ENGINE**: tables whose storage engines are not InnoDB or XEngine. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **AUTO_INCREMENT_ID_BE_TO_RUN_OUT**: tables whose usages of auto-increment IDs exceed 80%. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **DUPLICATE_INDEX**: tables whose indexes are redundant or duplicate. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **TABLE_SIZE**: single tables whose sizes are larger than 50 GB. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **TABLE_ROWS_AND_AVG_ROW_LENGTH**: single tables that contain more than 5 million rows and whose average row lengths exceed 10 KB. This is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// 	- **TOTAL_DATA_FREE**: instances whose reclaimable space is larger than 60 GB and whose total fragmentation rate is larger than 5%.
	//
	// 	- **STORAGE_USED_PERCENT**: instances whose space usage is larger than 90%.
	//
	// example:
	//
	// NEED_OPTIMIZE_TABLE
	OptimizeItemName *string `json:"OptimizeItemName,omitempty" xml:"OptimizeItemName,omitempty"`
	// The name of the table.
	//
	// example:
	//
	// test_table
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList) String() string {
	return tea.Prettify(s)
}

func (s GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList) GoString() string {
	return s.String()
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList) SetAssociatedData(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList {
	s.AssociatedData = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList) SetDbName(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList {
	s.DbName = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList) SetOptimizeAdvice(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList {
	s.OptimizeAdvice = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList) SetOptimizeItemName(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList {
	s.OptimizeItemName = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList) SetTableName(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultNeedOptimizeItemList {
	s.TableName = &v
	return s
}

type GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats struct {
	// The average length of rows. Unit: bytes.
	//
	// example:
	//
	// 154
	AvgRowLength *int64 `json:"AvgRowLength,omitempty" xml:"AvgRowLength,omitempty"`
	// The size of space fragments. Unit: bytes.
	//
	// >  This parameter is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters. The fragmentation rate of a table is generally calculated based on the following formula: `Fragmentation rate = DataFree/(DataSize + IndexSize + DataFree)`. In this topic, `Fragmentation rate = DataFree/PhyTotalSize`.
	//
	// example:
	//
	// 7340032
	DataFree *int64 `json:"DataFree,omitempty" xml:"DataFree,omitempty"`
	// 	- For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this parameter indicates the amount of space occupied by data. Unit: bytes.
	//
	// 	- For ApsaraDB for MongoDB instances, this parameter indicates the size of uncompressed data, that is, the amount of data. Unit: bytes.
	//
	// example:
	//
	// 1982857216
	DataSize *int64 `json:"DataSize,omitempty" xml:"DataSize,omitempty"`
	// The name of the database.
	//
	// example:
	//
	// testdb01
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The type of the storage engine used by the table.
	//
	// >  This parameter is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// example:
	//
	// InnoDB
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The size of space that can be reclaimed. Unit: bytes.
	//
	// >  This parameter is applicable only to ApsaraDB for MongoDB instances. `Fragmentation rate = FragmentSize/PhyTotalSize`.
	//
	// example:
	//
	// 362221568
	FragmentSize *int64 `json:"FragmentSize,omitempty" xml:"FragmentSize,omitempty"`
	// The storage space occupied by indexes. Unit: bytes.
	//
	// example:
	//
	// 1022296064
	IndexSize *int64 `json:"IndexSize,omitempty" xml:"IndexSize,omitempty"`
	// The storage space of the table. Unit: bytes.
	//
	// >  For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, the value of the parameter is the sum of **DataSize**, **IndexSize**, and **DataFree**. For ApsaraDB for MongoDB instances, the value of this parameter is the sum of **DataSize*	- and **IndexSize**.
	//
	// example:
	//
	// 3012493312
	PhyTotalSize *int64 `json:"PhyTotalSize,omitempty" xml:"PhyTotalSize,omitempty"`
	// The physical file size of the table. Unit: bytes.
	//
	// >  This parameter is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters. Data of specific database instances cannot be obtained due to deployment mode.
	//
	// example:
	//
	// 3057655808
	PhysicalFileSize *int64 `json:"PhysicalFileSize,omitempty" xml:"PhysicalFileSize,omitempty"`
	// The name of the table.
	//
	// example:
	//
	// test_table
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The number of rows in the table.
	//
	// example:
	//
	// 12794732
	TableRows *int64 `json:"TableRows,omitempty" xml:"TableRows,omitempty"`
	// The type of the table.
	//
	// >  This parameter is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
	//
	// example:
	//
	// BASE TABLE
	TableType *string `json:"TableType,omitempty" xml:"TableType,omitempty"`
	// 	- For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this parameter indicates the amount of space occupied by table data and indexes. Unit: bytes. The value is the sum of **DataSize*	- and **IndexSize**.
	//
	// 	- For ApsaraDB for MongoDB instances, this parameter indicates the actual size of space allocated by Block Manager. Unit: Bytes. The compression ratio of an ApsaraDB for MongoDB instance is calculated based on the following formula: `Compression ratio = TotalSize/DataSize`.
	//
	// example:
	//
	// 3005153280
	TotalSize *int64 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) String() string {
	return tea.Prettify(s)
}

func (s GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) GoString() string {
	return s.String()
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetAvgRowLength(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.AvgRowLength = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetDataFree(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.DataFree = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetDataSize(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.DataSize = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetDbName(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.DbName = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetEngine(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.Engine = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetFragmentSize(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.FragmentSize = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetIndexSize(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.IndexSize = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetPhyTotalSize(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.PhyTotalSize = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetPhysicalFileSize(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.PhysicalFileSize = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetTableName(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.TableName = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetTableRows(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.TableRows = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetTableType(v string) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.TableType = &v
	return s
}

func (s *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats) SetTotalSize(v int64) *GetStorageAnalysisResultResponseBodyDataStorageAnalysisResultTableStats {
	s.TotalSize = &v
	return s
}

type GetStorageAnalysisResultResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetStorageAnalysisResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetStorageAnalysisResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetStorageAnalysisResultResponse) GoString() string {
	return s.String()
}

func (s *GetStorageAnalysisResultResponse) SetHeaders(v map[string]*string) *GetStorageAnalysisResultResponse {
	s.Headers = v
	return s
}

func (s *GetStorageAnalysisResultResponse) SetStatusCode(v int32) *GetStorageAnalysisResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetStorageAnalysisResultResponse) SetBody(v *GetStorageAnalysisResultResponseBody) *GetStorageAnalysisResultResponse {
	s.Body = v
	return s
}

type KillInstanceAllSessionRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// r-8vbcyr4sw0c4yc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s KillInstanceAllSessionRequest) String() string {
	return tea.Prettify(s)
}

func (s KillInstanceAllSessionRequest) GoString() string {
	return s.String()
}

func (s *KillInstanceAllSessionRequest) SetConsoleContext(v string) *KillInstanceAllSessionRequest {
	s.ConsoleContext = &v
	return s
}

func (s *KillInstanceAllSessionRequest) SetInstanceId(v string) *KillInstanceAllSessionRequest {
	s.InstanceId = &v
	return s
}

type KillInstanceAllSessionResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s KillInstanceAllSessionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s KillInstanceAllSessionResponseBody) GoString() string {
	return s.String()
}

func (s *KillInstanceAllSessionResponseBody) SetCode(v string) *KillInstanceAllSessionResponseBody {
	s.Code = &v
	return s
}

func (s *KillInstanceAllSessionResponseBody) SetData(v string) *KillInstanceAllSessionResponseBody {
	s.Data = &v
	return s
}

func (s *KillInstanceAllSessionResponseBody) SetMessage(v string) *KillInstanceAllSessionResponseBody {
	s.Message = &v
	return s
}

func (s *KillInstanceAllSessionResponseBody) SetRequestId(v string) *KillInstanceAllSessionResponseBody {
	s.RequestId = &v
	return s
}

func (s *KillInstanceAllSessionResponseBody) SetSuccess(v string) *KillInstanceAllSessionResponseBody {
	s.Success = &v
	return s
}

type KillInstanceAllSessionResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *KillInstanceAllSessionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s KillInstanceAllSessionResponse) String() string {
	return tea.Prettify(s)
}

func (s KillInstanceAllSessionResponse) GoString() string {
	return s.String()
}

func (s *KillInstanceAllSessionResponse) SetHeaders(v map[string]*string) *KillInstanceAllSessionResponse {
	s.Headers = v
	return s
}

func (s *KillInstanceAllSessionResponse) SetStatusCode(v int32) *KillInstanceAllSessionResponse {
	s.StatusCode = &v
	return s
}

func (s *KillInstanceAllSessionResponse) SetBody(v *KillInstanceAllSessionResponseBody) *KillInstanceAllSessionResponse {
	s.Body = v
	return s
}

type ModifyAutoScalingConfigRequest struct {
	// The configuration item of the bandwidth auto scaling feature.
	Bandwidth *ModifyAutoScalingConfigRequestBandwidth `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" type:"Struct"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The configuration item of the resource auto scaling feature.
	Resource *ModifyAutoScalingConfigRequestResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// The configuration item of the shard auto scaling feature.
	Shard *ModifyAutoScalingConfigRequestShard `json:"Shard,omitempty" xml:"Shard,omitempty" type:"Struct"`
	// The configuration item of the specification auto scaling feature.
	Spec *ModifyAutoScalingConfigRequestSpec `json:"Spec,omitempty" xml:"Spec,omitempty" type:"Struct"`
	// The configuration item of the automatic storage expansion feature.
	Storage *ModifyAutoScalingConfigRequestStorage `json:"Storage,omitempty" xml:"Storage,omitempty" type:"Struct"`
}

func (s ModifyAutoScalingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequest) SetBandwidth(v *ModifyAutoScalingConfigRequestBandwidth) *ModifyAutoScalingConfigRequest {
	s.Bandwidth = v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetInstanceId(v string) *ModifyAutoScalingConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetResource(v *ModifyAutoScalingConfigRequestResource) *ModifyAutoScalingConfigRequest {
	s.Resource = v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetShard(v *ModifyAutoScalingConfigRequestShard) *ModifyAutoScalingConfigRequest {
	s.Shard = v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetSpec(v *ModifyAutoScalingConfigRequestSpec) *ModifyAutoScalingConfigRequest {
	s.Spec = v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetStorage(v *ModifyAutoScalingConfigRequestStorage) *ModifyAutoScalingConfigRequest {
	s.Storage = v
	return s
}

type ModifyAutoScalingConfigRequestBandwidth struct {
	// Specifies whether to apply the **Bandwidth*	- configuration of the bandwidth auto scaling feature. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// The average bandwidth usage threshold that triggers automatic bandwidth downgrade. Unit: %. Valid values:
	//
	// 	- **10**
	//
	// 	- **20**
	//
	// 	- **30**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 30
	BandwidthUsageLowerThreshold *int32 `json:"BandwidthUsageLowerThreshold,omitempty" xml:"BandwidthUsageLowerThreshold,omitempty"`
	// The average bandwidth usage threshold that triggers automatic bandwidth upgrade. Unit: %. Valid values:
	//
	// 	- **50**
	//
	// 	- **60**
	//
	// 	- **70**
	//
	// 	- **80**
	//
	// 	- **90**
	//
	// 	- **95**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 70
	BandwidthUsageUpperThreshold *int32 `json:"BandwidthUsageUpperThreshold,omitempty" xml:"BandwidthUsageUpperThreshold,omitempty"`
	// Specifies whether to enable automatic bandwidth downgrade. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The observation window of the bandwidth auto scaling feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m*	- time unit suffix specifies the minute. Valid values:
	//
	// 	- **1m**
	//
	// 	- **5m**
	//
	// 	- **10m**
	//
	// 	- **15m**
	//
	// 	- **30m**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 5m
	ObservationWindowSize *string `json:"ObservationWindowSize,omitempty" xml:"ObservationWindowSize,omitempty"`
	// Specifies whether to enable automatic bandwidth upgrade. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s ModifyAutoScalingConfigRequestBandwidth) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestBandwidth) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetApply(v bool) *ModifyAutoScalingConfigRequestBandwidth {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetBandwidthUsageLowerThreshold(v int32) *ModifyAutoScalingConfigRequestBandwidth {
	s.BandwidthUsageLowerThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetBandwidthUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestBandwidth {
	s.BandwidthUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetDowngrade(v bool) *ModifyAutoScalingConfigRequestBandwidth {
	s.Downgrade = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetObservationWindowSize(v string) *ModifyAutoScalingConfigRequestBandwidth {
	s.ObservationWindowSize = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetUpgrade(v bool) *ModifyAutoScalingConfigRequestBandwidth {
	s.Upgrade = &v
	return s
}

type ModifyAutoScalingConfigRequestResource struct {
	// Specifies whether to apply the **Resource*	- configuration of the resource auto scaling feature. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// if can be null:
	// false
	//
	// example:
	//
	// true
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// The average CPU utilization threshold that triggers automatic resource scale-out. Unit: %. Valid values:
	//
	// 	- **70**
	//
	// 	- **80**
	//
	// 	- **90**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 70
	CpuUsageUpperThreshold *int32 `json:"CpuUsageUpperThreshold,omitempty" xml:"CpuUsageUpperThreshold,omitempty"`
	// The observation window of the automatic resource scale-in feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m*	- time unit suffix specifies the minute. Valid values:
	//
	// 	- **1m**
	//
	// 	- **3m**
	//
	// 	- **5m**
	//
	// 	- **10m**
	//
	// 	- **20m**
	//
	// 	- **30m**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 5m
	DowngradeObservationWindowSize *string `json:"DowngradeObservationWindowSize,omitempty" xml:"DowngradeObservationWindowSize,omitempty"`
	// Specifies whether to enable resource auto scaling. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// if can be null:
	// false
	//
	// example:
	//
	// true
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// The observation window of the automatic resource scale-out feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m*	- time unit suffix specifies the minute. Valid values:
	//
	// 	- **1m**
	//
	// 	- **3m**
	//
	// 	- **5m**
	//
	// 	- **10m**
	//
	// 	- **20m**
	//
	// 	- **30m**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 5m
	UpgradeObservationWindowSize *string `json:"UpgradeObservationWindowSize,omitempty" xml:"UpgradeObservationWindowSize,omitempty"`
}

func (s ModifyAutoScalingConfigRequestResource) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestResource) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestResource) SetApply(v bool) *ModifyAutoScalingConfigRequestResource {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestResource) SetCpuUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestResource {
	s.CpuUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestResource) SetDowngradeObservationWindowSize(v string) *ModifyAutoScalingConfigRequestResource {
	s.DowngradeObservationWindowSize = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestResource) SetEnable(v bool) *ModifyAutoScalingConfigRequestResource {
	s.Enable = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestResource) SetUpgradeObservationWindowSize(v string) *ModifyAutoScalingConfigRequestResource {
	s.UpgradeObservationWindowSize = &v
	return s
}

type ModifyAutoScalingConfigRequestShard struct {
	// Specifies whether to apply the **Shard*	- configuration of the shard auto scaling feature. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  The shard auto scaling feature is available only for Tair (Redis OSS-compatible) cloud-native cluster instances on the China site (aliyun.com).
	//
	// example:
	//
	// true
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// Specifies whether to enable automatic shard removal. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  The automatic shard removal feature is in a canary release.
	//
	// example:
	//
	// true
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The observation window of the automatic shard removal feature. The value of this parameter consists of a numeric value and a time unit suffix. The **h*	- time unit suffix specifies the hour. The **d*	- time unit suffix specifies the day. Valid values:
	//
	// 	- **1h**
	//
	// 	- **2h**
	//
	// 	- **3h**
	//
	// 	- **1d**
	//
	// 	- **7d**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 1h
	DowngradeObservationWindowSize *string `json:"DowngradeObservationWindowSize,omitempty" xml:"DowngradeObservationWindowSize,omitempty"`
	// The maximum number of shards in the instance. The value must be a positive integer. Valid values: 4 to 32.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 16
	MaxShards *int32 `json:"MaxShards,omitempty" xml:"MaxShards,omitempty"`
	// The average memory usage threshold that triggers automatic shard removal. Unit: %. Valid values:
	//
	// 	- **10**
	//
	// 	- **20**
	//
	// 	- **30**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 30
	MemUsageLowerThreshold *int32 `json:"MemUsageLowerThreshold,omitempty" xml:"MemUsageLowerThreshold,omitempty"`
	// The average memory usage threshold that triggers automatic shard addition. Unit: %. Valid values:
	//
	// 	- **50**
	//
	// 	- **60**
	//
	// 	- **70**
	//
	// 	- **80**
	//
	// 	- **90**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 70
	MemUsageUpperThreshold *int32 `json:"MemUsageUpperThreshold,omitempty" xml:"MemUsageUpperThreshold,omitempty"`
	// The minimum number of shards in the instance. The value must be a positive integer. Valid values: 4 to 32.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 4
	MinShards *int32 `json:"MinShards,omitempty" xml:"MinShards,omitempty"`
	// Specifies whether to enable automatic shard addition. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
	// The observation window of the automatic shard addition feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m*	- time unit suffix specifies the minute. Valid values:
	//
	// 	- **5m**
	//
	// 	- **10m**
	//
	// 	- **15m**
	//
	// 	- **30m**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 5m
	UpgradeObservationWindowSize *string `json:"UpgradeObservationWindowSize,omitempty" xml:"UpgradeObservationWindowSize,omitempty"`
}

func (s ModifyAutoScalingConfigRequestShard) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestShard) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestShard) SetApply(v bool) *ModifyAutoScalingConfigRequestShard {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetDowngrade(v bool) *ModifyAutoScalingConfigRequestShard {
	s.Downgrade = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetDowngradeObservationWindowSize(v string) *ModifyAutoScalingConfigRequestShard {
	s.DowngradeObservationWindowSize = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetMaxShards(v int32) *ModifyAutoScalingConfigRequestShard {
	s.MaxShards = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetMemUsageLowerThreshold(v int32) *ModifyAutoScalingConfigRequestShard {
	s.MemUsageLowerThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetMemUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestShard {
	s.MemUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetMinShards(v int32) *ModifyAutoScalingConfigRequestShard {
	s.MinShards = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetUpgrade(v bool) *ModifyAutoScalingConfigRequestShard {
	s.Upgrade = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetUpgradeObservationWindowSize(v string) *ModifyAutoScalingConfigRequestShard {
	s.UpgradeObservationWindowSize = &v
	return s
}

type ModifyAutoScalingConfigRequestSpec struct {
	// Specifies whether to apply the **Spec*	- configuration of the specification auto scaling feature. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// The quiescent period. The value of this parameter consists of a numeric value and a time unit suffix. The **m*	- time unit suffix specifies the minute, the **h*	- time unit suffix specifies the hour, and the **d*	- time unit suffix specifies the day.
	//
	// 	- Valid values for PolarDB for MySQL Cluster Edition instances: **5m**, **10m**, **30m**, **1h**, **2h**, **3h**, **1d**, and **7d**.
	//
	// 	- Valid values for ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or Enterprise SSDs (ESSDs): **5m**, **10m**, **30m**, **1h**, **2h**, **3h**, **1d**, and **7d**.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 5m
	CoolDownTime *string `json:"CoolDownTime,omitempty" xml:"CoolDownTime,omitempty"`
	// The average CPU utilization threshold that triggers automatic specification scale-up. Unit: %. Valid values:
	//
	// 	- **50**
	//
	// 	- **60**
	//
	// 	- **70**
	//
	// 	- **80**
	//
	// 	- **90**
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL Cluster Edition instance or an ApsaraDB RDS for MySQL High-availability Edition instance that uses standard SSDs or ESSDs.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 70
	CpuUsageUpperThreshold *int32 `json:"CpuUsageUpperThreshold,omitempty" xml:"CpuUsageUpperThreshold,omitempty"`
	// Specifies whether to enable automatic specification scale-down. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL Cluster Edition instance or an ApsaraDB RDS for MySQL High-availability Edition instance that uses standard SSDs or ESSDs.
	//
	// if can be null:
	// false
	//
	// example:
	//
	// true
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The maximum number of read-only nodes of the instance.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL Cluster Edition instance.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 10
	MaxReadOnlyNodes *int32 `json:"MaxReadOnlyNodes,omitempty" xml:"MaxReadOnlyNodes,omitempty"`
	// The maximum specifications to which the database instance can be scaled up. The database instance can be upgraded only to a database instance of the same edition with higher specifications. For information about the specifications of different database instances, see the following topics:
	//
	// 	- PolarDB for MySQL Cluster Edition instances: [Specifications of compute nodes](https://help.aliyun.com/document_detail/102542.html)
	//
	// 	- ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs: [Specifications](https://help.aliyun.com/document_detail/276974.html)
	//
	// if can be null:
	// true
	//
	// example:
	//
	// polar.mysql.x8.12xlarge
	MaxSpec *string `json:"MaxSpec,omitempty" xml:"MaxSpec,omitempty"`
	// The average memory usage threshold that triggers automatic specification scale-up. Unit: %. Valid values:
	//
	// 	- **50**
	//
	// 	- **60**
	//
	// 	- **70**
	//
	// 	- **80**
	//
	// 	- **90**
	//
	// >  This parameter must be specified if the database instance is a Tair (Redis OSS-compatible) Community Edition cloud-native instance on the China site (aliyun.com).
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 70
	MemUsageUpperThreshold *int32 `json:"MemUsageUpperThreshold,omitempty" xml:"MemUsageUpperThreshold,omitempty"`
	// The observation window. The value of this parameter consists of a numeric value and a time unit suffix. The **m*	- time unit suffix specifies the minute and the **h*	- time unit suffix specifies the hour.
	//
	// 	- Valid values for PolarDB for MySQL Cluster Edition instances: **5m**, **10m**, **15m**, and **30m**.
	//
	// 	- Valid values for ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs: **5m**, **20m**, **30m**, **40m**, and **1h**.
	//
	// 	- Valid values for Tair (Redis OSS-compatible) Community Edition cloud-native instances: **5m**, **10m**, **15m**, and **30m**.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 5m
	ObservationWindowSize *string `json:"ObservationWindowSize,omitempty" xml:"ObservationWindowSize,omitempty"`
	// Specifies whether to enable automatic specification scale-up. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// if can be null:
	// false
	//
	// example:
	//
	// true
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s ModifyAutoScalingConfigRequestSpec) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestSpec) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestSpec) SetApply(v bool) *ModifyAutoScalingConfigRequestSpec {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetCoolDownTime(v string) *ModifyAutoScalingConfigRequestSpec {
	s.CoolDownTime = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetCpuUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestSpec {
	s.CpuUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetDowngrade(v bool) *ModifyAutoScalingConfigRequestSpec {
	s.Downgrade = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetMaxReadOnlyNodes(v int32) *ModifyAutoScalingConfigRequestSpec {
	s.MaxReadOnlyNodes = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetMaxSpec(v string) *ModifyAutoScalingConfigRequestSpec {
	s.MaxSpec = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetMemUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestSpec {
	s.MemUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetObservationWindowSize(v string) *ModifyAutoScalingConfigRequestSpec {
	s.ObservationWindowSize = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetUpgrade(v bool) *ModifyAutoScalingConfigRequestSpec {
	s.Upgrade = &v
	return s
}

type ModifyAutoScalingConfigRequestStorage struct {
	// Specifies whether to apply the **Storage*	- configuration of the automatic storage expansion feature. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// The average storage usage threshold that triggers automatic storage expansion. Unit: %. Valid values:
	//
	// 	- **50**
	//
	// 	- **60**
	//
	// 	- **70**
	//
	// 	- **80**
	//
	// 	- **90**
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 70
	DiskUsageUpperThreshold *int32 `json:"DiskUsageUpperThreshold,omitempty" xml:"DiskUsageUpperThreshold,omitempty"`
	// The maximum storage size of the database instance. Unit: GB. The value must be greater than or equal to the total storage size of the instance.
	//
	// 	- If the instance uses ESSDs, the maximum value of this parameter can be 32000.
	//
	// 	- If the instance uses standard SSDs, the maximum value of this parameter can be 6000.
	//
	// >  The standard SSD storage type is phased out. We recommend that you [upgrade the storage type of your instance from standard SSDs to ESSDs](https://help.aliyun.com/document_detail/314678.html).
	//
	// if can be null:
	// true
	//
	// example:
	//
	// 32000
	MaxStorage *int32 `json:"MaxStorage,omitempty" xml:"MaxStorage,omitempty"`
	// Specifies whether to enable automatic storage expansion. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// if can be null:
	// false
	//
	// example:
	//
	// true
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s ModifyAutoScalingConfigRequestStorage) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestStorage) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestStorage) SetApply(v bool) *ModifyAutoScalingConfigRequestStorage {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestStorage) SetDiskUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestStorage {
	s.DiskUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestStorage) SetMaxStorage(v int32) *ModifyAutoScalingConfigRequestStorage {
	s.MaxStorage = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestStorage) SetUpgrade(v bool) *ModifyAutoScalingConfigRequestStorage {
	s.Upgrade = &v
	return s
}

type ModifyAutoScalingConfigResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyAutoScalingConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigResponseBody) SetCode(v string) *ModifyAutoScalingConfigResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyAutoScalingConfigResponseBody) SetMessage(v string) *ModifyAutoScalingConfigResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyAutoScalingConfigResponseBody) SetRequestId(v string) *ModifyAutoScalingConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyAutoScalingConfigResponseBody) SetSuccess(v string) *ModifyAutoScalingConfigResponseBody {
	s.Success = &v
	return s
}

type ModifyAutoScalingConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyAutoScalingConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyAutoScalingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigResponse) SetHeaders(v map[string]*string) *ModifyAutoScalingConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyAutoScalingConfigResponse) SetStatusCode(v int32) *ModifyAutoScalingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAutoScalingConfigResponse) SetBody(v *ModifyAutoScalingConfigResponseBody) *ModifyAutoScalingConfigResponse {
	s.Body = v
	return s
}

type ModifySqlLogConfigRequest struct {
	// Specifies whether to enable DAS Enterprise Edition. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  This parameter is required if you want to enable DAS Enterprise Edition. By default, the latest version of DAS Enterprise Edition that supports the database instance is enabled.
	//
	// example:
	//
	// true
	Enable      *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	EnableAudit *bool `json:"EnableAudit,omitempty" xml:"EnableAudit,omitempty"`
	// A reserved parameter.
	Filters []*ModifySqlLogConfigRequestFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The number of days for which the SQL Explorer and Audit data is stored in hot storage. Valid values: 1 to 7.
	//
	// >  This parameter is required if only DAS Enterprise Edition V3 can be enabled for the database instance.
	//
	// example:
	//
	// 1
	HotRetention *int32 `json:"HotRetention,omitempty" xml:"HotRetention,omitempty"`
	// The ID of the database instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// rr-2ze770smbq3tpr2o9
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies whether to enable the SQL Explorer feature. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  This parameter is required if only DAS Enterprise Edition V3 can be enabled for the database instance.
	//
	// example:
	//
	// true
	RequestEnable *bool `json:"RequestEnable,omitempty" xml:"RequestEnable,omitempty"`
	// The total storage duration of the SQL Explorer and Audit data. Unit: day. Valid values:
	//
	// 	- 7
	//
	// 	- 30
	//
	// 	- 180
	//
	// 	- 365
	//
	// >  If you want to enable DAS Enterprise Edition V3, the value of this parameter must be greater than or equal to 30.
	//
	// example:
	//
	// 30
	Retention *int32 `json:"Retention,omitempty" xml:"Retention,omitempty"`
}

func (s ModifySqlLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySqlLogConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifySqlLogConfigRequest) SetEnable(v bool) *ModifySqlLogConfigRequest {
	s.Enable = &v
	return s
}

func (s *ModifySqlLogConfigRequest) SetEnableAudit(v bool) *ModifySqlLogConfigRequest {
	s.EnableAudit = &v
	return s
}

func (s *ModifySqlLogConfigRequest) SetFilters(v []*ModifySqlLogConfigRequestFilters) *ModifySqlLogConfigRequest {
	s.Filters = v
	return s
}

func (s *ModifySqlLogConfigRequest) SetHotRetention(v int32) *ModifySqlLogConfigRequest {
	s.HotRetention = &v
	return s
}

func (s *ModifySqlLogConfigRequest) SetInstanceId(v string) *ModifySqlLogConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifySqlLogConfigRequest) SetRequestEnable(v bool) *ModifySqlLogConfigRequest {
	s.RequestEnable = &v
	return s
}

func (s *ModifySqlLogConfigRequest) SetRetention(v int32) *ModifySqlLogConfigRequest {
	s.Retention = &v
	return s
}

type ModifySqlLogConfigRequestFilters struct {
	// A reserved parameter.
	//
	// example:
	//
	// None
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifySqlLogConfigRequestFilters) String() string {
	return tea.Prettify(s)
}

func (s ModifySqlLogConfigRequestFilters) GoString() string {
	return s.String()
}

func (s *ModifySqlLogConfigRequestFilters) SetKey(v string) *ModifySqlLogConfigRequestFilters {
	s.Key = &v
	return s
}

func (s *ModifySqlLogConfigRequestFilters) SetValue(v string) *ModifySqlLogConfigRequestFilters {
	s.Value = &v
	return s
}

type ModifySqlLogConfigResponseBody struct {
	// The response code.
	//
	// example:
	//
	// 403
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *ModifySqlLogConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 03C88D8E-1541-518E-8BFF-BEC6589B6334
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// False
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySqlLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySqlLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySqlLogConfigResponseBody) SetCode(v string) *ModifySqlLogConfigResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySqlLogConfigResponseBody) SetData(v *ModifySqlLogConfigResponseBodyData) *ModifySqlLogConfigResponseBody {
	s.Data = v
	return s
}

func (s *ModifySqlLogConfigResponseBody) SetMessage(v string) *ModifySqlLogConfigResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySqlLogConfigResponseBody) SetRequestId(v string) *ModifySqlLogConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySqlLogConfigResponseBody) SetSuccess(v string) *ModifySqlLogConfigResponseBody {
	s.Success = &v
	return s
}

type ModifySqlLogConfigResponseBodyData struct {
	// Indicates whether the cold data storage is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	ColdEnable *bool `json:"ColdEnable,omitempty" xml:"ColdEnable,omitempty"`
	// The number of days for which the SQL Explorer and Audit data is stored in cold storage. The value is calculated by using the following formula: Value of ColdRetention = Value of Retention - Value of HotRetention.``
	//
	// example:
	//
	// 23
	ColdRetention *int32 `json:"ColdRetention,omitempty" xml:"ColdRetention,omitempty"`
	// The time when the cold data storage was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1683712800000
	ColdStartTime *int64 `json:"ColdStartTime,omitempty" xml:"ColdStartTime,omitempty"`
	// The collector version. Valid values:
	//
	// 	- **MYSQL_V0**
	//
	// 	- **MYSQL_V1**
	//
	// 	- **MYSQL_V2**
	//
	// 	- **MYSQL_V3**
	//
	// 	- **PG_V1**
	//
	// 	- **rdspg_v1**
	//
	// 	- **polarpg_v1**
	//
	// example:
	//
	// MYSQL_V3
	CollectorVersion *string `json:"CollectorVersion,omitempty" xml:"CollectorVersion,omitempty"`
	// Indicates whether the hot data storage is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	HotEnable *bool `json:"HotEnable,omitempty" xml:"HotEnable,omitempty"`
	// The number of days for which the SQL Explorer and Audit data is stored in hot storage.
	//
	// example:
	//
	// 7
	HotRetention *int32 `json:"HotRetention,omitempty" xml:"HotRetention,omitempty"`
	// The time when the hot data storage was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1683712800000
	HotStartTime *int64 `json:"HotStartTime,omitempty" xml:"HotStartTime,omitempty"`
	// A reserved parameter.
	//
	// example:
	//
	// None
	LogFilter *string `json:"LogFilter,omitempty" xml:"LogFilter,omitempty"`
	// Indicates whether the SQL Explorer feature is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	RequestEnable *bool `json:"RequestEnable,omitempty" xml:"RequestEnable,omitempty"`
	// The time when the SQL Explorer feature was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1683712800000
	RequestStartTime *int64 `json:"RequestStartTime,omitempty" xml:"RequestStartTime,omitempty"`
	// The time when DAS Enterprise Edition V1 expired. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1715335200000
	RequestStopTime *int64 `json:"RequestStopTime,omitempty" xml:"RequestStopTime,omitempty"`
	// The total storage duration of the SQL Explorer and Audit data. Unit: day.
	//
	// example:
	//
	// 30
	Retention *int32 `json:"Retention,omitempty" xml:"Retention,omitempty"`
	// Indicates whether DAS Enterprise Edition is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	SqlLogEnable *bool `json:"SqlLogEnable,omitempty" xml:"SqlLogEnable,omitempty"`
	// The state of data migration. Valid values:
	//
	// 	- **FINISH**: The historical data is migrated.
	//
	// 	- **RUNNING**: The historical data is being migrated.
	//
	// 	- **FAILURE**: The historical data fails to be migrated.
	//
	// example:
	//
	// FINISH
	SqlLogState *string `json:"SqlLogState,omitempty" xml:"SqlLogState,omitempty"`
	// The time when DAS Enterprise Edition was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1683712800000
	SqlLogVisibleTime *int64 `json:"SqlLogVisibleTime,omitempty" xml:"SqlLogVisibleTime,omitempty"`
	// The latest version of DAS Enterprise Edition that supports the database instance. Valid values:
	//
	// 	- **SQL_LOG_V0**: DAS Enterprise Edition V0.
	//
	// 	- **SQL_LOG_V1**: DAS Enterprise Edition V1.
	//
	// 	- **SQL_LOG_V2**: DAS Enterprise Edition V2.
	//
	// 	- **SQL_LOG_V3**: DAS Enterprise Edition V3.
	//
	// 	- **SQL_LOG_NOT_ENABLE**: DAS Enterprise Edition is not enabled.
	//
	// 	- **SQL_LOG_NOT_SUPPORT**: DAS Enterprise Edition is not supported.
	//
	// example:
	//
	// SQL_LOG_V3
	SupportVersion *string `json:"SupportVersion,omitempty" xml:"SupportVersion,omitempty"`
	// The version of DAS Enterprise Edition that is enabled for the database instance. Valid values:
	//
	// 	- **SQL_LOG_V0**: DAS Enterprise Edition V0.
	//
	// 	- **SQL_LOG_V1**: DAS Enterprise Edition V1.
	//
	// 	- **SQL_LOG_V2**: DAS Enterprise Edition V2.
	//
	// 	- **SQL_LOG_V3**: DAS Enterprise Edition V3.
	//
	// 	- **SQL_LOG_NOT_ENABLE**: DAS Enterprise Edition is not enabled.
	//
	// 	- **SQL_LOG_NOT_SUPPORT**: DAS Enterprise Edition is not supported.
	//
	// example:
	//
	// SQL_LOG_V3
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ModifySqlLogConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifySqlLogConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifySqlLogConfigResponseBodyData) SetColdEnable(v bool) *ModifySqlLogConfigResponseBodyData {
	s.ColdEnable = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetColdRetention(v int32) *ModifySqlLogConfigResponseBodyData {
	s.ColdRetention = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetColdStartTime(v int64) *ModifySqlLogConfigResponseBodyData {
	s.ColdStartTime = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetCollectorVersion(v string) *ModifySqlLogConfigResponseBodyData {
	s.CollectorVersion = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetHotEnable(v bool) *ModifySqlLogConfigResponseBodyData {
	s.HotEnable = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetHotRetention(v int32) *ModifySqlLogConfigResponseBodyData {
	s.HotRetention = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetHotStartTime(v int64) *ModifySqlLogConfigResponseBodyData {
	s.HotStartTime = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetLogFilter(v string) *ModifySqlLogConfigResponseBodyData {
	s.LogFilter = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetRequestEnable(v bool) *ModifySqlLogConfigResponseBodyData {
	s.RequestEnable = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetRequestStartTime(v int64) *ModifySqlLogConfigResponseBodyData {
	s.RequestStartTime = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetRequestStopTime(v int64) *ModifySqlLogConfigResponseBodyData {
	s.RequestStopTime = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetRetention(v int32) *ModifySqlLogConfigResponseBodyData {
	s.Retention = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetSqlLogEnable(v bool) *ModifySqlLogConfigResponseBodyData {
	s.SqlLogEnable = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetSqlLogState(v string) *ModifySqlLogConfigResponseBodyData {
	s.SqlLogState = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetSqlLogVisibleTime(v int64) *ModifySqlLogConfigResponseBodyData {
	s.SqlLogVisibleTime = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetSupportVersion(v string) *ModifySqlLogConfigResponseBodyData {
	s.SupportVersion = &v
	return s
}

func (s *ModifySqlLogConfigResponseBodyData) SetVersion(v string) *ModifySqlLogConfigResponseBodyData {
	s.Version = &v
	return s
}

type ModifySqlLogConfigResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySqlLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySqlLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySqlLogConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifySqlLogConfigResponse) SetHeaders(v map[string]*string) *ModifySqlLogConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifySqlLogConfigResponse) SetStatusCode(v int32) *ModifySqlLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySqlLogConfigResponse) SetBody(v *ModifySqlLogConfigResponseBody) *ModifySqlLogConfigResponse {
	s.Body = v
	return s
}

type RunCloudBenchTaskRequest struct {
	// The stress testing task ID. You can call the [DescribeCloudBenchTasks](https://help.aliyun.com/document_detail/230670.html) operation to query the task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// e5cec704-0518-430f-8263-76f4dcds****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s RunCloudBenchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskRequest) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskRequest) SetTaskId(v string) *RunCloudBenchTaskRequest {
	s.TaskId = &v
	return s
}

type RunCloudBenchTaskResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of returned entries.
	Data *RunCloudBenchTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RunCloudBenchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskResponseBody) SetCode(v string) *RunCloudBenchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *RunCloudBenchTaskResponseBody) SetData(v *RunCloudBenchTaskResponseBodyData) *RunCloudBenchTaskResponseBody {
	s.Data = v
	return s
}

func (s *RunCloudBenchTaskResponseBody) SetMessage(v string) *RunCloudBenchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *RunCloudBenchTaskResponseBody) SetRequestId(v string) *RunCloudBenchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunCloudBenchTaskResponseBody) SetSuccess(v string) *RunCloudBenchTaskResponseBody {
	s.Success = &v
	return s
}

type RunCloudBenchTaskResponseBodyData struct {
	PreCheckItem []*RunCloudBenchTaskResponseBodyDataPreCheckItem `json:"PreCheckItem,omitempty" xml:"PreCheckItem,omitempty" type:"Repeated"`
}

func (s RunCloudBenchTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskResponseBodyData) SetPreCheckItem(v []*RunCloudBenchTaskResponseBodyDataPreCheckItem) *RunCloudBenchTaskResponseBodyData {
	s.PreCheckItem = v
	return s
}

type RunCloudBenchTaskResponseBodyDataPreCheckItem struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information of the check item.
	//
	// example:
	//
	// "Data": { "total": 1, "list":[...] }, "Code": 200, "Success": true }
	Details *string `json:"Details,omitempty" xml:"Details,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The name of the check item. Valid values:
	//
	// 	- **SqlArchiveStatusChecker**: checks whether SQL Explorer is available.
	//
	// 	- **BenchClientEnvChecker**: checks whether the runtime environment for programs on the stress testing client is available.
	//
	// 	- **SpecChecker**: checks whether the destination instance type and the instance type of the stress testing client support this API operation.
	//
	// 	- **SourceInstanceChecker**: checks whether the account of the source instance is available and whether the source instance is connected to the destination instance.
	//
	// 	- **BenchTargetChecker**: checks whether the account of the destination instance is available and whether the source instance is connected to the destination instance.
	//
	// example:
	//
	// BenchTargetChecker
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The sequence number of the check item. Valid values: **0*	- to **10**.
	//
	// example:
	//
	// 0
	Order *int32 `json:"Order,omitempty" xml:"Order,omitempty"`
	// The status of the task. Valid values:
	//
	// 	- **SUCCESS**: The task is successful.
	//
	// 	- **IGNORED**: The task is ignored.
	//
	// 	- **RUNNING**: The task is running.
	//
	// 	- **EXCEPTION**: An error occurred.
	//
	// example:
	//
	// SUCCESS
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s RunCloudBenchTaskResponseBodyDataPreCheckItem) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskResponseBodyDataPreCheckItem) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetCode(v int32) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Code = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetDetails(v string) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Details = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetMessage(v string) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Message = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetName(v string) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Name = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetOrder(v int32) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Order = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetStatus(v string) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Status = &v
	return s
}

type RunCloudBenchTaskResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunCloudBenchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunCloudBenchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskResponse) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskResponse) SetHeaders(v map[string]*string) *RunCloudBenchTaskResponse {
	s.Headers = v
	return s
}

func (s *RunCloudBenchTaskResponse) SetStatusCode(v int32) *RunCloudBenchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *RunCloudBenchTaskResponse) SetBody(v *RunCloudBenchTaskResponseBody) *RunCloudBenchTaskResponse {
	s.Body = v
	return s
}

type SetEventSubscriptionRequest struct {
	// Specifies whether to enable the event subscription feature. Valid values:
	//
	// 	- **0**: disables the event subscription feature.
	//
	// 	- **1**: enables the event subscription feature.
	//
	// example:
	//
	// 1
	Active *string `json:"Active,omitempty" xml:"Active,omitempty"`
	// The notification method. Valid values:
	//
	// 	- **hdm_alarm_sms**: text message.
	//
	// 	- **dingtalk**: DingTalk chatbot.
	//
	// 	- **hdm_alarm_sms_and_email**: text message and email.
	//
	// 	- **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
	//
	// example:
	//
	// hdm_alarm_sms,dingtalk
	ChannelType *string `json:"ChannelType,omitempty" xml:"ChannelType,omitempty"`
	// The name of the contact group that receives alert notifications. Separate multiple names with commas (,).
	//
	// example:
	//
	// Default contact group
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The name of the contact who receives alert notifications. Separate multiple names with commas (,).
	//
	// example:
	//
	// Default contact
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The notification rules based on the event type. If you leave this parameter empty, the values of **MinInterval*	- and **ChannelType*	- prevail.
	//
	// Specify this parameter in the following format: `{"silenced": {"Event type 1":Specifies whether to enable adaptive silence, "Event type 2":Specify whether to enable adaptive silence},"min_interval": {"Event type 1":Minimum interval between event notifications, "Event type 2":Minimum interval between event notifications},"alert_type": {"Event type 1":"Notification method", "Event type 2":"Notification method"}}`.
	//
	// 	- **silenced**: specifies whether to enable adaptive silence. After you enable adaptive silence, the interval between consecutive alert notifications for an event is the greater one of the minimum interval specified by **min_interval*	- and one third of the event duration. Valid values:
	//
	//     	- 1: enables adaptive silence.
	//
	//     	- 2: disables adaptive silence.
	//
	// 	- **min_interval**: the minimum interval between event notifications. Unit: seconds.
	//
	// 	- **alert_type**: the notification method. Valid values:
	//
	//     	- **hdm_alarm_sms**: text message.
	//
	//     	- **dingtalk**: DingTalk chatbot.
	//
	//     	- **hdm_alarm_sms_and_email**: text message and email.
	//
	//     	- **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
	//
	// example:
	//
	// {"silenced": {"AutoScale":1, "SQLThrottle":0, "TimeSeriesAbnormal": 1}, "min_interval": {"AutoScale":300, "SQLThrottle":360, "TimeSeriesAbnormal": 120}, "alert_type": {"AutoScale":"hdm_alarm_sms", "SQLThrottle":"hdm_alarm_sms_and_email", "TimeSeriesAbnormal": "hdm_alarm_sms,dingtalk"}}
	DispatchRule *string `json:"DispatchRule,omitempty" xml:"DispatchRule,omitempty"`
	// The supported event scenarios. You can set the value to **AllContext**, which indicates that all scenarios are supported.
	//
	// example:
	//
	// AllContext
	EventContext *string `json:"EventContext,omitempty" xml:"EventContext,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The language of event notifications. You can set the value to **zh-CN**, which indicates that event notifications are sent in Chinese.
	//
	// example:
	//
	// zh-CN
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The risk level of the events. Valid values:
	//
	// 	- **Notice**: events that trigger notifications, including events at the **Notice**, **Optimization**, **Warn**, and **Critical*	- levels.
	//
	// 	- **Optimization**: events that trigger optimizations, including events at the **Optimization**, **Warn**, and **Critical*	- levels.
	//
	// 	- **Warn**: events that trigger warnings, including events at the **Warn*	- and **Critical*	- levels.
	//
	// 	- **Critical**: events that trigger critical warnings.
	//
	// The following content describes the events at each level in detail:
	//
	// 	- Notice: events that are related to database exceptions for which no suggestions are generated.
	//
	// 	- Optimization: events for which optimization suggestions are generated based on the status of the database.
	//
	// 	- Warn: events that may affect the running of the database.
	//
	// 	- Critical: events that affect the running of the database.
	//
	// example:
	//
	// Optimization
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The minimum interval between consecutive event notifications. Unit: seconds.
	//
	// example:
	//
	// 60
	MinInterval *string `json:"MinInterval,omitempty" xml:"MinInterval,omitempty"`
	// The alert severity based on the event type.
	//
	// Specify this parameter in the following format: `{"Event type 1":"Alert severity", "Event type 2":"Alert severity"}`.
	//
	// Valid values of event types:
	//
	// 	- **AutoScale**: auto scaling event.
	//
	// 	- **SQLThrottle**: throttling event.
	//
	// 	- **TimeSeriesAbnormal**: event for detecting time series anomalies.
	//
	// 	- **SQLOptimize**: SQL optimization event.
	//
	// 	- **ResourceOptimize**: storage optimization event.
	//
	// Valid values of alert severities:
	//
	// 	- **info**
	//
	// 	- **noticed**
	//
	// 	- **warning**
	//
	// 	- **critical**
	//
	// example:
	//
	// {"AutoScale":"critical","SQLThrottle":"info","TimeSeriesAbnormal":"warning"}
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
}

func (s SetEventSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s SetEventSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *SetEventSubscriptionRequest) SetActive(v string) *SetEventSubscriptionRequest {
	s.Active = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetChannelType(v string) *SetEventSubscriptionRequest {
	s.ChannelType = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetContactGroupName(v string) *SetEventSubscriptionRequest {
	s.ContactGroupName = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetContactName(v string) *SetEventSubscriptionRequest {
	s.ContactName = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetDispatchRule(v string) *SetEventSubscriptionRequest {
	s.DispatchRule = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetEventContext(v string) *SetEventSubscriptionRequest {
	s.EventContext = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetInstanceId(v string) *SetEventSubscriptionRequest {
	s.InstanceId = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetLang(v string) *SetEventSubscriptionRequest {
	s.Lang = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetLevel(v string) *SetEventSubscriptionRequest {
	s.Level = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetMinInterval(v string) *SetEventSubscriptionRequest {
	s.MinInterval = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetSeverity(v string) *SetEventSubscriptionRequest {
	s.Severity = &v
	return s
}

type SetEventSubscriptionResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *SetEventSubscriptionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 097F0C56-B252-515A-B602-FC56EF93EF8A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetEventSubscriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetEventSubscriptionResponseBody) GoString() string {
	return s.String()
}

func (s *SetEventSubscriptionResponseBody) SetCode(v string) *SetEventSubscriptionResponseBody {
	s.Code = &v
	return s
}

func (s *SetEventSubscriptionResponseBody) SetData(v *SetEventSubscriptionResponseBodyData) *SetEventSubscriptionResponseBody {
	s.Data = v
	return s
}

func (s *SetEventSubscriptionResponseBody) SetMessage(v string) *SetEventSubscriptionResponseBody {
	s.Message = &v
	return s
}

func (s *SetEventSubscriptionResponseBody) SetRequestId(v string) *SetEventSubscriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetEventSubscriptionResponseBody) SetSuccess(v string) *SetEventSubscriptionResponseBody {
	s.Success = &v
	return s
}

type SetEventSubscriptionResponseBodyData struct {
	// Indicates whether the event subscription feature is enabled. Valid values:
	//
	// 	- **0**: The event subscription feature is disabled.
	//
	// 	- **1**: The event subscription feature is enabled.
	//
	// example:
	//
	// 1
	Active *int32 `json:"active,omitempty" xml:"active,omitempty"`
	// The notification method. Valid values:
	//
	// 	- **hdm_alarm_sms**: text message.
	//
	// 	- **dingtalk**: DingTalk chatbot.
	//
	// 	- **hdm_alarm_sms_and_email**: text message and email.
	//
	// 	- **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
	//
	// example:
	//
	// hdm_alarm_sms,dingtalk
	ChannelType *string `json:"channelType,omitempty" xml:"channelType,omitempty"`
	// The name of the contact group that receives alert notifications. Multiple names are separated by commas (,).
	//
	// example:
	//
	// Default contact group
	ContactGroupName *string `json:"contactGroupName,omitempty" xml:"contactGroupName,omitempty"`
	// The name of the contact who receives alert notifications. Multiple names are separated by commas (,).
	//
	// example:
	//
	// Default contact
	ContactName *string `json:"contactName,omitempty" xml:"contactName,omitempty"`
	// The supported event scenarios. Only **AllContext*	- is returned for this parameter, which indicates that all scenarios are supported.
	//
	// example:
	//
	// AllContext
	EventContext *string `json:"eventContext,omitempty" xml:"eventContext,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// The language of event notifications. Only **zh-CN*	- is returned for this parameter, which indicates that event notifications are sent in Chinese.
	//
	// example:
	//
	// zh_CN
	Lang *string `json:"lang,omitempty" xml:"lang,omitempty"`
	// The risk level of the events. Valid values:
	//
	// 	- **Notice**
	//
	// 	- **Optimization**
	//
	// 	- **Warn**
	//
	// 	- **Critical**
	//
	// example:
	//
	// Optimization
	Level *string `json:"level,omitempty" xml:"level,omitempty"`
	// The minimum interval between consecutive event notifications. Unit: seconds.
	//
	// example:
	//
	// 60
	MinInterval *int32 `json:"minInterval,omitempty" xml:"minInterval,omitempty"`
	// The user ID.
	//
	// example:
	//
	// 1088760496****
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s SetEventSubscriptionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SetEventSubscriptionResponseBodyData) GoString() string {
	return s.String()
}

func (s *SetEventSubscriptionResponseBodyData) SetActive(v int32) *SetEventSubscriptionResponseBodyData {
	s.Active = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetChannelType(v string) *SetEventSubscriptionResponseBodyData {
	s.ChannelType = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetContactGroupName(v string) *SetEventSubscriptionResponseBodyData {
	s.ContactGroupName = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetContactName(v string) *SetEventSubscriptionResponseBodyData {
	s.ContactName = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetEventContext(v string) *SetEventSubscriptionResponseBodyData {
	s.EventContext = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetInstanceId(v string) *SetEventSubscriptionResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetLang(v string) *SetEventSubscriptionResponseBodyData {
	s.Lang = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetLevel(v string) *SetEventSubscriptionResponseBodyData {
	s.Level = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetMinInterval(v int32) *SetEventSubscriptionResponseBodyData {
	s.MinInterval = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetUserId(v string) *SetEventSubscriptionResponseBodyData {
	s.UserId = &v
	return s
}

type SetEventSubscriptionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetEventSubscriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetEventSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s SetEventSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *SetEventSubscriptionResponse) SetHeaders(v map[string]*string) *SetEventSubscriptionResponse {
	s.Headers = v
	return s
}

func (s *SetEventSubscriptionResponse) SetStatusCode(v int32) *SetEventSubscriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *SetEventSubscriptionResponse) SetBody(v *SetEventSubscriptionResponseBody) *SetEventSubscriptionResponse {
	s.Body = v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncRequest struct {
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance IDs.
	//
	// >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\", \\"Instance ID2\\"]`.
	//
	// This parameter is required.
	//
	// example:
	//
	// [\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The ID of the asynchronous request.
	//
	// >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId*	- returned in the response to re-initiate the call until the value of **isFinish*	- is **true**.***	- In this case, you must call this operation at least twice.
	//
	// example:
	//
	// async__507044db6c4eadfa2dab9b084e80****
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The fragmentation rate that triggers automatic fragment recycling of a single physical table. Valid values: **0.10*	- to **0.99**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0.2
	TableFragmentationRatio *float64 `json:"TableFragmentationRatio,omitempty" xml:"TableFragmentationRatio,omitempty"`
	// The minimum storage usage that triggers automatic fragment recycling of a single physical table. Valid values: **5*	- to **100**. Unit: GB.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	TableSpaceSize *float64 `json:"TableSpaceSize,omitempty" xml:"TableSpaceSize,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncRequest) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetConsoleContext(v string) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.ConsoleContext = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetInstanceIds(v string) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.InstanceIds = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetResultId(v string) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.ResultId = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetTableFragmentationRatio(v float64) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.TableFragmentationRatio = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetTableSpaceSize(v float64) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.TableSpaceSize = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9CB97BC4-6479-55D0-B9D0-EA925AFE****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetCode(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetData(v *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.Data = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetMessage(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetRequestId(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetSuccess(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.Success = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBodyData struct {
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Complete *bool `json:"Complete,omitempty" xml:"Complete,omitempty"`
	// The returned data of the configuration.
	//
	// >  The data is returned only if the value of isFinish is **true**. This value indicates that the asynchronous request is complete.
	ConfigResponse *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse `json:"ConfigResponse,omitempty" xml:"ConfigResponse,omitempty" type:"Struct"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Fail *bool `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// The ID of the asynchronous request.
	//
	// example:
	//
	// async__20ee808e72257f16a4fe024057ca****
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// 	- **RUNNING**
	//
	// 	- **SUCCESS**
	//
	// 	- **FAIL**
	//
	// example:
	//
	// SUCCESS
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1645668213000
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetComplete(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.Complete = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetConfigResponse(v *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.ConfigResponse = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetFail(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.Fail = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetIsFinish(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetResultId(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetState(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.State = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetTimestamp(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.Timestamp = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse struct {
	// The number of database instances for which the parameters failed to be configured.
	//
	// example:
	//
	// 1
	ConfigFailInstanceCount *int64 `json:"ConfigFailInstanceCount,omitempty" xml:"ConfigFailInstanceCount,omitempty"`
	// The database instances for which the parameters failed to be configured.
	ConfigFailInstanceList []*UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList `json:"ConfigFailInstanceList,omitempty" xml:"ConfigFailInstanceList,omitempty" type:"Repeated"`
	// The number of database instances for which the parameters are configured.
	//
	// example:
	//
	// 1
	ConfigSuccessInstanceCount *int64 `json:"ConfigSuccessInstanceCount,omitempty" xml:"ConfigSuccessInstanceCount,omitempty"`
	// The database instances for which the parameters are configured.
	ConfigSuccessInstanceList []*UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList `json:"ConfigSuccessInstanceList,omitempty" xml:"ConfigSuccessInstanceList,omitempty" type:"Repeated"`
	// The total number of database instances.
	//
	// example:
	//
	// 2
	TotalInstanceCount *int64 `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetConfigFailInstanceCount(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigFailInstanceCount = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetConfigFailInstanceList(v []*UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigFailInstanceList = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetConfigSuccessInstanceCount(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigSuccessInstanceCount = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetConfigSuccessInstanceList(v []*UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigSuccessInstanceList = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetTotalInstanceCount(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.TotalInstanceCount = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList struct {
	// Indicates whether the parameters are configured. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// Only Support DAS Pro High-availability Edition RDS MySQL 5.6, 5.7, 8.0 instance, and CPU cores >= 4, innodb_file_per_table=ON
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze9xrhze0709****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetConfigSuccess(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetErrorMessage(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetInstanceId(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.InstanceId = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList struct {
	// Indicates whether the parameters are configured. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) SetConfigSuccess(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) SetInstanceId(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList {
	s.InstanceId = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAutoResourceOptimizeRulesAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponse) SetHeaders(v map[string]*string) *UpdateAutoResourceOptimizeRulesAsyncResponse {
	s.Headers = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponse) SetStatusCode(v int32) *UpdateAutoResourceOptimizeRulesAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponse) SetBody(v *UpdateAutoResourceOptimizeRulesAsyncResponseBody) *UpdateAutoResourceOptimizeRulesAsyncResponse {
	s.Body = v
	return s
}

type UpdateAutoSqlOptimizeStatusRequest struct {
	// The database instance IDs. Separate multiple IDs with commas (,).
	//
	// >  You can specify up to 50 instance IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// rm-bp10usoc1erj7****,rm-bp10usoc1erj7****
	Instances *string `json:"Instances,omitempty" xml:"Instances,omitempty"`
	// The status of the automatic SQL optimization feature. Valid values:
	//
	// 	- **0**: The automatic SQL optimization feature is disabled.
	//
	// 	- **1**: **SQL diagnosis and automatic index creation*	- is specified.
	//
	// 	- **3**: **SQL diagnosis only*	- is specified.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateAutoSqlOptimizeStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoSqlOptimizeStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateAutoSqlOptimizeStatusRequest) SetInstances(v string) *UpdateAutoSqlOptimizeStatusRequest {
	s.Instances = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusRequest) SetStatus(v int32) *UpdateAutoSqlOptimizeStatusRequest {
	s.Status = &v
	return s
}

type UpdateAutoSqlOptimizeStatusResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *UpdateAutoSqlOptimizeStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A52AD37C-35ED-581A-AC23-2232BE54****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAutoSqlOptimizeStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoSqlOptimizeStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetCode(v string) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetData(v *UpdateAutoSqlOptimizeStatusResponseBodyData) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.Data = v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetMessage(v string) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetRequestId(v string) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetSuccess(v string) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.Success = &v
	return s
}

type UpdateAutoSqlOptimizeStatusResponseBodyData struct {
	// The error code. Valid values:
	//
	// 	- **-1001**: indicates that the specified parameter is invalid.
	//
	// 	- **-91029**: indicates that a system error occurred.
	//
	// example:
	//
	// -1001
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message.
	//
	// example:
	//
	// invalid param
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// Indicates whether the request initiated to configure the automatic SQL optimization feature was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAutoSqlOptimizeStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoSqlOptimizeStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateAutoSqlOptimizeStatusResponseBodyData) SetErrorCode(v string) *UpdateAutoSqlOptimizeStatusResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBodyData) SetErrorMsg(v string) *UpdateAutoSqlOptimizeStatusResponseBodyData {
	s.ErrorMsg = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBodyData) SetSuccess(v string) *UpdateAutoSqlOptimizeStatusResponseBodyData {
	s.Success = &v
	return s
}

type UpdateAutoSqlOptimizeStatusResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAutoSqlOptimizeStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAutoSqlOptimizeStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoSqlOptimizeStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoSqlOptimizeStatusResponse) SetHeaders(v map[string]*string) *UpdateAutoSqlOptimizeStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponse) SetStatusCode(v int32) *UpdateAutoSqlOptimizeStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponse) SetBody(v *UpdateAutoSqlOptimizeStatusResponseBody) *UpdateAutoSqlOptimizeStatusResponse {
	s.Body = v
	return s
}

type UpdateAutoThrottleRulesAsyncRequest struct {
	// The duration threshold for triggering automatic SQL throttling. Set this parameter to an integer that is greater than or equal to 2. Unit: minutes.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	AbnormalDuration *float64 `json:"AbnormalDuration,omitempty" xml:"AbnormalDuration,omitempty"`
	// The threshold for the number of active sessions.
	//
	// 	- If this parameter and CpuUsage are in the **OR*	- relationship, set this parameter to an integer that is greater than or equal to 16.
	//
	// 	- If this parameter and CpuUsage are in the **AND*	- relationship, set this parameter to an integer that is greater than or equal to 2.
	//
	// This parameter is required.
	//
	// example:
	//
	// 16
	ActiveSessions *int64 `json:"ActiveSessions,omitempty" xml:"ActiveSessions,omitempty"`
	// The end time of the throttling window. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 23:59Z
	AllowThrottleEndTime *string `json:"AllowThrottleEndTime,omitempty" xml:"AllowThrottleEndTime,omitempty"`
	// The start time of the throttling window. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 00:00Z
	AllowThrottleStartTime *string `json:"AllowThrottleStartTime,omitempty" xml:"AllowThrottleStartTime,omitempty"`
	// Specifies whether to terminate abnormal SQL statements in execution at the same time. Valid values:
	//
	// >  Abnormal SQL statements use the same template as the SQL statements to be throttled.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	AutoKillSession *bool `json:"AutoKillSession,omitempty" xml:"AutoKillSession,omitempty"`
	// The reserved parameter.
	//
	// example:
	//
	// None
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The logical relationship between the CPU utilization threshold and the maximum number of active sessions. Valid values:
	//
	// 	- **AND**
	//
	// 	- **OR**
	//
	// This parameter is required.
	//
	// example:
	//
	// OR
	CpuSessionRelation *string `json:"CpuSessionRelation,omitempty" xml:"CpuSessionRelation,omitempty"`
	// The threshold for CPU utilization. Valid values: 70% to 100%.
	//
	// This parameter is required.
	//
	// example:
	//
	// 70
	CpuUsage *float64 `json:"CpuUsage,omitempty" xml:"CpuUsage,omitempty"`
	// The database instance IDs.
	//
	// >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\\"Instance ID1\\", \\"Instance ID2\\"]`.
	//
	// This parameter is required.
	//
	// example:
	//
	// [\\"rm-2ze8g2am97624****\\",\\"rm-2ze9xrhze0709****\\"]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The maximum throttling duration. Set this parameter to a positive integer. Unit: minutes.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	MaxThrottleTime *float64 `json:"MaxThrottleTime,omitempty" xml:"MaxThrottleTime,omitempty"`
	// The ID of the asynchronous request.
	//
	// >  You can leave this parameter empty when you call the operation to initiate the request for the first time, and use the value of this parameter contained in the response to the first request for subsequent requests.
	//
	// example:
	//
	// async__507044db6c4eadfa2dab9b084e80****
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncRequest) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetAbnormalDuration(v float64) *UpdateAutoThrottleRulesAsyncRequest {
	s.AbnormalDuration = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetActiveSessions(v int64) *UpdateAutoThrottleRulesAsyncRequest {
	s.ActiveSessions = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetAllowThrottleEndTime(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.AllowThrottleEndTime = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetAllowThrottleStartTime(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.AllowThrottleStartTime = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetAutoKillSession(v bool) *UpdateAutoThrottleRulesAsyncRequest {
	s.AutoKillSession = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetConsoleContext(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.ConsoleContext = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetCpuSessionRelation(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.CpuSessionRelation = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetCpuUsage(v float64) *UpdateAutoThrottleRulesAsyncRequest {
	s.CpuUsage = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetInstanceIds(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.InstanceIds = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetMaxThrottleTime(v float64) *UpdateAutoThrottleRulesAsyncRequest {
	s.MaxThrottleTime = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetResultId(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.ResultId = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBody struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 200
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *UpdateAutoThrottleRulesAsyncResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful*	- is returned. If the request failed, an error message such as an error code is returned.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B6D17591-B48B-4D31-9CD6-9B9796B2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetCode(v int64) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetData(v *UpdateAutoThrottleRulesAsyncResponseBodyData) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.Data = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetMessage(v string) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetRequestId(v string) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetSuccess(v bool) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.Success = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBodyData struct {
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Complete *bool `json:"Complete,omitempty" xml:"Complete,omitempty"`
	// The returned data of the configuration.
	//
	// >  The data is returned only if the value of isFinish is **true**. This value indicates that the asynchronous request is complete.
	ConfigResponse *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse `json:"ConfigResponse,omitempty" xml:"ConfigResponse,omitempty" type:"Struct"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	Fail *bool `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// The ID of the asynchronous request.
	//
	// example:
	//
	// async__665ee69612f1627c7fd9f3c85075****
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// 	- **RUNNING**
	//
	// 	- **SUCCESS**
	//
	// 	- **FAIL**
	//
	// example:
	//
	// SUCCESS
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1645668213000
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetComplete(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.Complete = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetConfigResponse(v *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.ConfigResponse = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetFail(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.Fail = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetIsFinish(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetResultId(v string) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetState(v string) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.State = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetTimestamp(v int64) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.Timestamp = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse struct {
	// The number of database instances for which the parameters failed to be configured.
	//
	// example:
	//
	// 1
	ConfigFailInstanceCount *int64 `json:"ConfigFailInstanceCount,omitempty" xml:"ConfigFailInstanceCount,omitempty"`
	// The database instances for which the parameters failed to be configured.
	ConfigFailInstanceList []*UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList `json:"ConfigFailInstanceList,omitempty" xml:"ConfigFailInstanceList,omitempty" type:"Repeated"`
	// The number of database instances for which the parameters are configured.
	//
	// example:
	//
	// 1
	ConfigSuccessInstanceCount *int64 `json:"ConfigSuccessInstanceCount,omitempty" xml:"ConfigSuccessInstanceCount,omitempty"`
	// The database instances for which the parameters are configured.
	ConfigSuccessInstanceList []*UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList `json:"ConfigSuccessInstanceList,omitempty" xml:"ConfigSuccessInstanceList,omitempty" type:"Repeated"`
	// The total number of database instances.
	//
	// example:
	//
	// 2
	TotalInstanceCount *int64 `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetConfigFailInstanceCount(v int64) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigFailInstanceCount = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetConfigFailInstanceList(v []*UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigFailInstanceList = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetConfigSuccessInstanceCount(v int64) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigSuccessInstanceCount = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetConfigSuccessInstanceList(v []*UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigSuccessInstanceList = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetTotalInstanceCount(v int64) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.TotalInstanceCount = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList struct {
	// Indicates whether the parameters are configured. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// instance das autonomy service is off or can not find instance
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze9xrhze0709****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetConfigSuccess(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetErrorMessage(v string) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetInstanceId(v string) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.InstanceId = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList struct {
	// Indicates whether the parameters are configured. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The database instance ID.
	//
	// example:
	//
	// rm-2ze8g2am97624****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) SetConfigSuccess(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) SetInstanceId(v string) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList {
	s.InstanceId = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAutoThrottleRulesAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponse) SetHeaders(v map[string]*string) *UpdateAutoThrottleRulesAsyncResponse {
	s.Headers = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponse) SetStatusCode(v int32) *UpdateAutoThrottleRulesAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponse) SetBody(v *UpdateAutoThrottleRulesAsyncResponseBody) *UpdateAutoThrottleRulesAsyncResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("central")
	client.EndpointMap = map[string]*string{
		"cn-shanghai": tea.String("das.cn-shanghai.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("das"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a database instance to Database Autonomy Service (DAS).
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call DAS, you must set the region to cn-shanghai.
//
// @param request - AddHDMInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddHDMInstanceResponse
func (client *Client) AddHDMInstanceWithOptions(request *AddHDMInstanceRequest, runtime *util.RuntimeOptions) (_result *AddHDMInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.FlushAccount)) {
		query["FlushAccount"] = request.FlushAccount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceAlias)) {
		query["InstanceAlias"] = request.InstanceAlias
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceArea)) {
		query["InstanceArea"] = request.InstanceArea
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		query["Username"] = request.Username
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddHDMInstance"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AddHDMInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AddHDMInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds a database instance to Database Autonomy Service (DAS).
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call DAS, you must set the region to cn-shanghai.
//
// @param request - AddHDMInstanceRequest
//
// @return AddHDMInstanceResponse
func (client *Client) AddHDMInstance(request *AddHDMInstanceRequest) (_result *AddHDMInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddHDMInstanceResponse{}
	_body, _err := client.AddHDMInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a cache analysis task.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- You can call this operation to analyze the data structures of ApsaraDB for Redis and the following self-developed data structures of Tair: TairString, TairHash, TairGIS, TairBloom, TairDoc, TairCpc, and TairZset. Other self-developed Tair data structures are not supported.
//
// 	- If the specifications of the database instance that you want to analyze are changed, the backup file generated before the specification change cannot be analyzed.
//
// 	- Tair ESSD/SSD-based instances are not supported.
//
// @param request - CreateCacheAnalysisJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCacheAnalysisJobResponse
func (client *Client) CreateCacheAnalysisJobWithOptions(request *CreateCacheAnalysisJobRequest, runtime *util.RuntimeOptions) (_result *CreateCacheAnalysisJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupSetId)) {
		query["BackupSetId"] = request.BackupSetId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Separators)) {
		query["Separators"] = request.Separators
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCacheAnalysisJob"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateCacheAnalysisJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateCacheAnalysisJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a cache analysis task.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- You can call this operation to analyze the data structures of ApsaraDB for Redis and the following self-developed data structures of Tair: TairString, TairHash, TairGIS, TairBloom, TairDoc, TairCpc, and TairZset. Other self-developed Tair data structures are not supported.
//
// 	- If the specifications of the database instance that you want to analyze are changed, the backup file generated before the specification change cannot be analyzed.
//
// 	- Tair ESSD/SSD-based instances are not supported.
//
// @param request - CreateCacheAnalysisJobRequest
//
// @return CreateCacheAnalysisJobResponse
func (client *Client) CreateCacheAnalysisJob(request *CreateCacheAnalysisJobRequest) (_result *CreateCacheAnalysisJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCacheAnalysisJobResponse{}
	_body, _err := client.CreateCacheAnalysisJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates stress testing tasks.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html). Before you call this API operation, make sure that your database instances meet the following requirements:
//
// 	- The source database instance is an ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition instance, or a PolarDB for MySQL Cluster Edition cluster.
//
// 	- The destination database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
//
// 	- The source and destination database instances are connected to DAS. For information about how to connect database instances to DAS, see [Connect an Alibaba Cloud database instance to DAS](https://help.aliyun.com/document_detail/65405.html).
//
// 	- DAS Enterprise Edition is enabled for the source and destination database instances. For more information, see [Overview](https://help.aliyun.com/document_detail/190912.html).
//
// @param request - CreateCloudBenchTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCloudBenchTasksResponse
func (client *Client) CreateCloudBenchTasksWithOptions(request *CreateCloudBenchTasksRequest, runtime *util.RuntimeOptions) (_result *CreateCloudBenchTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.BackupId)) {
		query["BackupId"] = request.BackupId
	}

	if !tea.BoolValue(util.IsUnset(request.BackupTime)) {
		query["BackupTime"] = request.BackupTime
	}

	if !tea.BoolValue(util.IsUnset(request.ClientType)) {
		query["ClientType"] = request.ClientType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DstConnectionString)) {
		query["DstConnectionString"] = request.DstConnectionString
	}

	if !tea.BoolValue(util.IsUnset(request.DstInstanceId)) {
		query["DstInstanceId"] = request.DstInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DstPort)) {
		query["DstPort"] = request.DstPort
	}

	if !tea.BoolValue(util.IsUnset(request.DstSuperAccount)) {
		query["DstSuperAccount"] = request.DstSuperAccount
	}

	if !tea.BoolValue(util.IsUnset(request.DstSuperPassword)) {
		query["DstSuperPassword"] = request.DstSuperPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DstType)) {
		query["DstType"] = request.DstType
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobClass)) {
		query["DtsJobClass"] = request.DtsJobClass
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.EndState)) {
		query["EndState"] = request.EndState
	}

	if !tea.BoolValue(util.IsUnset(request.GatewayVpcId)) {
		query["GatewayVpcId"] = request.GatewayVpcId
	}

	if !tea.BoolValue(util.IsUnset(request.GatewayVpcIp)) {
		query["GatewayVpcIp"] = request.GatewayVpcIp
	}

	if !tea.BoolValue(util.IsUnset(request.Rate)) {
		query["Rate"] = request.Rate
	}

	if !tea.BoolValue(util.IsUnset(request.RequestDuration)) {
		query["RequestDuration"] = request.RequestDuration
	}

	if !tea.BoolValue(util.IsUnset(request.RequestEndTime)) {
		query["RequestEndTime"] = request.RequestEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.RequestStartTime)) {
		query["RequestStartTime"] = request.RequestStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SmartPressureTime)) {
		query["SmartPressureTime"] = request.SmartPressureTime
	}

	if !tea.BoolValue(util.IsUnset(request.SrcInstanceId)) {
		query["SrcInstanceId"] = request.SrcInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcPublicIp)) {
		query["SrcPublicIp"] = request.SrcPublicIp
	}

	if !tea.BoolValue(util.IsUnset(request.SrcSuperAccount)) {
		query["SrcSuperAccount"] = request.SrcSuperAccount
	}

	if !tea.BoolValue(util.IsUnset(request.SrcSuperPassword)) {
		query["SrcSuperPassword"] = request.SrcSuperPassword
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkDir)) {
		query["WorkDir"] = request.WorkDir
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCloudBenchTasks"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateCloudBenchTasksResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateCloudBenchTasksResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates stress testing tasks.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html). Before you call this API operation, make sure that your database instances meet the following requirements:
//
// 	- The source database instance is an ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition instance, or a PolarDB for MySQL Cluster Edition cluster.
//
// 	- The destination database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
//
// 	- The source and destination database instances are connected to DAS. For information about how to connect database instances to DAS, see [Connect an Alibaba Cloud database instance to DAS](https://help.aliyun.com/document_detail/65405.html).
//
// 	- DAS Enterprise Edition is enabled for the source and destination database instances. For more information, see [Overview](https://help.aliyun.com/document_detail/190912.html).
//
// @param request - CreateCloudBenchTasksRequest
//
// @return CreateCloudBenchTasksResponse
func (client *Client) CreateCloudBenchTasks(request *CreateCloudBenchTasksRequest) (_result *CreateCloudBenchTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCloudBenchTasksResponse{}
	_body, _err := client.CreateCloudBenchTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a diagnostic report.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
//
// 	- The version of Database Autonomy Service (DAS) SDK must be 1.0.3 or later.
//
// 	- If you use an SDK to call DAS, you must set the region to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- RDS MySQL
//
//     	- PolarDB for MySQL
//
//     	- Redis
//
// @param request - CreateDiagnosticReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDiagnosticReportResponse
func (client *Client) CreateDiagnosticReportWithOptions(request *CreateDiagnosticReportRequest, runtime *util.RuntimeOptions) (_result *CreateDiagnosticReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDiagnosticReport"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateDiagnosticReportResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateDiagnosticReportResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a diagnostic report.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
//
// 	- The version of Database Autonomy Service (DAS) SDK must be 1.0.3 or later.
//
// 	- If you use an SDK to call DAS, you must set the region to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- RDS MySQL
//
//     	- PolarDB for MySQL
//
//     	- Redis
//
// @param request - CreateDiagnosticReportRequest
//
// @return CreateDiagnosticReportResponse
func (client *Client) CreateDiagnosticReport(request *CreateDiagnosticReportRequest) (_result *CreateDiagnosticReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiagnosticReportResponse{}
	_body, _err := client.CreateDiagnosticReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a task that terminates sessions.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - CreateKillInstanceSessionTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateKillInstanceSessionTaskResponse
func (client *Client) CreateKillInstanceSessionTaskWithOptions(request *CreateKillInstanceSessionTaskRequest, runtime *util.RuntimeOptions) (_result *CreateKillInstanceSessionTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbUser)) {
		query["DbUser"] = request.DbUser
	}

	if !tea.BoolValue(util.IsUnset(request.DbUserPassword)) {
		query["DbUserPassword"] = request.DbUserPassword
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoredUsers)) {
		query["IgnoredUsers"] = request.IgnoredUsers
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.KillAllSessions)) {
		query["KillAllSessions"] = request.KillAllSessions
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionIds)) {
		query["SessionIds"] = request.SessionIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateKillInstanceSessionTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateKillInstanceSessionTaskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateKillInstanceSessionTaskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a task that terminates sessions.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - CreateKillInstanceSessionTaskRequest
//
// @return CreateKillInstanceSessionTaskResponse
func (client *Client) CreateKillInstanceSessionTask(request *CreateKillInstanceSessionTaskRequest) (_result *CreateKillInstanceSessionTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateKillInstanceSessionTaskResponse{}
	_body, _err := client.CreateKillInstanceSessionTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建结束会话的任务
//
// @param request - CreateKillInstanceSessionTaskWithMaintainUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateKillInstanceSessionTaskWithMaintainUserResponse
func (client *Client) CreateKillInstanceSessionTaskWithMaintainUserWithOptions(request *CreateKillInstanceSessionTaskWithMaintainUserRequest, runtime *util.RuntimeOptions) (_result *CreateKillInstanceSessionTaskWithMaintainUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IgnoredUsers)) {
		query["IgnoredUsers"] = request.IgnoredUsers
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.KillAllSessions)) {
		query["KillAllSessions"] = request.KillAllSessions
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionIds)) {
		query["SessionIds"] = request.SessionIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateKillInstanceSessionTaskWithMaintainUser"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateKillInstanceSessionTaskWithMaintainUserResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateKillInstanceSessionTaskWithMaintainUserResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 创建结束会话的任务
//
// @param request - CreateKillInstanceSessionTaskWithMaintainUserRequest
//
// @return CreateKillInstanceSessionTaskWithMaintainUserResponse
func (client *Client) CreateKillInstanceSessionTaskWithMaintainUser(request *CreateKillInstanceSessionTaskWithMaintainUserRequest) (_result *CreateKillInstanceSessionTaskWithMaintainUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateKillInstanceSessionTaskWithMaintainUserResponse{}
	_body, _err := client.CreateKillInstanceSessionTaskWithMaintainUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建最近死锁分析任务
//
// @param request - CreateLatestDeadLockAnalysisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLatestDeadLockAnalysisResponse
func (client *Client) CreateLatestDeadLockAnalysisWithOptions(request *CreateLatestDeadLockAnalysisRequest, runtime *util.RuntimeOptions) (_result *CreateLatestDeadLockAnalysisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLatestDeadLockAnalysis"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateLatestDeadLockAnalysisResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateLatestDeadLockAnalysisResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 创建最近死锁分析任务
//
// @param request - CreateLatestDeadLockAnalysisRequest
//
// @return CreateLatestDeadLockAnalysisResponse
func (client *Client) CreateLatestDeadLockAnalysis(request *CreateLatestDeadLockAnalysisRequest) (_result *CreateLatestDeadLockAnalysisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLatestDeadLockAnalysisResponse{}
	_body, _err := client.CreateLatestDeadLockAnalysisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a tag to a SQL template.
//
// Description:
//
//   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - CreateQueryOptimizeTagRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateQueryOptimizeTagResponse
func (client *Client) CreateQueryOptimizeTagWithOptions(request *CreateQueryOptimizeTagRequest, runtime *util.RuntimeOptions) (_result *CreateQueryOptimizeTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comments)) {
		query["Comments"] = request.Comments
	}

	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlIds)) {
		query["SqlIds"] = request.SqlIds
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQueryOptimizeTag"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateQueryOptimizeTagResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateQueryOptimizeTagResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds a tag to a SQL template.
//
// Description:
//
//   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - CreateQueryOptimizeTagRequest
//
// @return CreateQueryOptimizeTagResponse
func (client *Client) CreateQueryOptimizeTag(request *CreateQueryOptimizeTagRequest) (_result *CreateQueryOptimizeTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQueryOptimizeTagResponse{}
	_body, _err := client.CreateQueryOptimizeTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Initiates an SQL statement diagnostics request.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call Database Autonomy Service (DAS), you must set the region to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
//     	- ApsaraDB RDS for SQL Server
//
//     	- PolarDB for MySQL
//
//     	- PolarDB for PostgreSQL (compatible with Oracle)
//
//     	- ApsaraDB for MongoDB
//
// >  The minor engine version of ApsaraDB RDS for PostgreSQL instances must be 20221230 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
//
// @param request - CreateRequestDiagnosisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRequestDiagnosisResponse
func (client *Client) CreateRequestDiagnosisWithOptions(request *CreateRequestDiagnosisRequest, runtime *util.RuntimeOptions) (_result *CreateRequestDiagnosisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Sql)) {
		query["Sql"] = request.Sql
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRequestDiagnosis"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateRequestDiagnosisResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateRequestDiagnosisResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Initiates an SQL statement diagnostics request.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call Database Autonomy Service (DAS), you must set the region to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
//     	- ApsaraDB RDS for SQL Server
//
//     	- PolarDB for MySQL
//
//     	- PolarDB for PostgreSQL (compatible with Oracle)
//
//     	- ApsaraDB for MongoDB
//
// >  The minor engine version of ApsaraDB RDS for PostgreSQL instances must be 20221230 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
//
// @param request - CreateRequestDiagnosisRequest
//
// @return CreateRequestDiagnosisResponse
func (client *Client) CreateRequestDiagnosis(request *CreateRequestDiagnosisRequest) (_result *CreateRequestDiagnosisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRequestDiagnosisResponse{}
	_body, _err := client.CreateRequestDiagnosisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an offline task for Database Autonomy Service (DAS) Enterprise Edition.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- You can create an offline task only for database instances for which DAS Enterprise Edition V2 or V3 is enabled. For more information about the databases and regions that are supported by various versions of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
//
// @param request - CreateSqlLogTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSqlLogTaskResponse
func (client *Client) CreateSqlLogTaskWithOptions(request *CreateSqlLogTaskRequest, runtime *util.RuntimeOptions) (_result *CreateSqlLogTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Filters)) {
		query["Filters"] = request.Filters
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSqlLogTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateSqlLogTaskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateSqlLogTaskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an offline task for Database Autonomy Service (DAS) Enterprise Edition.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- You can create an offline task only for database instances for which DAS Enterprise Edition V2 or V3 is enabled. For more information about the databases and regions that are supported by various versions of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
//
// @param request - CreateSqlLogTaskRequest
//
// @return CreateSqlLogTaskResponse
func (client *Client) CreateSqlLogTask(request *CreateSqlLogTaskRequest) (_result *CreateSqlLogTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSqlLogTaskResponse{}
	_body, _err := client.CreateSqlLogTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a storage analysis task to query the usage details of one or more databases and tables.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and ApsaraDB for MongoDB instances.
//
// 	- For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this operation works the same as the storage analysis feature of the previous version. Tasks generated by this operation cannot be viewed on the Storage Analysis page of the new version in the Database Autonomy Service (DAS) console. If you want to view the tasks and results, call the related API operation to obtain data and save data to your computer.
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - CreateStorageAnalysisTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStorageAnalysisTaskResponse
func (client *Client) CreateStorageAnalysisTaskWithOptions(request *CreateStorageAnalysisTaskRequest, runtime *util.RuntimeOptions) (_result *CreateStorageAnalysisTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateStorageAnalysisTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateStorageAnalysisTaskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateStorageAnalysisTaskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a storage analysis task to query the usage details of one or more databases and tables.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and ApsaraDB for MongoDB instances.
//
// 	- For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this operation works the same as the storage analysis feature of the previous version. Tasks generated by this operation cannot be viewed on the Storage Analysis page of the new version in the Database Autonomy Service (DAS) console. If you want to view the tasks and results, call the related API operation to obtain data and save data to your computer.
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - CreateStorageAnalysisTaskRequest
//
// @return CreateStorageAnalysisTaskResponse
func (client *Client) CreateStorageAnalysisTask(request *CreateStorageAnalysisTaskRequest) (_result *CreateStorageAnalysisTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStorageAnalysisTaskResponse{}
	_body, _err := client.CreateStorageAnalysisTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a stress testing task.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to handle traffic spikes in an effective manner. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - DeleteCloudBenchTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCloudBenchTaskResponse
func (client *Client) DeleteCloudBenchTaskWithOptions(request *DeleteCloudBenchTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteCloudBenchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCloudBenchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteCloudBenchTaskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteCloudBenchTaskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a stress testing task.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to handle traffic spikes in an effective manner. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - DeleteCloudBenchTaskRequest
//
// @return DeleteCloudBenchTaskResponse
func (client *Client) DeleteCloudBenchTask(request *DeleteCloudBenchTaskRequest) (_result *DeleteCloudBenchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCloudBenchTaskResponse{}
	_body, _err := client.DeleteCloudBenchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the metadata of a stopped DBGateway.
//
// Description:
//
//   This operation is used to delete the metadata of a DBGateway that is released in a stress testing task created by calling the [CreateCloudBenchTasks](https://help.aliyun.com/document_detail/230665.html) operation.
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// >  If the heartbeat is lost between a DBGateway and the access point for more than 20 seconds, the DBGateway is considered stopped.
//
// @param request - DeleteStopGatewayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStopGatewayResponse
func (client *Client) DeleteStopGatewayWithOptions(request *DeleteStopGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteStopGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GatewayId)) {
		query["GatewayId"] = request.GatewayId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStopGateway"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteStopGatewayResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteStopGatewayResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes the metadata of a stopped DBGateway.
//
// Description:
//
//   This operation is used to delete the metadata of a DBGateway that is released in a stress testing task created by calling the [CreateCloudBenchTasks](https://help.aliyun.com/document_detail/230665.html) operation.
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// >  If the heartbeat is lost between a DBGateway and the access point for more than 20 seconds, the DBGateway is considered stopped.
//
// @param request - DeleteStopGatewayRequest
//
// @return DeleteStopGatewayResponse
func (client *Client) DeleteStopGateway(request *DeleteStopGatewayRequest) (_result *DeleteStopGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStopGatewayResponse{}
	_body, _err := client.DeleteStopGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of the auto scaling feature for an instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeAutoScalingConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAutoScalingConfigResponse
func (client *Client) DescribeAutoScalingConfigWithOptions(request *DescribeAutoScalingConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoScalingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAutoScalingConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeAutoScalingConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeAutoScalingConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configurations of the auto scaling feature for an instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeAutoScalingConfigRequest
//
// @return DescribeAutoScalingConfigResponse
func (client *Client) DescribeAutoScalingConfig(request *DescribeAutoScalingConfigRequest) (_result *DescribeAutoScalingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoScalingConfigResponse{}
	_body, _err := client.DescribeAutoScalingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the auto scaling history of an instance.
//
// Description:
//
//   You can call this operation to query the history information about the automatic performance scaling only of ApsaraDB RDS for MySQL High-availability Edition instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeAutoScalingHistoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAutoScalingHistoryResponse
func (client *Client) DescribeAutoScalingHistoryWithOptions(request *DescribeAutoScalingHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoScalingHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAutoScalingHistory"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeAutoScalingHistoryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeAutoScalingHistoryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the auto scaling history of an instance.
//
// Description:
//
//   You can call this operation to query the history information about the automatic performance scaling only of ApsaraDB RDS for MySQL High-availability Edition instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeAutoScalingHistoryRequest
//
// @return DescribeAutoScalingHistoryResponse
func (client *Client) DescribeAutoScalingHistory(request *DescribeAutoScalingHistoryRequest) (_result *DescribeAutoScalingHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoScalingHistoryResponse{}
	_body, _err := client.DescribeAutoScalingHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a cache analysis task.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to ApsaraDB for Redis.
//
// >  You can call this operation to query the top 500 keys in a cache analysis task.
//
// @param request - DescribeCacheAnalysisJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCacheAnalysisJobResponse
func (client *Client) DescribeCacheAnalysisJobWithOptions(request *DescribeCacheAnalysisJobRequest, runtime *util.RuntimeOptions) (_result *DescribeCacheAnalysisJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCacheAnalysisJob"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCacheAnalysisJobResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCacheAnalysisJobResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of a cache analysis task.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to ApsaraDB for Redis.
//
// >  You can call this operation to query the top 500 keys in a cache analysis task.
//
// @param request - DescribeCacheAnalysisJobRequest
//
// @return DescribeCacheAnalysisJobResponse
func (client *Client) DescribeCacheAnalysisJob(request *DescribeCacheAnalysisJobRequest) (_result *DescribeCacheAnalysisJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCacheAnalysisJobResponse{}
	_body, _err := client.DescribeCacheAnalysisJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of cache analysis tasks.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to ApsaraDB for Redis.
//
// @param request - DescribeCacheAnalysisJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCacheAnalysisJobsResponse
func (client *Client) DescribeCacheAnalysisJobsWithOptions(request *DescribeCacheAnalysisJobsRequest, runtime *util.RuntimeOptions) (_result *DescribeCacheAnalysisJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCacheAnalysisJobs"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCacheAnalysisJobsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCacheAnalysisJobsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a list of cache analysis tasks.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to ApsaraDB for Redis.
//
// @param request - DescribeCacheAnalysisJobsRequest
//
// @return DescribeCacheAnalysisJobsResponse
func (client *Client) DescribeCacheAnalysisJobs(request *DescribeCacheAnalysisJobsRequest) (_result *DescribeCacheAnalysisJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCacheAnalysisJobsResponse{}
	_body, _err := client.DescribeCacheAnalysisJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries stress testing tasks.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - DescribeCloudBenchTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudBenchTasksResponse
func (client *Client) DescribeCloudBenchTasksWithOptions(request *DescribeCloudBenchTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudBenchTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudBenchTasks"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCloudBenchTasksResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCloudBenchTasksResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries stress testing tasks.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - DescribeCloudBenchTasksRequest
//
// @return DescribeCloudBenchTasksResponse
func (client *Client) DescribeCloudBenchTasks(request *DescribeCloudBenchTasksRequest) (_result *DescribeCloudBenchTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudBenchTasksResponse{}
	_body, _err := client.DescribeCloudBenchTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a stress testing task.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether you need to scale up your database instance to handle workloads during peak hours. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - DescribeCloudbenchTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudbenchTaskResponse
func (client *Client) DescribeCloudbenchTaskWithOptions(request *DescribeCloudbenchTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudbenchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudbenchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCloudbenchTaskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCloudbenchTaskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a stress testing task.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether you need to scale up your database instance to handle workloads during peak hours. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - DescribeCloudbenchTaskRequest
//
// @return DescribeCloudbenchTaskResponse
func (client *Client) DescribeCloudbenchTask(request *DescribeCloudbenchTaskRequest) (_result *DescribeCloudbenchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudbenchTaskResponse{}
	_body, _err := client.DescribeCloudbenchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of a stress testing task.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - DescribeCloudbenchTaskConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudbenchTaskConfigResponse
func (client *Client) DescribeCloudbenchTaskConfigWithOptions(request *DescribeCloudbenchTaskConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudbenchTaskConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudbenchTaskConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCloudbenchTaskConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCloudbenchTaskConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configurations of a stress testing task.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - DescribeCloudbenchTaskConfigRequest
//
// @return DescribeCloudbenchTaskConfigResponse
func (client *Client) DescribeCloudbenchTaskConfig(request *DescribeCloudbenchTaskConfigRequest) (_result *DescribeCloudbenchTaskConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudbenchTaskConfigResponse{}
	_body, _err := client.DescribeCloudbenchTaskConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries diagnostics reports.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable to the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB for Redis
//
// @param request - DescribeDiagnosticReportListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiagnosticReportListResponse
func (client *Client) DescribeDiagnosticReportListWithOptions(request *DescribeDiagnosticReportListRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosticReportListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnosticReportList"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDiagnosticReportListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDiagnosticReportListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries diagnostics reports.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable to the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB for Redis
//
// @param request - DescribeDiagnosticReportListRequest
//
// @return DescribeDiagnosticReportListResponse
func (client *Client) DescribeDiagnosticReportList(request *DescribeDiagnosticReportListRequest) (_result *DescribeDiagnosticReportListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosticReportListResponse{}
	_body, _err := client.DescribeDiagnosticReportListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the hot keys and the large keys in the memory in real time.
//
// Description:
//
// This operation sorts list, hash, set, and zset keys based on the number of elements contained in these keys. The top three keys that contain the most elements are considered large keys. If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
//
// 	- The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is available only for ApsaraDB for Redis instances that meet the following requirements:
//
//     	- The instance is a Community Edition instance that uses a major version of 5.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
//
//     	- The ApsaraDB for Redis instance is updated to the latest minor version.
//
// @param request - DescribeHotBigKeysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHotBigKeysResponse
func (client *Client) DescribeHotBigKeysWithOptions(request *DescribeHotBigKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeHotBigKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHotBigKeys"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeHotBigKeysResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeHotBigKeysResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the hot keys and the large keys in the memory in real time.
//
// Description:
//
// This operation sorts list, hash, set, and zset keys based on the number of elements contained in these keys. The top three keys that contain the most elements are considered large keys. If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
//
// 	- The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is available only for ApsaraDB for Redis instances that meet the following requirements:
//
//     	- The instance is a Community Edition instance that uses a major version of 5.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
//
//     	- The ApsaraDB for Redis instance is updated to the latest minor version.
//
// @param request - DescribeHotBigKeysRequest
//
// @return DescribeHotBigKeysResponse
func (client *Client) DescribeHotBigKeys(request *DescribeHotBigKeysRequest) (_result *DescribeHotBigKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHotBigKeysResponse{}
	_body, _err := client.DescribeHotBigKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the hot keys of an ApsaraDB for Redis instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to ApsaraDB for Redis instances that meet the following requirements:
//
//     	- The ApsaraDB for Redis instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
//
//     	- The ApsaraDB for Redis instance is updated to the latest minor version.
//
// @param request - DescribeHotKeysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHotKeysResponse
func (client *Client) DescribeHotKeysWithOptions(request *DescribeHotKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeHotKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHotKeys"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeHotKeysResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeHotKeysResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the hot keys of an ApsaraDB for Redis instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to ApsaraDB for Redis instances that meet the following requirements:
//
//     	- The ApsaraDB for Redis instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
//
//     	- The ApsaraDB for Redis instance is updated to the latest minor version.
//
// @param request - DescribeHotKeysRequest
//
// @return DescribeHotKeysResponse
func (client *Client) DescribeHotKeys(request *DescribeHotKeysRequest) (_result *DescribeHotKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHotKeysResponse{}
	_body, _err := client.DescribeHotKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether Database Autonomy Service (DAS) Enterprise Edition V1 or V2 is enabled for a database instance.
//
// Description:
//
//   For more information about the database instances that support DAS Enterprise Edition, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to DAS Enterprise Edition V1 and V2.
//
// >  We recommend that you call the [DescribeSqlLogConfig](https://help.aliyun.com/document_detail/2778837.html) operation to query the DAS Enterprise Edition configurations of a database instance.
//
// @param request - DescribeInstanceDasProRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceDasProResponse
func (client *Client) DescribeInstanceDasProWithOptions(request *DescribeInstanceDasProRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceDasProResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceDasPro"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceDasProResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceDasProResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries whether Database Autonomy Service (DAS) Enterprise Edition V1 or V2 is enabled for a database instance.
//
// Description:
//
//   For more information about the database instances that support DAS Enterprise Edition, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to DAS Enterprise Edition V1 and V2.
//
// >  We recommend that you call the [DescribeSqlLogConfig](https://help.aliyun.com/document_detail/2778837.html) operation to query the DAS Enterprise Edition configurations of a database instance.
//
// @param request - DescribeInstanceDasProRequest
//
// @return DescribeInstanceDasProResponse
func (client *Client) DescribeInstanceDasPro(request *DescribeInstanceDasProRequest) (_result *DescribeInstanceDasProResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceDasProResponse{}
	_body, _err := client.DescribeInstanceDasProWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// DescribeSlowLogHistogramAsync
//
// @param request - DescribeSlowLogHistogramAsyncRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSlowLogHistogramAsyncResponse
func (client *Client) DescribeSlowLogHistogramAsyncWithOptions(request *DescribeSlowLogHistogramAsyncRequest, runtime *util.RuntimeOptions) (_result *DescribeSlowLogHistogramAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Filters)) {
		body["Filters"] = request.Filters
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSlowLogHistogramAsync"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSlowLogHistogramAsyncResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSlowLogHistogramAsyncResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// DescribeSlowLogHistogramAsync
//
// @param request - DescribeSlowLogHistogramAsyncRequest
//
// @return DescribeSlowLogHistogramAsyncResponse
func (client *Client) DescribeSlowLogHistogramAsync(request *DescribeSlowLogHistogramAsyncRequest) (_result *DescribeSlowLogHistogramAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSlowLogHistogramAsyncResponse{}
	_body, _err := client.DescribeSlowLogHistogramAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 慢日志统计信息
//
// @param request - DescribeSlowLogStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSlowLogStatisticResponse
func (client *Client) DescribeSlowLogStatisticWithOptions(request *DescribeSlowLogStatisticRequest, runtime *util.RuntimeOptions) (_result *DescribeSlowLogStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Asc)) {
		body["Asc"] = request.Asc
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Filters)) {
		body["Filters"] = request.Filters
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		body["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSlowLogStatistic"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSlowLogStatisticResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSlowLogStatisticResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 慢日志统计信息
//
// @param request - DescribeSlowLogStatisticRequest
//
// @return DescribeSlowLogStatisticResponse
func (client *Client) DescribeSlowLogStatistic(request *DescribeSlowLogStatisticRequest) (_result *DescribeSlowLogStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSlowLogStatisticResponse{}
	_body, _err := client.DescribeSlowLogStatisticWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of Database Autonomy Service (DAS) Enterprise Edition that is enabled for a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSqlLogConfigResponse
func (client *Client) DescribeSqlLogConfigWithOptions(request *DescribeSqlLogConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeSqlLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSqlLogConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSqlLogConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSqlLogConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configurations of Database Autonomy Service (DAS) Enterprise Edition that is enabled for a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogConfigRequest
//
// @return DescribeSqlLogConfigResponse
func (client *Client) DescribeSqlLogConfig(request *DescribeSqlLogConfigRequest) (_result *DescribeSqlLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSqlLogConfigResponse{}
	_body, _err := client.DescribeSqlLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the log details of a database instance for which Database Autonomy Service (DAS) Enterprise Edition is enabled.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSqlLogRecordsResponse
func (client *Client) DescribeSqlLogRecordsWithOptions(request *DescribeSqlLogRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeSqlLogRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Filters)) {
		query["Filters"] = request.Filters
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		body["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSqlLogRecords"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSqlLogRecordsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSqlLogRecordsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the log details of a database instance for which Database Autonomy Service (DAS) Enterprise Edition is enabled.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogRecordsRequest
//
// @return DescribeSqlLogRecordsResponse
func (client *Client) DescribeSqlLogRecords(request *DescribeSqlLogRecordsRequest) (_result *DescribeSqlLogRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSqlLogRecordsResponse{}
	_body, _err := client.DescribeSqlLogRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the statistics of Database Autonomy Service (DAS) Enterprise Edition.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSqlLogStatisticResponse
func (client *Client) DescribeSqlLogStatisticWithOptions(request *DescribeSqlLogStatisticRequest, runtime *util.RuntimeOptions) (_result *DescribeSqlLogStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSqlLogStatistic"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSqlLogStatisticResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSqlLogStatisticResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the statistics of Database Autonomy Service (DAS) Enterprise Edition.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogStatisticRequest
//
// @return DescribeSqlLogStatisticResponse
func (client *Client) DescribeSqlLogStatistic(request *DescribeSqlLogStatisticRequest) (_result *DescribeSqlLogStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSqlLogStatisticResponse{}
	_body, _err := client.DescribeSqlLogStatisticWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of an offline task in Database Autonomy Service (DAS) Enterprise Edition.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSqlLogTaskResponse
func (client *Client) DescribeSqlLogTaskWithOptions(request *DescribeSqlLogTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeSqlLogTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		body["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSqlLogTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSqlLogTaskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSqlLogTaskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of an offline task in Database Autonomy Service (DAS) Enterprise Edition.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogTaskRequest
//
// @return DescribeSqlLogTaskResponse
func (client *Client) DescribeSqlLogTask(request *DescribeSqlLogTaskRequest) (_result *DescribeSqlLogTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSqlLogTaskResponse{}
	_body, _err := client.DescribeSqlLogTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the audit log tasks of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSqlLogTasksResponse
func (client *Client) DescribeSqlLogTasksWithOptions(request *DescribeSqlLogTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeSqlLogTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Filters)) {
		body["Filters"] = request.Filters
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		body["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSqlLogTasks"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSqlLogTasksResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSqlLogTasksResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the audit log tasks of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - DescribeSqlLogTasksRequest
//
// @return DescribeSqlLogTasksResponse
func (client *Client) DescribeSqlLogTasks(request *DescribeSqlLogTasksRequest) (_result *DescribeSqlLogTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSqlLogTasksResponse{}
	_body, _err := client.DescribeSqlLogTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the top 100 large keys over a period of time.
//
// Description:
//
// The list, hash, set, and zset keys are sorted based on the number of elements in these keys. The top three keys that have the most elements are considered large keys.
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
//
// 	- The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
//
//     	- The instance is ApsaraDB for Redis Community Edition instances that use a major version of 5.0 or later or a performance-enhanced instance of the ApsaraDB for Redis Enhanced Edition (Tair).
//
//     	- The ApsaraDB for Redis instance is updated to the latest minor version.
//
// @param request - DescribeTopBigKeysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTopBigKeysResponse
func (client *Client) DescribeTopBigKeysWithOptions(request *DescribeTopBigKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeTopBigKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTopBigKeys"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeTopBigKeysResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeTopBigKeysResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the top 100 large keys over a period of time.
//
// Description:
//
// The list, hash, set, and zset keys are sorted based on the number of elements in these keys. The top three keys that have the most elements are considered large keys.
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
//
// 	- The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
//
//     	- The instance is ApsaraDB for Redis Community Edition instances that use a major version of 5.0 or later or a performance-enhanced instance of the ApsaraDB for Redis Enhanced Edition (Tair).
//
//     	- The ApsaraDB for Redis instance is updated to the latest minor version.
//
// @param request - DescribeTopBigKeysRequest
//
// @return DescribeTopBigKeysResponse
func (client *Client) DescribeTopBigKeys(request *DescribeTopBigKeysRequest) (_result *DescribeTopBigKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTopBigKeysResponse{}
	_body, _err := client.DescribeTopBigKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the top 100 hotkeys over a period of time.
//
// Description:
//
// If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
//
// 	- The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
//
//     	- The instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
//
//     	- The ApsaraDB for Redis instance is updated to the latest minor version.
//
// @param request - DescribeTopHotKeysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTopHotKeysResponse
func (client *Client) DescribeTopHotKeysWithOptions(request *DescribeTopHotKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeTopHotKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTopHotKeys"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeTopHotKeysResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeTopHotKeysResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the top 100 hotkeys over a period of time.
//
// Description:
//
// If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
//
// 	- The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
//
//     	- The instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
//
//     	- The ApsaraDB for Redis instance is updated to the latest minor version.
//
// @param request - DescribeTopHotKeysRequest
//
// @return DescribeTopHotKeysResponse
func (client *Client) DescribeTopHotKeys(request *DescribeTopHotKeysRequest) (_result *DescribeTopHotKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTopHotKeysResponse{}
	_body, _err := client.DescribeTopHotKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables all throttling rules that are in effect.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - DisableAllSqlConcurrencyControlRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableAllSqlConcurrencyControlRulesResponse
func (client *Client) DisableAllSqlConcurrencyControlRulesWithOptions(request *DisableAllSqlConcurrencyControlRulesRequest, runtime *util.RuntimeOptions) (_result *DisableAllSqlConcurrencyControlRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableAllSqlConcurrencyControlRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DisableAllSqlConcurrencyControlRulesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DisableAllSqlConcurrencyControlRulesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables all throttling rules that are in effect.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - DisableAllSqlConcurrencyControlRulesRequest
//
// @return DisableAllSqlConcurrencyControlRulesResponse
func (client *Client) DisableAllSqlConcurrencyControlRules(request *DisableAllSqlConcurrencyControlRulesRequest) (_result *DisableAllSqlConcurrencyControlRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableAllSqlConcurrencyControlRulesResponse{}
	_body, _err := client.DisableAllSqlConcurrencyControlRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables the automatic tablespace fragment recycling feature for database instances at a time.
//
// Description:
//
// If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// @param request - DisableAutoResourceOptimizeRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableAutoResourceOptimizeRulesResponse
func (client *Client) DisableAutoResourceOptimizeRulesWithOptions(request *DisableAutoResourceOptimizeRulesRequest, runtime *util.RuntimeOptions) (_result *DisableAutoResourceOptimizeRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableAutoResourceOptimizeRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DisableAutoResourceOptimizeRulesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DisableAutoResourceOptimizeRulesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables the automatic tablespace fragment recycling feature for database instances at a time.
//
// Description:
//
// If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// @param request - DisableAutoResourceOptimizeRulesRequest
//
// @return DisableAutoResourceOptimizeRulesResponse
func (client *Client) DisableAutoResourceOptimizeRules(request *DisableAutoResourceOptimizeRulesRequest) (_result *DisableAutoResourceOptimizeRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableAutoResourceOptimizeRulesResponse{}
	_body, _err := client.DisableAutoResourceOptimizeRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables the automatic SQL throttling feature for multiple database instances at a time.
//
// Description:
//
// If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// @param request - DisableAutoThrottleRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableAutoThrottleRulesResponse
func (client *Client) DisableAutoThrottleRulesWithOptions(request *DisableAutoThrottleRulesRequest, runtime *util.RuntimeOptions) (_result *DisableAutoThrottleRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableAutoThrottleRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DisableAutoThrottleRulesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DisableAutoThrottleRulesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables the automatic SQL throttling feature for multiple database instances at a time.
//
// Description:
//
// If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// @param request - DisableAutoThrottleRulesRequest
//
// @return DisableAutoThrottleRulesResponse
func (client *Client) DisableAutoThrottleRules(request *DisableAutoThrottleRulesRequest) (_result *DisableAutoThrottleRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableAutoThrottleRulesResponse{}
	_body, _err := client.DisableAutoThrottleRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deactivates Database Autonomy Service (DAS) Professional Edition.
//
// Description:
//
//   For more information about the database instances that support DAS Enterprise Edition, see [Overview](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to DAS Enterprise Edition V1.
//
// >  We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation to enable or disable DAS Enterprise Edition for a database instance. For more information about the databases and regions supported by each version of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
//
// @param request - DisableDasProRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableDasProResponse
func (client *Client) DisableDasProWithOptions(request *DisableDasProRequest, runtime *util.RuntimeOptions) (_result *DisableDasProResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableDasPro"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DisableDasProResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DisableDasProResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deactivates Database Autonomy Service (DAS) Professional Edition.
//
// Description:
//
//   For more information about the database instances that support DAS Enterprise Edition, see [Overview](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to DAS Enterprise Edition V1.
//
// >  We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation to enable or disable DAS Enterprise Edition for a database instance. For more information about the databases and regions supported by each version of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
//
// @param request - DisableDasProRequest
//
// @return DisableDasProResponse
func (client *Client) DisableDasPro(request *DisableDasProRequest) (_result *DisableDasProResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableDasProResponse{}
	_body, _err := client.DisableDasProWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables the auto scaling feature for a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to ApsaraDB for Redis instances.
//
// @param request - DisableInstanceDasConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableInstanceDasConfigResponse
func (client *Client) DisableInstanceDasConfigWithOptions(request *DisableInstanceDasConfigRequest, runtime *util.RuntimeOptions) (_result *DisableInstanceDasConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScaleType)) {
		query["ScaleType"] = request.ScaleType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableInstanceDasConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DisableInstanceDasConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DisableInstanceDasConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables the auto scaling feature for a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to ApsaraDB for Redis instances.
//
// @param request - DisableInstanceDasConfigRequest
//
// @return DisableInstanceDasConfigResponse
func (client *Client) DisableInstanceDasConfig(request *DisableInstanceDasConfigRequest) (_result *DisableInstanceDasConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableInstanceDasConfigResponse{}
	_body, _err := client.DisableInstanceDasConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables a throttling rule.
//
// Description:
//
// This operation is applicable to the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - DisableSqlConcurrencyControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableSqlConcurrencyControlResponse
func (client *Client) DisableSqlConcurrencyControlWithOptions(request *DisableSqlConcurrencyControlRequest, runtime *util.RuntimeOptions) (_result *DisableSqlConcurrencyControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ItemId)) {
		query["ItemId"] = request.ItemId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableSqlConcurrencyControl"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DisableSqlConcurrencyControlResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DisableSqlConcurrencyControlResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables a throttling rule.
//
// Description:
//
// This operation is applicable to the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - DisableSqlConcurrencyControlRequest
//
// @return DisableSqlConcurrencyControlResponse
func (client *Client) DisableSqlConcurrencyControl(request *DisableSqlConcurrencyControlRequest) (_result *DisableSqlConcurrencyControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableSqlConcurrencyControlResponse{}
	_body, _err := client.DisableSqlConcurrencyControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Activates Database Autonomy Service (DAS) Professional Edition.
//
// Description:
//
//   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to DAS Enterprise Edition V1.
//
// >  We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation to activate or deactivate DAS Enterprise Edition for a database instance. For more information about the databases and regions supported by each version of DAS Enterprise Edition, see [DAS editions and supported features](https://help.aliyun.com/document_detail/156204.html).
//
// @param request - EnableDasProRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableDasProResponse
func (client *Client) EnableDasProWithOptions(request *EnableDasProRequest, runtime *util.RuntimeOptions) (_result *EnableDasProResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlRetention)) {
		query["SqlRetention"] = request.SqlRetention
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableDasPro"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &EnableDasProResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &EnableDasProResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Activates Database Autonomy Service (DAS) Professional Edition.
//
// Description:
//
//   If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to DAS Enterprise Edition V1.
//
// >  We recommend that you call the [ModifySqlLogConfig](https://help.aliyun.com/document_detail/2778835.html) operation to activate or deactivate DAS Enterprise Edition for a database instance. For more information about the databases and regions supported by each version of DAS Enterprise Edition, see [DAS editions and supported features](https://help.aliyun.com/document_detail/156204.html).
//
// @param request - EnableDasProRequest
//
// @return EnableDasProResponse
func (client *Client) EnableDasPro(request *EnableDasProRequest) (_result *EnableDasProResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableDasProResponse{}
	_body, _err := client.EnableDasProWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables SQL throttling to control the numbers of database access requests and concurrent SQL statements.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - EnableSqlConcurrencyControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableSqlConcurrencyControlResponse
func (client *Client) EnableSqlConcurrencyControlWithOptions(request *EnableSqlConcurrencyControlRequest, runtime *util.RuntimeOptions) (_result *EnableSqlConcurrencyControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConcurrencyControlTime)) {
		query["ConcurrencyControlTime"] = request.ConcurrencyControlTime
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxConcurrency)) {
		query["MaxConcurrency"] = request.MaxConcurrency
	}

	if !tea.BoolValue(util.IsUnset(request.SqlKeywords)) {
		query["SqlKeywords"] = request.SqlKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.SqlType)) {
		query["SqlType"] = request.SqlType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableSqlConcurrencyControl"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &EnableSqlConcurrencyControlResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &EnableSqlConcurrencyControlResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables SQL throttling to control the numbers of database access requests and concurrent SQL statements.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - EnableSqlConcurrencyControlRequest
//
// @return EnableSqlConcurrencyControlResponse
func (client *Client) EnableSqlConcurrencyControl(request *EnableSqlConcurrencyControlRequest) (_result *EnableSqlConcurrencyControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableSqlConcurrencyControlResponse{}
	_body, _err := client.EnableSqlConcurrencyControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Asynchronously queries the IDs of SQL statements that generate a MySQL error code in the SQL Explorer results of a database instance.
//
// Description:
//
// >  GetAsyncErrorRequestListByCode is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of the **isFinish*	- parameter is **false*	- in the response, wait for 1 second and then send a request again. If the value of the **isFinish*	- parameter is **true**, the complete results are returned.
//
// 	- This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Enable and manage DAS Economy Edition and DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- When you call this operation, the value of the SqlId parameter changes due to the optimization of the SQL template algorithm starting from September 1, 2024. For more information, see [[Notice\\] Optimization of the SQL template algorithm](~~2845725~~).
//
// @param request - GetAsyncErrorRequestListByCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAsyncErrorRequestListByCodeResponse
func (client *Client) GetAsyncErrorRequestListByCodeWithOptions(request *GetAsyncErrorRequestListByCodeRequest, runtime *util.RuntimeOptions) (_result *GetAsyncErrorRequestListByCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCode)) {
		query["ErrorCode"] = request.ErrorCode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAsyncErrorRequestListByCode"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetAsyncErrorRequestListByCodeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetAsyncErrorRequestListByCodeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Asynchronously queries the IDs of SQL statements that generate a MySQL error code in the SQL Explorer results of a database instance.
//
// Description:
//
// >  GetAsyncErrorRequestListByCode is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of the **isFinish*	- parameter is **false*	- in the response, wait for 1 second and then send a request again. If the value of the **isFinish*	- parameter is **true**, the complete results are returned.
//
// 	- This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Enable and manage DAS Economy Edition and DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- When you call this operation, the value of the SqlId parameter changes due to the optimization of the SQL template algorithm starting from September 1, 2024. For more information, see [[Notice\\] Optimization of the SQL template algorithm](~~2845725~~).
//
// @param request - GetAsyncErrorRequestListByCodeRequest
//
// @return GetAsyncErrorRequestListByCodeResponse
func (client *Client) GetAsyncErrorRequestListByCode(request *GetAsyncErrorRequestListByCodeRequest) (_result *GetAsyncErrorRequestListByCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAsyncErrorRequestListByCodeResponse{}
	_body, _err := client.GetAsyncErrorRequestListByCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Asynchronously queries the MySQL error codes in SQL Explorer data and the number of SQL queries corresponding to each error code.
//
// Description:
//
// >  GetAsyncErrorRequestStatByCode is an asynchronous operation After a request is sent, the complete results are not returned immediately. If the value of **isFinish*	- is **false*	- in the response, wait for 1 second and then send a request again. If the value of **isFinish*	- is **true**, the complete results are returned.
//
// 	- This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetAsyncErrorRequestStatByCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAsyncErrorRequestStatByCodeResponse
func (client *Client) GetAsyncErrorRequestStatByCodeWithOptions(request *GetAsyncErrorRequestStatByCodeRequest, runtime *util.RuntimeOptions) (_result *GetAsyncErrorRequestStatByCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAsyncErrorRequestStatByCode"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetAsyncErrorRequestStatByCodeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetAsyncErrorRequestStatByCodeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Asynchronously queries the MySQL error codes in SQL Explorer data and the number of SQL queries corresponding to each error code.
//
// Description:
//
// >  GetAsyncErrorRequestStatByCode is an asynchronous operation After a request is sent, the complete results are not returned immediately. If the value of **isFinish*	- is **false*	- in the response, wait for 1 second and then send a request again. If the value of **isFinish*	- is **true**, the complete results are returned.
//
// 	- This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetAsyncErrorRequestStatByCodeRequest
//
// @return GetAsyncErrorRequestStatByCodeResponse
func (client *Client) GetAsyncErrorRequestStatByCode(request *GetAsyncErrorRequestStatByCodeRequest) (_result *GetAsyncErrorRequestStatByCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAsyncErrorRequestStatByCodeResponse{}
	_body, _err := client.GetAsyncErrorRequestStatByCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Asynchronously obtains the number of failed executions of SQL templates based on SQL Explorer data.
//
// Description:
//
// >  GetAsyncErrorRequestStatResult is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of **isFinish*	- is **false*	- in the response, wait for 1 second and then send a request again. If the value of **isFinish*	- is **true**, the complete results are returned.
//
// 	- This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetAsyncErrorRequestStatResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAsyncErrorRequestStatResultResponse
func (client *Client) GetAsyncErrorRequestStatResultWithOptions(request *GetAsyncErrorRequestStatResultRequest, runtime *util.RuntimeOptions) (_result *GetAsyncErrorRequestStatResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlIdList)) {
		query["SqlIdList"] = request.SqlIdList
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAsyncErrorRequestStatResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetAsyncErrorRequestStatResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetAsyncErrorRequestStatResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Asynchronously obtains the number of failed executions of SQL templates based on SQL Explorer data.
//
// Description:
//
// >  GetAsyncErrorRequestStatResult is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of **isFinish*	- is **false*	- in the response, wait for 1 second and then send a request again. If the value of **isFinish*	- is **true**, the complete results are returned.
//
// 	- This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetAsyncErrorRequestStatResultRequest
//
// @return GetAsyncErrorRequestStatResultResponse
func (client *Client) GetAsyncErrorRequestStatResult(request *GetAsyncErrorRequestStatResultRequest) (_result *GetAsyncErrorRequestStatResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAsyncErrorRequestStatResultResponse{}
	_body, _err := client.GetAsyncErrorRequestStatResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the usage of auto-increment table IDs.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call DAS, you must set the region to cn-shanghai.
//
// @param request - GetAutoIncrementUsageStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAutoIncrementUsageStatisticResponse
func (client *Client) GetAutoIncrementUsageStatisticWithOptions(request *GetAutoIncrementUsageStatisticRequest, runtime *util.RuntimeOptions) (_result *GetAutoIncrementUsageStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbNames)) {
		query["DbNames"] = request.DbNames
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RatioFilter)) {
		query["RatioFilter"] = request.RatioFilter
	}

	if !tea.BoolValue(util.IsUnset(request.RealTime)) {
		query["RealTime"] = request.RealTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAutoIncrementUsageStatistic"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetAutoIncrementUsageStatisticResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetAutoIncrementUsageStatisticResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the usage of auto-increment table IDs.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call DAS, you must set the region to cn-shanghai.
//
// @param request - GetAutoIncrementUsageStatisticRequest
//
// @return GetAutoIncrementUsageStatisticResponse
func (client *Client) GetAutoIncrementUsageStatistic(request *GetAutoIncrementUsageStatisticRequest) (_result *GetAutoIncrementUsageStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAutoIncrementUsageStatisticResponse{}
	_body, _err := client.GetAutoIncrementUsageStatisticWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the automatic fragment recycling rules of database instances.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- The database instance is an ApsaraDB RDS for MySQL instance of High-availability Edition.
//
// 	- The database instance has four or more cores, and **innodb_file_per_table*	- is set to **ON**.
//
// @param request - GetAutoResourceOptimizeRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAutoResourceOptimizeRulesResponse
func (client *Client) GetAutoResourceOptimizeRulesWithOptions(request *GetAutoResourceOptimizeRulesRequest, runtime *util.RuntimeOptions) (_result *GetAutoResourceOptimizeRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAutoResourceOptimizeRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetAutoResourceOptimizeRulesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetAutoResourceOptimizeRulesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the automatic fragment recycling rules of database instances.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- The database instance is an ApsaraDB RDS for MySQL instance of High-availability Edition.
//
// 	- The database instance has four or more cores, and **innodb_file_per_table*	- is set to **ON**.
//
// @param request - GetAutoResourceOptimizeRulesRequest
//
// @return GetAutoResourceOptimizeRulesResponse
func (client *Client) GetAutoResourceOptimizeRules(request *GetAutoResourceOptimizeRulesRequest) (_result *GetAutoResourceOptimizeRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAutoResourceOptimizeRulesResponse{}
	_body, _err := client.GetAutoResourceOptimizeRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the automatic SQL throttling rules of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- The database instance that you want to manage must be of one of the following types:
//
//     	- ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
//
//     	- PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
//
// @param request - GetAutoThrottleRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAutoThrottleRulesResponse
func (client *Client) GetAutoThrottleRulesWithOptions(request *GetAutoThrottleRulesRequest, runtime *util.RuntimeOptions) (_result *GetAutoThrottleRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAutoThrottleRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetAutoThrottleRulesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetAutoThrottleRulesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the automatic SQL throttling rules of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- The database instance that you want to manage must be of one of the following types:
//
//     	- ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
//
//     	- PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
//
// @param request - GetAutoThrottleRulesRequest
//
// @return GetAutoThrottleRulesResponse
func (client *Client) GetAutoThrottleRules(request *GetAutoThrottleRulesRequest) (_result *GetAutoThrottleRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAutoThrottleRulesResponse{}
	_body, _err := client.GetAutoThrottleRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of notification events of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
//
// >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
//
// @param request - GetAutonomousNotifyEventContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAutonomousNotifyEventContentResponse
func (client *Client) GetAutonomousNotifyEventContentWithOptions(request *GetAutonomousNotifyEventContentRequest, runtime *util.RuntimeOptions) (_result *GetAutonomousNotifyEventContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SpanId)) {
		query["SpanId"] = request.SpanId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAutonomousNotifyEventContent"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetAutonomousNotifyEventContentResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetAutonomousNotifyEventContentResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of notification events of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
//
// >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
//
// @param request - GetAutonomousNotifyEventContentRequest
//
// @return GetAutonomousNotifyEventContentResponse
func (client *Client) GetAutonomousNotifyEventContent(request *GetAutonomousNotifyEventContentRequest) (_result *GetAutonomousNotifyEventContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAutonomousNotifyEventContentResponse{}
	_body, _err := client.GetAutonomousNotifyEventContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the notification events of one or more urgency levels within a period.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
//
// >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
//
// @param request - GetAutonomousNotifyEventsInRangeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAutonomousNotifyEventsInRangeResponse
func (client *Client) GetAutonomousNotifyEventsInRangeWithOptions(request *GetAutonomousNotifyEventsInRangeRequest, runtime *util.RuntimeOptions) (_result *GetAutonomousNotifyEventsInRangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventContext)) {
		query["EventContext"] = request.EventContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MinLevel)) {
		query["MinLevel"] = request.MinLevel
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.PageOffset)) {
		query["PageOffset"] = request.PageOffset
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAutonomousNotifyEventsInRange"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetAutonomousNotifyEventsInRangeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetAutonomousNotifyEventsInRangeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the notification events of one or more urgency levels within a period.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
//
// >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
//
// @param request - GetAutonomousNotifyEventsInRangeRequest
//
// @return GetAutonomousNotifyEventsInRangeResponse
func (client *Client) GetAutonomousNotifyEventsInRange(request *GetAutonomousNotifyEventsInRangeRequest) (_result *GetAutonomousNotifyEventsInRangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAutonomousNotifyEventsInRangeResponse{}
	_body, _err := client.GetAutonomousNotifyEventsInRangeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the blocking data of an ApsaraDB RDS for SQL Server instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetBlockingDetailListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBlockingDetailListResponse
func (client *Client) GetBlockingDetailListWithOptions(request *GetBlockingDetailListRequest, runtime *util.RuntimeOptions) (_result *GetBlockingDetailListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbNameList)) {
		query["DbNameList"] = request.DbNameList
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryHash)) {
		query["QueryHash"] = request.QueryHash
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBlockingDetailList"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetBlockingDetailListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetBlockingDetailListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the blocking data of an ApsaraDB RDS for SQL Server instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetBlockingDetailListRequest
//
// @return GetBlockingDetailListResponse
func (client *Client) GetBlockingDetailList(request *GetBlockingDetailListRequest) (_result *GetBlockingDetailListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBlockingDetailListResponse{}
	_body, _err := client.GetBlockingDetailListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the diagnosis of network connectivity when a user accesses a specific database instance by specifying an IP address.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- The database instance that you want to manage is connected to DAS.
//
// @param request - GetDBInstanceConnectivityDiagnosisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDBInstanceConnectivityDiagnosisResponse
func (client *Client) GetDBInstanceConnectivityDiagnosisWithOptions(request *GetDBInstanceConnectivityDiagnosisRequest, runtime *util.RuntimeOptions) (_result *GetDBInstanceConnectivityDiagnosisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcIp)) {
		query["SrcIp"] = request.SrcIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDBInstanceConnectivityDiagnosis"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetDBInstanceConnectivityDiagnosisResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetDBInstanceConnectivityDiagnosisResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the diagnosis of network connectivity when a user accesses a specific database instance by specifying an IP address.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- The database instance that you want to manage is connected to DAS.
//
// @param request - GetDBInstanceConnectivityDiagnosisRequest
//
// @return GetDBInstanceConnectivityDiagnosisResponse
func (client *Client) GetDBInstanceConnectivityDiagnosis(request *GetDBInstanceConnectivityDiagnosisRequest) (_result *GetDBInstanceConnectivityDiagnosisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDBInstanceConnectivityDiagnosisResponse{}
	_body, _err := client.GetDBInstanceConnectivityDiagnosisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the storage usage of a database instance for which Database Autonomy Service (DAS) Enterprise Edition V1 or V2 is enabled.
//
// Description:
//
//   For information about the database instances that support this operation, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to DAS Enterprise Edition V1 and V2.
//
// >  We recommend that you call the [DescribeSqlLogStatistic](https://help.aliyun.com/document_detail/2778836.html) operation to query the data statistics of a database instance for which DAS Enterprise Edition is enabled.
//
// @param request - GetDasProServiceUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDasProServiceUsageResponse
func (client *Client) GetDasProServiceUsageWithOptions(request *GetDasProServiceUsageRequest, runtime *util.RuntimeOptions) (_result *GetDasProServiceUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDasProServiceUsage"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetDasProServiceUsageResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetDasProServiceUsageResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the storage usage of a database instance for which Database Autonomy Service (DAS) Enterprise Edition V1 or V2 is enabled.
//
// Description:
//
//   For information about the database instances that support this operation, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable only to DAS Enterprise Edition V1 and V2.
//
// >  We recommend that you call the [DescribeSqlLogStatistic](https://help.aliyun.com/document_detail/2778836.html) operation to query the data statistics of a database instance for which DAS Enterprise Edition is enabled.
//
// @param request - GetDasProServiceUsageRequest
//
// @return GetDasProServiceUsageResponse
func (client *Client) GetDasProServiceUsage(request *GetDasProServiceUsageRequest) (_result *GetDasProServiceUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDasProServiceUsageResponse{}
	_body, _err := client.GetDasProServiceUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the hot data of audit logs.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable to PolarDB for MySQL, ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and ApsaraDB RDS for SQL Server.
//
// >  The beginning of the time range to query can be up to seven days earlier than the current time. The interval between the start time and the end time cannot exceed one day. This operation can return a maximum of 10,000 entries.
//
// @param request - GetDasSQLLogHotDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDasSQLLogHotDataResponse
func (client *Client) GetDasSQLLogHotDataWithOptions(request *GetDasSQLLogHotDataRequest, runtime *util.RuntimeOptions) (_result *GetDasSQLLogHotDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		body["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.ChildDBInstanceIDs)) {
		body["ChildDBInstanceIDs"] = request.ChildDBInstanceIDs
	}

	if !tea.BoolValue(util.IsUnset(request.DBName)) {
		body["DBName"] = request.DBName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		body["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.Fail)) {
		body["Fail"] = request.Fail
	}

	if !tea.BoolValue(util.IsUnset(request.HostAddress)) {
		body["HostAddress"] = request.HostAddress
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalOperator)) {
		body["LogicalOperator"] = request.LogicalOperator
	}

	if !tea.BoolValue(util.IsUnset(request.MaxLatancy)) {
		body["MaxLatancy"] = request.MaxLatancy
	}

	if !tea.BoolValue(util.IsUnset(request.MaxRecordsPerPage)) {
		body["MaxRecordsPerPage"] = request.MaxRecordsPerPage
	}

	if !tea.BoolValue(util.IsUnset(request.MaxRows)) {
		body["MaxRows"] = request.MaxRows
	}

	if !tea.BoolValue(util.IsUnset(request.MaxScanRows)) {
		body["MaxScanRows"] = request.MaxScanRows
	}

	if !tea.BoolValue(util.IsUnset(request.MaxSpillCnt)) {
		body["MaxSpillCnt"] = request.MaxSpillCnt
	}

	if !tea.BoolValue(util.IsUnset(request.MinLatancy)) {
		body["MinLatancy"] = request.MinLatancy
	}

	if !tea.BoolValue(util.IsUnset(request.MinRows)) {
		body["MinRows"] = request.MinRows
	}

	if !tea.BoolValue(util.IsUnset(request.MinScanRows)) {
		body["MinScanRows"] = request.MinScanRows
	}

	if !tea.BoolValue(util.IsUnset(request.MinSpillCnt)) {
		body["MinSpillCnt"] = request.MinSpillCnt
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumbers)) {
		body["PageNumbers"] = request.PageNumbers
	}

	if !tea.BoolValue(util.IsUnset(request.QueryKeyword)) {
		body["QueryKeyword"] = request.QueryKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		body["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.SortKey)) {
		body["SortKey"] = request.SortKey
	}

	if !tea.BoolValue(util.IsUnset(request.SortMethod)) {
		body["SortMethod"] = request.SortMethod
	}

	if !tea.BoolValue(util.IsUnset(request.SqlType)) {
		body["SqlType"] = request.SqlType
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		body["Start"] = request.Start
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		body["State"] = request.State
	}

	if !tea.BoolValue(util.IsUnset(request.ThreadID)) {
		body["ThreadID"] = request.ThreadID
	}

	if !tea.BoolValue(util.IsUnset(request.TraceId)) {
		body["TraceId"] = request.TraceId
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionId)) {
		body["TransactionId"] = request.TransactionId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDasSQLLogHotData"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetDasSQLLogHotDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetDasSQLLogHotDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the hot data of audit logs.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation is applicable to PolarDB for MySQL, ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and ApsaraDB RDS for SQL Server.
//
// >  The beginning of the time range to query can be up to seven days earlier than the current time. The interval between the start time and the end time cannot exceed one day. This operation can return a maximum of 10,000 entries.
//
// @param request - GetDasSQLLogHotDataRequest
//
// @return GetDasSQLLogHotDataResponse
func (client *Client) GetDasSQLLogHotData(request *GetDasSQLLogHotDataRequest) (_result *GetDasSQLLogHotDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDasSQLLogHotDataResponse{}
	_body, _err := client.GetDasSQLLogHotDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询单个死锁详情
//
// @param request - GetDeadLockDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDeadLockDetailResponse
func (client *Client) GetDeadLockDetailWithOptions(request *GetDeadLockDetailRequest, runtime *util.RuntimeOptions) (_result *GetDeadLockDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TextId)) {
		query["TextId"] = request.TextId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeadLockDetail"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetDeadLockDetailResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetDeadLockDetailResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 查询单个死锁详情
//
// @param request - GetDeadLockDetailRequest
//
// @return GetDeadLockDetailResponse
func (client *Client) GetDeadLockDetail(request *GetDeadLockDetailRequest) (_result *GetDeadLockDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeadLockDetailResponse{}
	_body, _err := client.GetDeadLockDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the deadlock details of an ApsaraDB RDS for SQL Server instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetDeadLockDetailListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDeadLockDetailListResponse
func (client *Client) GetDeadLockDetailListWithOptions(request *GetDeadLockDetailListRequest, runtime *util.RuntimeOptions) (_result *GetDeadLockDetailListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbNameList)) {
		query["DbNameList"] = request.DbNameList
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeadLockDetailList"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetDeadLockDetailListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetDeadLockDetailListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the deadlock details of an ApsaraDB RDS for SQL Server instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetDeadLockDetailListRequest
//
// @return GetDeadLockDetailListResponse
func (client *Client) GetDeadLockDetailList(request *GetDeadLockDetailListRequest) (_result *GetDeadLockDetailListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeadLockDetailListResponse{}
	_body, _err := client.GetDeadLockDetailListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取历史死锁记录
//
// @param request - GetDeadLockHistoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDeadLockHistoryResponse
func (client *Client) GetDeadLockHistoryWithOptions(request *GetDeadLockHistoryRequest, runtime *util.RuntimeOptions) (_result *GetDeadLockHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeadLockHistory"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetDeadLockHistoryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetDeadLockHistoryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取历史死锁记录
//
// @param request - GetDeadLockHistoryRequest
//
// @return GetDeadLockHistoryResponse
func (client *Client) GetDeadLockHistory(request *GetDeadLockHistoryRequest) (_result *GetDeadLockHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeadLockHistoryResponse{}
	_body, _err := client.GetDeadLockHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询时间范围内基于错误日志分析的死锁数量
//
// @param request - GetDeadlockHistogramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDeadlockHistogramResponse
func (client *Client) GetDeadlockHistogramWithOptions(request *GetDeadlockHistogramRequest, runtime *util.RuntimeOptions) (_result *GetDeadlockHistogramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeadlockHistogram"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetDeadlockHistogramResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetDeadlockHistogramResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 查询时间范围内基于错误日志分析的死锁数量
//
// @param request - GetDeadlockHistogramRequest
//
// @return GetDeadlockHistogramResponse
func (client *Client) GetDeadlockHistogram(request *GetDeadlockHistogramRequest) (_result *GetDeadlockHistogramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeadlockHistogramResponse{}
	_body, _err := client.GetDeadlockHistogramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetEndpointSwitchTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEndpointSwitchTaskResponse
func (client *Client) GetEndpointSwitchTaskWithOptions(request *GetEndpointSwitchTaskRequest, runtime *util.RuntimeOptions) (_result *GetEndpointSwitchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.AccessKey)) {
		query["accessKey"] = request.AccessKey
	}

	if !tea.BoolValue(util.IsUnset(request.Signature)) {
		query["signature"] = request.Signature
	}

	if !tea.BoolValue(util.IsUnset(request.SkipAuth)) {
		query["skipAuth"] = request.SkipAuth
	}

	if !tea.BoolValue(util.IsUnset(request.Timestamp)) {
		query["timestamp"] = request.Timestamp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEndpointSwitchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetEndpointSwitchTaskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetEndpointSwitchTaskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// @param request - GetEndpointSwitchTaskRequest
//
// @return GetEndpointSwitchTaskResponse
func (client *Client) GetEndpointSwitchTask(request *GetEndpointSwitchTaskRequest) (_result *GetEndpointSwitchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEndpointSwitchTaskResponse{}
	_body, _err := client.GetEndpointSwitchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Asynchronously queries information about failed SQL queries in SQL Explorer data. You can query up to 20 failed SQL queries within the specific time range.
//
// Description:
//
// >  GetErrorRequestSample is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of **isFinish*	- is **false*	- in the response, wait for 1 second and then send a request again. If the value of **isFinish*	- is **true**, the complete results are returned.
//
// 	- This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetErrorRequestSampleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetErrorRequestSampleResponse
func (client *Client) GetErrorRequestSampleWithOptions(request *GetErrorRequestSampleRequest, runtime *util.RuntimeOptions) (_result *GetErrorRequestSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		query["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetErrorRequestSample"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetErrorRequestSampleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetErrorRequestSampleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Asynchronously queries information about failed SQL queries in SQL Explorer data. You can query up to 20 failed SQL queries within the specific time range.
//
// Description:
//
// >  GetErrorRequestSample is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of **isFinish*	- is **false*	- in the response, wait for 1 second and then send a request again. If the value of **isFinish*	- is **true**, the complete results are returned.
//
// 	- This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Enterprise Edition is enabled. For more information, see [Purchase DAS Enterprise Edition](https://help.aliyun.com/document_detail/163298.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetErrorRequestSampleRequest
//
// @return GetErrorRequestSampleResponse
func (client *Client) GetErrorRequestSample(request *GetErrorRequestSampleRequest) (_result *GetErrorRequestSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetErrorRequestSampleResponse{}
	_body, _err := client.GetErrorRequestSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the event subscription settings of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- The database instance that you want to manage is connected to DAS.
//
// @param request - GetEventSubscriptionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEventSubscriptionResponse
func (client *Client) GetEventSubscriptionWithOptions(request *GetEventSubscriptionRequest, runtime *util.RuntimeOptions) (_result *GetEventSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventSubscription"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetEventSubscriptionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetEventSubscriptionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the event subscription settings of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- The database instance that you want to manage is connected to DAS.
//
// @param request - GetEventSubscriptionRequest
//
// @return GetEventSubscriptionResponse
func (client *Client) GetEventSubscription(request *GetEventSubscriptionRequest) (_result *GetEventSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventSubscriptionResponse{}
	_body, _err := client.GetEventSubscriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Collects the full request statistics in the SQL Explorer results of a database instance by access source.
//
// Description:
//
// The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
//
// 	- For more information about database instances that support this feature, see [Overview](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// @param request - GetFullRequestOriginStatByInstanceIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFullRequestOriginStatByInstanceIdResponse
func (client *Client) GetFullRequestOriginStatByInstanceIdWithOptions(request *GetFullRequestOriginStatByInstanceIdRequest, runtime *util.RuntimeOptions) (_result *GetFullRequestOriginStatByInstanceIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Asc)) {
		query["Asc"] = request.Asc
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.SqlType)) {
		query["SqlType"] = request.SqlType
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFullRequestOriginStatByInstanceId"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetFullRequestOriginStatByInstanceIdResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetFullRequestOriginStatByInstanceIdResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Collects the full request statistics in the SQL Explorer results of a database instance by access source.
//
// Description:
//
// The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
//
// 	- For more information about database instances that support this feature, see [Overview](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// @param request - GetFullRequestOriginStatByInstanceIdRequest
//
// @return GetFullRequestOriginStatByInstanceIdResponse
func (client *Client) GetFullRequestOriginStatByInstanceId(request *GetFullRequestOriginStatByInstanceIdRequest) (_result *GetFullRequestOriginStatByInstanceIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFullRequestOriginStatByInstanceIdResponse{}
	_body, _err := client.GetFullRequestOriginStatByInstanceIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries sample SQL statements in the SQL Explorer data of a database instance by SQL ID. You can query up to 20 sample SQL statements.
//
// Description:
//
// The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
//
// 	- For more information about the database engines that support SQL Explorer, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetFullRequestSampleByInstanceIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFullRequestSampleByInstanceIdResponse
func (client *Client) GetFullRequestSampleByInstanceIdWithOptions(request *GetFullRequestSampleByInstanceIdRequest, runtime *util.RuntimeOptions) (_result *GetFullRequestSampleByInstanceIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.End)) {
		body["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		body["Start"] = request.Start
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFullRequestSampleByInstanceId"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetFullRequestSampleByInstanceIdResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetFullRequestSampleByInstanceIdResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries sample SQL statements in the SQL Explorer data of a database instance by SQL ID. You can query up to 20 sample SQL statements.
//
// Description:
//
// The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
//
// 	- For more information about the database engines that support SQL Explorer, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetFullRequestSampleByInstanceIdRequest
//
// @return GetFullRequestSampleByInstanceIdResponse
func (client *Client) GetFullRequestSampleByInstanceId(request *GetFullRequestSampleByInstanceIdRequest) (_result *GetFullRequestSampleByInstanceIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFullRequestSampleByInstanceIdResponse{}
	_body, _err := client.GetFullRequestSampleByInstanceIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Asynchronously collects the full request statistics in the SQL Explorer results of a database instance by SQL ID.
//
// Description:
//
// >  GetFullRequestStatResultByInstanceId is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of the isFinish parameter is **false*	- in the response, wait for 1 second and then send a request again. If the value of the isFinish parameter is **true**, the complete results are returned.
//
// The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
//
// 	- For more information about database instances that support this feature, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- When you call this operation, the value of the SqlId parameter changes due to the optimization of the SQL template algorithm starting from September 1, 2024. For more information, see [[Notice\\] Optimization of the SQL template algorithm](~~2845725~~).
//
// @param request - GetFullRequestStatResultByInstanceIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFullRequestStatResultByInstanceIdResponse
func (client *Client) GetFullRequestStatResultByInstanceIdWithOptions(request *GetFullRequestStatResultByInstanceIdRequest, runtime *util.RuntimeOptions) (_result *GetFullRequestStatResultByInstanceIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Asc)) {
		query["Asc"] = request.Asc
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OriginHost)) {
		query["OriginHost"] = request.OriginHost
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		query["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlType)) {
		query["SqlType"] = request.SqlType
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFullRequestStatResultByInstanceId"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetFullRequestStatResultByInstanceIdResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetFullRequestStatResultByInstanceIdResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Asynchronously collects the full request statistics in the SQL Explorer results of a database instance by SQL ID.
//
// Description:
//
// >  GetFullRequestStatResultByInstanceId is an asynchronous operation. After a request is sent, the complete results are not returned immediately. If the value of the isFinish parameter is **false*	- in the response, wait for 1 second and then send a request again. If the value of the isFinish parameter is **true**, the complete results are returned.
//
// The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](https://help.aliyun.com/document_detail/204096.html).
//
// 	- For more information about database instances that support this feature, see [Overview of DAS Enterprise Edition](https://help.aliyun.com/document_detail/190912.html).
//
// 	- If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- When you call this operation, the value of the SqlId parameter changes due to the optimization of the SQL template algorithm starting from September 1, 2024. For more information, see [[Notice\\] Optimization of the SQL template algorithm](~~2845725~~).
//
// @param request - GetFullRequestStatResultByInstanceIdRequest
//
// @return GetFullRequestStatResultByInstanceIdResponse
func (client *Client) GetFullRequestStatResultByInstanceId(request *GetFullRequestStatResultByInstanceIdRequest) (_result *GetFullRequestStatResultByInstanceIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFullRequestStatResultByInstanceIdResponse{}
	_body, _err := client.GetFullRequestStatResultByInstanceIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetHDMAliyunResourceSyncResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHDMAliyunResourceSyncResultResponse
func (client *Client) GetHDMAliyunResourceSyncResultWithOptions(request *GetHDMAliyunResourceSyncResultRequest, runtime *util.RuntimeOptions) (_result *GetHDMAliyunResourceSyncResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.AccessKey)) {
		query["accessKey"] = request.AccessKey
	}

	if !tea.BoolValue(util.IsUnset(request.Signature)) {
		query["signature"] = request.Signature
	}

	if !tea.BoolValue(util.IsUnset(request.SkipAuth)) {
		query["skipAuth"] = request.SkipAuth
	}

	if !tea.BoolValue(util.IsUnset(request.Timestamp)) {
		query["timestamp"] = request.Timestamp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHDMAliyunResourceSyncResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetHDMAliyunResourceSyncResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetHDMAliyunResourceSyncResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// @param request - GetHDMAliyunResourceSyncResultRequest
//
// @return GetHDMAliyunResourceSyncResultResponse
func (client *Client) GetHDMAliyunResourceSyncResult(request *GetHDMAliyunResourceSyncResultRequest) (_result *GetHDMAliyunResourceSyncResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHDMAliyunResourceSyncResultResponse{}
	_body, _err := client.GetHDMAliyunResourceSyncResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetHDMLastAliyunResourceSyncResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHDMLastAliyunResourceSyncResultResponse
func (client *Client) GetHDMLastAliyunResourceSyncResultWithOptions(request *GetHDMLastAliyunResourceSyncResultRequest, runtime *util.RuntimeOptions) (_result *GetHDMLastAliyunResourceSyncResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.AccessKey)) {
		query["accessKey"] = request.AccessKey
	}

	if !tea.BoolValue(util.IsUnset(request.Signature)) {
		query["signature"] = request.Signature
	}

	if !tea.BoolValue(util.IsUnset(request.SkipAuth)) {
		query["skipAuth"] = request.SkipAuth
	}

	if !tea.BoolValue(util.IsUnset(request.Timestamp)) {
		query["timestamp"] = request.Timestamp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHDMLastAliyunResourceSyncResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetHDMLastAliyunResourceSyncResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetHDMLastAliyunResourceSyncResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// @param request - GetHDMLastAliyunResourceSyncResultRequest
//
// @return GetHDMLastAliyunResourceSyncResultResponse
func (client *Client) GetHDMLastAliyunResourceSyncResult(request *GetHDMLastAliyunResourceSyncResultRequest) (_result *GetHDMLastAliyunResourceSyncResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHDMLastAliyunResourceSyncResultResponse{}
	_body, _err := client.GetHDMLastAliyunResourceSyncResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the result of an inspection that is performed on a database instance by using the inspection and scoring feature.
//
// Description:
//
// Database Autonomy Service (DAS) provides the inspection and scoring feature. This feature allows you to inspect and score the health status of your instance on a regular basis. This helps you obtain information about the status of your databases. For more information, see [Inspection and scoring](https://help.aliyun.com/document_detail/205659.html).
//
// Before you call this operation, take note of the following items:
//
// 	- This operation is applicable only to ApsaraDB RDS for MySQL databases, self-managed MySQL databases hosted on Elastic Compute Service (ECS) instances, self-managed MySQL databases in data centers, ApsaraDB for Redis databases, and PolarDB for MySQL databases.
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
//
// 	- The version of DAS SDK must be V1.0.3 or later.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetInstanceInspectionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceInspectionsResponse
func (client *Client) GetInstanceInspectionsWithOptions(request *GetInstanceInspectionsRequest, runtime *util.RuntimeOptions) (_result *GetInstanceInspectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceArea)) {
		query["InstanceArea"] = request.InstanceArea
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchMap)) {
		query["SearchMap"] = request.SearchMap
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceInspections"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetInstanceInspectionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetInstanceInspectionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the result of an inspection that is performed on a database instance by using the inspection and scoring feature.
//
// Description:
//
// Database Autonomy Service (DAS) provides the inspection and scoring feature. This feature allows you to inspect and score the health status of your instance on a regular basis. This helps you obtain information about the status of your databases. For more information, see [Inspection and scoring](https://help.aliyun.com/document_detail/205659.html).
//
// Before you call this operation, take note of the following items:
//
// 	- This operation is applicable only to ApsaraDB RDS for MySQL databases, self-managed MySQL databases hosted on Elastic Compute Service (ECS) instances, self-managed MySQL databases in data centers, ApsaraDB for Redis databases, and PolarDB for MySQL databases.
//
// 	- If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
//
// 	- The version of DAS SDK must be V1.0.3 or later.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetInstanceInspectionsRequest
//
// @return GetInstanceInspectionsResponse
func (client *Client) GetInstanceInspections(request *GetInstanceInspectionsRequest) (_result *GetInstanceInspectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceInspectionsResponse{}
	_body, _err := client.GetInstanceInspectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of all missing indexes of an instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetInstanceMissingIndexListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceMissingIndexListResponse
func (client *Client) GetInstanceMissingIndexListWithOptions(request *GetInstanceMissingIndexListRequest, runtime *util.RuntimeOptions) (_result *GetInstanceMissingIndexListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvgTotalUserCost)) {
		query["AvgTotalUserCost"] = request.AvgTotalUserCost
	}

	if !tea.BoolValue(util.IsUnset(request.AvgUserImpact)) {
		query["AvgUserImpact"] = request.AvgUserImpact
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IndexCount)) {
		query["IndexCount"] = request.IndexCount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectName)) {
		query["ObjectName"] = request.ObjectName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedPages)) {
		query["ReservedPages"] = request.ReservedPages
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedSize)) {
		query["ReservedSize"] = request.ReservedSize
	}

	if !tea.BoolValue(util.IsUnset(request.RowCount)) {
		query["RowCount"] = request.RowCount
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueCompiles)) {
		query["UniqueCompiles"] = request.UniqueCompiles
	}

	if !tea.BoolValue(util.IsUnset(request.UserScans)) {
		query["UserScans"] = request.UserScans
	}

	if !tea.BoolValue(util.IsUnset(request.UserSeeks)) {
		query["UserSeeks"] = request.UserSeeks
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceMissingIndexList"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetInstanceMissingIndexListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetInstanceMissingIndexListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of all missing indexes of an instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for SQL Server instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetInstanceMissingIndexListRequest
//
// @return GetInstanceMissingIndexListResponse
func (client *Client) GetInstanceMissingIndexList(request *GetInstanceMissingIndexListRequest) (_result *GetInstanceMissingIndexListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceMissingIndexListResponse{}
	_body, _err := client.GetInstanceMissingIndexListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries statistics on automatic SQL optimization events within a period of time, such as the total number of optimization events and the maximum improvement.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- The database engine is ApsaraDB RDS for MySQL or PolarDB for MySQL.
//
// @param request - GetInstanceSqlOptimizeStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceSqlOptimizeStatisticResponse
func (client *Client) GetInstanceSqlOptimizeStatisticWithOptions(request *GetInstanceSqlOptimizeStatisticRequest, runtime *util.RuntimeOptions) (_result *GetInstanceSqlOptimizeStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FilterEnable)) {
		query["FilterEnable"] = request.FilterEnable
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Threshold)) {
		query["Threshold"] = request.Threshold
	}

	if !tea.BoolValue(util.IsUnset(request.UseMerging)) {
		query["UseMerging"] = request.UseMerging
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceSqlOptimizeStatistic"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetInstanceSqlOptimizeStatisticResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetInstanceSqlOptimizeStatisticResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries statistics on automatic SQL optimization events within a period of time, such as the total number of optimization events and the maximum improvement.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- The database engine is ApsaraDB RDS for MySQL or PolarDB for MySQL.
//
// @param request - GetInstanceSqlOptimizeStatisticRequest
//
// @return GetInstanceSqlOptimizeStatisticResponse
func (client *Client) GetInstanceSqlOptimizeStatistic(request *GetInstanceSqlOptimizeStatisticRequest) (_result *GetInstanceSqlOptimizeStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceSqlOptimizeStatisticResponse{}
	_body, _err := client.GetInstanceSqlOptimizeStatisticWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the results of a task that terminates sessions.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetKillInstanceSessionTaskResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetKillInstanceSessionTaskResultResponse
func (client *Client) GetKillInstanceSessionTaskResultWithOptions(request *GetKillInstanceSessionTaskResultRequest, runtime *util.RuntimeOptions) (_result *GetKillInstanceSessionTaskResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetKillInstanceSessionTaskResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetKillInstanceSessionTaskResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetKillInstanceSessionTaskResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the results of a task that terminates sessions.
//
// Description:
//
//   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetKillInstanceSessionTaskResultRequest
//
// @return GetKillInstanceSessionTaskResultResponse
func (client *Client) GetKillInstanceSessionTaskResult(request *GetKillInstanceSessionTaskResultRequest) (_result *GetKillInstanceSessionTaskResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetKillInstanceSessionTaskResultResponse{}
	_body, _err := client.GetKillInstanceSessionTaskResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the current sessions of an ApsaraDB for MongoDB (MongoDB) instance.
//
// Description:
//
//   This operation is applicable only to MongoDB instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region to cn-shanghai.
//
// @param request - GetMongoDBCurrentOpRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMongoDBCurrentOpResponse
func (client *Client) GetMongoDBCurrentOpWithOptions(request *GetMongoDBCurrentOpRequest, runtime *util.RuntimeOptions) (_result *GetMongoDBCurrentOpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilterDoc)) {
		query["FilterDoc"] = request.FilterDoc
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMongoDBCurrentOp"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetMongoDBCurrentOpResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetMongoDBCurrentOpResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the current sessions of an ApsaraDB for MongoDB (MongoDB) instance.
//
// Description:
//
//   This operation is applicable only to MongoDB instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region to cn-shanghai.
//
// @param request - GetMongoDBCurrentOpRequest
//
// @return GetMongoDBCurrentOpResponse
func (client *Client) GetMongoDBCurrentOp(request *GetMongoDBCurrentOpRequest) (_result *GetMongoDBCurrentOpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMongoDBCurrentOpResponse{}
	_body, _err := client.GetMongoDBCurrentOpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Asynchronously queries the sessions of an instance and collects statistics on the sessions based on dimensions.
//
// Description:
//
// >  GetMySQLAllSessionAsync is an asynchronous operation. After a request is sent, the system does not return complete results but returns a request ID. You need to use the request ID to initiate requests until the value of the **isFinish*	- field in the returned results is **true**, the complete results are returned. This indicates that to obtain complete data, you must call this operation at least twice.
//
// 	- This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and PolarDB-X 2.0 instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetMySQLAllSessionAsyncRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMySQLAllSessionAsyncResponse
func (client *Client) GetMySQLAllSessionAsyncWithOptions(request *GetMySQLAllSessionAsyncRequest, runtime *util.RuntimeOptions) (_result *GetMySQLAllSessionAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ResultId)) {
		query["ResultId"] = request.ResultId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMySQLAllSessionAsync"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetMySQLAllSessionAsyncResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetMySQLAllSessionAsyncResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Asynchronously queries the sessions of an instance and collects statistics on the sessions based on dimensions.
//
// Description:
//
// >  GetMySQLAllSessionAsync is an asynchronous operation. After a request is sent, the system does not return complete results but returns a request ID. You need to use the request ID to initiate requests until the value of the **isFinish*	- field in the returned results is **true**, the complete results are returned. This indicates that to obtain complete data, you must call this operation at least twice.
//
// 	- This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and PolarDB-X 2.0 instances.
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetMySQLAllSessionAsyncRequest
//
// @return GetMySQLAllSessionAsyncResponse
func (client *Client) GetMySQLAllSessionAsync(request *GetMySQLAllSessionAsyncRequest) (_result *GetMySQLAllSessionAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMySQLAllSessionAsyncResponse{}
	_body, _err := client.GetMySQLAllSessionAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries access frequency statistics and hot data on partitions of a PolarDB-X 2.0 instance.
//
// Description:
//
// We recommend that you do not call this operation. The data is returned in a special format and is complex to parse. You can use the [heatmap](https://help.aliyun.com/document_detail/470302.html) feature of Database Autonomy Service (DAS) to query the data.
//
// @param request - GetPartitionsHeatmapRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPartitionsHeatmapResponse
func (client *Client) GetPartitionsHeatmapWithOptions(request *GetPartitionsHeatmapRequest, runtime *util.RuntimeOptions) (_result *GetPartitionsHeatmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeRange)) {
		query["TimeRange"] = request.TimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPartitionsHeatmap"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetPartitionsHeatmapResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetPartitionsHeatmapResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries access frequency statistics and hot data on partitions of a PolarDB-X 2.0 instance.
//
// Description:
//
// We recommend that you do not call this operation. The data is returned in a special format and is complex to parse. You can use the [heatmap](https://help.aliyun.com/document_detail/470302.html) feature of Database Autonomy Service (DAS) to query the data.
//
// @param request - GetPartitionsHeatmapRequest
//
// @return GetPartitionsHeatmapResponse
func (client *Client) GetPartitionsHeatmap(request *GetPartitionsHeatmapRequest) (_result *GetPartitionsHeatmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPartitionsHeatmapResponse{}
	_body, _err := client.GetPartitionsHeatmapWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the trend of a metric for the new version of the performance insight feature of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
//
// 	- The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
//
// @param request - GetPfsMetricTrendsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPfsMetricTrendsResponse
func (client *Client) GetPfsMetricTrendsWithOptions(request *GetPfsMetricTrendsRequest, runtime *util.RuntimeOptions) (_result *GetPfsMetricTrendsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Metric)) {
		body["Metric"] = request.Metric
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPfsMetricTrends"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetPfsMetricTrendsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetPfsMetricTrendsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the trend of a metric for the new version of the performance insight feature of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
//
// 	- The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
//
// @param request - GetPfsMetricTrendsRequest
//
// @return GetPfsMetricTrendsResponse
func (client *Client) GetPfsMetricTrends(request *GetPfsMetricTrendsRequest) (_result *GetPfsMetricTrendsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPfsMetricTrendsResponse{}
	_body, _err := client.GetPfsMetricTrendsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the SQL sample data for the new version of the performance insight feature of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
//
// 	- The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
//
// @param request - GetPfsSqlSampleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPfsSqlSampleResponse
func (client *Client) GetPfsSqlSampleWithOptions(request *GetPfsSqlSampleRequest, runtime *util.RuntimeOptions) (_result *GetPfsSqlSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPfsSqlSample"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetPfsSqlSampleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetPfsSqlSampleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the SQL sample data for the new version of the performance insight feature of a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
//
// 	- The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
//
// @param request - GetPfsSqlSampleRequest
//
// @return GetPfsSqlSampleResponse
func (client *Client) GetPfsSqlSample(request *GetPfsSqlSampleRequest) (_result *GetPfsSqlSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPfsSqlSampleResponse{}
	_body, _err := client.GetPfsSqlSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the full request data generated by the new version of the performance insight feature of a database instance based on the SQL ID.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
//
// 	- The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
//
// @param request - GetPfsSqlSummariesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPfsSqlSummariesResponse
func (client *Client) GetPfsSqlSummariesWithOptions(request *GetPfsSqlSummariesRequest, runtime *util.RuntimeOptions) (_result *GetPfsSqlSummariesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Asc)) {
		body["Asc"] = request.Asc
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Keywords)) {
		body["Keywords"] = request.Keywords
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		body["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		body["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPfsSqlSummaries"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetPfsSqlSummariesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetPfsSqlSummariesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the full request data generated by the new version of the performance insight feature of a database instance based on the SQL ID.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
//
// 	- The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](https://help.aliyun.com/document_detail/469117.html).
//
// @param request - GetPfsSqlSummariesRequest
//
// @return GetPfsSqlSummariesResponse
func (client *Client) GetPfsSqlSummaries(request *GetPfsSqlSummariesRequest) (_result *GetPfsSqlSummariesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPfsSqlSummariesResponse{}
	_body, _err := client.GetPfsSqlSummariesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about SQL templates based on query governance data.
//
// Description:
//
//   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeDataStatsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetQueryOptimizeDataStatsResponse
func (client *Client) GetQueryOptimizeDataStatsWithOptions(request *GetQueryOptimizeDataStatsRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeDataStatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeDataStats"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetQueryOptimizeDataStatsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetQueryOptimizeDataStatsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about SQL templates based on query governance data.
//
// Description:
//
//   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeDataStatsRequest
//
// @return GetQueryOptimizeDataStatsResponse
func (client *Client) GetQueryOptimizeDataStats(request *GetQueryOptimizeDataStatsRequest) (_result *GetQueryOptimizeDataStatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeDataStatsResponse{}
	_body, _err := client.GetQueryOptimizeDataStatsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about the best-performing and worst-performing instances based on query governance data.
//
// Description:
//
//   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeDataTopRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetQueryOptimizeDataTopResponse
func (client *Client) GetQueryOptimizeDataTopWithOptions(request *GetQueryOptimizeDataTopRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeDataTopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeDataTop"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetQueryOptimizeDataTopResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetQueryOptimizeDataTopResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about the best-performing and worst-performing instances based on query governance data.
//
// Description:
//
//   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeDataTopRequest
//
// @return GetQueryOptimizeDataTopResponse
func (client *Client) GetQueryOptimizeDataTop(request *GetQueryOptimizeDataTopRequest) (_result *GetQueryOptimizeDataTopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeDataTopResponse{}
	_body, _err := client.GetQueryOptimizeDataTopWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries query governance trend data.
//
// Description:
//
//   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeDataTrendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetQueryOptimizeDataTrendResponse
func (client *Client) GetQueryOptimizeDataTrendWithOptions(request *GetQueryOptimizeDataTrendRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeDataTrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeDataTrend"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetQueryOptimizeDataTrendResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetQueryOptimizeDataTrendResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries query governance trend data.
//
// Description:
//
//   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeDataTrendRequest
//
// @return GetQueryOptimizeDataTrendResponse
func (client *Client) GetQueryOptimizeDataTrend(request *GetQueryOptimizeDataTrendRequest) (_result *GetQueryOptimizeDataTrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeDataTrendResponse{}
	_body, _err := client.GetQueryOptimizeDataTrendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the failed SQL statements under a SQL template.
//
// Description:
//
//   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeExecErrorSampleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetQueryOptimizeExecErrorSampleResponse
func (client *Client) GetQueryOptimizeExecErrorSampleWithOptions(request *GetQueryOptimizeExecErrorSampleRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeExecErrorSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeExecErrorSample"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetQueryOptimizeExecErrorSampleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetQueryOptimizeExecErrorSampleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the failed SQL statements under a SQL template.
//
// Description:
//
//   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeExecErrorSampleRequest
//
// @return GetQueryOptimizeExecErrorSampleResponse
func (client *Client) GetQueryOptimizeExecErrorSample(request *GetQueryOptimizeExecErrorSampleRequest) (_result *GetQueryOptimizeExecErrorSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeExecErrorSampleResponse{}
	_body, _err := client.GetQueryOptimizeExecErrorSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries SQL templates that failed to be executed.
//
// Description:
//
//   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeExecErrorStatsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetQueryOptimizeExecErrorStatsResponse
func (client *Client) GetQueryOptimizeExecErrorStatsWithOptions(request *GetQueryOptimizeExecErrorStatsRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeExecErrorStatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeExecErrorStats"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetQueryOptimizeExecErrorStatsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetQueryOptimizeExecErrorStatsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries SQL templates that failed to be executed.
//
// Description:
//
//   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeExecErrorStatsRequest
//
// @return GetQueryOptimizeExecErrorStatsResponse
func (client *Client) GetQueryOptimizeExecErrorStats(request *GetQueryOptimizeExecErrorStatsRequest) (_result *GetQueryOptimizeExecErrorStatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeExecErrorStatsResponse{}
	_body, _err := client.GetQueryOptimizeExecErrorStatsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the tags added by the query governance feature to specified database instances.
//
// Description:
//
//   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeRuleListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetQueryOptimizeRuleListResponse
func (client *Client) GetQueryOptimizeRuleListWithOptions(request *GetQueryOptimizeRuleListRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeRuleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeRuleList"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetQueryOptimizeRuleListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetQueryOptimizeRuleListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the tags added by the query governance feature to specified database instances.
//
// Description:
//
//   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeRuleListRequest
//
// @return GetQueryOptimizeRuleListResponse
func (client *Client) GetQueryOptimizeRuleList(request *GetQueryOptimizeRuleListRequest) (_result *GetQueryOptimizeRuleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeRuleListResponse{}
	_body, _err := client.GetQueryOptimizeRuleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a share URL provided by the query governance feature.
//
// Description:
//
//   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeShareUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetQueryOptimizeShareUrlResponse
func (client *Client) GetQueryOptimizeShareUrlWithOptions(request *GetQueryOptimizeShareUrlRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeShareUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeShareUrl"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetQueryOptimizeShareUrlResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetQueryOptimizeShareUrlResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries a share URL provided by the query governance feature.
//
// Description:
//
//   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeShareUrlRequest
//
// @return GetQueryOptimizeShareUrlResponse
func (client *Client) GetQueryOptimizeShareUrl(request *GetQueryOptimizeShareUrlRequest) (_result *GetQueryOptimizeShareUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeShareUrlResponse{}
	_body, _err := client.GetQueryOptimizeShareUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries suggestions provided by query governance for optimizing an SQL template.
//
// Description:
//
//   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeSolutionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetQueryOptimizeSolutionResponse
func (client *Client) GetQueryOptimizeSolutionWithOptions(request *GetQueryOptimizeSolutionRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeSolutionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeSolution"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetQueryOptimizeSolutionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetQueryOptimizeSolutionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries suggestions provided by query governance for optimizing an SQL template.
//
// Description:
//
//   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeSolutionRequest
//
// @return GetQueryOptimizeSolutionResponse
func (client *Client) GetQueryOptimizeSolution(request *GetQueryOptimizeSolutionRequest) (_result *GetQueryOptimizeSolutionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeSolutionResponse{}
	_body, _err := client.GetQueryOptimizeSolutionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the tags of a SQL statement.
//
// Description:
//
//   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeTagRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetQueryOptimizeTagResponse
func (client *Client) GetQueryOptimizeTagWithOptions(request *GetQueryOptimizeTagRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeTag"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetQueryOptimizeTagResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetQueryOptimizeTagResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the tags of a SQL statement.
//
// Description:
//
//   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- PolarDB for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
// @param request - GetQueryOptimizeTagRequest
//
// @return GetQueryOptimizeTagResponse
func (client *Client) GetQueryOptimizeTag(request *GetQueryOptimizeTagRequest) (_result *GetQueryOptimizeTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeTagResponse{}
	_body, _err := client.GetQueryOptimizeTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the current session on an ApsaraDB for Redis instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB for Redis instances.
//
// 	- If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// >  This operation cannot be used to query sessions generated in direct connection mode on ApsaraDB for Redis cluster instances.
//
// @param request - GetRedisAllSessionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRedisAllSessionResponse
func (client *Client) GetRedisAllSessionWithOptions(request *GetRedisAllSessionRequest, runtime *util.RuntimeOptions) (_result *GetRedisAllSessionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRedisAllSession"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetRedisAllSessionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetRedisAllSessionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the current session on an ApsaraDB for Redis instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB for Redis instances.
//
// 	- If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// >  This operation cannot be used to query sessions generated in direct connection mode on ApsaraDB for Redis cluster instances.
//
// @param request - GetRedisAllSessionRequest
//
// @return GetRedisAllSessionResponse
func (client *Client) GetRedisAllSession(request *GetRedisAllSessionRequest) (_result *GetRedisAllSessionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRedisAllSessionResponse{}
	_body, _err := client.GetRedisAllSessionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries SQL diagnostics records by pages.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
//     	- ApsaraDB RDS for SQL Server
//
//     	- PolarDB for MySQL
//
//     	- PolarDB for PostgreSQL (Compatible with Oracle)
//
//     	- ApsaraDB for MongoDB
//
// >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
//
// @param request - GetRequestDiagnosisPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRequestDiagnosisPageResponse
func (client *Client) GetRequestDiagnosisPageWithOptions(request *GetRequestDiagnosisPageRequest, runtime *util.RuntimeOptions) (_result *GetRequestDiagnosisPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRequestDiagnosisPage"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetRequestDiagnosisPageResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetRequestDiagnosisPageResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries SQL diagnostics records by pages.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL
//
//     	- ApsaraDB RDS for PostgreSQL
//
//     	- ApsaraDB RDS for SQL Server
//
//     	- PolarDB for MySQL
//
//     	- PolarDB for PostgreSQL (Compatible with Oracle)
//
//     	- ApsaraDB for MongoDB
//
// >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
//
// @param request - GetRequestDiagnosisPageRequest
//
// @return GetRequestDiagnosisPageResponse
func (client *Client) GetRequestDiagnosisPage(request *GetRequestDiagnosisPageRequest) (_result *GetRequestDiagnosisPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRequestDiagnosisPageResponse{}
	_body, _err := client.GetRequestDiagnosisPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the results of an SQL diagnostics task.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- You cannot call this operation to query the diagnostic result of the automatic SQL optimization feature.
//
// 	- This operation is applicable to the following database engines:
//
//     	- RDS MySQL
//
//     	- RDS PostgreSQL
//
//     	- RDS SQL Server
//
//     	- PolarDB for MySQL
//
//     	- PolarDB for PostgreSQL (Compatible with Oracle)
//
//     	- ApsaraDB for MongoDB
//
// >  If your instance is an ApsaraDB RDS for PostgreSQL instance, make sure that the minor engine version of your instance is 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
//
// @param request - GetRequestDiagnosisResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRequestDiagnosisResultResponse
func (client *Client) GetRequestDiagnosisResultWithOptions(request *GetRequestDiagnosisResultRequest, runtime *util.RuntimeOptions) (_result *GetRequestDiagnosisResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MessageId)) {
		query["MessageId"] = request.MessageId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		query["SqlId"] = request.SqlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRequestDiagnosisResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetRequestDiagnosisResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetRequestDiagnosisResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the results of an SQL diagnostics task.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- You cannot call this operation to query the diagnostic result of the automatic SQL optimization feature.
//
// 	- This operation is applicable to the following database engines:
//
//     	- RDS MySQL
//
//     	- RDS PostgreSQL
//
//     	- RDS SQL Server
//
//     	- PolarDB for MySQL
//
//     	- PolarDB for PostgreSQL (Compatible with Oracle)
//
//     	- ApsaraDB for MongoDB
//
// >  If your instance is an ApsaraDB RDS for PostgreSQL instance, make sure that the minor engine version of your instance is 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](https://help.aliyun.com/document_detail/146895.html).
//
// @param request - GetRequestDiagnosisResultRequest
//
// @return GetRequestDiagnosisResultResponse
func (client *Client) GetRequestDiagnosisResult(request *GetRequestDiagnosisResultRequest) (_result *GetRequestDiagnosisResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRequestDiagnosisResultResponse{}
	_body, _err := client.GetRequestDiagnosisResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the throttling rules that are in effect.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - GetRunningSqlConcurrencyControlRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRunningSqlConcurrencyControlRulesResponse
func (client *Client) GetRunningSqlConcurrencyControlRulesWithOptions(request *GetRunningSqlConcurrencyControlRulesRequest, runtime *util.RuntimeOptions) (_result *GetRunningSqlConcurrencyControlRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRunningSqlConcurrencyControlRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetRunningSqlConcurrencyControlRulesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetRunningSqlConcurrencyControlRulesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the throttling rules that are in effect.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - GetRunningSqlConcurrencyControlRulesRequest
//
// @return GetRunningSqlConcurrencyControlRulesResponse
func (client *Client) GetRunningSqlConcurrencyControlRules(request *GetRunningSqlConcurrencyControlRulesRequest) (_result *GetRunningSqlConcurrencyControlRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRunningSqlConcurrencyControlRulesResponse{}
	_body, _err := client.GetRunningSqlConcurrencyControlRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Generates a throttling keyword string based on an SQL statement.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - GetSqlConcurrencyControlKeywordsFromSqlTextRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSqlConcurrencyControlKeywordsFromSqlTextResponse
func (client *Client) GetSqlConcurrencyControlKeywordsFromSqlTextWithOptions(request *GetSqlConcurrencyControlKeywordsFromSqlTextRequest, runtime *util.RuntimeOptions) (_result *GetSqlConcurrencyControlKeywordsFromSqlTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlText)) {
		query["SqlText"] = request.SqlText
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSqlConcurrencyControlKeywordsFromSqlText"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetSqlConcurrencyControlKeywordsFromSqlTextResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetSqlConcurrencyControlKeywordsFromSqlTextResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Generates a throttling keyword string based on an SQL statement.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - GetSqlConcurrencyControlKeywordsFromSqlTextRequest
//
// @return GetSqlConcurrencyControlKeywordsFromSqlTextResponse
func (client *Client) GetSqlConcurrencyControlKeywordsFromSqlText(request *GetSqlConcurrencyControlKeywordsFromSqlTextRequest) (_result *GetSqlConcurrencyControlKeywordsFromSqlTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSqlConcurrencyControlKeywordsFromSqlTextResponse{}
	_body, _err := client.GetSqlConcurrencyControlKeywordsFromSqlTextWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the throttling rules that are being executed or have been triggered.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - GetSqlConcurrencyControlRulesHistoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSqlConcurrencyControlRulesHistoryResponse
func (client *Client) GetSqlConcurrencyControlRulesHistoryWithOptions(request *GetSqlConcurrencyControlRulesHistoryRequest, runtime *util.RuntimeOptions) (_result *GetSqlConcurrencyControlRulesHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSqlConcurrencyControlRulesHistory"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetSqlConcurrencyControlRulesHistoryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetSqlConcurrencyControlRulesHistoryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the throttling rules that are being executed or have been triggered.
//
// Description:
//
// This operation supports the following database engines:
//
// 	- ApsaraDB RDS for MySQL
//
// 	- PolarDB for MySQL
//
// @param request - GetSqlConcurrencyControlRulesHistoryRequest
//
// @return GetSqlConcurrencyControlRulesHistoryResponse
func (client *Client) GetSqlConcurrencyControlRulesHistory(request *GetSqlConcurrencyControlRulesHistoryRequest) (_result *GetSqlConcurrencyControlRulesHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSqlConcurrencyControlRulesHistoryResponse{}
	_body, _err := client.GetSqlConcurrencyControlRulesHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries optimization suggestions that are generated by the SQL diagnostics feature of Database Autonomy Service (DAS).
//
// Description:
//
// The SQL diagnostics feature provides optimization suggestions for instances based on diagnostics results. You can use the optimization suggestions to optimize instance indexes. For more information, see [Automatic SQL optimization](https://help.aliyun.com/document_detail/167895.html).
//
// >  You can call this operation to query only the optimization suggestions that are automatically generated by the SQL diagnostics feature.
//
// Before you call this operation, take note of the following items:
//
// 	- This operation is applicable to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetSqlOptimizeAdviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSqlOptimizeAdviceResponse
func (client *Client) GetSqlOptimizeAdviceWithOptions(request *GetSqlOptimizeAdviceRequest, runtime *util.RuntimeOptions) (_result *GetSqlOptimizeAdviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.EndDt)) {
		query["EndDt"] = request.EndDt
	}

	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartDt)) {
		query["StartDt"] = request.StartDt
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSqlOptimizeAdvice"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetSqlOptimizeAdviceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetSqlOptimizeAdviceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries optimization suggestions that are generated by the SQL diagnostics feature of Database Autonomy Service (DAS).
//
// Description:
//
// The SQL diagnostics feature provides optimization suggestions for instances based on diagnostics results. You can use the optimization suggestions to optimize instance indexes. For more information, see [Automatic SQL optimization](https://help.aliyun.com/document_detail/167895.html).
//
// >  You can call this operation to query only the optimization suggestions that are automatically generated by the SQL diagnostics feature.
//
// Before you call this operation, take note of the following items:
//
// 	- This operation is applicable to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetSqlOptimizeAdviceRequest
//
// @return GetSqlOptimizeAdviceResponse
func (client *Client) GetSqlOptimizeAdvice(request *GetSqlOptimizeAdviceRequest) (_result *GetSqlOptimizeAdviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSqlOptimizeAdviceResponse{}
	_body, _err := client.GetSqlOptimizeAdviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status and results of a storage analysis task.
//
// Description:
//
// >  The physical file size indicates the actual size of an obtained file. Only specific deployment modes of database instances support the display of physical file sizes. The statistics on tables are obtained from `information_schema.tables`. Statistics in MySQL are not updated in real time. Therefore, the statistics may be different from the physical file sizes. If you want to obtain the latest data, you can execute the `ANALYZE TABLE` statement on the relevant tables during off-peak hours.
//
// 	- This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and ApsaraDB for MongoDB instances.
//
// 	- For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this operation works the same as the storage analysis feature of the previous version. Tasks generated by this operation cannot be viewed on the Storage Analysis page of the new version in the Database Autonomy Service (DAS) console. If you want to view the tasks and results, call the related API operation to obtain data and save data to your computer.
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetStorageAnalysisResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetStorageAnalysisResultResponse
func (client *Client) GetStorageAnalysisResultWithOptions(request *GetStorageAnalysisResultRequest, runtime *util.RuntimeOptions) (_result *GetStorageAnalysisResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetStorageAnalysisResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetStorageAnalysisResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetStorageAnalysisResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the status and results of a storage analysis task.
//
// Description:
//
// >  The physical file size indicates the actual size of an obtained file. Only specific deployment modes of database instances support the display of physical file sizes. The statistics on tables are obtained from `information_schema.tables`. Statistics in MySQL are not updated in real time. Therefore, the statistics may be different from the physical file sizes. If you want to obtain the latest data, you can execute the `ANALYZE TABLE` statement on the relevant tables during off-peak hours.
//
// 	- This operation is applicable only to ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and ApsaraDB for MongoDB instances.
//
// 	- For ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters, this operation works the same as the storage analysis feature of the previous version. Tasks generated by this operation cannot be viewed on the Storage Analysis page of the new version in the Database Autonomy Service (DAS) console. If you want to view the tasks and results, call the related API operation to obtain data and save data to your computer.
//
// 	- If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - GetStorageAnalysisResultRequest
//
// @return GetStorageAnalysisResultResponse
func (client *Client) GetStorageAnalysisResult(request *GetStorageAnalysisResultRequest) (_result *GetStorageAnalysisResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetStorageAnalysisResultResponse{}
	_body, _err := client.GetStorageAnalysisResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Terminates all sessions on an instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB for Redis.
//
// 	- If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - KillInstanceAllSessionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return KillInstanceAllSessionResponse
func (client *Client) KillInstanceAllSessionWithOptions(request *KillInstanceAllSessionRequest, runtime *util.RuntimeOptions) (_result *KillInstanceAllSessionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("KillInstanceAllSession"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &KillInstanceAllSessionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &KillInstanceAllSessionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Terminates all sessions on an instance.
//
// Description:
//
//   This operation is applicable only to ApsaraDB for Redis.
//
// 	- If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
//
// 	- The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - KillInstanceAllSessionRequest
//
// @return KillInstanceAllSessionResponse
func (client *Client) KillInstanceAllSession(request *KillInstanceAllSessionRequest) (_result *KillInstanceAllSessionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &KillInstanceAllSessionResponse{}
	_body, _err := client.KillInstanceAllSessionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the auto scaling configurations of an instance.
//
// Description:
//
// You can call this operation to modify the following auto scaling configurations of an instance: **auto scaling for specifications**, **automatic storage expansion**, **automatic bandwidth adjustment**, and **auto scaling for resources**.
//
// 	- You can modify the configurations of the **auto scaling feature for specifications*	- for the following types of database instances:
//
//     	- PolarDB for MySQL Cluster Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
//
//     	- ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or enhanced SSDs (ESSDs). For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
//
// 	- You can modify the configurations of the **automatic storage expansion*	- feature for the following types of database instances:
//
//     	- ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs. For more information about the feature and the billing rules, see [Automatic space expansion](https://help.aliyun.com/document_detail/173345.html).
//
// 	- You can modify the configurations of the **automatic bandwidth adjustment*	- feature for the following types of database instances:
//
//     	- ApsaraDB for Redis Classic (Local Disk-based) Edition instances. For more information about the feature and the billing rules, see [Automatic bandwidth adjustment](https://help.aliyun.com/document_detail/216312.html).
//
// 	- You can modify the configurations of the **auto scaling feature for resources*	- for the following types of database instances:
//
//     	- General-purpose ApsaraDB RDS for MySQL Enterprise Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - ModifyAutoScalingConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAutoScalingConfigResponse
func (client *Client) ModifyAutoScalingConfigWithOptions(request *ModifyAutoScalingConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoScalingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Resource)) {
		query["Resource"] = request.Resource
	}

	if !tea.BoolValue(util.IsUnset(request.Shard)) {
		query["Shard"] = request.Shard
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		query["Spec"] = request.Spec
	}

	if !tea.BoolValue(util.IsUnset(request.Storage)) {
		query["Storage"] = request.Storage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAutoScalingConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyAutoScalingConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyAutoScalingConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the auto scaling configurations of an instance.
//
// Description:
//
// You can call this operation to modify the following auto scaling configurations of an instance: **auto scaling for specifications**, **automatic storage expansion**, **automatic bandwidth adjustment**, and **auto scaling for resources**.
//
// 	- You can modify the configurations of the **auto scaling feature for specifications*	- for the following types of database instances:
//
//     	- PolarDB for MySQL Cluster Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
//
//     	- ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or enhanced SSDs (ESSDs). For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
//
// 	- You can modify the configurations of the **automatic storage expansion*	- feature for the following types of database instances:
//
//     	- ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs. For more information about the feature and the billing rules, see [Automatic space expansion](https://help.aliyun.com/document_detail/173345.html).
//
// 	- You can modify the configurations of the **automatic bandwidth adjustment*	- feature for the following types of database instances:
//
//     	- ApsaraDB for Redis Classic (Local Disk-based) Edition instances. For more information about the feature and the billing rules, see [Automatic bandwidth adjustment](https://help.aliyun.com/document_detail/216312.html).
//
// 	- You can modify the configurations of the **auto scaling feature for resources*	- for the following types of database instances:
//
//     	- General-purpose ApsaraDB RDS for MySQL Enterprise Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](https://help.aliyun.com/document_detail/169686.html).
//
// 	- If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// @param request - ModifyAutoScalingConfigRequest
//
// @return ModifyAutoScalingConfigResponse
func (client *Client) ModifyAutoScalingConfig(request *ModifyAutoScalingConfigRequest) (_result *ModifyAutoScalingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoScalingConfigResponse{}
	_body, _err := client.ModifyAutoScalingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or configures Database Autonomy Service (DAS) Enterprise Edition for a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- By default, the latest version of DAS Enterprise Edition that supports the database instance is enabled. For information about the databases and regions that are supported by different versions of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
//
// @param request - ModifySqlLogConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySqlLogConfigResponse
func (client *Client) ModifySqlLogConfigWithOptions(request *ModifySqlLogConfigRequest, runtime *util.RuntimeOptions) (_result *ModifySqlLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableAudit)) {
		query["EnableAudit"] = request.EnableAudit
	}

	if !tea.BoolValue(util.IsUnset(request.Filters)) {
		query["Filters"] = request.Filters
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Enable)) {
		body["Enable"] = request.Enable
	}

	if !tea.BoolValue(util.IsUnset(request.HotRetention)) {
		body["HotRetention"] = request.HotRetention
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestEnable)) {
		body["RequestEnable"] = request.RequestEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Retention)) {
		body["Retention"] = request.Retention
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySqlLogConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifySqlLogConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifySqlLogConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables or configures Database Autonomy Service (DAS) Enterprise Edition for a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- By default, the latest version of DAS Enterprise Edition that supports the database instance is enabled. For information about the databases and regions that are supported by different versions of DAS Enterprise Edition, see [Editions and supported features](https://help.aliyun.com/document_detail/156204.html).
//
// @param request - ModifySqlLogConfigRequest
//
// @return ModifySqlLogConfigResponse
func (client *Client) ModifySqlLogConfig(request *ModifySqlLogConfigRequest) (_result *ModifySqlLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySqlLogConfigResponse{}
	_body, _err := client.ModifySqlLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Runs a stress testing task.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - RunCloudBenchTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunCloudBenchTaskResponse
func (client *Client) RunCloudBenchTaskWithOptions(request *RunCloudBenchTaskRequest, runtime *util.RuntimeOptions) (_result *RunCloudBenchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunCloudBenchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RunCloudBenchTaskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RunCloudBenchTaskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Runs a stress testing task.
//
// Description:
//
// Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](https://help.aliyun.com/document_detail/155068.html).
//
// @param request - RunCloudBenchTaskRequest
//
// @return RunCloudBenchTaskResponse
func (client *Client) RunCloudBenchTask(request *RunCloudBenchTaskRequest) (_result *RunCloudBenchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCloudBenchTaskResponse{}
	_body, _err := client.RunCloudBenchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the event subscription settings for a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- Make sure that the database instance that you want to manage is connected to DAS.
//
// @param request - SetEventSubscriptionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetEventSubscriptionResponse
func (client *Client) SetEventSubscriptionWithOptions(request *SetEventSubscriptionRequest, runtime *util.RuntimeOptions) (_result *SetEventSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Active)) {
		query["Active"] = request.Active
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelType)) {
		query["ChannelType"] = request.ChannelType
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		query["ContactGroupName"] = request.ContactGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.DispatchRule)) {
		query["DispatchRule"] = request.DispatchRule
	}

	if !tea.BoolValue(util.IsUnset(request.EventContext)) {
		query["EventContext"] = request.EventContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MinInterval)) {
		query["MinInterval"] = request.MinInterval
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		query["Severity"] = request.Severity
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetEventSubscription"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetEventSubscriptionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetEventSubscriptionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures the event subscription settings for a database instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
//
// 	- If you use an SDK to call the API operations of DAS, you must set the region ID to cn-shanghai.
//
// 	- Make sure that the database instance that you want to manage is connected to DAS.
//
// @param request - SetEventSubscriptionRequest
//
// @return SetEventSubscriptionResponse
func (client *Client) SetEventSubscription(request *SetEventSubscriptionRequest) (_result *SetEventSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetEventSubscriptionResponse{}
	_body, _err := client.SetEventSubscriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Asynchronously configures parameters related to the automatic fragment recycling feature for multiple database instances at a time.
//
// Description:
//
// >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId*	- returned in the response to re-initiate the call until the value of **isFinish*	- is **true**.***	- In this case, you must call this operation at least twice.
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- The database instances must be an ApsaraDB RDS for MySQL High-availability Edition instance.
//
// 	- DAS Enterprise Edition must be enabled for the database instance. You can call the call [DescribeInstanceDasPro](https://help.aliyun.com/document_detail/413866.html) operation to query whether DAS Enterprise Edition is enabled.
//
// 	- The database instance has four or more CPU cores, and **innodb_file_per_table*	- is set to **ON**.
//
// @param request - UpdateAutoResourceOptimizeRulesAsyncRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAutoResourceOptimizeRulesAsyncResponse
func (client *Client) UpdateAutoResourceOptimizeRulesAsyncWithOptions(request *UpdateAutoResourceOptimizeRulesAsyncRequest, runtime *util.RuntimeOptions) (_result *UpdateAutoResourceOptimizeRulesAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.ResultId)) {
		query["ResultId"] = request.ResultId
	}

	if !tea.BoolValue(util.IsUnset(request.TableFragmentationRatio)) {
		query["TableFragmentationRatio"] = request.TableFragmentationRatio
	}

	if !tea.BoolValue(util.IsUnset(request.TableSpaceSize)) {
		query["TableSpaceSize"] = request.TableSpaceSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAutoResourceOptimizeRulesAsync"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpdateAutoResourceOptimizeRulesAsyncResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpdateAutoResourceOptimizeRulesAsyncResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Asynchronously configures parameters related to the automatic fragment recycling feature for multiple database instances at a time.
//
// Description:
//
// >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId*	- returned in the response to re-initiate the call until the value of **isFinish*	- is **true**.***	- In this case, you must call this operation at least twice.
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call the API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- The database instances must be an ApsaraDB RDS for MySQL High-availability Edition instance.
//
// 	- DAS Enterprise Edition must be enabled for the database instance. You can call the call [DescribeInstanceDasPro](https://help.aliyun.com/document_detail/413866.html) operation to query whether DAS Enterprise Edition is enabled.
//
// 	- The database instance has four or more CPU cores, and **innodb_file_per_table*	- is set to **ON**.
//
// @param request - UpdateAutoResourceOptimizeRulesAsyncRequest
//
// @return UpdateAutoResourceOptimizeRulesAsyncResponse
func (client *Client) UpdateAutoResourceOptimizeRulesAsync(request *UpdateAutoResourceOptimizeRulesAsyncRequest) (_result *UpdateAutoResourceOptimizeRulesAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAutoResourceOptimizeRulesAsyncResponse{}
	_body, _err := client.UpdateAutoResourceOptimizeRulesAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables, modifies, or disables the automatic SQL optimization feature for multiple database instances at a time.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- DAS Enterprise Edition must be enabled for the database instance that you want to manage. To enable DAS Enterprise Edition for a database instance, you can call the [EnableDasPro](https://help.aliyun.com/document_detail/411645.html) operation.
//
// 	- The autonomy service must be enabled for the database instance. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition
//
//     	- PolarDB for MySQL Cluster Edition
//
// @param request - UpdateAutoSqlOptimizeStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAutoSqlOptimizeStatusResponse
func (client *Client) UpdateAutoSqlOptimizeStatusWithOptions(request *UpdateAutoSqlOptimizeStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateAutoSqlOptimizeStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Instances)) {
		query["Instances"] = request.Instances
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAutoSqlOptimizeStatus"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpdateAutoSqlOptimizeStatusResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpdateAutoSqlOptimizeStatusResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables, modifies, or disables the automatic SQL optimization feature for multiple database instances at a time.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- DAS Enterprise Edition must be enabled for the database instance that you want to manage. To enable DAS Enterprise Edition for a database instance, you can call the [EnableDasPro](https://help.aliyun.com/document_detail/411645.html) operation.
//
// 	- The autonomy service must be enabled for the database instance. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
//
// 	- This operation supports the following database engines:
//
//     	- ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition
//
//     	- PolarDB for MySQL Cluster Edition
//
// @param request - UpdateAutoSqlOptimizeStatusRequest
//
// @return UpdateAutoSqlOptimizeStatusResponse
func (client *Client) UpdateAutoSqlOptimizeStatus(request *UpdateAutoSqlOptimizeStatusRequest) (_result *UpdateAutoSqlOptimizeStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAutoSqlOptimizeStatusResponse{}
	_body, _err := client.UpdateAutoSqlOptimizeStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Asynchronously configures parameters related to the automatic SQL throttling feature for multiple database instances at a time.
//
// Description:
//
// >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId*	- returned in the response to re-initiate the call until the value of **isFinish*	- is **true**.***	- In this case, you must call this operation at least twice.
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- The autonomy service must be enabled for the database instance that you want to manage. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
//
// 	- The database instance that you want to manage must be of one of the following types:
//
//     	- ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
//
//     	- PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
//
// @param request - UpdateAutoThrottleRulesAsyncRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAutoThrottleRulesAsyncResponse
func (client *Client) UpdateAutoThrottleRulesAsyncWithOptions(request *UpdateAutoThrottleRulesAsyncRequest, runtime *util.RuntimeOptions) (_result *UpdateAutoThrottleRulesAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AbnormalDuration)) {
		query["AbnormalDuration"] = request.AbnormalDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ActiveSessions)) {
		query["ActiveSessions"] = request.ActiveSessions
	}

	if !tea.BoolValue(util.IsUnset(request.AllowThrottleEndTime)) {
		query["AllowThrottleEndTime"] = request.AllowThrottleEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.AllowThrottleStartTime)) {
		query["AllowThrottleStartTime"] = request.AllowThrottleStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.AutoKillSession)) {
		query["AutoKillSession"] = request.AutoKillSession
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.CpuSessionRelation)) {
		query["CpuSessionRelation"] = request.CpuSessionRelation
	}

	if !tea.BoolValue(util.IsUnset(request.CpuUsage)) {
		query["CpuUsage"] = request.CpuUsage
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.MaxThrottleTime)) {
		query["MaxThrottleTime"] = request.MaxThrottleTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResultId)) {
		query["ResultId"] = request.ResultId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAutoThrottleRulesAsync"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpdateAutoThrottleRulesAsyncResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpdateAutoThrottleRulesAsyncResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Asynchronously configures parameters related to the automatic SQL throttling feature for multiple database instances at a time.
//
// Description:
//
// >  Asynchronous calls do not immediately return the complete results. To obtain the complete results, you must use the value of **ResultId*	- returned in the response to re-initiate the call until the value of **isFinish*	- is **true**.***	- In this case, you must call this operation at least twice.
//
// Before you call this operation, take note of the following items:
//
// 	- If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
//
// 	- The autonomy service must be enabled for the database instance that you want to manage. For more information, see [Autonomy center](https://help.aliyun.com/document_detail/152139.html).
//
// 	- The database instance that you want to manage must be of one of the following types:
//
//     	- ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
//
//     	- PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
//
// @param request - UpdateAutoThrottleRulesAsyncRequest
//
// @return UpdateAutoThrottleRulesAsyncResponse
func (client *Client) UpdateAutoThrottleRulesAsync(request *UpdateAutoThrottleRulesAsyncRequest) (_result *UpdateAutoThrottleRulesAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAutoThrottleRulesAsyncResponse{}
	_body, _err := client.UpdateAutoThrottleRulesAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
