// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddDatasetDocumentRequest struct {
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 数据集名称
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// This parameter is required.
	Document *AddDatasetDocumentRequestDocument `json:"Document,omitempty" xml:"Document,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s AddDatasetDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDatasetDocumentRequest) GoString() string {
	return s.String()
}

func (s *AddDatasetDocumentRequest) SetDatasetId(v int64) *AddDatasetDocumentRequest {
	s.DatasetId = &v
	return s
}

func (s *AddDatasetDocumentRequest) SetDatasetName(v string) *AddDatasetDocumentRequest {
	s.DatasetName = &v
	return s
}

func (s *AddDatasetDocumentRequest) SetDocument(v *AddDatasetDocumentRequestDocument) *AddDatasetDocumentRequest {
	s.Document = v
	return s
}

func (s *AddDatasetDocumentRequest) SetWorkspaceId(v string) *AddDatasetDocumentRequest {
	s.WorkspaceId = &v
	return s
}

type AddDatasetDocumentRequestDocument struct {
	// example:
	//
	// xxx
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// false
	DisableHandleMultimodalMedia *bool `json:"DisableHandleMultimodalMedia,omitempty" xml:"DisableHandleMultimodalMedia,omitempty"`
	// example:
	//
	// 业务文档唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 文档类型
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// 内部文档唯一ID
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 扩展字段1
	Extend1 *string `json:"Extend1,omitempty" xml:"Extend1,omitempty"`
	// example:
	//
	// 扩展字段2
	Extend2 *string `json:"Extend2,omitempty" xml:"Extend2,omitempty"`
	// example:
	//
	// 扩展字段3
	Extend3 *string `json:"Extend3,omitempty" xml:"Extend3,omitempty"`
	// example:
	//
	// 模型名称 todo 商业化 仅个别账号可传入
	MultimodalIndexName *string                                              `json:"MultimodalIndexName,omitempty" xml:"MultimodalIndexName,omitempty"`
	MultimodalMedias    []*AddDatasetDocumentRequestDocumentMultimodalMedias `json:"MultimodalMedias,omitempty" xml:"MultimodalMedias,omitempty" type:"Repeated"`
	// example:
	//
	// 2024-12-09 13:35:40
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 来源
	SourceFrom *string `json:"SourceFrom,omitempty" xml:"SourceFrom,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xxxxx@xxxxx.com
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s AddDatasetDocumentRequestDocument) String() string {
	return tea.Prettify(s)
}

func (s AddDatasetDocumentRequestDocument) GoString() string {
	return s.String()
}

func (s *AddDatasetDocumentRequestDocument) SetContent(v string) *AddDatasetDocumentRequestDocument {
	s.Content = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetDisableHandleMultimodalMedia(v bool) *AddDatasetDocumentRequestDocument {
	s.DisableHandleMultimodalMedia = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetDocId(v string) *AddDatasetDocumentRequestDocument {
	s.DocId = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetDocType(v string) *AddDatasetDocumentRequestDocument {
	s.DocType = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetDocUuid(v string) *AddDatasetDocumentRequestDocument {
	s.DocUuid = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetExtend1(v string) *AddDatasetDocumentRequestDocument {
	s.Extend1 = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetExtend2(v string) *AddDatasetDocumentRequestDocument {
	s.Extend2 = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetExtend3(v string) *AddDatasetDocumentRequestDocument {
	s.Extend3 = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetMultimodalIndexName(v string) *AddDatasetDocumentRequestDocument {
	s.MultimodalIndexName = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetMultimodalMedias(v []*AddDatasetDocumentRequestDocumentMultimodalMedias) *AddDatasetDocumentRequestDocument {
	s.MultimodalMedias = v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetPubTime(v string) *AddDatasetDocumentRequestDocument {
	s.PubTime = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetSourceFrom(v string) *AddDatasetDocumentRequestDocument {
	s.SourceFrom = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetSummary(v string) *AddDatasetDocumentRequestDocument {
	s.Summary = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetTitle(v string) *AddDatasetDocumentRequestDocument {
	s.Title = &v
	return s
}

func (s *AddDatasetDocumentRequestDocument) SetUrl(v string) *AddDatasetDocumentRequestDocument {
	s.Url = &v
	return s
}

type AddDatasetDocumentRequestDocumentMultimodalMedias struct {
	// example:
	//
	// 图片或视频文件地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// 多模态数据唯一标识
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 多模态数据类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s AddDatasetDocumentRequestDocumentMultimodalMedias) String() string {
	return tea.Prettify(s)
}

func (s AddDatasetDocumentRequestDocumentMultimodalMedias) GoString() string {
	return s.String()
}

func (s *AddDatasetDocumentRequestDocumentMultimodalMedias) SetFileUrl(v string) *AddDatasetDocumentRequestDocumentMultimodalMedias {
	s.FileUrl = &v
	return s
}

func (s *AddDatasetDocumentRequestDocumentMultimodalMedias) SetMediaId(v string) *AddDatasetDocumentRequestDocumentMultimodalMedias {
	s.MediaId = &v
	return s
}

func (s *AddDatasetDocumentRequestDocumentMultimodalMedias) SetMediaType(v string) *AddDatasetDocumentRequestDocumentMultimodalMedias {
	s.MediaType = &v
	return s
}

type AddDatasetDocumentShrinkRequest struct {
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 数据集名称
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// This parameter is required.
	DocumentShrink *string `json:"Document,omitempty" xml:"Document,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s AddDatasetDocumentShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDatasetDocumentShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddDatasetDocumentShrinkRequest) SetDatasetId(v int64) *AddDatasetDocumentShrinkRequest {
	s.DatasetId = &v
	return s
}

func (s *AddDatasetDocumentShrinkRequest) SetDatasetName(v string) *AddDatasetDocumentShrinkRequest {
	s.DatasetName = &v
	return s
}

func (s *AddDatasetDocumentShrinkRequest) SetDocumentShrink(v string) *AddDatasetDocumentShrinkRequest {
	s.DocumentShrink = &v
	return s
}

func (s *AddDatasetDocumentShrinkRequest) SetWorkspaceId(v string) *AddDatasetDocumentShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type AddDatasetDocumentResponseBody struct {
	// example:
	//
	// NoData
	Code *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *AddDatasetDocumentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddDatasetDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDatasetDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *AddDatasetDocumentResponseBody) SetCode(v string) *AddDatasetDocumentResponseBody {
	s.Code = &v
	return s
}

func (s *AddDatasetDocumentResponseBody) SetData(v *AddDatasetDocumentResponseBodyData) *AddDatasetDocumentResponseBody {
	s.Data = v
	return s
}

func (s *AddDatasetDocumentResponseBody) SetHttpStatusCode(v int32) *AddDatasetDocumentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddDatasetDocumentResponseBody) SetMessage(v string) *AddDatasetDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *AddDatasetDocumentResponseBody) SetRequestId(v string) *AddDatasetDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddDatasetDocumentResponseBody) SetSuccess(v bool) *AddDatasetDocumentResponseBody {
	s.Success = &v
	return s
}

type AddDatasetDocumentResponseBodyData struct {
	// example:
	//
	// 文档业务唯一标识
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 8df2d69d63a247b6b52ff455b2d426b6
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// Success
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AddDatasetDocumentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddDatasetDocumentResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddDatasetDocumentResponseBodyData) SetDocId(v string) *AddDatasetDocumentResponseBodyData {
	s.DocId = &v
	return s
}

func (s *AddDatasetDocumentResponseBodyData) SetDocUuid(v string) *AddDatasetDocumentResponseBodyData {
	s.DocUuid = &v
	return s
}

func (s *AddDatasetDocumentResponseBodyData) SetErrorCode(v string) *AddDatasetDocumentResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *AddDatasetDocumentResponseBodyData) SetErrorMessage(v string) *AddDatasetDocumentResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *AddDatasetDocumentResponseBodyData) SetStatus(v int32) *AddDatasetDocumentResponseBodyData {
	s.Status = &v
	return s
}

type AddDatasetDocumentResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddDatasetDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddDatasetDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDatasetDocumentResponse) GoString() string {
	return s.String()
}

func (s *AddDatasetDocumentResponse) SetHeaders(v map[string]*string) *AddDatasetDocumentResponse {
	s.Headers = v
	return s
}

func (s *AddDatasetDocumentResponse) SetStatusCode(v int32) *AddDatasetDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *AddDatasetDocumentResponse) SetBody(v *AddDatasetDocumentResponseBody) *AddDatasetDocumentResponse {
	s.Body = v
	return s
}

type CancelAsyncTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CancelAsyncTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelAsyncTaskRequest) GoString() string {
	return s.String()
}

func (s *CancelAsyncTaskRequest) SetAgentKey(v string) *CancelAsyncTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *CancelAsyncTaskRequest) SetTaskId(v string) *CancelAsyncTaskRequest {
	s.TaskId = &v
	return s
}

type CancelAsyncTaskResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// Success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// FB698445-61DA-5361-BF73-1C5F1157E888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CancelAsyncTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelAsyncTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CancelAsyncTaskResponseBody) SetCode(v string) *CancelAsyncTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CancelAsyncTaskResponseBody) SetData(v bool) *CancelAsyncTaskResponseBody {
	s.Data = &v
	return s
}

func (s *CancelAsyncTaskResponseBody) SetHttpStatusCode(v int32) *CancelAsyncTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CancelAsyncTaskResponseBody) SetMessage(v string) *CancelAsyncTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CancelAsyncTaskResponseBody) SetRequestId(v string) *CancelAsyncTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelAsyncTaskResponseBody) SetSuccess(v bool) *CancelAsyncTaskResponseBody {
	s.Success = &v
	return s
}

type CancelAsyncTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelAsyncTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelAsyncTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelAsyncTaskResponse) GoString() string {
	return s.String()
}

func (s *CancelAsyncTaskResponse) SetHeaders(v map[string]*string) *CancelAsyncTaskResponse {
	s.Headers = v
	return s
}

func (s *CancelAsyncTaskResponse) SetStatusCode(v int32) *CancelAsyncTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelAsyncTaskResponse) SetBody(v *CancelAsyncTaskResponseBody) *CancelAsyncTaskResponse {
	s.Body = v
	return s
}

type ClearIntervenesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
}

func (s ClearIntervenesRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearIntervenesRequest) GoString() string {
	return s.String()
}

func (s *ClearIntervenesRequest) SetAgentKey(v string) *ClearIntervenesRequest {
	s.AgentKey = &v
	return s
}

type ClearIntervenesResponseBody struct {
	// example:
	//
	// 0
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ClearIntervenesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ClearIntervenesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClearIntervenesResponseBody) GoString() string {
	return s.String()
}

func (s *ClearIntervenesResponseBody) SetCode(v string) *ClearIntervenesResponseBody {
	s.Code = &v
	return s
}

func (s *ClearIntervenesResponseBody) SetData(v *ClearIntervenesResponseBodyData) *ClearIntervenesResponseBody {
	s.Data = v
	return s
}

func (s *ClearIntervenesResponseBody) SetHttpStatusCode(v int32) *ClearIntervenesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ClearIntervenesResponseBody) SetMessage(v string) *ClearIntervenesResponseBody {
	s.Message = &v
	return s
}

func (s *ClearIntervenesResponseBody) SetRequestId(v string) *ClearIntervenesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ClearIntervenesResponseBody) SetSuccess(v bool) *ClearIntervenesResponseBody {
	s.Success = &v
	return s
}

type ClearIntervenesResponseBodyData struct {
	FailIdList []*string `json:"FailIdList,omitempty" xml:"FailIdList,omitempty" type:"Repeated"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ClearIntervenesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ClearIntervenesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ClearIntervenesResponseBodyData) SetFailIdList(v []*string) *ClearIntervenesResponseBodyData {
	s.FailIdList = v
	return s
}

func (s *ClearIntervenesResponseBodyData) SetTaskId(v string) *ClearIntervenesResponseBodyData {
	s.TaskId = &v
	return s
}

type ClearIntervenesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ClearIntervenesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ClearIntervenesResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearIntervenesResponse) GoString() string {
	return s.String()
}

func (s *ClearIntervenesResponse) SetHeaders(v map[string]*string) *ClearIntervenesResponse {
	s.Headers = v
	return s
}

func (s *ClearIntervenesResponse) SetStatusCode(v int32) *ClearIntervenesResponse {
	s.StatusCode = &v
	return s
}

func (s *ClearIntervenesResponse) SetBody(v *ClearIntervenesResponseBody) *ClearIntervenesResponse {
	s.Body = v
	return s
}

type CreateDatasetRequest struct {
	DatasetConfig *CreateDatasetRequestDatasetConfig `json:"DatasetConfig,omitempty" xml:"DatasetConfig,omitempty" type:"Struct"`
	// example:
	//
	// 企业自定义数据集
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// businessDataset
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// CustomSemanticSearch
	DatasetType          *string                                   `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	DocumentHandleConfig *CreateDatasetRequestDocumentHandleConfig `json:"DocumentHandleConfig,omitempty" xml:"DocumentHandleConfig,omitempty" type:"Struct"`
	// example:
	//
	// portal
	InvokeType *string `json:"InvokeType,omitempty" xml:"InvokeType,omitempty"`
	// example:
	//
	// 3
	SearchDatasetEnable *int32 `json:"SearchDatasetEnable,omitempty" xml:"SearchDatasetEnable,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequest) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequest) SetDatasetConfig(v *CreateDatasetRequestDatasetConfig) *CreateDatasetRequest {
	s.DatasetConfig = v
	return s
}

func (s *CreateDatasetRequest) SetDatasetDescription(v string) *CreateDatasetRequest {
	s.DatasetDescription = &v
	return s
}

func (s *CreateDatasetRequest) SetDatasetName(v string) *CreateDatasetRequest {
	s.DatasetName = &v
	return s
}

func (s *CreateDatasetRequest) SetDatasetType(v string) *CreateDatasetRequest {
	s.DatasetType = &v
	return s
}

func (s *CreateDatasetRequest) SetDocumentHandleConfig(v *CreateDatasetRequestDocumentHandleConfig) *CreateDatasetRequest {
	s.DocumentHandleConfig = v
	return s
}

func (s *CreateDatasetRequest) SetInvokeType(v string) *CreateDatasetRequest {
	s.InvokeType = &v
	return s
}

func (s *CreateDatasetRequest) SetSearchDatasetEnable(v int32) *CreateDatasetRequest {
	s.SearchDatasetEnable = &v
	return s
}

func (s *CreateDatasetRequest) SetWorkspaceId(v string) *CreateDatasetRequest {
	s.WorkspaceId = &v
	return s
}

type CreateDatasetRequestDatasetConfig struct {
	SearchSourceConfigs []*CreateDatasetRequestDatasetConfigSearchSourceConfigs `json:"SearchSourceConfigs,omitempty" xml:"SearchSourceConfigs,omitempty" type:"Repeated"`
}

func (s CreateDatasetRequestDatasetConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDatasetConfig) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDatasetConfig) SetSearchSourceConfigs(v []*CreateDatasetRequestDatasetConfigSearchSourceConfigs) *CreateDatasetRequestDatasetConfig {
	s.SearchSourceConfigs = v
	return s
}

type CreateDatasetRequestDatasetConfigSearchSourceConfigs struct {
	// example:
	//
	// 可以搜索到的关键词，用来验证是否可用
	DemoQuery                  *string                                                                         `json:"DemoQuery,omitempty" xml:"DemoQuery,omitempty"`
	SearchSourceRequestConfig  *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig  `json:"SearchSourceRequestConfig,omitempty" xml:"SearchSourceRequestConfig,omitempty" type:"Struct"`
	SearchSourceResponseConfig *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig `json:"SearchSourceResponseConfig,omitempty" xml:"SearchSourceResponseConfig,omitempty" type:"Struct"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigs) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigs) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigs) SetDemoQuery(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigs {
	s.DemoQuery = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigs) SetSearchSourceRequestConfig(v *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) *CreateDatasetRequestDatasetConfigSearchSourceConfigs {
	s.SearchSourceRequestConfig = v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigs) SetSearchSourceResponseConfig(v *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) *CreateDatasetRequestDatasetConfigSearchSourceConfigs {
	s.SearchSourceResponseConfig = v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigs) SetSize(v int32) *CreateDatasetRequestDatasetConfigSearchSourceConfigs {
	s.Size = &v
	return s
}

type CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig struct {
	// example:
	//
	// {}
	Body *string `json:"Body,omitempty" xml:"Body,omitempty"`
	// example:
	//
	// 3000
	ConnectTimeout *int32                                                                                  `json:"ConnectTimeout,omitempty" xml:"ConnectTimeout,omitempty"`
	Headers        []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders `json:"Headers,omitempty" xml:"Headers,omitempty" type:"Repeated"`
	// example:
	//
	// 请求方式
	Method *string                                                                                `json:"Method,omitempty" xml:"Method,omitempty"`
	Params []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// true
	PathParamsEnable *bool `json:"PathParamsEnable,omitempty" xml:"PathParamsEnable,omitempty"`
	// example:
	//
	// 3000
	SocketTimeout *int32 `json:"SocketTimeout,omitempty" xml:"SocketTimeout,omitempty"`
	// example:
	//
	// api地址
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetBody(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Body = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetConnectTimeout(v int32) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.ConnectTimeout = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetHeaders(v []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Headers = v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetMethod(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Method = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetParams(v []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Params = v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetPathParamsEnable(v bool) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.PathParamsEnable = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetSocketTimeout(v int32) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.SocketTimeout = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetUrl(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Url = &v
	return s
}

type CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders struct {
	// example:
	//
	// 参数名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 参数值
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// example:
	//
	// valueType = time 时有效
	ValueFormat *string `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty"`
	// example:
	//
	// 参数值数据类型: 默认string
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetName(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.Name = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetValue(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.Value = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetValueFormat(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.ValueFormat = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetValueType(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.ValueType = &v
	return s
}

type CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams struct {
	// example:
	//
	// 参数名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 参数值
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// example:
	//
	// valueType = time 时有效
	ValueFormat *string `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty"`
	// example:
	//
	// 参数值数据类型: 默认string
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetName(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.Name = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetValue(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.Value = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetValueFormat(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.ValueFormat = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetValueType(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.ValueType = &v
	return s
}

type CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig struct {
	JqNodes []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes `json:"JqNodes,omitempty" xml:"JqNodes,omitempty" type:"Repeated"`
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) SetJqNodes(v []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig {
	s.JqNodes = v
	return s
}

type CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes struct {
	JqNodes []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes `json:"JqNodes,omitempty" xml:"JqNodes,omitempty" type:"Repeated"`
	// example:
	//
	// 节点key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 节点路径
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// 节点数据类型：string number list object base
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetJqNodes(v []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.JqNodes = v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetKey(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.Key = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetPath(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.Path = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetType(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.Type = &v
	return s
}

type CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes struct {
	JqNodes []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes `json:"JqNodes,omitempty" xml:"JqNodes,omitempty" type:"Repeated"`
	// example:
	//
	// title
	Key  *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// string
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetJqNodes(v []*CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.JqNodes = v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetKey(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.Key = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetPath(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.Path = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetType(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.Type = &v
	return s
}

type CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes struct {
	// example:
	//
	// title
	Key  *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// string
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) SetKey(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes {
	s.Key = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) SetPath(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes {
	s.Path = &v
	return s
}

func (s *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) SetType(v string) *CreateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes {
	s.Type = &v
	return s
}

type CreateDatasetRequestDocumentHandleConfig struct {
	// example:
	//
	// false
	DisableHandleMultimodalMedia *bool `json:"DisableHandleMultimodalMedia,omitempty" xml:"DisableHandleMultimodalMedia,omitempty"`
}

func (s CreateDatasetRequestDocumentHandleConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestDocumentHandleConfig) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestDocumentHandleConfig) SetDisableHandleMultimodalMedia(v bool) *CreateDatasetRequestDocumentHandleConfig {
	s.DisableHandleMultimodalMedia = &v
	return s
}

type CreateDatasetShrinkRequest struct {
	DatasetConfigShrink *string `json:"DatasetConfig,omitempty" xml:"DatasetConfig,omitempty"`
	// example:
	//
	// 企业自定义数据集
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// businessDataset
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// CustomSemanticSearch
	DatasetType                *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	DocumentHandleConfigShrink *string `json:"DocumentHandleConfig,omitempty" xml:"DocumentHandleConfig,omitempty"`
	// example:
	//
	// portal
	InvokeType *string `json:"InvokeType,omitempty" xml:"InvokeType,omitempty"`
	// example:
	//
	// 3
	SearchDatasetEnable *int32 `json:"SearchDatasetEnable,omitempty" xml:"SearchDatasetEnable,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateDatasetShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDatasetShrinkRequest) SetDatasetConfigShrink(v string) *CreateDatasetShrinkRequest {
	s.DatasetConfigShrink = &v
	return s
}

func (s *CreateDatasetShrinkRequest) SetDatasetDescription(v string) *CreateDatasetShrinkRequest {
	s.DatasetDescription = &v
	return s
}

func (s *CreateDatasetShrinkRequest) SetDatasetName(v string) *CreateDatasetShrinkRequest {
	s.DatasetName = &v
	return s
}

func (s *CreateDatasetShrinkRequest) SetDatasetType(v string) *CreateDatasetShrinkRequest {
	s.DatasetType = &v
	return s
}

func (s *CreateDatasetShrinkRequest) SetDocumentHandleConfigShrink(v string) *CreateDatasetShrinkRequest {
	s.DocumentHandleConfigShrink = &v
	return s
}

func (s *CreateDatasetShrinkRequest) SetInvokeType(v string) *CreateDatasetShrinkRequest {
	s.InvokeType = &v
	return s
}

func (s *CreateDatasetShrinkRequest) SetSearchDatasetEnable(v int32) *CreateDatasetShrinkRequest {
	s.SearchDatasetEnable = &v
	return s
}

func (s *CreateDatasetShrinkRequest) SetWorkspaceId(v string) *CreateDatasetShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type CreateDatasetResponseBody struct {
	// example:
	//
	// NoData
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *CreateDatasetResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDatasetResponseBody) SetCode(v string) *CreateDatasetResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDatasetResponseBody) SetData(v *CreateDatasetResponseBodyData) *CreateDatasetResponseBody {
	s.Data = v
	return s
}

func (s *CreateDatasetResponseBody) SetHttpStatusCode(v int32) *CreateDatasetResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateDatasetResponseBody) SetMessage(v string) *CreateDatasetResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDatasetResponseBody) SetRequestId(v string) *CreateDatasetResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDatasetResponseBody) SetSuccess(v bool) *CreateDatasetResponseBody {
	s.Success = &v
	return s
}

type CreateDatasetResponseBodyData struct {
	// example:
	//
	// 2024-11-12 21:46:24
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// xxx
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// xxx
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// xxx
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// CustomSemanticSearch
	DatasetType *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	// example:
	//
	// 1
	SearchDatasetEnable *int32 `json:"SearchDatasetEnable,omitempty" xml:"SearchDatasetEnable,omitempty"`
}

func (s CreateDatasetResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateDatasetResponseBodyData) SetCreateTime(v string) *CreateDatasetResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *CreateDatasetResponseBodyData) SetCreateUser(v string) *CreateDatasetResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *CreateDatasetResponseBodyData) SetDatasetDescription(v string) *CreateDatasetResponseBodyData {
	s.DatasetDescription = &v
	return s
}

func (s *CreateDatasetResponseBodyData) SetDatasetId(v int64) *CreateDatasetResponseBodyData {
	s.DatasetId = &v
	return s
}

func (s *CreateDatasetResponseBodyData) SetDatasetName(v string) *CreateDatasetResponseBodyData {
	s.DatasetName = &v
	return s
}

func (s *CreateDatasetResponseBodyData) SetDatasetType(v string) *CreateDatasetResponseBodyData {
	s.DatasetType = &v
	return s
}

func (s *CreateDatasetResponseBodyData) SetSearchDatasetEnable(v int32) *CreateDatasetResponseBodyData {
	s.SearchDatasetEnable = &v
	return s
}

type CreateDatasetResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetResponse) GoString() string {
	return s.String()
}

func (s *CreateDatasetResponse) SetHeaders(v map[string]*string) *CreateDatasetResponse {
	s.Headers = v
	return s
}

func (s *CreateDatasetResponse) SetStatusCode(v int32) *CreateDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDatasetResponse) SetBody(v *CreateDatasetResponseBody) *CreateDatasetResponse {
	s.Body = v
	return s
}

type CreateGeneratedContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// government
	ContentDomain *string   `json:"ContentDomain,omitempty" xml:"ContentDomain,omitempty"`
	ContentText   *string   `json:"ContentText,omitempty" xml:"ContentText,omitempty"`
	Keywords      []*string `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
	Prompt        *string   `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xxxx
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s CreateGeneratedContentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGeneratedContentRequest) GoString() string {
	return s.String()
}

func (s *CreateGeneratedContentRequest) SetAgentKey(v string) *CreateGeneratedContentRequest {
	s.AgentKey = &v
	return s
}

func (s *CreateGeneratedContentRequest) SetContent(v string) *CreateGeneratedContentRequest {
	s.Content = &v
	return s
}

func (s *CreateGeneratedContentRequest) SetContentDomain(v string) *CreateGeneratedContentRequest {
	s.ContentDomain = &v
	return s
}

func (s *CreateGeneratedContentRequest) SetContentText(v string) *CreateGeneratedContentRequest {
	s.ContentText = &v
	return s
}

func (s *CreateGeneratedContentRequest) SetKeywords(v []*string) *CreateGeneratedContentRequest {
	s.Keywords = v
	return s
}

func (s *CreateGeneratedContentRequest) SetPrompt(v string) *CreateGeneratedContentRequest {
	s.Prompt = &v
	return s
}

func (s *CreateGeneratedContentRequest) SetTaskId(v string) *CreateGeneratedContentRequest {
	s.TaskId = &v
	return s
}

func (s *CreateGeneratedContentRequest) SetTitle(v string) *CreateGeneratedContentRequest {
	s.Title = &v
	return s
}

func (s *CreateGeneratedContentRequest) SetUuid(v string) *CreateGeneratedContentRequest {
	s.Uuid = &v
	return s
}

type CreateGeneratedContentShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// government
	ContentDomain  *string `json:"ContentDomain,omitempty" xml:"ContentDomain,omitempty"`
	ContentText    *string `json:"ContentText,omitempty" xml:"ContentText,omitempty"`
	KeywordsShrink *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	Prompt         *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xxxx
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s CreateGeneratedContentShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGeneratedContentShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateGeneratedContentShrinkRequest) SetAgentKey(v string) *CreateGeneratedContentShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *CreateGeneratedContentShrinkRequest) SetContent(v string) *CreateGeneratedContentShrinkRequest {
	s.Content = &v
	return s
}

func (s *CreateGeneratedContentShrinkRequest) SetContentDomain(v string) *CreateGeneratedContentShrinkRequest {
	s.ContentDomain = &v
	return s
}

func (s *CreateGeneratedContentShrinkRequest) SetContentText(v string) *CreateGeneratedContentShrinkRequest {
	s.ContentText = &v
	return s
}

func (s *CreateGeneratedContentShrinkRequest) SetKeywordsShrink(v string) *CreateGeneratedContentShrinkRequest {
	s.KeywordsShrink = &v
	return s
}

func (s *CreateGeneratedContentShrinkRequest) SetPrompt(v string) *CreateGeneratedContentShrinkRequest {
	s.Prompt = &v
	return s
}

func (s *CreateGeneratedContentShrinkRequest) SetTaskId(v string) *CreateGeneratedContentShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *CreateGeneratedContentShrinkRequest) SetTitle(v string) *CreateGeneratedContentShrinkRequest {
	s.Title = &v
	return s
}

func (s *CreateGeneratedContentShrinkRequest) SetUuid(v string) *CreateGeneratedContentShrinkRequest {
	s.Uuid = &v
	return s
}

type CreateGeneratedContentResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 42
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 数据不存在
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// false
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateGeneratedContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGeneratedContentResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGeneratedContentResponseBody) SetCode(v string) *CreateGeneratedContentResponseBody {
	s.Code = &v
	return s
}

func (s *CreateGeneratedContentResponseBody) SetData(v int64) *CreateGeneratedContentResponseBody {
	s.Data = &v
	return s
}

func (s *CreateGeneratedContentResponseBody) SetHttpStatusCode(v int32) *CreateGeneratedContentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateGeneratedContentResponseBody) SetMessage(v string) *CreateGeneratedContentResponseBody {
	s.Message = &v
	return s
}

func (s *CreateGeneratedContentResponseBody) SetRequestId(v string) *CreateGeneratedContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateGeneratedContentResponseBody) SetSuccess(v bool) *CreateGeneratedContentResponseBody {
	s.Success = &v
	return s
}

type CreateGeneratedContentResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateGeneratedContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateGeneratedContentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGeneratedContentResponse) GoString() string {
	return s.String()
}

func (s *CreateGeneratedContentResponse) SetHeaders(v map[string]*string) *CreateGeneratedContentResponse {
	s.Headers = v
	return s
}

func (s *CreateGeneratedContentResponse) SetStatusCode(v int32) *CreateGeneratedContentResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateGeneratedContentResponse) SetBody(v *CreateGeneratedContentResponseBody) *CreateGeneratedContentResponse {
	s.Body = v
	return s
}

type CreateTokenRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2daaa2e0c209xb26acb97009ea77bd4b_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
}

func (s CreateTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTokenRequest) GoString() string {
	return s.String()
}

func (s *CreateTokenRequest) SetAgentKey(v string) *CreateTokenRequest {
	s.AgentKey = &v
	return s
}

type CreateTokenResponseBody struct {
	// example:
	//
	// NoData
	Code *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *CreateTokenResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTokenResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTokenResponseBody) SetCode(v string) *CreateTokenResponseBody {
	s.Code = &v
	return s
}

func (s *CreateTokenResponseBody) SetData(v *CreateTokenResponseBodyData) *CreateTokenResponseBody {
	s.Data = v
	return s
}

func (s *CreateTokenResponseBody) SetHttpStatusCode(v int32) *CreateTokenResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateTokenResponseBody) SetMessage(v string) *CreateTokenResponseBody {
	s.Message = &v
	return s
}

func (s *CreateTokenResponseBody) SetRequestId(v string) *CreateTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTokenResponseBody) SetSuccess(v bool) *CreateTokenResponseBody {
	s.Success = &v
	return s
}

type CreateTokenResponseBodyData struct {
	// example:
	//
	// 1705388704855
	ExpiredTime *int64 `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s CreateTokenResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateTokenResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateTokenResponseBodyData) SetExpiredTime(v int64) *CreateTokenResponseBodyData {
	s.ExpiredTime = &v
	return s
}

func (s *CreateTokenResponseBodyData) SetToken(v string) *CreateTokenResponseBodyData {
	s.Token = &v
	return s
}

type CreateTokenResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTokenResponse) GoString() string {
	return s.String()
}

func (s *CreateTokenResponse) SetHeaders(v map[string]*string) *CreateTokenResponse {
	s.Headers = v
	return s
}

func (s *CreateTokenResponse) SetStatusCode(v int32) *CreateTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTokenResponse) SetBody(v *CreateTokenResponseBody) *CreateTokenResponse {
	s.Body = v
	return s
}

type DeleteCustomTextRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey      *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 85
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteCustomTextRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTextRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomTextRequest) SetAgentKey(v string) *DeleteCustomTextRequest {
	s.AgentKey = &v
	return s
}

func (s *DeleteCustomTextRequest) SetCommodityCode(v string) *DeleteCustomTextRequest {
	s.CommodityCode = &v
	return s
}

func (s *DeleteCustomTextRequest) SetId(v int64) *DeleteCustomTextRequest {
	s.Id = &v
	return s
}

type DeleteCustomTextResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// false
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCustomTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTextResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomTextResponseBody) SetCode(v string) *DeleteCustomTextResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCustomTextResponseBody) SetData(v bool) *DeleteCustomTextResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteCustomTextResponseBody) SetHttpStatusCode(v int32) *DeleteCustomTextResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteCustomTextResponseBody) SetMessage(v string) *DeleteCustomTextResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCustomTextResponseBody) SetRequestId(v string) *DeleteCustomTextResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomTextResponseBody) SetSuccess(v bool) *DeleteCustomTextResponseBody {
	s.Success = &v
	return s
}

type DeleteCustomTextResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomTextResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTextResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomTextResponse) SetHeaders(v map[string]*string) *DeleteCustomTextResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomTextResponse) SetStatusCode(v int32) *DeleteCustomTextResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomTextResponse) SetBody(v *DeleteCustomTextResponseBody) *DeleteCustomTextResponse {
	s.Body = v
	return s
}

type DeleteCustomTopicByTopicRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 话题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s DeleteCustomTopicByTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTopicByTopicRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomTopicByTopicRequest) SetAgentKey(v string) *DeleteCustomTopicByTopicRequest {
	s.AgentKey = &v
	return s
}

func (s *DeleteCustomTopicByTopicRequest) SetTopic(v string) *DeleteCustomTopicByTopicRequest {
	s.Topic = &v
	return s
}

type DeleteCustomTopicByTopicResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 33
	Data *int32 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCustomTopicByTopicResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTopicByTopicResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomTopicByTopicResponseBody) SetCode(v string) *DeleteCustomTopicByTopicResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCustomTopicByTopicResponseBody) SetData(v int32) *DeleteCustomTopicByTopicResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteCustomTopicByTopicResponseBody) SetHttpStatusCode(v int32) *DeleteCustomTopicByTopicResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteCustomTopicByTopicResponseBody) SetMessage(v string) *DeleteCustomTopicByTopicResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCustomTopicByTopicResponseBody) SetRequestId(v string) *DeleteCustomTopicByTopicResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomTopicByTopicResponseBody) SetSuccess(v bool) *DeleteCustomTopicByTopicResponseBody {
	s.Success = &v
	return s
}

type DeleteCustomTopicByTopicResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomTopicByTopicResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomTopicByTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTopicByTopicResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomTopicByTopicResponse) SetHeaders(v map[string]*string) *DeleteCustomTopicByTopicResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomTopicByTopicResponse) SetStatusCode(v int32) *DeleteCustomTopicByTopicResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomTopicByTopicResponse) SetBody(v *DeleteCustomTopicByTopicResponseBody) *DeleteCustomTopicByTopicResponse {
	s.Body = v
	return s
}

type DeleteCustomTopicViewPointByIdRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// dfd73894e6a94fd79fe7ffbe865796fb
	CustomViewPointId *string `json:"CustomViewPointId,omitempty" xml:"CustomViewPointId,omitempty"`
}

func (s DeleteCustomTopicViewPointByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTopicViewPointByIdRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomTopicViewPointByIdRequest) SetAgentKey(v string) *DeleteCustomTopicViewPointByIdRequest {
	s.AgentKey = &v
	return s
}

func (s *DeleteCustomTopicViewPointByIdRequest) SetCustomViewPointId(v string) *DeleteCustomTopicViewPointByIdRequest {
	s.CustomViewPointId = &v
	return s
}

type DeleteCustomTopicViewPointByIdResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 7
	Data *int32 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCustomTopicViewPointByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTopicViewPointByIdResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomTopicViewPointByIdResponseBody) SetCode(v string) *DeleteCustomTopicViewPointByIdResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCustomTopicViewPointByIdResponseBody) SetData(v int32) *DeleteCustomTopicViewPointByIdResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteCustomTopicViewPointByIdResponseBody) SetHttpStatusCode(v int32) *DeleteCustomTopicViewPointByIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteCustomTopicViewPointByIdResponseBody) SetMessage(v string) *DeleteCustomTopicViewPointByIdResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCustomTopicViewPointByIdResponseBody) SetRequestId(v string) *DeleteCustomTopicViewPointByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomTopicViewPointByIdResponseBody) SetSuccess(v bool) *DeleteCustomTopicViewPointByIdResponseBody {
	s.Success = &v
	return s
}

type DeleteCustomTopicViewPointByIdResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomTopicViewPointByIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomTopicViewPointByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTopicViewPointByIdResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomTopicViewPointByIdResponse) SetHeaders(v map[string]*string) *DeleteCustomTopicViewPointByIdResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomTopicViewPointByIdResponse) SetStatusCode(v int32) *DeleteCustomTopicViewPointByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomTopicViewPointByIdResponse) SetBody(v *DeleteCustomTopicViewPointByIdResponseBody) *DeleteCustomTopicViewPointByIdResponse {
	s.Body = v
	return s
}

type DeleteDatasetRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatasetRequest) SetDatasetId(v int64) *DeleteDatasetRequest {
	s.DatasetId = &v
	return s
}

func (s *DeleteDatasetRequest) SetWorkspaceId(v string) *DeleteDatasetRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteDatasetResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatasetResponseBody) SetCode(v string) *DeleteDatasetResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDatasetResponseBody) SetHttpStatusCode(v int32) *DeleteDatasetResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDatasetResponseBody) SetMessage(v string) *DeleteDatasetResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDatasetResponseBody) SetRequestId(v string) *DeleteDatasetResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDatasetResponseBody) SetSuccess(v bool) *DeleteDatasetResponseBody {
	s.Success = &v
	return s
}

type DeleteDatasetResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatasetResponse) SetHeaders(v map[string]*string) *DeleteDatasetResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatasetResponse) SetStatusCode(v int32) *DeleteDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDatasetResponse) SetBody(v *DeleteDatasetResponseBody) *DeleteDatasetResponse {
	s.Body = v
	return s
}

type DeleteDatasetDocumentRequest struct {
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 数据集名称
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// xxx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xxx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteDatasetDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetDocumentRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatasetDocumentRequest) SetDatasetId(v int64) *DeleteDatasetDocumentRequest {
	s.DatasetId = &v
	return s
}

func (s *DeleteDatasetDocumentRequest) SetDatasetName(v string) *DeleteDatasetDocumentRequest {
	s.DatasetName = &v
	return s
}

func (s *DeleteDatasetDocumentRequest) SetDocId(v string) *DeleteDatasetDocumentRequest {
	s.DocId = &v
	return s
}

func (s *DeleteDatasetDocumentRequest) SetDocUuid(v string) *DeleteDatasetDocumentRequest {
	s.DocUuid = &v
	return s
}

func (s *DeleteDatasetDocumentRequest) SetWorkspaceId(v string) *DeleteDatasetDocumentRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteDatasetDocumentResponseBody struct {
	// example:
	//
	// NoData
	Code *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*string `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDatasetDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatasetDocumentResponseBody) SetCode(v string) *DeleteDatasetDocumentResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDatasetDocumentResponseBody) SetData(v []*string) *DeleteDatasetDocumentResponseBody {
	s.Data = v
	return s
}

func (s *DeleteDatasetDocumentResponseBody) SetHttpStatusCode(v int32) *DeleteDatasetDocumentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDatasetDocumentResponseBody) SetMessage(v string) *DeleteDatasetDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDatasetDocumentResponseBody) SetRequestId(v string) *DeleteDatasetDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDatasetDocumentResponseBody) SetSuccess(v bool) *DeleteDatasetDocumentResponseBody {
	s.Success = &v
	return s
}

type DeleteDatasetDocumentResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDatasetDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDatasetDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetDocumentResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatasetDocumentResponse) SetHeaders(v map[string]*string) *DeleteDatasetDocumentResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatasetDocumentResponse) SetStatusCode(v int32) *DeleteDatasetDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDatasetDocumentResponse) SetBody(v *DeleteDatasetDocumentResponseBody) *DeleteDatasetDocumentResponse {
	s.Body = v
	return s
}

type DeleteDocsRequest struct {
	// This parameter is required.
	DocIds []*string `json:"DocIds,omitempty" xml:"DocIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteDocsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocsRequest) GoString() string {
	return s.String()
}

func (s *DeleteDocsRequest) SetDocIds(v []*string) *DeleteDocsRequest {
	s.DocIds = v
	return s
}

func (s *DeleteDocsRequest) SetWorkspaceId(v string) *DeleteDocsRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteDocsShrinkRequest struct {
	// This parameter is required.
	DocIdsShrink *string `json:"DocIds,omitempty" xml:"DocIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteDocsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocsShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteDocsShrinkRequest) SetDocIdsShrink(v string) *DeleteDocsShrinkRequest {
	s.DocIdsShrink = &v
	return s
}

func (s *DeleteDocsShrinkRequest) SetWorkspaceId(v string) *DeleteDocsShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteDocsResponseBody struct {
	// example:
	//
	// successful
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2C565EDD-E624-5FED-8565-0A9CB0C8CC46
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDocsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDocsResponseBody) SetCode(v string) *DeleteDocsResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDocsResponseBody) SetHttpStatusCode(v int32) *DeleteDocsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDocsResponseBody) SetMessage(v string) *DeleteDocsResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDocsResponseBody) SetRequestId(v string) *DeleteDocsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDocsResponseBody) SetSuccess(v bool) *DeleteDocsResponseBody {
	s.Success = &v
	return s
}

type DeleteDocsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDocsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDocsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocsResponse) GoString() string {
	return s.String()
}

func (s *DeleteDocsResponse) SetHeaders(v map[string]*string) *DeleteDocsResponse {
	s.Headers = v
	return s
}

func (s *DeleteDocsResponse) SetStatusCode(v int32) *DeleteDocsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDocsResponse) SetBody(v *DeleteDocsResponseBody) *DeleteDocsResponse {
	s.Body = v
	return s
}

type DeleteGeneratedContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 99
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteGeneratedContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGeneratedContentRequest) GoString() string {
	return s.String()
}

func (s *DeleteGeneratedContentRequest) SetAgentKey(v string) *DeleteGeneratedContentRequest {
	s.AgentKey = &v
	return s
}

func (s *DeleteGeneratedContentRequest) SetId(v int64) *DeleteGeneratedContentRequest {
	s.Id = &v
	return s
}

func (s *DeleteGeneratedContentRequest) SetRegionId(v string) *DeleteGeneratedContentRequest {
	s.RegionId = &v
	return s
}

type DeleteGeneratedContentResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteGeneratedContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGeneratedContentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGeneratedContentResponseBody) SetCode(v string) *DeleteGeneratedContentResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteGeneratedContentResponseBody) SetData(v bool) *DeleteGeneratedContentResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteGeneratedContentResponseBody) SetHttpStatusCode(v int32) *DeleteGeneratedContentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteGeneratedContentResponseBody) SetMessage(v string) *DeleteGeneratedContentResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteGeneratedContentResponseBody) SetRequestId(v string) *DeleteGeneratedContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteGeneratedContentResponseBody) SetSuccess(v bool) *DeleteGeneratedContentResponseBody {
	s.Success = &v
	return s
}

type DeleteGeneratedContentResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteGeneratedContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteGeneratedContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGeneratedContentResponse) GoString() string {
	return s.String()
}

func (s *DeleteGeneratedContentResponse) SetHeaders(v map[string]*string) *DeleteGeneratedContentResponse {
	s.Headers = v
	return s
}

func (s *DeleteGeneratedContentResponse) SetStatusCode(v int32) *DeleteGeneratedContentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGeneratedContentResponse) SetBody(v *DeleteGeneratedContentResponseBody) *DeleteGeneratedContentResponse {
	s.Body = v
	return s
}

type DeleteInterveneRuleRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 12345
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DeleteInterveneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterveneRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteInterveneRuleRequest) SetAgentKey(v string) *DeleteInterveneRuleRequest {
	s.AgentKey = &v
	return s
}

func (s *DeleteInterveneRuleRequest) SetRuleId(v int64) *DeleteInterveneRuleRequest {
	s.RuleId = &v
	return s
}

type DeleteInterveneRuleResponseBody struct {
	// example:
	//
	// 0
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *DeleteInterveneRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 94512A33-8EC1-5452-A793-5C91F18ED2F0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteInterveneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterveneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInterveneRuleResponseBody) SetCode(v string) *DeleteInterveneRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteInterveneRuleResponseBody) SetData(v *DeleteInterveneRuleResponseBodyData) *DeleteInterveneRuleResponseBody {
	s.Data = v
	return s
}

func (s *DeleteInterveneRuleResponseBody) SetHttpStatusCode(v int32) *DeleteInterveneRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteInterveneRuleResponseBody) SetMessage(v string) *DeleteInterveneRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteInterveneRuleResponseBody) SetRequestId(v string) *DeleteInterveneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteInterveneRuleResponseBody) SetSuccess(v bool) *DeleteInterveneRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteInterveneRuleResponseBodyData struct {
	FailIdList []*string `json:"FailIdList,omitempty" xml:"FailIdList,omitempty" type:"Repeated"`
	// example:
	//
	// dt-s50ntwtywb4y
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteInterveneRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterveneRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteInterveneRuleResponseBodyData) SetFailIdList(v []*string) *DeleteInterveneRuleResponseBodyData {
	s.FailIdList = v
	return s
}

func (s *DeleteInterveneRuleResponseBodyData) SetTaskId(v string) *DeleteInterveneRuleResponseBodyData {
	s.TaskId = &v
	return s
}

type DeleteInterveneRuleResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteInterveneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteInterveneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterveneRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteInterveneRuleResponse) SetHeaders(v map[string]*string) *DeleteInterveneRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteInterveneRuleResponse) SetStatusCode(v int32) *DeleteInterveneRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInterveneRuleResponse) SetBody(v *DeleteInterveneRuleResponseBody) *DeleteInterveneRuleResponse {
	s.Body = v
	return s
}

type DeleteMaterialByIdRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteMaterialByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMaterialByIdRequest) GoString() string {
	return s.String()
}

func (s *DeleteMaterialByIdRequest) SetAgentKey(v string) *DeleteMaterialByIdRequest {
	s.AgentKey = &v
	return s
}

func (s *DeleteMaterialByIdRequest) SetId(v int64) *DeleteMaterialByIdRequest {
	s.Id = &v
	return s
}

type DeleteMaterialByIdResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// false
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 数据不存在
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// false
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMaterialByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMaterialByIdResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMaterialByIdResponseBody) SetCode(v string) *DeleteMaterialByIdResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMaterialByIdResponseBody) SetData(v bool) *DeleteMaterialByIdResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteMaterialByIdResponseBody) SetHttpStatusCode(v int32) *DeleteMaterialByIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteMaterialByIdResponseBody) SetMessage(v string) *DeleteMaterialByIdResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMaterialByIdResponseBody) SetRequestId(v string) *DeleteMaterialByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMaterialByIdResponseBody) SetSuccess(v bool) *DeleteMaterialByIdResponseBody {
	s.Success = &v
	return s
}

type DeleteMaterialByIdResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMaterialByIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMaterialByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMaterialByIdResponse) GoString() string {
	return s.String()
}

func (s *DeleteMaterialByIdResponse) SetHeaders(v map[string]*string) *DeleteMaterialByIdResponse {
	s.Headers = v
	return s
}

func (s *DeleteMaterialByIdResponse) SetStatusCode(v int32) *DeleteMaterialByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMaterialByIdResponse) SetBody(v *DeleteMaterialByIdResponseBody) *DeleteMaterialByIdResponse {
	s.Body = v
	return s
}

type DocumentExtractionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	Urls []*string `json:"Urls,omitempty" xml:"Urls,omitempty" type:"Repeated"`
}

func (s DocumentExtractionRequest) String() string {
	return tea.Prettify(s)
}

func (s DocumentExtractionRequest) GoString() string {
	return s.String()
}

func (s *DocumentExtractionRequest) SetAgentKey(v string) *DocumentExtractionRequest {
	s.AgentKey = &v
	return s
}

func (s *DocumentExtractionRequest) SetUrls(v []*string) *DocumentExtractionRequest {
	s.Urls = v
	return s
}

type DocumentExtractionShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	UrlsShrink *string `json:"Urls,omitempty" xml:"Urls,omitempty"`
}

func (s DocumentExtractionShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DocumentExtractionShrinkRequest) GoString() string {
	return s.String()
}

func (s *DocumentExtractionShrinkRequest) SetAgentKey(v string) *DocumentExtractionShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *DocumentExtractionShrinkRequest) SetUrlsShrink(v string) *DocumentExtractionShrinkRequest {
	s.UrlsShrink = &v
	return s
}

type DocumentExtractionResponseBody struct {
	// example:
	//
	// NoData
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*DocumentExtractionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DocumentExtractionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DocumentExtractionResponseBody) GoString() string {
	return s.String()
}

func (s *DocumentExtractionResponseBody) SetCode(v string) *DocumentExtractionResponseBody {
	s.Code = &v
	return s
}

func (s *DocumentExtractionResponseBody) SetData(v []*DocumentExtractionResponseBodyData) *DocumentExtractionResponseBody {
	s.Data = v
	return s
}

func (s *DocumentExtractionResponseBody) SetHttpStatusCode(v int32) *DocumentExtractionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DocumentExtractionResponseBody) SetMessage(v string) *DocumentExtractionResponseBody {
	s.Message = &v
	return s
}

func (s *DocumentExtractionResponseBody) SetRequestId(v string) *DocumentExtractionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DocumentExtractionResponseBody) SetSuccess(v bool) *DocumentExtractionResponseBody {
	s.Success = &v
	return s
}

type DocumentExtractionResponseBodyData struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文档-自定义的唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 8df2d69d63a247b6b52ff455b2d426b6
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2024-05-14 08:54:33
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 央视网
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标签
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DocumentExtractionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DocumentExtractionResponseBodyData) GoString() string {
	return s.String()
}

func (s *DocumentExtractionResponseBodyData) SetAuthor(v string) *DocumentExtractionResponseBodyData {
	s.Author = &v
	return s
}

func (s *DocumentExtractionResponseBodyData) SetContent(v string) *DocumentExtractionResponseBodyData {
	s.Content = &v
	return s
}

func (s *DocumentExtractionResponseBodyData) SetDocId(v string) *DocumentExtractionResponseBodyData {
	s.DocId = &v
	return s
}

func (s *DocumentExtractionResponseBodyData) SetDocUuid(v string) *DocumentExtractionResponseBodyData {
	s.DocUuid = &v
	return s
}

func (s *DocumentExtractionResponseBodyData) SetPubTime(v string) *DocumentExtractionResponseBodyData {
	s.PubTime = &v
	return s
}

func (s *DocumentExtractionResponseBodyData) SetSource(v string) *DocumentExtractionResponseBodyData {
	s.Source = &v
	return s
}

func (s *DocumentExtractionResponseBodyData) SetSummary(v string) *DocumentExtractionResponseBodyData {
	s.Summary = &v
	return s
}

func (s *DocumentExtractionResponseBodyData) SetTag(v string) *DocumentExtractionResponseBodyData {
	s.Tag = &v
	return s
}

func (s *DocumentExtractionResponseBodyData) SetTitle(v string) *DocumentExtractionResponseBodyData {
	s.Title = &v
	return s
}

func (s *DocumentExtractionResponseBodyData) SetUrl(v string) *DocumentExtractionResponseBodyData {
	s.Url = &v
	return s
}

type DocumentExtractionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DocumentExtractionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DocumentExtractionResponse) String() string {
	return tea.Prettify(s)
}

func (s DocumentExtractionResponse) GoString() string {
	return s.String()
}

func (s *DocumentExtractionResponse) SetHeaders(v map[string]*string) *DocumentExtractionResponse {
	s.Headers = v
	return s
}

func (s *DocumentExtractionResponse) SetStatusCode(v int32) *DocumentExtractionResponse {
	s.StatusCode = &v
	return s
}

func (s *DocumentExtractionResponse) SetBody(v *DocumentExtractionResponseBody) *DocumentExtractionResponse {
	s.Body = v
	return s
}

type ExportAnalysisTagDetailByTaskIdRequest struct {
	Categories []*string `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ExportAnalysisTagDetailByTaskIdRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportAnalysisTagDetailByTaskIdRequest) GoString() string {
	return s.String()
}

func (s *ExportAnalysisTagDetailByTaskIdRequest) SetCategories(v []*string) *ExportAnalysisTagDetailByTaskIdRequest {
	s.Categories = v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdRequest) SetTaskId(v string) *ExportAnalysisTagDetailByTaskIdRequest {
	s.TaskId = &v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdRequest) SetWorkspaceId(v string) *ExportAnalysisTagDetailByTaskIdRequest {
	s.WorkspaceId = &v
	return s
}

type ExportAnalysisTagDetailByTaskIdShrinkRequest struct {
	CategoriesShrink *string `json:"Categories,omitempty" xml:"Categories,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ExportAnalysisTagDetailByTaskIdShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportAnalysisTagDetailByTaskIdShrinkRequest) GoString() string {
	return s.String()
}

func (s *ExportAnalysisTagDetailByTaskIdShrinkRequest) SetCategoriesShrink(v string) *ExportAnalysisTagDetailByTaskIdShrinkRequest {
	s.CategoriesShrink = &v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdShrinkRequest) SetTaskId(v string) *ExportAnalysisTagDetailByTaskIdShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdShrinkRequest) SetWorkspaceId(v string) *ExportAnalysisTagDetailByTaskIdShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type ExportAnalysisTagDetailByTaskIdResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// http://www.example.com/xxx.xlsx
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportAnalysisTagDetailByTaskIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportAnalysisTagDetailByTaskIdResponseBody) GoString() string {
	return s.String()
}

func (s *ExportAnalysisTagDetailByTaskIdResponseBody) SetCode(v string) *ExportAnalysisTagDetailByTaskIdResponseBody {
	s.Code = &v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdResponseBody) SetData(v string) *ExportAnalysisTagDetailByTaskIdResponseBody {
	s.Data = &v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdResponseBody) SetHttpStatusCode(v int32) *ExportAnalysisTagDetailByTaskIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdResponseBody) SetMessage(v string) *ExportAnalysisTagDetailByTaskIdResponseBody {
	s.Message = &v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdResponseBody) SetRequestId(v string) *ExportAnalysisTagDetailByTaskIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdResponseBody) SetSuccess(v bool) *ExportAnalysisTagDetailByTaskIdResponseBody {
	s.Success = &v
	return s
}

type ExportAnalysisTagDetailByTaskIdResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportAnalysisTagDetailByTaskIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportAnalysisTagDetailByTaskIdResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportAnalysisTagDetailByTaskIdResponse) GoString() string {
	return s.String()
}

func (s *ExportAnalysisTagDetailByTaskIdResponse) SetHeaders(v map[string]*string) *ExportAnalysisTagDetailByTaskIdResponse {
	s.Headers = v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdResponse) SetStatusCode(v int32) *ExportAnalysisTagDetailByTaskIdResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportAnalysisTagDetailByTaskIdResponse) SetBody(v *ExportAnalysisTagDetailByTaskIdResponseBody) *ExportAnalysisTagDetailByTaskIdResponse {
	s.Body = v
	return s
}

type ExportGeneratedContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ExportGeneratedContentRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportGeneratedContentRequest) GoString() string {
	return s.String()
}

func (s *ExportGeneratedContentRequest) SetAgentKey(v string) *ExportGeneratedContentRequest {
	s.AgentKey = &v
	return s
}

func (s *ExportGeneratedContentRequest) SetId(v int64) *ExportGeneratedContentRequest {
	s.Id = &v
	return s
}

type ExportGeneratedContentResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// xxx
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportGeneratedContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportGeneratedContentResponseBody) GoString() string {
	return s.String()
}

func (s *ExportGeneratedContentResponseBody) SetCode(v string) *ExportGeneratedContentResponseBody {
	s.Code = &v
	return s
}

func (s *ExportGeneratedContentResponseBody) SetData(v string) *ExportGeneratedContentResponseBody {
	s.Data = &v
	return s
}

func (s *ExportGeneratedContentResponseBody) SetHttpStatusCode(v int32) *ExportGeneratedContentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ExportGeneratedContentResponseBody) SetMessage(v string) *ExportGeneratedContentResponseBody {
	s.Message = &v
	return s
}

func (s *ExportGeneratedContentResponseBody) SetRequestId(v string) *ExportGeneratedContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportGeneratedContentResponseBody) SetSuccess(v bool) *ExportGeneratedContentResponseBody {
	s.Success = &v
	return s
}

type ExportGeneratedContentResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportGeneratedContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportGeneratedContentResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportGeneratedContentResponse) GoString() string {
	return s.String()
}

func (s *ExportGeneratedContentResponse) SetHeaders(v map[string]*string) *ExportGeneratedContentResponse {
	s.Headers = v
	return s
}

func (s *ExportGeneratedContentResponse) SetStatusCode(v int32) *ExportGeneratedContentResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportGeneratedContentResponse) SetBody(v *ExportGeneratedContentResponseBody) *ExportGeneratedContentResponse {
	s.Body = v
	return s
}

type ExportHotTopicPlanningProposalsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 025c6cee437741368098b790c90166f8
	CustomViewPointIds []*string `json:"CustomViewPointIds,omitempty" xml:"CustomViewPointIds,omitempty" type:"Repeated"`
	// example:
	//
	// 导出文档类型，word:导出为word,xmind:导处为xmind
	ExportType *string   `json:"ExportType,omitempty" xml:"ExportType,omitempty"`
	Titles     []*string `json:"Titles,omitempty" xml:"Titles,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜源
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
	// example:
	//
	// 选题策划类型：CustomViewPoints:自定义视角，HotViewPoints:热门视角、TimedViewPoints:时效性视角、WebReviewPoints:网友视角、FreshViewPoints:新颖视角
	ViewPointType *string `json:"ViewPointType,omitempty" xml:"ViewPointType,omitempty"`
}

func (s ExportHotTopicPlanningProposalsRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportHotTopicPlanningProposalsRequest) GoString() string {
	return s.String()
}

func (s *ExportHotTopicPlanningProposalsRequest) SetAgentKey(v string) *ExportHotTopicPlanningProposalsRequest {
	s.AgentKey = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsRequest) SetCustomViewPointIds(v []*string) *ExportHotTopicPlanningProposalsRequest {
	s.CustomViewPointIds = v
	return s
}

func (s *ExportHotTopicPlanningProposalsRequest) SetExportType(v string) *ExportHotTopicPlanningProposalsRequest {
	s.ExportType = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsRequest) SetTitles(v []*string) *ExportHotTopicPlanningProposalsRequest {
	s.Titles = v
	return s
}

func (s *ExportHotTopicPlanningProposalsRequest) SetTopic(v string) *ExportHotTopicPlanningProposalsRequest {
	s.Topic = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsRequest) SetTopicSource(v string) *ExportHotTopicPlanningProposalsRequest {
	s.TopicSource = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsRequest) SetViewPointType(v string) *ExportHotTopicPlanningProposalsRequest {
	s.ViewPointType = &v
	return s
}

type ExportHotTopicPlanningProposalsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 025c6cee437741368098b790c90166f8
	CustomViewPointIdsShrink *string `json:"CustomViewPointIds,omitempty" xml:"CustomViewPointIds,omitempty"`
	// example:
	//
	// 导出文档类型，word:导出为word,xmind:导处为xmind
	ExportType   *string `json:"ExportType,omitempty" xml:"ExportType,omitempty"`
	TitlesShrink *string `json:"Titles,omitempty" xml:"Titles,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜源
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
	// example:
	//
	// 选题策划类型：CustomViewPoints:自定义视角，HotViewPoints:热门视角、TimedViewPoints:时效性视角、WebReviewPoints:网友视角、FreshViewPoints:新颖视角
	ViewPointType *string `json:"ViewPointType,omitempty" xml:"ViewPointType,omitempty"`
}

func (s ExportHotTopicPlanningProposalsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportHotTopicPlanningProposalsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ExportHotTopicPlanningProposalsShrinkRequest) SetAgentKey(v string) *ExportHotTopicPlanningProposalsShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsShrinkRequest) SetCustomViewPointIdsShrink(v string) *ExportHotTopicPlanningProposalsShrinkRequest {
	s.CustomViewPointIdsShrink = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsShrinkRequest) SetExportType(v string) *ExportHotTopicPlanningProposalsShrinkRequest {
	s.ExportType = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsShrinkRequest) SetTitlesShrink(v string) *ExportHotTopicPlanningProposalsShrinkRequest {
	s.TitlesShrink = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsShrinkRequest) SetTopic(v string) *ExportHotTopicPlanningProposalsShrinkRequest {
	s.Topic = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsShrinkRequest) SetTopicSource(v string) *ExportHotTopicPlanningProposalsShrinkRequest {
	s.TopicSource = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsShrinkRequest) SetViewPointType(v string) *ExportHotTopicPlanningProposalsShrinkRequest {
	s.ViewPointType = &v
	return s
}

type ExportHotTopicPlanningProposalsResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 业务数据
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportHotTopicPlanningProposalsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportHotTopicPlanningProposalsResponseBody) GoString() string {
	return s.String()
}

func (s *ExportHotTopicPlanningProposalsResponseBody) SetCode(v string) *ExportHotTopicPlanningProposalsResponseBody {
	s.Code = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsResponseBody) SetData(v string) *ExportHotTopicPlanningProposalsResponseBody {
	s.Data = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsResponseBody) SetHttpStatusCode(v int32) *ExportHotTopicPlanningProposalsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsResponseBody) SetMessage(v string) *ExportHotTopicPlanningProposalsResponseBody {
	s.Message = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsResponseBody) SetRequestId(v string) *ExportHotTopicPlanningProposalsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsResponseBody) SetSuccess(v bool) *ExportHotTopicPlanningProposalsResponseBody {
	s.Success = &v
	return s
}

type ExportHotTopicPlanningProposalsResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportHotTopicPlanningProposalsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportHotTopicPlanningProposalsResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportHotTopicPlanningProposalsResponse) GoString() string {
	return s.String()
}

func (s *ExportHotTopicPlanningProposalsResponse) SetHeaders(v map[string]*string) *ExportHotTopicPlanningProposalsResponse {
	s.Headers = v
	return s
}

func (s *ExportHotTopicPlanningProposalsResponse) SetStatusCode(v int32) *ExportHotTopicPlanningProposalsResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportHotTopicPlanningProposalsResponse) SetBody(v *ExportHotTopicPlanningProposalsResponseBody) *ExportHotTopicPlanningProposalsResponse {
	s.Body = v
	return s
}

type ExportIntervenesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// fed6555ec9e24b92aeecc34be484b887_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
}

func (s ExportIntervenesRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportIntervenesRequest) GoString() string {
	return s.String()
}

func (s *ExportIntervenesRequest) SetAgentKey(v string) *ExportIntervenesRequest {
	s.AgentKey = &v
	return s
}

type ExportIntervenesResponseBody struct {
	// example:
	//
	// 0
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ExportIntervenesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportIntervenesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportIntervenesResponseBody) GoString() string {
	return s.String()
}

func (s *ExportIntervenesResponseBody) SetCode(v string) *ExportIntervenesResponseBody {
	s.Code = &v
	return s
}

func (s *ExportIntervenesResponseBody) SetData(v *ExportIntervenesResponseBodyData) *ExportIntervenesResponseBody {
	s.Data = v
	return s
}

func (s *ExportIntervenesResponseBody) SetHttpStatusCode(v int32) *ExportIntervenesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ExportIntervenesResponseBody) SetMessage(v string) *ExportIntervenesResponseBody {
	s.Message = &v
	return s
}

func (s *ExportIntervenesResponseBody) SetRequestId(v string) *ExportIntervenesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportIntervenesResponseBody) SetSuccess(v bool) *ExportIntervenesResponseBody {
	s.Success = &v
	return s
}

type ExportIntervenesResponseBodyData struct {
	// example:
	//
	// http://xxx/xxx.xls
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s ExportIntervenesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ExportIntervenesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ExportIntervenesResponseBodyData) SetFileUrl(v string) *ExportIntervenesResponseBodyData {
	s.FileUrl = &v
	return s
}

type ExportIntervenesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportIntervenesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportIntervenesResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportIntervenesResponse) GoString() string {
	return s.String()
}

func (s *ExportIntervenesResponse) SetHeaders(v map[string]*string) *ExportIntervenesResponse {
	s.Headers = v
	return s
}

func (s *ExportIntervenesResponse) SetStatusCode(v int32) *ExportIntervenesResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportIntervenesResponse) SetBody(v *ExportIntervenesResponseBody) *ExportIntervenesResponse {
	s.Body = v
	return s
}

type FeedbackDialogueRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// test
	CustomerResponse *string `json:"CustomerResponse,omitempty" xml:"CustomerResponse,omitempty"`
	// example:
	//
	// test
	GoodText *string `json:"GoodText,omitempty" xml:"GoodText,omitempty"`
	// example:
	//
	// test
	ModifiedResponse *string `json:"ModifiedResponse,omitempty" xml:"ModifiedResponse,omitempty"`
	// example:
	//
	// thumbsDown
	Rating     *string   `json:"Rating,omitempty" xml:"Rating,omitempty"`
	RatingTags []*string `json:"RatingTags,omitempty" xml:"RatingTags,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 75bf82fa-b71b-45d7-ae40-0b00e496cd9e
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s FeedbackDialogueRequest) String() string {
	return tea.Prettify(s)
}

func (s FeedbackDialogueRequest) GoString() string {
	return s.String()
}

func (s *FeedbackDialogueRequest) SetAgentKey(v string) *FeedbackDialogueRequest {
	s.AgentKey = &v
	return s
}

func (s *FeedbackDialogueRequest) SetCustomerResponse(v string) *FeedbackDialogueRequest {
	s.CustomerResponse = &v
	return s
}

func (s *FeedbackDialogueRequest) SetGoodText(v string) *FeedbackDialogueRequest {
	s.GoodText = &v
	return s
}

func (s *FeedbackDialogueRequest) SetModifiedResponse(v string) *FeedbackDialogueRequest {
	s.ModifiedResponse = &v
	return s
}

func (s *FeedbackDialogueRequest) SetRating(v string) *FeedbackDialogueRequest {
	s.Rating = &v
	return s
}

func (s *FeedbackDialogueRequest) SetRatingTags(v []*string) *FeedbackDialogueRequest {
	s.RatingTags = v
	return s
}

func (s *FeedbackDialogueRequest) SetSessionId(v string) *FeedbackDialogueRequest {
	s.SessionId = &v
	return s
}

func (s *FeedbackDialogueRequest) SetTaskId(v string) *FeedbackDialogueRequest {
	s.TaskId = &v
	return s
}

type FeedbackDialogueShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// test
	CustomerResponse *string `json:"CustomerResponse,omitempty" xml:"CustomerResponse,omitempty"`
	// example:
	//
	// test
	GoodText *string `json:"GoodText,omitempty" xml:"GoodText,omitempty"`
	// example:
	//
	// test
	ModifiedResponse *string `json:"ModifiedResponse,omitempty" xml:"ModifiedResponse,omitempty"`
	// example:
	//
	// thumbsDown
	Rating           *string `json:"Rating,omitempty" xml:"Rating,omitempty"`
	RatingTagsShrink *string `json:"RatingTags,omitempty" xml:"RatingTags,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 75bf82fa-b71b-45d7-ae40-0b00e496cd9e
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s FeedbackDialogueShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s FeedbackDialogueShrinkRequest) GoString() string {
	return s.String()
}

func (s *FeedbackDialogueShrinkRequest) SetAgentKey(v string) *FeedbackDialogueShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *FeedbackDialogueShrinkRequest) SetCustomerResponse(v string) *FeedbackDialogueShrinkRequest {
	s.CustomerResponse = &v
	return s
}

func (s *FeedbackDialogueShrinkRequest) SetGoodText(v string) *FeedbackDialogueShrinkRequest {
	s.GoodText = &v
	return s
}

func (s *FeedbackDialogueShrinkRequest) SetModifiedResponse(v string) *FeedbackDialogueShrinkRequest {
	s.ModifiedResponse = &v
	return s
}

func (s *FeedbackDialogueShrinkRequest) SetRating(v string) *FeedbackDialogueShrinkRequest {
	s.Rating = &v
	return s
}

func (s *FeedbackDialogueShrinkRequest) SetRatingTagsShrink(v string) *FeedbackDialogueShrinkRequest {
	s.RatingTagsShrink = &v
	return s
}

func (s *FeedbackDialogueShrinkRequest) SetSessionId(v string) *FeedbackDialogueShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *FeedbackDialogueShrinkRequest) SetTaskId(v string) *FeedbackDialogueShrinkRequest {
	s.TaskId = &v
	return s
}

type FeedbackDialogueResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 数据不存在
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// false
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s FeedbackDialogueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FeedbackDialogueResponseBody) GoString() string {
	return s.String()
}

func (s *FeedbackDialogueResponseBody) SetCode(v string) *FeedbackDialogueResponseBody {
	s.Code = &v
	return s
}

func (s *FeedbackDialogueResponseBody) SetHttpStatusCode(v int32) *FeedbackDialogueResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *FeedbackDialogueResponseBody) SetMessage(v string) *FeedbackDialogueResponseBody {
	s.Message = &v
	return s
}

func (s *FeedbackDialogueResponseBody) SetRequestId(v string) *FeedbackDialogueResponseBody {
	s.RequestId = &v
	return s
}

func (s *FeedbackDialogueResponseBody) SetSuccess(v bool) *FeedbackDialogueResponseBody {
	s.Success = &v
	return s
}

type FeedbackDialogueResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *FeedbackDialogueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s FeedbackDialogueResponse) String() string {
	return tea.Prettify(s)
}

func (s FeedbackDialogueResponse) GoString() string {
	return s.String()
}

func (s *FeedbackDialogueResponse) SetHeaders(v map[string]*string) *FeedbackDialogueResponse {
	s.Headers = v
	return s
}

func (s *FeedbackDialogueResponse) SetStatusCode(v int32) *FeedbackDialogueResponse {
	s.StatusCode = &v
	return s
}

func (s *FeedbackDialogueResponse) SetBody(v *FeedbackDialogueResponseBody) *FeedbackDialogueResponse {
	s.Body = v
	return s
}

type FetchImageTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e1be065b-adc3-435e-bd01-1c18c5ed75d3
	ArticleTaskId *string `json:"ArticleTaskId,omitempty" xml:"ArticleTaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["9d8c9185-3f75-4a20-aca1-c5bb53dd97b3"]
	TaskIdList []*string `json:"TaskIdList,omitempty" xml:"TaskIdList,omitempty" type:"Repeated"`
}

func (s FetchImageTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s FetchImageTaskRequest) GoString() string {
	return s.String()
}

func (s *FetchImageTaskRequest) SetAgentKey(v string) *FetchImageTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *FetchImageTaskRequest) SetArticleTaskId(v string) *FetchImageTaskRequest {
	s.ArticleTaskId = &v
	return s
}

func (s *FetchImageTaskRequest) SetTaskIdList(v []*string) *FetchImageTaskRequest {
	s.TaskIdList = v
	return s
}

type FetchImageTaskShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e1be065b-adc3-435e-bd01-1c18c5ed75d3
	ArticleTaskId *string `json:"ArticleTaskId,omitempty" xml:"ArticleTaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["9d8c9185-3f75-4a20-aca1-c5bb53dd97b3"]
	TaskIdListShrink *string `json:"TaskIdList,omitempty" xml:"TaskIdList,omitempty"`
}

func (s FetchImageTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s FetchImageTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *FetchImageTaskShrinkRequest) SetAgentKey(v string) *FetchImageTaskShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *FetchImageTaskShrinkRequest) SetArticleTaskId(v string) *FetchImageTaskShrinkRequest {
	s.ArticleTaskId = &v
	return s
}

func (s *FetchImageTaskShrinkRequest) SetTaskIdListShrink(v string) *FetchImageTaskShrinkRequest {
	s.TaskIdListShrink = &v
	return s
}

type FetchImageTaskResponseBody struct {
	// example:
	//
	// 200
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *FetchImageTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// DD656AF9-0839-521A-A3D2-F320009F9C87
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s FetchImageTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FetchImageTaskResponseBody) GoString() string {
	return s.String()
}

func (s *FetchImageTaskResponseBody) SetCode(v string) *FetchImageTaskResponseBody {
	s.Code = &v
	return s
}

func (s *FetchImageTaskResponseBody) SetData(v *FetchImageTaskResponseBodyData) *FetchImageTaskResponseBody {
	s.Data = v
	return s
}

func (s *FetchImageTaskResponseBody) SetHttpStatusCode(v int32) *FetchImageTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *FetchImageTaskResponseBody) SetMessage(v string) *FetchImageTaskResponseBody {
	s.Message = &v
	return s
}

func (s *FetchImageTaskResponseBody) SetRequestId(v string) *FetchImageTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *FetchImageTaskResponseBody) SetSuccess(v bool) *FetchImageTaskResponseBody {
	s.Success = &v
	return s
}

type FetchImageTaskResponseBodyData struct {
	TaskInfoList []*FetchImageTaskResponseBodyDataTaskInfoList `json:"TaskInfoList,omitempty" xml:"TaskInfoList,omitempty" type:"Repeated"`
}

func (s FetchImageTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s FetchImageTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *FetchImageTaskResponseBodyData) SetTaskInfoList(v []*FetchImageTaskResponseBodyDataTaskInfoList) *FetchImageTaskResponseBodyData {
	s.TaskInfoList = v
	return s
}

type FetchImageTaskResponseBodyDataTaskInfoList struct {
	// example:
	//
	// 1
	Id        *int64                                                 `json:"Id,omitempty" xml:"Id,omitempty"`
	ImageList []*FetchImageTaskResponseBodyDataTaskInfoListImageList `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	// example:
	//
	// net-7eb32699000d4193a3c59fc64ae1e55f
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// SUCCESSED
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
}

func (s FetchImageTaskResponseBodyDataTaskInfoList) String() string {
	return tea.Prettify(s)
}

func (s FetchImageTaskResponseBodyDataTaskInfoList) GoString() string {
	return s.String()
}

func (s *FetchImageTaskResponseBodyDataTaskInfoList) SetId(v int64) *FetchImageTaskResponseBodyDataTaskInfoList {
	s.Id = &v
	return s
}

func (s *FetchImageTaskResponseBodyDataTaskInfoList) SetImageList(v []*FetchImageTaskResponseBodyDataTaskInfoListImageList) *FetchImageTaskResponseBodyDataTaskInfoList {
	s.ImageList = v
	return s
}

func (s *FetchImageTaskResponseBodyDataTaskInfoList) SetTaskId(v string) *FetchImageTaskResponseBodyDataTaskInfoList {
	s.TaskId = &v
	return s
}

func (s *FetchImageTaskResponseBodyDataTaskInfoList) SetTaskStatus(v string) *FetchImageTaskResponseBodyDataTaskInfoList {
	s.TaskStatus = &v
	return s
}

type FetchImageTaskResponseBodyDataTaskInfoListImageList struct {
	// example:
	//
	// NoData
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// http://www.example.com/xxx.png
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s FetchImageTaskResponseBodyDataTaskInfoListImageList) String() string {
	return tea.Prettify(s)
}

func (s FetchImageTaskResponseBodyDataTaskInfoListImageList) GoString() string {
	return s.String()
}

func (s *FetchImageTaskResponseBodyDataTaskInfoListImageList) SetCode(v string) *FetchImageTaskResponseBodyDataTaskInfoListImageList {
	s.Code = &v
	return s
}

func (s *FetchImageTaskResponseBodyDataTaskInfoListImageList) SetMessage(v string) *FetchImageTaskResponseBodyDataTaskInfoListImageList {
	s.Message = &v
	return s
}

func (s *FetchImageTaskResponseBodyDataTaskInfoListImageList) SetUrl(v string) *FetchImageTaskResponseBodyDataTaskInfoListImageList {
	s.Url = &v
	return s
}

type FetchImageTaskResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *FetchImageTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s FetchImageTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s FetchImageTaskResponse) GoString() string {
	return s.String()
}

func (s *FetchImageTaskResponse) SetHeaders(v map[string]*string) *FetchImageTaskResponse {
	s.Headers = v
	return s
}

func (s *FetchImageTaskResponse) SetStatusCode(v int32) *FetchImageTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *FetchImageTaskResponse) SetBody(v *FetchImageTaskResponseBody) *FetchImageTaskResponse {
	s.Body = v
	return s
}

type GenerateFileUrlByKeyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// oss://default/oss-bucket-name/aimiaobi/2021/07/01/1625126400000/1.docx
	FileKey  *string `json:"FileKey,omitempty" xml:"FileKey,omitempty"`
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
}

func (s GenerateFileUrlByKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUrlByKeyRequest) GoString() string {
	return s.String()
}

func (s *GenerateFileUrlByKeyRequest) SetAgentKey(v string) *GenerateFileUrlByKeyRequest {
	s.AgentKey = &v
	return s
}

func (s *GenerateFileUrlByKeyRequest) SetFileKey(v string) *GenerateFileUrlByKeyRequest {
	s.FileKey = &v
	return s
}

func (s *GenerateFileUrlByKeyRequest) SetFileName(v string) *GenerateFileUrlByKeyRequest {
	s.FileName = &v
	return s
}

type GenerateFileUrlByKeyResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// https://www.example.com/a.txt
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GenerateFileUrlByKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUrlByKeyResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateFileUrlByKeyResponseBody) SetCode(v string) *GenerateFileUrlByKeyResponseBody {
	s.Code = &v
	return s
}

func (s *GenerateFileUrlByKeyResponseBody) SetData(v string) *GenerateFileUrlByKeyResponseBody {
	s.Data = &v
	return s
}

func (s *GenerateFileUrlByKeyResponseBody) SetHttpStatusCode(v int32) *GenerateFileUrlByKeyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GenerateFileUrlByKeyResponseBody) SetMessage(v string) *GenerateFileUrlByKeyResponseBody {
	s.Message = &v
	return s
}

func (s *GenerateFileUrlByKeyResponseBody) SetRequestId(v string) *GenerateFileUrlByKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateFileUrlByKeyResponseBody) SetSuccess(v bool) *GenerateFileUrlByKeyResponseBody {
	s.Success = &v
	return s
}

type GenerateFileUrlByKeyResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GenerateFileUrlByKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GenerateFileUrlByKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUrlByKeyResponse) GoString() string {
	return s.String()
}

func (s *GenerateFileUrlByKeyResponse) SetHeaders(v map[string]*string) *GenerateFileUrlByKeyResponse {
	s.Headers = v
	return s
}

func (s *GenerateFileUrlByKeyResponse) SetStatusCode(v int32) *GenerateFileUrlByKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateFileUrlByKeyResponse) SetBody(v *GenerateFileUrlByKeyResponseBody) *GenerateFileUrlByKeyResponse {
	s.Body = v
	return s
}

type GenerateImageTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// e1be065b-adc3-435e-bd01-1c18c5ed75d3
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e1be065b-adc3-435e-bd01-1c18c5ed75d3
	ArticleTaskId *string `json:"ArticleTaskId,omitempty" xml:"ArticleTaskId,omitempty"`
	// This parameter is required.
	ParagraphList []*GenerateImageTaskRequestParagraphList `json:"ParagraphList,omitempty" xml:"ParagraphList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 1024*1024
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// <auto>
	Style *string `json:"Style,omitempty" xml:"Style,omitempty"`
}

func (s GenerateImageTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateImageTaskRequest) GoString() string {
	return s.String()
}

func (s *GenerateImageTaskRequest) SetAgentKey(v string) *GenerateImageTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *GenerateImageTaskRequest) SetArticleTaskId(v string) *GenerateImageTaskRequest {
	s.ArticleTaskId = &v
	return s
}

func (s *GenerateImageTaskRequest) SetParagraphList(v []*GenerateImageTaskRequestParagraphList) *GenerateImageTaskRequest {
	s.ParagraphList = v
	return s
}

func (s *GenerateImageTaskRequest) SetSize(v string) *GenerateImageTaskRequest {
	s.Size = &v
	return s
}

func (s *GenerateImageTaskRequest) SetStyle(v string) *GenerateImageTaskRequest {
	s.Style = &v
	return s
}

type GenerateImageTaskRequestParagraphList struct {
	// This parameter is required.
	//
	// example:
	//
	// 一直忧伤的猫
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// e1be065b-adc3-435e-bd01-1c18c5ed75d3
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// SUCCESSED
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
}

func (s GenerateImageTaskRequestParagraphList) String() string {
	return tea.Prettify(s)
}

func (s GenerateImageTaskRequestParagraphList) GoString() string {
	return s.String()
}

func (s *GenerateImageTaskRequestParagraphList) SetContent(v string) *GenerateImageTaskRequestParagraphList {
	s.Content = &v
	return s
}

func (s *GenerateImageTaskRequestParagraphList) SetId(v int64) *GenerateImageTaskRequestParagraphList {
	s.Id = &v
	return s
}

func (s *GenerateImageTaskRequestParagraphList) SetTaskId(v string) *GenerateImageTaskRequestParagraphList {
	s.TaskId = &v
	return s
}

func (s *GenerateImageTaskRequestParagraphList) SetTaskStatus(v string) *GenerateImageTaskRequestParagraphList {
	s.TaskStatus = &v
	return s
}

type GenerateImageTaskShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// e1be065b-adc3-435e-bd01-1c18c5ed75d3
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e1be065b-adc3-435e-bd01-1c18c5ed75d3
	ArticleTaskId *string `json:"ArticleTaskId,omitempty" xml:"ArticleTaskId,omitempty"`
	// This parameter is required.
	ParagraphListShrink *string `json:"ParagraphList,omitempty" xml:"ParagraphList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1024*1024
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// <auto>
	Style *string `json:"Style,omitempty" xml:"Style,omitempty"`
}

func (s GenerateImageTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateImageTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *GenerateImageTaskShrinkRequest) SetAgentKey(v string) *GenerateImageTaskShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *GenerateImageTaskShrinkRequest) SetArticleTaskId(v string) *GenerateImageTaskShrinkRequest {
	s.ArticleTaskId = &v
	return s
}

func (s *GenerateImageTaskShrinkRequest) SetParagraphListShrink(v string) *GenerateImageTaskShrinkRequest {
	s.ParagraphListShrink = &v
	return s
}

func (s *GenerateImageTaskShrinkRequest) SetSize(v string) *GenerateImageTaskShrinkRequest {
	s.Size = &v
	return s
}

func (s *GenerateImageTaskShrinkRequest) SetStyle(v string) *GenerateImageTaskShrinkRequest {
	s.Style = &v
	return s
}

type GenerateImageTaskResponseBody struct {
	// example:
	//
	// successful
	Code *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GenerateImageTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// F2F366D6-E9FE-1006-BB70-2C650896AAB5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GenerateImageTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateImageTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateImageTaskResponseBody) SetCode(v string) *GenerateImageTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GenerateImageTaskResponseBody) SetData(v *GenerateImageTaskResponseBodyData) *GenerateImageTaskResponseBody {
	s.Data = v
	return s
}

func (s *GenerateImageTaskResponseBody) SetHttpStatusCode(v int32) *GenerateImageTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GenerateImageTaskResponseBody) SetMessage(v string) *GenerateImageTaskResponseBody {
	s.Message = &v
	return s
}

func (s *GenerateImageTaskResponseBody) SetRequestId(v string) *GenerateImageTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateImageTaskResponseBody) SetSuccess(v bool) *GenerateImageTaskResponseBody {
	s.Success = &v
	return s
}

type GenerateImageTaskResponseBodyData struct {
	TaskList []*GenerateImageTaskResponseBodyDataTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Repeated"`
}

func (s GenerateImageTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GenerateImageTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GenerateImageTaskResponseBodyData) SetTaskList(v []*GenerateImageTaskResponseBodyDataTaskList) *GenerateImageTaskResponseBodyData {
	s.TaskList = v
	return s
}

type GenerateImageTaskResponseBodyDataTaskList struct {
	// example:
	//
	// 一直忧伤的猫
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// e1be065b-adc3-435e-bd01-1c18c5ed75d3
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// SUCCESSED
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
}

func (s GenerateImageTaskResponseBodyDataTaskList) String() string {
	return tea.Prettify(s)
}

func (s GenerateImageTaskResponseBodyDataTaskList) GoString() string {
	return s.String()
}

func (s *GenerateImageTaskResponseBodyDataTaskList) SetContent(v string) *GenerateImageTaskResponseBodyDataTaskList {
	s.Content = &v
	return s
}

func (s *GenerateImageTaskResponseBodyDataTaskList) SetId(v int64) *GenerateImageTaskResponseBodyDataTaskList {
	s.Id = &v
	return s
}

func (s *GenerateImageTaskResponseBodyDataTaskList) SetTaskId(v string) *GenerateImageTaskResponseBodyDataTaskList {
	s.TaskId = &v
	return s
}

func (s *GenerateImageTaskResponseBodyDataTaskList) SetTaskStatus(v string) *GenerateImageTaskResponseBodyDataTaskList {
	s.TaskStatus = &v
	return s
}

type GenerateImageTaskResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GenerateImageTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GenerateImageTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateImageTaskResponse) GoString() string {
	return s.String()
}

func (s *GenerateImageTaskResponse) SetHeaders(v map[string]*string) *GenerateImageTaskResponse {
	s.Headers = v
	return s
}

func (s *GenerateImageTaskResponse) SetStatusCode(v int32) *GenerateImageTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateImageTaskResponse) SetBody(v *GenerateImageTaskResponseBody) *GenerateImageTaskResponse {
	s.Body = v
	return s
}

type GenerateUploadConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// test.docx
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// datasetUpload
	ParentDir *string `json:"ParentDir,omitempty" xml:"ParentDir,omitempty"`
}

func (s GenerateUploadConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadConfigRequest) GoString() string {
	return s.String()
}

func (s *GenerateUploadConfigRequest) SetAgentKey(v string) *GenerateUploadConfigRequest {
	s.AgentKey = &v
	return s
}

func (s *GenerateUploadConfigRequest) SetFileName(v string) *GenerateUploadConfigRequest {
	s.FileName = &v
	return s
}

func (s *GenerateUploadConfigRequest) SetParentDir(v string) *GenerateUploadConfigRequest {
	s.ParentDir = &v
	return s
}

type GenerateUploadConfigResponseBody struct {
	// example:
	//
	// NoData
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GenerateUploadConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GenerateUploadConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateUploadConfigResponseBody) SetCode(v string) *GenerateUploadConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GenerateUploadConfigResponseBody) SetData(v *GenerateUploadConfigResponseBodyData) *GenerateUploadConfigResponseBody {
	s.Data = v
	return s
}

func (s *GenerateUploadConfigResponseBody) SetHttpStatusCode(v int32) *GenerateUploadConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GenerateUploadConfigResponseBody) SetMessage(v string) *GenerateUploadConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GenerateUploadConfigResponseBody) SetRequestId(v string) *GenerateUploadConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateUploadConfigResponseBody) SetSuccess(v bool) *GenerateUploadConfigResponseBody {
	s.Success = &v
	return s
}

type GenerateUploadConfigResponseBodyData struct {
	// example:
	//
	// oss://default/oss-bucket-name/aimiaobi/2021/07/01/1625126400000/1.docx
	FileKey   *string                `json:"FileKey,omitempty" xml:"FileKey,omitempty"`
	FormDatas map[string]interface{} `json:"FormDatas,omitempty" xml:"FormDatas,omitempty"`
	// example:
	//
	// https://bucket-name.oss-cn-hangzhou.aliyuncs.com
	PostUrl *string `json:"PostUrl,omitempty" xml:"PostUrl,omitempty"`
}

func (s GenerateUploadConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *GenerateUploadConfigResponseBodyData) SetFileKey(v string) *GenerateUploadConfigResponseBodyData {
	s.FileKey = &v
	return s
}

func (s *GenerateUploadConfigResponseBodyData) SetFormDatas(v map[string]interface{}) *GenerateUploadConfigResponseBodyData {
	s.FormDatas = v
	return s
}

func (s *GenerateUploadConfigResponseBodyData) SetPostUrl(v string) *GenerateUploadConfigResponseBodyData {
	s.PostUrl = &v
	return s
}

type GenerateUploadConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GenerateUploadConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GenerateUploadConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadConfigResponse) GoString() string {
	return s.String()
}

func (s *GenerateUploadConfigResponse) SetHeaders(v map[string]*string) *GenerateUploadConfigResponse {
	s.Headers = v
	return s
}

func (s *GenerateUploadConfigResponse) SetStatusCode(v int32) *GenerateUploadConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateUploadConfigResponse) SetBody(v *GenerateUploadConfigResponseBody) *GenerateUploadConfigResponse {
	s.Body = v
	return s
}

type GenerateViewPointRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey      *string                                `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	ReferenceData *GenerateViewPointRequestReferenceData `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty" type:"Struct"`
}

func (s GenerateViewPointRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateViewPointRequest) GoString() string {
	return s.String()
}

func (s *GenerateViewPointRequest) SetAgentKey(v string) *GenerateViewPointRequest {
	s.AgentKey = &v
	return s
}

func (s *GenerateViewPointRequest) SetReferenceData(v *GenerateViewPointRequestReferenceData) *GenerateViewPointRequest {
	s.ReferenceData = v
	return s
}

type GenerateViewPointRequestReferenceData struct {
	MiniDoc []*string `json:"MiniDoc,omitempty" xml:"MiniDoc,omitempty" type:"Repeated"`
}

func (s GenerateViewPointRequestReferenceData) String() string {
	return tea.Prettify(s)
}

func (s GenerateViewPointRequestReferenceData) GoString() string {
	return s.String()
}

func (s *GenerateViewPointRequestReferenceData) SetMiniDoc(v []*string) *GenerateViewPointRequestReferenceData {
	s.MiniDoc = v
	return s
}

type GenerateViewPointShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey            *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	ReferenceDataShrink *string `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty"`
}

func (s GenerateViewPointShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateViewPointShrinkRequest) GoString() string {
	return s.String()
}

func (s *GenerateViewPointShrinkRequest) SetAgentKey(v string) *GenerateViewPointShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *GenerateViewPointShrinkRequest) SetReferenceDataShrink(v string) *GenerateViewPointShrinkRequest {
	s.ReferenceDataShrink = &v
	return s
}

type GenerateViewPointResponseBody struct {
	// example:
	//
	// 200
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*GenerateViewPointResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 94512A33-8EC1-5452-A793-5C91F18ED2F0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GenerateViewPointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateViewPointResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateViewPointResponseBody) SetCode(v string) *GenerateViewPointResponseBody {
	s.Code = &v
	return s
}

func (s *GenerateViewPointResponseBody) SetData(v []*GenerateViewPointResponseBodyData) *GenerateViewPointResponseBody {
	s.Data = v
	return s
}

func (s *GenerateViewPointResponseBody) SetHttpStatusCode(v int32) *GenerateViewPointResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GenerateViewPointResponseBody) SetMessage(v string) *GenerateViewPointResponseBody {
	s.Message = &v
	return s
}

func (s *GenerateViewPointResponseBody) SetRequestId(v string) *GenerateViewPointResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateViewPointResponseBody) SetSuccess(v bool) *GenerateViewPointResponseBody {
	s.Success = &v
	return s
}

type GenerateViewPointResponseBodyData struct {
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
}

func (s GenerateViewPointResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GenerateViewPointResponseBodyData) GoString() string {
	return s.String()
}

func (s *GenerateViewPointResponseBodyData) SetPoint(v string) *GenerateViewPointResponseBodyData {
	s.Point = &v
	return s
}

type GenerateViewPointResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GenerateViewPointResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GenerateViewPointResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateViewPointResponse) GoString() string {
	return s.String()
}

func (s *GenerateViewPointResponse) SetHeaders(v map[string]*string) *GenerateViewPointResponse {
	s.Headers = v
	return s
}

func (s *GenerateViewPointResponse) SetStatusCode(v int32) *GenerateViewPointResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateViewPointResponse) SetBody(v *GenerateViewPointResponseBody) *GenerateViewPointResponse {
	s.Body = v
	return s
}

type GetCategoriesByTaskIdRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetCategoriesByTaskIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesByTaskIdRequest) GoString() string {
	return s.String()
}

func (s *GetCategoriesByTaskIdRequest) SetTaskId(v string) *GetCategoriesByTaskIdRequest {
	s.TaskId = &v
	return s
}

func (s *GetCategoriesByTaskIdRequest) SetWorkspaceId(v string) *GetCategoriesByTaskIdRequest {
	s.WorkspaceId = &v
	return s
}

type GetCategoriesByTaskIdResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*GetCategoriesByTaskIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCategoriesByTaskIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesByTaskIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetCategoriesByTaskIdResponseBody) SetCode(v string) *GetCategoriesByTaskIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetCategoriesByTaskIdResponseBody) SetData(v []*GetCategoriesByTaskIdResponseBodyData) *GetCategoriesByTaskIdResponseBody {
	s.Data = v
	return s
}

func (s *GetCategoriesByTaskIdResponseBody) SetHttpStatusCode(v int32) *GetCategoriesByTaskIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetCategoriesByTaskIdResponseBody) SetMessage(v string) *GetCategoriesByTaskIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetCategoriesByTaskIdResponseBody) SetRequestId(v string) *GetCategoriesByTaskIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCategoriesByTaskIdResponseBody) SetSuccess(v bool) *GetCategoriesByTaskIdResponseBody {
	s.Success = &v
	return s
}

type GetCategoriesByTaskIdResponseBodyData struct {
	Category *string                                          `json:"Category,omitempty" xml:"Category,omitempty"`
	Children []*GetCategoriesByTaskIdResponseBodyDataChildren `json:"Children,omitempty" xml:"Children,omitempty" type:"Repeated"`
	// example:
	//
	// 2
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s GetCategoriesByTaskIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesByTaskIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCategoriesByTaskIdResponseBodyData) SetCategory(v string) *GetCategoriesByTaskIdResponseBodyData {
	s.Category = &v
	return s
}

func (s *GetCategoriesByTaskIdResponseBodyData) SetChildren(v []*GetCategoriesByTaskIdResponseBodyDataChildren) *GetCategoriesByTaskIdResponseBodyData {
	s.Children = v
	return s
}

func (s *GetCategoriesByTaskIdResponseBodyData) SetCount(v int32) *GetCategoriesByTaskIdResponseBodyData {
	s.Count = &v
	return s
}

type GetCategoriesByTaskIdResponseBodyDataChildren struct {
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
}

func (s GetCategoriesByTaskIdResponseBodyDataChildren) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesByTaskIdResponseBodyDataChildren) GoString() string {
	return s.String()
}

func (s *GetCategoriesByTaskIdResponseBodyDataChildren) SetCategory(v string) *GetCategoriesByTaskIdResponseBodyDataChildren {
	s.Category = &v
	return s
}

type GetCategoriesByTaskIdResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCategoriesByTaskIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCategoriesByTaskIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesByTaskIdResponse) GoString() string {
	return s.String()
}

func (s *GetCategoriesByTaskIdResponse) SetHeaders(v map[string]*string) *GetCategoriesByTaskIdResponse {
	s.Headers = v
	return s
}

func (s *GetCategoriesByTaskIdResponse) SetStatusCode(v int32) *GetCategoriesByTaskIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCategoriesByTaskIdResponse) SetBody(v *GetCategoriesByTaskIdResponseBody) *GetCategoriesByTaskIdResponse {
	s.Body = v
	return s
}

type GetCustomHotTopicBroadcastJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2e27abb32cb64f80a0c6e829b6c87a09
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetCustomHotTopicBroadcastJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomHotTopicBroadcastJobRequest) GoString() string {
	return s.String()
}

func (s *GetCustomHotTopicBroadcastJobRequest) SetTaskId(v string) *GetCustomHotTopicBroadcastJobRequest {
	s.TaskId = &v
	return s
}

func (s *GetCustomHotTopicBroadcastJobRequest) SetWorkspaceId(v string) *GetCustomHotTopicBroadcastJobRequest {
	s.WorkspaceId = &v
	return s
}

type GetCustomHotTopicBroadcastJobResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetCustomHotTopicBroadcastJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCustomHotTopicBroadcastJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomHotTopicBroadcastJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomHotTopicBroadcastJobResponseBody) SetCode(v string) *GetCustomHotTopicBroadcastJobResponseBody {
	s.Code = &v
	return s
}

func (s *GetCustomHotTopicBroadcastJobResponseBody) SetData(v *GetCustomHotTopicBroadcastJobResponseBodyData) *GetCustomHotTopicBroadcastJobResponseBody {
	s.Data = v
	return s
}

func (s *GetCustomHotTopicBroadcastJobResponseBody) SetHttpStatusCode(v int32) *GetCustomHotTopicBroadcastJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetCustomHotTopicBroadcastJobResponseBody) SetMessage(v string) *GetCustomHotTopicBroadcastJobResponseBody {
	s.Message = &v
	return s
}

func (s *GetCustomHotTopicBroadcastJobResponseBody) SetRequestId(v string) *GetCustomHotTopicBroadcastJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomHotTopicBroadcastJobResponseBody) SetSuccess(v bool) *GetCustomHotTopicBroadcastJobResponseBody {
	s.Success = &v
	return s
}

type GetCustomHotTopicBroadcastJobResponseBodyData struct {
	// example:
	//
	// 错误信息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 热点话题版本号标识
	HotTopicVersion *string `json:"HotTopicVersion,omitempty" xml:"HotTopicVersion,omitempty"`
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetCustomHotTopicBroadcastJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCustomHotTopicBroadcastJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCustomHotTopicBroadcastJobResponseBodyData) SetErrorMessage(v string) *GetCustomHotTopicBroadcastJobResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *GetCustomHotTopicBroadcastJobResponseBodyData) SetHotTopicVersion(v string) *GetCustomHotTopicBroadcastJobResponseBodyData {
	s.HotTopicVersion = &v
	return s
}

func (s *GetCustomHotTopicBroadcastJobResponseBodyData) SetStatus(v string) *GetCustomHotTopicBroadcastJobResponseBodyData {
	s.Status = &v
	return s
}

type GetCustomHotTopicBroadcastJobResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomHotTopicBroadcastJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomHotTopicBroadcastJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomHotTopicBroadcastJobResponse) GoString() string {
	return s.String()
}

func (s *GetCustomHotTopicBroadcastJobResponse) SetHeaders(v map[string]*string) *GetCustomHotTopicBroadcastJobResponse {
	s.Headers = v
	return s
}

func (s *GetCustomHotTopicBroadcastJobResponse) SetStatusCode(v int32) *GetCustomHotTopicBroadcastJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomHotTopicBroadcastJobResponse) SetBody(v *GetCustomHotTopicBroadcastJobResponseBody) *GetCustomHotTopicBroadcastJobResponse {
	s.Body = v
	return s
}

type GetCustomTextRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 商品code
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 63
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetCustomTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTextRequest) GoString() string {
	return s.String()
}

func (s *GetCustomTextRequest) SetAgentKey(v string) *GetCustomTextRequest {
	s.AgentKey = &v
	return s
}

func (s *GetCustomTextRequest) SetCommodityCode(v string) *GetCustomTextRequest {
	s.CommodityCode = &v
	return s
}

func (s *GetCustomTextRequest) SetId(v int64) *GetCustomTextRequest {
	s.Id = &v
	return s
}

type GetCustomTextResponseBody struct {
	// example:
	//
	// NoData
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetCustomTextResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCustomTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTextResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomTextResponseBody) SetCode(v string) *GetCustomTextResponseBody {
	s.Code = &v
	return s
}

func (s *GetCustomTextResponseBody) SetData(v *GetCustomTextResponseBodyData) *GetCustomTextResponseBody {
	s.Data = v
	return s
}

func (s *GetCustomTextResponseBody) SetHttpStatusCode(v int32) *GetCustomTextResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetCustomTextResponseBody) SetMessage(v string) *GetCustomTextResponseBody {
	s.Message = &v
	return s
}

func (s *GetCustomTextResponseBody) SetRequestId(v string) *GetCustomTextResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomTextResponseBody) SetSuccess(v bool) *GetCustomTextResponseBody {
	s.Success = &v
	return s
}

type GetCustomTextResponseBodyData struct {
	// example:
	//
	// 内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 创建用户
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// 34
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 修改时间
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 修改用户
	UpdateUser *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s GetCustomTextResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTextResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCustomTextResponseBodyData) SetContent(v string) *GetCustomTextResponseBodyData {
	s.Content = &v
	return s
}

func (s *GetCustomTextResponseBodyData) SetCreateTime(v string) *GetCustomTextResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetCustomTextResponseBodyData) SetCreateUser(v string) *GetCustomTextResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *GetCustomTextResponseBodyData) SetId(v int64) *GetCustomTextResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetCustomTextResponseBodyData) SetTitle(v string) *GetCustomTextResponseBodyData {
	s.Title = &v
	return s
}

func (s *GetCustomTextResponseBodyData) SetUpdateTime(v string) *GetCustomTextResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *GetCustomTextResponseBodyData) SetUpdateUser(v string) *GetCustomTextResponseBodyData {
	s.UpdateUser = &v
	return s
}

type GetCustomTextResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTextResponse) GoString() string {
	return s.String()
}

func (s *GetCustomTextResponse) SetHeaders(v map[string]*string) *GetCustomTextResponse {
	s.Headers = v
	return s
}

func (s *GetCustomTextResponse) SetStatusCode(v int32) *GetCustomTextResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomTextResponse) SetBody(v *GetCustomTextResponseBody) *GetCustomTextResponse {
	s.Body = v
	return s
}

type GetCustomTopicSelectionPerspectiveAnalysisTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0dbf1055f8a2475d99904c3b76a0ffba
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskRequest) GoString() string {
	return s.String()
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskRequest) SetAgentKey(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskRequest) SetTaskId(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskRequest {
	s.TaskId = &v
	return s
}

type GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetCode(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetData(v *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetHttpStatusCode(v int32) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetMessage(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Message = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetRequestId(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetSuccess(v bool) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Success = &v
	return s
}

type GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData struct {
	CustomViewPointsResult *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResult `json:"CustomViewPointsResult,omitempty" xml:"CustomViewPointsResult,omitempty" type:"Struct"`
	// example:
	//
	// 错误信息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// FAILED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetCustomViewPointsResult(v *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResult) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.CustomViewPointsResult = v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetErrorMessage(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetStatus(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.Status = &v
	return s
}

type GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResult struct {
	Attitudes []*GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes `json:"Attitudes,omitempty" xml:"Attitudes,omitempty" type:"Repeated"`
	// example:
	//
	// 热点主题事件
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResult) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResult) GoString() string {
	return s.String()
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResult) SetAttitudes(v []*GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResult {
	s.Attitudes = v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResult) SetTopic(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResult {
	s.Topic = &v
	return s
}

type GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes struct {
	// example:
	//
	// 当前观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点类型
	AttitudeType *string `json:"AttitudeType,omitempty" xml:"AttitudeType,omitempty"`
	// example:
	//
	// 当前观点占比
	Ratio      *string                                                                                                    `json:"Ratio,omitempty" xml:"Ratio,omitempty"`
	ViewPoints []*GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints `json:"ViewPoints,omitempty" xml:"ViewPoints,omitempty" type:"Repeated"`
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes) GoString() string {
	return s.String()
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes) SetAttitude(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes {
	s.Attitude = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes) SetAttitudeType(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes {
	s.AttitudeType = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes) SetRatio(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes {
	s.Ratio = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes) SetViewPoints(v []*GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudes {
	s.ViewPoints = v
	return s
}

type GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints struct {
	Outlines []*GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPointsOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints) GoString() string {
	return s.String()
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints) SetOutlines(v []*GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPointsOutlines) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints {
	s.Outlines = v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints) SetPoint(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints {
	s.Point = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints) SetSummary(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPoints {
	s.Summary = &v
	return s
}

type GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPointsOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPointsOutlines) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPointsOutlines) GoString() string {
	return s.String()
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPointsOutlines) SetOutline(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPointsOutlines {
	s.Outline = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPointsOutlines) SetSummary(v string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyDataCustomViewPointsResultAttitudesViewPointsOutlines {
	s.Summary = &v
	return s
}

type GetCustomTopicSelectionPerspectiveAnalysisTaskResponse struct {
	Headers    map[string]*string                                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTopicSelectionPerspectiveAnalysisTaskResponse) GoString() string {
	return s.String()
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponse) SetHeaders(v map[string]*string) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponse {
	s.Headers = v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponse) SetStatusCode(v int32) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomTopicSelectionPerspectiveAnalysisTaskResponse) SetBody(v *GetCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) *GetCustomTopicSelectionPerspectiveAnalysisTaskResponse {
	s.Body = v
	return s
}

type GetDataSourceOrderConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// d9a1f6146a37446495d9985c2e7b267e_p_outbound_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// miaobi
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s GetDataSourceOrderConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceOrderConfigRequest) GoString() string {
	return s.String()
}

func (s *GetDataSourceOrderConfigRequest) SetAgentKey(v string) *GetDataSourceOrderConfigRequest {
	s.AgentKey = &v
	return s
}

func (s *GetDataSourceOrderConfigRequest) SetProductCode(v string) *GetDataSourceOrderConfigRequest {
	s.ProductCode = &v
	return s
}

type GetDataSourceOrderConfigResponseBody struct {
	// example:
	//
	// 200
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetDataSourceOrderConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 428DCC0D-3C63-5306-BD1B-124396AB97BE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDataSourceOrderConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceOrderConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataSourceOrderConfigResponseBody) SetCode(v string) *GetDataSourceOrderConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetDataSourceOrderConfigResponseBody) SetData(v *GetDataSourceOrderConfigResponseBodyData) *GetDataSourceOrderConfigResponseBody {
	s.Data = v
	return s
}

func (s *GetDataSourceOrderConfigResponseBody) SetHttpStatusCode(v int32) *GetDataSourceOrderConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDataSourceOrderConfigResponseBody) SetMessage(v string) *GetDataSourceOrderConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetDataSourceOrderConfigResponseBody) SetRequestId(v string) *GetDataSourceOrderConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataSourceOrderConfigResponseBody) SetSuccess(v bool) *GetDataSourceOrderConfigResponseBody {
	s.Success = &v
	return s
}

type GetDataSourceOrderConfigResponseBodyData struct {
	UserConfigDataSourceList []*GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList `json:"UserConfigDataSourceList,omitempty" xml:"UserConfigDataSourceList,omitempty" type:"Repeated"`
}

func (s GetDataSourceOrderConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceOrderConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDataSourceOrderConfigResponseBodyData) SetUserConfigDataSourceList(v []*GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList) *GetDataSourceOrderConfigResponseBodyData {
	s.UserConfigDataSourceList = v
	return s
}

type GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList struct {
	// example:
	//
	// QuarkCommonNews
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 20
	Number *int32 `json:"Number,omitempty" xml:"Number,omitempty"`
	// example:
	//
	// SystemSearch
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList) GoString() string {
	return s.String()
}

func (s *GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList) SetCode(v string) *GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList {
	s.Code = &v
	return s
}

func (s *GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList) SetName(v string) *GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList {
	s.Name = &v
	return s
}

func (s *GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList) SetNumber(v int32) *GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList {
	s.Number = &v
	return s
}

func (s *GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList) SetType(v string) *GetDataSourceOrderConfigResponseBodyDataUserConfigDataSourceList {
	s.Type = &v
	return s
}

type GetDataSourceOrderConfigResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataSourceOrderConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataSourceOrderConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceOrderConfigResponse) GoString() string {
	return s.String()
}

func (s *GetDataSourceOrderConfigResponse) SetHeaders(v map[string]*string) *GetDataSourceOrderConfigResponse {
	s.Headers = v
	return s
}

func (s *GetDataSourceOrderConfigResponse) SetStatusCode(v int32) *GetDataSourceOrderConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataSourceOrderConfigResponse) SetBody(v *GetDataSourceOrderConfigResponseBody) *GetDataSourceOrderConfigResponse {
	s.Body = v
	return s
}

type GetDatasetRequest struct {
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// businessDataset
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetRequest) GoString() string {
	return s.String()
}

func (s *GetDatasetRequest) SetDatasetId(v int64) *GetDatasetRequest {
	s.DatasetId = &v
	return s
}

func (s *GetDatasetRequest) SetDatasetName(v string) *GetDatasetRequest {
	s.DatasetName = &v
	return s
}

func (s *GetDatasetRequest) SetWorkspaceId(v string) *GetDatasetRequest {
	s.WorkspaceId = &v
	return s
}

type GetDatasetResponseBody struct {
	// example:
	//
	// NoData
	Code *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetDatasetResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBody) SetCode(v string) *GetDatasetResponseBody {
	s.Code = &v
	return s
}

func (s *GetDatasetResponseBody) SetData(v *GetDatasetResponseBodyData) *GetDatasetResponseBody {
	s.Data = v
	return s
}

func (s *GetDatasetResponseBody) SetHttpStatusCode(v int32) *GetDatasetResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDatasetResponseBody) SetMessage(v string) *GetDatasetResponseBody {
	s.Message = &v
	return s
}

func (s *GetDatasetResponseBody) SetRequestId(v string) *GetDatasetResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDatasetResponseBody) SetSuccess(v bool) *GetDatasetResponseBody {
	s.Success = &v
	return s
}

type GetDatasetResponseBodyData struct {
	// example:
	//
	// 2024-11-12 21:46:24
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// xxx
	CreateUser    *string                                  `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	DatasetConfig *GetDatasetResponseBodyDataDatasetConfig `json:"DatasetConfig,omitempty" xml:"DatasetConfig,omitempty" type:"Struct"`
	// example:
	//
	// xxx
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// xxx
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// CustomSemanticSearch
	DatasetType          *string                                         `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	DocumentHandleConfig *GetDatasetResponseBodyDataDocumentHandleConfig `json:"DocumentHandleConfig,omitempty" xml:"DocumentHandleConfig,omitempty" type:"Struct"`
	// example:
	//
	// 1
	SearchDatasetEnable *int32 `json:"SearchDatasetEnable,omitempty" xml:"SearchDatasetEnable,omitempty"`
}

func (s GetDatasetResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyData) SetCreateTime(v string) *GetDatasetResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetDatasetResponseBodyData) SetCreateUser(v string) *GetDatasetResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *GetDatasetResponseBodyData) SetDatasetConfig(v *GetDatasetResponseBodyDataDatasetConfig) *GetDatasetResponseBodyData {
	s.DatasetConfig = v
	return s
}

func (s *GetDatasetResponseBodyData) SetDatasetDescription(v string) *GetDatasetResponseBodyData {
	s.DatasetDescription = &v
	return s
}

func (s *GetDatasetResponseBodyData) SetDatasetId(v int64) *GetDatasetResponseBodyData {
	s.DatasetId = &v
	return s
}

func (s *GetDatasetResponseBodyData) SetDatasetName(v string) *GetDatasetResponseBodyData {
	s.DatasetName = &v
	return s
}

func (s *GetDatasetResponseBodyData) SetDatasetType(v string) *GetDatasetResponseBodyData {
	s.DatasetType = &v
	return s
}

func (s *GetDatasetResponseBodyData) SetDocumentHandleConfig(v *GetDatasetResponseBodyDataDocumentHandleConfig) *GetDatasetResponseBodyData {
	s.DocumentHandleConfig = v
	return s
}

func (s *GetDatasetResponseBodyData) SetSearchDatasetEnable(v int32) *GetDatasetResponseBodyData {
	s.SearchDatasetEnable = &v
	return s
}

type GetDatasetResponseBodyDataDatasetConfig struct {
	SearchSourceConfigs []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs `json:"SearchSourceConfigs,omitempty" xml:"SearchSourceConfigs,omitempty" type:"Repeated"`
}

func (s GetDatasetResponseBodyDataDatasetConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDatasetConfig) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDatasetConfig) SetSearchSourceConfigs(v []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs) *GetDatasetResponseBodyDataDatasetConfig {
	s.SearchSourceConfigs = v
	return s
}

type GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs struct {
	// example:
	//
	// 可以搜索到的关键词，用来验证是否可用
	DemoQuery                  *string                                                                               `json:"DemoQuery,omitempty" xml:"DemoQuery,omitempty"`
	SearchSourceRequestConfig  *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig  `json:"SearchSourceRequestConfig,omitempty" xml:"SearchSourceRequestConfig,omitempty" type:"Struct"`
	SearchSourceResponseConfig *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfig `json:"SearchSourceResponseConfig,omitempty" xml:"SearchSourceResponseConfig,omitempty" type:"Struct"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs) SetDemoQuery(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs {
	s.DemoQuery = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs) SetSearchSourceRequestConfig(v *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs {
	s.SearchSourceRequestConfig = v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs) SetSearchSourceResponseConfig(v *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs {
	s.SearchSourceResponseConfig = v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs) SetSize(v int32) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigs {
	s.Size = &v
	return s
}

type GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig struct {
	// example:
	//
	// {}
	Body *string `json:"Body,omitempty" xml:"Body,omitempty"`
	// example:
	//
	// 30
	ConnectTimeout *int32                                                                                        `json:"ConnectTimeout,omitempty" xml:"ConnectTimeout,omitempty"`
	Headers        []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders `json:"Headers,omitempty" xml:"Headers,omitempty" type:"Repeated"`
	// example:
	//
	// 请求方式
	Method *string                                                                                      `json:"Method,omitempty" xml:"Method,omitempty"`
	Params []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// true
	PathParamsEnable *bool `json:"PathParamsEnable,omitempty" xml:"PathParamsEnable,omitempty"`
	// example:
	//
	// 78
	SocketTimeout *int32 `json:"SocketTimeout,omitempty" xml:"SocketTimeout,omitempty"`
	// example:
	//
	// api地址
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetBody(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Body = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetConnectTimeout(v int32) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.ConnectTimeout = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetHeaders(v []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Headers = v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetMethod(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Method = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetParams(v []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Params = v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetPathParamsEnable(v bool) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.PathParamsEnable = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetSocketTimeout(v int32) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.SocketTimeout = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetUrl(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Url = &v
	return s
}

type GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders struct {
	// example:
	//
	// 参数名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 参数值
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// example:
	//
	// valueType = time 时有效
	ValueFormat *string `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty"`
	// example:
	//
	// 参数值数据类型: 默认string
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetName(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.Name = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetValue(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.Value = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetValueFormat(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.ValueFormat = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetValueType(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.ValueType = &v
	return s
}

type GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams struct {
	// example:
	//
	// 参数名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 参数值
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// example:
	//
	// valueType = time 时有效
	ValueFormat *string `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty"`
	// example:
	//
	// 参数值数据类型: 默认string
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetName(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.Name = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetValue(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.Value = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetValueFormat(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.ValueFormat = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetValueType(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.ValueType = &v
	return s
}

type GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfig struct {
	JqNodes []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes `json:"JqNodes,omitempty" xml:"JqNodes,omitempty" type:"Repeated"`
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) SetJqNodes(v []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfig {
	s.JqNodes = v
	return s
}

type GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes struct {
	JqNodes []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes `json:"JqNodes,omitempty" xml:"JqNodes,omitempty" type:"Repeated"`
	// example:
	//
	// 节点key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 节点路径
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// 节点数据类型：string number list object base
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetJqNodes(v []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.JqNodes = v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetKey(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.Key = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetPath(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.Path = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetType(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.Type = &v
	return s
}

type GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes struct {
	JqNodes []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes `json:"JqNodes,omitempty" xml:"JqNodes,omitempty" type:"Repeated"`
	// example:
	//
	// title
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// .title
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// string
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetJqNodes(v []*GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.JqNodes = v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetKey(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.Key = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetPath(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.Path = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetType(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.Type = &v
	return s
}

type GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes struct {
	// example:
	//
	// title
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// .title
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// string
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) SetKey(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes {
	s.Key = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) SetPath(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes {
	s.Path = &v
	return s
}

func (s *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) SetType(v string) *GetDatasetResponseBodyDataDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes {
	s.Type = &v
	return s
}

type GetDatasetResponseBodyDataDocumentHandleConfig struct {
	// example:
	//
	// true
	DisableHandleMultimodalMedia *bool `json:"DisableHandleMultimodalMedia,omitempty" xml:"DisableHandleMultimodalMedia,omitempty"`
}

func (s GetDatasetResponseBodyDataDocumentHandleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponseBodyDataDocumentHandleConfig) GoString() string {
	return s.String()
}

func (s *GetDatasetResponseBodyDataDocumentHandleConfig) SetDisableHandleMultimodalMedia(v bool) *GetDatasetResponseBodyDataDocumentHandleConfig {
	s.DisableHandleMultimodalMedia = &v
	return s
}

type GetDatasetResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetResponse) GoString() string {
	return s.String()
}

func (s *GetDatasetResponse) SetHeaders(v map[string]*string) *GetDatasetResponse {
	s.Headers = v
	return s
}

func (s *GetDatasetResponse) SetStatusCode(v int32) *GetDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDatasetResponse) SetBody(v *GetDatasetResponseBody) *GetDatasetResponse {
	s.Body = v
	return s
}

type GetDatasetDocumentRequest struct {
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 数据集名称
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// xxx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xxx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetDatasetDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetDocumentRequest) GoString() string {
	return s.String()
}

func (s *GetDatasetDocumentRequest) SetDatasetId(v int64) *GetDatasetDocumentRequest {
	s.DatasetId = &v
	return s
}

func (s *GetDatasetDocumentRequest) SetDatasetName(v string) *GetDatasetDocumentRequest {
	s.DatasetName = &v
	return s
}

func (s *GetDatasetDocumentRequest) SetDocId(v string) *GetDatasetDocumentRequest {
	s.DocId = &v
	return s
}

func (s *GetDatasetDocumentRequest) SetDocUuid(v string) *GetDatasetDocumentRequest {
	s.DocUuid = &v
	return s
}

func (s *GetDatasetDocumentRequest) SetWorkspaceId(v string) *GetDatasetDocumentRequest {
	s.WorkspaceId = &v
	return s
}

type GetDatasetDocumentResponseBody struct {
	// example:
	//
	// NoData
	Code *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetDatasetDocumentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDatasetDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *GetDatasetDocumentResponseBody) SetCode(v string) *GetDatasetDocumentResponseBody {
	s.Code = &v
	return s
}

func (s *GetDatasetDocumentResponseBody) SetData(v *GetDatasetDocumentResponseBodyData) *GetDatasetDocumentResponseBody {
	s.Data = v
	return s
}

func (s *GetDatasetDocumentResponseBody) SetHttpStatusCode(v int32) *GetDatasetDocumentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDatasetDocumentResponseBody) SetMessage(v string) *GetDatasetDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *GetDatasetDocumentResponseBody) SetRequestId(v string) *GetDatasetDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDatasetDocumentResponseBody) SetSuccess(v bool) *GetDatasetDocumentResponseBody {
	s.Success = &v
	return s
}

type GetDatasetDocumentResponseBodyData struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// true
	DisableHandleMultimodalMedia *bool `json:"DisableHandleMultimodalMedia,omitempty" xml:"DisableHandleMultimodalMedia,omitempty"`
	// example:
	//
	// 用户指定的文档唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 内部文档唯一ID
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2024-05-14 08:54:33
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 来源
	SourceFrom *string `json:"SourceFrom,omitempty" xml:"SourceFrom,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	Title   *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.aliyun.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetDatasetDocumentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetDocumentResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDatasetDocumentResponseBodyData) SetContent(v string) *GetDatasetDocumentResponseBodyData {
	s.Content = &v
	return s
}

func (s *GetDatasetDocumentResponseBodyData) SetDisableHandleMultimodalMedia(v bool) *GetDatasetDocumentResponseBodyData {
	s.DisableHandleMultimodalMedia = &v
	return s
}

func (s *GetDatasetDocumentResponseBodyData) SetDocId(v string) *GetDatasetDocumentResponseBodyData {
	s.DocId = &v
	return s
}

func (s *GetDatasetDocumentResponseBodyData) SetDocUuid(v string) *GetDatasetDocumentResponseBodyData {
	s.DocUuid = &v
	return s
}

func (s *GetDatasetDocumentResponseBodyData) SetPubTime(v string) *GetDatasetDocumentResponseBodyData {
	s.PubTime = &v
	return s
}

func (s *GetDatasetDocumentResponseBodyData) SetSourceFrom(v string) *GetDatasetDocumentResponseBodyData {
	s.SourceFrom = &v
	return s
}

func (s *GetDatasetDocumentResponseBodyData) SetSummary(v string) *GetDatasetDocumentResponseBodyData {
	s.Summary = &v
	return s
}

func (s *GetDatasetDocumentResponseBodyData) SetTitle(v string) *GetDatasetDocumentResponseBodyData {
	s.Title = &v
	return s
}

func (s *GetDatasetDocumentResponseBodyData) SetUrl(v string) *GetDatasetDocumentResponseBodyData {
	s.Url = &v
	return s
}

type GetDatasetDocumentResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDatasetDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDatasetDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDatasetDocumentResponse) GoString() string {
	return s.String()
}

func (s *GetDatasetDocumentResponse) SetHeaders(v map[string]*string) *GetDatasetDocumentResponse {
	s.Headers = v
	return s
}

func (s *GetDatasetDocumentResponse) SetStatusCode(v int32) *GetDatasetDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDatasetDocumentResponse) SetBody(v *GetDatasetDocumentResponseBody) *GetDatasetDocumentResponse {
	s.Body = v
	return s
}

type GetDocClusterTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 93771c8e1142467fb1aedf1763feba1e
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetDocClusterTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDocClusterTaskRequest) GoString() string {
	return s.String()
}

func (s *GetDocClusterTaskRequest) SetAgentKey(v string) *GetDocClusterTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *GetDocClusterTaskRequest) SetTaskId(v string) *GetDocClusterTaskRequest {
	s.TaskId = &v
	return s
}

type GetDocClusterTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetDocClusterTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDocClusterTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDocClusterTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetDocClusterTaskResponseBody) SetCode(v string) *GetDocClusterTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetDocClusterTaskResponseBody) SetData(v *GetDocClusterTaskResponseBodyData) *GetDocClusterTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetDocClusterTaskResponseBody) SetHttpStatusCode(v int32) *GetDocClusterTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDocClusterTaskResponseBody) SetMessage(v string) *GetDocClusterTaskResponseBody {
	s.Message = &v
	return s
}

func (s *GetDocClusterTaskResponseBody) SetRequestId(v string) *GetDocClusterTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDocClusterTaskResponseBody) SetSuccess(v bool) *GetDocClusterTaskResponseBody {
	s.Success = &v
	return s
}

type GetDocClusterTaskResponseBodyData struct {
	// example:
	//
	// 错误信息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// PENDING
	Status *string                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	Topics []*GetDocClusterTaskResponseBodyDataTopics `json:"Topics,omitempty" xml:"Topics,omitempty" type:"Repeated"`
}

func (s GetDocClusterTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDocClusterTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDocClusterTaskResponseBodyData) SetErrorMessage(v string) *GetDocClusterTaskResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *GetDocClusterTaskResponseBodyData) SetStatus(v string) *GetDocClusterTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetDocClusterTaskResponseBodyData) SetTopics(v []*GetDocClusterTaskResponseBodyDataTopics) *GetDocClusterTaskResponseBodyData {
	s.Topics = v
	return s
}

type GetDocClusterTaskResponseBodyDataTopics struct {
	DocIds []*string `json:"DocIds,omitempty" xml:"DocIds,omitempty" type:"Repeated"`
	// example:
	//
	// 聚类主题摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 聚类主题名
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetDocClusterTaskResponseBodyDataTopics) String() string {
	return tea.Prettify(s)
}

func (s GetDocClusterTaskResponseBodyDataTopics) GoString() string {
	return s.String()
}

func (s *GetDocClusterTaskResponseBodyDataTopics) SetDocIds(v []*string) *GetDocClusterTaskResponseBodyDataTopics {
	s.DocIds = v
	return s
}

func (s *GetDocClusterTaskResponseBodyDataTopics) SetSummary(v string) *GetDocClusterTaskResponseBodyDataTopics {
	s.Summary = &v
	return s
}

func (s *GetDocClusterTaskResponseBodyDataTopics) SetTitle(v string) *GetDocClusterTaskResponseBodyDataTopics {
	s.Title = &v
	return s
}

type GetDocClusterTaskResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDocClusterTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDocClusterTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDocClusterTaskResponse) GoString() string {
	return s.String()
}

func (s *GetDocClusterTaskResponse) SetHeaders(v map[string]*string) *GetDocClusterTaskResponse {
	s.Headers = v
	return s
}

func (s *GetDocClusterTaskResponse) SetStatusCode(v int32) *GetDocClusterTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDocClusterTaskResponse) SetBody(v *GetDocClusterTaskResponseBody) *GetDocClusterTaskResponse {
	s.Body = v
	return s
}

type GetDocInfoRequest struct {
	// example:
	//
	// default
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 12345
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetDocInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDocInfoRequest) GoString() string {
	return s.String()
}

func (s *GetDocInfoRequest) SetCategoryId(v string) *GetDocInfoRequest {
	s.CategoryId = &v
	return s
}

func (s *GetDocInfoRequest) SetDocId(v string) *GetDocInfoRequest {
	s.DocId = &v
	return s
}

func (s *GetDocInfoRequest) SetWorkspaceId(v string) *GetDocInfoRequest {
	s.WorkspaceId = &v
	return s
}

type GetDocInfoResponseBody struct {
	// example:
	//
	// successful
	Code *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetDocInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDocInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDocInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetDocInfoResponseBody) SetCode(v string) *GetDocInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetDocInfoResponseBody) SetData(v *GetDocInfoResponseBodyData) *GetDocInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetDocInfoResponseBody) SetHttpStatusCode(v int32) *GetDocInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDocInfoResponseBody) SetMessage(v string) *GetDocInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetDocInfoResponseBody) SetRequestId(v string) *GetDocInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDocInfoResponseBody) SetSuccess(v bool) *GetDocInfoResponseBody {
	s.Success = &v
	return s
}

type GetDocInfoResponseBodyData struct {
	// example:
	//
	// default
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	DocName    *string `json:"DocName,omitempty" xml:"DocName,omitempty"`
	// example:
	//
	// pdf
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// http://xxx/xxx.pdf
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// 0
	Status        *int32    `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusMessage *string   `json:"StatusMessage,omitempty" xml:"StatusMessage,omitempty"`
	VideoContents []*string `json:"VideoContents,omitempty" xml:"VideoContents,omitempty" type:"Repeated"`
}

func (s GetDocInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDocInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDocInfoResponseBodyData) SetCategoryId(v string) *GetDocInfoResponseBodyData {
	s.CategoryId = &v
	return s
}

func (s *GetDocInfoResponseBodyData) SetDocName(v string) *GetDocInfoResponseBodyData {
	s.DocName = &v
	return s
}

func (s *GetDocInfoResponseBodyData) SetDocType(v string) *GetDocInfoResponseBodyData {
	s.DocType = &v
	return s
}

func (s *GetDocInfoResponseBodyData) SetFileUrl(v string) *GetDocInfoResponseBodyData {
	s.FileUrl = &v
	return s
}

func (s *GetDocInfoResponseBodyData) SetStatus(v int32) *GetDocInfoResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetDocInfoResponseBodyData) SetStatusMessage(v string) *GetDocInfoResponseBodyData {
	s.StatusMessage = &v
	return s
}

func (s *GetDocInfoResponseBodyData) SetVideoContents(v []*string) *GetDocInfoResponseBodyData {
	s.VideoContents = v
	return s
}

type GetDocInfoResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDocInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDocInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDocInfoResponse) GoString() string {
	return s.String()
}

func (s *GetDocInfoResponse) SetHeaders(v map[string]*string) *GetDocInfoResponse {
	s.Headers = v
	return s
}

func (s *GetDocInfoResponse) SetStatusCode(v int32) *GetDocInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDocInfoResponse) SetBody(v *GetDocInfoResponseBody) *GetDocInfoResponse {
	s.Body = v
	return s
}

type GetEnterpriseVocAnalysisTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetEnterpriseVocAnalysisTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskRequest) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskRequest) SetTaskId(v string) *GetEnterpriseVocAnalysisTaskRequest {
	s.TaskId = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskRequest) SetWorkspaceId(v string) *GetEnterpriseVocAnalysisTaskRequest {
	s.WorkspaceId = &v
	return s
}

type GetEnterpriseVocAnalysisTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetEnterpriseVocAnalysisTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetEnterpriseVocAnalysisTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskResponseBody) SetCode(v string) *GetEnterpriseVocAnalysisTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBody) SetData(v *GetEnterpriseVocAnalysisTaskResponseBodyData) *GetEnterpriseVocAnalysisTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBody) SetHttpStatusCode(v int32) *GetEnterpriseVocAnalysisTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBody) SetMessage(v string) *GetEnterpriseVocAnalysisTaskResponseBody {
	s.Message = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBody) SetRequestId(v string) *GetEnterpriseVocAnalysisTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBody) SetSuccess(v bool) *GetEnterpriseVocAnalysisTaskResponseBody {
	s.Success = &v
	return s
}

type GetEnterpriseVocAnalysisTaskResponseBodyData struct {
	// example:
	//
	// error
	ErrorMessage       *string                                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	StatisticsOverview *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview `json:"StatisticsOverview,omitempty" xml:"StatisticsOverview,omitempty" type:"Struct"`
	// example:
	//
	// SUCCESSED
	Status *string                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	Usage  *GetEnterpriseVocAnalysisTaskResponseBodyDataUsage `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyData) SetErrorMessage(v string) *GetEnterpriseVocAnalysisTaskResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyData) SetStatisticsOverview(v *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview) *GetEnterpriseVocAnalysisTaskResponseBodyData {
	s.StatisticsOverview = v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyData) SetStatus(v string) *GetEnterpriseVocAnalysisTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyData) SetUsage(v *GetEnterpriseVocAnalysisTaskResponseBodyDataUsage) *GetEnterpriseVocAnalysisTaskResponseBodyData {
	s.Usage = v
	return s
}

type GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview struct {
	// example:
	//
	// 100
	Count                     *int32                                                                                   `json:"Count,omitempty" xml:"Count,omitempty"`
	FilterDimensionStatistics *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatistics `json:"FilterDimensionStatistics,omitempty" xml:"FilterDimensionStatistics,omitempty" type:"Struct"`
	TagDimensionStatistics    *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatistics    `json:"TagDimensionStatistics,omitempty" xml:"TagDimensionStatistics,omitempty" type:"Struct"`
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview) SetCount(v int32) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview {
	s.Count = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview) SetFilterDimensionStatistics(v *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatistics) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview {
	s.FilterDimensionStatistics = v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview) SetTagDimensionStatistics(v *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatistics) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverview {
	s.TagDimensionStatistics = v
	return s
}

type GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatistics struct {
	TagValueCountStatistic []*GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic `json:"TagValueCountStatistic,omitempty" xml:"TagValueCountStatistic,omitempty" type:"Repeated"`
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatistics) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatistics) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatistics) SetTagValueCountStatistic(v []*GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatistics {
	s.TagValueCountStatistic = v
	return s
}

type GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic struct {
	// example:
	//
	// xxx
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	// example:
	//
	// multiTagValues
	TagTaskType *string `json:"TagTaskType,omitempty" xml:"TagTaskType,omitempty"`
	// example:
	//
	// 100
	ValueCount *int32 `json:"ValueCount,omitempty" xml:"ValueCount,omitempty"`
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic) SetTagName(v string) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic {
	s.TagName = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic) SetTagTaskType(v string) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic {
	s.TagTaskType = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic) SetValueCount(v int32) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewFilterDimensionStatisticsTagValueCountStatistic {
	s.ValueCount = &v
	return s
}

type GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatistics struct {
	TagValueCountStatistic []*GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic `json:"TagValueCountStatistic,omitempty" xml:"TagValueCountStatistic,omitempty" type:"Repeated"`
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatistics) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatistics) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatistics) SetTagValueCountStatistic(v []*GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatistics {
	s.TagValueCountStatistic = v
	return s
}

type GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic struct {
	// example:
	//
	// xxx
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	// example:
	//
	// multiTagValues
	TagTaskType *string `json:"TagTaskType,omitempty" xml:"TagTaskType,omitempty"`
	// example:
	//
	// 100
	ValueCount *int32 `json:"ValueCount,omitempty" xml:"ValueCount,omitempty"`
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic) SetTagName(v string) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic {
	s.TagName = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic) SetTagTaskType(v string) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic {
	s.TagTaskType = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic) SetValueCount(v int32) *GetEnterpriseVocAnalysisTaskResponseBodyDataStatisticsOverviewTagDimensionStatisticsTagValueCountStatistic {
	s.ValueCount = &v
	return s
}

type GetEnterpriseVocAnalysisTaskResponseBodyDataUsage struct {
	// example:
	//
	// 200
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataUsage) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskResponseBodyDataUsage) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataUsage) SetInputTokens(v int64) *GetEnterpriseVocAnalysisTaskResponseBodyDataUsage {
	s.InputTokens = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponseBodyDataUsage) SetOutputTokens(v int64) *GetEnterpriseVocAnalysisTaskResponseBodyDataUsage {
	s.OutputTokens = &v
	return s
}

type GetEnterpriseVocAnalysisTaskResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEnterpriseVocAnalysisTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEnterpriseVocAnalysisTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEnterpriseVocAnalysisTaskResponse) GoString() string {
	return s.String()
}

func (s *GetEnterpriseVocAnalysisTaskResponse) SetHeaders(v map[string]*string) *GetEnterpriseVocAnalysisTaskResponse {
	s.Headers = v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponse) SetStatusCode(v int32) *GetEnterpriseVocAnalysisTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEnterpriseVocAnalysisTaskResponse) SetBody(v *GetEnterpriseVocAnalysisTaskResponseBody) *GetEnterpriseVocAnalysisTaskResponse {
	s.Body = v
	return s
}

type GetGeneratedContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetGeneratedContentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGeneratedContentRequest) GoString() string {
	return s.String()
}

func (s *GetGeneratedContentRequest) SetAgentKey(v string) *GetGeneratedContentRequest {
	s.AgentKey = &v
	return s
}

func (s *GetGeneratedContentRequest) SetId(v int64) *GetGeneratedContentRequest {
	s.Id = &v
	return s
}

type GetGeneratedContentResponseBody struct {
	// example:
	//
	// NoData
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetGeneratedContentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetGeneratedContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGeneratedContentResponseBody) GoString() string {
	return s.String()
}

func (s *GetGeneratedContentResponseBody) SetCode(v string) *GetGeneratedContentResponseBody {
	s.Code = &v
	return s
}

func (s *GetGeneratedContentResponseBody) SetData(v *GetGeneratedContentResponseBodyData) *GetGeneratedContentResponseBody {
	s.Data = v
	return s
}

func (s *GetGeneratedContentResponseBody) SetHttpStatusCode(v int32) *GetGeneratedContentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetGeneratedContentResponseBody) SetMessage(v string) *GetGeneratedContentResponseBody {
	s.Message = &v
	return s
}

func (s *GetGeneratedContentResponseBody) SetRequestId(v string) *GetGeneratedContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGeneratedContentResponseBody) SetSuccess(v bool) *GetGeneratedContentResponseBody {
	s.Success = &v
	return s
}

type GetGeneratedContentResponseBodyData struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// media
	ContentDomain *string `json:"ContentDomain,omitempty" xml:"ContentDomain,omitempty"`
	ContentText   *string `json:"ContentText,omitempty" xml:"ContentText,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// xxx
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 86
	Id          *int64    `json:"Id,omitempty" xml:"Id,omitempty"`
	KeywordList []*string `json:"KeywordList,omitempty" xml:"KeywordList,omitempty" type:"Repeated"`
	Keywords    *string   `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	Prompt      *string   `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 1
	UpdateUser *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
	// example:
	//
	// 0961a514-2e26-4aa6-b22b-f592d145fe47
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s GetGeneratedContentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetGeneratedContentResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetGeneratedContentResponseBodyData) SetContent(v string) *GetGeneratedContentResponseBodyData {
	s.Content = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetContentDomain(v string) *GetGeneratedContentResponseBodyData {
	s.ContentDomain = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetContentText(v string) *GetGeneratedContentResponseBodyData {
	s.ContentText = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetCreateTime(v string) *GetGeneratedContentResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetCreateUser(v string) *GetGeneratedContentResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetDeviceId(v string) *GetGeneratedContentResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetId(v int64) *GetGeneratedContentResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetKeywordList(v []*string) *GetGeneratedContentResponseBodyData {
	s.KeywordList = v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetKeywords(v string) *GetGeneratedContentResponseBodyData {
	s.Keywords = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetPrompt(v string) *GetGeneratedContentResponseBodyData {
	s.Prompt = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetTaskId(v string) *GetGeneratedContentResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetTitle(v string) *GetGeneratedContentResponseBodyData {
	s.Title = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetUpdateTime(v string) *GetGeneratedContentResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetUpdateUser(v string) *GetGeneratedContentResponseBodyData {
	s.UpdateUser = &v
	return s
}

func (s *GetGeneratedContentResponseBodyData) SetUuid(v string) *GetGeneratedContentResponseBodyData {
	s.Uuid = &v
	return s
}

type GetGeneratedContentResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetGeneratedContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetGeneratedContentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGeneratedContentResponse) GoString() string {
	return s.String()
}

func (s *GetGeneratedContentResponse) SetHeaders(v map[string]*string) *GetGeneratedContentResponse {
	s.Headers = v
	return s
}

func (s *GetGeneratedContentResponse) SetStatusCode(v int32) *GetGeneratedContentResponse {
	s.StatusCode = &v
	return s
}

func (s *GetGeneratedContentResponse) SetBody(v *GetGeneratedContentResponseBody) *GetGeneratedContentResponse {
	s.Body = v
	return s
}

type GetHotTopicBroadcastRequest struct {
	// example:
	//
	// false
	CalcTotalToken *bool `json:"CalcTotalToken,omitempty" xml:"CalcTotalToken,omitempty"`
	// example:
	//
	// 分类筛选
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// 2024-10-11_13
	HotTopicVersion *string   `json:"HotTopicVersion,omitempty" xml:"HotTopicVersion,omitempty"`
	LocationQuery   *string   `json:"LocationQuery,omitempty" xml:"LocationQuery,omitempty"`
	Locations       []*string `json:"Locations,omitempty" xml:"Locations,omitempty" type:"Repeated"`
	Query           *string   `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// 5
	Size                              *int32                                                        `json:"Size,omitempty" xml:"Size,omitempty"`
	StepForCustomSummaryStyleConfig   *GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig   `json:"StepForCustomSummaryStyleConfig,omitempty" xml:"StepForCustomSummaryStyleConfig,omitempty" type:"Struct"`
	StepForNewsBroadcastContentConfig *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig `json:"StepForNewsBroadcastContentConfig,omitempty" xml:"StepForNewsBroadcastContentConfig,omitempty" type:"Struct"`
	// example:
	//
	// ["主题1","主题2"]
	Topics []*string `json:"Topics,omitempty" xml:"Topics,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetHotTopicBroadcastRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastRequest) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastRequest) SetCalcTotalToken(v bool) *GetHotTopicBroadcastRequest {
	s.CalcTotalToken = &v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetCategory(v string) *GetHotTopicBroadcastRequest {
	s.Category = &v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetCurrent(v int32) *GetHotTopicBroadcastRequest {
	s.Current = &v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetHotTopicVersion(v string) *GetHotTopicBroadcastRequest {
	s.HotTopicVersion = &v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetLocationQuery(v string) *GetHotTopicBroadcastRequest {
	s.LocationQuery = &v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetLocations(v []*string) *GetHotTopicBroadcastRequest {
	s.Locations = v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetQuery(v string) *GetHotTopicBroadcastRequest {
	s.Query = &v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetSize(v int32) *GetHotTopicBroadcastRequest {
	s.Size = &v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetStepForCustomSummaryStyleConfig(v *GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig) *GetHotTopicBroadcastRequest {
	s.StepForCustomSummaryStyleConfig = v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetStepForNewsBroadcastContentConfig(v *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig) *GetHotTopicBroadcastRequest {
	s.StepForNewsBroadcastContentConfig = v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetTopics(v []*string) *GetHotTopicBroadcastRequest {
	s.Topics = v
	return s
}

func (s *GetHotTopicBroadcastRequest) SetWorkspaceId(v string) *GetHotTopicBroadcastRequest {
	s.WorkspaceId = &v
	return s
}

type GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig struct {
	// example:
	//
	// 90
	SummaryImageCount *int32 `json:"SummaryImageCount,omitempty" xml:"SummaryImageCount,omitempty"`
	// example:
	//
	// 摘要模型
	SummaryModel *string `json:"SummaryModel,omitempty" xml:"SummaryModel,omitempty"`
	// example:
	//
	// 摘要-自定义Prompt
	SummaryPrompt *string `json:"SummaryPrompt,omitempty" xml:"SummaryPrompt,omitempty"`
}

func (s GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig) SetSummaryImageCount(v int32) *GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig {
	s.SummaryImageCount = &v
	return s
}

func (s *GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig) SetSummaryModel(v string) *GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig {
	s.SummaryModel = &v
	return s
}

func (s *GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig) SetSummaryPrompt(v string) *GetHotTopicBroadcastRequestStepForCustomSummaryStyleConfig {
	s.SummaryPrompt = &v
	return s
}

type GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig struct {
	// example:
	//
	// ["科技","经济","时政","娱乐"]
	Categories []*string `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	// Deprecated
	CustomHotValueWeights []*GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfigCustomHotValueWeights `json:"CustomHotValueWeights,omitempty" xml:"CustomHotValueWeights,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	TopicCount *int32 `json:"TopicCount,omitempty" xml:"TopicCount,omitempty"`
}

func (s GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig) SetCategories(v []*string) *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig {
	s.Categories = v
	return s
}

func (s *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig) SetCustomHotValueWeights(v []*GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfigCustomHotValueWeights) *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig {
	s.CustomHotValueWeights = v
	return s
}

func (s *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig) SetTopicCount(v int32) *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfig {
	s.TopicCount = &v
	return s
}

type GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfigCustomHotValueWeights struct {
	// example:
	//
	// views
	Dimension *string `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// example:
	//
	// 1
	Weight *int32 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfigCustomHotValueWeights) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfigCustomHotValueWeights) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfigCustomHotValueWeights) SetDimension(v string) *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfigCustomHotValueWeights {
	s.Dimension = &v
	return s
}

func (s *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfigCustomHotValueWeights) SetWeight(v int32) *GetHotTopicBroadcastRequestStepForNewsBroadcastContentConfigCustomHotValueWeights {
	s.Weight = &v
	return s
}

type GetHotTopicBroadcastShrinkRequest struct {
	// example:
	//
	// false
	CalcTotalToken *bool `json:"CalcTotalToken,omitempty" xml:"CalcTotalToken,omitempty"`
	// example:
	//
	// 分类筛选
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// 2024-10-11_13
	HotTopicVersion *string `json:"HotTopicVersion,omitempty" xml:"HotTopicVersion,omitempty"`
	LocationQuery   *string `json:"LocationQuery,omitempty" xml:"LocationQuery,omitempty"`
	LocationsShrink *string `json:"Locations,omitempty" xml:"Locations,omitempty"`
	Query           *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// 5
	Size                                    *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	StepForCustomSummaryStyleConfigShrink   *string `json:"StepForCustomSummaryStyleConfig,omitempty" xml:"StepForCustomSummaryStyleConfig,omitempty"`
	StepForNewsBroadcastContentConfigShrink *string `json:"StepForNewsBroadcastContentConfig,omitempty" xml:"StepForNewsBroadcastContentConfig,omitempty"`
	// example:
	//
	// ["主题1","主题2"]
	TopicsShrink *string `json:"Topics,omitempty" xml:"Topics,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetHotTopicBroadcastShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastShrinkRequest) SetCalcTotalToken(v bool) *GetHotTopicBroadcastShrinkRequest {
	s.CalcTotalToken = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetCategory(v string) *GetHotTopicBroadcastShrinkRequest {
	s.Category = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetCurrent(v int32) *GetHotTopicBroadcastShrinkRequest {
	s.Current = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetHotTopicVersion(v string) *GetHotTopicBroadcastShrinkRequest {
	s.HotTopicVersion = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetLocationQuery(v string) *GetHotTopicBroadcastShrinkRequest {
	s.LocationQuery = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetLocationsShrink(v string) *GetHotTopicBroadcastShrinkRequest {
	s.LocationsShrink = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetQuery(v string) *GetHotTopicBroadcastShrinkRequest {
	s.Query = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetSize(v int32) *GetHotTopicBroadcastShrinkRequest {
	s.Size = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetStepForCustomSummaryStyleConfigShrink(v string) *GetHotTopicBroadcastShrinkRequest {
	s.StepForCustomSummaryStyleConfigShrink = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetStepForNewsBroadcastContentConfigShrink(v string) *GetHotTopicBroadcastShrinkRequest {
	s.StepForNewsBroadcastContentConfigShrink = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetTopicsShrink(v string) *GetHotTopicBroadcastShrinkRequest {
	s.TopicsShrink = &v
	return s
}

func (s *GetHotTopicBroadcastShrinkRequest) SetWorkspaceId(v string) *GetHotTopicBroadcastShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type GetHotTopicBroadcastResponseBody struct {
	// example:
	//
	// NoData
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetHotTopicBroadcastResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetHotTopicBroadcastResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponseBody) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponseBody) SetCode(v string) *GetHotTopicBroadcastResponseBody {
	s.Code = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBody) SetData(v *GetHotTopicBroadcastResponseBodyData) *GetHotTopicBroadcastResponseBody {
	s.Data = v
	return s
}

func (s *GetHotTopicBroadcastResponseBody) SetHttpStatusCode(v int32) *GetHotTopicBroadcastResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBody) SetMessage(v string) *GetHotTopicBroadcastResponseBody {
	s.Message = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBody) SetRequestId(v string) *GetHotTopicBroadcastResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBody) SetSuccess(v bool) *GetHotTopicBroadcastResponseBody {
	s.Success = &v
	return s
}

type GetHotTopicBroadcastResponseBodyData struct {
	Data []*GetHotTopicBroadcastResponseBodyDataData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount     *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalTokenInfo *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo `json:"TotalTokenInfo,omitempty" xml:"TotalTokenInfo,omitempty" type:"Struct"`
}

func (s GetHotTopicBroadcastResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponseBodyData) SetData(v []*GetHotTopicBroadcastResponseBodyDataData) *GetHotTopicBroadcastResponseBodyData {
	s.Data = v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyData) SetTotalCount(v int32) *GetHotTopicBroadcastResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyData) SetTotalTokenInfo(v *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo) *GetHotTopicBroadcastResponseBodyData {
	s.TotalTokenInfo = v
	return s
}

type GetHotTopicBroadcastResponseBodyDataData struct {
	// example:
	//
	// 热点话题分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 34.7905341705522
	CustomHotValue *float64 `json:"CustomHotValue,omitempty" xml:"CustomHotValue,omitempty"`
	// example:
	//
	// 自定义热点话题文本摘要
	CustomTextSummary *string `json:"CustomTextSummary,omitempty" xml:"CustomTextSummary,omitempty"`
	// example:
	//
	// 热点话题名称
	HotTopic *string `json:"HotTopic,omitempty" xml:"HotTopic,omitempty"`
	// example:
	//
	// 热点话题摘要版本
	HotTopicVersion *string `json:"HotTopicVersion,omitempty" xml:"HotTopicVersion,omitempty"`
	// example:
	//
	// 1.4120480606282884
	HotValue *float64 `json:"HotValue,omitempty" xml:"HotValue,omitempty"`
	// example:
	//
	// 热点话题ID
	Id     *string                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	Images []*GetHotTopicBroadcastResponseBodyDataDataImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Repeated"`
	// example:
	//
	// 29
	InputToken *int32                                          `json:"InputToken,omitempty" xml:"InputToken,omitempty"`
	Locations  []*string                                       `json:"Locations,omitempty" xml:"Locations,omitempty" type:"Repeated"`
	News       []*GetHotTopicBroadcastResponseBodyDataDataNews `json:"News,omitempty" xml:"News,omitempty" type:"Repeated"`
	// example:
	//
	// 22
	OutputToken *int32                                           `json:"OutputToken,omitempty" xml:"OutputToken,omitempty"`
	Summary     *GetHotTopicBroadcastResponseBodyDataDataSummary `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Struct"`
	// example:
	//
	// 热点话题文本摘要
	TextSummary *string `json:"TextSummary,omitempty" xml:"TextSummary,omitempty"`
}

func (s GetHotTopicBroadcastResponseBodyDataData) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponseBodyDataData) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetCategory(v string) *GetHotTopicBroadcastResponseBodyDataData {
	s.Category = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetCreateTime(v string) *GetHotTopicBroadcastResponseBodyDataData {
	s.CreateTime = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetCustomHotValue(v float64) *GetHotTopicBroadcastResponseBodyDataData {
	s.CustomHotValue = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetCustomTextSummary(v string) *GetHotTopicBroadcastResponseBodyDataData {
	s.CustomTextSummary = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetHotTopic(v string) *GetHotTopicBroadcastResponseBodyDataData {
	s.HotTopic = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetHotTopicVersion(v string) *GetHotTopicBroadcastResponseBodyDataData {
	s.HotTopicVersion = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetHotValue(v float64) *GetHotTopicBroadcastResponseBodyDataData {
	s.HotValue = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetId(v string) *GetHotTopicBroadcastResponseBodyDataData {
	s.Id = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetImages(v []*GetHotTopicBroadcastResponseBodyDataDataImages) *GetHotTopicBroadcastResponseBodyDataData {
	s.Images = v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetInputToken(v int32) *GetHotTopicBroadcastResponseBodyDataData {
	s.InputToken = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetLocations(v []*string) *GetHotTopicBroadcastResponseBodyDataData {
	s.Locations = v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetNews(v []*GetHotTopicBroadcastResponseBodyDataDataNews) *GetHotTopicBroadcastResponseBodyDataData {
	s.News = v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetOutputToken(v int32) *GetHotTopicBroadcastResponseBodyDataData {
	s.OutputToken = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetSummary(v *GetHotTopicBroadcastResponseBodyDataDataSummary) *GetHotTopicBroadcastResponseBodyDataData {
	s.Summary = v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataData) SetTextSummary(v string) *GetHotTopicBroadcastResponseBodyDataData {
	s.TextSummary = &v
	return s
}

type GetHotTopicBroadcastResponseBodyDataDataImages struct {
	// example:
	//
	// http://www.example.com/a.png
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetHotTopicBroadcastResponseBodyDataDataImages) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponseBodyDataDataImages) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponseBodyDataDataImages) SetUrl(v string) *GetHotTopicBroadcastResponseBodyDataDataImages {
	s.Url = &v
	return s
}

type GetHotTopicBroadcastResponseBodyDataDataNews struct {
	AnalysisCategory *string `json:"AnalysisCategory,omitempty" xml:"AnalysisCategory,omitempty"`
	// example:
	//
	// 聚合后热点名称
	AnalysisTopic *string                                                 `json:"AnalysisTopic,omitempty" xml:"AnalysisTopic,omitempty"`
	Author        *string                                                 `json:"Author,omitempty" xml:"Author,omitempty"`
	Category      []*string                                               `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
	Comments      []*GetHotTopicBroadcastResponseBodyDataDataNewsComments `json:"Comments,omitempty" xml:"Comments,omitempty" type:"Repeated"`
	Content       *string                                                 `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 2024-06-13 08:45:05
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Domain     *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// 2024111110
	Dt *string `json:"Dt,omitempty" xml:"Dt,omitempty"`
	// example:
	//
	// 原始热点名称
	HotTopic *string   `json:"HotTopic,omitempty" xml:"HotTopic,omitempty"`
	ImgList  []*string `json:"ImgList,omitempty" xml:"ImgList,omitempty" type:"Repeated"`
	// logo
	//
	// example:
	//
	// https://www.example.com/a.png
	Logo *string `json:"Logo,omitempty" xml:"Logo,omitempty"`
	// example:
	//
	// 2024-10-10 12:12:00
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	Title   *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://www.example.com/a.png
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// 主键ID
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// example:
	//
	// 网站
	Website *string `json:"Website,omitempty" xml:"Website,omitempty"`
}

func (s GetHotTopicBroadcastResponseBodyDataDataNews) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponseBodyDataDataNews) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetAnalysisCategory(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.AnalysisCategory = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetAnalysisTopic(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.AnalysisTopic = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetAuthor(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Author = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetCategory(v []*string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Category = v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetComments(v []*GetHotTopicBroadcastResponseBodyDataDataNewsComments) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Comments = v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetContent(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Content = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetCreateTime(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.CreateTime = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetDomain(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Domain = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetDt(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Dt = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetHotTopic(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.HotTopic = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetImgList(v []*string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.ImgList = v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetLogo(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Logo = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetPubTime(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.PubTime = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetSummary(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Summary = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetTitle(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Title = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetUrl(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Url = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetUuid(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Uuid = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNews) SetWebsite(v string) *GetHotTopicBroadcastResponseBodyDataDataNews {
	s.Website = &v
	return s
}

type GetHotTopicBroadcastResponseBodyDataDataNewsComments struct {
	// example:
	//
	// 评论内容
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 评论用户名
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s GetHotTopicBroadcastResponseBodyDataDataNewsComments) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponseBodyDataDataNewsComments) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNewsComments) SetText(v string) *GetHotTopicBroadcastResponseBodyDataDataNewsComments {
	s.Text = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataNewsComments) SetUsername(v string) *GetHotTopicBroadcastResponseBodyDataDataNewsComments {
	s.Username = &v
	return s
}

type GetHotTopicBroadcastResponseBodyDataDataSummary struct {
	// example:
	//
	// 17
	InputToken *int32 `json:"InputToken,omitempty" xml:"InputToken,omitempty"`
	// example:
	//
	// 41
	OutputToken *int32                                                      `json:"OutputToken,omitempty" xml:"OutputToken,omitempty"`
	Summaries   []*GetHotTopicBroadcastResponseBodyDataDataSummarySummaries `json:"Summaries,omitempty" xml:"Summaries,omitempty" type:"Repeated"`
}

func (s GetHotTopicBroadcastResponseBodyDataDataSummary) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponseBodyDataDataSummary) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponseBodyDataDataSummary) SetInputToken(v int32) *GetHotTopicBroadcastResponseBodyDataDataSummary {
	s.InputToken = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataSummary) SetOutputToken(v int32) *GetHotTopicBroadcastResponseBodyDataDataSummary {
	s.OutputToken = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataSummary) SetSummaries(v []*GetHotTopicBroadcastResponseBodyDataDataSummarySummaries) *GetHotTopicBroadcastResponseBodyDataDataSummary {
	s.Summaries = v
	return s
}

type GetHotTopicBroadcastResponseBodyDataDataSummarySummaries struct {
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetHotTopicBroadcastResponseBodyDataDataSummarySummaries) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponseBodyDataDataSummarySummaries) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponseBodyDataDataSummarySummaries) SetSummary(v string) *GetHotTopicBroadcastResponseBodyDataDataSummarySummaries {
	s.Summary = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataDataSummarySummaries) SetTitle(v string) *GetHotTopicBroadcastResponseBodyDataDataSummarySummaries {
	s.Title = &v
	return s
}

type GetHotTopicBroadcastResponseBodyDataTotalTokenInfo struct {
	// example:
	//
	// 100
	HotTopicCount *int32 `json:"HotTopicCount,omitempty" xml:"HotTopicCount,omitempty"`
	// example:
	//
	// 100
	InputTokens *int32 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int32 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 100
	WordCount *int32 `json:"WordCount,omitempty" xml:"WordCount,omitempty"`
}

func (s GetHotTopicBroadcastResponseBodyDataTotalTokenInfo) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponseBodyDataTotalTokenInfo) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo) SetHotTopicCount(v int32) *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo {
	s.HotTopicCount = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo) SetInputTokens(v int32) *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo {
	s.InputTokens = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo) SetOutputTokens(v int32) *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo {
	s.OutputTokens = &v
	return s
}

func (s *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo) SetWordCount(v int32) *GetHotTopicBroadcastResponseBodyDataTotalTokenInfo {
	s.WordCount = &v
	return s
}

type GetHotTopicBroadcastResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHotTopicBroadcastResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHotTopicBroadcastResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHotTopicBroadcastResponse) GoString() string {
	return s.String()
}

func (s *GetHotTopicBroadcastResponse) SetHeaders(v map[string]*string) *GetHotTopicBroadcastResponse {
	s.Headers = v
	return s
}

func (s *GetHotTopicBroadcastResponse) SetStatusCode(v int32) *GetHotTopicBroadcastResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHotTopicBroadcastResponse) SetBody(v *GetHotTopicBroadcastResponseBody) *GetHotTopicBroadcastResponse {
	s.Body = v
	return s
}

type GetInterveneGlobalReplyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
}

func (s GetInterveneGlobalReplyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneGlobalReplyRequest) GoString() string {
	return s.String()
}

func (s *GetInterveneGlobalReplyRequest) SetAgentKey(v string) *GetInterveneGlobalReplyRequest {
	s.AgentKey = &v
	return s
}

type GetInterveneGlobalReplyResponseBody struct {
	// example:
	//
	// 0
	Code *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetInterveneGlobalReplyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInterveneGlobalReplyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneGlobalReplyResponseBody) GoString() string {
	return s.String()
}

func (s *GetInterveneGlobalReplyResponseBody) SetCode(v string) *GetInterveneGlobalReplyResponseBody {
	s.Code = &v
	return s
}

func (s *GetInterveneGlobalReplyResponseBody) SetData(v *GetInterveneGlobalReplyResponseBodyData) *GetInterveneGlobalReplyResponseBody {
	s.Data = v
	return s
}

func (s *GetInterveneGlobalReplyResponseBody) SetHttpStatusCode(v int32) *GetInterveneGlobalReplyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInterveneGlobalReplyResponseBody) SetMessage(v string) *GetInterveneGlobalReplyResponseBody {
	s.Message = &v
	return s
}

func (s *GetInterveneGlobalReplyResponseBody) SetRequestId(v string) *GetInterveneGlobalReplyResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInterveneGlobalReplyResponseBody) SetSuccess(v bool) *GetInterveneGlobalReplyResponseBody {
	s.Success = &v
	return s
}

type GetInterveneGlobalReplyResponseBodyData struct {
	ReplyMessagList []*GetInterveneGlobalReplyResponseBodyDataReplyMessagList `json:"ReplyMessagList,omitempty" xml:"ReplyMessagList,omitempty" type:"Repeated"`
}

func (s GetInterveneGlobalReplyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneGlobalReplyResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInterveneGlobalReplyResponseBodyData) SetReplyMessagList(v []*GetInterveneGlobalReplyResponseBodyDataReplyMessagList) *GetInterveneGlobalReplyResponseBodyData {
	s.ReplyMessagList = v
	return s
}

type GetInterveneGlobalReplyResponseBodyDataReplyMessagList struct {
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// namespace_qa_query
	ReplyType *string `json:"ReplyType,omitempty" xml:"ReplyType,omitempty"`
}

func (s GetInterveneGlobalReplyResponseBodyDataReplyMessagList) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneGlobalReplyResponseBodyDataReplyMessagList) GoString() string {
	return s.String()
}

func (s *GetInterveneGlobalReplyResponseBodyDataReplyMessagList) SetMessage(v string) *GetInterveneGlobalReplyResponseBodyDataReplyMessagList {
	s.Message = &v
	return s
}

func (s *GetInterveneGlobalReplyResponseBodyDataReplyMessagList) SetReplyType(v string) *GetInterveneGlobalReplyResponseBodyDataReplyMessagList {
	s.ReplyType = &v
	return s
}

type GetInterveneGlobalReplyResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInterveneGlobalReplyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInterveneGlobalReplyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneGlobalReplyResponse) GoString() string {
	return s.String()
}

func (s *GetInterveneGlobalReplyResponse) SetHeaders(v map[string]*string) *GetInterveneGlobalReplyResponse {
	s.Headers = v
	return s
}

func (s *GetInterveneGlobalReplyResponse) SetStatusCode(v int32) *GetInterveneGlobalReplyResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInterveneGlobalReplyResponse) SetBody(v *GetInterveneGlobalReplyResponseBody) *GetInterveneGlobalReplyResponse {
	s.Body = v
	return s
}

type GetInterveneImportTaskInfoRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 67c520d1fa43455ea44fb69fa402d54d_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 19162157
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetInterveneImportTaskInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneImportTaskInfoRequest) GoString() string {
	return s.String()
}

func (s *GetInterveneImportTaskInfoRequest) SetAgentKey(v string) *GetInterveneImportTaskInfoRequest {
	s.AgentKey = &v
	return s
}

func (s *GetInterveneImportTaskInfoRequest) SetTaskId(v string) *GetInterveneImportTaskInfoRequest {
	s.TaskId = &v
	return s
}

type GetInterveneImportTaskInfoResponseBody struct {
	// example:
	//
	// 0
	Code *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetInterveneImportTaskInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// Success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInterveneImportTaskInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneImportTaskInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetInterveneImportTaskInfoResponseBody) SetCode(v string) *GetInterveneImportTaskInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetInterveneImportTaskInfoResponseBody) SetData(v *GetInterveneImportTaskInfoResponseBodyData) *GetInterveneImportTaskInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetInterveneImportTaskInfoResponseBody) SetHttpStatusCode(v int32) *GetInterveneImportTaskInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInterveneImportTaskInfoResponseBody) SetMessage(v string) *GetInterveneImportTaskInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetInterveneImportTaskInfoResponseBody) SetRequestId(v string) *GetInterveneImportTaskInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInterveneImportTaskInfoResponseBody) SetSuccess(v bool) *GetInterveneImportTaskInfoResponseBody {
	s.Success = &v
	return s
}

type GetInterveneImportTaskInfoResponseBodyData struct {
	Status *GetInterveneImportTaskInfoResponseBodyDataStatus `json:"Status,omitempty" xml:"Status,omitempty" type:"Struct"`
}

func (s GetInterveneImportTaskInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneImportTaskInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInterveneImportTaskInfoResponseBodyData) SetStatus(v *GetInterveneImportTaskInfoResponseBodyDataStatus) *GetInterveneImportTaskInfoResponseBodyData {
	s.Status = v
	return s
}

type GetInterveneImportTaskInfoResponseBodyDataStatus struct {
	// example:
	//
	// success
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// example:
	//
	// 80
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	// example:
	//
	// 0
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 41405255
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// ft-task-20190101m8rnK
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s GetInterveneImportTaskInfoResponseBodyDataStatus) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneImportTaskInfoResponseBodyDataStatus) GoString() string {
	return s.String()
}

func (s *GetInterveneImportTaskInfoResponseBodyDataStatus) SetMsg(v string) *GetInterveneImportTaskInfoResponseBodyDataStatus {
	s.Msg = &v
	return s
}

func (s *GetInterveneImportTaskInfoResponseBodyDataStatus) SetPercentage(v int32) *GetInterveneImportTaskInfoResponseBodyDataStatus {
	s.Percentage = &v
	return s
}

func (s *GetInterveneImportTaskInfoResponseBodyDataStatus) SetStatus(v int32) *GetInterveneImportTaskInfoResponseBodyDataStatus {
	s.Status = &v
	return s
}

func (s *GetInterveneImportTaskInfoResponseBodyDataStatus) SetTaskId(v string) *GetInterveneImportTaskInfoResponseBodyDataStatus {
	s.TaskId = &v
	return s
}

func (s *GetInterveneImportTaskInfoResponseBodyDataStatus) SetTaskName(v string) *GetInterveneImportTaskInfoResponseBodyDataStatus {
	s.TaskName = &v
	return s
}

type GetInterveneImportTaskInfoResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInterveneImportTaskInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInterveneImportTaskInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneImportTaskInfoResponse) GoString() string {
	return s.String()
}

func (s *GetInterveneImportTaskInfoResponse) SetHeaders(v map[string]*string) *GetInterveneImportTaskInfoResponse {
	s.Headers = v
	return s
}

func (s *GetInterveneImportTaskInfoResponse) SetStatusCode(v int32) *GetInterveneImportTaskInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInterveneImportTaskInfoResponse) SetBody(v *GetInterveneImportTaskInfoResponseBody) *GetInterveneImportTaskInfoResponse {
	s.Body = v
	return s
}

type GetInterveneRuleDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2daaa2e0c209xb26acb97009ea77bd4b_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 12345
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s GetInterveneRuleDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneRuleDetailRequest) GoString() string {
	return s.String()
}

func (s *GetInterveneRuleDetailRequest) SetAgentKey(v string) *GetInterveneRuleDetailRequest {
	s.AgentKey = &v
	return s
}

func (s *GetInterveneRuleDetailRequest) SetRuleId(v int64) *GetInterveneRuleDetailRequest {
	s.RuleId = &v
	return s
}

type GetInterveneRuleDetailResponseBody struct {
	// example:
	//
	// 0
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetInterveneRuleDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 428DCC0D-3C63-5306-BD1B-124396AB97BE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInterveneRuleDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneRuleDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetInterveneRuleDetailResponseBody) SetCode(v string) *GetInterveneRuleDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBody) SetData(v *GetInterveneRuleDetailResponseBodyData) *GetInterveneRuleDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetInterveneRuleDetailResponseBody) SetHttpStatusCode(v int32) *GetInterveneRuleDetailResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBody) SetMessage(v string) *GetInterveneRuleDetailResponseBody {
	s.Message = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBody) SetRequestId(v string) *GetInterveneRuleDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBody) SetSuccess(v bool) *GetInterveneRuleDetailResponseBody {
	s.Success = &v
	return s
}

type GetInterveneRuleDetailResponseBodyData struct {
	InterveneRuleDetail *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail `json:"InterveneRuleDetail,omitempty" xml:"InterveneRuleDetail,omitempty" type:"Struct"`
}

func (s GetInterveneRuleDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneRuleDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInterveneRuleDetailResponseBodyData) SetInterveneRuleDetail(v *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail) *GetInterveneRuleDetailResponseBodyData {
	s.InterveneRuleDetail = v
	return s
}

type GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail struct {
	AnswerConfig []*GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig `json:"AnswerConfig,omitempty" xml:"AnswerConfig,omitempty" type:"Repeated"`
	EffectConfig *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig   `json:"EffectConfig,omitempty" xml:"EffectConfig,omitempty" type:"Struct"`
	// example:
	//
	// 0
	InterveneType *int32    `json:"InterveneType,omitempty" xml:"InterveneType,omitempty"`
	NamespaceList []*string `json:"NamespaceList,omitempty" xml:"NamespaceList,omitempty" type:"Repeated"`
	// example:
	//
	// 100418
	RuleId   *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
}

func (s GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail) GoString() string {
	return s.String()
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail) SetAnswerConfig(v []*GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail {
	s.AnswerConfig = v
	return s
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail) SetEffectConfig(v *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail {
	s.EffectConfig = v
	return s
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail) SetInterveneType(v int32) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail {
	s.InterveneType = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail) SetNamespaceList(v []*string) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail {
	s.NamespaceList = v
	return s
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail) SetRuleId(v int64) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail {
	s.RuleId = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail) SetRuleName(v string) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetail {
	s.RuleName = &v
	return s
}

type GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig struct {
	// example:
	//
	// 0
	AnswerType *int32  `json:"AnswerType,omitempty" xml:"AnswerType,omitempty"`
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// namespace_qa_query
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig) GoString() string {
	return s.String()
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig) SetAnswerType(v int32) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig {
	s.AnswerType = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig) SetMessage(v string) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig {
	s.Message = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig) SetNamespace(v string) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailAnswerConfig {
	s.Namespace = &v
	return s
}

type GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig struct {
	// example:
	//
	// 0
	EffectType *int32 `json:"EffectType,omitempty" xml:"EffectType,omitempty"`
	// example:
	//
	// 2023-11-25 14:21:15
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 2023-11-25 14:21:15
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig) GoString() string {
	return s.String()
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig) SetEffectType(v int32) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig {
	s.EffectType = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig) SetEndTime(v string) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig {
	s.EndTime = &v
	return s
}

func (s *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig) SetStartTime(v string) *GetInterveneRuleDetailResponseBodyDataInterveneRuleDetailEffectConfig {
	s.StartTime = &v
	return s
}

type GetInterveneRuleDetailResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInterveneRuleDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInterveneRuleDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneRuleDetailResponse) GoString() string {
	return s.String()
}

func (s *GetInterveneRuleDetailResponse) SetHeaders(v map[string]*string) *GetInterveneRuleDetailResponse {
	s.Headers = v
	return s
}

func (s *GetInterveneRuleDetailResponse) SetStatusCode(v int32) *GetInterveneRuleDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInterveneRuleDetailResponse) SetBody(v *GetInterveneRuleDetailResponseBody) *GetInterveneRuleDetailResponse {
	s.Body = v
	return s
}

type GetInterveneTemplateFileUrlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
}

func (s GetInterveneTemplateFileUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneTemplateFileUrlRequest) GoString() string {
	return s.String()
}

func (s *GetInterveneTemplateFileUrlRequest) SetAgentKey(v string) *GetInterveneTemplateFileUrlRequest {
	s.AgentKey = &v
	return s
}

type GetInterveneTemplateFileUrlResponseBody struct {
	// example:
	//
	// 0
	Code *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetInterveneTemplateFileUrlResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// DA021073-17CE-5CCF-9FEB-93226C766887
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInterveneTemplateFileUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneTemplateFileUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetInterveneTemplateFileUrlResponseBody) SetCode(v string) *GetInterveneTemplateFileUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetInterveneTemplateFileUrlResponseBody) SetData(v *GetInterveneTemplateFileUrlResponseBodyData) *GetInterveneTemplateFileUrlResponseBody {
	s.Data = v
	return s
}

func (s *GetInterveneTemplateFileUrlResponseBody) SetHttpStatusCode(v int32) *GetInterveneTemplateFileUrlResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInterveneTemplateFileUrlResponseBody) SetMessage(v string) *GetInterveneTemplateFileUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetInterveneTemplateFileUrlResponseBody) SetRequestId(v string) *GetInterveneTemplateFileUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInterveneTemplateFileUrlResponseBody) SetSuccess(v bool) *GetInterveneTemplateFileUrlResponseBody {
	s.Success = &v
	return s
}

type GetInterveneTemplateFileUrlResponseBodyData struct {
	// example:
	//
	// http://xxx/xxx.xls
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s GetInterveneTemplateFileUrlResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneTemplateFileUrlResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInterveneTemplateFileUrlResponseBodyData) SetFileUrl(v string) *GetInterveneTemplateFileUrlResponseBodyData {
	s.FileUrl = &v
	return s
}

type GetInterveneTemplateFileUrlResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInterveneTemplateFileUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInterveneTemplateFileUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInterveneTemplateFileUrlResponse) GoString() string {
	return s.String()
}

func (s *GetInterveneTemplateFileUrlResponse) SetHeaders(v map[string]*string) *GetInterveneTemplateFileUrlResponse {
	s.Headers = v
	return s
}

func (s *GetInterveneTemplateFileUrlResponse) SetStatusCode(v int32) *GetInterveneTemplateFileUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInterveneTemplateFileUrlResponse) SetBody(v *GetInterveneTemplateFileUrlResponseBody) *GetInterveneTemplateFileUrlResponse {
	s.Body = v
	return s
}

type GetMaterialByIdRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 67c520d1fa43455ea44fb69fa402d54d_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetMaterialByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMaterialByIdRequest) GoString() string {
	return s.String()
}

func (s *GetMaterialByIdRequest) SetAgentKey(v string) *GetMaterialByIdRequest {
	s.AgentKey = &v
	return s
}

func (s *GetMaterialByIdRequest) SetId(v int64) *GetMaterialByIdRequest {
	s.Id = &v
	return s
}

type GetMaterialByIdResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetMaterialByIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 数据不存在
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// false
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMaterialByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMaterialByIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetMaterialByIdResponseBody) SetCode(v string) *GetMaterialByIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetMaterialByIdResponseBody) SetData(v *GetMaterialByIdResponseBodyData) *GetMaterialByIdResponseBody {
	s.Data = v
	return s
}

func (s *GetMaterialByIdResponseBody) SetHttpStatusCode(v int32) *GetMaterialByIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMaterialByIdResponseBody) SetMessage(v string) *GetMaterialByIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetMaterialByIdResponseBody) SetRequestId(v string) *GetMaterialByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMaterialByIdResponseBody) SetSuccess(v bool) *GetMaterialByIdResponseBody {
	s.Success = &v
	return s
}

type GetMaterialByIdResponseBodyData struct {
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 2023-03-21 11:34:19
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1
	CreateUser  *string   `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	DocKeywords []*string `json:"DocKeywords,omitempty" xml:"DocKeywords,omitempty" type:"Repeated"`
	// example:
	//
	// pdf
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// https://www.example.com
	ExternalUrl *string `json:"ExternalUrl,omitempty" xml:"ExternalUrl,omitempty"`
	HtmlContent *string `json:"HtmlContent,omitempty" xml:"HtmlContent,omitempty"`
	// example:
	//
	// 32
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 2023-04-11 06:14:07
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// https://www.example.com
	PublicUrl *string `json:"PublicUrl,omitempty" xml:"PublicUrl,omitempty"`
	// example:
	//
	// 1
	ShareAttr *int32 `json:"ShareAttr,omitempty" xml:"ShareAttr,omitempty"`
	// example:
	//
	// user_upload
	SrcFrom           *string `json:"SrcFrom,omitempty" xml:"SrcFrom,omitempty"`
	Summary           *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	TextContent       *string `json:"TextContent,omitempty" xml:"TextContent,omitempty"`
	ThumbnailInBase64 *string `json:"ThumbnailInBase64,omitempty" xml:"ThumbnailInBase64,omitempty"`
	Title             *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 2022-04-08 19:33:01
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 1
	UpdateUser *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
	// example:
	//
	// https://www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetMaterialByIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMaterialByIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMaterialByIdResponseBodyData) SetAuthor(v string) *GetMaterialByIdResponseBodyData {
	s.Author = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetCreateTime(v string) *GetMaterialByIdResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetCreateUser(v string) *GetMaterialByIdResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetDocKeywords(v []*string) *GetMaterialByIdResponseBodyData {
	s.DocKeywords = v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetDocType(v string) *GetMaterialByIdResponseBodyData {
	s.DocType = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetExternalUrl(v string) *GetMaterialByIdResponseBodyData {
	s.ExternalUrl = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetHtmlContent(v string) *GetMaterialByIdResponseBodyData {
	s.HtmlContent = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetId(v int64) *GetMaterialByIdResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetPubTime(v string) *GetMaterialByIdResponseBodyData {
	s.PubTime = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetPublicUrl(v string) *GetMaterialByIdResponseBodyData {
	s.PublicUrl = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetShareAttr(v int32) *GetMaterialByIdResponseBodyData {
	s.ShareAttr = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetSrcFrom(v string) *GetMaterialByIdResponseBodyData {
	s.SrcFrom = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetSummary(v string) *GetMaterialByIdResponseBodyData {
	s.Summary = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetTextContent(v string) *GetMaterialByIdResponseBodyData {
	s.TextContent = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetThumbnailInBase64(v string) *GetMaterialByIdResponseBodyData {
	s.ThumbnailInBase64 = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetTitle(v string) *GetMaterialByIdResponseBodyData {
	s.Title = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetUpdateTime(v string) *GetMaterialByIdResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetUpdateUser(v string) *GetMaterialByIdResponseBodyData {
	s.UpdateUser = &v
	return s
}

func (s *GetMaterialByIdResponseBodyData) SetUrl(v string) *GetMaterialByIdResponseBodyData {
	s.Url = &v
	return s
}

type GetMaterialByIdResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMaterialByIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMaterialByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMaterialByIdResponse) GoString() string {
	return s.String()
}

func (s *GetMaterialByIdResponse) SetHeaders(v map[string]*string) *GetMaterialByIdResponse {
	s.Headers = v
	return s
}

func (s *GetMaterialByIdResponse) SetStatusCode(v int32) *GetMaterialByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMaterialByIdResponse) SetBody(v *GetMaterialByIdResponseBody) *GetMaterialByIdResponse {
	s.Body = v
	return s
}

type GetPropertiesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
}

func (s GetPropertiesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesRequest) GoString() string {
	return s.String()
}

func (s *GetPropertiesRequest) SetAgentKey(v string) *GetPropertiesRequest {
	s.AgentKey = &v
	return s
}

type GetPropertiesResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetPropertiesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPropertiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBody) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBody) SetCode(v string) *GetPropertiesResponseBody {
	s.Code = &v
	return s
}

func (s *GetPropertiesResponseBody) SetData(v *GetPropertiesResponseBodyData) *GetPropertiesResponseBody {
	s.Data = v
	return s
}

func (s *GetPropertiesResponseBody) SetHttpStatusCode(v int32) *GetPropertiesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetPropertiesResponseBody) SetMessage(v string) *GetPropertiesResponseBody {
	s.Message = &v
	return s
}

func (s *GetPropertiesResponseBody) SetRequestId(v string) *GetPropertiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPropertiesResponseBody) SetSuccess(v bool) *GetPropertiesResponseBody {
	s.Success = &v
	return s
}

type GetPropertiesResponseBodyData struct {
	ChatConfig              map[string]interface{}                                `json:"ChatConfig,omitempty" xml:"ChatConfig,omitempty"`
	ConsoleConfig           *GetPropertiesResponseBodyDataConsoleConfig           `json:"ConsoleConfig,omitempty" xml:"ConsoleConfig,omitempty" type:"Struct"`
	GeneralConfigMap        map[string]interface{}                                `json:"GeneralConfigMap,omitempty" xml:"GeneralConfigMap,omitempty"`
	IntelligentSearchConfig *GetPropertiesResponseBodyDataIntelligentSearchConfig `json:"IntelligentSearchConfig,omitempty" xml:"IntelligentSearchConfig,omitempty" type:"Struct"`
	SearchSources           []*GetPropertiesResponseBodyDataSearchSources         `json:"SearchSources,omitempty" xml:"SearchSources,omitempty" type:"Repeated"`
	// example:
	//
	// true
	SlrAuthorized            *bool                                                    `json:"SlrAuthorized,omitempty" xml:"SlrAuthorized,omitempty"`
	UserInfo                 *GetPropertiesResponseBodyDataUserInfo                   `json:"UserInfo,omitempty" xml:"UserInfo,omitempty" type:"Struct"`
	WanxiangImageSizeConfig  []*GetPropertiesResponseBodyDataWanxiangImageSizeConfig  `json:"WanxiangImageSizeConfig,omitempty" xml:"WanxiangImageSizeConfig,omitempty" type:"Repeated"`
	WanxiangImageStyleConfig []*GetPropertiesResponseBodyDataWanxiangImageStyleConfig `json:"WanxiangImageStyleConfig,omitempty" xml:"WanxiangImageStyleConfig,omitempty" type:"Repeated"`
}

func (s GetPropertiesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyData) SetChatConfig(v map[string]interface{}) *GetPropertiesResponseBodyData {
	s.ChatConfig = v
	return s
}

func (s *GetPropertiesResponseBodyData) SetConsoleConfig(v *GetPropertiesResponseBodyDataConsoleConfig) *GetPropertiesResponseBodyData {
	s.ConsoleConfig = v
	return s
}

func (s *GetPropertiesResponseBodyData) SetGeneralConfigMap(v map[string]interface{}) *GetPropertiesResponseBodyData {
	s.GeneralConfigMap = v
	return s
}

func (s *GetPropertiesResponseBodyData) SetIntelligentSearchConfig(v *GetPropertiesResponseBodyDataIntelligentSearchConfig) *GetPropertiesResponseBodyData {
	s.IntelligentSearchConfig = v
	return s
}

func (s *GetPropertiesResponseBodyData) SetSearchSources(v []*GetPropertiesResponseBodyDataSearchSources) *GetPropertiesResponseBodyData {
	s.SearchSources = v
	return s
}

func (s *GetPropertiesResponseBodyData) SetSlrAuthorized(v bool) *GetPropertiesResponseBodyData {
	s.SlrAuthorized = &v
	return s
}

func (s *GetPropertiesResponseBodyData) SetUserInfo(v *GetPropertiesResponseBodyDataUserInfo) *GetPropertiesResponseBodyData {
	s.UserInfo = v
	return s
}

func (s *GetPropertiesResponseBodyData) SetWanxiangImageSizeConfig(v []*GetPropertiesResponseBodyDataWanxiangImageSizeConfig) *GetPropertiesResponseBodyData {
	s.WanxiangImageSizeConfig = v
	return s
}

func (s *GetPropertiesResponseBodyData) SetWanxiangImageStyleConfig(v []*GetPropertiesResponseBodyDataWanxiangImageStyleConfig) *GetPropertiesResponseBodyData {
	s.WanxiangImageStyleConfig = v
	return s
}

type GetPropertiesResponseBodyDataConsoleConfig struct {
	// example:
	//
	// xx
	TipContent *string `json:"TipContent,omitempty" xml:"TipContent,omitempty"`
	Title      *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetPropertiesResponseBodyDataConsoleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyDataConsoleConfig) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyDataConsoleConfig) SetTipContent(v string) *GetPropertiesResponseBodyDataConsoleConfig {
	s.TipContent = &v
	return s
}

func (s *GetPropertiesResponseBodyDataConsoleConfig) SetTitle(v string) *GetPropertiesResponseBodyDataConsoleConfig {
	s.Title = &v
	return s
}

type GetPropertiesResponseBodyDataIntelligentSearchConfig struct {
	// example:
	//
	// xxx
	ProductDescription *string                                                              `json:"ProductDescription,omitempty" xml:"ProductDescription,omitempty"`
	SearchSamples      []*GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples `json:"SearchSamples,omitempty" xml:"SearchSamples,omitempty" type:"Repeated"`
	SearchSources      []*GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources `json:"SearchSources,omitempty" xml:"SearchSources,omitempty" type:"Repeated"`
}

func (s GetPropertiesResponseBodyDataIntelligentSearchConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyDataIntelligentSearchConfig) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfig) SetProductDescription(v string) *GetPropertiesResponseBodyDataIntelligentSearchConfig {
	s.ProductDescription = &v
	return s
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfig) SetSearchSamples(v []*GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples) *GetPropertiesResponseBodyDataIntelligentSearchConfig {
	s.SearchSamples = v
	return s
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfig) SetSearchSources(v []*GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources) *GetPropertiesResponseBodyDataIntelligentSearchConfig {
	s.SearchSources = v
	return s
}

type GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples struct {
	Articles []*GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles `json:"Articles,omitempty" xml:"Articles,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// xxx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples) SetArticles(v []*GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples {
	s.Articles = v
	return s
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples) SetPrompt(v string) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples {
	s.Prompt = &v
	return s
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples) SetText(v string) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamples {
	s.Text = &v
	return s
}

type GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles struct {
	// example:
	//
	// true
	Select *bool `json:"Select,omitempty" xml:"Select,omitempty"`
	// example:
	//
	// false
	Stared *bool `json:"Stared,omitempty" xml:"Stared,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://xxx.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles) SetSelect(v bool) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles {
	s.Select = &v
	return s
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles) SetStared(v bool) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles {
	s.Stared = &v
	return s
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles) SetTitle(v string) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles {
	s.Title = &v
	return s
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles) SetUrl(v string) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSamplesArticles {
	s.Url = &v
	return s
}

type GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources struct {
	// example:
	//
	// xx
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// xx
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// xx
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources) SetCode(v string) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources {
	s.Code = &v
	return s
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources) SetDatasetName(v string) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources {
	s.DatasetName = &v
	return s
}

func (s *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources) SetName(v string) *GetPropertiesResponseBodyDataIntelligentSearchConfigSearchSources {
	s.Name = &v
	return s
}

type GetPropertiesResponseBodyDataSearchSources struct {
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// SystemSearch
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetPropertiesResponseBodyDataSearchSources) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyDataSearchSources) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyDataSearchSources) SetLabel(v string) *GetPropertiesResponseBodyDataSearchSources {
	s.Label = &v
	return s
}

func (s *GetPropertiesResponseBodyDataSearchSources) SetValue(v string) *GetPropertiesResponseBodyDataSearchSources {
	s.Value = &v
	return s
}

type GetPropertiesResponseBodyDataUserInfo struct {
	// example:
	//
	// 1
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// example:
	//
	// 1
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// example:
	//
	// 1
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// admin
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s GetPropertiesResponseBodyDataUserInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyDataUserInfo) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyDataUserInfo) SetAgentId(v string) *GetPropertiesResponseBodyDataUserInfo {
	s.AgentId = &v
	return s
}

func (s *GetPropertiesResponseBodyDataUserInfo) SetTenantId(v string) *GetPropertiesResponseBodyDataUserInfo {
	s.TenantId = &v
	return s
}

func (s *GetPropertiesResponseBodyDataUserInfo) SetUserId(v string) *GetPropertiesResponseBodyDataUserInfo {
	s.UserId = &v
	return s
}

func (s *GetPropertiesResponseBodyDataUserInfo) SetUsername(v string) *GetPropertiesResponseBodyDataUserInfo {
	s.Username = &v
	return s
}

type GetPropertiesResponseBodyDataWanxiangImageSizeConfig struct {
	// example:
	//
	// 1:1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1024*1024
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetPropertiesResponseBodyDataWanxiangImageSizeConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyDataWanxiangImageSizeConfig) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyDataWanxiangImageSizeConfig) SetName(v string) *GetPropertiesResponseBodyDataWanxiangImageSizeConfig {
	s.Name = &v
	return s
}

func (s *GetPropertiesResponseBodyDataWanxiangImageSizeConfig) SetValue(v string) *GetPropertiesResponseBodyDataWanxiangImageSizeConfig {
	s.Value = &v
	return s
}

type GetPropertiesResponseBodyDataWanxiangImageStyleConfig struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// https://img.alicdn.com/imgextra/i4/O1CN01RzKicz1W0YWzYkWcK_!!6000000002726-2-tps-132-104.png
	Pic *string `json:"Pic,omitempty" xml:"Pic,omitempty"`
	// example:
	//
	// <auto>
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetPropertiesResponseBodyDataWanxiangImageStyleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponseBodyDataWanxiangImageStyleConfig) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponseBodyDataWanxiangImageStyleConfig) SetName(v string) *GetPropertiesResponseBodyDataWanxiangImageStyleConfig {
	s.Name = &v
	return s
}

func (s *GetPropertiesResponseBodyDataWanxiangImageStyleConfig) SetPic(v string) *GetPropertiesResponseBodyDataWanxiangImageStyleConfig {
	s.Pic = &v
	return s
}

func (s *GetPropertiesResponseBodyDataWanxiangImageStyleConfig) SetValue(v string) *GetPropertiesResponseBodyDataWanxiangImageStyleConfig {
	s.Value = &v
	return s
}

type GetPropertiesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPropertiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPropertiesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPropertiesResponse) GoString() string {
	return s.String()
}

func (s *GetPropertiesResponse) SetHeaders(v map[string]*string) *GetPropertiesResponse {
	s.Headers = v
	return s
}

func (s *GetPropertiesResponse) SetStatusCode(v int32) *GetPropertiesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPropertiesResponse) SetBody(v *GetPropertiesResponseBody) *GetPropertiesResponse {
	s.Body = v
	return s
}

type GetSmartClipTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// task-03d46184ee7d8749
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetSmartClipTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSmartClipTaskRequest) GoString() string {
	return s.String()
}

func (s *GetSmartClipTaskRequest) SetTaskId(v string) *GetSmartClipTaskRequest {
	s.TaskId = &v
	return s
}

func (s *GetSmartClipTaskRequest) SetWorkspaceId(v string) *GetSmartClipTaskRequest {
	s.WorkspaceId = &v
	return s
}

type GetSmartClipTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetSmartClipTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSmartClipTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSmartClipTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetSmartClipTaskResponseBody) SetCode(v string) *GetSmartClipTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetSmartClipTaskResponseBody) SetData(v *GetSmartClipTaskResponseBodyData) *GetSmartClipTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetSmartClipTaskResponseBody) SetHttpStatusCode(v int32) *GetSmartClipTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetSmartClipTaskResponseBody) SetMessage(v string) *GetSmartClipTaskResponseBody {
	s.Message = &v
	return s
}

func (s *GetSmartClipTaskResponseBody) SetRequestId(v string) *GetSmartClipTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSmartClipTaskResponseBody) SetSuccess(v bool) *GetSmartClipTaskResponseBody {
	s.Success = &v
	return s
}

type GetSmartClipTaskResponseBodyData struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// RUNNING
	Status  *string                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	SubJobs []*GetSmartClipTaskResponseBodyDataSubJobs `json:"SubJobs,omitempty" xml:"SubJobs,omitempty" type:"Repeated"`
}

func (s GetSmartClipTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSmartClipTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSmartClipTaskResponseBodyData) SetErrorMessage(v string) *GetSmartClipTaskResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyData) SetStatus(v string) *GetSmartClipTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyData) SetSubJobs(v []*GetSmartClipTaskResponseBodyDataSubJobs) *GetSmartClipTaskResponseBodyData {
	s.SubJobs = v
	return s
}

type GetSmartClipTaskResponseBodyDataSubJobs struct {
	// example:
	//
	// x\"x\"x\"x
	ErrorMessage *string                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	FileAttr     *GetSmartClipTaskResponseBodyDataSubJobsFileAttr `json:"FileAttr,omitempty" xml:"FileAttr,omitempty" type:"Struct"`
	// example:
	//
	// oss://default/bucket-name/path-xxx/xxx-1.mp4
	FileKey *string `json:"FileKey,omitempty" xml:"FileKey,omitempty"`
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// xxxxx
	SubJobId *string `json:"SubJobId,omitempty" xml:"SubJobId,omitempty"`
}

func (s GetSmartClipTaskResponseBodyDataSubJobs) String() string {
	return tea.Prettify(s)
}

func (s GetSmartClipTaskResponseBodyDataSubJobs) GoString() string {
	return s.String()
}

func (s *GetSmartClipTaskResponseBodyDataSubJobs) SetErrorMessage(v string) *GetSmartClipTaskResponseBodyDataSubJobs {
	s.ErrorMessage = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyDataSubJobs) SetFileAttr(v *GetSmartClipTaskResponseBodyDataSubJobsFileAttr) *GetSmartClipTaskResponseBodyDataSubJobs {
	s.FileAttr = v
	return s
}

func (s *GetSmartClipTaskResponseBodyDataSubJobs) SetFileKey(v string) *GetSmartClipTaskResponseBodyDataSubJobs {
	s.FileKey = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyDataSubJobs) SetStatus(v string) *GetSmartClipTaskResponseBodyDataSubJobs {
	s.Status = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyDataSubJobs) SetSubJobId(v string) *GetSmartClipTaskResponseBodyDataSubJobs {
	s.SubJobId = &v
	return s
}

type GetSmartClipTaskResponseBodyDataSubJobsFileAttr struct {
	// example:
	//
	// 120
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 290804
	FileLength *string `json:"FileLength,omitempty" xml:"FileLength,omitempty"`
	// example:
	//
	// 2024-12-12.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 1080
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// http://www.example.com/tmp.mp4
	TmpUrl *string `json:"TmpUrl,omitempty" xml:"TmpUrl,omitempty"`
	// example:
	//
	// 1920
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetSmartClipTaskResponseBodyDataSubJobsFileAttr) String() string {
	return tea.Prettify(s)
}

func (s GetSmartClipTaskResponseBodyDataSubJobsFileAttr) GoString() string {
	return s.String()
}

func (s *GetSmartClipTaskResponseBodyDataSubJobsFileAttr) SetDuration(v float64) *GetSmartClipTaskResponseBodyDataSubJobsFileAttr {
	s.Duration = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyDataSubJobsFileAttr) SetFileLength(v string) *GetSmartClipTaskResponseBodyDataSubJobsFileAttr {
	s.FileLength = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyDataSubJobsFileAttr) SetFileName(v string) *GetSmartClipTaskResponseBodyDataSubJobsFileAttr {
	s.FileName = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyDataSubJobsFileAttr) SetHeight(v int32) *GetSmartClipTaskResponseBodyDataSubJobsFileAttr {
	s.Height = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyDataSubJobsFileAttr) SetTmpUrl(v string) *GetSmartClipTaskResponseBodyDataSubJobsFileAttr {
	s.TmpUrl = &v
	return s
}

func (s *GetSmartClipTaskResponseBodyDataSubJobsFileAttr) SetWidth(v int32) *GetSmartClipTaskResponseBodyDataSubJobsFileAttr {
	s.Width = &v
	return s
}

type GetSmartClipTaskResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSmartClipTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSmartClipTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSmartClipTaskResponse) GoString() string {
	return s.String()
}

func (s *GetSmartClipTaskResponse) SetHeaders(v map[string]*string) *GetSmartClipTaskResponse {
	s.Headers = v
	return s
}

func (s *GetSmartClipTaskResponse) SetStatusCode(v int32) *GetSmartClipTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSmartClipTaskResponse) SetBody(v *GetSmartClipTaskResponseBody) *GetSmartClipTaskResponse {
	s.Body = v
	return s
}

type GetTopicByIdRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 数据ID
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetTopicByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTopicByIdRequest) GoString() string {
	return s.String()
}

func (s *GetTopicByIdRequest) SetAgentKey(v string) *GetTopicByIdRequest {
	s.AgentKey = &v
	return s
}

func (s *GetTopicByIdRequest) SetId(v string) *GetTopicByIdRequest {
	s.Id = &v
	return s
}

type GetTopicByIdResponseBody struct {
	// example:
	//
	// NoData
	Code *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetTopicByIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetTopicByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTopicByIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetTopicByIdResponseBody) SetCode(v string) *GetTopicByIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetTopicByIdResponseBody) SetData(v *GetTopicByIdResponseBodyData) *GetTopicByIdResponseBody {
	s.Data = v
	return s
}

func (s *GetTopicByIdResponseBody) SetHttpStatusCode(v int32) *GetTopicByIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTopicByIdResponseBody) SetMessage(v string) *GetTopicByIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetTopicByIdResponseBody) SetRequestId(v string) *GetTopicByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTopicByIdResponseBody) SetSuccess(v bool) *GetTopicByIdResponseBody {
	s.Success = &v
	return s
}

type GetTopicByIdResponseBodyData struct {
	// example:
	//
	// 异步任务ID（自定义主题场景下使用）
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	// example:
	//
	// 创建用户ID（自定义主题场景下使用）
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// 43
	HotValue *int64 `json:"HotValue,omitempty" xml:"HotValue,omitempty"`
	// example:
	//
	// 热榜ID
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// PENDING
	Status           *string                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	StructureSummary []*GetTopicByIdResponseBodyDataStructureSummary `json:"StructureSummary,omitempty" xml:"StructureSummary,omitempty" type:"Repeated"`
	// example:
	//
	// 热榜摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 异步任务失败错误信息
	TaskErrorMessage *string `json:"TaskErrorMessage,omitempty" xml:"TaskErrorMessage,omitempty"`
	// example:
	//
	// 14
	TaskStatus *int32 `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// example:
	//
	// 主题唯一名称
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// example:
	//
	// 热榜源，目前支持的热榜源: Toutiao：头条、Quark：夸克、Baidu：百度、Sina：新浪。Custom：自定义、Aggregation：热点话题榜
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
	// example:
	//
	// 数据版本
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetTopicByIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTopicByIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTopicByIdResponseBodyData) SetAsyncTaskId(v string) *GetTopicByIdResponseBodyData {
	s.AsyncTaskId = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetCreateUser(v string) *GetTopicByIdResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetHotValue(v int64) *GetTopicByIdResponseBodyData {
	s.HotValue = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetId(v string) *GetTopicByIdResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetStatus(v string) *GetTopicByIdResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetStructureSummary(v []*GetTopicByIdResponseBodyDataStructureSummary) *GetTopicByIdResponseBodyData {
	s.StructureSummary = v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetSummary(v string) *GetTopicByIdResponseBodyData {
	s.Summary = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetTaskErrorMessage(v string) *GetTopicByIdResponseBodyData {
	s.TaskErrorMessage = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetTaskStatus(v int32) *GetTopicByIdResponseBodyData {
	s.TaskStatus = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetTopic(v string) *GetTopicByIdResponseBodyData {
	s.Topic = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetTopicSource(v string) *GetTopicByIdResponseBodyData {
	s.TopicSource = &v
	return s
}

func (s *GetTopicByIdResponseBodyData) SetVersion(v string) *GetTopicByIdResponseBodyData {
	s.Version = &v
	return s
}

type GetTopicByIdResponseBodyDataStructureSummary struct {
	DocList []*GetTopicByIdResponseBodyDataStructureSummaryDocList `json:"DocList,omitempty" xml:"DocList,omitempty" type:"Repeated"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetTopicByIdResponseBodyDataStructureSummary) String() string {
	return tea.Prettify(s)
}

func (s GetTopicByIdResponseBodyDataStructureSummary) GoString() string {
	return s.String()
}

func (s *GetTopicByIdResponseBodyDataStructureSummary) SetDocList(v []*GetTopicByIdResponseBodyDataStructureSummaryDocList) *GetTopicByIdResponseBodyDataStructureSummary {
	s.DocList = v
	return s
}

func (s *GetTopicByIdResponseBodyDataStructureSummary) SetSummary(v string) *GetTopicByIdResponseBodyDataStructureSummary {
	s.Summary = &v
	return s
}

func (s *GetTopicByIdResponseBodyDataStructureSummary) SetTitle(v string) *GetTopicByIdResponseBodyDataStructureSummary {
	s.Title = &v
	return s
}

type GetTopicByIdResponseBodyDataStructureSummaryDocList struct {
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetTopicByIdResponseBodyDataStructureSummaryDocList) String() string {
	return tea.Prettify(s)
}

func (s GetTopicByIdResponseBodyDataStructureSummaryDocList) GoString() string {
	return s.String()
}

func (s *GetTopicByIdResponseBodyDataStructureSummaryDocList) SetSource(v string) *GetTopicByIdResponseBodyDataStructureSummaryDocList {
	s.Source = &v
	return s
}

func (s *GetTopicByIdResponseBodyDataStructureSummaryDocList) SetTitle(v string) *GetTopicByIdResponseBodyDataStructureSummaryDocList {
	s.Title = &v
	return s
}

func (s *GetTopicByIdResponseBodyDataStructureSummaryDocList) SetUrl(v string) *GetTopicByIdResponseBodyDataStructureSummaryDocList {
	s.Url = &v
	return s
}

type GetTopicByIdResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTopicByIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTopicByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTopicByIdResponse) GoString() string {
	return s.String()
}

func (s *GetTopicByIdResponse) SetHeaders(v map[string]*string) *GetTopicByIdResponse {
	s.Headers = v
	return s
}

func (s *GetTopicByIdResponse) SetStatusCode(v int32) *GetTopicByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTopicByIdResponse) SetBody(v *GetTopicByIdResponseBody) *GetTopicByIdResponse {
	s.Body = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// c9f226b02cca4f42a84c5e955c39dfd2
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskRequest) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskRequest) SetAgentKey(v string) *GetTopicSelectionPerspectiveAnalysisTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskRequest) SetTaskId(v string) *GetTopicSelectionPerspectiveAnalysisTaskRequest {
	s.TaskId = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBody) SetCode(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBody) SetData(v *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) *GetTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBody) SetHttpStatusCode(v int32) *GetTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBody) SetMessage(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Message = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBody) SetRequestId(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBody) SetSuccess(v bool) *GetTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Success = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData struct {
	// example:
	//
	// 错误信息
	ErrorMessage          *string                                                                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	FreshViewPointsResult *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResult `json:"FreshViewPointsResult,omitempty" xml:"FreshViewPointsResult,omitempty" type:"Struct"`
	HotViewPointsResult   *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResult   `json:"HotViewPointsResult,omitempty" xml:"HotViewPointsResult,omitempty" type:"Struct"`
	// example:
	//
	// SUSPENDED
	Status                *string                                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	TimedViewPointsResult *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResult `json:"TimedViewPointsResult,omitempty" xml:"TimedViewPointsResult,omitempty" type:"Struct"`
	// example:
	//
	// 热点主题事件
	Topic                 *string                                                                        `json:"Topic,omitempty" xml:"Topic,omitempty"`
	TopicSummaryResult    *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResult    `json:"TopicSummaryResult,omitempty" xml:"TopicSummaryResult,omitempty" type:"Struct"`
	WebReviewPointsResult *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResult `json:"WebReviewPointsResult,omitempty" xml:"WebReviewPointsResult,omitempty" type:"Struct"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetErrorMessage(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetFreshViewPointsResult(v *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResult) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.FreshViewPointsResult = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetHotViewPointsResult(v *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResult) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.HotViewPointsResult = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetStatus(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetTimedViewPointsResult(v *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResult) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.TimedViewPointsResult = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetTopic(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.Topic = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetTopicSummaryResult(v *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResult) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.TopicSummaryResult = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetWebReviewPointsResult(v *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResult) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.WebReviewPointsResult = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResult struct {
	Attitudes []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes `json:"Attitudes,omitempty" xml:"Attitudes,omitempty" type:"Repeated"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResult) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResult) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResult) SetAttitudes(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResult {
	s.Attitudes = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes struct {
	// example:
	//
	// 当前观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点类型
	AttitudeType *string `json:"AttitudeType,omitempty" xml:"AttitudeType,omitempty"`
	// example:
	//
	// 当前观点占比
	Ratio      *string                                                                                             `json:"Ratio,omitempty" xml:"Ratio,omitempty"`
	ViewPoints []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints `json:"ViewPoints,omitempty" xml:"ViewPoints,omitempty" type:"Repeated"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes) SetAttitude(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes {
	s.Attitude = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes) SetAttitudeType(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes {
	s.AttitudeType = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes) SetRatio(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes {
	s.Ratio = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes) SetViewPoints(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudes {
	s.ViewPoints = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints struct {
	Outlines []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPointsOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints) SetOutlines(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPointsOutlines) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints {
	s.Outlines = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints) SetPoint(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints {
	s.Point = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPoints {
	s.Summary = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPointsOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPointsOutlines) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPointsOutlines) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPointsOutlines) SetOutline(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPointsOutlines {
	s.Outline = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPointsOutlines) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataFreshViewPointsResultAttitudesViewPointsOutlines {
	s.Summary = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResult struct {
	Attitudes []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes `json:"Attitudes,omitempty" xml:"Attitudes,omitempty" type:"Repeated"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResult) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResult) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResult) SetAttitudes(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResult {
	s.Attitudes = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes struct {
	// example:
	//
	// 当前观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点类型
	AttitudeType *string                                                                                     `json:"AttitudeType,omitempty" xml:"AttitudeType,omitempty"`
	News         []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews `json:"News,omitempty" xml:"News,omitempty" type:"Repeated"`
	// example:
	//
	// 当前观点占比
	Ratio      *string                                                                                           `json:"Ratio,omitempty" xml:"Ratio,omitempty"`
	ViewPoints []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints `json:"ViewPoints,omitempty" xml:"ViewPoints,omitempty" type:"Repeated"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes) SetAttitude(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes {
	s.Attitude = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes) SetAttitudeType(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes {
	s.AttitudeType = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes) SetNews(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes {
	s.News = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes) SetRatio(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes {
	s.Ratio = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes) SetViewPoints(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudes {
	s.ViewPoints = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews struct {
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 9957175DEDCF49C5ACF7A956B4FD67B2
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 123456
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.png
	ImageUrls []*string `json:"ImageUrls,omitempty" xml:"ImageUrls,omitempty" type:"Repeated"`
	PubTime   *string   `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	Source    *string   `json:"Source,omitempty" xml:"Source,omitempty"`
	Summary   *string   `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// ["标签1","标签2"]
	Tags  []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	Title *string   `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 文章主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Url   *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetContent(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.Content = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetCreateTime(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.CreateTime = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetDocId(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.DocId = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetDocUuid(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.DocUuid = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetImageUrls(v []*string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.ImageUrls = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetPubTime(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.PubTime = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetSource(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.Source = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.Summary = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetTags(v []*string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.Tags = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetTitle(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.Title = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetTopic(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.Topic = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews) SetUrl(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesNews {
	s.Url = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints struct {
	Outlines []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPointsOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints) SetOutlines(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPointsOutlines) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints {
	s.Outlines = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints) SetPoint(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints {
	s.Point = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPoints {
	s.Summary = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPointsOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPointsOutlines) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPointsOutlines) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPointsOutlines) SetOutline(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPointsOutlines {
	s.Outline = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPointsOutlines) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataHotViewPointsResultAttitudesViewPointsOutlines {
	s.Summary = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResult struct {
	Attitudes []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes `json:"Attitudes,omitempty" xml:"Attitudes,omitempty" type:"Repeated"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResult) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResult) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResult) SetAttitudes(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResult {
	s.Attitudes = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes struct {
	// example:
	//
	// 当前观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点类型
	AttitudeType *string `json:"AttitudeType,omitempty" xml:"AttitudeType,omitempty"`
	// example:
	//
	// 2024-01-22 10:29
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 当前观点占比
	Ratio *string `json:"Ratio,omitempty" xml:"Ratio,omitempty"`
	// example:
	//
	// 新浪
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://www.example.com/news/1.html
	Url        *string                                                                                             `json:"Url,omitempty" xml:"Url,omitempty"`
	ViewPoints []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints `json:"ViewPoints,omitempty" xml:"ViewPoints,omitempty" type:"Repeated"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) SetAttitude(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes {
	s.Attitude = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) SetAttitudeType(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes {
	s.AttitudeType = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) SetPubTime(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes {
	s.PubTime = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) SetRatio(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes {
	s.Ratio = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) SetSource(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes {
	s.Source = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) SetTitle(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes {
	s.Title = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) SetUrl(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes {
	s.Url = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes) SetViewPoints(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudes {
	s.ViewPoints = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints struct {
	Outlines []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPointsOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints) SetOutlines(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPointsOutlines) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints {
	s.Outlines = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints) SetPoint(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints {
	s.Point = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPoints {
	s.Summary = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPointsOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPointsOutlines) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPointsOutlines) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPointsOutlines) SetOutline(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPointsOutlines {
	s.Outline = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPointsOutlines) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTimedViewPointsResultAttitudesViewPointsOutlines {
	s.Summary = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResult struct {
	Summaries []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries `json:"Summaries,omitempty" xml:"Summaries,omitempty" type:"Repeated"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResult) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResult) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResult) SetSummaries(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResult {
	s.Summaries = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries struct {
	DocList []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList `json:"DocList,omitempty" xml:"DocList,omitempty" type:"Repeated"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries) SetDocList(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries {
	s.DocList = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries {
	s.Summary = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries) SetTitle(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummaries {
	s.Title = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList struct {
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList) SetSource(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList {
	s.Source = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList) SetTitle(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList {
	s.Title = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList) SetUrl(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataTopicSummaryResultSummariesDocList {
	s.Url = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResult struct {
	Attitudes []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes `json:"Attitudes,omitempty" xml:"Attitudes,omitempty" type:"Repeated"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResult) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResult) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResult) SetAttitudes(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResult {
	s.Attitudes = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes struct {
	// example:
	//
	// 当前观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点类型
	AttitudeType *string                                                                                           `json:"AttitudeType,omitempty" xml:"AttitudeType,omitempty"`
	Comments     []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments `json:"Comments,omitempty" xml:"Comments,omitempty" type:"Repeated"`
	// example:
	//
	// 当前观点占比
	Ratio      *string                                                                                             `json:"Ratio,omitempty" xml:"Ratio,omitempty"`
	ViewPoints []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints `json:"ViewPoints,omitempty" xml:"ViewPoints,omitempty" type:"Repeated"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes) SetAttitude(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes {
	s.Attitude = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes) SetAttitudeType(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes {
	s.AttitudeType = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes) SetComments(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes {
	s.Comments = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes) SetRatio(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes {
	s.Ratio = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes) SetViewPoints(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudes {
	s.ViewPoints = v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments struct {
	// example:
	//
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 评论内容
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 当前评论所属的URL
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// 评论用户名
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments) SetSource(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments {
	s.Source = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments) SetText(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments {
	s.Text = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments) SetTitle(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments {
	s.Title = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments) SetUrl(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments {
	s.Url = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments) SetUsername(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesComments {
	s.Username = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints struct {
	Outlines []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPointsOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints) SetOutlines(v []*GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPointsOutlines) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints {
	s.Outlines = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints) SetPoint(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints {
	s.Point = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPoints {
	s.Summary = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPointsOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPointsOutlines) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPointsOutlines) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPointsOutlines) SetOutline(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPointsOutlines {
	s.Outline = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPointsOutlines) SetSummary(v string) *GetTopicSelectionPerspectiveAnalysisTaskResponseBodyDataWebReviewPointsResultAttitudesViewPointsOutlines {
	s.Summary = &v
	return s
}

type GetTopicSelectionPerspectiveAnalysisTaskResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTopicSelectionPerspectiveAnalysisTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTopicSelectionPerspectiveAnalysisTaskResponse) GoString() string {
	return s.String()
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponse) SetHeaders(v map[string]*string) *GetTopicSelectionPerspectiveAnalysisTaskResponse {
	s.Headers = v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponse) SetStatusCode(v int32) *GetTopicSelectionPerspectiveAnalysisTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTopicSelectionPerspectiveAnalysisTaskResponse) SetBody(v *GetTopicSelectionPerspectiveAnalysisTaskResponseBody) *GetTopicSelectionPerspectiveAnalysisTaskResponse {
	s.Body = v
	return s
}

type ImportInterveneFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// import.xls
	DocName *string `json:"DocName,omitempty" xml:"DocName,omitempty"`
	// example:
	//
	// import.xsl
	FileKey *string `json:"FileKey,omitempty" xml:"FileKey,omitempty"`
	// example:
	//
	// http://xxx/xxx.xls
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s ImportInterveneFileRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportInterveneFileRequest) GoString() string {
	return s.String()
}

func (s *ImportInterveneFileRequest) SetAgentKey(v string) *ImportInterveneFileRequest {
	s.AgentKey = &v
	return s
}

func (s *ImportInterveneFileRequest) SetDocName(v string) *ImportInterveneFileRequest {
	s.DocName = &v
	return s
}

func (s *ImportInterveneFileRequest) SetFileKey(v string) *ImportInterveneFileRequest {
	s.FileKey = &v
	return s
}

func (s *ImportInterveneFileRequest) SetFileUrl(v string) *ImportInterveneFileRequest {
	s.FileUrl = &v
	return s
}

type ImportInterveneFileResponseBody struct {
	// example:
	//
	// 0
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ImportInterveneFileResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ImportInterveneFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportInterveneFileResponseBody) GoString() string {
	return s.String()
}

func (s *ImportInterveneFileResponseBody) SetCode(v string) *ImportInterveneFileResponseBody {
	s.Code = &v
	return s
}

func (s *ImportInterveneFileResponseBody) SetData(v *ImportInterveneFileResponseBodyData) *ImportInterveneFileResponseBody {
	s.Data = v
	return s
}

func (s *ImportInterveneFileResponseBody) SetHttpStatusCode(v int32) *ImportInterveneFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ImportInterveneFileResponseBody) SetMessage(v string) *ImportInterveneFileResponseBody {
	s.Message = &v
	return s
}

func (s *ImportInterveneFileResponseBody) SetRequestId(v string) *ImportInterveneFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportInterveneFileResponseBody) SetSuccess(v bool) *ImportInterveneFileResponseBody {
	s.Success = &v
	return s
}

type ImportInterveneFileResponseBodyData struct {
	FailIdList []*string `json:"FailIdList,omitempty" xml:"FailIdList,omitempty" type:"Repeated"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ImportInterveneFileResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ImportInterveneFileResponseBodyData) GoString() string {
	return s.String()
}

func (s *ImportInterveneFileResponseBodyData) SetFailIdList(v []*string) *ImportInterveneFileResponseBodyData {
	s.FailIdList = v
	return s
}

func (s *ImportInterveneFileResponseBodyData) SetTaskId(v string) *ImportInterveneFileResponseBodyData {
	s.TaskId = &v
	return s
}

type ImportInterveneFileResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportInterveneFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportInterveneFileResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportInterveneFileResponse) GoString() string {
	return s.String()
}

func (s *ImportInterveneFileResponse) SetHeaders(v map[string]*string) *ImportInterveneFileResponse {
	s.Headers = v
	return s
}

func (s *ImportInterveneFileResponse) SetStatusCode(v int32) *ImportInterveneFileResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportInterveneFileResponse) SetBody(v *ImportInterveneFileResponseBody) *ImportInterveneFileResponse {
	s.Body = v
	return s
}

type ImportInterveneFileAsyncRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// import.xls
	DocName *string `json:"DocName,omitempty" xml:"DocName,omitempty"`
	// example:
	//
	// import.xls
	FileKey *string `json:"FileKey,omitempty" xml:"FileKey,omitempty"`
	// example:
	//
	// https://xxx/import.xls
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s ImportInterveneFileAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportInterveneFileAsyncRequest) GoString() string {
	return s.String()
}

func (s *ImportInterveneFileAsyncRequest) SetAgentKey(v string) *ImportInterveneFileAsyncRequest {
	s.AgentKey = &v
	return s
}

func (s *ImportInterveneFileAsyncRequest) SetDocName(v string) *ImportInterveneFileAsyncRequest {
	s.DocName = &v
	return s
}

func (s *ImportInterveneFileAsyncRequest) SetFileKey(v string) *ImportInterveneFileAsyncRequest {
	s.FileKey = &v
	return s
}

func (s *ImportInterveneFileAsyncRequest) SetFileUrl(v string) *ImportInterveneFileAsyncRequest {
	s.FileUrl = &v
	return s
}

type ImportInterveneFileAsyncResponseBody struct {
	// example:
	//
	// 0
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ImportInterveneFileAsyncResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 94512A33-8EC1-5452-A793-5C91F18ED2F0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ImportInterveneFileAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportInterveneFileAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *ImportInterveneFileAsyncResponseBody) SetCode(v string) *ImportInterveneFileAsyncResponseBody {
	s.Code = &v
	return s
}

func (s *ImportInterveneFileAsyncResponseBody) SetData(v *ImportInterveneFileAsyncResponseBodyData) *ImportInterveneFileAsyncResponseBody {
	s.Data = v
	return s
}

func (s *ImportInterveneFileAsyncResponseBody) SetHttpStatusCode(v int32) *ImportInterveneFileAsyncResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ImportInterveneFileAsyncResponseBody) SetMessage(v string) *ImportInterveneFileAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *ImportInterveneFileAsyncResponseBody) SetRequestId(v string) *ImportInterveneFileAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportInterveneFileAsyncResponseBody) SetSuccess(v bool) *ImportInterveneFileAsyncResponseBody {
	s.Success = &v
	return s
}

type ImportInterveneFileAsyncResponseBodyData struct {
	FailIdList []*string `json:"FailIdList,omitempty" xml:"FailIdList,omitempty" type:"Repeated"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ImportInterveneFileAsyncResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ImportInterveneFileAsyncResponseBodyData) GoString() string {
	return s.String()
}

func (s *ImportInterveneFileAsyncResponseBodyData) SetFailIdList(v []*string) *ImportInterveneFileAsyncResponseBodyData {
	s.FailIdList = v
	return s
}

func (s *ImportInterveneFileAsyncResponseBodyData) SetTaskId(v string) *ImportInterveneFileAsyncResponseBodyData {
	s.TaskId = &v
	return s
}

type ImportInterveneFileAsyncResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportInterveneFileAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportInterveneFileAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportInterveneFileAsyncResponse) GoString() string {
	return s.String()
}

func (s *ImportInterveneFileAsyncResponse) SetHeaders(v map[string]*string) *ImportInterveneFileAsyncResponse {
	s.Headers = v
	return s
}

func (s *ImportInterveneFileAsyncResponse) SetStatusCode(v int32) *ImportInterveneFileAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportInterveneFileAsyncResponse) SetBody(v *ImportInterveneFileAsyncResponseBody) *ImportInterveneFileAsyncResponse {
	s.Body = v
	return s
}

type InsertInterveneGlobalReplyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx_efm
	AgentKey        *string                                             `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	ReplyMessagList []*InsertInterveneGlobalReplyRequestReplyMessagList `json:"ReplyMessagList,omitempty" xml:"ReplyMessagList,omitempty" type:"Repeated"`
}

func (s InsertInterveneGlobalReplyRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneGlobalReplyRequest) GoString() string {
	return s.String()
}

func (s *InsertInterveneGlobalReplyRequest) SetAgentKey(v string) *InsertInterveneGlobalReplyRequest {
	s.AgentKey = &v
	return s
}

func (s *InsertInterveneGlobalReplyRequest) SetReplyMessagList(v []*InsertInterveneGlobalReplyRequestReplyMessagList) *InsertInterveneGlobalReplyRequest {
	s.ReplyMessagList = v
	return s
}

type InsertInterveneGlobalReplyRequestReplyMessagList struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	ReplyType *string `json:"ReplyType,omitempty" xml:"ReplyType,omitempty"`
}

func (s InsertInterveneGlobalReplyRequestReplyMessagList) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneGlobalReplyRequestReplyMessagList) GoString() string {
	return s.String()
}

func (s *InsertInterveneGlobalReplyRequestReplyMessagList) SetMessage(v string) *InsertInterveneGlobalReplyRequestReplyMessagList {
	s.Message = &v
	return s
}

func (s *InsertInterveneGlobalReplyRequestReplyMessagList) SetReplyType(v string) *InsertInterveneGlobalReplyRequestReplyMessagList {
	s.ReplyType = &v
	return s
}

type InsertInterveneGlobalReplyShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx_efm
	AgentKey              *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	ReplyMessagListShrink *string `json:"ReplyMessagList,omitempty" xml:"ReplyMessagList,omitempty"`
}

func (s InsertInterveneGlobalReplyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneGlobalReplyShrinkRequest) GoString() string {
	return s.String()
}

func (s *InsertInterveneGlobalReplyShrinkRequest) SetAgentKey(v string) *InsertInterveneGlobalReplyShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *InsertInterveneGlobalReplyShrinkRequest) SetReplyMessagListShrink(v string) *InsertInterveneGlobalReplyShrinkRequest {
	s.ReplyMessagListShrink = &v
	return s
}

type InsertInterveneGlobalReplyResponseBody struct {
	// example:
	//
	// 0
	Code *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *InsertInterveneGlobalReplyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InsertInterveneGlobalReplyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneGlobalReplyResponseBody) GoString() string {
	return s.String()
}

func (s *InsertInterveneGlobalReplyResponseBody) SetCode(v string) *InsertInterveneGlobalReplyResponseBody {
	s.Code = &v
	return s
}

func (s *InsertInterveneGlobalReplyResponseBody) SetData(v *InsertInterveneGlobalReplyResponseBodyData) *InsertInterveneGlobalReplyResponseBody {
	s.Data = v
	return s
}

func (s *InsertInterveneGlobalReplyResponseBody) SetHttpStatusCode(v int32) *InsertInterveneGlobalReplyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *InsertInterveneGlobalReplyResponseBody) SetMessage(v string) *InsertInterveneGlobalReplyResponseBody {
	s.Message = &v
	return s
}

func (s *InsertInterveneGlobalReplyResponseBody) SetRequestId(v string) *InsertInterveneGlobalReplyResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertInterveneGlobalReplyResponseBody) SetSuccess(v bool) *InsertInterveneGlobalReplyResponseBody {
	s.Success = &v
	return s
}

type InsertInterveneGlobalReplyResponseBodyData struct {
	FailIdList []*string `json:"FailIdList,omitempty" xml:"FailIdList,omitempty" type:"Repeated"`
	// example:
	//
	// 4829
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s InsertInterveneGlobalReplyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneGlobalReplyResponseBodyData) GoString() string {
	return s.String()
}

func (s *InsertInterveneGlobalReplyResponseBodyData) SetFailIdList(v []*string) *InsertInterveneGlobalReplyResponseBodyData {
	s.FailIdList = v
	return s
}

func (s *InsertInterveneGlobalReplyResponseBodyData) SetTaskId(v string) *InsertInterveneGlobalReplyResponseBodyData {
	s.TaskId = &v
	return s
}

type InsertInterveneGlobalReplyResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InsertInterveneGlobalReplyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InsertInterveneGlobalReplyResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneGlobalReplyResponse) GoString() string {
	return s.String()
}

func (s *InsertInterveneGlobalReplyResponse) SetHeaders(v map[string]*string) *InsertInterveneGlobalReplyResponse {
	s.Headers = v
	return s
}

func (s *InsertInterveneGlobalReplyResponse) SetStatusCode(v int32) *InsertInterveneGlobalReplyResponse {
	s.StatusCode = &v
	return s
}

func (s *InsertInterveneGlobalReplyResponse) SetBody(v *InsertInterveneGlobalReplyResponseBody) *InsertInterveneGlobalReplyResponse {
	s.Body = v
	return s
}

type InsertInterveneRuleRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey            *string                                        `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	InterveneRuleConfig *InsertInterveneRuleRequestInterveneRuleConfig `json:"InterveneRuleConfig,omitempty" xml:"InterveneRuleConfig,omitempty" type:"Struct"`
}

func (s InsertInterveneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneRuleRequest) GoString() string {
	return s.String()
}

func (s *InsertInterveneRuleRequest) SetAgentKey(v string) *InsertInterveneRuleRequest {
	s.AgentKey = &v
	return s
}

func (s *InsertInterveneRuleRequest) SetInterveneRuleConfig(v *InsertInterveneRuleRequestInterveneRuleConfig) *InsertInterveneRuleRequest {
	s.InterveneRuleConfig = v
	return s
}

type InsertInterveneRuleRequestInterveneRuleConfig struct {
	AnswerConfig        []*InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig        `json:"AnswerConfig,omitempty" xml:"AnswerConfig,omitempty" type:"Repeated"`
	EffectConfig        *InsertInterveneRuleRequestInterveneRuleConfigEffectConfig          `json:"EffectConfig,omitempty" xml:"EffectConfig,omitempty" type:"Struct"`
	InterveneConfigList []*InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList `json:"InterveneConfigList,omitempty" xml:"InterveneConfigList,omitempty" type:"Repeated"`
	// example:
	//
	// 0
	InterveneType *int32    `json:"InterveneType,omitempty" xml:"InterveneType,omitempty"`
	NamespaceList []*string `json:"NamespaceList,omitempty" xml:"NamespaceList,omitempty" type:"Repeated"`
	// example:
	//
	// 2
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// example:
	//
	// tf-test-rule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
}

func (s InsertInterveneRuleRequestInterveneRuleConfig) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneRuleRequestInterveneRuleConfig) GoString() string {
	return s.String()
}

func (s *InsertInterveneRuleRequestInterveneRuleConfig) SetAnswerConfig(v []*InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig) *InsertInterveneRuleRequestInterveneRuleConfig {
	s.AnswerConfig = v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfig) SetEffectConfig(v *InsertInterveneRuleRequestInterveneRuleConfigEffectConfig) *InsertInterveneRuleRequestInterveneRuleConfig {
	s.EffectConfig = v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfig) SetInterveneConfigList(v []*InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList) *InsertInterveneRuleRequestInterveneRuleConfig {
	s.InterveneConfigList = v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfig) SetInterveneType(v int32) *InsertInterveneRuleRequestInterveneRuleConfig {
	s.InterveneType = &v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfig) SetNamespaceList(v []*string) *InsertInterveneRuleRequestInterveneRuleConfig {
	s.NamespaceList = v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfig) SetRuleId(v int64) *InsertInterveneRuleRequestInterveneRuleConfig {
	s.RuleId = &v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfig) SetRuleName(v string) *InsertInterveneRuleRequestInterveneRuleConfig {
	s.RuleName = &v
	return s
}

type InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig struct {
	// example:
	//
	// 0
	AnswerType *int32  `json:"AnswerType,omitempty" xml:"AnswerType,omitempty"`
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// namespace_qa_query
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig) GoString() string {
	return s.String()
}

func (s *InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig) SetAnswerType(v int32) *InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig {
	s.AnswerType = &v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig) SetMessage(v string) *InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig {
	s.Message = &v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig) SetNamespace(v string) *InsertInterveneRuleRequestInterveneRuleConfigAnswerConfig {
	s.Namespace = &v
	return s
}

type InsertInterveneRuleRequestInterveneRuleConfigEffectConfig struct {
	// example:
	//
	// 0
	EffectType *int32 `json:"EffectType,omitempty" xml:"EffectType,omitempty"`
	// example:
	//
	// 2023-03-28 06:04:29
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 2023-03-28 06:04:29
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s InsertInterveneRuleRequestInterveneRuleConfigEffectConfig) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneRuleRequestInterveneRuleConfigEffectConfig) GoString() string {
	return s.String()
}

func (s *InsertInterveneRuleRequestInterveneRuleConfigEffectConfig) SetEffectType(v int32) *InsertInterveneRuleRequestInterveneRuleConfigEffectConfig {
	s.EffectType = &v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfigEffectConfig) SetEndTime(v string) *InsertInterveneRuleRequestInterveneRuleConfigEffectConfig {
	s.EndTime = &v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfigEffectConfig) SetStartTime(v string) *InsertInterveneRuleRequestInterveneRuleConfigEffectConfig {
	s.StartTime = &v
	return s
}

type InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList struct {
	// id
	//
	// example:
	//
	// 37249
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 0
	OperationType *int32  `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	Query         *string `json:"Query,omitempty" xml:"Query,omitempty"`
}

func (s InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList) GoString() string {
	return s.String()
}

func (s *InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList) SetId(v string) *InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList {
	s.Id = &v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList) SetOperationType(v int32) *InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList {
	s.OperationType = &v
	return s
}

func (s *InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList) SetQuery(v string) *InsertInterveneRuleRequestInterveneRuleConfigInterveneConfigList {
	s.Query = &v
	return s
}

type InsertInterveneRuleShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey                  *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	InterveneRuleConfigShrink *string `json:"InterveneRuleConfig,omitempty" xml:"InterveneRuleConfig,omitempty"`
}

func (s InsertInterveneRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *InsertInterveneRuleShrinkRequest) SetAgentKey(v string) *InsertInterveneRuleShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *InsertInterveneRuleShrinkRequest) SetInterveneRuleConfigShrink(v string) *InsertInterveneRuleShrinkRequest {
	s.InterveneRuleConfigShrink = &v
	return s
}

type InsertInterveneRuleResponseBody struct {
	// example:
	//
	// 0
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *InsertInterveneRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// DD656AF9-0839-521A-A3D2-F320009F9C87
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InsertInterveneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *InsertInterveneRuleResponseBody) SetCode(v string) *InsertInterveneRuleResponseBody {
	s.Code = &v
	return s
}

func (s *InsertInterveneRuleResponseBody) SetData(v *InsertInterveneRuleResponseBodyData) *InsertInterveneRuleResponseBody {
	s.Data = v
	return s
}

func (s *InsertInterveneRuleResponseBody) SetHttpStatusCode(v int32) *InsertInterveneRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *InsertInterveneRuleResponseBody) SetMessage(v string) *InsertInterveneRuleResponseBody {
	s.Message = &v
	return s
}

func (s *InsertInterveneRuleResponseBody) SetRequestId(v string) *InsertInterveneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertInterveneRuleResponseBody) SetSuccess(v bool) *InsertInterveneRuleResponseBody {
	s.Success = &v
	return s
}

type InsertInterveneRuleResponseBodyData struct {
	// example:
	//
	// 12345
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s InsertInterveneRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *InsertInterveneRuleResponseBodyData) SetRuleId(v int64) *InsertInterveneRuleResponseBodyData {
	s.RuleId = &v
	return s
}

type InsertInterveneRuleResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InsertInterveneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InsertInterveneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertInterveneRuleResponse) GoString() string {
	return s.String()
}

func (s *InsertInterveneRuleResponse) SetHeaders(v map[string]*string) *InsertInterveneRuleResponse {
	s.Headers = v
	return s
}

func (s *InsertInterveneRuleResponse) SetStatusCode(v int32) *InsertInterveneRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *InsertInterveneRuleResponse) SetBody(v *InsertInterveneRuleResponseBody) *InsertInterveneRuleResponse {
	s.Body = v
	return s
}

type ListAnalysisTagDetailByTaskIdRequest struct {
	Categories []*string `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// token-xxxx
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 3
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListAnalysisTagDetailByTaskIdRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAnalysisTagDetailByTaskIdRequest) GoString() string {
	return s.String()
}

func (s *ListAnalysisTagDetailByTaskIdRequest) SetCategories(v []*string) *ListAnalysisTagDetailByTaskIdRequest {
	s.Categories = v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdRequest) SetCurrent(v int32) *ListAnalysisTagDetailByTaskIdRequest {
	s.Current = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdRequest) SetMaxResults(v int32) *ListAnalysisTagDetailByTaskIdRequest {
	s.MaxResults = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdRequest) SetNextToken(v string) *ListAnalysisTagDetailByTaskIdRequest {
	s.NextToken = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdRequest) SetSize(v int32) *ListAnalysisTagDetailByTaskIdRequest {
	s.Size = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdRequest) SetTaskId(v string) *ListAnalysisTagDetailByTaskIdRequest {
	s.TaskId = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdRequest) SetWorkspaceId(v string) *ListAnalysisTagDetailByTaskIdRequest {
	s.WorkspaceId = &v
	return s
}

type ListAnalysisTagDetailByTaskIdShrinkRequest struct {
	CategoriesShrink *string `json:"Categories,omitempty" xml:"Categories,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// token-xxxx
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 3
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListAnalysisTagDetailByTaskIdShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAnalysisTagDetailByTaskIdShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListAnalysisTagDetailByTaskIdShrinkRequest) SetCategoriesShrink(v string) *ListAnalysisTagDetailByTaskIdShrinkRequest {
	s.CategoriesShrink = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdShrinkRequest) SetCurrent(v int32) *ListAnalysisTagDetailByTaskIdShrinkRequest {
	s.Current = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdShrinkRequest) SetMaxResults(v int32) *ListAnalysisTagDetailByTaskIdShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdShrinkRequest) SetNextToken(v string) *ListAnalysisTagDetailByTaskIdShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdShrinkRequest) SetSize(v int32) *ListAnalysisTagDetailByTaskIdShrinkRequest {
	s.Size = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdShrinkRequest) SetTaskId(v string) *ListAnalysisTagDetailByTaskIdShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdShrinkRequest) SetWorkspaceId(v string) *ListAnalysisTagDetailByTaskIdShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type ListAnalysisTagDetailByTaskIdResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListAnalysisTagDetailByTaskIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// token-xxxx
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAnalysisTagDetailByTaskIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAnalysisTagDetailByTaskIdResponseBody) GoString() string {
	return s.String()
}

func (s *ListAnalysisTagDetailByTaskIdResponseBody) SetCode(v string) *ListAnalysisTagDetailByTaskIdResponseBody {
	s.Code = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBody) SetData(v []*ListAnalysisTagDetailByTaskIdResponseBodyData) *ListAnalysisTagDetailByTaskIdResponseBody {
	s.Data = v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBody) SetHttpStatusCode(v int32) *ListAnalysisTagDetailByTaskIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBody) SetMaxResults(v int32) *ListAnalysisTagDetailByTaskIdResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBody) SetMessage(v string) *ListAnalysisTagDetailByTaskIdResponseBody {
	s.Message = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBody) SetNextToken(v string) *ListAnalysisTagDetailByTaskIdResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBody) SetRequestId(v string) *ListAnalysisTagDetailByTaskIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBody) SetSuccess(v bool) *ListAnalysisTagDetailByTaskIdResponseBody {
	s.Success = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBody) SetTotalCount(v int32) *ListAnalysisTagDetailByTaskIdResponseBody {
	s.TotalCount = &v
	return s
}

type ListAnalysisTagDetailByTaskIdResponseBodyData struct {
	// example:
	//
	// xxx
	Content     *string                                                     `json:"Content,omitempty" xml:"Content,omitempty"`
	ContentTags []*ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags `json:"ContentTags,omitempty" xml:"ContentTags,omitempty" type:"Repeated"`
	// example:
	//
	// 112
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// summaryAndOverview
	TagTaskType *string `json:"TagTaskType,omitempty" xml:"TagTaskType,omitempty"`
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ListAnalysisTagDetailByTaskIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAnalysisTagDetailByTaskIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAnalysisTagDetailByTaskIdResponseBodyData) SetContent(v string) *ListAnalysisTagDetailByTaskIdResponseBodyData {
	s.Content = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBodyData) SetContentTags(v []*ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags) *ListAnalysisTagDetailByTaskIdResponseBodyData {
	s.ContentTags = v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBodyData) SetId(v int64) *ListAnalysisTagDetailByTaskIdResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBodyData) SetTagTaskType(v string) *ListAnalysisTagDetailByTaskIdResponseBodyData {
	s.TagTaskType = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBodyData) SetTaskId(v string) *ListAnalysisTagDetailByTaskIdResponseBodyData {
	s.TaskId = &v
	return s
}

type ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags struct {
	// example:
	//
	// xxx
	SummaryOverview *string `json:"SummaryOverview,omitempty" xml:"SummaryOverview,omitempty"`
	// example:
	//
	// xxx
	TagName *string   `json:"TagName,omitempty" xml:"TagName,omitempty"`
	Tags    []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags) String() string {
	return tea.Prettify(s)
}

func (s ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags) GoString() string {
	return s.String()
}

func (s *ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags) SetSummaryOverview(v string) *ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags {
	s.SummaryOverview = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags) SetTagName(v string) *ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags {
	s.TagName = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags) SetTags(v []*string) *ListAnalysisTagDetailByTaskIdResponseBodyDataContentTags {
	s.Tags = v
	return s
}

type ListAnalysisTagDetailByTaskIdResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAnalysisTagDetailByTaskIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAnalysisTagDetailByTaskIdResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAnalysisTagDetailByTaskIdResponse) GoString() string {
	return s.String()
}

func (s *ListAnalysisTagDetailByTaskIdResponse) SetHeaders(v map[string]*string) *ListAnalysisTagDetailByTaskIdResponse {
	s.Headers = v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponse) SetStatusCode(v int32) *ListAnalysisTagDetailByTaskIdResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAnalysisTagDetailByTaskIdResponse) SetBody(v *ListAnalysisTagDetailByTaskIdResponseBody) *ListAnalysisTagDetailByTaskIdResponse {
	s.Body = v
	return s
}

type ListAsyncTasksRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 2023-03-18 02:00:00
	CreateTimeEnd *string `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// example:
	//
	// 2023-02-19 07:28:11
	CreateTimeStart *string `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// MaterialDocumentUpload
	TaskCode *string `json:"TaskCode,omitempty" xml:"TaskCode,omitempty"`
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// 1
	TaskStatus     *int32    `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskStatusList []*int32  `json:"TaskStatusList,omitempty" xml:"TaskStatusList,omitempty" type:"Repeated"`
	TaskType       *string   `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	TaskTypeList   []*string `json:"TaskTypeList,omitempty" xml:"TaskTypeList,omitempty" type:"Repeated"`
}

func (s ListAsyncTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAsyncTasksRequest) GoString() string {
	return s.String()
}

func (s *ListAsyncTasksRequest) SetAgentKey(v string) *ListAsyncTasksRequest {
	s.AgentKey = &v
	return s
}

func (s *ListAsyncTasksRequest) SetCreateTimeEnd(v string) *ListAsyncTasksRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *ListAsyncTasksRequest) SetCreateTimeStart(v string) *ListAsyncTasksRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *ListAsyncTasksRequest) SetCurrent(v int32) *ListAsyncTasksRequest {
	s.Current = &v
	return s
}

func (s *ListAsyncTasksRequest) SetSize(v int32) *ListAsyncTasksRequest {
	s.Size = &v
	return s
}

func (s *ListAsyncTasksRequest) SetTaskCode(v string) *ListAsyncTasksRequest {
	s.TaskCode = &v
	return s
}

func (s *ListAsyncTasksRequest) SetTaskName(v string) *ListAsyncTasksRequest {
	s.TaskName = &v
	return s
}

func (s *ListAsyncTasksRequest) SetTaskStatus(v int32) *ListAsyncTasksRequest {
	s.TaskStatus = &v
	return s
}

func (s *ListAsyncTasksRequest) SetTaskStatusList(v []*int32) *ListAsyncTasksRequest {
	s.TaskStatusList = v
	return s
}

func (s *ListAsyncTasksRequest) SetTaskType(v string) *ListAsyncTasksRequest {
	s.TaskType = &v
	return s
}

func (s *ListAsyncTasksRequest) SetTaskTypeList(v []*string) *ListAsyncTasksRequest {
	s.TaskTypeList = v
	return s
}

type ListAsyncTasksShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 2023-03-18 02:00:00
	CreateTimeEnd *string `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// example:
	//
	// 2023-02-19 07:28:11
	CreateTimeStart *string `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// MaterialDocumentUpload
	TaskCode *string `json:"TaskCode,omitempty" xml:"TaskCode,omitempty"`
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// 1
	TaskStatus           *int32  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskStatusListShrink *string `json:"TaskStatusList,omitempty" xml:"TaskStatusList,omitempty"`
	TaskType             *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	TaskTypeListShrink   *string `json:"TaskTypeList,omitempty" xml:"TaskTypeList,omitempty"`
}

func (s ListAsyncTasksShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAsyncTasksShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListAsyncTasksShrinkRequest) SetAgentKey(v string) *ListAsyncTasksShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetCreateTimeEnd(v string) *ListAsyncTasksShrinkRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetCreateTimeStart(v string) *ListAsyncTasksShrinkRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetCurrent(v int32) *ListAsyncTasksShrinkRequest {
	s.Current = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetSize(v int32) *ListAsyncTasksShrinkRequest {
	s.Size = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetTaskCode(v string) *ListAsyncTasksShrinkRequest {
	s.TaskCode = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetTaskName(v string) *ListAsyncTasksShrinkRequest {
	s.TaskName = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetTaskStatus(v int32) *ListAsyncTasksShrinkRequest {
	s.TaskStatus = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetTaskStatusListShrink(v string) *ListAsyncTasksShrinkRequest {
	s.TaskStatusListShrink = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetTaskType(v string) *ListAsyncTasksShrinkRequest {
	s.TaskType = &v
	return s
}

func (s *ListAsyncTasksShrinkRequest) SetTaskTypeListShrink(v string) *ListAsyncTasksShrinkRequest {
	s.TaskTypeListShrink = &v
	return s
}

type ListAsyncTasksResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1
	Current *int32                            `json:"Current,omitempty" xml:"Current,omitempty"`
	Data    []*ListAsyncTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 428DCC0D-3C63-5306-BD1B-124396AB97BE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 20
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListAsyncTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAsyncTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListAsyncTasksResponseBody) SetCode(v string) *ListAsyncTasksResponseBody {
	s.Code = &v
	return s
}

func (s *ListAsyncTasksResponseBody) SetCurrent(v int32) *ListAsyncTasksResponseBody {
	s.Current = &v
	return s
}

func (s *ListAsyncTasksResponseBody) SetData(v []*ListAsyncTasksResponseBodyData) *ListAsyncTasksResponseBody {
	s.Data = v
	return s
}

func (s *ListAsyncTasksResponseBody) SetHttpStatusCode(v int32) *ListAsyncTasksResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAsyncTasksResponseBody) SetMessage(v string) *ListAsyncTasksResponseBody {
	s.Message = &v
	return s
}

func (s *ListAsyncTasksResponseBody) SetRequestId(v string) *ListAsyncTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAsyncTasksResponseBody) SetSize(v int32) *ListAsyncTasksResponseBody {
	s.Size = &v
	return s
}

func (s *ListAsyncTasksResponseBody) SetSuccess(v bool) *ListAsyncTasksResponseBody {
	s.Success = &v
	return s
}

func (s *ListAsyncTasksResponseBody) SetTotal(v int32) *ListAsyncTasksResponseBody {
	s.Total = &v
	return s
}

type ListAsyncTasksResponseBodyData struct {
	// example:
	//
	// 2020-12-23 15:41:58
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1111
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// MaterialDocumentUpload
	TaskCode *string `json:"TaskCode,omitempty" xml:"TaskCode,omitempty"`
	// example:
	//
	// {}
	TaskDefinition *string `json:"TaskDefinition,omitempty" xml:"TaskDefinition,omitempty"`
	// example:
	//
	// 2023-03-09 00:00:00
	TaskEndTime      *string `json:"TaskEndTime,omitempty" xml:"TaskEndTime,omitempty"`
	TaskErrorMessage *string `json:"TaskErrorMessage,omitempty" xml:"TaskErrorMessage,omitempty"`
	// example:
	//
	// 2023-10-14 14:30:00
	TaskExecuteTime *string `json:"TaskExecuteTime,omitempty" xml:"TaskExecuteTime,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId                *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskInnerErrorMessage *string `json:"TaskInnerErrorMessage,omitempty" xml:"TaskInnerErrorMessage,omitempty"`
	// example:
	//
	// {}
	TaskIntermediateResult *string `json:"TaskIntermediateResult,omitempty" xml:"TaskIntermediateResult,omitempty"`
	TaskName               *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// {}
	TaskParam *string `json:"TaskParam,omitempty" xml:"TaskParam,omitempty"`
	// example:
	//
	// {}
	TaskProgressMessage *string `json:"TaskProgressMessage,omitempty" xml:"TaskProgressMessage,omitempty"`
	// example:
	//
	// {}
	TaskResult *string `json:"TaskResult,omitempty" xml:"TaskResult,omitempty"`
	// example:
	//
	// 1
	TaskRetryCount *string `json:"TaskRetryCount,omitempty" xml:"TaskRetryCount,omitempty"`
	// example:
	//
	// 2023-03-20 10:53:00
	TaskStartTime *string `json:"TaskStartTime,omitempty" xml:"TaskStartTime,omitempty"`
	// example:
	//
	// 1
	TaskStatus *int32 `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// example:
	//
	// test
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// example:
	//
	// 2023-02-16 10:29:16
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 111
	UpdateUser *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s ListAsyncTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAsyncTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAsyncTasksResponseBodyData) SetCreateTime(v string) *ListAsyncTasksResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetCreateUser(v string) *ListAsyncTasksResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetId(v int64) *ListAsyncTasksResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskCode(v string) *ListAsyncTasksResponseBodyData {
	s.TaskCode = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskDefinition(v string) *ListAsyncTasksResponseBodyData {
	s.TaskDefinition = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskEndTime(v string) *ListAsyncTasksResponseBodyData {
	s.TaskEndTime = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskErrorMessage(v string) *ListAsyncTasksResponseBodyData {
	s.TaskErrorMessage = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskExecuteTime(v string) *ListAsyncTasksResponseBodyData {
	s.TaskExecuteTime = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskId(v string) *ListAsyncTasksResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskInnerErrorMessage(v string) *ListAsyncTasksResponseBodyData {
	s.TaskInnerErrorMessage = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskIntermediateResult(v string) *ListAsyncTasksResponseBodyData {
	s.TaskIntermediateResult = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskName(v string) *ListAsyncTasksResponseBodyData {
	s.TaskName = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskParam(v string) *ListAsyncTasksResponseBodyData {
	s.TaskParam = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskProgressMessage(v string) *ListAsyncTasksResponseBodyData {
	s.TaskProgressMessage = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskResult(v string) *ListAsyncTasksResponseBodyData {
	s.TaskResult = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskRetryCount(v string) *ListAsyncTasksResponseBodyData {
	s.TaskRetryCount = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskStartTime(v string) *ListAsyncTasksResponseBodyData {
	s.TaskStartTime = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskStatus(v int32) *ListAsyncTasksResponseBodyData {
	s.TaskStatus = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetTaskType(v string) *ListAsyncTasksResponseBodyData {
	s.TaskType = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetUpdateTime(v string) *ListAsyncTasksResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *ListAsyncTasksResponseBodyData) SetUpdateUser(v string) *ListAsyncTasksResponseBodyData {
	s.UpdateUser = &v
	return s
}

type ListAsyncTasksResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAsyncTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAsyncTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAsyncTasksResponse) GoString() string {
	return s.String()
}

func (s *ListAsyncTasksResponse) SetHeaders(v map[string]*string) *ListAsyncTasksResponse {
	s.Headers = v
	return s
}

func (s *ListAsyncTasksResponse) SetStatusCode(v int32) *ListAsyncTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAsyncTasksResponse) SetBody(v *ListAsyncTasksResponseBody) *ListAsyncTasksResponse {
	s.Body = v
	return s
}

type ListBuildConfigsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cd327c3d5d5e44159cc716e23bfa530e_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListBuildConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBuildConfigsRequest) GoString() string {
	return s.String()
}

func (s *ListBuildConfigsRequest) SetAgentKey(v string) *ListBuildConfigsRequest {
	s.AgentKey = &v
	return s
}

func (s *ListBuildConfigsRequest) SetRegionId(v string) *ListBuildConfigsRequest {
	s.RegionId = &v
	return s
}

func (s *ListBuildConfigsRequest) SetType(v string) *ListBuildConfigsRequest {
	s.Type = &v
	return s
}

type ListBuildConfigsResponseBody struct {
	// example:
	//
	// 200
	Code *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListBuildConfigsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// Success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// DA021073-17CE-5CCF-9FEB-93226C766887
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListBuildConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBuildConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBuildConfigsResponseBody) SetCode(v string) *ListBuildConfigsResponseBody {
	s.Code = &v
	return s
}

func (s *ListBuildConfigsResponseBody) SetData(v []*ListBuildConfigsResponseBodyData) *ListBuildConfigsResponseBody {
	s.Data = v
	return s
}

func (s *ListBuildConfigsResponseBody) SetHttpStatusCode(v int32) *ListBuildConfigsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListBuildConfigsResponseBody) SetMessage(v string) *ListBuildConfigsResponseBody {
	s.Message = &v
	return s
}

func (s *ListBuildConfigsResponseBody) SetRequestId(v string) *ListBuildConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListBuildConfigsResponseBody) SetSuccess(v bool) *ListBuildConfigsResponseBody {
	s.Success = &v
	return s
}

type ListBuildConfigsResponseBodyData struct {
	// example:
	//
	// true
	BuildIn *bool `json:"BuildIn,omitempty" xml:"BuildIn,omitempty"`
	// example:
	//
	// 2023-04-11 06:14:07
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1
	CreateUser *string                                     `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	Id         *int64                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	Keywords   []*ListBuildConfigsResponseBodyDataKeywords `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
	// example:
	//
	// writingStyle
	Tag            *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TagDescription *string `json:"TagDescription,omitempty" xml:"TagDescription,omitempty"`
	// example:
	//
	// media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 2023-04-11 06:14:07
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 1
	UpdateUser *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s ListBuildConfigsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListBuildConfigsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListBuildConfigsResponseBodyData) SetBuildIn(v bool) *ListBuildConfigsResponseBodyData {
	s.BuildIn = &v
	return s
}

func (s *ListBuildConfigsResponseBodyData) SetCreateTime(v string) *ListBuildConfigsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListBuildConfigsResponseBodyData) SetCreateUser(v string) *ListBuildConfigsResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *ListBuildConfigsResponseBodyData) SetId(v int64) *ListBuildConfigsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListBuildConfigsResponseBodyData) SetKeywords(v []*ListBuildConfigsResponseBodyDataKeywords) *ListBuildConfigsResponseBodyData {
	s.Keywords = v
	return s
}

func (s *ListBuildConfigsResponseBodyData) SetTag(v string) *ListBuildConfigsResponseBodyData {
	s.Tag = &v
	return s
}

func (s *ListBuildConfigsResponseBodyData) SetTagDescription(v string) *ListBuildConfigsResponseBodyData {
	s.TagDescription = &v
	return s
}

func (s *ListBuildConfigsResponseBodyData) SetType(v string) *ListBuildConfigsResponseBodyData {
	s.Type = &v
	return s
}

func (s *ListBuildConfigsResponseBodyData) SetUpdateTime(v string) *ListBuildConfigsResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *ListBuildConfigsResponseBodyData) SetUpdateUser(v string) *ListBuildConfigsResponseBodyData {
	s.UpdateUser = &v
	return s
}

type ListBuildConfigsResponseBodyDataKeywords struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s ListBuildConfigsResponseBodyDataKeywords) String() string {
	return tea.Prettify(s)
}

func (s ListBuildConfigsResponseBodyDataKeywords) GoString() string {
	return s.String()
}

func (s *ListBuildConfigsResponseBodyDataKeywords) SetDescription(v string) *ListBuildConfigsResponseBodyDataKeywords {
	s.Description = &v
	return s
}

func (s *ListBuildConfigsResponseBodyDataKeywords) SetKey(v string) *ListBuildConfigsResponseBodyDataKeywords {
	s.Key = &v
	return s
}

type ListBuildConfigsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListBuildConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListBuildConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBuildConfigsResponse) GoString() string {
	return s.String()
}

func (s *ListBuildConfigsResponse) SetHeaders(v map[string]*string) *ListBuildConfigsResponse {
	s.Headers = v
	return s
}

func (s *ListBuildConfigsResponse) SetStatusCode(v int32) *ListBuildConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListBuildConfigsResponse) SetBody(v *ListBuildConfigsResponseBody) *ListBuildConfigsResponse {
	s.Body = v
	return s
}

type ListCustomTextRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 商品code
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
}

func (s ListCustomTextRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTextRequest) GoString() string {
	return s.String()
}

func (s *ListCustomTextRequest) SetAgentKey(v string) *ListCustomTextRequest {
	s.AgentKey = &v
	return s
}

func (s *ListCustomTextRequest) SetCommodityCode(v string) *ListCustomTextRequest {
	s.CommodityCode = &v
	return s
}

type ListCustomTextResponseBody struct {
	// example:
	//
	// NoData
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListCustomTextResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCustomTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTextResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomTextResponseBody) SetCode(v string) *ListCustomTextResponseBody {
	s.Code = &v
	return s
}

func (s *ListCustomTextResponseBody) SetData(v []*ListCustomTextResponseBodyData) *ListCustomTextResponseBody {
	s.Data = v
	return s
}

func (s *ListCustomTextResponseBody) SetHttpStatusCode(v int32) *ListCustomTextResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCustomTextResponseBody) SetMessage(v string) *ListCustomTextResponseBody {
	s.Message = &v
	return s
}

func (s *ListCustomTextResponseBody) SetRequestId(v string) *ListCustomTextResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomTextResponseBody) SetSuccess(v bool) *ListCustomTextResponseBody {
	s.Success = &v
	return s
}

type ListCustomTextResponseBodyData struct {
	// example:
	//
	// 内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 创建用户
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// 40
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 修改时间
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 修改用户
	UpdateUser *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s ListCustomTextResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTextResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCustomTextResponseBodyData) SetContent(v string) *ListCustomTextResponseBodyData {
	s.Content = &v
	return s
}

func (s *ListCustomTextResponseBodyData) SetCreateTime(v string) *ListCustomTextResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListCustomTextResponseBodyData) SetCreateUser(v string) *ListCustomTextResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *ListCustomTextResponseBodyData) SetId(v int64) *ListCustomTextResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListCustomTextResponseBodyData) SetTitle(v string) *ListCustomTextResponseBodyData {
	s.Title = &v
	return s
}

func (s *ListCustomTextResponseBodyData) SetUpdateTime(v string) *ListCustomTextResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *ListCustomTextResponseBodyData) SetUpdateUser(v string) *ListCustomTextResponseBodyData {
	s.UpdateUser = &v
	return s
}

type ListCustomTextResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomTextResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTextResponse) GoString() string {
	return s.String()
}

func (s *ListCustomTextResponse) SetHeaders(v map[string]*string) *ListCustomTextResponse {
	s.Headers = v
	return s
}

func (s *ListCustomTextResponse) SetStatusCode(v int32) *ListCustomTextResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomTextResponse) SetBody(v *ListCustomTextResponseBody) *ListCustomTextResponse {
	s.Body = v
	return s
}

type ListCustomViewPointsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点
	//
	//      *
	Attitudes []*string `json:"Attitudes,omitempty" xml:"Attitudes,omitempty" type:"Repeated"`
	// example:
	//
	// 461591f4880747f890702c1b90494d1a
	CustomViewPointId *string `json:"CustomViewPointId,omitempty" xml:"CustomViewPointId,omitempty"`
	// example:
	//
	// 7ece3d1212e04c9ca716ae2486228f3f
	CustomViewPointIds []*string `json:"CustomViewPointIds,omitempty" xml:"CustomViewPointIds,omitempty" type:"Repeated"`
	// example:
	//
	// 52
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// example:
	//
	// 1d20ed14db0840efb1c7eaaf4d46352b
	TopicId *string `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s ListCustomViewPointsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomViewPointsRequest) GoString() string {
	return s.String()
}

func (s *ListCustomViewPointsRequest) SetAgentKey(v string) *ListCustomViewPointsRequest {
	s.AgentKey = &v
	return s
}

func (s *ListCustomViewPointsRequest) SetAttitude(v string) *ListCustomViewPointsRequest {
	s.Attitude = &v
	return s
}

func (s *ListCustomViewPointsRequest) SetAttitudes(v []*string) *ListCustomViewPointsRequest {
	s.Attitudes = v
	return s
}

func (s *ListCustomViewPointsRequest) SetCustomViewPointId(v string) *ListCustomViewPointsRequest {
	s.CustomViewPointId = &v
	return s
}

func (s *ListCustomViewPointsRequest) SetCustomViewPointIds(v []*string) *ListCustomViewPointsRequest {
	s.CustomViewPointIds = v
	return s
}

func (s *ListCustomViewPointsRequest) SetMaxResults(v int32) *ListCustomViewPointsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListCustomViewPointsRequest) SetNextToken(v string) *ListCustomViewPointsRequest {
	s.NextToken = &v
	return s
}

func (s *ListCustomViewPointsRequest) SetTopic(v string) *ListCustomViewPointsRequest {
	s.Topic = &v
	return s
}

func (s *ListCustomViewPointsRequest) SetTopicId(v string) *ListCustomViewPointsRequest {
	s.TopicId = &v
	return s
}

type ListCustomViewPointsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点
	//
	//      *
	AttitudesShrink *string `json:"Attitudes,omitempty" xml:"Attitudes,omitempty"`
	// example:
	//
	// 461591f4880747f890702c1b90494d1a
	CustomViewPointId *string `json:"CustomViewPointId,omitempty" xml:"CustomViewPointId,omitempty"`
	// example:
	//
	// 7ece3d1212e04c9ca716ae2486228f3f
	CustomViewPointIdsShrink *string `json:"CustomViewPointIds,omitempty" xml:"CustomViewPointIds,omitempty"`
	// example:
	//
	// 52
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// example:
	//
	// 1d20ed14db0840efb1c7eaaf4d46352b
	TopicId *string `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s ListCustomViewPointsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomViewPointsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListCustomViewPointsShrinkRequest) SetAgentKey(v string) *ListCustomViewPointsShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *ListCustomViewPointsShrinkRequest) SetAttitude(v string) *ListCustomViewPointsShrinkRequest {
	s.Attitude = &v
	return s
}

func (s *ListCustomViewPointsShrinkRequest) SetAttitudesShrink(v string) *ListCustomViewPointsShrinkRequest {
	s.AttitudesShrink = &v
	return s
}

func (s *ListCustomViewPointsShrinkRequest) SetCustomViewPointId(v string) *ListCustomViewPointsShrinkRequest {
	s.CustomViewPointId = &v
	return s
}

func (s *ListCustomViewPointsShrinkRequest) SetCustomViewPointIdsShrink(v string) *ListCustomViewPointsShrinkRequest {
	s.CustomViewPointIdsShrink = &v
	return s
}

func (s *ListCustomViewPointsShrinkRequest) SetMaxResults(v int32) *ListCustomViewPointsShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListCustomViewPointsShrinkRequest) SetNextToken(v string) *ListCustomViewPointsShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListCustomViewPointsShrinkRequest) SetTopic(v string) *ListCustomViewPointsShrinkRequest {
	s.Topic = &v
	return s
}

func (s *ListCustomViewPointsShrinkRequest) SetTopicId(v string) *ListCustomViewPointsShrinkRequest {
	s.TopicId = &v
	return s
}

type ListCustomViewPointsResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListCustomViewPointsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 60
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 73
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCustomViewPointsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomViewPointsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomViewPointsResponseBody) SetCode(v string) *ListCustomViewPointsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCustomViewPointsResponseBody) SetData(v []*ListCustomViewPointsResponseBodyData) *ListCustomViewPointsResponseBody {
	s.Data = v
	return s
}

func (s *ListCustomViewPointsResponseBody) SetHttpStatusCode(v int32) *ListCustomViewPointsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCustomViewPointsResponseBody) SetMaxResults(v int32) *ListCustomViewPointsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListCustomViewPointsResponseBody) SetMessage(v string) *ListCustomViewPointsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCustomViewPointsResponseBody) SetNextToken(v string) *ListCustomViewPointsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListCustomViewPointsResponseBody) SetRequestId(v string) *ListCustomViewPointsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomViewPointsResponseBody) SetSuccess(v bool) *ListCustomViewPointsResponseBody {
	s.Success = &v
	return s
}

func (s *ListCustomViewPointsResponseBody) SetTotalCount(v int32) *ListCustomViewPointsResponseBody {
	s.TotalCount = &v
	return s
}

type ListCustomViewPointsResponseBodyData struct {
	// example:
	//
	// 2323ac73e174428a98c91097a59c67e0
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	// example:
	//
	// 观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 2024-08-15 16:18:59
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// 709806dd051042d5ab9de8bdbb3a64ca
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 参数校验失败
	TaskErrorMessage *string `json:"TaskErrorMessage,omitempty" xml:"TaskErrorMessage,omitempty"`
	// example:
	//
	// 1
	TaskStatus *int32                                            `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	ViewPoints []*ListCustomViewPointsResponseBodyDataViewPoints `json:"ViewPoints,omitempty" xml:"ViewPoints,omitempty" type:"Repeated"`
}

func (s ListCustomViewPointsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCustomViewPointsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCustomViewPointsResponseBodyData) SetAsyncTaskId(v string) *ListCustomViewPointsResponseBodyData {
	s.AsyncTaskId = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyData) SetAttitude(v string) *ListCustomViewPointsResponseBodyData {
	s.Attitude = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyData) SetCreateTime(v string) *ListCustomViewPointsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyData) SetCreateUser(v string) *ListCustomViewPointsResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyData) SetId(v string) *ListCustomViewPointsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyData) SetStatus(v string) *ListCustomViewPointsResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyData) SetTaskErrorMessage(v string) *ListCustomViewPointsResponseBodyData {
	s.TaskErrorMessage = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyData) SetTaskStatus(v int32) *ListCustomViewPointsResponseBodyData {
	s.TaskStatus = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyData) SetViewPoints(v []*ListCustomViewPointsResponseBodyDataViewPoints) *ListCustomViewPointsResponseBodyData {
	s.ViewPoints = v
	return s
}

type ListCustomViewPointsResponseBodyDataViewPoints struct {
	Outlines []*ListCustomViewPointsResponseBodyDataViewPointsOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListCustomViewPointsResponseBodyDataViewPoints) String() string {
	return tea.Prettify(s)
}

func (s ListCustomViewPointsResponseBodyDataViewPoints) GoString() string {
	return s.String()
}

func (s *ListCustomViewPointsResponseBodyDataViewPoints) SetOutlines(v []*ListCustomViewPointsResponseBodyDataViewPointsOutlines) *ListCustomViewPointsResponseBodyDataViewPoints {
	s.Outlines = v
	return s
}

func (s *ListCustomViewPointsResponseBodyDataViewPoints) SetPoint(v string) *ListCustomViewPointsResponseBodyDataViewPoints {
	s.Point = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyDataViewPoints) SetSummary(v string) *ListCustomViewPointsResponseBodyDataViewPoints {
	s.Summary = &v
	return s
}

type ListCustomViewPointsResponseBodyDataViewPointsOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListCustomViewPointsResponseBodyDataViewPointsOutlines) String() string {
	return tea.Prettify(s)
}

func (s ListCustomViewPointsResponseBodyDataViewPointsOutlines) GoString() string {
	return s.String()
}

func (s *ListCustomViewPointsResponseBodyDataViewPointsOutlines) SetOutline(v string) *ListCustomViewPointsResponseBodyDataViewPointsOutlines {
	s.Outline = &v
	return s
}

func (s *ListCustomViewPointsResponseBodyDataViewPointsOutlines) SetSummary(v string) *ListCustomViewPointsResponseBodyDataViewPointsOutlines {
	s.Summary = &v
	return s
}

type ListCustomViewPointsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomViewPointsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomViewPointsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomViewPointsResponse) GoString() string {
	return s.String()
}

func (s *ListCustomViewPointsResponse) SetHeaders(v map[string]*string) *ListCustomViewPointsResponse {
	s.Headers = v
	return s
}

func (s *ListCustomViewPointsResponse) SetStatusCode(v int32) *ListCustomViewPointsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomViewPointsResponse) SetBody(v *ListCustomViewPointsResponseBody) *ListCustomViewPointsResponse {
	s.Body = v
	return s
}

type ListDatasetDocumentsRequest struct {
	// example:
	//
	// xx
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 数据集名称
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// text
	DocType       *string   `json:"DocType,omitempty" xml:"DocType,omitempty"`
	ExcludeFields []*string `json:"ExcludeFields,omitempty" xml:"ExcludeFields,omitempty" type:"Repeated"`
	IncludeFields []*string `json:"IncludeFields,omitempty" xml:"IncludeFields,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 搜索条件
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// 100
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListDatasetDocumentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetDocumentsRequest) GoString() string {
	return s.String()
}

func (s *ListDatasetDocumentsRequest) SetDatasetDescription(v string) *ListDatasetDocumentsRequest {
	s.DatasetDescription = &v
	return s
}

func (s *ListDatasetDocumentsRequest) SetDatasetId(v int64) *ListDatasetDocumentsRequest {
	s.DatasetId = &v
	return s
}

func (s *ListDatasetDocumentsRequest) SetDatasetName(v string) *ListDatasetDocumentsRequest {
	s.DatasetName = &v
	return s
}

func (s *ListDatasetDocumentsRequest) SetDocType(v string) *ListDatasetDocumentsRequest {
	s.DocType = &v
	return s
}

func (s *ListDatasetDocumentsRequest) SetExcludeFields(v []*string) *ListDatasetDocumentsRequest {
	s.ExcludeFields = v
	return s
}

func (s *ListDatasetDocumentsRequest) SetIncludeFields(v []*string) *ListDatasetDocumentsRequest {
	s.IncludeFields = v
	return s
}

func (s *ListDatasetDocumentsRequest) SetPageNumber(v int32) *ListDatasetDocumentsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatasetDocumentsRequest) SetPageSize(v int32) *ListDatasetDocumentsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatasetDocumentsRequest) SetQuery(v string) *ListDatasetDocumentsRequest {
	s.Query = &v
	return s
}

func (s *ListDatasetDocumentsRequest) SetStatus(v int32) *ListDatasetDocumentsRequest {
	s.Status = &v
	return s
}

func (s *ListDatasetDocumentsRequest) SetWorkspaceId(v string) *ListDatasetDocumentsRequest {
	s.WorkspaceId = &v
	return s
}

type ListDatasetDocumentsShrinkRequest struct {
	// example:
	//
	// xx
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 数据集名称
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// text
	DocType             *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	ExcludeFieldsShrink *string `json:"ExcludeFields,omitempty" xml:"ExcludeFields,omitempty"`
	IncludeFieldsShrink *string `json:"IncludeFields,omitempty" xml:"IncludeFields,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 搜索条件
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// 100
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListDatasetDocumentsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetDocumentsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDatasetDocumentsShrinkRequest) SetDatasetDescription(v string) *ListDatasetDocumentsShrinkRequest {
	s.DatasetDescription = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetDatasetId(v int64) *ListDatasetDocumentsShrinkRequest {
	s.DatasetId = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetDatasetName(v string) *ListDatasetDocumentsShrinkRequest {
	s.DatasetName = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetDocType(v string) *ListDatasetDocumentsShrinkRequest {
	s.DocType = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetExcludeFieldsShrink(v string) *ListDatasetDocumentsShrinkRequest {
	s.ExcludeFieldsShrink = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetIncludeFieldsShrink(v string) *ListDatasetDocumentsShrinkRequest {
	s.IncludeFieldsShrink = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetPageNumber(v int32) *ListDatasetDocumentsShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetPageSize(v int32) *ListDatasetDocumentsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetQuery(v string) *ListDatasetDocumentsShrinkRequest {
	s.Query = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetStatus(v int32) *ListDatasetDocumentsShrinkRequest {
	s.Status = &v
	return s
}

func (s *ListDatasetDocumentsShrinkRequest) SetWorkspaceId(v string) *ListDatasetDocumentsShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type ListDatasetDocumentsResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListDatasetDocumentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDatasetDocumentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetDocumentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatasetDocumentsResponseBody) SetCode(v string) *ListDatasetDocumentsResponseBody {
	s.Code = &v
	return s
}

func (s *ListDatasetDocumentsResponseBody) SetData(v []*ListDatasetDocumentsResponseBodyData) *ListDatasetDocumentsResponseBody {
	s.Data = v
	return s
}

func (s *ListDatasetDocumentsResponseBody) SetHttpStatusCode(v int32) *ListDatasetDocumentsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDatasetDocumentsResponseBody) SetMessage(v string) *ListDatasetDocumentsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDatasetDocumentsResponseBody) SetPageNumber(v int32) *ListDatasetDocumentsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListDatasetDocumentsResponseBody) SetPageSize(v int32) *ListDatasetDocumentsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListDatasetDocumentsResponseBody) SetRequestId(v string) *ListDatasetDocumentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatasetDocumentsResponseBody) SetSuccess(v bool) *ListDatasetDocumentsResponseBody {
	s.Success = &v
	return s
}

func (s *ListDatasetDocumentsResponseBody) SetTotalCount(v int32) *ListDatasetDocumentsResponseBody {
	s.TotalCount = &v
	return s
}

type ListDatasetDocumentsResponseBodyData struct {
	// example:
	//
	// xx
	CategoryUuid *string `json:"CategoryUuid,omitempty" xml:"CategoryUuid,omitempty"`
	// example:
	//
	// xx
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// false
	DisableHandleMultimodalMedia *bool `json:"DisableHandleMultimodalMedia,omitempty" xml:"DisableHandleMultimodalMedia,omitempty"`
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// text
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// 内部文档唯一ID
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// xx
	Extend1 *string `json:"Extend1,omitempty" xml:"Extend1,omitempty"`
	// example:
	//
	// xx
	Extend2 *string `json:"Extend2,omitempty" xml:"Extend2,omitempty"`
	// example:
	//
	// xx
	Extend3          *string                                                 `json:"Extend3,omitempty" xml:"Extend3,omitempty"`
	MultimodalMedias []*ListDatasetDocumentsResponseBodyDataMultimodalMedias `json:"MultimodalMedias,omitempty" xml:"MultimodalMedias,omitempty" type:"Repeated"`
	// example:
	//
	// 2022-01-01 00:00:00
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 来源
	SourceFrom *string `json:"SourceFrom,omitempty" xml:"SourceFrom,omitempty"`
	// example:
	//
	// 100
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// url
	//
	// example:
	//
	// https://xxx/xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListDatasetDocumentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetDocumentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDatasetDocumentsResponseBodyData) SetCategoryUuid(v string) *ListDatasetDocumentsResponseBodyData {
	s.CategoryUuid = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetContent(v string) *ListDatasetDocumentsResponseBodyData {
	s.Content = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetDisableHandleMultimodalMedia(v bool) *ListDatasetDocumentsResponseBodyData {
	s.DisableHandleMultimodalMedia = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetDocId(v string) *ListDatasetDocumentsResponseBodyData {
	s.DocId = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetDocType(v string) *ListDatasetDocumentsResponseBodyData {
	s.DocType = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetDocUuid(v string) *ListDatasetDocumentsResponseBodyData {
	s.DocUuid = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetExtend1(v string) *ListDatasetDocumentsResponseBodyData {
	s.Extend1 = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetExtend2(v string) *ListDatasetDocumentsResponseBodyData {
	s.Extend2 = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetExtend3(v string) *ListDatasetDocumentsResponseBodyData {
	s.Extend3 = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetMultimodalMedias(v []*ListDatasetDocumentsResponseBodyDataMultimodalMedias) *ListDatasetDocumentsResponseBodyData {
	s.MultimodalMedias = v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetPubTime(v string) *ListDatasetDocumentsResponseBodyData {
	s.PubTime = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetSourceFrom(v string) *ListDatasetDocumentsResponseBodyData {
	s.SourceFrom = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetStatus(v int32) *ListDatasetDocumentsResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetSummary(v string) *ListDatasetDocumentsResponseBodyData {
	s.Summary = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetTitle(v string) *ListDatasetDocumentsResponseBodyData {
	s.Title = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyData) SetUrl(v string) *ListDatasetDocumentsResponseBodyData {
	s.Url = &v
	return s
}

type ListDatasetDocumentsResponseBodyDataMultimodalMedias struct {
	// example:
	//
	// 图片或视频文件地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// 多模态数据唯一标识
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 多模态数据类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s ListDatasetDocumentsResponseBodyDataMultimodalMedias) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetDocumentsResponseBodyDataMultimodalMedias) GoString() string {
	return s.String()
}

func (s *ListDatasetDocumentsResponseBodyDataMultimodalMedias) SetFileUrl(v string) *ListDatasetDocumentsResponseBodyDataMultimodalMedias {
	s.FileUrl = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyDataMultimodalMedias) SetMediaId(v string) *ListDatasetDocumentsResponseBodyDataMultimodalMedias {
	s.MediaId = &v
	return s
}

func (s *ListDatasetDocumentsResponseBodyDataMultimodalMedias) SetMediaType(v string) *ListDatasetDocumentsResponseBodyDataMultimodalMedias {
	s.MediaType = &v
	return s
}

type ListDatasetDocumentsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatasetDocumentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatasetDocumentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetDocumentsResponse) GoString() string {
	return s.String()
}

func (s *ListDatasetDocumentsResponse) SetHeaders(v map[string]*string) *ListDatasetDocumentsResponse {
	s.Headers = v
	return s
}

func (s *ListDatasetDocumentsResponse) SetStatusCode(v int32) *ListDatasetDocumentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatasetDocumentsResponse) SetBody(v *ListDatasetDocumentsResponseBody) *ListDatasetDocumentsResponse {
	s.Body = v
	return s
}

type ListDatasetsRequest struct {
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// businessDataset
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// CustomSemanticSearch
	DatasetType *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	// example:
	//
	// 创建时间-结束
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 3
	SearchDatasetEnable *int32 `json:"SearchDatasetEnable,omitempty" xml:"SearchDatasetEnable,omitempty"`
	// example:
	//
	// 创建时间-开始
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListDatasetsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetsRequest) GoString() string {
	return s.String()
}

func (s *ListDatasetsRequest) SetDatasetId(v int64) *ListDatasetsRequest {
	s.DatasetId = &v
	return s
}

func (s *ListDatasetsRequest) SetDatasetName(v string) *ListDatasetsRequest {
	s.DatasetName = &v
	return s
}

func (s *ListDatasetsRequest) SetDatasetType(v string) *ListDatasetsRequest {
	s.DatasetType = &v
	return s
}

func (s *ListDatasetsRequest) SetEndTime(v string) *ListDatasetsRequest {
	s.EndTime = &v
	return s
}

func (s *ListDatasetsRequest) SetPageNumber(v int32) *ListDatasetsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatasetsRequest) SetPageSize(v string) *ListDatasetsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatasetsRequest) SetSearchDatasetEnable(v int32) *ListDatasetsRequest {
	s.SearchDatasetEnable = &v
	return s
}

func (s *ListDatasetsRequest) SetStartTime(v string) *ListDatasetsRequest {
	s.StartTime = &v
	return s
}

func (s *ListDatasetsRequest) SetWorkspaceId(v string) *ListDatasetsRequest {
	s.WorkspaceId = &v
	return s
}

type ListDatasetsResponseBody struct {
	// example:
	//
	// NoData
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListDatasetsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDatasetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatasetsResponseBody) SetCode(v string) *ListDatasetsResponseBody {
	s.Code = &v
	return s
}

func (s *ListDatasetsResponseBody) SetData(v []*ListDatasetsResponseBodyData) *ListDatasetsResponseBody {
	s.Data = v
	return s
}

func (s *ListDatasetsResponseBody) SetHttpStatusCode(v int32) *ListDatasetsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDatasetsResponseBody) SetMessage(v string) *ListDatasetsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDatasetsResponseBody) SetPageNumber(v int32) *ListDatasetsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListDatasetsResponseBody) SetPageSize(v int32) *ListDatasetsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListDatasetsResponseBody) SetRequestId(v string) *ListDatasetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatasetsResponseBody) SetSuccess(v bool) *ListDatasetsResponseBody {
	s.Success = &v
	return s
}

func (s *ListDatasetsResponseBody) SetTotalCount(v int32) *ListDatasetsResponseBody {
	s.TotalCount = &v
	return s
}

type ListDatasetsResponseBodyData struct {
	// example:
	//
	// 2024-11-12 21:46:24
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// xxx
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// xxx
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// xxx
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// CustomSemanticSearch
	DatasetType *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	// example:
	//
	// 1
	SearchDatasetEnable *int32 `json:"SearchDatasetEnable,omitempty" xml:"SearchDatasetEnable,omitempty"`
}

func (s ListDatasetsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDatasetsResponseBodyData) SetCreateTime(v string) *ListDatasetsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListDatasetsResponseBodyData) SetCreateUser(v string) *ListDatasetsResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *ListDatasetsResponseBodyData) SetDatasetDescription(v string) *ListDatasetsResponseBodyData {
	s.DatasetDescription = &v
	return s
}

func (s *ListDatasetsResponseBodyData) SetDatasetId(v int64) *ListDatasetsResponseBodyData {
	s.DatasetId = &v
	return s
}

func (s *ListDatasetsResponseBodyData) SetDatasetName(v string) *ListDatasetsResponseBodyData {
	s.DatasetName = &v
	return s
}

func (s *ListDatasetsResponseBodyData) SetDatasetType(v string) *ListDatasetsResponseBodyData {
	s.DatasetType = &v
	return s
}

func (s *ListDatasetsResponseBodyData) SetSearchDatasetEnable(v int32) *ListDatasetsResponseBodyData {
	s.SearchDatasetEnable = &v
	return s
}

type ListDatasetsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatasetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatasetsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatasetsResponse) GoString() string {
	return s.String()
}

func (s *ListDatasetsResponse) SetHeaders(v map[string]*string) *ListDatasetsResponse {
	s.Headers = v
	return s
}

func (s *ListDatasetsResponse) SetStatusCode(v int32) *ListDatasetsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatasetsResponse) SetBody(v *ListDatasetsResponseBody) *ListDatasetsResponse {
	s.Body = v
	return s
}

type ListDialoguesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// 2
	DialogueType *int32 `json:"DialogueType,omitempty" xml:"DialogueType,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ListDialoguesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDialoguesRequest) GoString() string {
	return s.String()
}

func (s *ListDialoguesRequest) SetAgentKey(v string) *ListDialoguesRequest {
	s.AgentKey = &v
	return s
}

func (s *ListDialoguesRequest) SetCurrent(v int32) *ListDialoguesRequest {
	s.Current = &v
	return s
}

func (s *ListDialoguesRequest) SetDialogueType(v int32) *ListDialoguesRequest {
	s.DialogueType = &v
	return s
}

func (s *ListDialoguesRequest) SetEndTime(v string) *ListDialoguesRequest {
	s.EndTime = &v
	return s
}

func (s *ListDialoguesRequest) SetSize(v int32) *ListDialoguesRequest {
	s.Size = &v
	return s
}

func (s *ListDialoguesRequest) SetStartTime(v string) *ListDialoguesRequest {
	s.StartTime = &v
	return s
}

func (s *ListDialoguesRequest) SetTaskId(v string) *ListDialoguesRequest {
	s.TaskId = &v
	return s
}

type ListDialoguesResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1
	Current *int32                           `json:"Current,omitempty" xml:"Current,omitempty"`
	Data    []*ListDialoguesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListDialoguesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDialoguesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDialoguesResponseBody) SetCode(v string) *ListDialoguesResponseBody {
	s.Code = &v
	return s
}

func (s *ListDialoguesResponseBody) SetCurrent(v int32) *ListDialoguesResponseBody {
	s.Current = &v
	return s
}

func (s *ListDialoguesResponseBody) SetData(v []*ListDialoguesResponseBodyData) *ListDialoguesResponseBody {
	s.Data = v
	return s
}

func (s *ListDialoguesResponseBody) SetHttpStatusCode(v int32) *ListDialoguesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDialoguesResponseBody) SetMessage(v string) *ListDialoguesResponseBody {
	s.Message = &v
	return s
}

func (s *ListDialoguesResponseBody) SetRequestId(v string) *ListDialoguesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDialoguesResponseBody) SetSize(v int32) *ListDialoguesResponseBody {
	s.Size = &v
	return s
}

func (s *ListDialoguesResponseBody) SetSuccess(v bool) *ListDialoguesResponseBody {
	s.Success = &v
	return s
}

func (s *ListDialoguesResponseBody) SetTotal(v int32) *ListDialoguesResponseBody {
	s.Total = &v
	return s
}

type ListDialoguesResponseBodyData struct {
	// example:
	//
	// xx
	Bot *string `json:"Bot,omitempty" xml:"Bot,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// xx
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// 2
	DialogueType *int32 `json:"DialogueType,omitempty" xml:"DialogueType,omitempty"`
	// example:
	//
	// xx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// x
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s ListDialoguesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDialoguesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDialoguesResponseBodyData) SetBot(v string) *ListDialoguesResponseBodyData {
	s.Bot = &v
	return s
}

func (s *ListDialoguesResponseBodyData) SetCreateTime(v string) *ListDialoguesResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListDialoguesResponseBodyData) SetCreateUser(v string) *ListDialoguesResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *ListDialoguesResponseBodyData) SetDialogueType(v int32) *ListDialoguesResponseBodyData {
	s.DialogueType = &v
	return s
}

func (s *ListDialoguesResponseBodyData) SetTaskId(v string) *ListDialoguesResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *ListDialoguesResponseBodyData) SetUser(v string) *ListDialoguesResponseBodyData {
	s.User = &v
	return s
}

type ListDialoguesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDialoguesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDialoguesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDialoguesResponse) GoString() string {
	return s.String()
}

func (s *ListDialoguesResponse) SetHeaders(v map[string]*string) *ListDialoguesResponse {
	s.Headers = v
	return s
}

func (s *ListDialoguesResponse) SetStatusCode(v int32) *ListDialoguesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDialoguesResponse) SetBody(v *ListDialoguesResponseBody) *ListDialoguesResponse {
	s.Body = v
	return s
}

type ListDocsRequest struct {
	// example:
	//
	// default
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	DocName    *string `json:"DocName,omitempty" xml:"DocName,omitempty"`
	// example:
	//
	// pdf
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 52a33dc83779f63641e16f5146cd7125
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 10
	Skip     *int32   `json:"Skip,omitempty" xml:"Skip,omitempty"`
	Statuses []*int32 `json:"Statuses,omitempty" xml:"Statuses,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListDocsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDocsRequest) GoString() string {
	return s.String()
}

func (s *ListDocsRequest) SetCategoryId(v string) *ListDocsRequest {
	s.CategoryId = &v
	return s
}

func (s *ListDocsRequest) SetDocName(v string) *ListDocsRequest {
	s.DocName = &v
	return s
}

func (s *ListDocsRequest) SetDocType(v string) *ListDocsRequest {
	s.DocType = &v
	return s
}

func (s *ListDocsRequest) SetMaxResults(v int32) *ListDocsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDocsRequest) SetNextToken(v string) *ListDocsRequest {
	s.NextToken = &v
	return s
}

func (s *ListDocsRequest) SetSkip(v int32) *ListDocsRequest {
	s.Skip = &v
	return s
}

func (s *ListDocsRequest) SetStatuses(v []*int32) *ListDocsRequest {
	s.Statuses = v
	return s
}

func (s *ListDocsRequest) SetWorkspaceId(v string) *ListDocsRequest {
	s.WorkspaceId = &v
	return s
}

type ListDocsShrinkRequest struct {
	// example:
	//
	// default
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	DocName    *string `json:"DocName,omitempty" xml:"DocName,omitempty"`
	// example:
	//
	// pdf
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 52a33dc83779f63641e16f5146cd7125
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 10
	Skip           *int32  `json:"Skip,omitempty" xml:"Skip,omitempty"`
	StatusesShrink *string `json:"Statuses,omitempty" xml:"Statuses,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListDocsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDocsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDocsShrinkRequest) SetCategoryId(v string) *ListDocsShrinkRequest {
	s.CategoryId = &v
	return s
}

func (s *ListDocsShrinkRequest) SetDocName(v string) *ListDocsShrinkRequest {
	s.DocName = &v
	return s
}

func (s *ListDocsShrinkRequest) SetDocType(v string) *ListDocsShrinkRequest {
	s.DocType = &v
	return s
}

func (s *ListDocsShrinkRequest) SetMaxResults(v int32) *ListDocsShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDocsShrinkRequest) SetNextToken(v string) *ListDocsShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListDocsShrinkRequest) SetSkip(v int32) *ListDocsShrinkRequest {
	s.Skip = &v
	return s
}

func (s *ListDocsShrinkRequest) SetStatusesShrink(v string) *ListDocsShrinkRequest {
	s.StatusesShrink = &v
	return s
}

func (s *ListDocsShrinkRequest) SetWorkspaceId(v string) *ListDocsShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type ListDocsResponseBody struct {
	// example:
	//
	// successful
	Code *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListDocsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJANEQ4mYAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM4NzA3MjZjN2E2NDYyNzUzODMxMzY3ODM0NmIzNTZkNjc=
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 70
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDocsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDocsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDocsResponseBody) SetCode(v string) *ListDocsResponseBody {
	s.Code = &v
	return s
}

func (s *ListDocsResponseBody) SetData(v []*ListDocsResponseBodyData) *ListDocsResponseBody {
	s.Data = v
	return s
}

func (s *ListDocsResponseBody) SetHttpStatusCode(v int32) *ListDocsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDocsResponseBody) SetMaxResults(v int32) *ListDocsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListDocsResponseBody) SetMessage(v string) *ListDocsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDocsResponseBody) SetNextToken(v string) *ListDocsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDocsResponseBody) SetRequestId(v string) *ListDocsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDocsResponseBody) SetSuccess(v bool) *ListDocsResponseBody {
	s.Success = &v
	return s
}

func (s *ListDocsResponseBody) SetTotalCount(v int32) *ListDocsResponseBody {
	s.TotalCount = &v
	return s
}

type ListDocsResponseBodyData struct {
	// example:
	//
	// default
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 12345
	DocId   *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	DocName *string `json:"DocName,omitempty" xml:"DocName,omitempty"`
	// example:
	//
	// pdf
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// 0
	Status        *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusMessage *string `json:"StatusMessage,omitempty" xml:"StatusMessage,omitempty"`
}

func (s ListDocsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDocsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDocsResponseBodyData) SetCategoryId(v string) *ListDocsResponseBodyData {
	s.CategoryId = &v
	return s
}

func (s *ListDocsResponseBodyData) SetCreateTime(v int64) *ListDocsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListDocsResponseBodyData) SetDocId(v string) *ListDocsResponseBodyData {
	s.DocId = &v
	return s
}

func (s *ListDocsResponseBodyData) SetDocName(v string) *ListDocsResponseBodyData {
	s.DocName = &v
	return s
}

func (s *ListDocsResponseBodyData) SetDocType(v string) *ListDocsResponseBodyData {
	s.DocType = &v
	return s
}

func (s *ListDocsResponseBodyData) SetStatus(v int32) *ListDocsResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListDocsResponseBodyData) SetStatusMessage(v string) *ListDocsResponseBodyData {
	s.StatusMessage = &v
	return s
}

type ListDocsResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDocsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDocsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDocsResponse) GoString() string {
	return s.String()
}

func (s *ListDocsResponse) SetHeaders(v map[string]*string) *ListDocsResponse {
	s.Headers = v
	return s
}

func (s *ListDocsResponse) SetStatusCode(v int32) *ListDocsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDocsResponse) SetBody(v *ListDocsResponseBody) *ListDocsResponse {
	s.Body = v
	return s
}

type ListFreshViewPointsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 6
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜源
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
}

func (s ListFreshViewPointsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFreshViewPointsRequest) GoString() string {
	return s.String()
}

func (s *ListFreshViewPointsRequest) SetAgentKey(v string) *ListFreshViewPointsRequest {
	s.AgentKey = &v
	return s
}

func (s *ListFreshViewPointsRequest) SetMaxResults(v int32) *ListFreshViewPointsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListFreshViewPointsRequest) SetNextToken(v string) *ListFreshViewPointsRequest {
	s.NextToken = &v
	return s
}

func (s *ListFreshViewPointsRequest) SetTopic(v string) *ListFreshViewPointsRequest {
	s.Topic = &v
	return s
}

func (s *ListFreshViewPointsRequest) SetTopicSource(v string) *ListFreshViewPointsRequest {
	s.TopicSource = &v
	return s
}

type ListFreshViewPointsResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListFreshViewPointsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 94
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 26
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFreshViewPointsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFreshViewPointsResponseBody) GoString() string {
	return s.String()
}

func (s *ListFreshViewPointsResponseBody) SetCode(v string) *ListFreshViewPointsResponseBody {
	s.Code = &v
	return s
}

func (s *ListFreshViewPointsResponseBody) SetData(v []*ListFreshViewPointsResponseBodyData) *ListFreshViewPointsResponseBody {
	s.Data = v
	return s
}

func (s *ListFreshViewPointsResponseBody) SetHttpStatusCode(v int32) *ListFreshViewPointsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListFreshViewPointsResponseBody) SetMaxResults(v int32) *ListFreshViewPointsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListFreshViewPointsResponseBody) SetMessage(v string) *ListFreshViewPointsResponseBody {
	s.Message = &v
	return s
}

func (s *ListFreshViewPointsResponseBody) SetNextToken(v string) *ListFreshViewPointsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListFreshViewPointsResponseBody) SetRequestId(v string) *ListFreshViewPointsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFreshViewPointsResponseBody) SetSuccess(v bool) *ListFreshViewPointsResponseBody {
	s.Success = &v
	return s
}

func (s *ListFreshViewPointsResponseBody) SetTotalCount(v int32) *ListFreshViewPointsResponseBody {
	s.TotalCount = &v
	return s
}

type ListFreshViewPointsResponseBodyData struct {
	Outlines []*ListFreshViewPointsResponseBodyDataOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListFreshViewPointsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListFreshViewPointsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListFreshViewPointsResponseBodyData) SetOutlines(v []*ListFreshViewPointsResponseBodyDataOutlines) *ListFreshViewPointsResponseBodyData {
	s.Outlines = v
	return s
}

func (s *ListFreshViewPointsResponseBodyData) SetPoint(v string) *ListFreshViewPointsResponseBodyData {
	s.Point = &v
	return s
}

func (s *ListFreshViewPointsResponseBodyData) SetSummary(v string) *ListFreshViewPointsResponseBodyData {
	s.Summary = &v
	return s
}

type ListFreshViewPointsResponseBodyDataOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListFreshViewPointsResponseBodyDataOutlines) String() string {
	return tea.Prettify(s)
}

func (s ListFreshViewPointsResponseBodyDataOutlines) GoString() string {
	return s.String()
}

func (s *ListFreshViewPointsResponseBodyDataOutlines) SetOutline(v string) *ListFreshViewPointsResponseBodyDataOutlines {
	s.Outline = &v
	return s
}

func (s *ListFreshViewPointsResponseBodyDataOutlines) SetSummary(v string) *ListFreshViewPointsResponseBodyDataOutlines {
	s.Summary = &v
	return s
}

type ListFreshViewPointsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFreshViewPointsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFreshViewPointsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFreshViewPointsResponse) GoString() string {
	return s.String()
}

func (s *ListFreshViewPointsResponse) SetHeaders(v map[string]*string) *ListFreshViewPointsResponse {
	s.Headers = v
	return s
}

func (s *ListFreshViewPointsResponse) SetStatusCode(v int32) *ListFreshViewPointsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFreshViewPointsResponse) SetBody(v *ListFreshViewPointsResponseBody) *ListFreshViewPointsResponse {
	s.Body = v
	return s
}

type ListGeneratedContentsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// media
	ContentDomain *string `json:"ContentDomain,omitempty" xml:"ContentDomain,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Query   *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Title     *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s ListGeneratedContentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListGeneratedContentsRequest) GoString() string {
	return s.String()
}

func (s *ListGeneratedContentsRequest) SetAgentKey(v string) *ListGeneratedContentsRequest {
	s.AgentKey = &v
	return s
}

func (s *ListGeneratedContentsRequest) SetContentDomain(v string) *ListGeneratedContentsRequest {
	s.ContentDomain = &v
	return s
}

func (s *ListGeneratedContentsRequest) SetCurrent(v int32) *ListGeneratedContentsRequest {
	s.Current = &v
	return s
}

func (s *ListGeneratedContentsRequest) SetEndTime(v string) *ListGeneratedContentsRequest {
	s.EndTime = &v
	return s
}

func (s *ListGeneratedContentsRequest) SetQuery(v string) *ListGeneratedContentsRequest {
	s.Query = &v
	return s
}

func (s *ListGeneratedContentsRequest) SetSize(v int32) *ListGeneratedContentsRequest {
	s.Size = &v
	return s
}

func (s *ListGeneratedContentsRequest) SetStartTime(v string) *ListGeneratedContentsRequest {
	s.StartTime = &v
	return s
}

func (s *ListGeneratedContentsRequest) SetTaskId(v string) *ListGeneratedContentsRequest {
	s.TaskId = &v
	return s
}

func (s *ListGeneratedContentsRequest) SetTitle(v string) *ListGeneratedContentsRequest {
	s.Title = &v
	return s
}

type ListGeneratedContentsResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1
	Current *int32                                   `json:"Current,omitempty" xml:"Current,omitempty"`
	Data    []*ListGeneratedContentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListGeneratedContentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListGeneratedContentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListGeneratedContentsResponseBody) SetCode(v string) *ListGeneratedContentsResponseBody {
	s.Code = &v
	return s
}

func (s *ListGeneratedContentsResponseBody) SetCurrent(v int32) *ListGeneratedContentsResponseBody {
	s.Current = &v
	return s
}

func (s *ListGeneratedContentsResponseBody) SetData(v []*ListGeneratedContentsResponseBodyData) *ListGeneratedContentsResponseBody {
	s.Data = v
	return s
}

func (s *ListGeneratedContentsResponseBody) SetHttpStatusCode(v int32) *ListGeneratedContentsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListGeneratedContentsResponseBody) SetMessage(v string) *ListGeneratedContentsResponseBody {
	s.Message = &v
	return s
}

func (s *ListGeneratedContentsResponseBody) SetRequestId(v string) *ListGeneratedContentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListGeneratedContentsResponseBody) SetSize(v int32) *ListGeneratedContentsResponseBody {
	s.Size = &v
	return s
}

func (s *ListGeneratedContentsResponseBody) SetSuccess(v bool) *ListGeneratedContentsResponseBody {
	s.Success = &v
	return s
}

func (s *ListGeneratedContentsResponseBody) SetTotal(v int32) *ListGeneratedContentsResponseBody {
	s.Total = &v
	return s
}

type ListGeneratedContentsResponseBodyData struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// media
	ContentDomain *string `json:"ContentDomain,omitempty" xml:"ContentDomain,omitempty"`
	ContentText   *string `json:"ContentText,omitempty" xml:"ContentText,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 123
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// xxx
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 10
	Id          *int64    `json:"Id,omitempty" xml:"Id,omitempty"`
	KeywordList []*string `json:"KeywordList,omitempty" xml:"KeywordList,omitempty" type:"Repeated"`
	Keywords    *string   `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	Prompt      *string   `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 2024-01-04 11:46:07
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 1111
	UpdateUser *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
	// example:
	//
	// xxx
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ListGeneratedContentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListGeneratedContentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListGeneratedContentsResponseBodyData) SetContent(v string) *ListGeneratedContentsResponseBodyData {
	s.Content = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetContentDomain(v string) *ListGeneratedContentsResponseBodyData {
	s.ContentDomain = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetContentText(v string) *ListGeneratedContentsResponseBodyData {
	s.ContentText = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetCreateTime(v string) *ListGeneratedContentsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetCreateUser(v string) *ListGeneratedContentsResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetDeviceId(v string) *ListGeneratedContentsResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetId(v int64) *ListGeneratedContentsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetKeywordList(v []*string) *ListGeneratedContentsResponseBodyData {
	s.KeywordList = v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetKeywords(v string) *ListGeneratedContentsResponseBodyData {
	s.Keywords = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetPrompt(v string) *ListGeneratedContentsResponseBodyData {
	s.Prompt = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetTaskId(v string) *ListGeneratedContentsResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetTitle(v string) *ListGeneratedContentsResponseBodyData {
	s.Title = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetUpdateTime(v string) *ListGeneratedContentsResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetUpdateUser(v string) *ListGeneratedContentsResponseBodyData {
	s.UpdateUser = &v
	return s
}

func (s *ListGeneratedContentsResponseBodyData) SetUuid(v string) *ListGeneratedContentsResponseBodyData {
	s.Uuid = &v
	return s
}

type ListGeneratedContentsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListGeneratedContentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListGeneratedContentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListGeneratedContentsResponse) GoString() string {
	return s.String()
}

func (s *ListGeneratedContentsResponse) SetHeaders(v map[string]*string) *ListGeneratedContentsResponse {
	s.Headers = v
	return s
}

func (s *ListGeneratedContentsResponse) SetStatusCode(v int32) *ListGeneratedContentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListGeneratedContentsResponse) SetBody(v *ListGeneratedContentsResponseBody) *ListGeneratedContentsResponse {
	s.Body = v
	return s
}

type ListHotNewsWithTypeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// society
	NewsType  *string   `json:"NewsType,omitempty" xml:"NewsType,omitempty"`
	NewsTypes []*string `json:"NewsTypes,omitempty" xml:"NewsTypes,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListHotNewsWithTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHotNewsWithTypeRequest) GoString() string {
	return s.String()
}

func (s *ListHotNewsWithTypeRequest) SetAgentKey(v string) *ListHotNewsWithTypeRequest {
	s.AgentKey = &v
	return s
}

func (s *ListHotNewsWithTypeRequest) SetCurrent(v int32) *ListHotNewsWithTypeRequest {
	s.Current = &v
	return s
}

func (s *ListHotNewsWithTypeRequest) SetNewsType(v string) *ListHotNewsWithTypeRequest {
	s.NewsType = &v
	return s
}

func (s *ListHotNewsWithTypeRequest) SetNewsTypes(v []*string) *ListHotNewsWithTypeRequest {
	s.NewsTypes = v
	return s
}

func (s *ListHotNewsWithTypeRequest) SetSize(v int32) *ListHotNewsWithTypeRequest {
	s.Size = &v
	return s
}

type ListHotNewsWithTypeShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// society
	NewsType        *string `json:"NewsType,omitempty" xml:"NewsType,omitempty"`
	NewsTypesShrink *string `json:"NewsTypes,omitempty" xml:"NewsTypes,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListHotNewsWithTypeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHotNewsWithTypeShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListHotNewsWithTypeShrinkRequest) SetAgentKey(v string) *ListHotNewsWithTypeShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *ListHotNewsWithTypeShrinkRequest) SetCurrent(v int32) *ListHotNewsWithTypeShrinkRequest {
	s.Current = &v
	return s
}

func (s *ListHotNewsWithTypeShrinkRequest) SetNewsType(v string) *ListHotNewsWithTypeShrinkRequest {
	s.NewsType = &v
	return s
}

func (s *ListHotNewsWithTypeShrinkRequest) SetNewsTypesShrink(v string) *ListHotNewsWithTypeShrinkRequest {
	s.NewsTypesShrink = &v
	return s
}

func (s *ListHotNewsWithTypeShrinkRequest) SetSize(v int32) *ListHotNewsWithTypeShrinkRequest {
	s.Size = &v
	return s
}

type ListHotNewsWithTypeResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListHotNewsWithTypeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 数据不存在
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListHotNewsWithTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHotNewsWithTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ListHotNewsWithTypeResponseBody) SetCode(v string) *ListHotNewsWithTypeResponseBody {
	s.Code = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBody) SetData(v []*ListHotNewsWithTypeResponseBodyData) *ListHotNewsWithTypeResponseBody {
	s.Data = v
	return s
}

func (s *ListHotNewsWithTypeResponseBody) SetHttpStatusCode(v int32) *ListHotNewsWithTypeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBody) SetMessage(v string) *ListHotNewsWithTypeResponseBody {
	s.Message = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBody) SetRequestId(v string) *ListHotNewsWithTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBody) SetSuccess(v bool) *ListHotNewsWithTypeResponseBody {
	s.Success = &v
	return s
}

type ListHotNewsWithTypeResponseBodyData struct {
	News []*ListHotNewsWithTypeResponseBodyDataNews `json:"News,omitempty" xml:"News,omitempty" type:"Repeated"`
	// example:
	//
	// society
	NewsType     *string `json:"NewsType,omitempty" xml:"NewsType,omitempty"`
	NewsTypeName *string `json:"NewsTypeName,omitempty" xml:"NewsTypeName,omitempty"`
	// example:
	//
	// 77
	TotalPages *int32 `json:"TotalPages,omitempty" xml:"TotalPages,omitempty"`
}

func (s ListHotNewsWithTypeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListHotNewsWithTypeResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListHotNewsWithTypeResponseBodyData) SetNews(v []*ListHotNewsWithTypeResponseBodyDataNews) *ListHotNewsWithTypeResponseBodyData {
	s.News = v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyData) SetNewsType(v string) *ListHotNewsWithTypeResponseBodyData {
	s.NewsType = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyData) SetNewsTypeName(v string) *ListHotNewsWithTypeResponseBodyData {
	s.NewsTypeName = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyData) SetTotalPages(v int32) *ListHotNewsWithTypeResponseBodyData {
	s.TotalPages = &v
	return s
}

type ListHotNewsWithTypeResponseBodyDataNews struct {
	Author  *string `json:"Author,omitempty" xml:"Author,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	DocUuid   *string   `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	ImageUrls []*string `json:"ImageUrls,omitempty" xml:"ImageUrls,omitempty" type:"Repeated"`
	// example:
	//
	// 2023-04-11 06:14:07
	PubTime          *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	SearchSource     *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	Source           *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Summary          *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	Tag              *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	Title            *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 2023-10-14 14:30:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// http://xxxxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListHotNewsWithTypeResponseBodyDataNews) String() string {
	return tea.Prettify(s)
}

func (s ListHotNewsWithTypeResponseBodyDataNews) GoString() string {
	return s.String()
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetAuthor(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.Author = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetContent(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.Content = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetDocUuid(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.DocUuid = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetImageUrls(v []*string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.ImageUrls = v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetPubTime(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.PubTime = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetSearchSource(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.SearchSource = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetSearchSourceName(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.SearchSourceName = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetSource(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.Source = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetSummary(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.Summary = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetTag(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.Tag = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetTitle(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.Title = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetUpdateTime(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.UpdateTime = &v
	return s
}

func (s *ListHotNewsWithTypeResponseBodyDataNews) SetUrl(v string) *ListHotNewsWithTypeResponseBodyDataNews {
	s.Url = &v
	return s
}

type ListHotNewsWithTypeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHotNewsWithTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHotNewsWithTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHotNewsWithTypeResponse) GoString() string {
	return s.String()
}

func (s *ListHotNewsWithTypeResponse) SetHeaders(v map[string]*string) *ListHotNewsWithTypeResponse {
	s.Headers = v
	return s
}

func (s *ListHotNewsWithTypeResponse) SetStatusCode(v int32) *ListHotNewsWithTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHotNewsWithTypeResponse) SetBody(v *ListHotNewsWithTypeResponseBody) *ListHotNewsWithTypeResponse {
	s.Body = v
	return s
}

type ListHotSourcesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 66
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
}

func (s ListHotSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHotSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListHotSourcesRequest) SetAgentKey(v string) *ListHotSourcesRequest {
	s.AgentKey = &v
	return s
}

func (s *ListHotSourcesRequest) SetMaxResults(v int32) *ListHotSourcesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListHotSourcesRequest) SetNextToken(v string) *ListHotSourcesRequest {
	s.NextToken = &v
	return s
}

type ListHotSourcesResponseBody struct {
	// example:
	//
	// NoData
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListHotSourcesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 4
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// xxxxxx
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 30
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHotSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHotSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListHotSourcesResponseBody) SetCode(v string) *ListHotSourcesResponseBody {
	s.Code = &v
	return s
}

func (s *ListHotSourcesResponseBody) SetData(v []*ListHotSourcesResponseBodyData) *ListHotSourcesResponseBody {
	s.Data = v
	return s
}

func (s *ListHotSourcesResponseBody) SetHttpStatusCode(v int32) *ListHotSourcesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHotSourcesResponseBody) SetMaxResults(v int32) *ListHotSourcesResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListHotSourcesResponseBody) SetMessage(v string) *ListHotSourcesResponseBody {
	s.Message = &v
	return s
}

func (s *ListHotSourcesResponseBody) SetNextToken(v string) *ListHotSourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListHotSourcesResponseBody) SetRequestId(v string) *ListHotSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHotSourcesResponseBody) SetSuccess(v bool) *ListHotSourcesResponseBody {
	s.Success = &v
	return s
}

func (s *ListHotSourcesResponseBody) SetTotalCount(v int32) *ListHotSourcesResponseBody {
	s.TotalCount = &v
	return s
}

type ListHotSourcesResponseBodyData struct {
	// example:
	//
	// 热榜源描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// true
	Show *bool `json:"Show,omitempty" xml:"Show,omitempty"`
	// example:
	//
	// 86
	Sort *int32 `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// example:
	//
	// 热榜源标识
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s ListHotSourcesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListHotSourcesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListHotSourcesResponseBodyData) SetDescription(v string) *ListHotSourcesResponseBodyData {
	s.Description = &v
	return s
}

func (s *ListHotSourcesResponseBodyData) SetShow(v bool) *ListHotSourcesResponseBodyData {
	s.Show = &v
	return s
}

func (s *ListHotSourcesResponseBodyData) SetSort(v int32) *ListHotSourcesResponseBodyData {
	s.Sort = &v
	return s
}

func (s *ListHotSourcesResponseBodyData) SetSource(v string) *ListHotSourcesResponseBodyData {
	s.Source = &v
	return s
}

type ListHotSourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHotSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHotSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHotSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListHotSourcesResponse) SetHeaders(v map[string]*string) *ListHotSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListHotSourcesResponse) SetStatusCode(v int32) *ListHotSourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHotSourcesResponse) SetBody(v *ListHotSourcesResponseBody) *ListHotSourcesResponse {
	s.Body = v
	return s
}

type ListHotTopicsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 1
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TopicIds  []*string `json:"TopicIds,omitempty" xml:"TopicIds,omitempty" type:"Repeated"`
	// example:
	//
	// 根据热榜主题全文检索
	TopicQuery *string `json:"TopicQuery,omitempty" xml:"TopicQuery,omitempty"`
	// example:
	//
	// 热榜源筛选，支持的热榜源。热榜源详见API：ListHotSources
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
	// example:
	//
	// 数据版本筛选
	TopicVersion *string   `json:"TopicVersion,omitempty" xml:"TopicVersion,omitempty"`
	Topics       []*string `json:"Topics,omitempty" xml:"Topics,omitempty" type:"Repeated"`
	// example:
	//
	// true
	WithNews *bool `json:"WithNews,omitempty" xml:"WithNews,omitempty"`
}

func (s ListHotTopicsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHotTopicsRequest) GoString() string {
	return s.String()
}

func (s *ListHotTopicsRequest) SetAgentKey(v string) *ListHotTopicsRequest {
	s.AgentKey = &v
	return s
}

func (s *ListHotTopicsRequest) SetMaxResults(v int32) *ListHotTopicsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListHotTopicsRequest) SetNextToken(v string) *ListHotTopicsRequest {
	s.NextToken = &v
	return s
}

func (s *ListHotTopicsRequest) SetTopicIds(v []*string) *ListHotTopicsRequest {
	s.TopicIds = v
	return s
}

func (s *ListHotTopicsRequest) SetTopicQuery(v string) *ListHotTopicsRequest {
	s.TopicQuery = &v
	return s
}

func (s *ListHotTopicsRequest) SetTopicSource(v string) *ListHotTopicsRequest {
	s.TopicSource = &v
	return s
}

func (s *ListHotTopicsRequest) SetTopicVersion(v string) *ListHotTopicsRequest {
	s.TopicVersion = &v
	return s
}

func (s *ListHotTopicsRequest) SetTopics(v []*string) *ListHotTopicsRequest {
	s.Topics = v
	return s
}

func (s *ListHotTopicsRequest) SetWithNews(v bool) *ListHotTopicsRequest {
	s.WithNews = &v
	return s
}

type ListHotTopicsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 1
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken      *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TopicIdsShrink *string `json:"TopicIds,omitempty" xml:"TopicIds,omitempty"`
	// example:
	//
	// 根据热榜主题全文检索
	TopicQuery *string `json:"TopicQuery,omitempty" xml:"TopicQuery,omitempty"`
	// example:
	//
	// 热榜源筛选，支持的热榜源。热榜源详见API：ListHotSources
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
	// example:
	//
	// 数据版本筛选
	TopicVersion *string `json:"TopicVersion,omitempty" xml:"TopicVersion,omitempty"`
	TopicsShrink *string `json:"Topics,omitempty" xml:"Topics,omitempty"`
	// example:
	//
	// true
	WithNews *bool `json:"WithNews,omitempty" xml:"WithNews,omitempty"`
}

func (s ListHotTopicsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHotTopicsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListHotTopicsShrinkRequest) SetAgentKey(v string) *ListHotTopicsShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *ListHotTopicsShrinkRequest) SetMaxResults(v int32) *ListHotTopicsShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListHotTopicsShrinkRequest) SetNextToken(v string) *ListHotTopicsShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListHotTopicsShrinkRequest) SetTopicIdsShrink(v string) *ListHotTopicsShrinkRequest {
	s.TopicIdsShrink = &v
	return s
}

func (s *ListHotTopicsShrinkRequest) SetTopicQuery(v string) *ListHotTopicsShrinkRequest {
	s.TopicQuery = &v
	return s
}

func (s *ListHotTopicsShrinkRequest) SetTopicSource(v string) *ListHotTopicsShrinkRequest {
	s.TopicSource = &v
	return s
}

func (s *ListHotTopicsShrinkRequest) SetTopicVersion(v string) *ListHotTopicsShrinkRequest {
	s.TopicVersion = &v
	return s
}

func (s *ListHotTopicsShrinkRequest) SetTopicsShrink(v string) *ListHotTopicsShrinkRequest {
	s.TopicsShrink = &v
	return s
}

func (s *ListHotTopicsShrinkRequest) SetWithNews(v bool) *ListHotTopicsShrinkRequest {
	s.WithNews = &v
	return s
}

type ListHotTopicsResponseBody struct {
	// example:
	//
	// NoData
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListHotTopicsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 94
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 23
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHotTopicsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHotTopicsResponseBody) GoString() string {
	return s.String()
}

func (s *ListHotTopicsResponseBody) SetCode(v string) *ListHotTopicsResponseBody {
	s.Code = &v
	return s
}

func (s *ListHotTopicsResponseBody) SetData(v []*ListHotTopicsResponseBodyData) *ListHotTopicsResponseBody {
	s.Data = v
	return s
}

func (s *ListHotTopicsResponseBody) SetHttpStatusCode(v int32) *ListHotTopicsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHotTopicsResponseBody) SetMaxResults(v int32) *ListHotTopicsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListHotTopicsResponseBody) SetMessage(v string) *ListHotTopicsResponseBody {
	s.Message = &v
	return s
}

func (s *ListHotTopicsResponseBody) SetNextToken(v string) *ListHotTopicsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListHotTopicsResponseBody) SetRequestId(v string) *ListHotTopicsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHotTopicsResponseBody) SetSuccess(v bool) *ListHotTopicsResponseBody {
	s.Success = &v
	return s
}

func (s *ListHotTopicsResponseBody) SetTotalCount(v int32) *ListHotTopicsResponseBody {
	s.TotalCount = &v
	return s
}

type ListHotTopicsResponseBodyData struct {
	// example:
	//
	// 异步任务ID（自定义主题场景下使用）
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	// example:
	//
	// 创建用户ID（自定义主题场景下使用）
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// 61
	HotValue *int64 `json:"HotValue,omitempty" xml:"HotValue,omitempty"`
	// example:
	//
	// 热榜ID
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// FAILED
	Status           *string                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	StructureSummary []*ListHotTopicsResponseBodyDataStructureSummary `json:"StructureSummary,omitempty" xml:"StructureSummary,omitempty" type:"Repeated"`
	// example:
	//
	// 热榜摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 异步任务失败错误信息
	TaskErrorMessage *string `json:"TaskErrorMessage,omitempty" xml:"TaskErrorMessage,omitempty"`
	// example:
	//
	// 26
	TaskStatus *int32 `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// example:
	//
	// 主题唯一名称
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// example:
	//
	// 热榜源，目前支持的热榜源: Toutiao：头条、Quark：夸克、Baidu：百度、Sina：新浪。Custom：自定义、Aggregation：热点话题榜
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
	// example:
	//
	// 数据版本
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListHotTopicsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListHotTopicsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListHotTopicsResponseBodyData) SetAsyncTaskId(v string) *ListHotTopicsResponseBodyData {
	s.AsyncTaskId = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetCreateUser(v string) *ListHotTopicsResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetHotValue(v int64) *ListHotTopicsResponseBodyData {
	s.HotValue = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetId(v string) *ListHotTopicsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetStatus(v string) *ListHotTopicsResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetStructureSummary(v []*ListHotTopicsResponseBodyDataStructureSummary) *ListHotTopicsResponseBodyData {
	s.StructureSummary = v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetSummary(v string) *ListHotTopicsResponseBodyData {
	s.Summary = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetTaskErrorMessage(v string) *ListHotTopicsResponseBodyData {
	s.TaskErrorMessage = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetTaskStatus(v int32) *ListHotTopicsResponseBodyData {
	s.TaskStatus = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetTopic(v string) *ListHotTopicsResponseBodyData {
	s.Topic = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetTopicSource(v string) *ListHotTopicsResponseBodyData {
	s.TopicSource = &v
	return s
}

func (s *ListHotTopicsResponseBodyData) SetVersion(v string) *ListHotTopicsResponseBodyData {
	s.Version = &v
	return s
}

type ListHotTopicsResponseBodyDataStructureSummary struct {
	DocList []*ListHotTopicsResponseBodyDataStructureSummaryDocList `json:"DocList,omitempty" xml:"DocList,omitempty" type:"Repeated"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s ListHotTopicsResponseBodyDataStructureSummary) String() string {
	return tea.Prettify(s)
}

func (s ListHotTopicsResponseBodyDataStructureSummary) GoString() string {
	return s.String()
}

func (s *ListHotTopicsResponseBodyDataStructureSummary) SetDocList(v []*ListHotTopicsResponseBodyDataStructureSummaryDocList) *ListHotTopicsResponseBodyDataStructureSummary {
	s.DocList = v
	return s
}

func (s *ListHotTopicsResponseBodyDataStructureSummary) SetSummary(v string) *ListHotTopicsResponseBodyDataStructureSummary {
	s.Summary = &v
	return s
}

func (s *ListHotTopicsResponseBodyDataStructureSummary) SetTitle(v string) *ListHotTopicsResponseBodyDataStructureSummary {
	s.Title = &v
	return s
}

type ListHotTopicsResponseBodyDataStructureSummaryDocList struct {
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// xxxxx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListHotTopicsResponseBodyDataStructureSummaryDocList) String() string {
	return tea.Prettify(s)
}

func (s ListHotTopicsResponseBodyDataStructureSummaryDocList) GoString() string {
	return s.String()
}

func (s *ListHotTopicsResponseBodyDataStructureSummaryDocList) SetSource(v string) *ListHotTopicsResponseBodyDataStructureSummaryDocList {
	s.Source = &v
	return s
}

func (s *ListHotTopicsResponseBodyDataStructureSummaryDocList) SetTitle(v string) *ListHotTopicsResponseBodyDataStructureSummaryDocList {
	s.Title = &v
	return s
}

func (s *ListHotTopicsResponseBodyDataStructureSummaryDocList) SetUrl(v string) *ListHotTopicsResponseBodyDataStructureSummaryDocList {
	s.Url = &v
	return s
}

type ListHotTopicsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHotTopicsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHotTopicsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHotTopicsResponse) GoString() string {
	return s.String()
}

func (s *ListHotTopicsResponse) SetHeaders(v map[string]*string) *ListHotTopicsResponse {
	s.Headers = v
	return s
}

func (s *ListHotTopicsResponse) SetStatusCode(v int32) *ListHotTopicsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHotTopicsResponse) SetBody(v *ListHotTopicsResponseBody) *ListHotTopicsResponse {
	s.Body = v
	return s
}

type ListHotViewPointsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 56
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜源
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
}

func (s ListHotViewPointsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHotViewPointsRequest) GoString() string {
	return s.String()
}

func (s *ListHotViewPointsRequest) SetAgentKey(v string) *ListHotViewPointsRequest {
	s.AgentKey = &v
	return s
}

func (s *ListHotViewPointsRequest) SetMaxResults(v int32) *ListHotViewPointsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListHotViewPointsRequest) SetNextToken(v string) *ListHotViewPointsRequest {
	s.NextToken = &v
	return s
}

func (s *ListHotViewPointsRequest) SetTopic(v string) *ListHotViewPointsRequest {
	s.Topic = &v
	return s
}

func (s *ListHotViewPointsRequest) SetTopicSource(v string) *ListHotViewPointsRequest {
	s.TopicSource = &v
	return s
}

type ListHotViewPointsResponseBody struct {
	// example:
	//
	// NoData
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListHotViewPointsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 67
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 70
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHotViewPointsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHotViewPointsResponseBody) GoString() string {
	return s.String()
}

func (s *ListHotViewPointsResponseBody) SetCode(v string) *ListHotViewPointsResponseBody {
	s.Code = &v
	return s
}

func (s *ListHotViewPointsResponseBody) SetData(v []*ListHotViewPointsResponseBodyData) *ListHotViewPointsResponseBody {
	s.Data = v
	return s
}

func (s *ListHotViewPointsResponseBody) SetHttpStatusCode(v int32) *ListHotViewPointsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHotViewPointsResponseBody) SetMaxResults(v int32) *ListHotViewPointsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListHotViewPointsResponseBody) SetMessage(v string) *ListHotViewPointsResponseBody {
	s.Message = &v
	return s
}

func (s *ListHotViewPointsResponseBody) SetNextToken(v string) *ListHotViewPointsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListHotViewPointsResponseBody) SetRequestId(v string) *ListHotViewPointsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHotViewPointsResponseBody) SetSuccess(v bool) *ListHotViewPointsResponseBody {
	s.Success = &v
	return s
}

func (s *ListHotViewPointsResponseBody) SetTotalCount(v int32) *ListHotViewPointsResponseBody {
	s.TotalCount = &v
	return s
}

type ListHotViewPointsResponseBodyData struct {
	// example:
	//
	// 当前观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点类型
	AttitudeType *string                                  `json:"AttitudeType,omitempty" xml:"AttitudeType,omitempty"`
	News         []*ListHotViewPointsResponseBodyDataNews `json:"News,omitempty" xml:"News,omitempty" type:"Repeated"`
	// example:
	//
	// 当前观点占比
	Ratio      *string                                        `json:"Ratio,omitempty" xml:"Ratio,omitempty"`
	ViewPoints []*ListHotViewPointsResponseBodyDataViewPoints `json:"ViewPoints,omitempty" xml:"ViewPoints,omitempty" type:"Repeated"`
}

func (s ListHotViewPointsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListHotViewPointsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListHotViewPointsResponseBodyData) SetAttitude(v string) *ListHotViewPointsResponseBodyData {
	s.Attitude = &v
	return s
}

func (s *ListHotViewPointsResponseBodyData) SetAttitudeType(v string) *ListHotViewPointsResponseBodyData {
	s.AttitudeType = &v
	return s
}

func (s *ListHotViewPointsResponseBodyData) SetNews(v []*ListHotViewPointsResponseBodyDataNews) *ListHotViewPointsResponseBodyData {
	s.News = v
	return s
}

func (s *ListHotViewPointsResponseBodyData) SetRatio(v string) *ListHotViewPointsResponseBodyData {
	s.Ratio = &v
	return s
}

func (s *ListHotViewPointsResponseBodyData) SetViewPoints(v []*ListHotViewPointsResponseBodyDataViewPoints) *ListHotViewPointsResponseBodyData {
	s.ViewPoints = v
	return s
}

type ListHotViewPointsResponseBodyDataNews struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// xxxxx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 123456
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.png
	ImageUrls []*string `json:"ImageUrls,omitempty" xml:"ImageUrls,omitempty" type:"Repeated"`
	// example:
	//
	// 2024-01-22 10:29:00
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 新浪
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// ["标签1","标签2"]
	Tags []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 文章主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListHotViewPointsResponseBodyDataNews) String() string {
	return tea.Prettify(s)
}

func (s ListHotViewPointsResponseBodyDataNews) GoString() string {
	return s.String()
}

func (s *ListHotViewPointsResponseBodyDataNews) SetAuthor(v string) *ListHotViewPointsResponseBodyDataNews {
	s.Author = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetContent(v string) *ListHotViewPointsResponseBodyDataNews {
	s.Content = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetDocId(v string) *ListHotViewPointsResponseBodyDataNews {
	s.DocId = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetDocUuid(v string) *ListHotViewPointsResponseBodyDataNews {
	s.DocUuid = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetImageUrls(v []*string) *ListHotViewPointsResponseBodyDataNews {
	s.ImageUrls = v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetPubTime(v string) *ListHotViewPointsResponseBodyDataNews {
	s.PubTime = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetSource(v string) *ListHotViewPointsResponseBodyDataNews {
	s.Source = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetSummary(v string) *ListHotViewPointsResponseBodyDataNews {
	s.Summary = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetTags(v []*string) *ListHotViewPointsResponseBodyDataNews {
	s.Tags = v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetTitle(v string) *ListHotViewPointsResponseBodyDataNews {
	s.Title = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetTopic(v string) *ListHotViewPointsResponseBodyDataNews {
	s.Topic = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataNews) SetUrl(v string) *ListHotViewPointsResponseBodyDataNews {
	s.Url = &v
	return s
}

type ListHotViewPointsResponseBodyDataViewPoints struct {
	Outlines []*ListHotViewPointsResponseBodyDataViewPointsOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListHotViewPointsResponseBodyDataViewPoints) String() string {
	return tea.Prettify(s)
}

func (s ListHotViewPointsResponseBodyDataViewPoints) GoString() string {
	return s.String()
}

func (s *ListHotViewPointsResponseBodyDataViewPoints) SetOutlines(v []*ListHotViewPointsResponseBodyDataViewPointsOutlines) *ListHotViewPointsResponseBodyDataViewPoints {
	s.Outlines = v
	return s
}

func (s *ListHotViewPointsResponseBodyDataViewPoints) SetPoint(v string) *ListHotViewPointsResponseBodyDataViewPoints {
	s.Point = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataViewPoints) SetSummary(v string) *ListHotViewPointsResponseBodyDataViewPoints {
	s.Summary = &v
	return s
}

type ListHotViewPointsResponseBodyDataViewPointsOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListHotViewPointsResponseBodyDataViewPointsOutlines) String() string {
	return tea.Prettify(s)
}

func (s ListHotViewPointsResponseBodyDataViewPointsOutlines) GoString() string {
	return s.String()
}

func (s *ListHotViewPointsResponseBodyDataViewPointsOutlines) SetOutline(v string) *ListHotViewPointsResponseBodyDataViewPointsOutlines {
	s.Outline = &v
	return s
}

func (s *ListHotViewPointsResponseBodyDataViewPointsOutlines) SetSummary(v string) *ListHotViewPointsResponseBodyDataViewPointsOutlines {
	s.Summary = &v
	return s
}

type ListHotViewPointsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHotViewPointsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHotViewPointsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHotViewPointsResponse) GoString() string {
	return s.String()
}

func (s *ListHotViewPointsResponse) SetHeaders(v map[string]*string) *ListHotViewPointsResponse {
	s.Headers = v
	return s
}

func (s *ListHotViewPointsResponse) SetStatusCode(v int32) *ListHotViewPointsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHotViewPointsResponse) SetBody(v *ListHotViewPointsResponseBody) *ListHotViewPointsResponse {
	s.Body = v
	return s
}

type ListInterveneCntRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// fcb14f25c9ee41ccad33a049de8f941b_p_outbound_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 1
	PageIndex *int32 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListInterveneCntRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneCntRequest) GoString() string {
	return s.String()
}

func (s *ListInterveneCntRequest) SetAgentKey(v string) *ListInterveneCntRequest {
	s.AgentKey = &v
	return s
}

func (s *ListInterveneCntRequest) SetPageIndex(v int32) *ListInterveneCntRequest {
	s.PageIndex = &v
	return s
}

func (s *ListInterveneCntRequest) SetPageSize(v int32) *ListInterveneCntRequest {
	s.PageSize = &v
	return s
}

type ListInterveneCntResponseBody struct {
	// example:
	//
	// 0
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListInterveneCntResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListInterveneCntResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneCntResponseBody) GoString() string {
	return s.String()
}

func (s *ListInterveneCntResponseBody) SetCode(v string) *ListInterveneCntResponseBody {
	s.Code = &v
	return s
}

func (s *ListInterveneCntResponseBody) SetData(v *ListInterveneCntResponseBodyData) *ListInterveneCntResponseBody {
	s.Data = v
	return s
}

func (s *ListInterveneCntResponseBody) SetHttpStatusCode(v int32) *ListInterveneCntResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListInterveneCntResponseBody) SetMessage(v string) *ListInterveneCntResponseBody {
	s.Message = &v
	return s
}

func (s *ListInterveneCntResponseBody) SetRequestId(v string) *ListInterveneCntResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInterveneCntResponseBody) SetSuccess(v bool) *ListInterveneCntResponseBody {
	s.Success = &v
	return s
}

type ListInterveneCntResponseBodyData struct {
	CntList []interface{} `json:"CntList,omitempty" xml:"CntList,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	PageCnt *int32 `json:"PageCnt,omitempty" xml:"PageCnt,omitempty"`
	// example:
	//
	// 1
	PageIndex *int32 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListInterveneCntResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneCntResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListInterveneCntResponseBodyData) SetCntList(v []interface{}) *ListInterveneCntResponseBodyData {
	s.CntList = v
	return s
}

func (s *ListInterveneCntResponseBodyData) SetPageCnt(v int32) *ListInterveneCntResponseBodyData {
	s.PageCnt = &v
	return s
}

func (s *ListInterveneCntResponseBodyData) SetPageIndex(v int32) *ListInterveneCntResponseBodyData {
	s.PageIndex = &v
	return s
}

func (s *ListInterveneCntResponseBodyData) SetPageSize(v int32) *ListInterveneCntResponseBodyData {
	s.PageSize = &v
	return s
}

type ListInterveneCntResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInterveneCntResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInterveneCntResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneCntResponse) GoString() string {
	return s.String()
}

func (s *ListInterveneCntResponse) SetHeaders(v map[string]*string) *ListInterveneCntResponse {
	s.Headers = v
	return s
}

func (s *ListInterveneCntResponse) SetStatusCode(v int32) *ListInterveneCntResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInterveneCntResponse) SetBody(v *ListInterveneCntResponseBody) *ListInterveneCntResponse {
	s.Body = v
	return s
}

type ListInterveneImportTasksRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 1
	PageIndex *int32 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListInterveneImportTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneImportTasksRequest) GoString() string {
	return s.String()
}

func (s *ListInterveneImportTasksRequest) SetAgentKey(v string) *ListInterveneImportTasksRequest {
	s.AgentKey = &v
	return s
}

func (s *ListInterveneImportTasksRequest) SetPageIndex(v int32) *ListInterveneImportTasksRequest {
	s.PageIndex = &v
	return s
}

func (s *ListInterveneImportTasksRequest) SetPageSize(v int32) *ListInterveneImportTasksRequest {
	s.PageSize = &v
	return s
}

type ListInterveneImportTasksResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListInterveneImportTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListInterveneImportTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneImportTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListInterveneImportTasksResponseBody) SetCode(v string) *ListInterveneImportTasksResponseBody {
	s.Code = &v
	return s
}

func (s *ListInterveneImportTasksResponseBody) SetData(v *ListInterveneImportTasksResponseBodyData) *ListInterveneImportTasksResponseBody {
	s.Data = v
	return s
}

func (s *ListInterveneImportTasksResponseBody) SetHttpStatusCode(v int32) *ListInterveneImportTasksResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListInterveneImportTasksResponseBody) SetMessage(v string) *ListInterveneImportTasksResponseBody {
	s.Message = &v
	return s
}

func (s *ListInterveneImportTasksResponseBody) SetRequestId(v string) *ListInterveneImportTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInterveneImportTasksResponseBody) SetSuccess(v bool) *ListInterveneImportTasksResponseBody {
	s.Success = &v
	return s
}

type ListInterveneImportTasksResponseBodyData struct {
	// example:
	//
	// 1
	PageIndex *int32 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	// example:
	//
	// 10
	PageSize   *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StatusList []*ListInterveneImportTasksResponseBodyDataStatusList `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
	// example:
	//
	// 0
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListInterveneImportTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneImportTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListInterveneImportTasksResponseBodyData) SetPageIndex(v int32) *ListInterveneImportTasksResponseBodyData {
	s.PageIndex = &v
	return s
}

func (s *ListInterveneImportTasksResponseBodyData) SetPageSize(v int32) *ListInterveneImportTasksResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListInterveneImportTasksResponseBodyData) SetStatusList(v []*ListInterveneImportTasksResponseBodyDataStatusList) *ListInterveneImportTasksResponseBodyData {
	s.StatusList = v
	return s
}

func (s *ListInterveneImportTasksResponseBodyData) SetTotalSize(v int32) *ListInterveneImportTasksResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListInterveneImportTasksResponseBodyDataStatusList struct {
	// example:
	//
	// Success
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// example:
	//
	// 5
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	// example:
	//
	// Success
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 4854
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 12344454
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s ListInterveneImportTasksResponseBodyDataStatusList) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneImportTasksResponseBodyDataStatusList) GoString() string {
	return s.String()
}

func (s *ListInterveneImportTasksResponseBodyDataStatusList) SetMsg(v string) *ListInterveneImportTasksResponseBodyDataStatusList {
	s.Msg = &v
	return s
}

func (s *ListInterveneImportTasksResponseBodyDataStatusList) SetPercentage(v int32) *ListInterveneImportTasksResponseBodyDataStatusList {
	s.Percentage = &v
	return s
}

func (s *ListInterveneImportTasksResponseBodyDataStatusList) SetStatus(v int32) *ListInterveneImportTasksResponseBodyDataStatusList {
	s.Status = &v
	return s
}

func (s *ListInterveneImportTasksResponseBodyDataStatusList) SetTaskId(v string) *ListInterveneImportTasksResponseBodyDataStatusList {
	s.TaskId = &v
	return s
}

func (s *ListInterveneImportTasksResponseBodyDataStatusList) SetTaskName(v string) *ListInterveneImportTasksResponseBodyDataStatusList {
	s.TaskName = &v
	return s
}

type ListInterveneImportTasksResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInterveneImportTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInterveneImportTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneImportTasksResponse) GoString() string {
	return s.String()
}

func (s *ListInterveneImportTasksResponse) SetHeaders(v map[string]*string) *ListInterveneImportTasksResponse {
	s.Headers = v
	return s
}

func (s *ListInterveneImportTasksResponse) SetStatusCode(v int32) *ListInterveneImportTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInterveneImportTasksResponse) SetBody(v *ListInterveneImportTasksResponseBody) *ListInterveneImportTasksResponse {
	s.Body = v
	return s
}

type ListInterveneRulesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 1
	PageIndex *int32 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListInterveneRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneRulesRequest) GoString() string {
	return s.String()
}

func (s *ListInterveneRulesRequest) SetAgentKey(v string) *ListInterveneRulesRequest {
	s.AgentKey = &v
	return s
}

func (s *ListInterveneRulesRequest) SetPageIndex(v int32) *ListInterveneRulesRequest {
	s.PageIndex = &v
	return s
}

func (s *ListInterveneRulesRequest) SetPageSize(v int32) *ListInterveneRulesRequest {
	s.PageSize = &v
	return s
}

type ListInterveneRulesResponseBody struct {
	// example:
	//
	// 0
	Code *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListInterveneRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// DA021073-17CE-5CCF-9FEB-93226C766887
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListInterveneRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListInterveneRulesResponseBody) SetCode(v string) *ListInterveneRulesResponseBody {
	s.Code = &v
	return s
}

func (s *ListInterveneRulesResponseBody) SetData(v *ListInterveneRulesResponseBodyData) *ListInterveneRulesResponseBody {
	s.Data = v
	return s
}

func (s *ListInterveneRulesResponseBody) SetHttpStatusCode(v int32) *ListInterveneRulesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListInterveneRulesResponseBody) SetMessage(v string) *ListInterveneRulesResponseBody {
	s.Message = &v
	return s
}

func (s *ListInterveneRulesResponseBody) SetRequestId(v string) *ListInterveneRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInterveneRulesResponseBody) SetSuccess(v bool) *ListInterveneRulesResponseBody {
	s.Success = &v
	return s
}

type ListInterveneRulesResponseBodyData struct {
	// example:
	//
	// 1
	Count             *int64                                                 `json:"Count,omitempty" xml:"Count,omitempty"`
	InterveneRuleList []*ListInterveneRulesResponseBodyDataInterveneRuleList `json:"InterveneRuleList,omitempty" xml:"InterveneRuleList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageIndex *int32 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListInterveneRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListInterveneRulesResponseBodyData) SetCount(v int64) *ListInterveneRulesResponseBodyData {
	s.Count = &v
	return s
}

func (s *ListInterveneRulesResponseBodyData) SetInterveneRuleList(v []*ListInterveneRulesResponseBodyDataInterveneRuleList) *ListInterveneRulesResponseBodyData {
	s.InterveneRuleList = v
	return s
}

func (s *ListInterveneRulesResponseBodyData) SetPageIndex(v int32) *ListInterveneRulesResponseBodyData {
	s.PageIndex = &v
	return s
}

func (s *ListInterveneRulesResponseBodyData) SetPageSize(v int32) *ListInterveneRulesResponseBodyData {
	s.PageSize = &v
	return s
}

type ListInterveneRulesResponseBodyDataInterveneRuleList struct {
	AnswerConfig []*ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig `json:"AnswerConfig,omitempty" xml:"AnswerConfig,omitempty" type:"Repeated"`
	// example:
	//
	// 2023-06-05 15:17:01
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2023-04-03 02:42:01
	EffectTime *string `json:"EffectTime,omitempty" xml:"EffectTime,omitempty"`
	// example:
	//
	// 0
	InterveneType *int32    `json:"InterveneType,omitempty" xml:"InterveneType,omitempty"`
	NamespaceList []*string `json:"NamespaceList,omitempty" xml:"NamespaceList,omitempty" type:"Repeated"`
	// example:
	//
	// mr-iuo9pi9w555phfbb
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// example:
	//
	// ruletest
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
}

func (s ListInterveneRulesResponseBodyDataInterveneRuleList) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneRulesResponseBodyDataInterveneRuleList) GoString() string {
	return s.String()
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleList) SetAnswerConfig(v []*ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig) *ListInterveneRulesResponseBodyDataInterveneRuleList {
	s.AnswerConfig = v
	return s
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleList) SetCreateTime(v string) *ListInterveneRulesResponseBodyDataInterveneRuleList {
	s.CreateTime = &v
	return s
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleList) SetEffectTime(v string) *ListInterveneRulesResponseBodyDataInterveneRuleList {
	s.EffectTime = &v
	return s
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleList) SetInterveneType(v int32) *ListInterveneRulesResponseBodyDataInterveneRuleList {
	s.InterveneType = &v
	return s
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleList) SetNamespaceList(v []*string) *ListInterveneRulesResponseBodyDataInterveneRuleList {
	s.NamespaceList = v
	return s
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleList) SetRuleId(v int64) *ListInterveneRulesResponseBodyDataInterveneRuleList {
	s.RuleId = &v
	return s
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleList) SetRuleName(v string) *ListInterveneRulesResponseBodyDataInterveneRuleList {
	s.RuleName = &v
	return s
}

type ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig struct {
	// example:
	//
	// 0
	AnswerType *int32  `json:"AnswerType,omitempty" xml:"AnswerType,omitempty"`
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// namespace_qa_query
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig) GoString() string {
	return s.String()
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig) SetAnswerType(v int32) *ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig {
	s.AnswerType = &v
	return s
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig) SetMessage(v string) *ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig {
	s.Message = &v
	return s
}

func (s *ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig) SetNamespace(v string) *ListInterveneRulesResponseBodyDataInterveneRuleListAnswerConfig {
	s.Namespace = &v
	return s
}

type ListInterveneRulesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInterveneRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInterveneRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInterveneRulesResponse) GoString() string {
	return s.String()
}

func (s *ListInterveneRulesResponse) SetHeaders(v map[string]*string) *ListInterveneRulesResponse {
	s.Headers = v
	return s
}

func (s *ListInterveneRulesResponse) SetStatusCode(v int32) *ListInterveneRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInterveneRulesResponse) SetBody(v *ListInterveneRulesResponseBody) *ListInterveneRulesResponse {
	s.Body = v
	return s
}

type ListIntervenesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 33a2658aaabf4c24b45d50e575125311_p_beebot_public
	AgentKey      *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	InterveneType *int32  `json:"InterveneType,omitempty" xml:"InterveneType,omitempty"`
	// example:
	//
	// 1
	PageIndex *int32 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Query    *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// mqtt_outRule_1679019634514
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s ListIntervenesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIntervenesRequest) GoString() string {
	return s.String()
}

func (s *ListIntervenesRequest) SetAgentKey(v string) *ListIntervenesRequest {
	s.AgentKey = &v
	return s
}

func (s *ListIntervenesRequest) SetInterveneType(v int32) *ListIntervenesRequest {
	s.InterveneType = &v
	return s
}

func (s *ListIntervenesRequest) SetPageIndex(v int32) *ListIntervenesRequest {
	s.PageIndex = &v
	return s
}

func (s *ListIntervenesRequest) SetPageSize(v int32) *ListIntervenesRequest {
	s.PageSize = &v
	return s
}

func (s *ListIntervenesRequest) SetQuery(v string) *ListIntervenesRequest {
	s.Query = &v
	return s
}

func (s *ListIntervenesRequest) SetRuleId(v int64) *ListIntervenesRequest {
	s.RuleId = &v
	return s
}

type ListIntervenesResponseBody struct {
	// example:
	//
	// 0
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListIntervenesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 428DCC0D-3C63-5306-BD1B-124396AB97BE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListIntervenesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIntervenesResponseBody) GoString() string {
	return s.String()
}

func (s *ListIntervenesResponseBody) SetCode(v string) *ListIntervenesResponseBody {
	s.Code = &v
	return s
}

func (s *ListIntervenesResponseBody) SetData(v *ListIntervenesResponseBodyData) *ListIntervenesResponseBody {
	s.Data = v
	return s
}

func (s *ListIntervenesResponseBody) SetHttpStatusCode(v int32) *ListIntervenesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListIntervenesResponseBody) SetMessage(v string) *ListIntervenesResponseBody {
	s.Message = &v
	return s
}

func (s *ListIntervenesResponseBody) SetRequestId(v string) *ListIntervenesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListIntervenesResponseBody) SetSuccess(v bool) *ListIntervenesResponseBody {
	s.Success = &v
	return s
}

type ListIntervenesResponseBodyData struct {
	InterveneList []*ListIntervenesResponseBodyDataInterveneList `json:"InterveneList,omitempty" xml:"InterveneList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageIndex *int32 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalSize *int64 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListIntervenesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListIntervenesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListIntervenesResponseBodyData) SetInterveneList(v []*ListIntervenesResponseBodyDataInterveneList) *ListIntervenesResponseBodyData {
	s.InterveneList = v
	return s
}

func (s *ListIntervenesResponseBodyData) SetPageIndex(v int32) *ListIntervenesResponseBodyData {
	s.PageIndex = &v
	return s
}

func (s *ListIntervenesResponseBodyData) SetPageSize(v int32) *ListIntervenesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListIntervenesResponseBodyData) SetTotalSize(v int64) *ListIntervenesResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListIntervenesResponseBodyDataInterveneList struct {
	// id
	//
	// example:
	//
	// 36559
	Id    *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
}

func (s ListIntervenesResponseBodyDataInterveneList) String() string {
	return tea.Prettify(s)
}

func (s ListIntervenesResponseBodyDataInterveneList) GoString() string {
	return s.String()
}

func (s *ListIntervenesResponseBodyDataInterveneList) SetId(v string) *ListIntervenesResponseBodyDataInterveneList {
	s.Id = &v
	return s
}

func (s *ListIntervenesResponseBodyDataInterveneList) SetQuery(v string) *ListIntervenesResponseBodyDataInterveneList {
	s.Query = &v
	return s
}

type ListIntervenesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIntervenesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIntervenesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIntervenesResponse) GoString() string {
	return s.String()
}

func (s *ListIntervenesResponse) SetHeaders(v map[string]*string) *ListIntervenesResponse {
	s.Headers = v
	return s
}

func (s *ListIntervenesResponse) SetStatusCode(v int32) *ListIntervenesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIntervenesResponse) SetBody(v *ListIntervenesResponseBody) *ListIntervenesResponse {
	s.Body = v
	return s
}

type ListMaterialDocumentsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 33a2658aaabf4c24b45d50e575125311_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	Content  *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 2023-03-18 02:00:00
	CreateTimeEnd *string `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// example:
	//
	// 2023-02-19 07:28:11
	CreateTimeStart *string `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// jsonLine
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// excel
	DocTypeList []*string `json:"DocTypeList,omitempty" xml:"DocTypeList,omitempty" type:"Repeated"`
	// example:
	//
	// true
	GeneratePublicUrl *bool `json:"GeneratePublicUrl,omitempty" xml:"GeneratePublicUrl,omitempty"`
	// example:
	//
	// 69
	Id       *int64    `json:"Id,omitempty" xml:"Id,omitempty"`
	Keywords []*string `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
	Query    *string   `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// 1
	ShareAttr *int32 `json:"ShareAttr,omitempty" xml:"ShareAttr,omitempty"`
	// example:
	//
	// 10
	Size  *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 2023-03-18 03:00:00
	UpdateTimeEnd *string `json:"UpdateTimeEnd,omitempty" xml:"UpdateTimeEnd,omitempty"`
	// example:
	//
	// 2023-03-18 02:00:00
	UpdateTimeStart *string `json:"UpdateTimeStart,omitempty" xml:"UpdateTimeStart,omitempty"`
}

func (s ListMaterialDocumentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMaterialDocumentsRequest) GoString() string {
	return s.String()
}

func (s *ListMaterialDocumentsRequest) SetAgentKey(v string) *ListMaterialDocumentsRequest {
	s.AgentKey = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetContent(v string) *ListMaterialDocumentsRequest {
	s.Content = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetCreateTimeEnd(v string) *ListMaterialDocumentsRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetCreateTimeStart(v string) *ListMaterialDocumentsRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetCurrent(v int32) *ListMaterialDocumentsRequest {
	s.Current = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetDocType(v string) *ListMaterialDocumentsRequest {
	s.DocType = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetDocTypeList(v []*string) *ListMaterialDocumentsRequest {
	s.DocTypeList = v
	return s
}

func (s *ListMaterialDocumentsRequest) SetGeneratePublicUrl(v bool) *ListMaterialDocumentsRequest {
	s.GeneratePublicUrl = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetId(v int64) *ListMaterialDocumentsRequest {
	s.Id = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetKeywords(v []*string) *ListMaterialDocumentsRequest {
	s.Keywords = v
	return s
}

func (s *ListMaterialDocumentsRequest) SetQuery(v string) *ListMaterialDocumentsRequest {
	s.Query = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetShareAttr(v int32) *ListMaterialDocumentsRequest {
	s.ShareAttr = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetSize(v int32) *ListMaterialDocumentsRequest {
	s.Size = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetTitle(v string) *ListMaterialDocumentsRequest {
	s.Title = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetUpdateTimeEnd(v string) *ListMaterialDocumentsRequest {
	s.UpdateTimeEnd = &v
	return s
}

func (s *ListMaterialDocumentsRequest) SetUpdateTimeStart(v string) *ListMaterialDocumentsRequest {
	s.UpdateTimeStart = &v
	return s
}

type ListMaterialDocumentsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 33a2658aaabf4c24b45d50e575125311_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	Content  *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 2023-03-18 02:00:00
	CreateTimeEnd *string `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// example:
	//
	// 2023-02-19 07:28:11
	CreateTimeStart *string `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// jsonLine
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// excel
	DocTypeListShrink *string `json:"DocTypeList,omitempty" xml:"DocTypeList,omitempty"`
	// example:
	//
	// true
	GeneratePublicUrl *bool `json:"GeneratePublicUrl,omitempty" xml:"GeneratePublicUrl,omitempty"`
	// example:
	//
	// 69
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	KeywordsShrink *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	Query          *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// 1
	ShareAttr *int32 `json:"ShareAttr,omitempty" xml:"ShareAttr,omitempty"`
	// example:
	//
	// 10
	Size  *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 2023-03-18 03:00:00
	UpdateTimeEnd *string `json:"UpdateTimeEnd,omitempty" xml:"UpdateTimeEnd,omitempty"`
	// example:
	//
	// 2023-03-18 02:00:00
	UpdateTimeStart *string `json:"UpdateTimeStart,omitempty" xml:"UpdateTimeStart,omitempty"`
}

func (s ListMaterialDocumentsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMaterialDocumentsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListMaterialDocumentsShrinkRequest) SetAgentKey(v string) *ListMaterialDocumentsShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetContent(v string) *ListMaterialDocumentsShrinkRequest {
	s.Content = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetCreateTimeEnd(v string) *ListMaterialDocumentsShrinkRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetCreateTimeStart(v string) *ListMaterialDocumentsShrinkRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetCurrent(v int32) *ListMaterialDocumentsShrinkRequest {
	s.Current = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetDocType(v string) *ListMaterialDocumentsShrinkRequest {
	s.DocType = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetDocTypeListShrink(v string) *ListMaterialDocumentsShrinkRequest {
	s.DocTypeListShrink = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetGeneratePublicUrl(v bool) *ListMaterialDocumentsShrinkRequest {
	s.GeneratePublicUrl = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetId(v int64) *ListMaterialDocumentsShrinkRequest {
	s.Id = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetKeywordsShrink(v string) *ListMaterialDocumentsShrinkRequest {
	s.KeywordsShrink = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetQuery(v string) *ListMaterialDocumentsShrinkRequest {
	s.Query = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetShareAttr(v int32) *ListMaterialDocumentsShrinkRequest {
	s.ShareAttr = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetSize(v int32) *ListMaterialDocumentsShrinkRequest {
	s.Size = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetTitle(v string) *ListMaterialDocumentsShrinkRequest {
	s.Title = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetUpdateTimeEnd(v string) *ListMaterialDocumentsShrinkRequest {
	s.UpdateTimeEnd = &v
	return s
}

func (s *ListMaterialDocumentsShrinkRequest) SetUpdateTimeStart(v string) *ListMaterialDocumentsShrinkRequest {
	s.UpdateTimeStart = &v
	return s
}

type ListMaterialDocumentsResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1
	Current *int32                                   `json:"Current,omitempty" xml:"Current,omitempty"`
	Data    []*ListMaterialDocumentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 数据不存在
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// false
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListMaterialDocumentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMaterialDocumentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMaterialDocumentsResponseBody) SetCode(v string) *ListMaterialDocumentsResponseBody {
	s.Code = &v
	return s
}

func (s *ListMaterialDocumentsResponseBody) SetCurrent(v int32) *ListMaterialDocumentsResponseBody {
	s.Current = &v
	return s
}

func (s *ListMaterialDocumentsResponseBody) SetData(v []*ListMaterialDocumentsResponseBodyData) *ListMaterialDocumentsResponseBody {
	s.Data = v
	return s
}

func (s *ListMaterialDocumentsResponseBody) SetHttpStatusCode(v int32) *ListMaterialDocumentsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListMaterialDocumentsResponseBody) SetMessage(v string) *ListMaterialDocumentsResponseBody {
	s.Message = &v
	return s
}

func (s *ListMaterialDocumentsResponseBody) SetRequestId(v string) *ListMaterialDocumentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMaterialDocumentsResponseBody) SetSize(v int32) *ListMaterialDocumentsResponseBody {
	s.Size = &v
	return s
}

func (s *ListMaterialDocumentsResponseBody) SetSuccess(v bool) *ListMaterialDocumentsResponseBody {
	s.Success = &v
	return s
}

func (s *ListMaterialDocumentsResponseBody) SetTotal(v int32) *ListMaterialDocumentsResponseBody {
	s.Total = &v
	return s
}

type ListMaterialDocumentsResponseBodyData struct {
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 2023-03-18 02:00:00
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1
	CreateUser     *string   `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	CreateUserName *string   `json:"CreateUserName,omitempty" xml:"CreateUserName,omitempty"`
	DocKeywords    []*string `json:"DocKeywords,omitempty" xml:"DocKeywords,omitempty" type:"Repeated"`
	// example:
	//
	// pdf
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// https://www.example.com
	ExternalUrl *string `json:"ExternalUrl,omitempty" xml:"ExternalUrl,omitempty"`
	HtmlContent *string `json:"HtmlContent,omitempty" xml:"HtmlContent,omitempty"`
	// example:
	//
	// 35
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 2023-03-18 02:00:00
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// https://www.example.com
	PublicUrl *string `json:"PublicUrl,omitempty" xml:"PublicUrl,omitempty"`
	// example:
	//
	// 1
	ShareAttr *int32 `json:"ShareAttr,omitempty" xml:"ShareAttr,omitempty"`
	// example:
	//
	// user_upload
	SrcFrom           *string `json:"SrcFrom,omitempty" xml:"SrcFrom,omitempty"`
	Summary           *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	TextContent       *string `json:"TextContent,omitempty" xml:"TextContent,omitempty"`
	ThumbnailInBase64 *string `json:"ThumbnailInBase64,omitempty" xml:"ThumbnailInBase64,omitempty"`
	Title             *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 2023-03-18 02:00:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 1
	UpdateUser     *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
	UpdateUserName *string `json:"UpdateUserName,omitempty" xml:"UpdateUserName,omitempty"`
	// example:
	//
	// https://www.example.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListMaterialDocumentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListMaterialDocumentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListMaterialDocumentsResponseBodyData) SetAuthor(v string) *ListMaterialDocumentsResponseBodyData {
	s.Author = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetCreateTime(v string) *ListMaterialDocumentsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetCreateUser(v string) *ListMaterialDocumentsResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetCreateUserName(v string) *ListMaterialDocumentsResponseBodyData {
	s.CreateUserName = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetDocKeywords(v []*string) *ListMaterialDocumentsResponseBodyData {
	s.DocKeywords = v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetDocType(v string) *ListMaterialDocumentsResponseBodyData {
	s.DocType = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetExternalUrl(v string) *ListMaterialDocumentsResponseBodyData {
	s.ExternalUrl = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetHtmlContent(v string) *ListMaterialDocumentsResponseBodyData {
	s.HtmlContent = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetId(v int64) *ListMaterialDocumentsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetPubTime(v string) *ListMaterialDocumentsResponseBodyData {
	s.PubTime = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetPublicUrl(v string) *ListMaterialDocumentsResponseBodyData {
	s.PublicUrl = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetShareAttr(v int32) *ListMaterialDocumentsResponseBodyData {
	s.ShareAttr = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetSrcFrom(v string) *ListMaterialDocumentsResponseBodyData {
	s.SrcFrom = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetSummary(v string) *ListMaterialDocumentsResponseBodyData {
	s.Summary = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetTextContent(v string) *ListMaterialDocumentsResponseBodyData {
	s.TextContent = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetThumbnailInBase64(v string) *ListMaterialDocumentsResponseBodyData {
	s.ThumbnailInBase64 = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetTitle(v string) *ListMaterialDocumentsResponseBodyData {
	s.Title = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetUpdateTime(v string) *ListMaterialDocumentsResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetUpdateUser(v string) *ListMaterialDocumentsResponseBodyData {
	s.UpdateUser = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetUpdateUserName(v string) *ListMaterialDocumentsResponseBodyData {
	s.UpdateUserName = &v
	return s
}

func (s *ListMaterialDocumentsResponseBodyData) SetUrl(v string) *ListMaterialDocumentsResponseBodyData {
	s.Url = &v
	return s
}

type ListMaterialDocumentsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMaterialDocumentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMaterialDocumentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMaterialDocumentsResponse) GoString() string {
	return s.String()
}

func (s *ListMaterialDocumentsResponse) SetHeaders(v map[string]*string) *ListMaterialDocumentsResponse {
	s.Headers = v
	return s
}

func (s *ListMaterialDocumentsResponse) SetStatusCode(v int32) *ListMaterialDocumentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMaterialDocumentsResponse) SetBody(v *ListMaterialDocumentsResponseBody) *ListMaterialDocumentsResponse {
	s.Body = v
	return s
}

type ListPlanningProposalRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// e7b26a9e1211444db8f0a984361a5e0f
	CustomViewPointId *string `json:"CustomViewPointId,omitempty" xml:"CustomViewPointId,omitempty"`
	// example:
	//
	// 27971fc8f3ce4ed58c7e7fc4b503e432
	CustomViewPointIds []*string `json:"CustomViewPointIds,omitempty" xml:"CustomViewPointIds,omitempty" type:"Repeated"`
	// example:
	//
	// 73
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 标题
	//
	//      *
	Titles []*string `json:"Titles,omitempty" xml:"Titles,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜源
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
	// example:
	//
	// 2024-09-10_08
	TopicVersion *string `json:"TopicVersion,omitempty" xml:"TopicVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// CustomViewPoints
	ViewPointType *string `json:"ViewPointType,omitempty" xml:"ViewPointType,omitempty"`
}

func (s ListPlanningProposalRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPlanningProposalRequest) GoString() string {
	return s.String()
}

func (s *ListPlanningProposalRequest) SetAgentKey(v string) *ListPlanningProposalRequest {
	s.AgentKey = &v
	return s
}

func (s *ListPlanningProposalRequest) SetCustomViewPointId(v string) *ListPlanningProposalRequest {
	s.CustomViewPointId = &v
	return s
}

func (s *ListPlanningProposalRequest) SetCustomViewPointIds(v []*string) *ListPlanningProposalRequest {
	s.CustomViewPointIds = v
	return s
}

func (s *ListPlanningProposalRequest) SetMaxResults(v int32) *ListPlanningProposalRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPlanningProposalRequest) SetNextToken(v string) *ListPlanningProposalRequest {
	s.NextToken = &v
	return s
}

func (s *ListPlanningProposalRequest) SetTitles(v []*string) *ListPlanningProposalRequest {
	s.Titles = v
	return s
}

func (s *ListPlanningProposalRequest) SetTopic(v string) *ListPlanningProposalRequest {
	s.Topic = &v
	return s
}

func (s *ListPlanningProposalRequest) SetTopicSource(v string) *ListPlanningProposalRequest {
	s.TopicSource = &v
	return s
}

func (s *ListPlanningProposalRequest) SetTopicVersion(v string) *ListPlanningProposalRequest {
	s.TopicVersion = &v
	return s
}

func (s *ListPlanningProposalRequest) SetViewPointType(v string) *ListPlanningProposalRequest {
	s.ViewPointType = &v
	return s
}

type ListPlanningProposalShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// e7b26a9e1211444db8f0a984361a5e0f
	CustomViewPointId *string `json:"CustomViewPointId,omitempty" xml:"CustomViewPointId,omitempty"`
	// example:
	//
	// 27971fc8f3ce4ed58c7e7fc4b503e432
	CustomViewPointIdsShrink *string `json:"CustomViewPointIds,omitempty" xml:"CustomViewPointIds,omitempty"`
	// example:
	//
	// 73
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 标题
	//
	//      *
	TitlesShrink *string `json:"Titles,omitempty" xml:"Titles,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜源
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
	// example:
	//
	// 2024-09-10_08
	TopicVersion *string `json:"TopicVersion,omitempty" xml:"TopicVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// CustomViewPoints
	ViewPointType *string `json:"ViewPointType,omitempty" xml:"ViewPointType,omitempty"`
}

func (s ListPlanningProposalShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPlanningProposalShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListPlanningProposalShrinkRequest) SetAgentKey(v string) *ListPlanningProposalShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *ListPlanningProposalShrinkRequest) SetCustomViewPointId(v string) *ListPlanningProposalShrinkRequest {
	s.CustomViewPointId = &v
	return s
}

func (s *ListPlanningProposalShrinkRequest) SetCustomViewPointIdsShrink(v string) *ListPlanningProposalShrinkRequest {
	s.CustomViewPointIdsShrink = &v
	return s
}

func (s *ListPlanningProposalShrinkRequest) SetMaxResults(v int32) *ListPlanningProposalShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPlanningProposalShrinkRequest) SetNextToken(v string) *ListPlanningProposalShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListPlanningProposalShrinkRequest) SetTitlesShrink(v string) *ListPlanningProposalShrinkRequest {
	s.TitlesShrink = &v
	return s
}

func (s *ListPlanningProposalShrinkRequest) SetTopic(v string) *ListPlanningProposalShrinkRequest {
	s.Topic = &v
	return s
}

func (s *ListPlanningProposalShrinkRequest) SetTopicSource(v string) *ListPlanningProposalShrinkRequest {
	s.TopicSource = &v
	return s
}

func (s *ListPlanningProposalShrinkRequest) SetTopicVersion(v string) *ListPlanningProposalShrinkRequest {
	s.TopicVersion = &v
	return s
}

func (s *ListPlanningProposalShrinkRequest) SetViewPointType(v string) *ListPlanningProposalShrinkRequest {
	s.ViewPointType = &v
	return s
}

type ListPlanningProposalResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListPlanningProposalResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 77
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 80
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPlanningProposalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPlanningProposalResponseBody) GoString() string {
	return s.String()
}

func (s *ListPlanningProposalResponseBody) SetCode(v string) *ListPlanningProposalResponseBody {
	s.Code = &v
	return s
}

func (s *ListPlanningProposalResponseBody) SetData(v []*ListPlanningProposalResponseBodyData) *ListPlanningProposalResponseBody {
	s.Data = v
	return s
}

func (s *ListPlanningProposalResponseBody) SetHttpStatusCode(v int32) *ListPlanningProposalResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListPlanningProposalResponseBody) SetMaxResults(v int32) *ListPlanningProposalResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListPlanningProposalResponseBody) SetMessage(v string) *ListPlanningProposalResponseBody {
	s.Message = &v
	return s
}

func (s *ListPlanningProposalResponseBody) SetNextToken(v string) *ListPlanningProposalResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListPlanningProposalResponseBody) SetRequestId(v string) *ListPlanningProposalResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPlanningProposalResponseBody) SetSuccess(v bool) *ListPlanningProposalResponseBody {
	s.Success = &v
	return s
}

func (s *ListPlanningProposalResponseBody) SetTotalCount(v int32) *ListPlanningProposalResponseBody {
	s.TotalCount = &v
	return s
}

type ListPlanningProposalResponseBodyData struct {
	Outlines []*ListPlanningProposalResponseBodyDataOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	Summary  *string                                         `json:"Summary,omitempty" xml:"Summary,omitempty"`
	Title    *string                                         `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s ListPlanningProposalResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPlanningProposalResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPlanningProposalResponseBodyData) SetOutlines(v []*ListPlanningProposalResponseBodyDataOutlines) *ListPlanningProposalResponseBodyData {
	s.Outlines = v
	return s
}

func (s *ListPlanningProposalResponseBodyData) SetSummary(v string) *ListPlanningProposalResponseBodyData {
	s.Summary = &v
	return s
}

func (s *ListPlanningProposalResponseBodyData) SetTitle(v string) *ListPlanningProposalResponseBodyData {
	s.Title = &v
	return s
}

type ListPlanningProposalResponseBodyDataOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListPlanningProposalResponseBodyDataOutlines) String() string {
	return tea.Prettify(s)
}

func (s ListPlanningProposalResponseBodyDataOutlines) GoString() string {
	return s.String()
}

func (s *ListPlanningProposalResponseBodyDataOutlines) SetOutline(v string) *ListPlanningProposalResponseBodyDataOutlines {
	s.Outline = &v
	return s
}

func (s *ListPlanningProposalResponseBodyDataOutlines) SetSummary(v string) *ListPlanningProposalResponseBodyDataOutlines {
	s.Summary = &v
	return s
}

type ListPlanningProposalResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPlanningProposalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPlanningProposalResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPlanningProposalResponse) GoString() string {
	return s.String()
}

func (s *ListPlanningProposalResponse) SetHeaders(v map[string]*string) *ListPlanningProposalResponse {
	s.Headers = v
	return s
}

func (s *ListPlanningProposalResponse) SetStatusCode(v int32) *ListPlanningProposalResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPlanningProposalResponse) SetBody(v *ListPlanningProposalResponseBody) *ListPlanningProposalResponse {
	s.Body = v
	return s
}

type ListSearchTaskDialogueDatasRequest struct {
	// example:
	//
	// true
	IncludeContent *bool `json:"IncludeContent,omitempty" xml:"IncludeContent,omitempty"`
	// example:
	//
	// text
	MultimodalSearchType *string `json:"MultimodalSearchType,omitempty" xml:"MultimodalSearchType,omitempty"`
	// example:
	//
	// xx
	OriginalSessionId *string `json:"OriginalSessionId,omitempty" xml:"OriginalSessionId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// xx
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// ClusterGenerate
	SearchModel *string `json:"SearchModel,omitempty" xml:"SearchModel,omitempty"`
	// example:
	//
	// xxx
	SearchModelDataValue *string `json:"SearchModelDataValue,omitempty" xml:"SearchModelDataValue,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xx
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListSearchTaskDialogueDatasRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialogueDatasRequest) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialogueDatasRequest) SetIncludeContent(v bool) *ListSearchTaskDialogueDatasRequest {
	s.IncludeContent = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetMultimodalSearchType(v string) *ListSearchTaskDialogueDatasRequest {
	s.MultimodalSearchType = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetOriginalSessionId(v string) *ListSearchTaskDialogueDatasRequest {
	s.OriginalSessionId = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetPageNumber(v int32) *ListSearchTaskDialogueDatasRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetPageSize(v int32) *ListSearchTaskDialogueDatasRequest {
	s.PageSize = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetQuery(v string) *ListSearchTaskDialogueDatasRequest {
	s.Query = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetSearchModel(v string) *ListSearchTaskDialogueDatasRequest {
	s.SearchModel = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetSearchModelDataValue(v string) *ListSearchTaskDialogueDatasRequest {
	s.SearchModelDataValue = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetSessionId(v string) *ListSearchTaskDialogueDatasRequest {
	s.SessionId = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetTaskId(v string) *ListSearchTaskDialogueDatasRequest {
	s.TaskId = &v
	return s
}

func (s *ListSearchTaskDialogueDatasRequest) SetWorkspaceId(v string) *ListSearchTaskDialogueDatasRequest {
	s.WorkspaceId = &v
	return s
}

type ListSearchTaskDialogueDatasResponseBody struct {
	Articles []*ListSearchTaskDialogueDatasResponseBodyArticles `json:"Articles,omitempty" xml:"Articles,omitempty" type:"Repeated"`
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Images         []*ListSearchTaskDialogueDatasResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Repeated"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// true
	RealtimeSearch *bool `json:"RealtimeSearch,omitempty" xml:"RealtimeSearch,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// realtime
	SearchType *string `json:"SearchType,omitempty" xml:"SearchType,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	TotalCount *int32                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	Videos     []*ListSearchTaskDialogueDatasResponseBodyVideos `json:"Videos,omitempty" xml:"Videos,omitempty" type:"Repeated"`
}

func (s ListSearchTaskDialogueDatasResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialogueDatasResponseBody) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetArticles(v []*ListSearchTaskDialogueDatasResponseBodyArticles) *ListSearchTaskDialogueDatasResponseBody {
	s.Articles = v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetCode(v string) *ListSearchTaskDialogueDatasResponseBody {
	s.Code = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetHttpStatusCode(v int32) *ListSearchTaskDialogueDatasResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetImages(v []*ListSearchTaskDialogueDatasResponseBodyImages) *ListSearchTaskDialogueDatasResponseBody {
	s.Images = v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetMessage(v string) *ListSearchTaskDialogueDatasResponseBody {
	s.Message = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetPageNumber(v int32) *ListSearchTaskDialogueDatasResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetPageSize(v int32) *ListSearchTaskDialogueDatasResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetRealtimeSearch(v bool) *ListSearchTaskDialogueDatasResponseBody {
	s.RealtimeSearch = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetRequestId(v string) *ListSearchTaskDialogueDatasResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetSearchType(v string) *ListSearchTaskDialogueDatasResponseBody {
	s.SearchType = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetSuccess(v bool) *ListSearchTaskDialogueDatasResponseBody {
	s.Success = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetTotalCount(v int32) *ListSearchTaskDialogueDatasResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBody) SetVideos(v []*ListSearchTaskDialogueDatasResponseBodyVideos) *ListSearchTaskDialogueDatasResponseBody {
	s.Videos = v
	return s
}

type ListSearchTaskDialogueDatasResponseBodyArticles struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// xx
	CategoryUuid *string `json:"CategoryUuid,omitempty" xml:"CategoryUuid,omitempty"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文档-自定义的唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// text
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// xxx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// xx
	Extend1 *string `json:"Extend1,omitempty" xml:"Extend1,omitempty"`
	// example:
	//
	// xx
	Extend2 *string `json:"Extend2,omitempty" xml:"Extend2,omitempty"`
	// example:
	//
	// xx
	Extend3          *string                                                            `json:"Extend3,omitempty" xml:"Extend3,omitempty"`
	MultimodalMedias []*ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias `json:"MultimodalMedias,omitempty" xml:"MultimodalMedias,omitempty" type:"Repeated"`
	// example:
	//
	// 2024-11-25 14:25:59
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 新华社
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListSearchTaskDialogueDatasResponseBodyArticles) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialogueDatasResponseBodyArticles) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetAuthor(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.Author = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetCategoryUuid(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.CategoryUuid = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetContent(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.Content = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetDocId(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.DocId = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetDocType(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.DocType = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetDocUuid(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.DocUuid = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetExtend1(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.Extend1 = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetExtend2(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.Extend2 = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetExtend3(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.Extend3 = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetMultimodalMedias(v []*ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.MultimodalMedias = v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetPubTime(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.PubTime = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetSource(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.Source = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetSummary(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.Summary = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetTitle(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.Title = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticles) SetUrl(v string) *ListSearchTaskDialogueDatasResponseBodyArticles {
	s.Url = &v
	return s
}

type ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias struct {
	// example:
	//
	// 图片或视频文件地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// 多模态数据唯一标识
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 多模态数据类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias) SetFileUrl(v string) *ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias {
	s.FileUrl = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias) SetMediaId(v string) *ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias {
	s.MediaId = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias) SetMediaType(v string) *ListSearchTaskDialogueDatasResponseBodyArticlesMultimodalMedias {
	s.MediaType = &v
	return s
}

type ListSearchTaskDialogueDatasResponseBodyImages struct {
	// example:
	//
	// 图片或视频文件地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// 多模态数据唯一标识
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 多模态数据类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s ListSearchTaskDialogueDatasResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialogueDatasResponseBodyImages) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialogueDatasResponseBodyImages) SetFileUrl(v string) *ListSearchTaskDialogueDatasResponseBodyImages {
	s.FileUrl = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyImages) SetMediaId(v string) *ListSearchTaskDialogueDatasResponseBodyImages {
	s.MediaId = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyImages) SetMediaType(v string) *ListSearchTaskDialogueDatasResponseBodyImages {
	s.MediaType = &v
	return s
}

type ListSearchTaskDialogueDatasResponseBodyVideos struct {
	// example:
	//
	// 图片或视频文件地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// 多模态数据唯一标识
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 多模态数据类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s ListSearchTaskDialogueDatasResponseBodyVideos) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialogueDatasResponseBodyVideos) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialogueDatasResponseBodyVideos) SetFileUrl(v string) *ListSearchTaskDialogueDatasResponseBodyVideos {
	s.FileUrl = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyVideos) SetMediaId(v string) *ListSearchTaskDialogueDatasResponseBodyVideos {
	s.MediaId = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponseBodyVideos) SetMediaType(v string) *ListSearchTaskDialogueDatasResponseBodyVideos {
	s.MediaType = &v
	return s
}

type ListSearchTaskDialogueDatasResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSearchTaskDialogueDatasResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSearchTaskDialogueDatasResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialogueDatasResponse) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialogueDatasResponse) SetHeaders(v map[string]*string) *ListSearchTaskDialogueDatasResponse {
	s.Headers = v
	return s
}

func (s *ListSearchTaskDialogueDatasResponse) SetStatusCode(v int32) *ListSearchTaskDialogueDatasResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSearchTaskDialogueDatasResponse) SetBody(v *ListSearchTaskDialogueDatasResponseBody) *ListSearchTaskDialogueDatasResponse {
	s.Body = v
	return s
}

type ListSearchTaskDialoguesRequest struct {
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// xxxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListSearchTaskDialoguesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialoguesRequest) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialoguesRequest) SetPageNumber(v int32) *ListSearchTaskDialoguesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSearchTaskDialoguesRequest) SetPageSize(v int32) *ListSearchTaskDialoguesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSearchTaskDialoguesRequest) SetTaskId(v string) *ListSearchTaskDialoguesRequest {
	s.TaskId = &v
	return s
}

func (s *ListSearchTaskDialoguesRequest) SetWorkspaceId(v string) *ListSearchTaskDialoguesRequest {
	s.WorkspaceId = &v
	return s
}

type ListSearchTaskDialoguesResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListSearchTaskDialoguesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSearchTaskDialoguesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialoguesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialoguesResponseBody) SetCode(v string) *ListSearchTaskDialoguesResponseBody {
	s.Code = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBody) SetData(v []*ListSearchTaskDialoguesResponseBodyData) *ListSearchTaskDialoguesResponseBody {
	s.Data = v
	return s
}

func (s *ListSearchTaskDialoguesResponseBody) SetHttpStatusCode(v int32) *ListSearchTaskDialoguesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBody) SetMessage(v string) *ListSearchTaskDialoguesResponseBody {
	s.Message = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBody) SetPageNumber(v int32) *ListSearchTaskDialoguesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBody) SetPageSize(v int32) *ListSearchTaskDialoguesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBody) SetRequestId(v string) *ListSearchTaskDialoguesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBody) SetSuccess(v bool) *ListSearchTaskDialoguesResponseBody {
	s.Success = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBody) SetTotalCount(v int32) *ListSearchTaskDialoguesResponseBody {
	s.TotalCount = &v
	return s
}

type ListSearchTaskDialoguesResponseBodyData struct {
	// example:
	//
	// 2024-11-25 13:33:01
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 24
	DialogueType *int32 `json:"DialogueType,omitempty" xml:"DialogueType,omitempty"`
	// example:
	//
	// xxx
	GoodText *string `json:"GoodText,omitempty" xml:"GoodText,omitempty"`
	// example:
	//
	// xxxx
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// example:
	//
	// xxx
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// thumbsUp
	Rating *string `json:"Rating,omitempty" xml:"Rating,omitempty"`
	// example:
	//
	// {}
	ResponseBodyStr *string `json:"ResponseBodyStr,omitempty" xml:"ResponseBodyStr,omitempty"`
	// example:
	//
	// xxxx
	SessionId *string   `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	Tags      []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// example:
	//
	// xxxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// xxx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s ListSearchTaskDialoguesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialoguesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetCreateTime(v string) *ListSearchTaskDialoguesResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetDialogueType(v int32) *ListSearchTaskDialoguesResponseBodyData {
	s.DialogueType = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetGoodText(v string) *ListSearchTaskDialoguesResponseBodyData {
	s.GoodText = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetOriginSessionId(v string) *ListSearchTaskDialoguesResponseBodyData {
	s.OriginSessionId = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetPrompt(v string) *ListSearchTaskDialoguesResponseBodyData {
	s.Prompt = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetRating(v string) *ListSearchTaskDialoguesResponseBodyData {
	s.Rating = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetResponseBodyStr(v string) *ListSearchTaskDialoguesResponseBodyData {
	s.ResponseBodyStr = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetSessionId(v string) *ListSearchTaskDialoguesResponseBodyData {
	s.SessionId = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetTags(v []*string) *ListSearchTaskDialoguesResponseBodyData {
	s.Tags = v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetTaskId(v string) *ListSearchTaskDialoguesResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *ListSearchTaskDialoguesResponseBodyData) SetText(v string) *ListSearchTaskDialoguesResponseBodyData {
	s.Text = &v
	return s
}

type ListSearchTaskDialoguesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSearchTaskDialoguesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSearchTaskDialoguesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTaskDialoguesResponse) GoString() string {
	return s.String()
}

func (s *ListSearchTaskDialoguesResponse) SetHeaders(v map[string]*string) *ListSearchTaskDialoguesResponse {
	s.Headers = v
	return s
}

func (s *ListSearchTaskDialoguesResponse) SetStatusCode(v int32) *ListSearchTaskDialoguesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSearchTaskDialoguesResponse) SetBody(v *ListSearchTaskDialoguesResponseBody) *ListSearchTaskDialoguesResponse {
	s.Body = v
	return s
}

type ListSearchTasksRequest struct {
	// example:
	//
	// 24
	DialogueTypes []*int32 `json:"DialogueTypes,omitempty" xml:"DialogueTypes,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListSearchTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTasksRequest) GoString() string {
	return s.String()
}

func (s *ListSearchTasksRequest) SetDialogueTypes(v []*int32) *ListSearchTasksRequest {
	s.DialogueTypes = v
	return s
}

func (s *ListSearchTasksRequest) SetPageNumber(v int32) *ListSearchTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSearchTasksRequest) SetPageSize(v int32) *ListSearchTasksRequest {
	s.PageSize = &v
	return s
}

func (s *ListSearchTasksRequest) SetWorkspaceId(v string) *ListSearchTasksRequest {
	s.WorkspaceId = &v
	return s
}

type ListSearchTasksShrinkRequest struct {
	// example:
	//
	// 24
	DialogueTypesShrink *string `json:"DialogueTypes,omitempty" xml:"DialogueTypes,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListSearchTasksShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTasksShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListSearchTasksShrinkRequest) SetDialogueTypesShrink(v string) *ListSearchTasksShrinkRequest {
	s.DialogueTypesShrink = &v
	return s
}

func (s *ListSearchTasksShrinkRequest) SetPageNumber(v int32) *ListSearchTasksShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSearchTasksShrinkRequest) SetPageSize(v int32) *ListSearchTasksShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListSearchTasksShrinkRequest) SetWorkspaceId(v string) *ListSearchTasksShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type ListSearchTasksResponseBody struct {
	// example:
	//
	// NoData
	Code *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListSearchTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSearchTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListSearchTasksResponseBody) SetCode(v string) *ListSearchTasksResponseBody {
	s.Code = &v
	return s
}

func (s *ListSearchTasksResponseBody) SetData(v []*ListSearchTasksResponseBodyData) *ListSearchTasksResponseBody {
	s.Data = v
	return s
}

func (s *ListSearchTasksResponseBody) SetHttpStatusCode(v int32) *ListSearchTasksResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSearchTasksResponseBody) SetMessage(v string) *ListSearchTasksResponseBody {
	s.Message = &v
	return s
}

func (s *ListSearchTasksResponseBody) SetPageNumber(v int32) *ListSearchTasksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListSearchTasksResponseBody) SetPageSize(v int32) *ListSearchTasksResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListSearchTasksResponseBody) SetRequestId(v string) *ListSearchTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSearchTasksResponseBody) SetSuccess(v bool) *ListSearchTasksResponseBody {
	s.Success = &v
	return s
}

func (s *ListSearchTasksResponseBody) SetTotalCount(v int32) *ListSearchTasksResponseBody {
	s.TotalCount = &v
	return s
}

type ListSearchTasksResponseBodyData struct {
	// example:
	//
	// 2024-11-25 11:40:50
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 24
	DialogueType *int32 `json:"DialogueType,omitempty" xml:"DialogueType,omitempty"`
	// example:
	//
	// xxxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// xxx
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// 2024-11-25 11:40:50
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// xxxx
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s ListSearchTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSearchTasksResponseBodyData) SetCreateTime(v string) *ListSearchTasksResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListSearchTasksResponseBodyData) SetDialogueType(v int32) *ListSearchTasksResponseBodyData {
	s.DialogueType = &v
	return s
}

func (s *ListSearchTasksResponseBodyData) SetTaskId(v string) *ListSearchTasksResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *ListSearchTasksResponseBodyData) SetTaskName(v string) *ListSearchTasksResponseBodyData {
	s.TaskName = &v
	return s
}

func (s *ListSearchTasksResponseBodyData) SetUpdateTime(v string) *ListSearchTasksResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *ListSearchTasksResponseBodyData) SetUsername(v string) *ListSearchTasksResponseBodyData {
	s.Username = &v
	return s
}

type ListSearchTasksResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSearchTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSearchTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSearchTasksResponse) GoString() string {
	return s.String()
}

func (s *ListSearchTasksResponse) SetHeaders(v map[string]*string) *ListSearchTasksResponse {
	s.Headers = v
	return s
}

func (s *ListSearchTasksResponse) SetStatusCode(v int32) *ListSearchTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSearchTasksResponse) SetBody(v *ListSearchTasksResponseBody) *ListSearchTasksResponse {
	s.Body = v
	return s
}

type ListStyleLearningResultRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListStyleLearningResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ListStyleLearningResultRequest) GoString() string {
	return s.String()
}

func (s *ListStyleLearningResultRequest) SetAgentKey(v string) *ListStyleLearningResultRequest {
	s.AgentKey = &v
	return s
}

func (s *ListStyleLearningResultRequest) SetCurrent(v int32) *ListStyleLearningResultRequest {
	s.Current = &v
	return s
}

func (s *ListStyleLearningResultRequest) SetSize(v int32) *ListStyleLearningResultRequest {
	s.Size = &v
	return s
}

type ListStyleLearningResultResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1
	Current *int32                                     `json:"Current,omitempty" xml:"Current,omitempty"`
	Data    []*ListStyleLearningResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListStyleLearningResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListStyleLearningResultResponseBody) GoString() string {
	return s.String()
}

func (s *ListStyleLearningResultResponseBody) SetCode(v string) *ListStyleLearningResultResponseBody {
	s.Code = &v
	return s
}

func (s *ListStyleLearningResultResponseBody) SetCurrent(v int32) *ListStyleLearningResultResponseBody {
	s.Current = &v
	return s
}

func (s *ListStyleLearningResultResponseBody) SetData(v []*ListStyleLearningResultResponseBodyData) *ListStyleLearningResultResponseBody {
	s.Data = v
	return s
}

func (s *ListStyleLearningResultResponseBody) SetHttpStatusCode(v int32) *ListStyleLearningResultResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListStyleLearningResultResponseBody) SetMessage(v string) *ListStyleLearningResultResponseBody {
	s.Message = &v
	return s
}

func (s *ListStyleLearningResultResponseBody) SetRequestId(v string) *ListStyleLearningResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListStyleLearningResultResponseBody) SetSize(v int32) *ListStyleLearningResultResponseBody {
	s.Size = &v
	return s
}

func (s *ListStyleLearningResultResponseBody) SetSuccess(v bool) *ListStyleLearningResultResponseBody {
	s.Success = &v
	return s
}

func (s *ListStyleLearningResultResponseBody) SetTotal(v int32) *ListStyleLearningResultResponseBody {
	s.Total = &v
	return s
}

type ListStyleLearningResultResponseBodyData struct {
	// example:
	//
	// AIGC 生成的内容
	AigcResult *string `json:"AigcResult,omitempty" xml:"AigcResult,omitempty"`
	// example:
	//
	// 70
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 用户修订后内容
	RewriteResult *string `json:"RewriteResult,omitempty" xml:"RewriteResult,omitempty"`
	// example:
	//
	// 文体风格名称
	StyleName *string `json:"StyleName,omitempty" xml:"StyleName,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ListStyleLearningResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListStyleLearningResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListStyleLearningResultResponseBodyData) SetAigcResult(v string) *ListStyleLearningResultResponseBodyData {
	s.AigcResult = &v
	return s
}

func (s *ListStyleLearningResultResponseBodyData) SetId(v int64) *ListStyleLearningResultResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListStyleLearningResultResponseBodyData) SetRewriteResult(v string) *ListStyleLearningResultResponseBodyData {
	s.RewriteResult = &v
	return s
}

func (s *ListStyleLearningResultResponseBodyData) SetStyleName(v string) *ListStyleLearningResultResponseBodyData {
	s.StyleName = &v
	return s
}

func (s *ListStyleLearningResultResponseBodyData) SetTaskId(v string) *ListStyleLearningResultResponseBodyData {
	s.TaskId = &v
	return s
}

type ListStyleLearningResultResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListStyleLearningResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListStyleLearningResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ListStyleLearningResultResponse) GoString() string {
	return s.String()
}

func (s *ListStyleLearningResultResponse) SetHeaders(v map[string]*string) *ListStyleLearningResultResponse {
	s.Headers = v
	return s
}

func (s *ListStyleLearningResultResponse) SetStatusCode(v int32) *ListStyleLearningResultResponse {
	s.StatusCode = &v
	return s
}

func (s *ListStyleLearningResultResponse) SetBody(v *ListStyleLearningResultResponseBody) *ListStyleLearningResultResponse {
	s.Body = v
	return s
}

type ListTimedViewAttitudeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 53
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜源
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
}

func (s ListTimedViewAttitudeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTimedViewAttitudeRequest) GoString() string {
	return s.String()
}

func (s *ListTimedViewAttitudeRequest) SetAgentKey(v string) *ListTimedViewAttitudeRequest {
	s.AgentKey = &v
	return s
}

func (s *ListTimedViewAttitudeRequest) SetMaxResults(v int32) *ListTimedViewAttitudeRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTimedViewAttitudeRequest) SetNextToken(v string) *ListTimedViewAttitudeRequest {
	s.NextToken = &v
	return s
}

func (s *ListTimedViewAttitudeRequest) SetTopic(v string) *ListTimedViewAttitudeRequest {
	s.Topic = &v
	return s
}

func (s *ListTimedViewAttitudeRequest) SetTopicSource(v string) *ListTimedViewAttitudeRequest {
	s.TopicSource = &v
	return s
}

type ListTimedViewAttitudeResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListTimedViewAttitudeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 15
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 58
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTimedViewAttitudeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTimedViewAttitudeResponseBody) GoString() string {
	return s.String()
}

func (s *ListTimedViewAttitudeResponseBody) SetCode(v string) *ListTimedViewAttitudeResponseBody {
	s.Code = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBody) SetData(v []*ListTimedViewAttitudeResponseBodyData) *ListTimedViewAttitudeResponseBody {
	s.Data = v
	return s
}

func (s *ListTimedViewAttitudeResponseBody) SetHttpStatusCode(v int32) *ListTimedViewAttitudeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBody) SetMaxResults(v int32) *ListTimedViewAttitudeResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBody) SetMessage(v string) *ListTimedViewAttitudeResponseBody {
	s.Message = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBody) SetNextToken(v string) *ListTimedViewAttitudeResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBody) SetRequestId(v string) *ListTimedViewAttitudeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBody) SetSuccess(v bool) *ListTimedViewAttitudeResponseBody {
	s.Success = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBody) SetTotalCount(v int32) *ListTimedViewAttitudeResponseBody {
	s.TotalCount = &v
	return s
}

type ListTimedViewAttitudeResponseBodyData struct {
	// example:
	//
	// 当前观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点类型
	AttitudeType *string `json:"AttitudeType,omitempty" xml:"AttitudeType,omitempty"`
	// example:
	//
	// 2024-01-22 10:29
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 当前观点占比
	Ratio *string `json:"Ratio,omitempty" xml:"Ratio,omitempty"`
	// example:
	//
	// 新浪
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://www.example.com/news/1.html
	Url        *string                                            `json:"Url,omitempty" xml:"Url,omitempty"`
	ViewPoints []*ListTimedViewAttitudeResponseBodyDataViewPoints `json:"ViewPoints,omitempty" xml:"ViewPoints,omitempty" type:"Repeated"`
}

func (s ListTimedViewAttitudeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTimedViewAttitudeResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTimedViewAttitudeResponseBodyData) SetAttitude(v string) *ListTimedViewAttitudeResponseBodyData {
	s.Attitude = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyData) SetAttitudeType(v string) *ListTimedViewAttitudeResponseBodyData {
	s.AttitudeType = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyData) SetPubTime(v string) *ListTimedViewAttitudeResponseBodyData {
	s.PubTime = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyData) SetRatio(v string) *ListTimedViewAttitudeResponseBodyData {
	s.Ratio = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyData) SetSource(v string) *ListTimedViewAttitudeResponseBodyData {
	s.Source = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyData) SetTitle(v string) *ListTimedViewAttitudeResponseBodyData {
	s.Title = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyData) SetUrl(v string) *ListTimedViewAttitudeResponseBodyData {
	s.Url = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyData) SetViewPoints(v []*ListTimedViewAttitudeResponseBodyDataViewPoints) *ListTimedViewAttitudeResponseBodyData {
	s.ViewPoints = v
	return s
}

type ListTimedViewAttitudeResponseBodyDataViewPoints struct {
	Outlines []*ListTimedViewAttitudeResponseBodyDataViewPointsOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListTimedViewAttitudeResponseBodyDataViewPoints) String() string {
	return tea.Prettify(s)
}

func (s ListTimedViewAttitudeResponseBodyDataViewPoints) GoString() string {
	return s.String()
}

func (s *ListTimedViewAttitudeResponseBodyDataViewPoints) SetOutlines(v []*ListTimedViewAttitudeResponseBodyDataViewPointsOutlines) *ListTimedViewAttitudeResponseBodyDataViewPoints {
	s.Outlines = v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyDataViewPoints) SetPoint(v string) *ListTimedViewAttitudeResponseBodyDataViewPoints {
	s.Point = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyDataViewPoints) SetSummary(v string) *ListTimedViewAttitudeResponseBodyDataViewPoints {
	s.Summary = &v
	return s
}

type ListTimedViewAttitudeResponseBodyDataViewPointsOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListTimedViewAttitudeResponseBodyDataViewPointsOutlines) String() string {
	return tea.Prettify(s)
}

func (s ListTimedViewAttitudeResponseBodyDataViewPointsOutlines) GoString() string {
	return s.String()
}

func (s *ListTimedViewAttitudeResponseBodyDataViewPointsOutlines) SetOutline(v string) *ListTimedViewAttitudeResponseBodyDataViewPointsOutlines {
	s.Outline = &v
	return s
}

func (s *ListTimedViewAttitudeResponseBodyDataViewPointsOutlines) SetSummary(v string) *ListTimedViewAttitudeResponseBodyDataViewPointsOutlines {
	s.Summary = &v
	return s
}

type ListTimedViewAttitudeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTimedViewAttitudeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTimedViewAttitudeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTimedViewAttitudeResponse) GoString() string {
	return s.String()
}

func (s *ListTimedViewAttitudeResponse) SetHeaders(v map[string]*string) *ListTimedViewAttitudeResponse {
	s.Headers = v
	return s
}

func (s *ListTimedViewAttitudeResponse) SetStatusCode(v int32) *ListTimedViewAttitudeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTimedViewAttitudeResponse) SetBody(v *ListTimedViewAttitudeResponseBody) *ListTimedViewAttitudeResponse {
	s.Body = v
	return s
}

type ListTopicRecommendEventListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 72
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
}

func (s ListTopicRecommendEventListRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTopicRecommendEventListRequest) GoString() string {
	return s.String()
}

func (s *ListTopicRecommendEventListRequest) SetAgentKey(v string) *ListTopicRecommendEventListRequest {
	s.AgentKey = &v
	return s
}

func (s *ListTopicRecommendEventListRequest) SetMaxResults(v int32) *ListTopicRecommendEventListRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTopicRecommendEventListRequest) SetNextToken(v string) *ListTopicRecommendEventListRequest {
	s.NextToken = &v
	return s
}

type ListTopicRecommendEventListResponseBody struct {
	// example:
	//
	// NoData
	Code *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*string `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 71
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// x\\"x\\"x
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 60
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTopicRecommendEventListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTopicRecommendEventListResponseBody) GoString() string {
	return s.String()
}

func (s *ListTopicRecommendEventListResponseBody) SetCode(v string) *ListTopicRecommendEventListResponseBody {
	s.Code = &v
	return s
}

func (s *ListTopicRecommendEventListResponseBody) SetData(v []*string) *ListTopicRecommendEventListResponseBody {
	s.Data = v
	return s
}

func (s *ListTopicRecommendEventListResponseBody) SetHttpStatusCode(v int32) *ListTopicRecommendEventListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTopicRecommendEventListResponseBody) SetMaxResults(v int32) *ListTopicRecommendEventListResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListTopicRecommendEventListResponseBody) SetMessage(v string) *ListTopicRecommendEventListResponseBody {
	s.Message = &v
	return s
}

func (s *ListTopicRecommendEventListResponseBody) SetNextToken(v string) *ListTopicRecommendEventListResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTopicRecommendEventListResponseBody) SetRequestId(v string) *ListTopicRecommendEventListResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTopicRecommendEventListResponseBody) SetSuccess(v bool) *ListTopicRecommendEventListResponseBody {
	s.Success = &v
	return s
}

func (s *ListTopicRecommendEventListResponseBody) SetTotalCount(v int32) *ListTopicRecommendEventListResponseBody {
	s.TotalCount = &v
	return s
}

type ListTopicRecommendEventListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTopicRecommendEventListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTopicRecommendEventListResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTopicRecommendEventListResponse) GoString() string {
	return s.String()
}

func (s *ListTopicRecommendEventListResponse) SetHeaders(v map[string]*string) *ListTopicRecommendEventListResponse {
	s.Headers = v
	return s
}

func (s *ListTopicRecommendEventListResponse) SetStatusCode(v int32) *ListTopicRecommendEventListResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTopicRecommendEventListResponse) SetBody(v *ListTopicRecommendEventListResponseBody) *ListTopicRecommendEventListResponse {
	s.Body = v
	return s
}

type ListTopicViewPointRecommendEventListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// xxx
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 66
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
}

func (s ListTopicViewPointRecommendEventListRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTopicViewPointRecommendEventListRequest) GoString() string {
	return s.String()
}

func (s *ListTopicViewPointRecommendEventListRequest) SetAgentKey(v string) *ListTopicViewPointRecommendEventListRequest {
	s.AgentKey = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListRequest) SetId(v string) *ListTopicViewPointRecommendEventListRequest {
	s.Id = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListRequest) SetMaxResults(v int32) *ListTopicViewPointRecommendEventListRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListRequest) SetNextToken(v string) *ListTopicViewPointRecommendEventListRequest {
	s.NextToken = &v
	return s
}

type ListTopicViewPointRecommendEventListResponseBody struct {
	// example:
	//
	// NoData
	Code *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*string `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 8
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 32
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTopicViewPointRecommendEventListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTopicViewPointRecommendEventListResponseBody) GoString() string {
	return s.String()
}

func (s *ListTopicViewPointRecommendEventListResponseBody) SetCode(v string) *ListTopicViewPointRecommendEventListResponseBody {
	s.Code = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponseBody) SetData(v []*string) *ListTopicViewPointRecommendEventListResponseBody {
	s.Data = v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponseBody) SetHttpStatusCode(v int32) *ListTopicViewPointRecommendEventListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponseBody) SetMaxResults(v int32) *ListTopicViewPointRecommendEventListResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponseBody) SetMessage(v string) *ListTopicViewPointRecommendEventListResponseBody {
	s.Message = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponseBody) SetNextToken(v string) *ListTopicViewPointRecommendEventListResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponseBody) SetRequestId(v string) *ListTopicViewPointRecommendEventListResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponseBody) SetSuccess(v bool) *ListTopicViewPointRecommendEventListResponseBody {
	s.Success = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponseBody) SetTotalCount(v int32) *ListTopicViewPointRecommendEventListResponseBody {
	s.TotalCount = &v
	return s
}

type ListTopicViewPointRecommendEventListResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTopicViewPointRecommendEventListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTopicViewPointRecommendEventListResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTopicViewPointRecommendEventListResponse) GoString() string {
	return s.String()
}

func (s *ListTopicViewPointRecommendEventListResponse) SetHeaders(v map[string]*string) *ListTopicViewPointRecommendEventListResponse {
	s.Headers = v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponse) SetStatusCode(v int32) *ListTopicViewPointRecommendEventListResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTopicViewPointRecommendEventListResponse) SetBody(v *ListTopicViewPointRecommendEventListResponseBody) *ListTopicViewPointRecommendEventListResponse {
	s.Body = v
	return s
}

type ListVersionsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 33a2658aaabf4c24b45d50e575125311_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
}

func (s ListVersionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVersionsRequest) GoString() string {
	return s.String()
}

func (s *ListVersionsRequest) SetAgentKey(v string) *ListVersionsRequest {
	s.AgentKey = &v
	return s
}

type ListVersionsResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListVersionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 数据不存在
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListVersionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVersionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListVersionsResponseBody) SetCode(v string) *ListVersionsResponseBody {
	s.Code = &v
	return s
}

func (s *ListVersionsResponseBody) SetData(v []*ListVersionsResponseBodyData) *ListVersionsResponseBody {
	s.Data = v
	return s
}

func (s *ListVersionsResponseBody) SetHttpStatusCode(v int32) *ListVersionsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListVersionsResponseBody) SetMessage(v string) *ListVersionsResponseBody {
	s.Message = &v
	return s
}

func (s *ListVersionsResponseBody) SetRequestId(v string) *ListVersionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVersionsResponseBody) SetSuccess(v bool) *ListVersionsResponseBody {
	s.Success = &v
	return s
}

type ListVersionsResponseBodyData struct {
	// example:
	//
	// 43
	ConcurrentCount *int32 `json:"ConcurrentCount,omitempty" xml:"ConcurrentCount,omitempty"`
	// example:
	//
	// 2023-04-23 02:00:34
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 55
	InstanceCount *int32 `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// example:
	//
	// ga-bp12pismsw4v3tzhf62p1
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 7
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// example:
	//
	// CUSTOMIZE
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// example:
	//
	// 13
	Quota *int32 `json:"Quota,omitempty" xml:"Quota,omitempty"`
	// example:
	//
	// 2023-05-27 04:11:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 65
	UseQuota      *int32  `json:"UseQuota,omitempty" xml:"UseQuota,omitempty"`
	VersionDetail *string `json:"VersionDetail,omitempty" xml:"VersionDetail,omitempty"`
	// example:
	//
	// 试用版
	VersionName *string `json:"VersionName,omitempty" xml:"VersionName,omitempty"`
	// example:
	//
	// 87
	VersionStatus *int32 `json:"VersionStatus,omitempty" xml:"VersionStatus,omitempty"`
}

func (s ListVersionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListVersionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListVersionsResponseBodyData) SetConcurrentCount(v int32) *ListVersionsResponseBodyData {
	s.ConcurrentCount = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetEndTime(v string) *ListVersionsResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetInstanceCount(v int32) *ListVersionsResponseBodyData {
	s.InstanceCount = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetInstanceId(v string) *ListVersionsResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetOrderId(v int64) *ListVersionsResponseBodyData {
	s.OrderId = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetProductType(v string) *ListVersionsResponseBodyData {
	s.ProductType = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetQuota(v int32) *ListVersionsResponseBodyData {
	s.Quota = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetStartTime(v string) *ListVersionsResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetUseQuota(v int32) *ListVersionsResponseBodyData {
	s.UseQuota = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetVersionDetail(v string) *ListVersionsResponseBodyData {
	s.VersionDetail = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetVersionName(v string) *ListVersionsResponseBodyData {
	s.VersionName = &v
	return s
}

func (s *ListVersionsResponseBodyData) SetVersionStatus(v int32) *ListVersionsResponseBodyData {
	s.VersionStatus = &v
	return s
}

type ListVersionsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListVersionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListVersionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVersionsResponse) GoString() string {
	return s.String()
}

func (s *ListVersionsResponse) SetHeaders(v map[string]*string) *ListVersionsResponse {
	s.Headers = v
	return s
}

func (s *ListVersionsResponse) SetStatusCode(v int32) *ListVersionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListVersionsResponse) SetBody(v *ListVersionsResponseBody) *ListVersionsResponse {
	s.Body = v
	return s
}

type ListWebReviewPointsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 81
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 热榜源
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
}

func (s ListWebReviewPointsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWebReviewPointsRequest) GoString() string {
	return s.String()
}

func (s *ListWebReviewPointsRequest) SetAgentKey(v string) *ListWebReviewPointsRequest {
	s.AgentKey = &v
	return s
}

func (s *ListWebReviewPointsRequest) SetMaxResults(v int32) *ListWebReviewPointsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListWebReviewPointsRequest) SetNextToken(v string) *ListWebReviewPointsRequest {
	s.NextToken = &v
	return s
}

func (s *ListWebReviewPointsRequest) SetTopic(v string) *ListWebReviewPointsRequest {
	s.Topic = &v
	return s
}

func (s *ListWebReviewPointsRequest) SetTopicSource(v string) *ListWebReviewPointsRequest {
	s.TopicSource = &v
	return s
}

type ListWebReviewPointsResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListWebReviewPointsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 79
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 下一页的token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 32
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListWebReviewPointsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWebReviewPointsResponseBody) GoString() string {
	return s.String()
}

func (s *ListWebReviewPointsResponseBody) SetCode(v string) *ListWebReviewPointsResponseBody {
	s.Code = &v
	return s
}

func (s *ListWebReviewPointsResponseBody) SetData(v []*ListWebReviewPointsResponseBodyData) *ListWebReviewPointsResponseBody {
	s.Data = v
	return s
}

func (s *ListWebReviewPointsResponseBody) SetHttpStatusCode(v int32) *ListWebReviewPointsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListWebReviewPointsResponseBody) SetMaxResults(v int32) *ListWebReviewPointsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListWebReviewPointsResponseBody) SetMessage(v string) *ListWebReviewPointsResponseBody {
	s.Message = &v
	return s
}

func (s *ListWebReviewPointsResponseBody) SetNextToken(v string) *ListWebReviewPointsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListWebReviewPointsResponseBody) SetRequestId(v string) *ListWebReviewPointsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWebReviewPointsResponseBody) SetSuccess(v bool) *ListWebReviewPointsResponseBody {
	s.Success = &v
	return s
}

func (s *ListWebReviewPointsResponseBody) SetTotalCount(v int32) *ListWebReviewPointsResponseBody {
	s.TotalCount = &v
	return s
}

type ListWebReviewPointsResponseBodyData struct {
	// example:
	//
	// 当前观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 观点类型
	AttitudeType *string                                        `json:"AttitudeType,omitempty" xml:"AttitudeType,omitempty"`
	Comments     []*ListWebReviewPointsResponseBodyDataComments `json:"Comments,omitempty" xml:"Comments,omitempty" type:"Repeated"`
	// example:
	//
	// 当前观点占比
	Ratio      *string                                          `json:"Ratio,omitempty" xml:"Ratio,omitempty"`
	ViewPoints []*ListWebReviewPointsResponseBodyDataViewPoints `json:"ViewPoints,omitempty" xml:"ViewPoints,omitempty" type:"Repeated"`
}

func (s ListWebReviewPointsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListWebReviewPointsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListWebReviewPointsResponseBodyData) SetAttitude(v string) *ListWebReviewPointsResponseBodyData {
	s.Attitude = &v
	return s
}

func (s *ListWebReviewPointsResponseBodyData) SetAttitudeType(v string) *ListWebReviewPointsResponseBodyData {
	s.AttitudeType = &v
	return s
}

func (s *ListWebReviewPointsResponseBodyData) SetComments(v []*ListWebReviewPointsResponseBodyDataComments) *ListWebReviewPointsResponseBodyData {
	s.Comments = v
	return s
}

func (s *ListWebReviewPointsResponseBodyData) SetRatio(v string) *ListWebReviewPointsResponseBodyData {
	s.Ratio = &v
	return s
}

func (s *ListWebReviewPointsResponseBodyData) SetViewPoints(v []*ListWebReviewPointsResponseBodyDataViewPoints) *ListWebReviewPointsResponseBodyData {
	s.ViewPoints = v
	return s
}

type ListWebReviewPointsResponseBodyDataComments struct {
	// example:
	//
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 评论内容
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 当前评论所属的URL
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// 评论用户名
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s ListWebReviewPointsResponseBodyDataComments) String() string {
	return tea.Prettify(s)
}

func (s ListWebReviewPointsResponseBodyDataComments) GoString() string {
	return s.String()
}

func (s *ListWebReviewPointsResponseBodyDataComments) SetSource(v string) *ListWebReviewPointsResponseBodyDataComments {
	s.Source = &v
	return s
}

func (s *ListWebReviewPointsResponseBodyDataComments) SetText(v string) *ListWebReviewPointsResponseBodyDataComments {
	s.Text = &v
	return s
}

func (s *ListWebReviewPointsResponseBodyDataComments) SetTitle(v string) *ListWebReviewPointsResponseBodyDataComments {
	s.Title = &v
	return s
}

func (s *ListWebReviewPointsResponseBodyDataComments) SetUrl(v string) *ListWebReviewPointsResponseBodyDataComments {
	s.Url = &v
	return s
}

func (s *ListWebReviewPointsResponseBodyDataComments) SetUsername(v string) *ListWebReviewPointsResponseBodyDataComments {
	s.Username = &v
	return s
}

type ListWebReviewPointsResponseBodyDataViewPoints struct {
	Outlines []*ListWebReviewPointsResponseBodyDataViewPointsOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	// example:
	//
	// 视角
	Point *string `json:"Point,omitempty" xml:"Point,omitempty"`
	// example:
	//
	// 摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListWebReviewPointsResponseBodyDataViewPoints) String() string {
	return tea.Prettify(s)
}

func (s ListWebReviewPointsResponseBodyDataViewPoints) GoString() string {
	return s.String()
}

func (s *ListWebReviewPointsResponseBodyDataViewPoints) SetOutlines(v []*ListWebReviewPointsResponseBodyDataViewPointsOutlines) *ListWebReviewPointsResponseBodyDataViewPoints {
	s.Outlines = v
	return s
}

func (s *ListWebReviewPointsResponseBodyDataViewPoints) SetPoint(v string) *ListWebReviewPointsResponseBodyDataViewPoints {
	s.Point = &v
	return s
}

func (s *ListWebReviewPointsResponseBodyDataViewPoints) SetSummary(v string) *ListWebReviewPointsResponseBodyDataViewPoints {
	s.Summary = &v
	return s
}

type ListWebReviewPointsResponseBodyDataViewPointsOutlines struct {
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
	// example:
	//
	// 大纲摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s ListWebReviewPointsResponseBodyDataViewPointsOutlines) String() string {
	return tea.Prettify(s)
}

func (s ListWebReviewPointsResponseBodyDataViewPointsOutlines) GoString() string {
	return s.String()
}

func (s *ListWebReviewPointsResponseBodyDataViewPointsOutlines) SetOutline(v string) *ListWebReviewPointsResponseBodyDataViewPointsOutlines {
	s.Outline = &v
	return s
}

func (s *ListWebReviewPointsResponseBodyDataViewPointsOutlines) SetSummary(v string) *ListWebReviewPointsResponseBodyDataViewPointsOutlines {
	s.Summary = &v
	return s
}

type ListWebReviewPointsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWebReviewPointsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWebReviewPointsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWebReviewPointsResponse) GoString() string {
	return s.String()
}

func (s *ListWebReviewPointsResponse) SetHeaders(v map[string]*string) *ListWebReviewPointsResponse {
	s.Headers = v
	return s
}

func (s *ListWebReviewPointsResponse) SetStatusCode(v int32) *ListWebReviewPointsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWebReviewPointsResponse) SetBody(v *ListWebReviewPointsResponseBody) *ListWebReviewPointsResponse {
	s.Body = v
	return s
}

type QueryAsyncTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 33a2658aaabf4c24b45d50e575125311_p_beebot_public
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s QueryAsyncTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAsyncTaskRequest) GoString() string {
	return s.String()
}

func (s *QueryAsyncTaskRequest) SetAgentKey(v string) *QueryAsyncTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *QueryAsyncTaskRequest) SetTaskId(v string) *QueryAsyncTaskRequest {
	s.TaskId = &v
	return s
}

type QueryAsyncTaskResponseBody struct {
	// example:
	//
	// Success
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *QueryAsyncTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 867C4ABE-4381-5BC2-9810-5A5F334F71CF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryAsyncTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAsyncTaskResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAsyncTaskResponseBody) SetCode(v string) *QueryAsyncTaskResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAsyncTaskResponseBody) SetData(v *QueryAsyncTaskResponseBodyData) *QueryAsyncTaskResponseBody {
	s.Data = v
	return s
}

func (s *QueryAsyncTaskResponseBody) SetHttpStatusCode(v int32) *QueryAsyncTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *QueryAsyncTaskResponseBody) SetMessage(v string) *QueryAsyncTaskResponseBody {
	s.Message = &v
	return s
}

func (s *QueryAsyncTaskResponseBody) SetRequestId(v string) *QueryAsyncTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAsyncTaskResponseBody) SetSuccess(v bool) *QueryAsyncTaskResponseBody {
	s.Success = &v
	return s
}

type QueryAsyncTaskResponseBodyData struct {
	// example:
	//
	// 2021-07-25 14:34:33
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 12121
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// MaterialDocumentUpload
	TaskCode *string `json:"TaskCode,omitempty" xml:"TaskCode,omitempty"`
	// example:
	//
	// error
	TaskErrorMessage *string `json:"TaskErrorMessage,omitempty" xml:"TaskErrorMessage,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// {}
	TaskIntermediateResult *string `json:"TaskIntermediateResult,omitempty" xml:"TaskIntermediateResult,omitempty"`
	TaskName               *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// {"fileKey":"oss://default/xxxx/xxxx/xxx","fileName":"xxxxx.doc"}
	TaskParam *string `json:"TaskParam,omitempty" xml:"TaskParam,omitempty"`
	// example:
	//
	// {}
	TaskProgressMessage *string `json:"TaskProgressMessage,omitempty" xml:"TaskProgressMessage,omitempty"`
	// example:
	//
	// {}
	TaskResult *string `json:"TaskResult,omitempty" xml:"TaskResult,omitempty"`
	// example:
	//
	// 3
	TaskRetryCount *string `json:"TaskRetryCount,omitempty" xml:"TaskRetryCount,omitempty"`
	// example:
	//
	// 1
	TaskStatus *int32 `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// example:
	//
	// 2023-04-27 18:07:43
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 12121
	UpdateUser *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s QueryAsyncTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryAsyncTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryAsyncTaskResponseBodyData) SetCreateTime(v string) *QueryAsyncTaskResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetCreateUser(v string) *QueryAsyncTaskResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskCode(v string) *QueryAsyncTaskResponseBodyData {
	s.TaskCode = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskErrorMessage(v string) *QueryAsyncTaskResponseBodyData {
	s.TaskErrorMessage = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskId(v string) *QueryAsyncTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskIntermediateResult(v string) *QueryAsyncTaskResponseBodyData {
	s.TaskIntermediateResult = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskName(v string) *QueryAsyncTaskResponseBodyData {
	s.TaskName = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskParam(v string) *QueryAsyncTaskResponseBodyData {
	s.TaskParam = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskProgressMessage(v string) *QueryAsyncTaskResponseBodyData {
	s.TaskProgressMessage = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskResult(v string) *QueryAsyncTaskResponseBodyData {
	s.TaskResult = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskRetryCount(v string) *QueryAsyncTaskResponseBodyData {
	s.TaskRetryCount = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetTaskStatus(v int32) *QueryAsyncTaskResponseBodyData {
	s.TaskStatus = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetUpdateTime(v string) *QueryAsyncTaskResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *QueryAsyncTaskResponseBodyData) SetUpdateUser(v string) *QueryAsyncTaskResponseBodyData {
	s.UpdateUser = &v
	return s
}

type QueryAsyncTaskResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAsyncTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAsyncTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAsyncTaskResponse) GoString() string {
	return s.String()
}

func (s *QueryAsyncTaskResponse) SetHeaders(v map[string]*string) *QueryAsyncTaskResponse {
	s.Headers = v
	return s
}

func (s *QueryAsyncTaskResponse) SetStatusCode(v int32) *QueryAsyncTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAsyncTaskResponse) SetBody(v *QueryAsyncTaskResponseBody) *QueryAsyncTaskResponse {
	s.Body = v
	return s
}

type RunAbbreviationContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunAbbreviationContentRequest) String() string {
	return tea.Prettify(s)
}

func (s RunAbbreviationContentRequest) GoString() string {
	return s.String()
}

func (s *RunAbbreviationContentRequest) SetContent(v string) *RunAbbreviationContentRequest {
	s.Content = &v
	return s
}

func (s *RunAbbreviationContentRequest) SetWorkspaceId(v string) *RunAbbreviationContentRequest {
	s.WorkspaceId = &v
	return s
}

type RunAbbreviationContentResponseBody struct {
	End     *bool                                      `json:"End,omitempty" xml:"End,omitempty"`
	Header  *RunAbbreviationContentResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunAbbreviationContentResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunAbbreviationContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunAbbreviationContentResponseBody) GoString() string {
	return s.String()
}

func (s *RunAbbreviationContentResponseBody) SetEnd(v bool) *RunAbbreviationContentResponseBody {
	s.End = &v
	return s
}

func (s *RunAbbreviationContentResponseBody) SetHeader(v *RunAbbreviationContentResponseBodyHeader) *RunAbbreviationContentResponseBody {
	s.Header = v
	return s
}

func (s *RunAbbreviationContentResponseBody) SetPayload(v *RunAbbreviationContentResponseBodyPayload) *RunAbbreviationContentResponseBody {
	s.Payload = v
	return s
}

func (s *RunAbbreviationContentResponseBody) SetRequestId(v string) *RunAbbreviationContentResponseBody {
	s.RequestId = &v
	return s
}

type RunAbbreviationContentResponseBodyHeader struct {
	// example:
	//
	// 403
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// Pop sign mismatch, please check.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// result-generated
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 模型生成事件
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 3cd10828-0e42-471c-8f1a-931cde20b035
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 2150451a17191950923411783e2927
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunAbbreviationContentResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunAbbreviationContentResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunAbbreviationContentResponseBodyHeader) SetErrorCode(v string) *RunAbbreviationContentResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunAbbreviationContentResponseBodyHeader) SetErrorMessage(v string) *RunAbbreviationContentResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunAbbreviationContentResponseBodyHeader) SetEvent(v string) *RunAbbreviationContentResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunAbbreviationContentResponseBodyHeader) SetEventInfo(v string) *RunAbbreviationContentResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunAbbreviationContentResponseBodyHeader) SetSessionId(v string) *RunAbbreviationContentResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunAbbreviationContentResponseBodyHeader) SetTaskId(v string) *RunAbbreviationContentResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunAbbreviationContentResponseBodyHeader) SetTraceId(v string) *RunAbbreviationContentResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunAbbreviationContentResponseBodyPayload struct {
	Output *RunAbbreviationContentResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunAbbreviationContentResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunAbbreviationContentResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunAbbreviationContentResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunAbbreviationContentResponseBodyPayload) SetOutput(v *RunAbbreviationContentResponseBodyPayloadOutput) *RunAbbreviationContentResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunAbbreviationContentResponseBodyPayload) SetUsage(v *RunAbbreviationContentResponseBodyPayloadUsage) *RunAbbreviationContentResponseBodyPayload {
	s.Usage = v
	return s
}

type RunAbbreviationContentResponseBodyPayloadOutput struct {
	// example:
	//
	// 这是测试输出
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunAbbreviationContentResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunAbbreviationContentResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunAbbreviationContentResponseBodyPayloadOutput) SetText(v string) *RunAbbreviationContentResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunAbbreviationContentResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunAbbreviationContentResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunAbbreviationContentResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunAbbreviationContentResponseBodyPayloadUsage) SetInputTokens(v int64) *RunAbbreviationContentResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunAbbreviationContentResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunAbbreviationContentResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunAbbreviationContentResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunAbbreviationContentResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunAbbreviationContentResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunAbbreviationContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunAbbreviationContentResponse) String() string {
	return tea.Prettify(s)
}

func (s RunAbbreviationContentResponse) GoString() string {
	return s.String()
}

func (s *RunAbbreviationContentResponse) SetHeaders(v map[string]*string) *RunAbbreviationContentResponse {
	s.Headers = v
	return s
}

func (s *RunAbbreviationContentResponse) SetStatusCode(v int32) *RunAbbreviationContentResponse {
	s.StatusCode = &v
	return s
}

func (s *RunAbbreviationContentResponse) SetBody(v *RunAbbreviationContentResponseBody) *RunAbbreviationContentResponse {
	s.Body = v
	return s
}

type RunBookIntroductionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3YQRatoe8phnpIsIE6z7DTPknhG8Fj
	DocId          *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	KeyPointPrompt *string `json:"KeyPointPrompt,omitempty" xml:"KeyPointPrompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0f56f98a-f2d8-47ec-98e9-1cbdcffa9539
	SessionId     *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	SummaryPrompt *string `json:"SummaryPrompt,omitempty" xml:"SummaryPrompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-vtmox6g2bhq2qv5c
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunBookIntroductionRequest) String() string {
	return tea.Prettify(s)
}

func (s RunBookIntroductionRequest) GoString() string {
	return s.String()
}

func (s *RunBookIntroductionRequest) SetDocId(v string) *RunBookIntroductionRequest {
	s.DocId = &v
	return s
}

func (s *RunBookIntroductionRequest) SetKeyPointPrompt(v string) *RunBookIntroductionRequest {
	s.KeyPointPrompt = &v
	return s
}

func (s *RunBookIntroductionRequest) SetSessionId(v string) *RunBookIntroductionRequest {
	s.SessionId = &v
	return s
}

func (s *RunBookIntroductionRequest) SetSummaryPrompt(v string) *RunBookIntroductionRequest {
	s.SummaryPrompt = &v
	return s
}

func (s *RunBookIntroductionRequest) SetWorkspaceId(v string) *RunBookIntroductionRequest {
	s.WorkspaceId = &v
	return s
}

type RunBookIntroductionResponseBody struct {
	Header  *RunBookIntroductionResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunBookIntroductionResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunBookIntroductionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunBookIntroductionResponseBody) GoString() string {
	return s.String()
}

func (s *RunBookIntroductionResponseBody) SetHeader(v *RunBookIntroductionResponseBodyHeader) *RunBookIntroductionResponseBody {
	s.Header = v
	return s
}

func (s *RunBookIntroductionResponseBody) SetPayload(v *RunBookIntroductionResponseBodyPayload) *RunBookIntroductionResponseBody {
	s.Payload = v
	return s
}

func (s *RunBookIntroductionResponseBody) SetRequestId(v string) *RunBookIntroductionResponseBody {
	s.RequestId = &v
	return s
}

type RunBookIntroductionResponseBodyHeader struct {
	// example:
	//
	// success
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// finished
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 411c4dfa-2168-4379-a902-675d67f453f8
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 46e5c2b5-0877-4f09-bd91-ab0cf314e48b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunBookIntroductionResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunBookIntroductionResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunBookIntroductionResponseBodyHeader) SetErrorCode(v string) *RunBookIntroductionResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunBookIntroductionResponseBodyHeader) SetErrorMessage(v string) *RunBookIntroductionResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunBookIntroductionResponseBodyHeader) SetEvent(v string) *RunBookIntroductionResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunBookIntroductionResponseBodyHeader) SetEventInfo(v string) *RunBookIntroductionResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunBookIntroductionResponseBodyHeader) SetSessionId(v string) *RunBookIntroductionResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunBookIntroductionResponseBodyHeader) SetTaskId(v string) *RunBookIntroductionResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunBookIntroductionResponseBodyHeader) SetTraceId(v string) *RunBookIntroductionResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunBookIntroductionResponseBodyPayload struct {
	Output *RunBookIntroductionResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunBookIntroductionResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunBookIntroductionResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunBookIntroductionResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunBookIntroductionResponseBodyPayload) SetOutput(v *RunBookIntroductionResponseBodyPayloadOutput) *RunBookIntroductionResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunBookIntroductionResponseBodyPayload) SetUsage(v *RunBookIntroductionResponseBodyPayloadUsage) *RunBookIntroductionResponseBodyPayload {
	s.Usage = v
	return s
}

type RunBookIntroductionResponseBodyPayloadOutput struct {
	KeyPoint *string `json:"KeyPoint,omitempty" xml:"KeyPoint,omitempty"`
	Summary  *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s RunBookIntroductionResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunBookIntroductionResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunBookIntroductionResponseBodyPayloadOutput) SetKeyPoint(v string) *RunBookIntroductionResponseBodyPayloadOutput {
	s.KeyPoint = &v
	return s
}

func (s *RunBookIntroductionResponseBodyPayloadOutput) SetSummary(v string) *RunBookIntroductionResponseBodyPayloadOutput {
	s.Summary = &v
	return s
}

type RunBookIntroductionResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunBookIntroductionResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunBookIntroductionResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunBookIntroductionResponseBodyPayloadUsage) SetInputTokens(v int64) *RunBookIntroductionResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunBookIntroductionResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunBookIntroductionResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunBookIntroductionResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunBookIntroductionResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunBookIntroductionResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunBookIntroductionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunBookIntroductionResponse) String() string {
	return tea.Prettify(s)
}

func (s RunBookIntroductionResponse) GoString() string {
	return s.String()
}

func (s *RunBookIntroductionResponse) SetHeaders(v map[string]*string) *RunBookIntroductionResponse {
	s.Headers = v
	return s
}

func (s *RunBookIntroductionResponse) SetStatusCode(v int32) *RunBookIntroductionResponse {
	s.StatusCode = &v
	return s
}

func (s *RunBookIntroductionResponse) SetBody(v *RunBookIntroductionResponseBody) *RunBookIntroductionResponse {
	s.Body = v
	return s
}

type RunBookSmartCardRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 84ufBYEeLMZOjRFo84HJ7ySL3Efr55
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunBookSmartCardRequest) String() string {
	return tea.Prettify(s)
}

func (s RunBookSmartCardRequest) GoString() string {
	return s.String()
}

func (s *RunBookSmartCardRequest) SetDocId(v string) *RunBookSmartCardRequest {
	s.DocId = &v
	return s
}

func (s *RunBookSmartCardRequest) SetSessionId(v string) *RunBookSmartCardRequest {
	s.SessionId = &v
	return s
}

func (s *RunBookSmartCardRequest) SetWorkspaceId(v string) *RunBookSmartCardRequest {
	s.WorkspaceId = &v
	return s
}

type RunBookSmartCardResponseBody struct {
	Header  *RunBookSmartCardResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunBookSmartCardResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunBookSmartCardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunBookSmartCardResponseBody) GoString() string {
	return s.String()
}

func (s *RunBookSmartCardResponseBody) SetHeader(v *RunBookSmartCardResponseBodyHeader) *RunBookSmartCardResponseBody {
	s.Header = v
	return s
}

func (s *RunBookSmartCardResponseBody) SetPayload(v *RunBookSmartCardResponseBodyPayload) *RunBookSmartCardResponseBody {
	s.Payload = v
	return s
}

func (s *RunBookSmartCardResponseBody) SetRequestId(v string) *RunBookSmartCardResponseBody {
	s.RequestId = &v
	return s
}

type RunBookSmartCardResponseBodyHeader struct {
	// example:
	//
	// success
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// finished
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 1a0e898717105546647125853d4f54
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunBookSmartCardResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunBookSmartCardResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunBookSmartCardResponseBodyHeader) SetErrorCode(v string) *RunBookSmartCardResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunBookSmartCardResponseBodyHeader) SetErrorMessage(v string) *RunBookSmartCardResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunBookSmartCardResponseBodyHeader) SetEvent(v string) *RunBookSmartCardResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunBookSmartCardResponseBodyHeader) SetEventInfo(v string) *RunBookSmartCardResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunBookSmartCardResponseBodyHeader) SetSessionId(v string) *RunBookSmartCardResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunBookSmartCardResponseBodyHeader) SetTaskId(v string) *RunBookSmartCardResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunBookSmartCardResponseBodyHeader) SetTraceId(v string) *RunBookSmartCardResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunBookSmartCardResponseBodyPayload struct {
	Output *RunBookSmartCardResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunBookSmartCardResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunBookSmartCardResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunBookSmartCardResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunBookSmartCardResponseBodyPayload) SetOutput(v *RunBookSmartCardResponseBodyPayloadOutput) *RunBookSmartCardResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunBookSmartCardResponseBodyPayload) SetUsage(v *RunBookSmartCardResponseBodyPayloadUsage) *RunBookSmartCardResponseBodyPayload {
	s.Usage = v
	return s
}

type RunBookSmartCardResponseBodyPayloadOutput struct {
	Content *string   `json:"Content,omitempty" xml:"Content,omitempty"`
	Tags    []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s RunBookSmartCardResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunBookSmartCardResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunBookSmartCardResponseBodyPayloadOutput) SetContent(v string) *RunBookSmartCardResponseBodyPayloadOutput {
	s.Content = &v
	return s
}

func (s *RunBookSmartCardResponseBodyPayloadOutput) SetTags(v []*string) *RunBookSmartCardResponseBodyPayloadOutput {
	s.Tags = v
	return s
}

type RunBookSmartCardResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 101
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunBookSmartCardResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunBookSmartCardResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunBookSmartCardResponseBodyPayloadUsage) SetInputTokens(v int64) *RunBookSmartCardResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunBookSmartCardResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunBookSmartCardResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunBookSmartCardResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunBookSmartCardResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunBookSmartCardResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunBookSmartCardResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunBookSmartCardResponse) String() string {
	return tea.Prettify(s)
}

func (s RunBookSmartCardResponse) GoString() string {
	return s.String()
}

func (s *RunBookSmartCardResponse) SetHeaders(v map[string]*string) *RunBookSmartCardResponse {
	s.Headers = v
	return s
}

func (s *RunBookSmartCardResponse) SetStatusCode(v int32) *RunBookSmartCardResponse {
	s.StatusCode = &v
	return s
}

func (s *RunBookSmartCardResponse) SetBody(v *RunBookSmartCardResponseBody) *RunBookSmartCardResponse {
	s.Body = v
	return s
}

type RunCommentGenerationRequest struct {
	// example:
	//
	// true
	AllowEmoji *bool   `json:"AllowEmoji,omitempty" xml:"AllowEmoji,omitempty"`
	ExtraInfo  *string `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	// example:
	//
	// 20
	Length *string `json:"Length,omitempty" xml:"Length,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"short":"50","long":“50”}
	LengthRange map[string]interface{} `json:"LengthRange,omitempty" xml:"LengthRange,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	NumComments *string `json:"NumComments,omitempty" xml:"NumComments,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"positive":"50","negative":"50"}
	Sentiment map[string]interface{} `json:"Sentiment,omitempty" xml:"Sentiment,omitempty"`
	SessionId *string                `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	SourceMaterial *string `json:"SourceMaterial,omitempty" xml:"SourceMaterial,omitempty"`
	Style          *string `json:"Style,omitempty" xml:"Style,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"emotion":"50","opinion":"50"}
	Type map[string]interface{} `json:"Type,omitempty" xml:"Type,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-3kcs1w3lltrtbfkr
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunCommentGenerationRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCommentGenerationRequest) GoString() string {
	return s.String()
}

func (s *RunCommentGenerationRequest) SetAllowEmoji(v bool) *RunCommentGenerationRequest {
	s.AllowEmoji = &v
	return s
}

func (s *RunCommentGenerationRequest) SetExtraInfo(v string) *RunCommentGenerationRequest {
	s.ExtraInfo = &v
	return s
}

func (s *RunCommentGenerationRequest) SetLength(v string) *RunCommentGenerationRequest {
	s.Length = &v
	return s
}

func (s *RunCommentGenerationRequest) SetLengthRange(v map[string]interface{}) *RunCommentGenerationRequest {
	s.LengthRange = v
	return s
}

func (s *RunCommentGenerationRequest) SetNumComments(v string) *RunCommentGenerationRequest {
	s.NumComments = &v
	return s
}

func (s *RunCommentGenerationRequest) SetSentiment(v map[string]interface{}) *RunCommentGenerationRequest {
	s.Sentiment = v
	return s
}

func (s *RunCommentGenerationRequest) SetSessionId(v string) *RunCommentGenerationRequest {
	s.SessionId = &v
	return s
}

func (s *RunCommentGenerationRequest) SetSourceMaterial(v string) *RunCommentGenerationRequest {
	s.SourceMaterial = &v
	return s
}

func (s *RunCommentGenerationRequest) SetStyle(v string) *RunCommentGenerationRequest {
	s.Style = &v
	return s
}

func (s *RunCommentGenerationRequest) SetType(v map[string]interface{}) *RunCommentGenerationRequest {
	s.Type = v
	return s
}

func (s *RunCommentGenerationRequest) SetWorkspaceId(v string) *RunCommentGenerationRequest {
	s.WorkspaceId = &v
	return s
}

type RunCommentGenerationShrinkRequest struct {
	// example:
	//
	// true
	AllowEmoji *bool   `json:"AllowEmoji,omitempty" xml:"AllowEmoji,omitempty"`
	ExtraInfo  *string `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	// example:
	//
	// 20
	Length *string `json:"Length,omitempty" xml:"Length,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"short":"50","long":“50”}
	LengthRangeShrink *string `json:"LengthRange,omitempty" xml:"LengthRange,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	NumComments *string `json:"NumComments,omitempty" xml:"NumComments,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"positive":"50","negative":"50"}
	SentimentShrink *string `json:"Sentiment,omitempty" xml:"Sentiment,omitempty"`
	SessionId       *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	SourceMaterial *string `json:"SourceMaterial,omitempty" xml:"SourceMaterial,omitempty"`
	Style          *string `json:"Style,omitempty" xml:"Style,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"emotion":"50","opinion":"50"}
	TypeShrink *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-3kcs1w3lltrtbfkr
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunCommentGenerationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCommentGenerationShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunCommentGenerationShrinkRequest) SetAllowEmoji(v bool) *RunCommentGenerationShrinkRequest {
	s.AllowEmoji = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetExtraInfo(v string) *RunCommentGenerationShrinkRequest {
	s.ExtraInfo = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetLength(v string) *RunCommentGenerationShrinkRequest {
	s.Length = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetLengthRangeShrink(v string) *RunCommentGenerationShrinkRequest {
	s.LengthRangeShrink = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetNumComments(v string) *RunCommentGenerationShrinkRequest {
	s.NumComments = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetSentimentShrink(v string) *RunCommentGenerationShrinkRequest {
	s.SentimentShrink = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetSessionId(v string) *RunCommentGenerationShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetSourceMaterial(v string) *RunCommentGenerationShrinkRequest {
	s.SourceMaterial = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetStyle(v string) *RunCommentGenerationShrinkRequest {
	s.Style = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetTypeShrink(v string) *RunCommentGenerationShrinkRequest {
	s.TypeShrink = &v
	return s
}

func (s *RunCommentGenerationShrinkRequest) SetWorkspaceId(v string) *RunCommentGenerationShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunCommentGenerationResponseBody struct {
	End     *bool                                    `json:"End,omitempty" xml:"End,omitempty"`
	Header  *RunCommentGenerationResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunCommentGenerationResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunCommentGenerationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunCommentGenerationResponseBody) GoString() string {
	return s.String()
}

func (s *RunCommentGenerationResponseBody) SetEnd(v bool) *RunCommentGenerationResponseBody {
	s.End = &v
	return s
}

func (s *RunCommentGenerationResponseBody) SetHeader(v *RunCommentGenerationResponseBodyHeader) *RunCommentGenerationResponseBody {
	s.Header = v
	return s
}

func (s *RunCommentGenerationResponseBody) SetPayload(v *RunCommentGenerationResponseBodyPayload) *RunCommentGenerationResponseBody {
	s.Payload = v
	return s
}

func (s *RunCommentGenerationResponseBody) SetRequestId(v string) *RunCommentGenerationResponseBody {
	s.RequestId = &v
	return s
}

type RunCommentGenerationResponseBodyHeader struct {
	// example:
	//
	// result-generated
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 0bd58ea2-dc38-45da-ac02-17f05cb9040b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunCommentGenerationResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunCommentGenerationResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunCommentGenerationResponseBodyHeader) SetEvent(v string) *RunCommentGenerationResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunCommentGenerationResponseBodyHeader) SetEventInfo(v string) *RunCommentGenerationResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunCommentGenerationResponseBodyHeader) SetRequestId(v string) *RunCommentGenerationResponseBodyHeader {
	s.RequestId = &v
	return s
}

func (s *RunCommentGenerationResponseBodyHeader) SetSessionId(v string) *RunCommentGenerationResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunCommentGenerationResponseBodyHeader) SetTaskId(v string) *RunCommentGenerationResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunCommentGenerationResponseBodyHeader) SetTraceId(v string) *RunCommentGenerationResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunCommentGenerationResponseBodyPayload struct {
	Output *RunCommentGenerationResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunCommentGenerationResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunCommentGenerationResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunCommentGenerationResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunCommentGenerationResponseBodyPayload) SetOutput(v *RunCommentGenerationResponseBodyPayloadOutput) *RunCommentGenerationResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunCommentGenerationResponseBodyPayload) SetUsage(v *RunCommentGenerationResponseBodyPayloadUsage) *RunCommentGenerationResponseBodyPayload {
	s.Usage = v
	return s
}

type RunCommentGenerationResponseBodyPayloadOutput struct {
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunCommentGenerationResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunCommentGenerationResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunCommentGenerationResponseBodyPayloadOutput) SetText(v string) *RunCommentGenerationResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunCommentGenerationResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 2
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 3
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunCommentGenerationResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunCommentGenerationResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunCommentGenerationResponseBodyPayloadUsage) SetInputTokens(v int64) *RunCommentGenerationResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunCommentGenerationResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunCommentGenerationResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunCommentGenerationResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunCommentGenerationResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunCommentGenerationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunCommentGenerationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunCommentGenerationResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCommentGenerationResponse) GoString() string {
	return s.String()
}

func (s *RunCommentGenerationResponse) SetHeaders(v map[string]*string) *RunCommentGenerationResponse {
	s.Headers = v
	return s
}

func (s *RunCommentGenerationResponse) SetStatusCode(v int32) *RunCommentGenerationResponse {
	s.StatusCode = &v
	return s
}

func (s *RunCommentGenerationResponse) SetBody(v *RunCommentGenerationResponseBody) *RunCommentGenerationResponse {
	s.Body = v
	return s
}

type RunContinueContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunContinueContentRequest) String() string {
	return tea.Prettify(s)
}

func (s RunContinueContentRequest) GoString() string {
	return s.String()
}

func (s *RunContinueContentRequest) SetContent(v string) *RunContinueContentRequest {
	s.Content = &v
	return s
}

func (s *RunContinueContentRequest) SetWorkspaceId(v string) *RunContinueContentRequest {
	s.WorkspaceId = &v
	return s
}

type RunContinueContentResponseBody struct {
	End     *bool                                  `json:"End,omitempty" xml:"End,omitempty"`
	Header  *RunContinueContentResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunContinueContentResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunContinueContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunContinueContentResponseBody) GoString() string {
	return s.String()
}

func (s *RunContinueContentResponseBody) SetEnd(v bool) *RunContinueContentResponseBody {
	s.End = &v
	return s
}

func (s *RunContinueContentResponseBody) SetHeader(v *RunContinueContentResponseBodyHeader) *RunContinueContentResponseBody {
	s.Header = v
	return s
}

func (s *RunContinueContentResponseBody) SetPayload(v *RunContinueContentResponseBodyPayload) *RunContinueContentResponseBody {
	s.Payload = v
	return s
}

func (s *RunContinueContentResponseBody) SetRequestId(v string) *RunContinueContentResponseBody {
	s.RequestId = &v
	return s
}

type RunContinueContentResponseBodyHeader struct {
	// example:
	//
	// 403
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// Pop sign mismatch, please check.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// result-generated
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 模型生成事件
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 3cd10828-0e42-471c-8f1a-931cde20b035
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 2150451a17191950923411783e2927
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunContinueContentResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunContinueContentResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunContinueContentResponseBodyHeader) SetErrorCode(v string) *RunContinueContentResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunContinueContentResponseBodyHeader) SetErrorMessage(v string) *RunContinueContentResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunContinueContentResponseBodyHeader) SetEvent(v string) *RunContinueContentResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunContinueContentResponseBodyHeader) SetEventInfo(v string) *RunContinueContentResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunContinueContentResponseBodyHeader) SetSessionId(v string) *RunContinueContentResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunContinueContentResponseBodyHeader) SetTaskId(v string) *RunContinueContentResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunContinueContentResponseBodyHeader) SetTraceId(v string) *RunContinueContentResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunContinueContentResponseBodyPayload struct {
	Output *RunContinueContentResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunContinueContentResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunContinueContentResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunContinueContentResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunContinueContentResponseBodyPayload) SetOutput(v *RunContinueContentResponseBodyPayloadOutput) *RunContinueContentResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunContinueContentResponseBodyPayload) SetUsage(v *RunContinueContentResponseBodyPayloadUsage) *RunContinueContentResponseBodyPayload {
	s.Usage = v
	return s
}

type RunContinueContentResponseBodyPayloadOutput struct {
	// example:
	//
	// 这是测试输出
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunContinueContentResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunContinueContentResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunContinueContentResponseBodyPayloadOutput) SetText(v string) *RunContinueContentResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunContinueContentResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunContinueContentResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunContinueContentResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunContinueContentResponseBodyPayloadUsage) SetInputTokens(v int64) *RunContinueContentResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunContinueContentResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunContinueContentResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunContinueContentResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunContinueContentResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunContinueContentResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunContinueContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunContinueContentResponse) String() string {
	return tea.Prettify(s)
}

func (s RunContinueContentResponse) GoString() string {
	return s.String()
}

func (s *RunContinueContentResponse) SetHeaders(v map[string]*string) *RunContinueContentResponse {
	s.Headers = v
	return s
}

func (s *RunContinueContentResponse) SetStatusCode(v int32) *RunContinueContentResponse {
	s.StatusCode = &v
	return s
}

func (s *RunContinueContentResponse) SetBody(v *RunContinueContentResponseBody) *RunContinueContentResponse {
	s.Body = v
	return s
}

type RunCustomHotTopicAnalysisRequest struct {
	// example:
	//
	// 模型反问
	AskUser *string `json:"AskUser,omitempty" xml:"AskUser,omitempty"`
	// example:
	//
	// false
	ForceAnalysisExistsTopic *bool `json:"ForceAnalysisExistsTopic,omitempty" xml:"ForceAnalysisExistsTopic,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 用户输入Prompt
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 用户针对模型反问的输入
	UserBack *string `json:"UserBack,omitempty" xml:"UserBack,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunCustomHotTopicAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicAnalysisRequest) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicAnalysisRequest) SetAskUser(v string) *RunCustomHotTopicAnalysisRequest {
	s.AskUser = &v
	return s
}

func (s *RunCustomHotTopicAnalysisRequest) SetForceAnalysisExistsTopic(v bool) *RunCustomHotTopicAnalysisRequest {
	s.ForceAnalysisExistsTopic = &v
	return s
}

func (s *RunCustomHotTopicAnalysisRequest) SetPrompt(v string) *RunCustomHotTopicAnalysisRequest {
	s.Prompt = &v
	return s
}

func (s *RunCustomHotTopicAnalysisRequest) SetSessionId(v string) *RunCustomHotTopicAnalysisRequest {
	s.SessionId = &v
	return s
}

func (s *RunCustomHotTopicAnalysisRequest) SetTaskId(v string) *RunCustomHotTopicAnalysisRequest {
	s.TaskId = &v
	return s
}

func (s *RunCustomHotTopicAnalysisRequest) SetUserBack(v string) *RunCustomHotTopicAnalysisRequest {
	s.UserBack = &v
	return s
}

func (s *RunCustomHotTopicAnalysisRequest) SetWorkspaceId(v string) *RunCustomHotTopicAnalysisRequest {
	s.WorkspaceId = &v
	return s
}

type RunCustomHotTopicAnalysisResponseBody struct {
	Header  *RunCustomHotTopicAnalysisResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunCustomHotTopicAnalysisResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunCustomHotTopicAnalysisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicAnalysisResponseBody) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicAnalysisResponseBody) SetHeader(v *RunCustomHotTopicAnalysisResponseBodyHeader) *RunCustomHotTopicAnalysisResponseBody {
	s.Header = v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBody) SetPayload(v *RunCustomHotTopicAnalysisResponseBodyPayload) *RunCustomHotTopicAnalysisResponseBody {
	s.Payload = v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBody) SetRequestId(v string) *RunCustomHotTopicAnalysisResponseBody {
	s.RequestId = &v
	return s
}

type RunCustomHotTopicAnalysisResponseBodyHeader struct {
	// example:
	//
	// 错误码
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 错误信息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 全链路ID
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunCustomHotTopicAnalysisResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicAnalysisResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicAnalysisResponseBodyHeader) SetErrorCode(v string) *RunCustomHotTopicAnalysisResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyHeader) SetErrorMessage(v string) *RunCustomHotTopicAnalysisResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyHeader) SetEvent(v string) *RunCustomHotTopicAnalysisResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyHeader) SetOriginSessionId(v string) *RunCustomHotTopicAnalysisResponseBodyHeader {
	s.OriginSessionId = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyHeader) SetSessionId(v string) *RunCustomHotTopicAnalysisResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyHeader) SetTaskId(v string) *RunCustomHotTopicAnalysisResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyHeader) SetTraceId(v string) *RunCustomHotTopicAnalysisResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunCustomHotTopicAnalysisResponseBodyPayload struct {
	Output *RunCustomHotTopicAnalysisResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunCustomHotTopicAnalysisResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunCustomHotTopicAnalysisResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicAnalysisResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayload) SetOutput(v *RunCustomHotTopicAnalysisResponseBodyPayloadOutput) *RunCustomHotTopicAnalysisResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayload) SetUsage(v *RunCustomHotTopicAnalysisResponseBodyPayloadUsage) *RunCustomHotTopicAnalysisResponseBodyPayload {
	s.Usage = v
	return s
}

type RunCustomHotTopicAnalysisResponseBodyPayloadOutput struct {
	Articles []*RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles `json:"Articles,omitempty" xml:"Articles,omitempty" type:"Repeated"`
	AskUser  []*string                                                     `json:"AskUser,omitempty" xml:"AskUser,omitempty" type:"Repeated"`
	// example:
	//
	// 异步任务ID
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	// example:
	//
	// 自定义选题视角
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// 大模型改变世界
	SearchQuery *string `json:"SearchQuery,omitempty" xml:"SearchQuery,omitempty"`
	// example:
	//
	// 文本生成结果
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 话题ID
	TopicId *string `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s RunCustomHotTopicAnalysisResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicAnalysisResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutput) SetArticles(v []*RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) *RunCustomHotTopicAnalysisResponseBodyPayloadOutput {
	s.Articles = v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutput) SetAskUser(v []*string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutput {
	s.AskUser = v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutput) SetAsyncTaskId(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutput {
	s.AsyncTaskId = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutput) SetAttitude(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutput {
	s.Attitude = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutput) SetSearchQuery(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutput {
	s.SearchQuery = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutput) SetText(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutput) SetTopicId(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutput {
	s.TopicId = &v
	return s
}

type RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文档-自定义的唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// a2103fcfbd5441f1991c72f8834833e3
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2024-08-27 14:50:47
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 央视网
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标签
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetAuthor(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.Author = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetContent(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.Content = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetDocId(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.DocId = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetDocUuid(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.DocUuid = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetPubTime(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.PubTime = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetSource(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.Source = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetSummary(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.Summary = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetTag(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.Tag = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetTitle(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.Title = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles) SetUrl(v string) *RunCustomHotTopicAnalysisResponseBodyPayloadOutputArticles {
	s.Url = &v
	return s
}

type RunCustomHotTopicAnalysisResponseBodyPayloadUsage struct {
	// example:
	//
	// 60
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 13
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 73
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunCustomHotTopicAnalysisResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicAnalysisResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadUsage) SetInputTokens(v int64) *RunCustomHotTopicAnalysisResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunCustomHotTopicAnalysisResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunCustomHotTopicAnalysisResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunCustomHotTopicAnalysisResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunCustomHotTopicAnalysisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunCustomHotTopicAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicAnalysisResponse) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicAnalysisResponse) SetHeaders(v map[string]*string) *RunCustomHotTopicAnalysisResponse {
	s.Headers = v
	return s
}

func (s *RunCustomHotTopicAnalysisResponse) SetStatusCode(v int32) *RunCustomHotTopicAnalysisResponse {
	s.StatusCode = &v
	return s
}

func (s *RunCustomHotTopicAnalysisResponse) SetBody(v *RunCustomHotTopicAnalysisResponseBody) *RunCustomHotTopicAnalysisResponse {
	s.Body = v
	return s
}

type RunCustomHotTopicViewPointAnalysisRequest struct {
	// example:
	//
	// 模型反问
	AskUser *string `json:"AskUser,omitempty" xml:"AskUser,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 自定义选题视角的Prompt
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 改写后的Query
	SearchQuery *string `json:"SearchQuery,omitempty" xml:"SearchQuery,omitempty"`
	// example:
	//
	// true
	SkipAskUser *bool `json:"SkipAskUser,omitempty" xml:"SkipAskUser,omitempty"`
	// example:
	//
	// 热点主题
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// example:
	//
	// 热点主题ID
	TopicId *string `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
	// example:
	//
	// 热点主题来源
	TopicSource *string `json:"TopicSource,omitempty" xml:"TopicSource,omitempty"`
	// example:
	//
	// 热点主题版本
	TopicVersion *string `json:"TopicVersion,omitempty" xml:"TopicVersion,omitempty"`
	// example:
	//
	// 用户反馈
	UserBack *string `json:"UserBack,omitempty" xml:"UserBack,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunCustomHotTopicViewPointAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicViewPointAnalysisRequest) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetAskUser(v string) *RunCustomHotTopicViewPointAnalysisRequest {
	s.AskUser = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetPrompt(v string) *RunCustomHotTopicViewPointAnalysisRequest {
	s.Prompt = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetSearchQuery(v string) *RunCustomHotTopicViewPointAnalysisRequest {
	s.SearchQuery = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetSkipAskUser(v bool) *RunCustomHotTopicViewPointAnalysisRequest {
	s.SkipAskUser = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetTopic(v string) *RunCustomHotTopicViewPointAnalysisRequest {
	s.Topic = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetTopicId(v string) *RunCustomHotTopicViewPointAnalysisRequest {
	s.TopicId = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetTopicSource(v string) *RunCustomHotTopicViewPointAnalysisRequest {
	s.TopicSource = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetTopicVersion(v string) *RunCustomHotTopicViewPointAnalysisRequest {
	s.TopicVersion = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetUserBack(v string) *RunCustomHotTopicViewPointAnalysisRequest {
	s.UserBack = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisRequest) SetWorkspaceId(v string) *RunCustomHotTopicViewPointAnalysisRequest {
	s.WorkspaceId = &v
	return s
}

type RunCustomHotTopicViewPointAnalysisResponseBody struct {
	Header  *RunCustomHotTopicViewPointAnalysisResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunCustomHotTopicViewPointAnalysisResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunCustomHotTopicViewPointAnalysisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicViewPointAnalysisResponseBody) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBody) SetHeader(v *RunCustomHotTopicViewPointAnalysisResponseBodyHeader) *RunCustomHotTopicViewPointAnalysisResponseBody {
	s.Header = v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBody) SetPayload(v *RunCustomHotTopicViewPointAnalysisResponseBodyPayload) *RunCustomHotTopicViewPointAnalysisResponseBody {
	s.Payload = v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBody) SetRequestId(v string) *RunCustomHotTopicViewPointAnalysisResponseBody {
	s.RequestId = &v
	return s
}

type RunCustomHotTopicViewPointAnalysisResponseBodyHeader struct {
	// example:
	//
	// 错误码
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 错误信息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 全链路ID
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunCustomHotTopicViewPointAnalysisResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicViewPointAnalysisResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyHeader) SetErrorCode(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyHeader) SetErrorMessage(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyHeader) SetEvent(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyHeader) SetOriginSessionId(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyHeader {
	s.OriginSessionId = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyHeader) SetSessionId(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyHeader) SetTaskId(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyHeader) SetTraceId(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunCustomHotTopicViewPointAnalysisResponseBodyPayload struct {
	Output *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunCustomHotTopicViewPointAnalysisResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicViewPointAnalysisResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayload) SetOutput(v *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput) *RunCustomHotTopicViewPointAnalysisResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayload) SetUsage(v *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage) *RunCustomHotTopicViewPointAnalysisResponseBodyPayload {
	s.Usage = v
	return s
}

type RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput struct {
	AskUser []*string `json:"AskUser,omitempty" xml:"AskUser,omitempty" type:"Repeated"`
	// example:
	//
	// 异步任务ID
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	// example:
	//
	// 模型生成的自定义选题视角的观点
	Attitude *string `json:"Attitude,omitempty" xml:"Attitude,omitempty"`
	// example:
	//
	// xxxxxx
	CustomViewPointId *string `json:"CustomViewPointId,omitempty" xml:"CustomViewPointId,omitempty"`
	// example:
	//
	// 文本生成结果
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 话题ID
	TopicId *string `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput) SetAskUser(v []*string) *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput {
	s.AskUser = v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput) SetAsyncTaskId(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput {
	s.AsyncTaskId = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput) SetAttitude(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput {
	s.Attitude = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput) SetCustomViewPointId(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput {
	s.CustomViewPointId = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput) SetText(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput) SetTopicId(v string) *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadOutput {
	s.TopicId = &v
	return s
}

type RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage struct {
	// example:
	//
	// 51
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 79
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 130
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage) SetInputTokens(v int64) *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunCustomHotTopicViewPointAnalysisResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunCustomHotTopicViewPointAnalysisResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunCustomHotTopicViewPointAnalysisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunCustomHotTopicViewPointAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCustomHotTopicViewPointAnalysisResponse) GoString() string {
	return s.String()
}

func (s *RunCustomHotTopicViewPointAnalysisResponse) SetHeaders(v map[string]*string) *RunCustomHotTopicViewPointAnalysisResponse {
	s.Headers = v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponse) SetStatusCode(v int32) *RunCustomHotTopicViewPointAnalysisResponse {
	s.StatusCode = &v
	return s
}

func (s *RunCustomHotTopicViewPointAnalysisResponse) SetBody(v *RunCustomHotTopicViewPointAnalysisResponseBody) *RunCustomHotTopicViewPointAnalysisResponse {
	s.Body = v
	return s
}

type RunDocBrainmapRequest struct {
	CleanCache *bool `json:"CleanCache,omitempty" xml:"CleanCache,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 12345
	DocId      *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	NodeNumber *int32  `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	Prompt     *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId  *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	WordNumber *int32  `json:"WordNumber,omitempty" xml:"WordNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId      *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
	ReferenceContent *string `json:"referenceContent,omitempty" xml:"referenceContent,omitempty"`
}

func (s RunDocBrainmapRequest) String() string {
	return tea.Prettify(s)
}

func (s RunDocBrainmapRequest) GoString() string {
	return s.String()
}

func (s *RunDocBrainmapRequest) SetCleanCache(v bool) *RunDocBrainmapRequest {
	s.CleanCache = &v
	return s
}

func (s *RunDocBrainmapRequest) SetDocId(v string) *RunDocBrainmapRequest {
	s.DocId = &v
	return s
}

func (s *RunDocBrainmapRequest) SetNodeNumber(v int32) *RunDocBrainmapRequest {
	s.NodeNumber = &v
	return s
}

func (s *RunDocBrainmapRequest) SetPrompt(v string) *RunDocBrainmapRequest {
	s.Prompt = &v
	return s
}

func (s *RunDocBrainmapRequest) SetSessionId(v string) *RunDocBrainmapRequest {
	s.SessionId = &v
	return s
}

func (s *RunDocBrainmapRequest) SetWordNumber(v int32) *RunDocBrainmapRequest {
	s.WordNumber = &v
	return s
}

func (s *RunDocBrainmapRequest) SetWorkspaceId(v string) *RunDocBrainmapRequest {
	s.WorkspaceId = &v
	return s
}

func (s *RunDocBrainmapRequest) SetReferenceContent(v string) *RunDocBrainmapRequest {
	s.ReferenceContent = &v
	return s
}

type RunDocBrainmapResponseBody struct {
	Header  *RunDocBrainmapResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunDocBrainmapResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunDocBrainmapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunDocBrainmapResponseBody) GoString() string {
	return s.String()
}

func (s *RunDocBrainmapResponseBody) SetHeader(v *RunDocBrainmapResponseBodyHeader) *RunDocBrainmapResponseBody {
	s.Header = v
	return s
}

func (s *RunDocBrainmapResponseBody) SetPayload(v *RunDocBrainmapResponseBodyPayload) *RunDocBrainmapResponseBody {
	s.Payload = v
	return s
}

func (s *RunDocBrainmapResponseBody) SetRequestId(v string) *RunDocBrainmapResponseBody {
	s.RequestId = &v
	return s
}

type RunDocBrainmapResponseBodyHeader struct {
	// example:
	//
	// success
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-failed
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 07181f55-2311-48af-8048-132a77dee020
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 161816
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 6427cdf4-2ffe-4d05-b0ef-c4adceea90f4
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunDocBrainmapResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunDocBrainmapResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunDocBrainmapResponseBodyHeader) SetErrorCode(v string) *RunDocBrainmapResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunDocBrainmapResponseBodyHeader) SetErrorMessage(v string) *RunDocBrainmapResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunDocBrainmapResponseBodyHeader) SetEvent(v string) *RunDocBrainmapResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunDocBrainmapResponseBodyHeader) SetEventInfo(v string) *RunDocBrainmapResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunDocBrainmapResponseBodyHeader) SetSessionId(v string) *RunDocBrainmapResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunDocBrainmapResponseBodyHeader) SetTaskId(v string) *RunDocBrainmapResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunDocBrainmapResponseBodyHeader) SetTraceId(v string) *RunDocBrainmapResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunDocBrainmapResponseBodyPayload struct {
	Output *RunDocBrainmapResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunDocBrainmapResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunDocBrainmapResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunDocBrainmapResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunDocBrainmapResponseBodyPayload) SetOutput(v *RunDocBrainmapResponseBodyPayloadOutput) *RunDocBrainmapResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunDocBrainmapResponseBodyPayload) SetUsage(v *RunDocBrainmapResponseBodyPayloadUsage) *RunDocBrainmapResponseBodyPayload {
	s.Usage = v
	return s
}

type RunDocBrainmapResponseBodyPayloadOutput struct {
	// example:
	//
	// {"xxxx":"xxx"}
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s RunDocBrainmapResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunDocBrainmapResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunDocBrainmapResponseBodyPayloadOutput) SetContent(v string) *RunDocBrainmapResponseBodyPayloadOutput {
	s.Content = &v
	return s
}

type RunDocBrainmapResponseBodyPayloadUsage struct {
	// example:
	//
	// 65
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 165
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunDocBrainmapResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunDocBrainmapResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunDocBrainmapResponseBodyPayloadUsage) SetInputTokens(v int64) *RunDocBrainmapResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunDocBrainmapResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunDocBrainmapResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunDocBrainmapResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunDocBrainmapResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunDocBrainmapResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunDocBrainmapResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunDocBrainmapResponse) String() string {
	return tea.Prettify(s)
}

func (s RunDocBrainmapResponse) GoString() string {
	return s.String()
}

func (s *RunDocBrainmapResponse) SetHeaders(v map[string]*string) *RunDocBrainmapResponse {
	s.Headers = v
	return s
}

func (s *RunDocBrainmapResponse) SetStatusCode(v int32) *RunDocBrainmapResponse {
	s.StatusCode = &v
	return s
}

func (s *RunDocBrainmapResponse) SetBody(v *RunDocBrainmapResponseBody) *RunDocBrainmapResponse {
	s.Body = v
	return s
}

type RunDocIntroductionRequest struct {
	CleanCache *bool `json:"CleanCache,omitempty" xml:"CleanCache,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 12345
	DocId              *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	IntroductionPrompt *string `json:"IntroductionPrompt,omitempty" xml:"IntroductionPrompt,omitempty"`
	KeyPointPrompt     *string `json:"KeyPointPrompt,omitempty" xml:"KeyPointPrompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// a3b5eb35-6b28-4cf9-ac09-1dec25ab4df6
	SessionId     *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	SummaryPrompt *string `json:"SummaryPrompt,omitempty" xml:"SummaryPrompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId      *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
	ReferenceContent *string `json:"referenceContent,omitempty" xml:"referenceContent,omitempty"`
}

func (s RunDocIntroductionRequest) String() string {
	return tea.Prettify(s)
}

func (s RunDocIntroductionRequest) GoString() string {
	return s.String()
}

func (s *RunDocIntroductionRequest) SetCleanCache(v bool) *RunDocIntroductionRequest {
	s.CleanCache = &v
	return s
}

func (s *RunDocIntroductionRequest) SetDocId(v string) *RunDocIntroductionRequest {
	s.DocId = &v
	return s
}

func (s *RunDocIntroductionRequest) SetIntroductionPrompt(v string) *RunDocIntroductionRequest {
	s.IntroductionPrompt = &v
	return s
}

func (s *RunDocIntroductionRequest) SetKeyPointPrompt(v string) *RunDocIntroductionRequest {
	s.KeyPointPrompt = &v
	return s
}

func (s *RunDocIntroductionRequest) SetSessionId(v string) *RunDocIntroductionRequest {
	s.SessionId = &v
	return s
}

func (s *RunDocIntroductionRequest) SetSummaryPrompt(v string) *RunDocIntroductionRequest {
	s.SummaryPrompt = &v
	return s
}

func (s *RunDocIntroductionRequest) SetWorkspaceId(v string) *RunDocIntroductionRequest {
	s.WorkspaceId = &v
	return s
}

func (s *RunDocIntroductionRequest) SetReferenceContent(v string) *RunDocIntroductionRequest {
	s.ReferenceContent = &v
	return s
}

type RunDocIntroductionResponseBody struct {
	Header  *RunDocIntroductionResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunDocIntroductionResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// C9B5BEA6-E8C4-5861-BE37-D906D516510E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunDocIntroductionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunDocIntroductionResponseBody) GoString() string {
	return s.String()
}

func (s *RunDocIntroductionResponseBody) SetHeader(v *RunDocIntroductionResponseBodyHeader) *RunDocIntroductionResponseBody {
	s.Header = v
	return s
}

func (s *RunDocIntroductionResponseBody) SetPayload(v *RunDocIntroductionResponseBodyPayload) *RunDocIntroductionResponseBody {
	s.Payload = v
	return s
}

func (s *RunDocIntroductionResponseBody) SetRequestId(v string) *RunDocIntroductionResponseBody {
	s.RequestId = &v
	return s
}

type RunDocIntroductionResponseBodyHeader struct {
	// example:
	//
	// success
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 20247a52-23e2-46fb-943d-309cdee2bc6d
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 8a9cecb7-6d20-32db-8823-5882c217b647
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 0bd58ea2-dc38-45da-ac02-17f05cb9040b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunDocIntroductionResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunDocIntroductionResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunDocIntroductionResponseBodyHeader) SetErrorCode(v string) *RunDocIntroductionResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunDocIntroductionResponseBodyHeader) SetErrorMessage(v string) *RunDocIntroductionResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunDocIntroductionResponseBodyHeader) SetEvent(v string) *RunDocIntroductionResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunDocIntroductionResponseBodyHeader) SetEventInfo(v string) *RunDocIntroductionResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunDocIntroductionResponseBodyHeader) SetSessionId(v string) *RunDocIntroductionResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunDocIntroductionResponseBodyHeader) SetTaskId(v string) *RunDocIntroductionResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunDocIntroductionResponseBodyHeader) SetTraceId(v string) *RunDocIntroductionResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunDocIntroductionResponseBodyPayload struct {
	Output *RunDocIntroductionResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunDocIntroductionResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunDocIntroductionResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunDocIntroductionResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunDocIntroductionResponseBodyPayload) SetOutput(v *RunDocIntroductionResponseBodyPayloadOutput) *RunDocIntroductionResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunDocIntroductionResponseBodyPayload) SetUsage(v *RunDocIntroductionResponseBodyPayloadUsage) *RunDocIntroductionResponseBodyPayload {
	s.Usage = v
	return s
}

type RunDocIntroductionResponseBodyPayloadOutput struct {
	Introductions []*RunDocIntroductionResponseBodyPayloadOutputIntroductions `json:"Introductions,omitempty" xml:"Introductions,omitempty" type:"Repeated"`
	KeyPoint      *string                                                     `json:"KeyPoint,omitempty" xml:"KeyPoint,omitempty"`
	Summary       *string                                                     `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s RunDocIntroductionResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunDocIntroductionResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunDocIntroductionResponseBodyPayloadOutput) SetIntroductions(v []*RunDocIntroductionResponseBodyPayloadOutputIntroductions) *RunDocIntroductionResponseBodyPayloadOutput {
	s.Introductions = v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutput) SetKeyPoint(v string) *RunDocIntroductionResponseBodyPayloadOutput {
	s.KeyPoint = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutput) SetSummary(v string) *RunDocIntroductionResponseBodyPayloadOutput {
	s.Summary = &v
	return s
}

type RunDocIntroductionResponseBodyPayloadOutputIntroductions struct {
	Blocks []*RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks `json:"Blocks,omitempty" xml:"Blocks,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	StartPageId *int32  `json:"StartPageId,omitempty" xml:"StartPageId,omitempty"`
	Summary     *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	Title       *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s RunDocIntroductionResponseBodyPayloadOutputIntroductions) String() string {
	return tea.Prettify(s)
}

func (s RunDocIntroductionResponseBodyPayloadOutputIntroductions) GoString() string {
	return s.String()
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductions) SetBlocks(v []*RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) *RunDocIntroductionResponseBodyPayloadOutputIntroductions {
	s.Blocks = v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductions) SetStartPageId(v int32) *RunDocIntroductionResponseBodyPayloadOutputIntroductions {
	s.StartPageId = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductions) SetSummary(v string) *RunDocIntroductionResponseBodyPayloadOutputIntroductions {
	s.Summary = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductions) SetTitle(v string) *RunDocIntroductionResponseBodyPayloadOutputIntroductions {
	s.Title = &v
	return s
}

type RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks struct {
	// example:
	//
	// 0
	BeginTime *int64 `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	// example:
	//
	// 1200
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 600
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 10
	PageId *int32 `json:"PageId,omitempty" xml:"PageId,omitempty"`
	// example:
	//
	// 600
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
	// example:
	//
	// 10
	X *int32 `json:"X,omitempty" xml:"X,omitempty"`
	// example:
	//
	// 10
	Y *int32 `json:"Y,omitempty" xml:"Y,omitempty"`
}

func (s RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) String() string {
	return tea.Prettify(s)
}

func (s RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) GoString() string {
	return s.String()
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) SetBeginTime(v int64) *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks {
	s.BeginTime = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) SetEndTime(v int64) *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks {
	s.EndTime = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) SetHeight(v int32) *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks {
	s.Height = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) SetPageId(v int32) *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks {
	s.PageId = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) SetWidth(v int32) *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks {
	s.Width = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) SetX(v int32) *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks {
	s.X = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks) SetY(v int32) *RunDocIntroductionResponseBodyPayloadOutputIntroductionsBlocks {
	s.Y = &v
	return s
}

type RunDocIntroductionResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunDocIntroductionResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunDocIntroductionResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunDocIntroductionResponseBodyPayloadUsage) SetInputTokens(v int64) *RunDocIntroductionResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunDocIntroductionResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunDocIntroductionResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunDocIntroductionResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunDocIntroductionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunDocIntroductionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunDocIntroductionResponse) String() string {
	return tea.Prettify(s)
}

func (s RunDocIntroductionResponse) GoString() string {
	return s.String()
}

func (s *RunDocIntroductionResponse) SetHeaders(v map[string]*string) *RunDocIntroductionResponse {
	s.Headers = v
	return s
}

func (s *RunDocIntroductionResponse) SetStatusCode(v int32) *RunDocIntroductionResponse {
	s.StatusCode = &v
	return s
}

func (s *RunDocIntroductionResponse) SetBody(v *RunDocIntroductionResponseBody) *RunDocIntroductionResponse {
	s.Body = v
	return s
}

type RunDocQaRequest struct {
	CategoryIds          []*string                              `json:"CategoryIds,omitempty" xml:"CategoryIds,omitempty" type:"Repeated"`
	ConversationContexts []*RunDocQaRequestConversationContexts `json:"ConversationContexts,omitempty" xml:"ConversationContexts,omitempty" type:"Repeated"`
	DocIds               []*string                              `json:"DocIds,omitempty" xml:"DocIds,omitempty" type:"Repeated"`
	// This parameter is required.
	Query            *string `json:"Query,omitempty" xml:"Query,omitempty"`
	ReferenceContent *string `json:"ReferenceContent,omitempty" xml:"ReferenceContent,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// fromWeb
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// f486c4e2-b773-4d65-88f8-2ba540610456
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-dswd4003ny4gh9rw
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunDocQaRequest) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaRequest) GoString() string {
	return s.String()
}

func (s *RunDocQaRequest) SetCategoryIds(v []*string) *RunDocQaRequest {
	s.CategoryIds = v
	return s
}

func (s *RunDocQaRequest) SetConversationContexts(v []*RunDocQaRequestConversationContexts) *RunDocQaRequest {
	s.ConversationContexts = v
	return s
}

func (s *RunDocQaRequest) SetDocIds(v []*string) *RunDocQaRequest {
	s.DocIds = v
	return s
}

func (s *RunDocQaRequest) SetQuery(v string) *RunDocQaRequest {
	s.Query = &v
	return s
}

func (s *RunDocQaRequest) SetReferenceContent(v string) *RunDocQaRequest {
	s.ReferenceContent = &v
	return s
}

func (s *RunDocQaRequest) SetSearchSource(v string) *RunDocQaRequest {
	s.SearchSource = &v
	return s
}

func (s *RunDocQaRequest) SetSessionId(v string) *RunDocQaRequest {
	s.SessionId = &v
	return s
}

func (s *RunDocQaRequest) SetWorkspaceId(v string) *RunDocQaRequest {
	s.WorkspaceId = &v
	return s
}

type RunDocQaRequestConversationContexts struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// user
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s RunDocQaRequestConversationContexts) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaRequestConversationContexts) GoString() string {
	return s.String()
}

func (s *RunDocQaRequestConversationContexts) SetContent(v string) *RunDocQaRequestConversationContexts {
	s.Content = &v
	return s
}

func (s *RunDocQaRequestConversationContexts) SetRole(v string) *RunDocQaRequestConversationContexts {
	s.Role = &v
	return s
}

type RunDocQaShrinkRequest struct {
	CategoryIdsShrink          *string `json:"CategoryIds,omitempty" xml:"CategoryIds,omitempty"`
	ConversationContextsShrink *string `json:"ConversationContexts,omitempty" xml:"ConversationContexts,omitempty"`
	DocIdsShrink               *string `json:"DocIds,omitempty" xml:"DocIds,omitempty"`
	// This parameter is required.
	Query            *string `json:"Query,omitempty" xml:"Query,omitempty"`
	ReferenceContent *string `json:"ReferenceContent,omitempty" xml:"ReferenceContent,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// fromWeb
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// f486c4e2-b773-4d65-88f8-2ba540610456
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-dswd4003ny4gh9rw
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunDocQaShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunDocQaShrinkRequest) SetCategoryIdsShrink(v string) *RunDocQaShrinkRequest {
	s.CategoryIdsShrink = &v
	return s
}

func (s *RunDocQaShrinkRequest) SetConversationContextsShrink(v string) *RunDocQaShrinkRequest {
	s.ConversationContextsShrink = &v
	return s
}

func (s *RunDocQaShrinkRequest) SetDocIdsShrink(v string) *RunDocQaShrinkRequest {
	s.DocIdsShrink = &v
	return s
}

func (s *RunDocQaShrinkRequest) SetQuery(v string) *RunDocQaShrinkRequest {
	s.Query = &v
	return s
}

func (s *RunDocQaShrinkRequest) SetReferenceContent(v string) *RunDocQaShrinkRequest {
	s.ReferenceContent = &v
	return s
}

func (s *RunDocQaShrinkRequest) SetSearchSource(v string) *RunDocQaShrinkRequest {
	s.SearchSource = &v
	return s
}

func (s *RunDocQaShrinkRequest) SetSessionId(v string) *RunDocQaShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *RunDocQaShrinkRequest) SetWorkspaceId(v string) *RunDocQaShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunDocQaResponseBody struct {
	Header  *RunDocQaResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunDocQaResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunDocQaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponseBody) GoString() string {
	return s.String()
}

func (s *RunDocQaResponseBody) SetHeader(v *RunDocQaResponseBodyHeader) *RunDocQaResponseBody {
	s.Header = v
	return s
}

func (s *RunDocQaResponseBody) SetPayload(v *RunDocQaResponseBodyPayload) *RunDocQaResponseBody {
	s.Payload = v
	return s
}

func (s *RunDocQaResponseBody) SetRequestId(v string) *RunDocQaResponseBody {
	s.RequestId = &v
	return s
}

type RunDocQaResponseBodyHeader struct {
	// example:
	//
	// success
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// f5517ee8-dbec-4dc8-bd0a-af084b5e3db1
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 46e5c2b5-0877-4f09-bd91-ab0cf314e48b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunDocQaResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunDocQaResponseBodyHeader) SetErrorCode(v string) *RunDocQaResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunDocQaResponseBodyHeader) SetErrorMessage(v string) *RunDocQaResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunDocQaResponseBodyHeader) SetEvent(v string) *RunDocQaResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunDocQaResponseBodyHeader) SetEventInfo(v string) *RunDocQaResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunDocQaResponseBodyHeader) SetSessionId(v string) *RunDocQaResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunDocQaResponseBodyHeader) SetTaskId(v string) *RunDocQaResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunDocQaResponseBodyHeader) SetTraceId(v string) *RunDocQaResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunDocQaResponseBodyPayload struct {
	Output *RunDocQaResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunDocQaResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunDocQaResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunDocQaResponseBodyPayload) SetOutput(v *RunDocQaResponseBodyPayloadOutput) *RunDocQaResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunDocQaResponseBodyPayload) SetUsage(v *RunDocQaResponseBodyPayloadUsage) *RunDocQaResponseBodyPayload {
	s.Usage = v
	return s
}

type RunDocQaResponseBodyPayloadOutput struct {
	Content          *string `json:"Content,omitempty" xml:"Content,omitempty"`
	InterveneContent *string `json:"InterveneContent,omitempty" xml:"InterveneContent,omitempty"`
	// example:
	//
	// false
	IsReject     *bool                                            `json:"IsReject,omitempty" xml:"IsReject,omitempty"`
	MediaUrlList []*RunDocQaResponseBodyPayloadOutputMediaUrlList `json:"MediaUrlList,omitempty" xml:"MediaUrlList,omitempty" type:"Repeated"`
	Recommends   []*RunDocQaResponseBodyPayloadOutputRecommends   `json:"Recommends,omitempty" xml:"Recommends,omitempty" type:"Repeated"`
	References   []*RunDocQaResponseBodyPayloadOutputReferences   `json:"References,omitempty" xml:"References,omitempty" type:"Repeated"`
}

func (s RunDocQaResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunDocQaResponseBodyPayloadOutput) SetContent(v string) *RunDocQaResponseBodyPayloadOutput {
	s.Content = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutput) SetInterveneContent(v string) *RunDocQaResponseBodyPayloadOutput {
	s.InterveneContent = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutput) SetIsReject(v bool) *RunDocQaResponseBodyPayloadOutput {
	s.IsReject = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutput) SetMediaUrlList(v []*RunDocQaResponseBodyPayloadOutputMediaUrlList) *RunDocQaResponseBodyPayloadOutput {
	s.MediaUrlList = v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutput) SetRecommends(v []*RunDocQaResponseBodyPayloadOutputRecommends) *RunDocQaResponseBodyPayloadOutput {
	s.Recommends = v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutput) SetReferences(v []*RunDocQaResponseBodyPayloadOutputReferences) *RunDocQaResponseBodyPayloadOutput {
	s.References = v
	return s
}

type RunDocQaResponseBodyPayloadOutputMediaUrlList struct {
	ClipInfos []*RunDocQaResponseBodyPayloadOutputMediaUrlListClipInfos `json:"ClipInfos,omitempty" xml:"ClipInfos,omitempty" type:"Repeated"`
	// example:
	//
	// https://gw.alicdn.com/imgextra/i3/2775676850/O1CN01kdeffE20TM0E7wvpq_!!2775676850.jpg_q60.jpg
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s RunDocQaResponseBodyPayloadOutputMediaUrlList) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponseBodyPayloadOutputMediaUrlList) GoString() string {
	return s.String()
}

func (s *RunDocQaResponseBodyPayloadOutputMediaUrlList) SetClipInfos(v []*RunDocQaResponseBodyPayloadOutputMediaUrlListClipInfos) *RunDocQaResponseBodyPayloadOutputMediaUrlList {
	s.ClipInfos = v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutputMediaUrlList) SetFileUrl(v string) *RunDocQaResponseBodyPayloadOutputMediaUrlList {
	s.FileUrl = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutputMediaUrlList) SetMediaType(v string) *RunDocQaResponseBodyPayloadOutputMediaUrlList {
	s.MediaType = &v
	return s
}

type RunDocQaResponseBodyPayloadOutputMediaUrlListClipInfos struct {
	// example:
	//
	// 0
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 30
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s RunDocQaResponseBodyPayloadOutputMediaUrlListClipInfos) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponseBodyPayloadOutputMediaUrlListClipInfos) GoString() string {
	return s.String()
}

func (s *RunDocQaResponseBodyPayloadOutputMediaUrlListClipInfos) SetFrom(v float64) *RunDocQaResponseBodyPayloadOutputMediaUrlListClipInfos {
	s.From = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutputMediaUrlListClipInfos) SetTo(v float64) *RunDocQaResponseBodyPayloadOutputMediaUrlListClipInfos {
	s.To = &v
	return s
}

type RunDocQaResponseBodyPayloadOutputRecommends struct {
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	Url   *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunDocQaResponseBodyPayloadOutputRecommends) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponseBodyPayloadOutputRecommends) GoString() string {
	return s.String()
}

func (s *RunDocQaResponseBodyPayloadOutputRecommends) SetTitle(v string) *RunDocQaResponseBodyPayloadOutputRecommends {
	s.Title = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutputRecommends) SetUrl(v string) *RunDocQaResponseBodyPayloadOutputRecommends {
	s.Url = &v
	return s
}

type RunDocQaResponseBodyPayloadOutputReferences struct {
	// example:
	//
	// 2024-10-08 18:00
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	Source  *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 123456
	SourceDocId *string `json:"SourceDocId,omitempty" xml:"SourceDocId,omitempty"`
	Title       *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://xxxxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunDocQaResponseBodyPayloadOutputReferences) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponseBodyPayloadOutputReferences) GoString() string {
	return s.String()
}

func (s *RunDocQaResponseBodyPayloadOutputReferences) SetPubTime(v string) *RunDocQaResponseBodyPayloadOutputReferences {
	s.PubTime = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutputReferences) SetSource(v string) *RunDocQaResponseBodyPayloadOutputReferences {
	s.Source = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutputReferences) SetSourceDocId(v string) *RunDocQaResponseBodyPayloadOutputReferences {
	s.SourceDocId = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutputReferences) SetTitle(v string) *RunDocQaResponseBodyPayloadOutputReferences {
	s.Title = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadOutputReferences) SetUrl(v string) *RunDocQaResponseBodyPayloadOutputReferences {
	s.Url = &v
	return s
}

type RunDocQaResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunDocQaResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunDocQaResponseBodyPayloadUsage) SetInputTokens(v int64) *RunDocQaResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunDocQaResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunDocQaResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunDocQaResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunDocQaResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunDocQaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunDocQaResponse) String() string {
	return tea.Prettify(s)
}

func (s RunDocQaResponse) GoString() string {
	return s.String()
}

func (s *RunDocQaResponse) SetHeaders(v map[string]*string) *RunDocQaResponse {
	s.Headers = v
	return s
}

func (s *RunDocQaResponse) SetStatusCode(v int32) *RunDocQaResponse {
	s.StatusCode = &v
	return s
}

func (s *RunDocQaResponse) SetBody(v *RunDocQaResponseBody) *RunDocQaResponse {
	s.Body = v
	return s
}

type RunDocSmartCardRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 84ufBYEeLMZOjRFo84HJ7ySL3Efr55
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunDocSmartCardRequest) String() string {
	return tea.Prettify(s)
}

func (s RunDocSmartCardRequest) GoString() string {
	return s.String()
}

func (s *RunDocSmartCardRequest) SetDocId(v string) *RunDocSmartCardRequest {
	s.DocId = &v
	return s
}

func (s *RunDocSmartCardRequest) SetSessionId(v string) *RunDocSmartCardRequest {
	s.SessionId = &v
	return s
}

func (s *RunDocSmartCardRequest) SetWorkspaceId(v string) *RunDocSmartCardRequest {
	s.WorkspaceId = &v
	return s
}

type RunDocSmartCardResponseBody struct {
	Header  *RunDocSmartCardResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunDocSmartCardResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunDocSmartCardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunDocSmartCardResponseBody) GoString() string {
	return s.String()
}

func (s *RunDocSmartCardResponseBody) SetHeader(v *RunDocSmartCardResponseBodyHeader) *RunDocSmartCardResponseBody {
	s.Header = v
	return s
}

func (s *RunDocSmartCardResponseBody) SetPayload(v *RunDocSmartCardResponseBodyPayload) *RunDocSmartCardResponseBody {
	s.Payload = v
	return s
}

func (s *RunDocSmartCardResponseBody) SetRequestId(v string) *RunDocSmartCardResponseBody {
	s.RequestId = &v
	return s
}

type RunDocSmartCardResponseBodyHeader struct {
	// example:
	//
	// success
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// finished
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 07181f55-2311-48af-8048-132a77dee020
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 8d55b429d7c6d321fcff54823e8d317b
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 0abb781c17337107444473701ed7c3
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunDocSmartCardResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunDocSmartCardResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunDocSmartCardResponseBodyHeader) SetErrorCode(v string) *RunDocSmartCardResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunDocSmartCardResponseBodyHeader) SetErrorMessage(v string) *RunDocSmartCardResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunDocSmartCardResponseBodyHeader) SetEvent(v string) *RunDocSmartCardResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunDocSmartCardResponseBodyHeader) SetEventInfo(v string) *RunDocSmartCardResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunDocSmartCardResponseBodyHeader) SetSessionId(v string) *RunDocSmartCardResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunDocSmartCardResponseBodyHeader) SetTaskId(v string) *RunDocSmartCardResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunDocSmartCardResponseBodyHeader) SetTraceId(v string) *RunDocSmartCardResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunDocSmartCardResponseBodyPayload struct {
	Output *RunDocSmartCardResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunDocSmartCardResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunDocSmartCardResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunDocSmartCardResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunDocSmartCardResponseBodyPayload) SetOutput(v *RunDocSmartCardResponseBodyPayloadOutput) *RunDocSmartCardResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunDocSmartCardResponseBodyPayload) SetUsage(v *RunDocSmartCardResponseBodyPayloadUsage) *RunDocSmartCardResponseBodyPayload {
	s.Usage = v
	return s
}

type RunDocSmartCardResponseBodyPayloadOutput struct {
	Content *string   `json:"Content,omitempty" xml:"Content,omitempty"`
	Tags    []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s RunDocSmartCardResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunDocSmartCardResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunDocSmartCardResponseBodyPayloadOutput) SetContent(v string) *RunDocSmartCardResponseBodyPayloadOutput {
	s.Content = &v
	return s
}

func (s *RunDocSmartCardResponseBodyPayloadOutput) SetTags(v []*string) *RunDocSmartCardResponseBodyPayloadOutput {
	s.Tags = v
	return s
}

type RunDocSmartCardResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 101
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunDocSmartCardResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunDocSmartCardResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunDocSmartCardResponseBodyPayloadUsage) SetInputTokens(v int64) *RunDocSmartCardResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunDocSmartCardResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunDocSmartCardResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunDocSmartCardResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunDocSmartCardResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunDocSmartCardResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunDocSmartCardResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunDocSmartCardResponse) String() string {
	return tea.Prettify(s)
}

func (s RunDocSmartCardResponse) GoString() string {
	return s.String()
}

func (s *RunDocSmartCardResponse) SetHeaders(v map[string]*string) *RunDocSmartCardResponse {
	s.Headers = v
	return s
}

func (s *RunDocSmartCardResponse) SetStatusCode(v int32) *RunDocSmartCardResponse {
	s.StatusCode = &v
	return s
}

func (s *RunDocSmartCardResponse) SetBody(v *RunDocSmartCardResponseBody) *RunDocSmartCardResponse {
	s.Body = v
	return s
}

type RunDocSummaryRequest struct {
	CleanCache *bool `json:"CleanCache,omitempty" xml:"CleanCache,omitempty"`
	// example:
	//
	// 12345
	DocId            *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	Query            *string `json:"Query,omitempty" xml:"Query,omitempty"`
	RecommendContent *string `json:"RecommendContent,omitempty" xml:"RecommendContent,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0f56f98a-f2d8-47ec-98e9-1cbdcffa9539
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunDocSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s RunDocSummaryRequest) GoString() string {
	return s.String()
}

func (s *RunDocSummaryRequest) SetCleanCache(v bool) *RunDocSummaryRequest {
	s.CleanCache = &v
	return s
}

func (s *RunDocSummaryRequest) SetDocId(v string) *RunDocSummaryRequest {
	s.DocId = &v
	return s
}

func (s *RunDocSummaryRequest) SetQuery(v string) *RunDocSummaryRequest {
	s.Query = &v
	return s
}

func (s *RunDocSummaryRequest) SetRecommendContent(v string) *RunDocSummaryRequest {
	s.RecommendContent = &v
	return s
}

func (s *RunDocSummaryRequest) SetSessionId(v string) *RunDocSummaryRequest {
	s.SessionId = &v
	return s
}

func (s *RunDocSummaryRequest) SetWorkspaceId(v string) *RunDocSummaryRequest {
	s.WorkspaceId = &v
	return s
}

type RunDocSummaryResponseBody struct {
	Header  *RunDocSummaryResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunDocSummaryResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 3259D344-E871-5DE0-8FFE-CDA21F8D4382
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunDocSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunDocSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *RunDocSummaryResponseBody) SetHeader(v *RunDocSummaryResponseBodyHeader) *RunDocSummaryResponseBody {
	s.Header = v
	return s
}

func (s *RunDocSummaryResponseBody) SetPayload(v *RunDocSummaryResponseBodyPayload) *RunDocSummaryResponseBody {
	s.Payload = v
	return s
}

func (s *RunDocSummaryResponseBody) SetRequestId(v string) *RunDocSummaryResponseBody {
	s.RequestId = &v
	return s
}

type RunDocSummaryResponseBodyHeader struct {
	// example:
	//
	// success
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 92e16ccb-92b6-4894-abbf-fc6e2929a0df
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// b057f2fa-2277-477b-babf-cbc062307828
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 2150451a17191950923411783e2927
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunDocSummaryResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunDocSummaryResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunDocSummaryResponseBodyHeader) SetErrorCode(v string) *RunDocSummaryResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunDocSummaryResponseBodyHeader) SetErrorMessage(v string) *RunDocSummaryResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunDocSummaryResponseBodyHeader) SetEvent(v string) *RunDocSummaryResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunDocSummaryResponseBodyHeader) SetEventInfo(v string) *RunDocSummaryResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunDocSummaryResponseBodyHeader) SetSessionId(v string) *RunDocSummaryResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunDocSummaryResponseBodyHeader) SetTaskId(v string) *RunDocSummaryResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunDocSummaryResponseBodyHeader) SetTraceId(v string) *RunDocSummaryResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunDocSummaryResponseBodyPayload struct {
	Output *RunDocSummaryResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunDocSummaryResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunDocSummaryResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunDocSummaryResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunDocSummaryResponseBodyPayload) SetOutput(v *RunDocSummaryResponseBodyPayloadOutput) *RunDocSummaryResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunDocSummaryResponseBodyPayload) SetUsage(v *RunDocSummaryResponseBodyPayloadUsage) *RunDocSummaryResponseBodyPayload {
	s.Usage = v
	return s
}

type RunDocSummaryResponseBodyPayloadOutput struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s RunDocSummaryResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunDocSummaryResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunDocSummaryResponseBodyPayloadOutput) SetContent(v string) *RunDocSummaryResponseBodyPayloadOutput {
	s.Content = &v
	return s
}

type RunDocSummaryResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunDocSummaryResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunDocSummaryResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunDocSummaryResponseBodyPayloadUsage) SetInputTokens(v int64) *RunDocSummaryResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunDocSummaryResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunDocSummaryResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunDocSummaryResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunDocSummaryResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunDocSummaryResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunDocSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunDocSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s RunDocSummaryResponse) GoString() string {
	return s.String()
}

func (s *RunDocSummaryResponse) SetHeaders(v map[string]*string) *RunDocSummaryResponse {
	s.Headers = v
	return s
}

func (s *RunDocSummaryResponse) SetStatusCode(v int32) *RunDocSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *RunDocSummaryResponse) SetBody(v *RunDocSummaryResponseBody) *RunDocSummaryResponse {
	s.Body = v
	return s
}

type RunDocTranslationRequest struct {
	CleanCache *bool `json:"CleanCache,omitempty" xml:"CleanCache,omitempty"`
	// example:
	//
	// 12345
	DocId            *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	RecommendContent *string `json:"RecommendContent,omitempty" xml:"RecommendContent,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2e6b3987-f743-4d4c-8326-d9c41a6af3ee
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// toChinese
	//
	// toEnglish
	TransType *string `json:"TransType,omitempty" xml:"TransType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunDocTranslationRequest) String() string {
	return tea.Prettify(s)
}

func (s RunDocTranslationRequest) GoString() string {
	return s.String()
}

func (s *RunDocTranslationRequest) SetCleanCache(v bool) *RunDocTranslationRequest {
	s.CleanCache = &v
	return s
}

func (s *RunDocTranslationRequest) SetDocId(v string) *RunDocTranslationRequest {
	s.DocId = &v
	return s
}

func (s *RunDocTranslationRequest) SetRecommendContent(v string) *RunDocTranslationRequest {
	s.RecommendContent = &v
	return s
}

func (s *RunDocTranslationRequest) SetSessionId(v string) *RunDocTranslationRequest {
	s.SessionId = &v
	return s
}

func (s *RunDocTranslationRequest) SetTransType(v string) *RunDocTranslationRequest {
	s.TransType = &v
	return s
}

func (s *RunDocTranslationRequest) SetWorkspaceId(v string) *RunDocTranslationRequest {
	s.WorkspaceId = &v
	return s
}

type RunDocTranslationResponseBody struct {
	Header  *RunDocTranslationResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunDocTranslationResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunDocTranslationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunDocTranslationResponseBody) GoString() string {
	return s.String()
}

func (s *RunDocTranslationResponseBody) SetHeader(v *RunDocTranslationResponseBodyHeader) *RunDocTranslationResponseBody {
	s.Header = v
	return s
}

func (s *RunDocTranslationResponseBody) SetPayload(v *RunDocTranslationResponseBodyPayload) *RunDocTranslationResponseBody {
	s.Payload = v
	return s
}

func (s *RunDocTranslationResponseBody) SetRequestId(v string) *RunDocTranslationResponseBody {
	s.RequestId = &v
	return s
}

type RunDocTranslationResponseBodyHeader struct {
	// example:
	//
	// success
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 411c4dfa-2168-4379-a902-675d67f453f8
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 50a1cc8e-717e-4a2b-a76b-dc9734a8564b
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// ebd19b12-0cae-488f-9e41-5a1c825f545b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunDocTranslationResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunDocTranslationResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunDocTranslationResponseBodyHeader) SetErrorCode(v string) *RunDocTranslationResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunDocTranslationResponseBodyHeader) SetErrorMessage(v string) *RunDocTranslationResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunDocTranslationResponseBodyHeader) SetEvent(v string) *RunDocTranslationResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunDocTranslationResponseBodyHeader) SetEventInfo(v string) *RunDocTranslationResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunDocTranslationResponseBodyHeader) SetSessionId(v string) *RunDocTranslationResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunDocTranslationResponseBodyHeader) SetTaskId(v string) *RunDocTranslationResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunDocTranslationResponseBodyHeader) SetTraceId(v string) *RunDocTranslationResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunDocTranslationResponseBodyPayload struct {
	Output *RunDocTranslationResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunDocTranslationResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunDocTranslationResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunDocTranslationResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunDocTranslationResponseBodyPayload) SetOutput(v *RunDocTranslationResponseBodyPayloadOutput) *RunDocTranslationResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunDocTranslationResponseBodyPayload) SetUsage(v *RunDocTranslationResponseBodyPayloadUsage) *RunDocTranslationResponseBodyPayload {
	s.Usage = v
	return s
}

type RunDocTranslationResponseBodyPayloadOutput struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s RunDocTranslationResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunDocTranslationResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunDocTranslationResponseBodyPayloadOutput) SetContent(v string) *RunDocTranslationResponseBodyPayloadOutput {
	s.Content = &v
	return s
}

type RunDocTranslationResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunDocTranslationResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunDocTranslationResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunDocTranslationResponseBodyPayloadUsage) SetInputTokens(v int64) *RunDocTranslationResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunDocTranslationResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunDocTranslationResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunDocTranslationResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunDocTranslationResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunDocTranslationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunDocTranslationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunDocTranslationResponse) String() string {
	return tea.Prettify(s)
}

func (s RunDocTranslationResponse) GoString() string {
	return s.String()
}

func (s *RunDocTranslationResponse) SetHeaders(v map[string]*string) *RunDocTranslationResponse {
	s.Headers = v
	return s
}

func (s *RunDocTranslationResponse) SetStatusCode(v int32) *RunDocTranslationResponse {
	s.StatusCode = &v
	return s
}

func (s *RunDocTranslationResponse) SetBody(v *RunDocTranslationResponseBody) *RunDocTranslationResponse {
	s.Body = v
	return s
}

type RunDocWashingRequest struct {
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// This parameter is required.
	ReferenceContent *string `json:"ReferenceContent,omitempty" xml:"ReferenceContent,omitempty"`
	SessionId        *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	Topic            *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// example:
	//
	// 500
	WordNumber *int32 `json:"WordNumber,omitempty" xml:"WordNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId       *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
	WritingTypeName   *string `json:"WritingTypeName,omitempty" xml:"WritingTypeName,omitempty"`
	WritingTypeRefDoc *string `json:"WritingTypeRefDoc,omitempty" xml:"WritingTypeRefDoc,omitempty"`
}

func (s RunDocWashingRequest) String() string {
	return tea.Prettify(s)
}

func (s RunDocWashingRequest) GoString() string {
	return s.String()
}

func (s *RunDocWashingRequest) SetPrompt(v string) *RunDocWashingRequest {
	s.Prompt = &v
	return s
}

func (s *RunDocWashingRequest) SetReferenceContent(v string) *RunDocWashingRequest {
	s.ReferenceContent = &v
	return s
}

func (s *RunDocWashingRequest) SetSessionId(v string) *RunDocWashingRequest {
	s.SessionId = &v
	return s
}

func (s *RunDocWashingRequest) SetTopic(v string) *RunDocWashingRequest {
	s.Topic = &v
	return s
}

func (s *RunDocWashingRequest) SetWordNumber(v int32) *RunDocWashingRequest {
	s.WordNumber = &v
	return s
}

func (s *RunDocWashingRequest) SetWorkspaceId(v string) *RunDocWashingRequest {
	s.WorkspaceId = &v
	return s
}

func (s *RunDocWashingRequest) SetWritingTypeName(v string) *RunDocWashingRequest {
	s.WritingTypeName = &v
	return s
}

func (s *RunDocWashingRequest) SetWritingTypeRefDoc(v string) *RunDocWashingRequest {
	s.WritingTypeRefDoc = &v
	return s
}

type RunDocWashingResponseBody struct {
	// example:
	//
	// false
	End     *bool                             `json:"End,omitempty" xml:"End,omitempty"`
	Header  *RunDocWashingResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunDocWashingResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunDocWashingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunDocWashingResponseBody) GoString() string {
	return s.String()
}

func (s *RunDocWashingResponseBody) SetEnd(v bool) *RunDocWashingResponseBody {
	s.End = &v
	return s
}

func (s *RunDocWashingResponseBody) SetHeader(v *RunDocWashingResponseBodyHeader) *RunDocWashingResponseBody {
	s.Header = v
	return s
}

func (s *RunDocWashingResponseBody) SetPayload(v *RunDocWashingResponseBodyPayload) *RunDocWashingResponseBody {
	s.Payload = v
	return s
}

func (s *RunDocWashingResponseBody) SetRequestId(v string) *RunDocWashingResponseBody {
	s.RequestId = &v
	return s
}

type RunDocWashingResponseBodyHeader struct {
	// example:
	//
	// task-finished
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 20247a52-23e2-46fb-943d-309cdee2bc6d
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 2150451a17191950923411783e2927
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunDocWashingResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunDocWashingResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunDocWashingResponseBodyHeader) SetEvent(v string) *RunDocWashingResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunDocWashingResponseBodyHeader) SetEventInfo(v string) *RunDocWashingResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunDocWashingResponseBodyHeader) SetRequestId(v string) *RunDocWashingResponseBodyHeader {
	s.RequestId = &v
	return s
}

func (s *RunDocWashingResponseBodyHeader) SetSessionId(v string) *RunDocWashingResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunDocWashingResponseBodyHeader) SetTaskId(v string) *RunDocWashingResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunDocWashingResponseBodyHeader) SetTraceId(v string) *RunDocWashingResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunDocWashingResponseBodyPayload struct {
	Output *RunDocWashingResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunDocWashingResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunDocWashingResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunDocWashingResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunDocWashingResponseBodyPayload) SetOutput(v *RunDocWashingResponseBodyPayloadOutput) *RunDocWashingResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunDocWashingResponseBodyPayload) SetUsage(v *RunDocWashingResponseBodyPayloadUsage) *RunDocWashingResponseBodyPayload {
	s.Usage = v
	return s
}

type RunDocWashingResponseBodyPayloadOutput struct {
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunDocWashingResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunDocWashingResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunDocWashingResponseBodyPayloadOutput) SetText(v string) *RunDocWashingResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunDocWashingResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunDocWashingResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunDocWashingResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunDocWashingResponseBodyPayloadUsage) SetInputTokens(v int64) *RunDocWashingResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunDocWashingResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunDocWashingResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunDocWashingResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunDocWashingResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunDocWashingResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunDocWashingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunDocWashingResponse) String() string {
	return tea.Prettify(s)
}

func (s RunDocWashingResponse) GoString() string {
	return s.String()
}

func (s *RunDocWashingResponse) SetHeaders(v map[string]*string) *RunDocWashingResponse {
	s.Headers = v
	return s
}

func (s *RunDocWashingResponse) SetStatusCode(v int32) *RunDocWashingResponse {
	s.StatusCode = &v
	return s
}

func (s *RunDocWashingResponse) SetBody(v *RunDocWashingResponseBody) *RunDocWashingResponse {
	s.Body = v
	return s
}

type RunExpandContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunExpandContentRequest) String() string {
	return tea.Prettify(s)
}

func (s RunExpandContentRequest) GoString() string {
	return s.String()
}

func (s *RunExpandContentRequest) SetContent(v string) *RunExpandContentRequest {
	s.Content = &v
	return s
}

func (s *RunExpandContentRequest) SetWorkspaceId(v string) *RunExpandContentRequest {
	s.WorkspaceId = &v
	return s
}

type RunExpandContentResponseBody struct {
	End     *bool                                `json:"End,omitempty" xml:"End,omitempty"`
	Header  *RunExpandContentResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunExpandContentResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunExpandContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunExpandContentResponseBody) GoString() string {
	return s.String()
}

func (s *RunExpandContentResponseBody) SetEnd(v bool) *RunExpandContentResponseBody {
	s.End = &v
	return s
}

func (s *RunExpandContentResponseBody) SetHeader(v *RunExpandContentResponseBodyHeader) *RunExpandContentResponseBody {
	s.Header = v
	return s
}

func (s *RunExpandContentResponseBody) SetPayload(v *RunExpandContentResponseBodyPayload) *RunExpandContentResponseBody {
	s.Payload = v
	return s
}

func (s *RunExpandContentResponseBody) SetRequestId(v string) *RunExpandContentResponseBody {
	s.RequestId = &v
	return s
}

type RunExpandContentResponseBodyHeader struct {
	// example:
	//
	// 403
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// Pop sign mismatch, please check.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// result-generated
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 模型生成事件
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 3cd10828-0e42-471c-8f1a-931cde20b035
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 2150451a17191950923411783e2927
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunExpandContentResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunExpandContentResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunExpandContentResponseBodyHeader) SetErrorCode(v string) *RunExpandContentResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunExpandContentResponseBodyHeader) SetErrorMessage(v string) *RunExpandContentResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunExpandContentResponseBodyHeader) SetEvent(v string) *RunExpandContentResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunExpandContentResponseBodyHeader) SetEventInfo(v string) *RunExpandContentResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunExpandContentResponseBodyHeader) SetSessionId(v string) *RunExpandContentResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunExpandContentResponseBodyHeader) SetTaskId(v string) *RunExpandContentResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunExpandContentResponseBodyHeader) SetTraceId(v string) *RunExpandContentResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunExpandContentResponseBodyPayload struct {
	Output *RunExpandContentResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunExpandContentResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunExpandContentResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunExpandContentResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunExpandContentResponseBodyPayload) SetOutput(v *RunExpandContentResponseBodyPayloadOutput) *RunExpandContentResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunExpandContentResponseBodyPayload) SetUsage(v *RunExpandContentResponseBodyPayloadUsage) *RunExpandContentResponseBodyPayload {
	s.Usage = v
	return s
}

type RunExpandContentResponseBodyPayloadOutput struct {
	// example:
	//
	// 这是测试输出
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunExpandContentResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunExpandContentResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunExpandContentResponseBodyPayloadOutput) SetText(v string) *RunExpandContentResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunExpandContentResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunExpandContentResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunExpandContentResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunExpandContentResponseBodyPayloadUsage) SetInputTokens(v int64) *RunExpandContentResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunExpandContentResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunExpandContentResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunExpandContentResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunExpandContentResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunExpandContentResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunExpandContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunExpandContentResponse) String() string {
	return tea.Prettify(s)
}

func (s RunExpandContentResponse) GoString() string {
	return s.String()
}

func (s *RunExpandContentResponse) SetHeaders(v map[string]*string) *RunExpandContentResponse {
	s.Headers = v
	return s
}

func (s *RunExpandContentResponse) SetStatusCode(v int32) *RunExpandContentResponse {
	s.StatusCode = &v
	return s
}

func (s *RunExpandContentResponse) SetBody(v *RunExpandContentResponseBody) *RunExpandContentResponse {
	s.Body = v
	return s
}

type RunGenerateQuestionsRequest struct {
	// example:
	//
	// oOgIwodFANW1u5MnqxysOh1rtld3xn
	DocId            *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	ReferenceContent *string `json:"ReferenceContent,omitempty" xml:"ReferenceContent,omitempty"`
	// example:
	//
	// f486c4e2-b773-4d65-88f8-2ba540610456
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-w335gauzlbba2vze
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunGenerateQuestionsRequest) String() string {
	return tea.Prettify(s)
}

func (s RunGenerateQuestionsRequest) GoString() string {
	return s.String()
}

func (s *RunGenerateQuestionsRequest) SetDocId(v string) *RunGenerateQuestionsRequest {
	s.DocId = &v
	return s
}

func (s *RunGenerateQuestionsRequest) SetReferenceContent(v string) *RunGenerateQuestionsRequest {
	s.ReferenceContent = &v
	return s
}

func (s *RunGenerateQuestionsRequest) SetSessionId(v string) *RunGenerateQuestionsRequest {
	s.SessionId = &v
	return s
}

func (s *RunGenerateQuestionsRequest) SetWorkspaceId(v string) *RunGenerateQuestionsRequest {
	s.WorkspaceId = &v
	return s
}

type RunGenerateQuestionsResponseBody struct {
	Header  *RunGenerateQuestionsResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunGenerateQuestionsResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunGenerateQuestionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunGenerateQuestionsResponseBody) GoString() string {
	return s.String()
}

func (s *RunGenerateQuestionsResponseBody) SetHeader(v *RunGenerateQuestionsResponseBodyHeader) *RunGenerateQuestionsResponseBody {
	s.Header = v
	return s
}

func (s *RunGenerateQuestionsResponseBody) SetPayload(v *RunGenerateQuestionsResponseBodyPayload) *RunGenerateQuestionsResponseBody {
	s.Payload = v
	return s
}

func (s *RunGenerateQuestionsResponseBody) SetRequestId(v string) *RunGenerateQuestionsResponseBody {
	s.RequestId = &v
	return s
}

type RunGenerateQuestionsResponseBodyHeader struct {
	// example:
	//
	// 200
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// finished
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 3cd10828-0e42-471c-8f1a-931cde20b035
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 0bc3b4b417362160345997589e5f6e
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunGenerateQuestionsResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunGenerateQuestionsResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunGenerateQuestionsResponseBodyHeader) SetErrorCode(v string) *RunGenerateQuestionsResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunGenerateQuestionsResponseBodyHeader) SetErrorMessage(v string) *RunGenerateQuestionsResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunGenerateQuestionsResponseBodyHeader) SetEvent(v string) *RunGenerateQuestionsResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunGenerateQuestionsResponseBodyHeader) SetEventInfo(v string) *RunGenerateQuestionsResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunGenerateQuestionsResponseBodyHeader) SetSessionId(v string) *RunGenerateQuestionsResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunGenerateQuestionsResponseBodyHeader) SetTaskId(v string) *RunGenerateQuestionsResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunGenerateQuestionsResponseBodyHeader) SetTraceId(v string) *RunGenerateQuestionsResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunGenerateQuestionsResponseBodyPayload struct {
	Output *RunGenerateQuestionsResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunGenerateQuestionsResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunGenerateQuestionsResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunGenerateQuestionsResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunGenerateQuestionsResponseBodyPayload) SetOutput(v *RunGenerateQuestionsResponseBodyPayloadOutput) *RunGenerateQuestionsResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunGenerateQuestionsResponseBodyPayload) SetUsage(v *RunGenerateQuestionsResponseBodyPayloadUsage) *RunGenerateQuestionsResponseBodyPayload {
	s.Usage = v
	return s
}

type RunGenerateQuestionsResponseBodyPayloadOutput struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s RunGenerateQuestionsResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunGenerateQuestionsResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunGenerateQuestionsResponseBodyPayloadOutput) SetContent(v string) *RunGenerateQuestionsResponseBodyPayloadOutput {
	s.Content = &v
	return s
}

type RunGenerateQuestionsResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunGenerateQuestionsResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunGenerateQuestionsResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunGenerateQuestionsResponseBodyPayloadUsage) SetInputTokens(v int64) *RunGenerateQuestionsResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunGenerateQuestionsResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunGenerateQuestionsResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunGenerateQuestionsResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunGenerateQuestionsResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunGenerateQuestionsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunGenerateQuestionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunGenerateQuestionsResponse) String() string {
	return tea.Prettify(s)
}

func (s RunGenerateQuestionsResponse) GoString() string {
	return s.String()
}

func (s *RunGenerateQuestionsResponse) SetHeaders(v map[string]*string) *RunGenerateQuestionsResponse {
	s.Headers = v
	return s
}

func (s *RunGenerateQuestionsResponse) SetStatusCode(v int32) *RunGenerateQuestionsResponse {
	s.StatusCode = &v
	return s
}

func (s *RunGenerateQuestionsResponse) SetBody(v *RunGenerateQuestionsResponseBody) *RunGenerateQuestionsResponse {
	s.Body = v
	return s
}

type RunHotwordRequest struct {
	// example:
	//
	// 84ufBYEeLMZOjRFo84HJ7ySL3Efr55
	DocId            *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	Prompt           *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	ReferenceContent *string `json:"ReferenceContent,omitempty" xml:"ReferenceContent,omitempty"`
	// example:
	//
	// e32a1a3f-1f7e-41dd-b888-ef1d91b96d1e
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-baw8as25ll3wnzjr
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunHotwordRequest) String() string {
	return tea.Prettify(s)
}

func (s RunHotwordRequest) GoString() string {
	return s.String()
}

func (s *RunHotwordRequest) SetDocId(v string) *RunHotwordRequest {
	s.DocId = &v
	return s
}

func (s *RunHotwordRequest) SetPrompt(v string) *RunHotwordRequest {
	s.Prompt = &v
	return s
}

func (s *RunHotwordRequest) SetReferenceContent(v string) *RunHotwordRequest {
	s.ReferenceContent = &v
	return s
}

func (s *RunHotwordRequest) SetSessionId(v string) *RunHotwordRequest {
	s.SessionId = &v
	return s
}

func (s *RunHotwordRequest) SetWorkspaceId(v string) *RunHotwordRequest {
	s.WorkspaceId = &v
	return s
}

type RunHotwordResponseBody struct {
	Header  *RunHotwordResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunHotwordResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunHotwordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunHotwordResponseBody) GoString() string {
	return s.String()
}

func (s *RunHotwordResponseBody) SetHeader(v *RunHotwordResponseBodyHeader) *RunHotwordResponseBody {
	s.Header = v
	return s
}

func (s *RunHotwordResponseBody) SetPayload(v *RunHotwordResponseBodyPayload) *RunHotwordResponseBody {
	s.Payload = v
	return s
}

func (s *RunHotwordResponseBody) SetRequestId(v string) *RunHotwordResponseBody {
	s.RequestId = &v
	return s
}

type RunHotwordResponseBodyHeader struct {
	// example:
	//
	// 200
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// finished
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 92e16ccb-92b6-4894-abbf-fc6e2929a0df
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 0abb7e3217356108993888059ee72b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunHotwordResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunHotwordResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunHotwordResponseBodyHeader) SetErrorCode(v string) *RunHotwordResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunHotwordResponseBodyHeader) SetErrorMessage(v string) *RunHotwordResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunHotwordResponseBodyHeader) SetEvent(v string) *RunHotwordResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunHotwordResponseBodyHeader) SetEventInfo(v string) *RunHotwordResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunHotwordResponseBodyHeader) SetSessionId(v string) *RunHotwordResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunHotwordResponseBodyHeader) SetTaskId(v string) *RunHotwordResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunHotwordResponseBodyHeader) SetTraceId(v string) *RunHotwordResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunHotwordResponseBodyPayload struct {
	Output *RunHotwordResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunHotwordResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunHotwordResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunHotwordResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunHotwordResponseBodyPayload) SetOutput(v *RunHotwordResponseBodyPayloadOutput) *RunHotwordResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunHotwordResponseBodyPayload) SetUsage(v *RunHotwordResponseBodyPayloadUsage) *RunHotwordResponseBodyPayload {
	s.Usage = v
	return s
}

type RunHotwordResponseBodyPayloadOutput struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s RunHotwordResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunHotwordResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunHotwordResponseBodyPayloadOutput) SetContent(v string) *RunHotwordResponseBodyPayloadOutput {
	s.Content = &v
	return s
}

type RunHotwordResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 1
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 101
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunHotwordResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunHotwordResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunHotwordResponseBodyPayloadUsage) SetInputTokens(v int64) *RunHotwordResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunHotwordResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunHotwordResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunHotwordResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunHotwordResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunHotwordResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunHotwordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunHotwordResponse) String() string {
	return tea.Prettify(s)
}

func (s RunHotwordResponse) GoString() string {
	return s.String()
}

func (s *RunHotwordResponse) SetHeaders(v map[string]*string) *RunHotwordResponse {
	s.Headers = v
	return s
}

func (s *RunHotwordResponse) SetStatusCode(v int32) *RunHotwordResponse {
	s.StatusCode = &v
	return s
}

func (s *RunHotwordResponse) SetBody(v *RunHotwordResponseBody) *RunHotwordResponse {
	s.Body = v
	return s
}

type RunKeywordsExtractionGenerationRequest struct {
	// This parameter is required.
	ReferenceData *RunKeywordsExtractionGenerationRequestReferenceData `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty" type:"Struct"`
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunKeywordsExtractionGenerationRequest) String() string {
	return tea.Prettify(s)
}

func (s RunKeywordsExtractionGenerationRequest) GoString() string {
	return s.String()
}

func (s *RunKeywordsExtractionGenerationRequest) SetReferenceData(v *RunKeywordsExtractionGenerationRequestReferenceData) *RunKeywordsExtractionGenerationRequest {
	s.ReferenceData = v
	return s
}

func (s *RunKeywordsExtractionGenerationRequest) SetTaskId(v string) *RunKeywordsExtractionGenerationRequest {
	s.TaskId = &v
	return s
}

func (s *RunKeywordsExtractionGenerationRequest) SetWorkspaceId(v string) *RunKeywordsExtractionGenerationRequest {
	s.WorkspaceId = &v
	return s
}

type RunKeywordsExtractionGenerationRequestReferenceData struct {
	// This parameter is required.
	Contents []*string `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
}

func (s RunKeywordsExtractionGenerationRequestReferenceData) String() string {
	return tea.Prettify(s)
}

func (s RunKeywordsExtractionGenerationRequestReferenceData) GoString() string {
	return s.String()
}

func (s *RunKeywordsExtractionGenerationRequestReferenceData) SetContents(v []*string) *RunKeywordsExtractionGenerationRequestReferenceData {
	s.Contents = v
	return s
}

type RunKeywordsExtractionGenerationShrinkRequest struct {
	// This parameter is required.
	ReferenceDataShrink *string `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty"`
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunKeywordsExtractionGenerationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunKeywordsExtractionGenerationShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunKeywordsExtractionGenerationShrinkRequest) SetReferenceDataShrink(v string) *RunKeywordsExtractionGenerationShrinkRequest {
	s.ReferenceDataShrink = &v
	return s
}

func (s *RunKeywordsExtractionGenerationShrinkRequest) SetTaskId(v string) *RunKeywordsExtractionGenerationShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *RunKeywordsExtractionGenerationShrinkRequest) SetWorkspaceId(v string) *RunKeywordsExtractionGenerationShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunKeywordsExtractionGenerationResponseBody struct {
	Header  *RunKeywordsExtractionGenerationResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunKeywordsExtractionGenerationResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 419F3FBE-5C8D-5949-AC29-E9615235D15A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunKeywordsExtractionGenerationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunKeywordsExtractionGenerationResponseBody) GoString() string {
	return s.String()
}

func (s *RunKeywordsExtractionGenerationResponseBody) SetHeader(v *RunKeywordsExtractionGenerationResponseBodyHeader) *RunKeywordsExtractionGenerationResponseBody {
	s.Header = v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBody) SetPayload(v *RunKeywordsExtractionGenerationResponseBodyPayload) *RunKeywordsExtractionGenerationResponseBody {
	s.Payload = v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBody) SetRequestId(v string) *RunKeywordsExtractionGenerationResponseBody {
	s.RequestId = &v
	return s
}

type RunKeywordsExtractionGenerationResponseBodyHeader struct {
	// example:
	//
	// AccessForbid
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// xx
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-failed
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 1a3d7c9f-3a6d-4e49-b176-2d8721a27397
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 8d55b429d7c6d321fcff54823e8d317b
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 210bc4e817219607963985396de8bd
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunKeywordsExtractionGenerationResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunKeywordsExtractionGenerationResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunKeywordsExtractionGenerationResponseBodyHeader) SetErrorCode(v string) *RunKeywordsExtractionGenerationResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBodyHeader) SetErrorMessage(v string) *RunKeywordsExtractionGenerationResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBodyHeader) SetEvent(v string) *RunKeywordsExtractionGenerationResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBodyHeader) SetSessionId(v string) *RunKeywordsExtractionGenerationResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBodyHeader) SetTaskId(v string) *RunKeywordsExtractionGenerationResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBodyHeader) SetTraceId(v string) *RunKeywordsExtractionGenerationResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunKeywordsExtractionGenerationResponseBodyPayload struct {
	Output *RunKeywordsExtractionGenerationResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunKeywordsExtractionGenerationResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunKeywordsExtractionGenerationResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunKeywordsExtractionGenerationResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunKeywordsExtractionGenerationResponseBodyPayload) SetOutput(v *RunKeywordsExtractionGenerationResponseBodyPayloadOutput) *RunKeywordsExtractionGenerationResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBodyPayload) SetUsage(v *RunKeywordsExtractionGenerationResponseBodyPayloadUsage) *RunKeywordsExtractionGenerationResponseBodyPayload {
	s.Usage = v
	return s
}

type RunKeywordsExtractionGenerationResponseBodyPayloadOutput struct {
	// example:
	//
	// xxx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunKeywordsExtractionGenerationResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunKeywordsExtractionGenerationResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunKeywordsExtractionGenerationResponseBodyPayloadOutput) SetText(v string) *RunKeywordsExtractionGenerationResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunKeywordsExtractionGenerationResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 1
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 2
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunKeywordsExtractionGenerationResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunKeywordsExtractionGenerationResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunKeywordsExtractionGenerationResponseBodyPayloadUsage) SetInputTokens(v int64) *RunKeywordsExtractionGenerationResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunKeywordsExtractionGenerationResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunKeywordsExtractionGenerationResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunKeywordsExtractionGenerationResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunKeywordsExtractionGenerationResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunKeywordsExtractionGenerationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunKeywordsExtractionGenerationResponse) String() string {
	return tea.Prettify(s)
}

func (s RunKeywordsExtractionGenerationResponse) GoString() string {
	return s.String()
}

func (s *RunKeywordsExtractionGenerationResponse) SetHeaders(v map[string]*string) *RunKeywordsExtractionGenerationResponse {
	s.Headers = v
	return s
}

func (s *RunKeywordsExtractionGenerationResponse) SetStatusCode(v int32) *RunKeywordsExtractionGenerationResponse {
	s.StatusCode = &v
	return s
}

func (s *RunKeywordsExtractionGenerationResponse) SetBody(v *RunKeywordsExtractionGenerationResponseBody) *RunKeywordsExtractionGenerationResponse {
	s.Body = v
	return s
}

type RunMultiDocIntroductionRequest struct {
	// This parameter is required.
	DocIds         []*string `json:"DocIds,omitempty" xml:"DocIds,omitempty" type:"Repeated"`
	KeyPointPrompt *string   `json:"KeyPointPrompt,omitempty" xml:"KeyPointPrompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 75bf82fa-b71b-45d7-ae40-0b00e496cd9e
	SessionId     *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	SummaryPrompt *string `json:"SummaryPrompt,omitempty" xml:"SummaryPrompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunMultiDocIntroductionRequest) String() string {
	return tea.Prettify(s)
}

func (s RunMultiDocIntroductionRequest) GoString() string {
	return s.String()
}

func (s *RunMultiDocIntroductionRequest) SetDocIds(v []*string) *RunMultiDocIntroductionRequest {
	s.DocIds = v
	return s
}

func (s *RunMultiDocIntroductionRequest) SetKeyPointPrompt(v string) *RunMultiDocIntroductionRequest {
	s.KeyPointPrompt = &v
	return s
}

func (s *RunMultiDocIntroductionRequest) SetSessionId(v string) *RunMultiDocIntroductionRequest {
	s.SessionId = &v
	return s
}

func (s *RunMultiDocIntroductionRequest) SetSummaryPrompt(v string) *RunMultiDocIntroductionRequest {
	s.SummaryPrompt = &v
	return s
}

func (s *RunMultiDocIntroductionRequest) SetWorkspaceId(v string) *RunMultiDocIntroductionRequest {
	s.WorkspaceId = &v
	return s
}

type RunMultiDocIntroductionShrinkRequest struct {
	// This parameter is required.
	DocIdsShrink   *string `json:"DocIds,omitempty" xml:"DocIds,omitempty"`
	KeyPointPrompt *string `json:"KeyPointPrompt,omitempty" xml:"KeyPointPrompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 75bf82fa-b71b-45d7-ae40-0b00e496cd9e
	SessionId     *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	SummaryPrompt *string `json:"SummaryPrompt,omitempty" xml:"SummaryPrompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunMultiDocIntroductionShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunMultiDocIntroductionShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunMultiDocIntroductionShrinkRequest) SetDocIdsShrink(v string) *RunMultiDocIntroductionShrinkRequest {
	s.DocIdsShrink = &v
	return s
}

func (s *RunMultiDocIntroductionShrinkRequest) SetKeyPointPrompt(v string) *RunMultiDocIntroductionShrinkRequest {
	s.KeyPointPrompt = &v
	return s
}

func (s *RunMultiDocIntroductionShrinkRequest) SetSessionId(v string) *RunMultiDocIntroductionShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *RunMultiDocIntroductionShrinkRequest) SetSummaryPrompt(v string) *RunMultiDocIntroductionShrinkRequest {
	s.SummaryPrompt = &v
	return s
}

func (s *RunMultiDocIntroductionShrinkRequest) SetWorkspaceId(v string) *RunMultiDocIntroductionShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunMultiDocIntroductionResponseBody struct {
	Header  *RunMultiDocIntroductionResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunMultiDocIntroductionResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunMultiDocIntroductionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunMultiDocIntroductionResponseBody) GoString() string {
	return s.String()
}

func (s *RunMultiDocIntroductionResponseBody) SetHeader(v *RunMultiDocIntroductionResponseBodyHeader) *RunMultiDocIntroductionResponseBody {
	s.Header = v
	return s
}

func (s *RunMultiDocIntroductionResponseBody) SetPayload(v *RunMultiDocIntroductionResponseBodyPayload) *RunMultiDocIntroductionResponseBody {
	s.Payload = v
	return s
}

func (s *RunMultiDocIntroductionResponseBody) SetRequestId(v string) *RunMultiDocIntroductionResponseBody {
	s.RequestId = &v
	return s
}

type RunMultiDocIntroductionResponseBodyHeader struct {
	// example:
	//
	// 200
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// Message does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// finished
	Event     *string `json:"Event,omitempty" xml:"Event,omitempty"`
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 92e16ccb-92b6-4894-abbf-fc6e2929a0df
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// b057f2fa-2277-477b-babf-cbc062307828
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 46e5c2b5-0877-4f09-bd91-ab0cf314e48b
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunMultiDocIntroductionResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunMultiDocIntroductionResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunMultiDocIntroductionResponseBodyHeader) SetErrorCode(v string) *RunMultiDocIntroductionResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyHeader) SetErrorMessage(v string) *RunMultiDocIntroductionResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyHeader) SetEvent(v string) *RunMultiDocIntroductionResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyHeader) SetEventInfo(v string) *RunMultiDocIntroductionResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyHeader) SetSessionId(v string) *RunMultiDocIntroductionResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyHeader) SetTaskId(v string) *RunMultiDocIntroductionResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyHeader) SetTraceId(v string) *RunMultiDocIntroductionResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunMultiDocIntroductionResponseBodyPayload struct {
	Output *RunMultiDocIntroductionResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunMultiDocIntroductionResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunMultiDocIntroductionResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunMultiDocIntroductionResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunMultiDocIntroductionResponseBodyPayload) SetOutput(v *RunMultiDocIntroductionResponseBodyPayloadOutput) *RunMultiDocIntroductionResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyPayload) SetUsage(v *RunMultiDocIntroductionResponseBodyPayloadUsage) *RunMultiDocIntroductionResponseBodyPayload {
	s.Usage = v
	return s
}

type RunMultiDocIntroductionResponseBodyPayloadOutput struct {
	KeyPoints []*RunMultiDocIntroductionResponseBodyPayloadOutputKeyPoints `json:"KeyPoints,omitempty" xml:"KeyPoints,omitempty" type:"Repeated"`
	Summary   *string                                                      `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s RunMultiDocIntroductionResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunMultiDocIntroductionResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunMultiDocIntroductionResponseBodyPayloadOutput) SetKeyPoints(v []*RunMultiDocIntroductionResponseBodyPayloadOutputKeyPoints) *RunMultiDocIntroductionResponseBodyPayloadOutput {
	s.KeyPoints = v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyPayloadOutput) SetSummary(v string) *RunMultiDocIntroductionResponseBodyPayloadOutput {
	s.Summary = &v
	return s
}

type RunMultiDocIntroductionResponseBodyPayloadOutputKeyPoints struct {
	KeyPoint *string `json:"KeyPoint,omitempty" xml:"KeyPoint,omitempty"`
	Source   *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s RunMultiDocIntroductionResponseBodyPayloadOutputKeyPoints) String() string {
	return tea.Prettify(s)
}

func (s RunMultiDocIntroductionResponseBodyPayloadOutputKeyPoints) GoString() string {
	return s.String()
}

func (s *RunMultiDocIntroductionResponseBodyPayloadOutputKeyPoints) SetKeyPoint(v string) *RunMultiDocIntroductionResponseBodyPayloadOutputKeyPoints {
	s.KeyPoint = &v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyPayloadOutputKeyPoints) SetSource(v string) *RunMultiDocIntroductionResponseBodyPayloadOutputKeyPoints {
	s.Source = &v
	return s
}

type RunMultiDocIntroductionResponseBodyPayloadUsage struct {
	// example:
	//
	// 65
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 165
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunMultiDocIntroductionResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunMultiDocIntroductionResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunMultiDocIntroductionResponseBodyPayloadUsage) SetInputTokens(v int64) *RunMultiDocIntroductionResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunMultiDocIntroductionResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunMultiDocIntroductionResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunMultiDocIntroductionResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunMultiDocIntroductionResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunMultiDocIntroductionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunMultiDocIntroductionResponse) String() string {
	return tea.Prettify(s)
}

func (s RunMultiDocIntroductionResponse) GoString() string {
	return s.String()
}

func (s *RunMultiDocIntroductionResponse) SetHeaders(v map[string]*string) *RunMultiDocIntroductionResponse {
	s.Headers = v
	return s
}

func (s *RunMultiDocIntroductionResponse) SetStatusCode(v int32) *RunMultiDocIntroductionResponse {
	s.StatusCode = &v
	return s
}

func (s *RunMultiDocIntroductionResponse) SetBody(v *RunMultiDocIntroductionResponseBody) *RunMultiDocIntroductionResponse {
	s.Body = v
	return s
}

type RunSearchGenerationRequest struct {
	AgentContext *RunSearchGenerationRequestAgentContext `json:"AgentContext,omitempty" xml:"AgentContext,omitempty" type:"Struct"`
	// example:
	//
	// xxx
	ChatConfig *RunSearchGenerationRequestChatConfig `json:"ChatConfig,omitempty" xml:"ChatConfig,omitempty" type:"Struct"`
	// example:
	//
	// qwen-max-latest
	ModelId *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// example:
	//
	// xxx
	OriginalSessionId *string `json:"OriginalSessionId,omitempty" xml:"OriginalSessionId,omitempty"`
	// example:
	//
	// xxx
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 7AA2AE16-D873-5C5F-9708-15396C382EB1
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunSearchGenerationRequest) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationRequest) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationRequest) SetAgentContext(v *RunSearchGenerationRequestAgentContext) *RunSearchGenerationRequest {
	s.AgentContext = v
	return s
}

func (s *RunSearchGenerationRequest) SetChatConfig(v *RunSearchGenerationRequestChatConfig) *RunSearchGenerationRequest {
	s.ChatConfig = v
	return s
}

func (s *RunSearchGenerationRequest) SetModelId(v string) *RunSearchGenerationRequest {
	s.ModelId = &v
	return s
}

func (s *RunSearchGenerationRequest) SetOriginalSessionId(v string) *RunSearchGenerationRequest {
	s.OriginalSessionId = &v
	return s
}

func (s *RunSearchGenerationRequest) SetPrompt(v string) *RunSearchGenerationRequest {
	s.Prompt = &v
	return s
}

func (s *RunSearchGenerationRequest) SetTaskId(v string) *RunSearchGenerationRequest {
	s.TaskId = &v
	return s
}

func (s *RunSearchGenerationRequest) SetWorkspaceId(v string) *RunSearchGenerationRequest {
	s.WorkspaceId = &v
	return s
}

type RunSearchGenerationRequestAgentContext struct {
	BizContext *RunSearchGenerationRequestAgentContextBizContext `json:"BizContext,omitempty" xml:"BizContext,omitempty" type:"Struct"`
}

func (s RunSearchGenerationRequestAgentContext) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationRequestAgentContext) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationRequestAgentContext) SetBizContext(v *RunSearchGenerationRequestAgentContextBizContext) *RunSearchGenerationRequestAgentContext {
	s.BizContext = v
	return s
}

type RunSearchGenerationRequestAgentContextBizContext struct {
	MultimodalMediaSelection *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection `json:"MultimodalMediaSelection,omitempty" xml:"MultimodalMediaSelection,omitempty" type:"Struct"`
	SkipCurrentSupplement    *bool                                                                     `json:"SkipCurrentSupplement,omitempty" xml:"SkipCurrentSupplement,omitempty"`
}

func (s RunSearchGenerationRequestAgentContextBizContext) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationRequestAgentContextBizContext) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationRequestAgentContextBizContext) SetMultimodalMediaSelection(v *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection) *RunSearchGenerationRequestAgentContextBizContext {
	s.MultimodalMediaSelection = v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContext) SetSkipCurrentSupplement(v bool) *RunSearchGenerationRequestAgentContextBizContext {
	s.SkipCurrentSupplement = &v
	return s
}

type RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection struct {
	// example:
	//
	// 原始会话唯一标识：搜索结果取这个会话中的全量，目前仅媒资搜索场景需要
	OriginalSessionId *string `json:"OriginalSessionId,omitempty" xml:"OriginalSessionId,omitempty"`
	// example:
	//
	// TextGenerate
	SearchModel *string `json:"SearchModel,omitempty" xml:"SearchModel,omitempty"`
	// example:
	//
	// 分类1
	SearchModelDataValue *string `json:"SearchModelDataValue,omitempty" xml:"SearchModelDataValue,omitempty"`
	// example:
	//
	// all
	SelectionType *string `json:"SelectionType,omitempty" xml:"SelectionType,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId        *string                                                                                   `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	TextSearchResult *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResult `json:"TextSearchResult,omitempty" xml:"TextSearchResult,omitempty" type:"Struct"`
}

func (s RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection) SetOriginalSessionId(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection {
	s.OriginalSessionId = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection) SetSearchModel(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection {
	s.SearchModel = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection) SetSearchModelDataValue(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection {
	s.SearchModelDataValue = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection) SetSelectionType(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection {
	s.SelectionType = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection) SetSessionId(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection {
	s.SessionId = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection) SetTextSearchResult(v *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResult) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelection {
	s.TextSearchResult = v
	return s
}

type RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResult struct {
	SearchResult []*RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
}

func (s RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResult) SetSearchResult(v []*RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResult {
	s.SearchResult = v
	return s
}

type RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult struct {
	Chunks []*string `json:"Chunks,omitempty" xml:"Chunks,omitempty" type:"Repeated"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文档-自定义的唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xxx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2024-11-25 14:25:59
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 1
	Score *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// QuarkCommonNews
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// SystemSearch
	SearchSourceType *string `json:"SearchSourceType,omitempty" xml:"SearchSourceType,omitempty"`
	// example:
	//
	// 新华社
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetChunks(v []*string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.Chunks = v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetContent(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.Content = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetDocId(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetDocUuid(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetPubTime(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.PubTime = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetScore(v float32) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.Score = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetSearchSource(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.SearchSource = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetSearchSourceName(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetSearchSourceType(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.SearchSourceType = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetSource(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.Source = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetSummary(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetTitle(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult) SetUrl(v string) *RunSearchGenerationRequestAgentContextBizContextMultimodalMediaSelectionTextSearchResultSearchResult {
	s.Url = &v
	return s
}

type RunSearchGenerationRequestChatConfig struct {
	// example:
	//
	// concise
	GenerateLevel *string `json:"GenerateLevel,omitempty" xml:"GenerateLevel,omitempty"`
	// example:
	//
	// copilotPrecise
	GenerateTechnology *string                                          `json:"GenerateTechnology,omitempty" xml:"GenerateTechnology,omitempty"`
	SearchModels       []*string                                        `json:"SearchModels,omitempty" xml:"SearchModels,omitempty" type:"Repeated"`
	SearchParam        *RunSearchGenerationRequestChatConfigSearchParam `json:"SearchParam,omitempty" xml:"SearchParam,omitempty" type:"Struct"`
}

func (s RunSearchGenerationRequestChatConfig) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationRequestChatConfig) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationRequestChatConfig) SetGenerateLevel(v string) *RunSearchGenerationRequestChatConfig {
	s.GenerateLevel = &v
	return s
}

func (s *RunSearchGenerationRequestChatConfig) SetGenerateTechnology(v string) *RunSearchGenerationRequestChatConfig {
	s.GenerateTechnology = &v
	return s
}

func (s *RunSearchGenerationRequestChatConfig) SetSearchModels(v []*string) *RunSearchGenerationRequestChatConfig {
	s.SearchModels = v
	return s
}

func (s *RunSearchGenerationRequestChatConfig) SetSearchParam(v *RunSearchGenerationRequestChatConfigSearchParam) *RunSearchGenerationRequestChatConfig {
	s.SearchParam = v
	return s
}

type RunSearchGenerationRequestChatConfigSearchParam struct {
	// example:
	//
	// 1725983999999
	EndTime               *int64                                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	MultimodalSearchTypes []*string                                                       `json:"MultimodalSearchTypes,omitempty" xml:"MultimodalSearchTypes,omitempty" type:"Repeated"`
	SearchSources         []*RunSearchGenerationRequestChatConfigSearchParamSearchSources `json:"SearchSources,omitempty" xml:"SearchSources,omitempty" type:"Repeated"`
	// example:
	//
	// 1725983999999
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s RunSearchGenerationRequestChatConfigSearchParam) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationRequestChatConfigSearchParam) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationRequestChatConfigSearchParam) SetEndTime(v int64) *RunSearchGenerationRequestChatConfigSearchParam {
	s.EndTime = &v
	return s
}

func (s *RunSearchGenerationRequestChatConfigSearchParam) SetMultimodalSearchTypes(v []*string) *RunSearchGenerationRequestChatConfigSearchParam {
	s.MultimodalSearchTypes = v
	return s
}

func (s *RunSearchGenerationRequestChatConfigSearchParam) SetSearchSources(v []*RunSearchGenerationRequestChatConfigSearchParamSearchSources) *RunSearchGenerationRequestChatConfigSearchParam {
	s.SearchSources = v
	return s
}

func (s *RunSearchGenerationRequestChatConfigSearchParam) SetStartTime(v int64) *RunSearchGenerationRequestChatConfigSearchParam {
	s.StartTime = &v
	return s
}

type RunSearchGenerationRequestChatConfigSearchParamSearchSources struct {
	// example:
	//
	// SystemSearch
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// QuarkCommonNews
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
}

func (s RunSearchGenerationRequestChatConfigSearchParamSearchSources) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationRequestChatConfigSearchParamSearchSources) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationRequestChatConfigSearchParamSearchSources) SetCode(v string) *RunSearchGenerationRequestChatConfigSearchParamSearchSources {
	s.Code = &v
	return s
}

func (s *RunSearchGenerationRequestChatConfigSearchParamSearchSources) SetDatasetName(v string) *RunSearchGenerationRequestChatConfigSearchParamSearchSources {
	s.DatasetName = &v
	return s
}

type RunSearchGenerationShrinkRequest struct {
	AgentContextShrink *string `json:"AgentContext,omitempty" xml:"AgentContext,omitempty"`
	// example:
	//
	// xxx
	ChatConfigShrink *string `json:"ChatConfig,omitempty" xml:"ChatConfig,omitempty"`
	// example:
	//
	// qwen-max-latest
	ModelId *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// example:
	//
	// xxx
	OriginalSessionId *string `json:"OriginalSessionId,omitempty" xml:"OriginalSessionId,omitempty"`
	// example:
	//
	// xxx
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 7AA2AE16-D873-5C5F-9708-15396C382EB1
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunSearchGenerationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationShrinkRequest) SetAgentContextShrink(v string) *RunSearchGenerationShrinkRequest {
	s.AgentContextShrink = &v
	return s
}

func (s *RunSearchGenerationShrinkRequest) SetChatConfigShrink(v string) *RunSearchGenerationShrinkRequest {
	s.ChatConfigShrink = &v
	return s
}

func (s *RunSearchGenerationShrinkRequest) SetModelId(v string) *RunSearchGenerationShrinkRequest {
	s.ModelId = &v
	return s
}

func (s *RunSearchGenerationShrinkRequest) SetOriginalSessionId(v string) *RunSearchGenerationShrinkRequest {
	s.OriginalSessionId = &v
	return s
}

func (s *RunSearchGenerationShrinkRequest) SetPrompt(v string) *RunSearchGenerationShrinkRequest {
	s.Prompt = &v
	return s
}

func (s *RunSearchGenerationShrinkRequest) SetTaskId(v string) *RunSearchGenerationShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *RunSearchGenerationShrinkRequest) SetWorkspaceId(v string) *RunSearchGenerationShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunSearchGenerationResponseBody struct {
	Header  *RunSearchGenerationResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunSearchGenerationResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// xx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunSearchGenerationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBody) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBody) SetHeader(v *RunSearchGenerationResponseBodyHeader) *RunSearchGenerationResponseBody {
	s.Header = v
	return s
}

func (s *RunSearchGenerationResponseBody) SetPayload(v *RunSearchGenerationResponseBodyPayload) *RunSearchGenerationResponseBody {
	s.Payload = v
	return s
}

func (s *RunSearchGenerationResponseBody) SetRequestId(v string) *RunSearchGenerationResponseBody {
	s.RequestId = &v
	return s
}

type RunSearchGenerationResponseBodyHeader struct {
	// example:
	//
	// AccessForbid
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// xx
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-failed
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// xx
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// example:
	//
	// 1
	ResponseTime *int64 `json:"ResponseTime,omitempty" xml:"ResponseTime,omitempty"`
	// example:
	//
	// x
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// x
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// xx
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunSearchGenerationResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyHeader) SetErrorCode(v string) *RunSearchGenerationResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunSearchGenerationResponseBodyHeader) SetErrorMessage(v string) *RunSearchGenerationResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunSearchGenerationResponseBodyHeader) SetEvent(v string) *RunSearchGenerationResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunSearchGenerationResponseBodyHeader) SetEventInfo(v string) *RunSearchGenerationResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunSearchGenerationResponseBodyHeader) SetOriginSessionId(v string) *RunSearchGenerationResponseBodyHeader {
	s.OriginSessionId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyHeader) SetResponseTime(v int64) *RunSearchGenerationResponseBodyHeader {
	s.ResponseTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyHeader) SetSessionId(v string) *RunSearchGenerationResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyHeader) SetTaskId(v string) *RunSearchGenerationResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyHeader) SetTraceId(v string) *RunSearchGenerationResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunSearchGenerationResponseBodyPayload struct {
	Output *RunSearchGenerationResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunSearchGenerationResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunSearchGenerationResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayload) SetOutput(v *RunSearchGenerationResponseBodyPayloadOutput) *RunSearchGenerationResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayload) SetUsage(v *RunSearchGenerationResponseBodyPayloadUsage) *RunSearchGenerationResponseBodyPayload {
	s.Usage = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutput struct {
	AgentContext *RunSearchGenerationResponseBodyPayloadOutputAgentContext `json:"AgentContext,omitempty" xml:"AgentContext,omitempty" type:"Struct"`
}

func (s RunSearchGenerationResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutput) SetAgentContext(v *RunSearchGenerationResponseBodyPayloadOutputAgentContext) *RunSearchGenerationResponseBodyPayloadOutput {
	s.AgentContext = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContext struct {
	BizContext *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext `json:"BizContext,omitempty" xml:"BizContext,omitempty" type:"Struct"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContext) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContext) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContext) SetBizContext(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) *RunSearchGenerationResponseBodyPayloadOutputAgentContext {
	s.BizContext = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext struct {
	// example:
	//
	// start
	CurrentStep      *string                                                                             `json:"CurrentStep,omitempty" xml:"CurrentStep,omitempty"`
	GeneratedContent *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent `json:"GeneratedContent,omitempty" xml:"GeneratedContent,omitempty" type:"Struct"`
	ModelId          *string                                                                             `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// example:
	//
	// search
	NextStep                 *string   `json:"NextStep,omitempty" xml:"NextStep,omitempty"`
	RecommendSearchQueryList []*string `json:"RecommendSearchQueryList,omitempty" xml:"RecommendSearchQueryList,omitempty" type:"Repeated"`
	SearchKeywords           []*string `json:"SearchKeywords,omitempty" xml:"SearchKeywords,omitempty" type:"Repeated"`
	SearchQueryList          []*string `json:"SearchQueryList,omitempty" xml:"SearchQueryList,omitempty" type:"Repeated"`
	// example:
	//
	// searchQuery
	SupplementDataType *string `json:"SupplementDataType,omitempty" xml:"SupplementDataType,omitempty"`
	// example:
	//
	// true
	SupplementEnable *bool                                                                             `json:"SupplementEnable,omitempty" xml:"SupplementEnable,omitempty"`
	TokenCalculate   *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate `json:"TokenCalculate,omitempty" xml:"TokenCalculate,omitempty" type:"Struct"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetCurrentStep(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.CurrentStep = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetGeneratedContent(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.GeneratedContent = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetModelId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.ModelId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetNextStep(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.NextStep = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetRecommendSearchQueryList(v []*string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.RecommendSearchQueryList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetSearchKeywords(v []*string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.SearchKeywords = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetSearchQueryList(v []*string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.SearchQueryList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetSupplementDataType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.SupplementDataType = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetSupplementEnable(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.SupplementEnable = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext) SetTokenCalculate(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContext {
	s.TokenCalculate = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent struct {
	ClusterTopicResult *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult `json:"ClusterTopicResult,omitempty" xml:"ClusterTopicResult,omitempty" type:"Struct"`
	ExcerptResult      *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult      `json:"ExcerptResult,omitempty" xml:"ExcerptResult,omitempty" type:"Struct"`
	ImageSearchResult  *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResult  `json:"ImageSearchResult,omitempty" xml:"ImageSearchResult,omitempty" type:"Struct"`
	NewsElementResult  *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult  `json:"NewsElementResult,omitempty" xml:"NewsElementResult,omitempty" type:"Struct"`
	TextGenerateResult *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult `json:"TextGenerateResult,omitempty" xml:"TextGenerateResult,omitempty" type:"Struct"`
	TextSearchResult   *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult   `json:"TextSearchResult,omitempty" xml:"TextSearchResult,omitempty" type:"Struct"`
	TimelineResult     *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult     `json:"TimelineResult,omitempty" xml:"TimelineResult,omitempty" type:"Struct"`
	VideoSearchResult  *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResult  `json:"VideoSearchResult,omitempty" xml:"VideoSearchResult,omitempty" type:"Struct"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) SetClusterTopicResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent {
	s.ClusterTopicResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) SetExcerptResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent {
	s.ExcerptResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) SetImageSearchResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent {
	s.ImageSearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) SetNewsElementResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent {
	s.NewsElementResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) SetTextGenerateResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent {
	s.TextGenerateResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) SetTextSearchResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent {
	s.TextSearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) SetTimelineResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent {
	s.TimelineResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent) SetVideoSearchResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContent {
	s.VideoSearchResult = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult struct {
	ClusterTopics []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics `json:"ClusterTopics,omitempty" xml:"ClusterTopics,omitempty" type:"Repeated"`
	// example:
	//
	// true
	GenerateFinished *bool `json:"GenerateFinished,omitempty" xml:"GenerateFinished,omitempty"`
	// example:
	//
	// xx
	TextGenerate *string `json:"TextGenerate,omitempty" xml:"TextGenerate,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult) SetClusterTopics(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult {
	s.ClusterTopics = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult) SetGenerateFinished(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult {
	s.GenerateFinished = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult) SetTextGenerate(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResult {
	s.TextGenerate = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics struct {
	ImageSearchResult *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult `json:"ImageSearchResult,omitempty" xml:"ImageSearchResult,omitempty" type:"Struct"`
	TextSearchResult  *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult  `json:"TextSearchResult,omitempty" xml:"TextSearchResult,omitempty" type:"Struct"`
	// example:
	//
	// xx
	Topic             *string                                                                                                                             `json:"Topic,omitempty" xml:"Topic,omitempty"`
	VideoSearchResult *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult `json:"VideoSearchResult,omitempty" xml:"VideoSearchResult,omitempty" type:"Struct"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics) SetImageSearchResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics {
	s.ImageSearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics) SetTextSearchResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics {
	s.TextSearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics) SetTopic(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics {
	s.Topic = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics) SetVideoSearchResult(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopics {
	s.VideoSearchResult = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult struct {
	// example:
	//
	// 1
	Current      *int32                                                                                                                                            `json:"Current,omitempty" xml:"Current,omitempty"`
	SearchResult []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 1
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult) SetCurrent(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult {
	s.Current = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult) SetSearchResult(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult {
	s.SearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult) SetSize(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult {
	s.Size = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult) SetTotal(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResult {
	s.Total = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult struct {
	Article *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResult {
	s.MediaId = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsImageSearchResultSearchResultArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult struct {
	// example:
	//
	// 1
	Current      *int32                                                                                                                                           `json:"Current,omitempty" xml:"Current,omitempty"`
	SearchResult []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 1
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult) SetCurrent(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult {
	s.Current = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult) SetSearchResult(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult {
	s.SearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult) SetSize(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult {
	s.Size = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult) SetTotal(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResult {
	s.Total = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid          *string                                                                                                                                                          `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	MultimodalMedias []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias `json:"MultimodalMedias,omitempty" xml:"MultimodalMedias,omitempty" type:"Repeated"`
	// example:
	//
	// 2023-04-04 08:39:09
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// QuarkCommonNews
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// SystemSearch
	SearchSourceType *string `json:"SearchSourceType,omitempty" xml:"SearchSourceType,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetMultimodalMedias(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.MultimodalMedias = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetPubTime(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.PubTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetSearchSource(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.SearchSource = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetSearchSourceType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.SearchSourceType = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResult {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias struct {
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// image
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias {
	s.MediaId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias) SetMediaType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsTextSearchResultSearchResultMultimodalMedias {
	s.MediaType = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult struct {
	// example:
	//
	// 1
	Current      *int32                                                                                                                                            `json:"Current,omitempty" xml:"Current,omitempty"`
	SearchResult []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 1
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult) SetCurrent(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult {
	s.Current = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult) SetSearchResult(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult {
	s.SearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult) SetSize(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult {
	s.Size = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult) SetTotal(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResult {
	s.Total = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult struct {
	Article   *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle     `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	ClipInfos []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos `json:"ClipInfos,omitempty" xml:"ClipInfos,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult) SetClipInfos(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult {
	s.ClipInfos = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResult {
	s.MediaId = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos struct {
	// example:
	//
	// 1
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 0.9
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// xx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 1
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
	// example:
	//
	// asr
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos) SetFrom(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos {
	s.From = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos) SetScore(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos {
	s.Score = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos) SetText(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos {
	s.Text = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos) SetTo(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos {
	s.To = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos) SetType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentClusterTopicResultClusterTopicsVideoSearchResultSearchResultClipInfos {
	s.Type = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult struct {
	// example:
	//
	// true
	GenerateFinished *bool `json:"GenerateFinished,omitempty" xml:"GenerateFinished,omitempty"`
	// example:
	//
	// concise
	GenerateLevel      *string                                                                                                        `json:"GenerateLevel,omitempty" xml:"GenerateLevel,omitempty"`
	ReasonTextGenerate *string                                                                                                        `json:"ReasonTextGenerate,omitempty" xml:"ReasonTextGenerate,omitempty"`
	SearchResult       []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	TextGenerate *string `json:"TextGenerate,omitempty" xml:"TextGenerate,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult) SetGenerateFinished(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult {
	s.GenerateFinished = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult) SetGenerateLevel(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult {
	s.GenerateLevel = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult) SetReasonTextGenerate(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult {
	s.ReasonTextGenerate = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult) SetSearchResult(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult {
	s.SearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult) SetTextGenerate(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResult {
	s.TextGenerate = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult struct {
	Chunks []*string `json:"Chunks,omitempty" xml:"Chunks,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// xx
	Excerpt          *string                                                                                                                        `json:"Excerpt,omitempty" xml:"Excerpt,omitempty"`
	MultimodalMedias []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias `json:"MultimodalMedias,omitempty" xml:"MultimodalMedias,omitempty" type:"Repeated"`
	// example:
	//
	// 2023-04-04 08:39:09
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 0.99
	Score *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// QuarkCommonNews
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// SystemSearch
	SearchSourceType *string `json:"SearchSourceType,omitempty" xml:"SearchSourceType,omitempty"`
	// example:
	//
	// true
	Select *bool `json:"Select,omitempty" xml:"Select,omitempty"`
	// example:
	//
	// xx
	Summary                         *string                                                                                                                                       `json:"Summary,omitempty" xml:"Summary,omitempty"`
	TextGenerateMultimodalMediaList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList `json:"TextGenerateMultimodalMediaList,omitempty" xml:"TextGenerateMultimodalMediaList,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 1
	TraceabilityId *int32 `json:"TraceabilityId,omitempty" xml:"TraceabilityId,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetChunks(v []*string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.Chunks = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetContent(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.Content = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetExcerpt(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.Excerpt = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetMultimodalMedias(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.MultimodalMedias = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetPubTime(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.PubTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetScore(v float32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.Score = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetSearchSource(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.SearchSource = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetSearchSourceType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.SearchSourceType = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetSelect(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.Select = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetTextGenerateMultimodalMediaList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.TextGenerateMultimodalMediaList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetTraceabilityId(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.TraceabilityId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResult {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias struct {
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// image
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias {
	s.MediaId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias) SetMediaType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultMultimodalMedias {
	s.MediaType = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList struct {
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 1
	End                 *int32                                                                                                                                                           `json:"End,omitempty" xml:"End,omitempty"`
	MultimodalMediaList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList `json:"MultimodalMediaList,omitempty" xml:"MultimodalMediaList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Start *int32 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList) SetEnd(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList {
	s.End = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList) SetMultimodalMediaList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList {
	s.MultimodalMediaList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList) SetStart(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaList {
	s.Start = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList struct {
	Article *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// image
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.MediaId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList) SetMediaType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.MediaType = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// xxx
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentExcerptResultSearchResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResult struct {
	SearchResult []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResult) SetSearchResult(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResult {
	s.SearchResult = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult struct {
	Article *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResult {
	s.MediaId = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentImageSearchResultSearchResultArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult struct {
	// example:
	//
	// true
	GenerateFinished       *bool                                                                                                                        `json:"GenerateFinished,omitempty" xml:"GenerateFinished,omitempty"`
	NewsElementArticleList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList `json:"NewsElementArticleList,omitempty" xml:"NewsElementArticleList,omitempty" type:"Repeated"`
	// example:
	//
	// x
	TextGenerate *string `json:"TextGenerate,omitempty" xml:"TextGenerate,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult) SetGenerateFinished(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult {
	s.GenerateFinished = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult) SetNewsElementArticleList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult {
	s.NewsElementArticleList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult) SetTextGenerate(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResult {
	s.TextGenerate = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList struct {
	Article         *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle           `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	NewsElementList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList `json:"NewsElementList,omitempty" xml:"NewsElementList,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	TextGenerate *string `json:"TextGenerate,omitempty" xml:"TextGenerate,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList) SetNewsElementList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList {
	s.NewsElementList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList) SetTextGenerate(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleList {
	s.TextGenerate = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle struct {
	// example:
	//
	// xx
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2023-04-04 08:39:09
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 0.99
	Score *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// QuarkCommonNews
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// SystemSearch
	SearchSourceType *string `json:"SearchSourceType,omitempty" xml:"SearchSourceType,omitempty"`
	// example:
	//
	// true
	Select *bool `json:"Select,omitempty" xml:"Select,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetContent(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.Content = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetPubTime(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.PubTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetScore(v float32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.Score = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetSearchSource(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.SearchSource = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetSearchSourceType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.SearchSourceType = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetSelect(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.Select = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList struct {
	// example:
	//
	// task-started
	Event *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent `json:"Event,omitempty" xml:"Event,omitempty" type:"Struct"`
	// example:
	//
	// xx
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// example:
	//
	// xx
	People *string `json:"People,omitempty" xml:"People,omitempty"`
	// example:
	//
	// 时间
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList) SetEvent(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList {
	s.Event = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList) SetLocation(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList {
	s.Location = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList) SetPeople(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList {
	s.People = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList) SetTime(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementList {
	s.Time = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent struct {
	CauseList   []*string `json:"CauseList,omitempty" xml:"CauseList,omitempty" type:"Repeated"`
	ProcessList []*string `json:"ProcessList,omitempty" xml:"ProcessList,omitempty" type:"Repeated"`
	ResultList  []*string `json:"ResultList,omitempty" xml:"ResultList,omitempty" type:"Repeated"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent) SetCauseList(v []*string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent {
	s.CauseList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent) SetProcessList(v []*string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent {
	s.ProcessList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent) SetResultList(v []*string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentNewsElementResultNewsElementArticleListNewsElementListEvent {
	s.ResultList = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult struct {
	// example:
	//
	// true
	GenerateFinished *bool `json:"GenerateFinished,omitempty" xml:"GenerateFinished,omitempty"`
	// example:
	//
	// concise
	GenerateLevel              *string                                                                                                                           `json:"GenerateLevel,omitempty" xml:"GenerateLevel,omitempty"`
	GenerateTraceability       *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceability         `json:"GenerateTraceability,omitempty" xml:"GenerateTraceability,omitempty" type:"Struct"`
	MultimodalSearchResultList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList `json:"MultimodalSearchResultList,omitempty" xml:"MultimodalSearchResultList,omitempty" type:"Repeated"`
	ReasonTextGenerate         *string                                                                                                                           `json:"ReasonTextGenerate,omitempty" xml:"ReasonTextGenerate,omitempty"`
	ReferenceList              []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList              `json:"ReferenceList,omitempty" xml:"ReferenceList,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	TextGenerate                    *string                                                                                                                                `json:"TextGenerate,omitempty" xml:"TextGenerate,omitempty"`
	TextGenerateMultimodalMediaList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList `json:"TextGenerateMultimodalMediaList,omitempty" xml:"TextGenerateMultimodalMediaList,omitempty" type:"Repeated"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) SetGenerateFinished(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult {
	s.GenerateFinished = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) SetGenerateLevel(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult {
	s.GenerateLevel = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) SetGenerateTraceability(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceability) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult {
	s.GenerateTraceability = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) SetMultimodalSearchResultList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult {
	s.MultimodalSearchResultList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) SetReasonTextGenerate(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult {
	s.ReasonTextGenerate = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) SetReferenceList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult {
	s.ReferenceList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) SetTextGenerate(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult {
	s.TextGenerate = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult) SetTextGenerateMultimodalMediaList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResult {
	s.TextGenerateMultimodalMediaList = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceability struct {
	Coordinates []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinates `json:"Coordinates,omitempty" xml:"Coordinates,omitempty" type:"Repeated"`
	// example:
	//
	// 0.9
	Duplicate *float64 `json:"Duplicate,omitempty" xml:"Duplicate,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceability) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceability) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceability) SetCoordinates(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinates) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceability {
	s.Coordinates = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceability) SetDuplicate(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceability {
	s.Duplicate = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinates struct {
	GenerateCoordinate *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate `json:"GenerateCoordinate,omitempty" xml:"GenerateCoordinate,omitempty" type:"Struct"`
	NewsCoordinate     *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate     `json:"NewsCoordinate,omitempty" xml:"NewsCoordinate,omitempty" type:"Struct"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinates) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinates) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinates) SetGenerateCoordinate(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinates {
	s.GenerateCoordinate = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinates) SetNewsCoordinate(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinates {
	s.NewsCoordinate = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate struct {
	// example:
	//
	// 1
	X *int32 `json:"X,omitempty" xml:"X,omitempty"`
	// example:
	//
	// 1
	Y *int32 `json:"Y,omitempty" xml:"Y,omitempty"`
	// example:
	//
	// 1
	Z *int32 `json:"Z,omitempty" xml:"Z,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate) SetX(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate {
	s.X = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate) SetY(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate {
	s.Y = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate) SetZ(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesGenerateCoordinate {
	s.Z = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate struct {
	// example:
	//
	// 1
	X *int32 `json:"X,omitempty" xml:"X,omitempty"`
	// example:
	//
	// 1
	Y *int32 `json:"Y,omitempty" xml:"Y,omitempty"`
	// example:
	//
	// 1
	Z *int32 `json:"Z,omitempty" xml:"Z,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate) SetX(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate {
	s.X = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate) SetY(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate {
	s.Y = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate) SetZ(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultGenerateTraceabilityCoordinatesNewsCoordinate {
	s.Z = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList struct {
	// example:
	//
	// 1
	Current *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	// example:
	//
	// xx
	SearchQuery  *string                                                                                                                                       `json:"SearchQuery,omitempty" xml:"SearchQuery,omitempty"`
	SearchResult []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
	// example:
	//
	// realtime
	SearchType *string `json:"SearchType,omitempty" xml:"SearchType,omitempty"`
	// example:
	//
	// 1
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 时间脉络-时间
	TimelineDateStr *string `json:"TimelineDateStr,omitempty" xml:"TimelineDateStr,omitempty"`
	// example:
	//
	// 1
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) SetCurrent(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList {
	s.Current = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) SetSearchQuery(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList {
	s.SearchQuery = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) SetSearchResult(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList {
	s.SearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) SetSearchType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList {
	s.SearchType = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) SetSize(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList {
	s.Size = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) SetTimelineDateStr(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList {
	s.TimelineDateStr = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList) SetTotal(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultList {
	s.Total = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult struct {
	Article   *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle     `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	ClipInfos []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos `json:"ClipInfos,omitempty" xml:"ClipInfos,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// image
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult) SetClipInfos(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult {
	s.ClipInfos = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult {
	s.MediaId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult) SetMediaType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResult {
	s.MediaType = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// xx
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos struct {
	// example:
	//
	// 1
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 0.1
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// xx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 1
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
	// example:
	//
	// asr
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos) SetFrom(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos {
	s.From = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos) SetScore(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos {
	s.Score = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos) SetText(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos {
	s.Text = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos) SetTo(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos {
	s.To = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos) SetType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultMultimodalSearchResultListSearchResultClipInfos {
	s.Type = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList struct {
	Chunks []*string `json:"Chunks,omitempty" xml:"Chunks,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2023-04-04 08:39:09
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 0.99
	Score *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// QuarkCommonNews
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// SystemSearch
	SearchSourceType *string `json:"SearchSourceType,omitempty" xml:"SearchSourceType,omitempty"`
	// example:
	//
	// true
	Select *bool `json:"Select,omitempty" xml:"Select,omitempty"`
	// example:
	//
	// 新华社
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 1
	TraceabilityId *int32 `json:"TraceabilityId,omitempty" xml:"TraceabilityId,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetChunks(v []*string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.Chunks = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetContent(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.Content = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetPubTime(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.PubTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetScore(v float32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.Score = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetSearchSource(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.SearchSource = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetSearchSourceType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.SearchSourceType = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetSelect(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.Select = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetSource(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.Source = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetTraceabilityId(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.TraceabilityId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultReferenceList {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList struct {
	// example:
	//
	// 1
	End                 *int32                                                                                                                                                    `json:"End,omitempty" xml:"End,omitempty"`
	MultimodalMediaList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList `json:"MultimodalMediaList,omitempty" xml:"MultimodalMediaList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Start *int32 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList) SetEnd(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList {
	s.End = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList) SetMultimodalMediaList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList {
	s.MultimodalMediaList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList) SetStart(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaList {
	s.Start = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList struct {
	Article *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// image
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.MediaId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList) SetMediaType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.MediaType = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// xx
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextGenerateResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult struct {
	Current      *int32                                                                                                            `json:"Current,omitempty" xml:"Current,omitempty"`
	SearchResult []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
	Size         *int32                                                                                                            `json:"Size,omitempty" xml:"Size,omitempty"`
	Total        *int32                                                                                                            `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult) SetCurrent(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult {
	s.Current = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult) SetSearchResult(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult {
	s.SearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult) SetSize(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult {
	s.Size = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult) SetTotal(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResult {
	s.Total = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult struct {
	// example:
	//
	// xx
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2024-11-25 14:25:59
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// QuarkCommonNews
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// example:
	//
	// xxx
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// SystemSearch
	SearchSourceType *string `json:"SearchSourceType,omitempty" xml:"SearchSourceType,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetContent(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.Content = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetPubTime(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.PubTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetSearchSource(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.SearchSource = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetSearchSourceType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.SearchSourceType = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTextSearchResultSearchResult {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult struct {
	// example:
	//
	// true
	GenerateFinished           *bool                                                                                                                         `json:"GenerateFinished,omitempty" xml:"GenerateFinished,omitempty"`
	GenerateTraceability       *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceability         `json:"GenerateTraceability,omitempty" xml:"GenerateTraceability,omitempty" type:"Struct"`
	MultimodalSearchResultList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultList `json:"MultimodalSearchResultList,omitempty" xml:"MultimodalSearchResultList,omitempty" type:"Repeated"`
	ReasonTextGenerate         *string                                                                                                                       `json:"ReasonTextGenerate,omitempty" xml:"ReasonTextGenerate,omitempty"`
	ReferenceList              []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList              `json:"ReferenceList,omitempty" xml:"ReferenceList,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	TextGenerate                    *string                                                                                                                            `json:"TextGenerate,omitempty" xml:"TextGenerate,omitempty"`
	TextGenerateMultimodalMediaList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList `json:"TextGenerateMultimodalMediaList,omitempty" xml:"TextGenerateMultimodalMediaList,omitempty" type:"Repeated"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) SetGenerateFinished(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult {
	s.GenerateFinished = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) SetGenerateTraceability(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceability) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult {
	s.GenerateTraceability = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) SetMultimodalSearchResultList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult {
	s.MultimodalSearchResultList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) SetReasonTextGenerate(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult {
	s.ReasonTextGenerate = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) SetReferenceList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult {
	s.ReferenceList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) SetTextGenerate(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult {
	s.TextGenerate = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult) SetTextGenerateMultimodalMediaList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResult {
	s.TextGenerateMultimodalMediaList = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceability struct {
	Coordinates []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinates `json:"Coordinates,omitempty" xml:"Coordinates,omitempty" type:"Repeated"`
	// example:
	//
	// 0.9
	Duplicate *float64 `json:"Duplicate,omitempty" xml:"Duplicate,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceability) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceability) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceability) SetCoordinates(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinates) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceability {
	s.Coordinates = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceability) SetDuplicate(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceability {
	s.Duplicate = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinates struct {
	GenerateCoordinate *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate `json:"GenerateCoordinate,omitempty" xml:"GenerateCoordinate,omitempty" type:"Struct"`
	NewsCoordinate     *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate     `json:"NewsCoordinate,omitempty" xml:"NewsCoordinate,omitempty" type:"Struct"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinates) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinates) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinates) SetGenerateCoordinate(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinates {
	s.GenerateCoordinate = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinates) SetNewsCoordinate(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinates {
	s.NewsCoordinate = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate struct {
	// example:
	//
	// 1
	X *int32 `json:"X,omitempty" xml:"X,omitempty"`
	// example:
	//
	// 1
	Y *int32 `json:"Y,omitempty" xml:"Y,omitempty"`
	// example:
	//
	// 1
	Z *int32 `json:"Z,omitempty" xml:"Z,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate) SetX(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate {
	s.X = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate) SetY(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate {
	s.Y = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate) SetZ(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesGenerateCoordinate {
	s.Z = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate struct {
	// example:
	//
	// 1
	X *int32 `json:"X,omitempty" xml:"X,omitempty"`
	// example:
	//
	// 1
	Y *int32 `json:"Y,omitempty" xml:"Y,omitempty"`
	// example:
	//
	// 1
	Z *int32 `json:"Z,omitempty" xml:"Z,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate) SetX(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate {
	s.X = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate) SetY(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate {
	s.Y = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate) SetZ(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultGenerateTraceabilityCoordinatesNewsCoordinate {
	s.Z = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultList struct {
	SearchResult []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
	// example:
	//
	// 2024-09-11
	TimelineDateStr *string `json:"TimelineDateStr,omitempty" xml:"TimelineDateStr,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultList) SetSearchResult(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultList {
	s.SearchResult = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultList) SetTimelineDateStr(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultList {
	s.TimelineDateStr = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult struct {
	Article   *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle     `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	ClipInfos []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos `json:"ClipInfos,omitempty" xml:"ClipInfos,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// image
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult) SetClipInfos(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult {
	s.ClipInfos = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult {
	s.MediaId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult) SetMediaType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResult {
	s.MediaType = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos struct {
	// example:
	//
	// 1
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 0.99
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// xx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 1
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
	// example:
	//
	// asr
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos) SetFrom(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos {
	s.From = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos) SetScore(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos {
	s.Score = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos) SetText(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos {
	s.Text = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos) SetTo(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos {
	s.To = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos) SetType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultMultimodalSearchResultListSearchResultClipInfos {
	s.Type = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList struct {
	Chunks []*string `json:"Chunks,omitempty" xml:"Chunks,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2023-04-04 08:39:09
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 0.99
	Score *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// QuarkCommonNews
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// SystemSearch
	SearchSourceType *string `json:"SearchSourceType,omitempty" xml:"SearchSourceType,omitempty"`
	// example:
	//
	// true
	Select *bool `json:"Select,omitempty" xml:"Select,omitempty"`
	// example:
	//
	// 新华社
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 1
	TraceabilityId *int32 `json:"TraceabilityId,omitempty" xml:"TraceabilityId,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetChunks(v []*string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.Chunks = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetContent(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.Content = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetPubTime(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.PubTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetScore(v float32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.Score = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetSearchSource(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.SearchSource = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetSearchSourceType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.SearchSourceType = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetSelect(v bool) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.Select = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetSource(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.Source = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetTraceabilityId(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.TraceabilityId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultReferenceList {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList struct {
	// example:
	//
	// 1
	End                 *int32                                                                                                                                                `json:"End,omitempty" xml:"End,omitempty"`
	MultimodalMediaList []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList `json:"MultimodalMediaList,omitempty" xml:"MultimodalMediaList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Start *int32 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList) SetEnd(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList {
	s.End = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList) SetMultimodalMediaList(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList {
	s.MultimodalMediaList = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList) SetStart(v int32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaList {
	s.Start = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList struct {
	Article *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// image
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.MediaId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList) SetMediaType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaList {
	s.MediaType = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xxxx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentTimelineResultTextGenerateMultimodalMediaListMultimodalMediaListArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResult struct {
	SearchResult []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult `json:"SearchResult,omitempty" xml:"SearchResult,omitempty" type:"Repeated"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResult) SetSearchResult(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResult {
	s.SearchResult = v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult struct {
	Article   *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle     `json:"Article,omitempty" xml:"Article,omitempty" type:"Struct"`
	ClipInfos []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos `json:"ClipInfos,omitempty" xml:"ClipInfos,omitempty" type:"Repeated"`
	// example:
	//
	// xx
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// xx
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult) SetArticle(v *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult {
	s.Article = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult) SetClipInfos(v []*RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult {
	s.ClipInfos = v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult) SetFileUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult {
	s.FileUrl = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult) SetMediaId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResult {
	s.MediaId = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle struct {
	// example:
	//
	// xx
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// xx
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 互联网搜索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle) SetDocId(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle {
	s.DocId = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle) SetDocUuid(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle {
	s.DocUuid = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle) SetSearchSourceName(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle) SetSummary(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle {
	s.Summary = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle) SetTitle(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle {
	s.Title = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle) SetUrl(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultArticle {
	s.Url = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos struct {
	// example:
	//
	// 1
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 0.8
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// xx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
	// example:
	//
	// 1
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
	// example:
	//
	// asr
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos) SetFrom(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos {
	s.From = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos) SetScore(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos {
	s.Score = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos) SetText(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos {
	s.Text = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos) SetTo(v float64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos {
	s.To = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos) SetType(v string) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextGeneratedContentVideoSearchResultSearchResultClipInfos {
	s.Type = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate struct {
	FirstTokenTime *float32 `json:"FirstTokenTime,omitempty" xml:"FirstTokenTime,omitempty"`
	OutputAvgTime  *float32 `json:"OutputAvgTime,omitempty" xml:"OutputAvgTime,omitempty"`
	SearchTime     *float32 `json:"SearchTime,omitempty" xml:"SearchTime,omitempty"`
	Time           *float32 `json:"Time,omitempty" xml:"Time,omitempty"`
	TotalTokens    *int64   `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate) SetFirstTokenTime(v float32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate {
	s.FirstTokenTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate) SetOutputAvgTime(v float32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate {
	s.OutputAvgTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate) SetSearchTime(v float32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate {
	s.SearchTime = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate) SetTime(v float32) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate {
	s.Time = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate) SetTotalTokens(v int64) *RunSearchGenerationResponseBodyPayloadOutputAgentContextBizContextTokenCalculate {
	s.TotalTokens = &v
	return s
}

type RunSearchGenerationResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 2
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 3
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunSearchGenerationResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponseBodyPayloadUsage) SetInputTokens(v int64) *RunSearchGenerationResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunSearchGenerationResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunSearchGenerationResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunSearchGenerationResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunSearchGenerationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunSearchGenerationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunSearchGenerationResponse) String() string {
	return tea.Prettify(s)
}

func (s RunSearchGenerationResponse) GoString() string {
	return s.String()
}

func (s *RunSearchGenerationResponse) SetHeaders(v map[string]*string) *RunSearchGenerationResponse {
	s.Headers = v
	return s
}

func (s *RunSearchGenerationResponse) SetStatusCode(v int32) *RunSearchGenerationResponse {
	s.StatusCode = &v
	return s
}

func (s *RunSearchGenerationResponse) SetBody(v *RunSearchGenerationResponseBody) *RunSearchGenerationResponse {
	s.Body = v
	return s
}

type RunSearchSimilarArticlesRequest struct {
	ChatConfig *RunSearchSimilarArticlesRequestChatConfig `json:"ChatConfig,omitempty" xml:"ChatConfig,omitempty" type:"Struct"`
	// example:
	//
	// html
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	Title   *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://xxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunSearchSimilarArticlesRequest) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesRequest) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesRequest) SetChatConfig(v *RunSearchSimilarArticlesRequestChatConfig) *RunSearchSimilarArticlesRequest {
	s.ChatConfig = v
	return s
}

func (s *RunSearchSimilarArticlesRequest) SetDocType(v string) *RunSearchSimilarArticlesRequest {
	s.DocType = &v
	return s
}

func (s *RunSearchSimilarArticlesRequest) SetTitle(v string) *RunSearchSimilarArticlesRequest {
	s.Title = &v
	return s
}

func (s *RunSearchSimilarArticlesRequest) SetUrl(v string) *RunSearchSimilarArticlesRequest {
	s.Url = &v
	return s
}

func (s *RunSearchSimilarArticlesRequest) SetWorkspaceId(v string) *RunSearchSimilarArticlesRequest {
	s.WorkspaceId = &v
	return s
}

type RunSearchSimilarArticlesRequestChatConfig struct {
	SearchParam *RunSearchSimilarArticlesRequestChatConfigSearchParam `json:"SearchParam,omitempty" xml:"SearchParam,omitempty" type:"Struct"`
}

func (s RunSearchSimilarArticlesRequestChatConfig) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesRequestChatConfig) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesRequestChatConfig) SetSearchParam(v *RunSearchSimilarArticlesRequestChatConfigSearchParam) *RunSearchSimilarArticlesRequestChatConfig {
	s.SearchParam = v
	return s
}

type RunSearchSimilarArticlesRequestChatConfigSearchParam struct {
	SearchSources []*RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources `json:"SearchSources,omitempty" xml:"SearchSources,omitempty" type:"Repeated"`
}

func (s RunSearchSimilarArticlesRequestChatConfigSearchParam) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesRequestChatConfigSearchParam) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesRequestChatConfigSearchParam) SetSearchSources(v []*RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources) *RunSearchSimilarArticlesRequestChatConfigSearchParam {
	s.SearchSources = v
	return s
}

type RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources struct {
	// example:
	//
	// SystemSearch
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources) SetCode(v string) *RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources {
	s.Code = &v
	return s
}

func (s *RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources) SetDatasetName(v string) *RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources {
	s.DatasetName = &v
	return s
}

func (s *RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources) SetName(v string) *RunSearchSimilarArticlesRequestChatConfigSearchParamSearchSources {
	s.Name = &v
	return s
}

type RunSearchSimilarArticlesShrinkRequest struct {
	ChatConfigShrink *string `json:"ChatConfig,omitempty" xml:"ChatConfig,omitempty"`
	// example:
	//
	// html
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	Title   *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://xxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunSearchSimilarArticlesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesShrinkRequest) SetChatConfigShrink(v string) *RunSearchSimilarArticlesShrinkRequest {
	s.ChatConfigShrink = &v
	return s
}

func (s *RunSearchSimilarArticlesShrinkRequest) SetDocType(v string) *RunSearchSimilarArticlesShrinkRequest {
	s.DocType = &v
	return s
}

func (s *RunSearchSimilarArticlesShrinkRequest) SetTitle(v string) *RunSearchSimilarArticlesShrinkRequest {
	s.Title = &v
	return s
}

func (s *RunSearchSimilarArticlesShrinkRequest) SetUrl(v string) *RunSearchSimilarArticlesShrinkRequest {
	s.Url = &v
	return s
}

func (s *RunSearchSimilarArticlesShrinkRequest) SetWorkspaceId(v string) *RunSearchSimilarArticlesShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunSearchSimilarArticlesResponseBody struct {
	Header  *RunSearchSimilarArticlesResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunSearchSimilarArticlesResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunSearchSimilarArticlesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesResponseBody) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesResponseBody) SetHeader(v *RunSearchSimilarArticlesResponseBodyHeader) *RunSearchSimilarArticlesResponseBody {
	s.Header = v
	return s
}

func (s *RunSearchSimilarArticlesResponseBody) SetPayload(v *RunSearchSimilarArticlesResponseBodyPayload) *RunSearchSimilarArticlesResponseBody {
	s.Payload = v
	return s
}

func (s *RunSearchSimilarArticlesResponseBody) SetRequestId(v string) *RunSearchSimilarArticlesResponseBody {
	s.RequestId = &v
	return s
}

type RunSearchSimilarArticlesResponseBodyHeader struct {
	// example:
	//
	// 错误码
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 错误信息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s RunSearchSimilarArticlesResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesResponseBodyHeader) SetErrorCode(v string) *RunSearchSimilarArticlesResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyHeader) SetErrorMessage(v string) *RunSearchSimilarArticlesResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyHeader) SetEvent(v string) *RunSearchSimilarArticlesResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyHeader) SetSessionId(v string) *RunSearchSimilarArticlesResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyHeader) SetTaskId(v string) *RunSearchSimilarArticlesResponseBodyHeader {
	s.TaskId = &v
	return s
}

type RunSearchSimilarArticlesResponseBodyPayload struct {
	Output *RunSearchSimilarArticlesResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunSearchSimilarArticlesResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunSearchSimilarArticlesResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesResponseBodyPayload) SetOutput(v *RunSearchSimilarArticlesResponseBodyPayloadOutput) *RunSearchSimilarArticlesResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayload) SetUsage(v *RunSearchSimilarArticlesResponseBodyPayloadUsage) *RunSearchSimilarArticlesResponseBodyPayload {
	s.Usage = v
	return s
}

type RunSearchSimilarArticlesResponseBodyPayloadOutput struct {
	Articles []*RunSearchSimilarArticlesResponseBodyPayloadOutputArticles `json:"Articles,omitempty" xml:"Articles,omitempty" type:"Repeated"`
	// example:
	//
	// 文本生成结果
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunSearchSimilarArticlesResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutput) SetArticles(v []*RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) *RunSearchSimilarArticlesResponseBodyPayloadOutput {
	s.Articles = v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutput) SetText(v string) *RunSearchSimilarArticlesResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunSearchSimilarArticlesResponseBodyPayloadOutputArticles struct {
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// a26c2c1
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2025-01-16 18:07:22
	PubTime          *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// xxx.com
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// xxx
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	Title   *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) SetDocId(v string) *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles {
	s.DocId = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) SetDocUuid(v string) *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles {
	s.DocUuid = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) SetPubTime(v string) *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles {
	s.PubTime = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) SetSearchSourceName(v string) *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles {
	s.SearchSourceName = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) SetSource(v string) *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles {
	s.Source = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) SetSummary(v string) *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles {
	s.Summary = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) SetTitle(v string) *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles {
	s.Title = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles) SetUrl(v string) *RunSearchSimilarArticlesResponseBodyPayloadOutputArticles {
	s.Url = &v
	return s
}

type RunSearchSimilarArticlesResponseBodyPayloadUsage struct {
	// example:
	//
	// 81
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 9
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 50
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunSearchSimilarArticlesResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadUsage) SetInputTokens(v int64) *RunSearchSimilarArticlesResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunSearchSimilarArticlesResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunSearchSimilarArticlesResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunSearchSimilarArticlesResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunSearchSimilarArticlesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunSearchSimilarArticlesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunSearchSimilarArticlesResponse) String() string {
	return tea.Prettify(s)
}

func (s RunSearchSimilarArticlesResponse) GoString() string {
	return s.String()
}

func (s *RunSearchSimilarArticlesResponse) SetHeaders(v map[string]*string) *RunSearchSimilarArticlesResponse {
	s.Headers = v
	return s
}

func (s *RunSearchSimilarArticlesResponse) SetStatusCode(v int32) *RunSearchSimilarArticlesResponse {
	s.StatusCode = &v
	return s
}

func (s *RunSearchSimilarArticlesResponse) SetBody(v *RunSearchSimilarArticlesResponseBody) *RunSearchSimilarArticlesResponse {
	s.Body = v
	return s
}

type RunStepByStepWritingRequest struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 提示词
	Prompt        *string                                   `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	ReferenceData *RunStepByStepWritingRequestReferenceData `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty" type:"Struct"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId   *string                                   `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
	WritingConfig *RunStepByStepWritingRequestWritingConfig `json:"WritingConfig,omitempty" xml:"WritingConfig,omitempty" type:"Struct"`
}

func (s RunStepByStepWritingRequest) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingRequest) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingRequest) SetOriginSessionId(v string) *RunStepByStepWritingRequest {
	s.OriginSessionId = &v
	return s
}

func (s *RunStepByStepWritingRequest) SetPrompt(v string) *RunStepByStepWritingRequest {
	s.Prompt = &v
	return s
}

func (s *RunStepByStepWritingRequest) SetReferenceData(v *RunStepByStepWritingRequestReferenceData) *RunStepByStepWritingRequest {
	s.ReferenceData = v
	return s
}

func (s *RunStepByStepWritingRequest) SetSessionId(v string) *RunStepByStepWritingRequest {
	s.SessionId = &v
	return s
}

func (s *RunStepByStepWritingRequest) SetTaskId(v string) *RunStepByStepWritingRequest {
	s.TaskId = &v
	return s
}

func (s *RunStepByStepWritingRequest) SetWorkspaceId(v string) *RunStepByStepWritingRequest {
	s.WorkspaceId = &v
	return s
}

func (s *RunStepByStepWritingRequest) SetWritingConfig(v *RunStepByStepWritingRequestWritingConfig) *RunStepByStepWritingRequest {
	s.WritingConfig = v
	return s
}

type RunStepByStepWritingRequestReferenceData struct {
	Articles      []*RunStepByStepWritingRequestReferenceDataArticles `json:"Articles,omitempty" xml:"Articles,omitempty" type:"Repeated"`
	MiniDoc       []*string                                           `json:"MiniDoc,omitempty" xml:"MiniDoc,omitempty" type:"Repeated"`
	Outlines      []*RunStepByStepWritingRequestReferenceDataOutlines `json:"Outlines,omitempty" xml:"Outlines,omitempty" type:"Repeated"`
	Summarization []*string                                           `json:"Summarization,omitempty" xml:"Summarization,omitempty" type:"Repeated"`
}

func (s RunStepByStepWritingRequestReferenceData) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingRequestReferenceData) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingRequestReferenceData) SetArticles(v []*RunStepByStepWritingRequestReferenceDataArticles) *RunStepByStepWritingRequestReferenceData {
	s.Articles = v
	return s
}

func (s *RunStepByStepWritingRequestReferenceData) SetMiniDoc(v []*string) *RunStepByStepWritingRequestReferenceData {
	s.MiniDoc = v
	return s
}

func (s *RunStepByStepWritingRequestReferenceData) SetOutlines(v []*RunStepByStepWritingRequestReferenceDataOutlines) *RunStepByStepWritingRequestReferenceData {
	s.Outlines = v
	return s
}

func (s *RunStepByStepWritingRequestReferenceData) SetSummarization(v []*string) *RunStepByStepWritingRequestReferenceData {
	s.Summarization = v
	return s
}

type RunStepByStepWritingRequestReferenceDataArticles struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文档-自定义的唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 8a20e007a6174522af4d6a2657d5526f
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// http://www.example.com
	MediaUrl *string `json:"MediaUrl,omitempty" xml:"MediaUrl,omitempty"`
	// example:
	//
	// 2024-09-10 14:17:54
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 央视网
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标签
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunStepByStepWritingRequestReferenceDataArticles) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingRequestReferenceDataArticles) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetAuthor(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.Author = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetContent(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.Content = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetDocId(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.DocId = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetDocUuid(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.DocUuid = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetMediaUrl(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.MediaUrl = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetPubTime(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.PubTime = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetSource(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.Source = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetSummary(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.Summary = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetTag(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.Tag = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetTitle(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.Title = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataArticles) SetUrl(v string) *RunStepByStepWritingRequestReferenceDataArticles {
	s.Url = &v
	return s
}

type RunStepByStepWritingRequestReferenceDataOutlines struct {
	Articles []*RunStepByStepWritingRequestReferenceDataOutlinesArticles `json:"Articles,omitempty" xml:"Articles,omitempty" type:"Repeated"`
	// example:
	//
	// 大纲
	Outline *string `json:"Outline,omitempty" xml:"Outline,omitempty"`
}

func (s RunStepByStepWritingRequestReferenceDataOutlines) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingRequestReferenceDataOutlines) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingRequestReferenceDataOutlines) SetArticles(v []*RunStepByStepWritingRequestReferenceDataOutlinesArticles) *RunStepByStepWritingRequestReferenceDataOutlines {
	s.Articles = v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataOutlines) SetOutline(v string) *RunStepByStepWritingRequestReferenceDataOutlines {
	s.Outline = &v
	return s
}

type RunStepByStepWritingRequestReferenceDataOutlinesArticles struct {
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 文章链接
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunStepByStepWritingRequestReferenceDataOutlinesArticles) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingRequestReferenceDataOutlinesArticles) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingRequestReferenceDataOutlinesArticles) SetContent(v string) *RunStepByStepWritingRequestReferenceDataOutlinesArticles {
	s.Content = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataOutlinesArticles) SetTitle(v string) *RunStepByStepWritingRequestReferenceDataOutlinesArticles {
	s.Title = &v
	return s
}

func (s *RunStepByStepWritingRequestReferenceDataOutlinesArticles) SetUrl(v string) *RunStepByStepWritingRequestReferenceDataOutlinesArticles {
	s.Url = &v
	return s
}

type RunStepByStepWritingRequestWritingConfig struct {
	// example:
	//
	// media
	Domain    *string                                            `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Keywords  []*string                                          `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
	PromptTag *RunStepByStepWritingRequestWritingConfigPromptTag `json:"PromptTag,omitempty" xml:"PromptTag,omitempty" type:"Struct"`
	// example:
	//
	// 分步骤写作场景，传媒写作支持的写作场景:新闻写作(默认),新闻评论,通用文体，公文写作支持的写作场景:通知(默认),通告,通报,请示,决定,函,通用文体
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// Writing
	Step              *string                                         `json:"Step,omitempty" xml:"Step,omitempty"`
	SummaryReturnType *string                                         `json:"SummaryReturnType,omitempty" xml:"SummaryReturnType,omitempty"`
	Tags              []*RunStepByStepWritingRequestWritingConfigTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// example:
	//
	// true
	UseSearch *bool `json:"UseSearch,omitempty" xml:"UseSearch,omitempty"`
}

func (s RunStepByStepWritingRequestWritingConfig) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingRequestWritingConfig) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingRequestWritingConfig) SetDomain(v string) *RunStepByStepWritingRequestWritingConfig {
	s.Domain = &v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfig) SetKeywords(v []*string) *RunStepByStepWritingRequestWritingConfig {
	s.Keywords = v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfig) SetPromptTag(v *RunStepByStepWritingRequestWritingConfigPromptTag) *RunStepByStepWritingRequestWritingConfig {
	s.PromptTag = v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfig) SetScene(v string) *RunStepByStepWritingRequestWritingConfig {
	s.Scene = &v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfig) SetStep(v string) *RunStepByStepWritingRequestWritingConfig {
	s.Step = &v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfig) SetSummaryReturnType(v string) *RunStepByStepWritingRequestWritingConfig {
	s.SummaryReturnType = &v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfig) SetTags(v []*RunStepByStepWritingRequestWritingConfigTags) *RunStepByStepWritingRequestWritingConfig {
	s.Tags = v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfig) SetUseSearch(v bool) *RunStepByStepWritingRequestWritingConfig {
	s.UseSearch = &v
	return s
}

type RunStepByStepWritingRequestWritingConfigPromptTag struct {
	// example:
	//
	// 必要提示
	NecessaryTips *string `json:"NecessaryTips,omitempty" xml:"NecessaryTips,omitempty"`
	// example:
	//
	// 立场
	Position *string `json:"Position,omitempty" xml:"Position,omitempty"`
	// example:
	//
	// 反向词
	ReverseWords *string `json:"ReverseWords,omitempty" xml:"ReverseWords,omitempty"`
	// example:
	//
	// 主题
	Theme *string `json:"Theme,omitempty" xml:"Theme,omitempty"`
}

func (s RunStepByStepWritingRequestWritingConfigPromptTag) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingRequestWritingConfigPromptTag) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingRequestWritingConfigPromptTag) SetNecessaryTips(v string) *RunStepByStepWritingRequestWritingConfigPromptTag {
	s.NecessaryTips = &v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfigPromptTag) SetPosition(v string) *RunStepByStepWritingRequestWritingConfigPromptTag {
	s.Position = &v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfigPromptTag) SetReverseWords(v string) *RunStepByStepWritingRequestWritingConfigPromptTag {
	s.ReverseWords = &v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfigPromptTag) SetTheme(v string) *RunStepByStepWritingRequestWritingConfigPromptTag {
	s.Theme = &v
	return s
}

type RunStepByStepWritingRequestWritingConfigTags struct {
	// example:
	//
	// 10
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// gcNumberSizeTag
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s RunStepByStepWritingRequestWritingConfigTags) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingRequestWritingConfigTags) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingRequestWritingConfigTags) SetKeyword(v string) *RunStepByStepWritingRequestWritingConfigTags {
	s.Keyword = &v
	return s
}

func (s *RunStepByStepWritingRequestWritingConfigTags) SetTag(v string) *RunStepByStepWritingRequestWritingConfigTags {
	s.Tag = &v
	return s
}

type RunStepByStepWritingShrinkRequest struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 提示词
	Prompt              *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	ReferenceDataShrink *string `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId         *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
	WritingConfigShrink *string `json:"WritingConfig,omitempty" xml:"WritingConfig,omitempty"`
}

func (s RunStepByStepWritingShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingShrinkRequest) SetOriginSessionId(v string) *RunStepByStepWritingShrinkRequest {
	s.OriginSessionId = &v
	return s
}

func (s *RunStepByStepWritingShrinkRequest) SetPrompt(v string) *RunStepByStepWritingShrinkRequest {
	s.Prompt = &v
	return s
}

func (s *RunStepByStepWritingShrinkRequest) SetReferenceDataShrink(v string) *RunStepByStepWritingShrinkRequest {
	s.ReferenceDataShrink = &v
	return s
}

func (s *RunStepByStepWritingShrinkRequest) SetSessionId(v string) *RunStepByStepWritingShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *RunStepByStepWritingShrinkRequest) SetTaskId(v string) *RunStepByStepWritingShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *RunStepByStepWritingShrinkRequest) SetWorkspaceId(v string) *RunStepByStepWritingShrinkRequest {
	s.WorkspaceId = &v
	return s
}

func (s *RunStepByStepWritingShrinkRequest) SetWritingConfigShrink(v string) *RunStepByStepWritingShrinkRequest {
	s.WritingConfigShrink = &v
	return s
}

type RunStepByStepWritingResponseBody struct {
	Header  *RunStepByStepWritingResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunStepByStepWritingResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunStepByStepWritingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingResponseBody) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingResponseBody) SetHeader(v *RunStepByStepWritingResponseBodyHeader) *RunStepByStepWritingResponseBody {
	s.Header = v
	return s
}

func (s *RunStepByStepWritingResponseBody) SetPayload(v *RunStepByStepWritingResponseBodyPayload) *RunStepByStepWritingResponseBody {
	s.Payload = v
	return s
}

func (s *RunStepByStepWritingResponseBody) SetRequestId(v string) *RunStepByStepWritingResponseBody {
	s.RequestId = &v
	return s
}

type RunStepByStepWritingResponseBodyHeader struct {
	// example:
	//
	// 错误码
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 错误信息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 全链路ID
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunStepByStepWritingResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingResponseBodyHeader) SetErrorCode(v string) *RunStepByStepWritingResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyHeader) SetErrorMessage(v string) *RunStepByStepWritingResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyHeader) SetEvent(v string) *RunStepByStepWritingResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyHeader) SetOriginSessionId(v string) *RunStepByStepWritingResponseBodyHeader {
	s.OriginSessionId = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyHeader) SetSessionId(v string) *RunStepByStepWritingResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyHeader) SetTaskId(v string) *RunStepByStepWritingResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyHeader) SetTraceId(v string) *RunStepByStepWritingResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunStepByStepWritingResponseBodyPayload struct {
	Output *RunStepByStepWritingResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunStepByStepWritingResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunStepByStepWritingResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingResponseBodyPayload) SetOutput(v *RunStepByStepWritingResponseBodyPayloadOutput) *RunStepByStepWritingResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayload) SetUsage(v *RunStepByStepWritingResponseBodyPayloadUsage) *RunStepByStepWritingResponseBodyPayload {
	s.Usage = v
	return s
}

type RunStepByStepWritingResponseBodyPayloadOutput struct {
	Articles    []*RunStepByStepWritingResponseBodyPayloadOutputArticles  `json:"Articles,omitempty" xml:"Articles,omitempty" type:"Repeated"`
	ExtraOutput *RunStepByStepWritingResponseBodyPayloadOutputExtraOutput `json:"ExtraOutput,omitempty" xml:"ExtraOutput,omitempty" type:"Struct"`
	// example:
	//
	// 文章精排之后的片段
	MiniDoc []*string `json:"MiniDoc,omitempty" xml:"MiniDoc,omitempty" type:"Repeated"`
	// example:
	//
	// 大模型改变世界
	SearchQuery *string `json:"SearchQuery,omitempty" xml:"SearchQuery,omitempty"`
	// example:
	//
	// 文本生成结果
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunStepByStepWritingResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingResponseBodyPayloadOutput) SetArticles(v []*RunStepByStepWritingResponseBodyPayloadOutputArticles) *RunStepByStepWritingResponseBodyPayloadOutput {
	s.Articles = v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutput) SetExtraOutput(v *RunStepByStepWritingResponseBodyPayloadOutputExtraOutput) *RunStepByStepWritingResponseBodyPayloadOutput {
	s.ExtraOutput = v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutput) SetMiniDoc(v []*string) *RunStepByStepWritingResponseBodyPayloadOutput {
	s.MiniDoc = v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutput) SetSearchQuery(v string) *RunStepByStepWritingResponseBodyPayloadOutput {
	s.SearchQuery = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutput) SetText(v string) *RunStepByStepWritingResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunStepByStepWritingResponseBodyPayloadOutputArticles struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文档-自定义的唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// f1da53894e784759946d22e2cb2b522a
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// http://www.example.com
	MediaUrl *string `json:"MediaUrl,omitempty" xml:"MediaUrl,omitempty"`
	// example:
	//
	// 2024-09-10 14:17:53
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 央视网
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标签
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunStepByStepWritingResponseBodyPayloadOutputArticles) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingResponseBodyPayloadOutputArticles) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetAuthor(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.Author = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetContent(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.Content = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetDocId(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.DocId = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetDocUuid(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.DocUuid = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetMediaUrl(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.MediaUrl = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetPubTime(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.PubTime = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetSource(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.Source = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetSummary(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.Summary = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetTag(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.Tag = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetTitle(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.Title = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputArticles) SetUrl(v string) *RunStepByStepWritingResponseBodyPayloadOutputArticles {
	s.Url = &v
	return s
}

type RunStepByStepWritingResponseBodyPayloadOutputExtraOutput struct {
	Summarization []*string `json:"summarization,omitempty" xml:"summarization,omitempty" type:"Repeated"`
}

func (s RunStepByStepWritingResponseBodyPayloadOutputExtraOutput) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingResponseBodyPayloadOutputExtraOutput) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingResponseBodyPayloadOutputExtraOutput) SetSummarization(v []*string) *RunStepByStepWritingResponseBodyPayloadOutputExtraOutput {
	s.Summarization = v
	return s
}

type RunStepByStepWritingResponseBodyPayloadUsage struct {
	// example:
	//
	// 65
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 80
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 32
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunStepByStepWritingResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingResponseBodyPayloadUsage) SetInputTokens(v int64) *RunStepByStepWritingResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunStepByStepWritingResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunStepByStepWritingResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunStepByStepWritingResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunStepByStepWritingResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunStepByStepWritingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunStepByStepWritingResponse) String() string {
	return tea.Prettify(s)
}

func (s RunStepByStepWritingResponse) GoString() string {
	return s.String()
}

func (s *RunStepByStepWritingResponse) SetHeaders(v map[string]*string) *RunStepByStepWritingResponse {
	s.Headers = v
	return s
}

func (s *RunStepByStepWritingResponse) SetStatusCode(v int32) *RunStepByStepWritingResponse {
	s.StatusCode = &v
	return s
}

func (s *RunStepByStepWritingResponse) SetBody(v *RunStepByStepWritingResponseBody) *RunStepByStepWritingResponse {
	s.Body = v
	return s
}

type RunStyleFeatureAnalysisRequest struct {
	Contents    []*string `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
	MaterialIds []*int64  `json:"MaterialIds,omitempty" xml:"MaterialIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunStyleFeatureAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s RunStyleFeatureAnalysisRequest) GoString() string {
	return s.String()
}

func (s *RunStyleFeatureAnalysisRequest) SetContents(v []*string) *RunStyleFeatureAnalysisRequest {
	s.Contents = v
	return s
}

func (s *RunStyleFeatureAnalysisRequest) SetMaterialIds(v []*int64) *RunStyleFeatureAnalysisRequest {
	s.MaterialIds = v
	return s
}

func (s *RunStyleFeatureAnalysisRequest) SetWorkspaceId(v string) *RunStyleFeatureAnalysisRequest {
	s.WorkspaceId = &v
	return s
}

type RunStyleFeatureAnalysisShrinkRequest struct {
	ContentsShrink    *string `json:"Contents,omitempty" xml:"Contents,omitempty"`
	MaterialIdsShrink *string `json:"MaterialIds,omitempty" xml:"MaterialIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunStyleFeatureAnalysisShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunStyleFeatureAnalysisShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunStyleFeatureAnalysisShrinkRequest) SetContentsShrink(v string) *RunStyleFeatureAnalysisShrinkRequest {
	s.ContentsShrink = &v
	return s
}

func (s *RunStyleFeatureAnalysisShrinkRequest) SetMaterialIdsShrink(v string) *RunStyleFeatureAnalysisShrinkRequest {
	s.MaterialIdsShrink = &v
	return s
}

func (s *RunStyleFeatureAnalysisShrinkRequest) SetWorkspaceId(v string) *RunStyleFeatureAnalysisShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunStyleFeatureAnalysisResponseBody struct {
	End     *bool                                       `json:"End,omitempty" xml:"End,omitempty"`
	Header  *RunStyleFeatureAnalysisResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunStyleFeatureAnalysisResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunStyleFeatureAnalysisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunStyleFeatureAnalysisResponseBody) GoString() string {
	return s.String()
}

func (s *RunStyleFeatureAnalysisResponseBody) SetEnd(v bool) *RunStyleFeatureAnalysisResponseBody {
	s.End = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBody) SetHeader(v *RunStyleFeatureAnalysisResponseBodyHeader) *RunStyleFeatureAnalysisResponseBody {
	s.Header = v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBody) SetPayload(v *RunStyleFeatureAnalysisResponseBodyPayload) *RunStyleFeatureAnalysisResponseBody {
	s.Payload = v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBody) SetRequestId(v string) *RunStyleFeatureAnalysisResponseBody {
	s.RequestId = &v
	return s
}

type RunStyleFeatureAnalysisResponseBodyHeader struct {
	// example:
	//
	// 403
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// Pop sign mismatch, please check.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// result-generated
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 模型生成事件
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 3cd10828-0e42-471c-8f1a-931cde20b035
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 2150451a17191950923411783e2927
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunStyleFeatureAnalysisResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunStyleFeatureAnalysisResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunStyleFeatureAnalysisResponseBodyHeader) SetErrorCode(v string) *RunStyleFeatureAnalysisResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBodyHeader) SetErrorMessage(v string) *RunStyleFeatureAnalysisResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBodyHeader) SetEvent(v string) *RunStyleFeatureAnalysisResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBodyHeader) SetEventInfo(v string) *RunStyleFeatureAnalysisResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBodyHeader) SetSessionId(v string) *RunStyleFeatureAnalysisResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBodyHeader) SetTaskId(v string) *RunStyleFeatureAnalysisResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBodyHeader) SetTraceId(v string) *RunStyleFeatureAnalysisResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunStyleFeatureAnalysisResponseBodyPayload struct {
	Output *RunStyleFeatureAnalysisResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunStyleFeatureAnalysisResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunStyleFeatureAnalysisResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunStyleFeatureAnalysisResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunStyleFeatureAnalysisResponseBodyPayload) SetOutput(v *RunStyleFeatureAnalysisResponseBodyPayloadOutput) *RunStyleFeatureAnalysisResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBodyPayload) SetUsage(v *RunStyleFeatureAnalysisResponseBodyPayloadUsage) *RunStyleFeatureAnalysisResponseBodyPayload {
	s.Usage = v
	return s
}

type RunStyleFeatureAnalysisResponseBodyPayloadOutput struct {
	// example:
	//
	// 这是测试输出
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunStyleFeatureAnalysisResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunStyleFeatureAnalysisResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunStyleFeatureAnalysisResponseBodyPayloadOutput) SetText(v string) *RunStyleFeatureAnalysisResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunStyleFeatureAnalysisResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunStyleFeatureAnalysisResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunStyleFeatureAnalysisResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunStyleFeatureAnalysisResponseBodyPayloadUsage) SetInputTokens(v int64) *RunStyleFeatureAnalysisResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunStyleFeatureAnalysisResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunStyleFeatureAnalysisResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunStyleFeatureAnalysisResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunStyleFeatureAnalysisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunStyleFeatureAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s RunStyleFeatureAnalysisResponse) GoString() string {
	return s.String()
}

func (s *RunStyleFeatureAnalysisResponse) SetHeaders(v map[string]*string) *RunStyleFeatureAnalysisResponse {
	s.Headers = v
	return s
}

func (s *RunStyleFeatureAnalysisResponse) SetStatusCode(v int32) *RunStyleFeatureAnalysisResponse {
	s.StatusCode = &v
	return s
}

func (s *RunStyleFeatureAnalysisResponse) SetBody(v *RunStyleFeatureAnalysisResponseBody) *RunStyleFeatureAnalysisResponse {
	s.Body = v
	return s
}

type RunSummaryGenerateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 创新政务社交媒体功能。鼓励各地区、各部门结合实际，开发政务社交媒体的特色功能，如在线咨询服务、政策解读、互动问答等，增强政务社交媒体的互动性和实用性，提升公众参与度。
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 请为上述内容生成一段摘要，字数在100~200字以内。
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-2setzb9x4ewsd
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunSummaryGenerateRequest) String() string {
	return tea.Prettify(s)
}

func (s RunSummaryGenerateRequest) GoString() string {
	return s.String()
}

func (s *RunSummaryGenerateRequest) SetContent(v string) *RunSummaryGenerateRequest {
	s.Content = &v
	return s
}

func (s *RunSummaryGenerateRequest) SetPrompt(v string) *RunSummaryGenerateRequest {
	s.Prompt = &v
	return s
}

func (s *RunSummaryGenerateRequest) SetWorkspaceId(v string) *RunSummaryGenerateRequest {
	s.WorkspaceId = &v
	return s
}

type RunSummaryGenerateResponseBody struct {
	End     *bool                                  `json:"End,omitempty" xml:"End,omitempty"`
	Header  *RunSummaryGenerateResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunSummaryGenerateResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunSummaryGenerateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunSummaryGenerateResponseBody) GoString() string {
	return s.String()
}

func (s *RunSummaryGenerateResponseBody) SetEnd(v bool) *RunSummaryGenerateResponseBody {
	s.End = &v
	return s
}

func (s *RunSummaryGenerateResponseBody) SetHeader(v *RunSummaryGenerateResponseBodyHeader) *RunSummaryGenerateResponseBody {
	s.Header = v
	return s
}

func (s *RunSummaryGenerateResponseBody) SetPayload(v *RunSummaryGenerateResponseBodyPayload) *RunSummaryGenerateResponseBody {
	s.Payload = v
	return s
}

func (s *RunSummaryGenerateResponseBody) SetRequestId(v string) *RunSummaryGenerateResponseBody {
	s.RequestId = &v
	return s
}

type RunSummaryGenerateResponseBodyHeader struct {
	// example:
	//
	// 403
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// Pop sign mismatch, please check.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// result-generated
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 模型生成事件
	EventInfo *string `json:"EventInfo,omitempty" xml:"EventInfo,omitempty"`
	// example:
	//
	// 3cd10828-0e42-471c-8f1a-931cde20b035
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// d3be9981-ca2d-4e17-bf31-1c0a628e9f99
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 2150451a17191950923411783e2927
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunSummaryGenerateResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunSummaryGenerateResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunSummaryGenerateResponseBodyHeader) SetErrorCode(v string) *RunSummaryGenerateResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunSummaryGenerateResponseBodyHeader) SetErrorMessage(v string) *RunSummaryGenerateResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunSummaryGenerateResponseBodyHeader) SetEvent(v string) *RunSummaryGenerateResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunSummaryGenerateResponseBodyHeader) SetEventInfo(v string) *RunSummaryGenerateResponseBodyHeader {
	s.EventInfo = &v
	return s
}

func (s *RunSummaryGenerateResponseBodyHeader) SetSessionId(v string) *RunSummaryGenerateResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunSummaryGenerateResponseBodyHeader) SetTaskId(v string) *RunSummaryGenerateResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunSummaryGenerateResponseBodyHeader) SetTraceId(v string) *RunSummaryGenerateResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunSummaryGenerateResponseBodyPayload struct {
	Output *RunSummaryGenerateResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunSummaryGenerateResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunSummaryGenerateResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunSummaryGenerateResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunSummaryGenerateResponseBodyPayload) SetOutput(v *RunSummaryGenerateResponseBodyPayloadOutput) *RunSummaryGenerateResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunSummaryGenerateResponseBodyPayload) SetUsage(v *RunSummaryGenerateResponseBodyPayloadUsage) *RunSummaryGenerateResponseBodyPayload {
	s.Usage = v
	return s
}

type RunSummaryGenerateResponseBodyPayloadOutput struct {
	// example:
	//
	// 这是测试输出
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunSummaryGenerateResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunSummaryGenerateResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunSummaryGenerateResponseBodyPayloadOutput) SetText(v string) *RunSummaryGenerateResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunSummaryGenerateResponseBodyPayloadUsage struct {
	// example:
	//
	// 100
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 100
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 200
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunSummaryGenerateResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunSummaryGenerateResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunSummaryGenerateResponseBodyPayloadUsage) SetInputTokens(v int64) *RunSummaryGenerateResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunSummaryGenerateResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunSummaryGenerateResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunSummaryGenerateResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunSummaryGenerateResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunSummaryGenerateResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunSummaryGenerateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunSummaryGenerateResponse) String() string {
	return tea.Prettify(s)
}

func (s RunSummaryGenerateResponse) GoString() string {
	return s.String()
}

func (s *RunSummaryGenerateResponse) SetHeaders(v map[string]*string) *RunSummaryGenerateResponse {
	s.Headers = v
	return s
}

func (s *RunSummaryGenerateResponse) SetStatusCode(v int32) *RunSummaryGenerateResponse {
	s.StatusCode = &v
	return s
}

func (s *RunSummaryGenerateResponse) SetBody(v *RunSummaryGenerateResponseBody) *RunSummaryGenerateResponse {
	s.Body = v
	return s
}

type RunTextPolishingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 文本内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunTextPolishingRequest) String() string {
	return tea.Prettify(s)
}

func (s RunTextPolishingRequest) GoString() string {
	return s.String()
}

func (s *RunTextPolishingRequest) SetContent(v string) *RunTextPolishingRequest {
	s.Content = &v
	return s
}

func (s *RunTextPolishingRequest) SetWorkspaceId(v string) *RunTextPolishingRequest {
	s.WorkspaceId = &v
	return s
}

type RunTextPolishingResponseBody struct {
	Header  *RunTextPolishingResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunTextPolishingResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunTextPolishingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunTextPolishingResponseBody) GoString() string {
	return s.String()
}

func (s *RunTextPolishingResponseBody) SetHeader(v *RunTextPolishingResponseBodyHeader) *RunTextPolishingResponseBody {
	s.Header = v
	return s
}

func (s *RunTextPolishingResponseBody) SetPayload(v *RunTextPolishingResponseBodyPayload) *RunTextPolishingResponseBody {
	s.Payload = v
	return s
}

func (s *RunTextPolishingResponseBody) SetRequestId(v string) *RunTextPolishingResponseBody {
	s.RequestId = &v
	return s
}

type RunTextPolishingResponseBodyHeader struct {
	// example:
	//
	// 错误码
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 错误信息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 全链路ID
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunTextPolishingResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunTextPolishingResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunTextPolishingResponseBodyHeader) SetErrorCode(v string) *RunTextPolishingResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunTextPolishingResponseBodyHeader) SetErrorMessage(v string) *RunTextPolishingResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunTextPolishingResponseBodyHeader) SetEvent(v string) *RunTextPolishingResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunTextPolishingResponseBodyHeader) SetOriginSessionId(v string) *RunTextPolishingResponseBodyHeader {
	s.OriginSessionId = &v
	return s
}

func (s *RunTextPolishingResponseBodyHeader) SetSessionId(v string) *RunTextPolishingResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunTextPolishingResponseBodyHeader) SetTaskId(v string) *RunTextPolishingResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunTextPolishingResponseBodyHeader) SetTraceId(v string) *RunTextPolishingResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunTextPolishingResponseBodyPayload struct {
	Output *RunTextPolishingResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunTextPolishingResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunTextPolishingResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunTextPolishingResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunTextPolishingResponseBodyPayload) SetOutput(v *RunTextPolishingResponseBodyPayloadOutput) *RunTextPolishingResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunTextPolishingResponseBodyPayload) SetUsage(v *RunTextPolishingResponseBodyPayloadUsage) *RunTextPolishingResponseBodyPayload {
	s.Usage = v
	return s
}

type RunTextPolishingResponseBodyPayloadOutput struct {
	// example:
	//
	// 文本生成结果
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunTextPolishingResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunTextPolishingResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunTextPolishingResponseBodyPayloadOutput) SetText(v string) *RunTextPolishingResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunTextPolishingResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 1
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 2
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunTextPolishingResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunTextPolishingResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunTextPolishingResponseBodyPayloadUsage) SetInputTokens(v int64) *RunTextPolishingResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunTextPolishingResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunTextPolishingResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunTextPolishingResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunTextPolishingResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunTextPolishingResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunTextPolishingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunTextPolishingResponse) String() string {
	return tea.Prettify(s)
}

func (s RunTextPolishingResponse) GoString() string {
	return s.String()
}

func (s *RunTextPolishingResponse) SetHeaders(v map[string]*string) *RunTextPolishingResponse {
	s.Headers = v
	return s
}

func (s *RunTextPolishingResponse) SetStatusCode(v int32) *RunTextPolishingResponse {
	s.StatusCode = &v
	return s
}

func (s *RunTextPolishingResponse) SetBody(v *RunTextPolishingResponseBody) *RunTextPolishingResponse {
	s.Body = v
	return s
}

type RunTitleGenerationRequest struct {
	DeduplicatedTitles []*string `json:"DeduplicatedTitles,omitempty" xml:"DeduplicatedTitles,omitempty" type:"Repeated"`
	// This parameter is required.
	ReferenceData *RunTitleGenerationRequestReferenceData `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty" type:"Struct"`
	// example:
	//
	// xxxx
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TitleCount *string `json:"TitleCount,omitempty" xml:"TitleCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunTitleGenerationRequest) String() string {
	return tea.Prettify(s)
}

func (s RunTitleGenerationRequest) GoString() string {
	return s.String()
}

func (s *RunTitleGenerationRequest) SetDeduplicatedTitles(v []*string) *RunTitleGenerationRequest {
	s.DeduplicatedTitles = v
	return s
}

func (s *RunTitleGenerationRequest) SetReferenceData(v *RunTitleGenerationRequestReferenceData) *RunTitleGenerationRequest {
	s.ReferenceData = v
	return s
}

func (s *RunTitleGenerationRequest) SetTaskId(v string) *RunTitleGenerationRequest {
	s.TaskId = &v
	return s
}

func (s *RunTitleGenerationRequest) SetTitleCount(v string) *RunTitleGenerationRequest {
	s.TitleCount = &v
	return s
}

func (s *RunTitleGenerationRequest) SetWorkspaceId(v string) *RunTitleGenerationRequest {
	s.WorkspaceId = &v
	return s
}

type RunTitleGenerationRequestReferenceData struct {
	// This parameter is required.
	Contents []*string `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
}

func (s RunTitleGenerationRequestReferenceData) String() string {
	return tea.Prettify(s)
}

func (s RunTitleGenerationRequestReferenceData) GoString() string {
	return s.String()
}

func (s *RunTitleGenerationRequestReferenceData) SetContents(v []*string) *RunTitleGenerationRequestReferenceData {
	s.Contents = v
	return s
}

type RunTitleGenerationShrinkRequest struct {
	DeduplicatedTitlesShrink *string `json:"DeduplicatedTitles,omitempty" xml:"DeduplicatedTitles,omitempty"`
	// This parameter is required.
	ReferenceDataShrink *string `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty"`
	// example:
	//
	// xxxx
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TitleCount *string `json:"TitleCount,omitempty" xml:"TitleCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunTitleGenerationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunTitleGenerationShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunTitleGenerationShrinkRequest) SetDeduplicatedTitlesShrink(v string) *RunTitleGenerationShrinkRequest {
	s.DeduplicatedTitlesShrink = &v
	return s
}

func (s *RunTitleGenerationShrinkRequest) SetReferenceDataShrink(v string) *RunTitleGenerationShrinkRequest {
	s.ReferenceDataShrink = &v
	return s
}

func (s *RunTitleGenerationShrinkRequest) SetTaskId(v string) *RunTitleGenerationShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *RunTitleGenerationShrinkRequest) SetTitleCount(v string) *RunTitleGenerationShrinkRequest {
	s.TitleCount = &v
	return s
}

func (s *RunTitleGenerationShrinkRequest) SetWorkspaceId(v string) *RunTitleGenerationShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunTitleGenerationResponseBody struct {
	Code           *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Header         *RunTitleGenerationResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	HttpStatusCode *string                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	Payload        *RunTitleGenerationResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 94512A33-8EC1-5452-A793-5C91F18ED2F0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RunTitleGenerationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunTitleGenerationResponseBody) GoString() string {
	return s.String()
}

func (s *RunTitleGenerationResponseBody) SetCode(v string) *RunTitleGenerationResponseBody {
	s.Code = &v
	return s
}

func (s *RunTitleGenerationResponseBody) SetHeader(v *RunTitleGenerationResponseBodyHeader) *RunTitleGenerationResponseBody {
	s.Header = v
	return s
}

func (s *RunTitleGenerationResponseBody) SetHttpStatusCode(v string) *RunTitleGenerationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RunTitleGenerationResponseBody) SetMessage(v string) *RunTitleGenerationResponseBody {
	s.Message = &v
	return s
}

func (s *RunTitleGenerationResponseBody) SetPayload(v *RunTitleGenerationResponseBodyPayload) *RunTitleGenerationResponseBody {
	s.Payload = v
	return s
}

func (s *RunTitleGenerationResponseBody) SetRequestId(v string) *RunTitleGenerationResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunTitleGenerationResponseBody) SetSuccess(v bool) *RunTitleGenerationResponseBody {
	s.Success = &v
	return s
}

type RunTitleGenerationResponseBodyHeader struct {
	// example:
	//
	// AccessForbid
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// xxx
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-failed
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId  *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	StatusCode *int32  `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
	// example:
	//
	// 50a1cc8e-717e-4a2b-a76b-dc9734a8564b
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 0a3d448f17000139741898287e0eb3
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunTitleGenerationResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunTitleGenerationResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunTitleGenerationResponseBodyHeader) SetErrorCode(v string) *RunTitleGenerationResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunTitleGenerationResponseBodyHeader) SetErrorMessage(v string) *RunTitleGenerationResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunTitleGenerationResponseBodyHeader) SetEvent(v string) *RunTitleGenerationResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunTitleGenerationResponseBodyHeader) SetSessionId(v string) *RunTitleGenerationResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunTitleGenerationResponseBodyHeader) SetStatusCode(v int32) *RunTitleGenerationResponseBodyHeader {
	s.StatusCode = &v
	return s
}

func (s *RunTitleGenerationResponseBodyHeader) SetTaskId(v string) *RunTitleGenerationResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunTitleGenerationResponseBodyHeader) SetTraceId(v string) *RunTitleGenerationResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunTitleGenerationResponseBodyPayload struct {
	Output *RunTitleGenerationResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunTitleGenerationResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunTitleGenerationResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunTitleGenerationResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunTitleGenerationResponseBodyPayload) SetOutput(v *RunTitleGenerationResponseBodyPayloadOutput) *RunTitleGenerationResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunTitleGenerationResponseBodyPayload) SetUsage(v *RunTitleGenerationResponseBodyPayloadUsage) *RunTitleGenerationResponseBodyPayload {
	s.Usage = v
	return s
}

type RunTitleGenerationResponseBodyPayloadOutput struct {
	// example:
	//
	// xxx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunTitleGenerationResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunTitleGenerationResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunTitleGenerationResponseBodyPayloadOutput) SetText(v string) *RunTitleGenerationResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunTitleGenerationResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 1
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 2
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunTitleGenerationResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunTitleGenerationResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunTitleGenerationResponseBodyPayloadUsage) SetInputTokens(v int64) *RunTitleGenerationResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunTitleGenerationResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunTitleGenerationResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunTitleGenerationResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunTitleGenerationResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunTitleGenerationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunTitleGenerationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunTitleGenerationResponse) String() string {
	return tea.Prettify(s)
}

func (s RunTitleGenerationResponse) GoString() string {
	return s.String()
}

func (s *RunTitleGenerationResponse) SetHeaders(v map[string]*string) *RunTitleGenerationResponse {
	s.Headers = v
	return s
}

func (s *RunTitleGenerationResponse) SetStatusCode(v int32) *RunTitleGenerationResponse {
	s.StatusCode = &v
	return s
}

func (s *RunTitleGenerationResponse) SetBody(v *RunTitleGenerationResponseBody) *RunTitleGenerationResponse {
	s.Body = v
	return s
}

type RunTranslateGenerationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// toEnglish
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// This parameter is required.
	ReferenceData *RunTranslateGenerationRequestReferenceData `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty" type:"Struct"`
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunTranslateGenerationRequest) String() string {
	return tea.Prettify(s)
}

func (s RunTranslateGenerationRequest) GoString() string {
	return s.String()
}

func (s *RunTranslateGenerationRequest) SetPrompt(v string) *RunTranslateGenerationRequest {
	s.Prompt = &v
	return s
}

func (s *RunTranslateGenerationRequest) SetReferenceData(v *RunTranslateGenerationRequestReferenceData) *RunTranslateGenerationRequest {
	s.ReferenceData = v
	return s
}

func (s *RunTranslateGenerationRequest) SetTaskId(v string) *RunTranslateGenerationRequest {
	s.TaskId = &v
	return s
}

func (s *RunTranslateGenerationRequest) SetWorkspaceId(v string) *RunTranslateGenerationRequest {
	s.WorkspaceId = &v
	return s
}

type RunTranslateGenerationRequestReferenceData struct {
	// This parameter is required.
	Contents []*string `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
}

func (s RunTranslateGenerationRequestReferenceData) String() string {
	return tea.Prettify(s)
}

func (s RunTranslateGenerationRequestReferenceData) GoString() string {
	return s.String()
}

func (s *RunTranslateGenerationRequestReferenceData) SetContents(v []*string) *RunTranslateGenerationRequestReferenceData {
	s.Contents = v
	return s
}

type RunTranslateGenerationShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// toEnglish
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// This parameter is required.
	ReferenceDataShrink *string `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty"`
	// example:
	//
	// xxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunTranslateGenerationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunTranslateGenerationShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunTranslateGenerationShrinkRequest) SetPrompt(v string) *RunTranslateGenerationShrinkRequest {
	s.Prompt = &v
	return s
}

func (s *RunTranslateGenerationShrinkRequest) SetReferenceDataShrink(v string) *RunTranslateGenerationShrinkRequest {
	s.ReferenceDataShrink = &v
	return s
}

func (s *RunTranslateGenerationShrinkRequest) SetTaskId(v string) *RunTranslateGenerationShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *RunTranslateGenerationShrinkRequest) SetWorkspaceId(v string) *RunTranslateGenerationShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunTranslateGenerationResponseBody struct {
	Header  *RunTranslateGenerationResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunTranslateGenerationResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// DA021073-17CE-5CCF-9FEB-93226C766887
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunTranslateGenerationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunTranslateGenerationResponseBody) GoString() string {
	return s.String()
}

func (s *RunTranslateGenerationResponseBody) SetHeader(v *RunTranslateGenerationResponseBodyHeader) *RunTranslateGenerationResponseBody {
	s.Header = v
	return s
}

func (s *RunTranslateGenerationResponseBody) SetPayload(v *RunTranslateGenerationResponseBodyPayload) *RunTranslateGenerationResponseBody {
	s.Payload = v
	return s
}

func (s *RunTranslateGenerationResponseBody) SetRequestId(v string) *RunTranslateGenerationResponseBody {
	s.RequestId = &v
	return s
}

type RunTranslateGenerationResponseBodyHeader struct {
	// example:
	//
	// AccessForbid
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// xx
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-failed
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 91C2B2B8-7D12-4A8D-A724-1E576D30C096
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 0abb781d17146157564845243e20b5
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunTranslateGenerationResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunTranslateGenerationResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunTranslateGenerationResponseBodyHeader) SetErrorCode(v string) *RunTranslateGenerationResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunTranslateGenerationResponseBodyHeader) SetErrorMessage(v string) *RunTranslateGenerationResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunTranslateGenerationResponseBodyHeader) SetEvent(v string) *RunTranslateGenerationResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunTranslateGenerationResponseBodyHeader) SetSessionId(v string) *RunTranslateGenerationResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunTranslateGenerationResponseBodyHeader) SetTaskId(v string) *RunTranslateGenerationResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunTranslateGenerationResponseBodyHeader) SetTraceId(v string) *RunTranslateGenerationResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunTranslateGenerationResponseBodyPayload struct {
	Output *RunTranslateGenerationResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunTranslateGenerationResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunTranslateGenerationResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunTranslateGenerationResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunTranslateGenerationResponseBodyPayload) SetOutput(v *RunTranslateGenerationResponseBodyPayloadOutput) *RunTranslateGenerationResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunTranslateGenerationResponseBodyPayload) SetUsage(v *RunTranslateGenerationResponseBodyPayloadUsage) *RunTranslateGenerationResponseBodyPayload {
	s.Usage = v
	return s
}

type RunTranslateGenerationResponseBodyPayloadOutput struct {
	// example:
	//
	// xx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunTranslateGenerationResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunTranslateGenerationResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunTranslateGenerationResponseBodyPayloadOutput) SetText(v string) *RunTranslateGenerationResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunTranslateGenerationResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 1
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 2
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunTranslateGenerationResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunTranslateGenerationResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunTranslateGenerationResponseBodyPayloadUsage) SetInputTokens(v int64) *RunTranslateGenerationResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunTranslateGenerationResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunTranslateGenerationResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunTranslateGenerationResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunTranslateGenerationResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunTranslateGenerationResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunTranslateGenerationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunTranslateGenerationResponse) String() string {
	return tea.Prettify(s)
}

func (s RunTranslateGenerationResponse) GoString() string {
	return s.String()
}

func (s *RunTranslateGenerationResponse) SetHeaders(v map[string]*string) *RunTranslateGenerationResponse {
	s.Headers = v
	return s
}

func (s *RunTranslateGenerationResponse) SetStatusCode(v int32) *RunTranslateGenerationResponse {
	s.StatusCode = &v
	return s
}

func (s *RunTranslateGenerationResponse) SetBody(v *RunTranslateGenerationResponseBody) *RunTranslateGenerationResponse {
	s.Body = v
	return s
}

type RunWriteToneGenerationRequest struct {
	// This parameter is required.
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// This parameter is required.
	ReferenceData *RunWriteToneGenerationRequestReferenceData `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty" type:"Struct"`
	// example:
	//
	// 7AA2AE16-D873-5C5F-9708-15396C382EB1
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunWriteToneGenerationRequest) String() string {
	return tea.Prettify(s)
}

func (s RunWriteToneGenerationRequest) GoString() string {
	return s.String()
}

func (s *RunWriteToneGenerationRequest) SetPrompt(v string) *RunWriteToneGenerationRequest {
	s.Prompt = &v
	return s
}

func (s *RunWriteToneGenerationRequest) SetReferenceData(v *RunWriteToneGenerationRequestReferenceData) *RunWriteToneGenerationRequest {
	s.ReferenceData = v
	return s
}

func (s *RunWriteToneGenerationRequest) SetTaskId(v string) *RunWriteToneGenerationRequest {
	s.TaskId = &v
	return s
}

func (s *RunWriteToneGenerationRequest) SetWorkspaceId(v string) *RunWriteToneGenerationRequest {
	s.WorkspaceId = &v
	return s
}

type RunWriteToneGenerationRequestReferenceData struct {
	// This parameter is required.
	Contents []*string `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
}

func (s RunWriteToneGenerationRequestReferenceData) String() string {
	return tea.Prettify(s)
}

func (s RunWriteToneGenerationRequestReferenceData) GoString() string {
	return s.String()
}

func (s *RunWriteToneGenerationRequestReferenceData) SetContents(v []*string) *RunWriteToneGenerationRequestReferenceData {
	s.Contents = v
	return s
}

type RunWriteToneGenerationShrinkRequest struct {
	// This parameter is required.
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// This parameter is required.
	ReferenceDataShrink *string `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty"`
	// example:
	//
	// 7AA2AE16-D873-5C5F-9708-15396C382EB1
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunWriteToneGenerationShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunWriteToneGenerationShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunWriteToneGenerationShrinkRequest) SetPrompt(v string) *RunWriteToneGenerationShrinkRequest {
	s.Prompt = &v
	return s
}

func (s *RunWriteToneGenerationShrinkRequest) SetReferenceDataShrink(v string) *RunWriteToneGenerationShrinkRequest {
	s.ReferenceDataShrink = &v
	return s
}

func (s *RunWriteToneGenerationShrinkRequest) SetTaskId(v string) *RunWriteToneGenerationShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *RunWriteToneGenerationShrinkRequest) SetWorkspaceId(v string) *RunWriteToneGenerationShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type RunWriteToneGenerationResponseBody struct {
	Header  *RunWriteToneGenerationResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunWriteToneGenerationResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// FB698445-61DA-5361-BF73-1C5F1157E888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunWriteToneGenerationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunWriteToneGenerationResponseBody) GoString() string {
	return s.String()
}

func (s *RunWriteToneGenerationResponseBody) SetHeader(v *RunWriteToneGenerationResponseBodyHeader) *RunWriteToneGenerationResponseBody {
	s.Header = v
	return s
}

func (s *RunWriteToneGenerationResponseBody) SetPayload(v *RunWriteToneGenerationResponseBodyPayload) *RunWriteToneGenerationResponseBody {
	s.Payload = v
	return s
}

func (s *RunWriteToneGenerationResponseBody) SetRequestId(v string) *RunWriteToneGenerationResponseBody {
	s.RequestId = &v
	return s
}

type RunWriteToneGenerationResponseBodyHeader struct {
	// example:
	//
	// AccessForbid
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// xxx
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-failed
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// F1953EE6-157C-40DC-BBF1-87C98AC27C51
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// F1953EE6-157C-40DC-BBF1-87C98AC27C51
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// F1953EE6-157C-40DC-BBF1-87C98AC27C51
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunWriteToneGenerationResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunWriteToneGenerationResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunWriteToneGenerationResponseBodyHeader) SetErrorCode(v string) *RunWriteToneGenerationResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunWriteToneGenerationResponseBodyHeader) SetErrorMessage(v string) *RunWriteToneGenerationResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunWriteToneGenerationResponseBodyHeader) SetEvent(v string) *RunWriteToneGenerationResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunWriteToneGenerationResponseBodyHeader) SetSessionId(v string) *RunWriteToneGenerationResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunWriteToneGenerationResponseBodyHeader) SetTaskId(v string) *RunWriteToneGenerationResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunWriteToneGenerationResponseBodyHeader) SetTraceId(v string) *RunWriteToneGenerationResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunWriteToneGenerationResponseBodyPayload struct {
	Output *RunWriteToneGenerationResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunWriteToneGenerationResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunWriteToneGenerationResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunWriteToneGenerationResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunWriteToneGenerationResponseBodyPayload) SetOutput(v *RunWriteToneGenerationResponseBodyPayloadOutput) *RunWriteToneGenerationResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunWriteToneGenerationResponseBodyPayload) SetUsage(v *RunWriteToneGenerationResponseBodyPayloadUsage) *RunWriteToneGenerationResponseBodyPayload {
	s.Usage = v
	return s
}

type RunWriteToneGenerationResponseBodyPayloadOutput struct {
	// example:
	//
	// xxx
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunWriteToneGenerationResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunWriteToneGenerationResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunWriteToneGenerationResponseBodyPayloadOutput) SetText(v string) *RunWriteToneGenerationResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunWriteToneGenerationResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 1
	OutputTokens *int64 `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	// example:
	//
	// 2
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunWriteToneGenerationResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunWriteToneGenerationResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunWriteToneGenerationResponseBodyPayloadUsage) SetInputTokens(v int64) *RunWriteToneGenerationResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunWriteToneGenerationResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunWriteToneGenerationResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunWriteToneGenerationResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunWriteToneGenerationResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunWriteToneGenerationResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunWriteToneGenerationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunWriteToneGenerationResponse) String() string {
	return tea.Prettify(s)
}

func (s RunWriteToneGenerationResponse) GoString() string {
	return s.String()
}

func (s *RunWriteToneGenerationResponse) SetHeaders(v map[string]*string) *RunWriteToneGenerationResponse {
	s.Headers = v
	return s
}

func (s *RunWriteToneGenerationResponse) SetStatusCode(v int32) *RunWriteToneGenerationResponse {
	s.StatusCode = &v
	return s
}

func (s *RunWriteToneGenerationResponse) SetBody(v *RunWriteToneGenerationResponseBody) *RunWriteToneGenerationResponse {
	s.Body = v
	return s
}

type RunWritingRequest struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 提示词
	Prompt        *string                         `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	ReferenceData *RunWritingRequestReferenceData `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty" type:"Struct"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId   *string                         `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
	WritingConfig *RunWritingRequestWritingConfig `json:"WritingConfig,omitempty" xml:"WritingConfig,omitempty" type:"Struct"`
}

func (s RunWritingRequest) String() string {
	return tea.Prettify(s)
}

func (s RunWritingRequest) GoString() string {
	return s.String()
}

func (s *RunWritingRequest) SetOriginSessionId(v string) *RunWritingRequest {
	s.OriginSessionId = &v
	return s
}

func (s *RunWritingRequest) SetPrompt(v string) *RunWritingRequest {
	s.Prompt = &v
	return s
}

func (s *RunWritingRequest) SetReferenceData(v *RunWritingRequestReferenceData) *RunWritingRequest {
	s.ReferenceData = v
	return s
}

func (s *RunWritingRequest) SetSessionId(v string) *RunWritingRequest {
	s.SessionId = &v
	return s
}

func (s *RunWritingRequest) SetTaskId(v string) *RunWritingRequest {
	s.TaskId = &v
	return s
}

func (s *RunWritingRequest) SetWorkspaceId(v string) *RunWritingRequest {
	s.WorkspaceId = &v
	return s
}

func (s *RunWritingRequest) SetWritingConfig(v *RunWritingRequestWritingConfig) *RunWritingRequest {
	s.WritingConfig = v
	return s
}

type RunWritingRequestReferenceData struct {
	Articles []*RunWritingRequestReferenceDataArticles `json:"Articles,omitempty" xml:"Articles,omitempty" type:"Repeated"`
}

func (s RunWritingRequestReferenceData) String() string {
	return tea.Prettify(s)
}

func (s RunWritingRequestReferenceData) GoString() string {
	return s.String()
}

func (s *RunWritingRequestReferenceData) SetArticles(v []*RunWritingRequestReferenceDataArticles) *RunWritingRequestReferenceData {
	s.Articles = v
	return s
}

type RunWritingRequestReferenceDataArticles struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文档-自定义的唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 2124ca4d48a542d788aa86151e1a8c8b
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2024-08-28 11:38:28
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 央视网
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标签
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunWritingRequestReferenceDataArticles) String() string {
	return tea.Prettify(s)
}

func (s RunWritingRequestReferenceDataArticles) GoString() string {
	return s.String()
}

func (s *RunWritingRequestReferenceDataArticles) SetAuthor(v string) *RunWritingRequestReferenceDataArticles {
	s.Author = &v
	return s
}

func (s *RunWritingRequestReferenceDataArticles) SetContent(v string) *RunWritingRequestReferenceDataArticles {
	s.Content = &v
	return s
}

func (s *RunWritingRequestReferenceDataArticles) SetDocId(v string) *RunWritingRequestReferenceDataArticles {
	s.DocId = &v
	return s
}

func (s *RunWritingRequestReferenceDataArticles) SetDocUuid(v string) *RunWritingRequestReferenceDataArticles {
	s.DocUuid = &v
	return s
}

func (s *RunWritingRequestReferenceDataArticles) SetPubTime(v string) *RunWritingRequestReferenceDataArticles {
	s.PubTime = &v
	return s
}

func (s *RunWritingRequestReferenceDataArticles) SetSource(v string) *RunWritingRequestReferenceDataArticles {
	s.Source = &v
	return s
}

func (s *RunWritingRequestReferenceDataArticles) SetSummary(v string) *RunWritingRequestReferenceDataArticles {
	s.Summary = &v
	return s
}

func (s *RunWritingRequestReferenceDataArticles) SetTag(v string) *RunWritingRequestReferenceDataArticles {
	s.Tag = &v
	return s
}

func (s *RunWritingRequestReferenceDataArticles) SetTitle(v string) *RunWritingRequestReferenceDataArticles {
	s.Title = &v
	return s
}

func (s *RunWritingRequestReferenceDataArticles) SetUrl(v string) *RunWritingRequestReferenceDataArticles {
	s.Url = &v
	return s
}

type RunWritingRequestWritingConfig struct {
	// example:
	//
	// 写作领域，media:传媒,government:政务,market:营销
	Domain    *string                                  `json:"Domain,omitempty" xml:"Domain,omitempty"`
	PromptTag *RunWritingRequestWritingConfigPromptTag `json:"PromptTag,omitempty" xml:"PromptTag,omitempty" type:"Struct"`
	Tags      []*RunWritingRequestWritingConfigTags    `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// example:
	//
	// true
	UseSearch *bool `json:"UseSearch,omitempty" xml:"UseSearch,omitempty"`
}

func (s RunWritingRequestWritingConfig) String() string {
	return tea.Prettify(s)
}

func (s RunWritingRequestWritingConfig) GoString() string {
	return s.String()
}

func (s *RunWritingRequestWritingConfig) SetDomain(v string) *RunWritingRequestWritingConfig {
	s.Domain = &v
	return s
}

func (s *RunWritingRequestWritingConfig) SetPromptTag(v *RunWritingRequestWritingConfigPromptTag) *RunWritingRequestWritingConfig {
	s.PromptTag = v
	return s
}

func (s *RunWritingRequestWritingConfig) SetTags(v []*RunWritingRequestWritingConfigTags) *RunWritingRequestWritingConfig {
	s.Tags = v
	return s
}

func (s *RunWritingRequestWritingConfig) SetUseSearch(v bool) *RunWritingRequestWritingConfig {
	s.UseSearch = &v
	return s
}

type RunWritingRequestWritingConfigPromptTag struct {
	// example:
	//
	// 必要提示
	NecessaryTips *string `json:"NecessaryTips,omitempty" xml:"NecessaryTips,omitempty"`
	// example:
	//
	// 立场
	Position *string `json:"Position,omitempty" xml:"Position,omitempty"`
	// example:
	//
	// 反向词
	ReverseWords *string `json:"ReverseWords,omitempty" xml:"ReverseWords,omitempty"`
	// example:
	//
	// 主题
	Theme *string `json:"Theme,omitempty" xml:"Theme,omitempty"`
}

func (s RunWritingRequestWritingConfigPromptTag) String() string {
	return tea.Prettify(s)
}

func (s RunWritingRequestWritingConfigPromptTag) GoString() string {
	return s.String()
}

func (s *RunWritingRequestWritingConfigPromptTag) SetNecessaryTips(v string) *RunWritingRequestWritingConfigPromptTag {
	s.NecessaryTips = &v
	return s
}

func (s *RunWritingRequestWritingConfigPromptTag) SetPosition(v string) *RunWritingRequestWritingConfigPromptTag {
	s.Position = &v
	return s
}

func (s *RunWritingRequestWritingConfigPromptTag) SetReverseWords(v string) *RunWritingRequestWritingConfigPromptTag {
	s.ReverseWords = &v
	return s
}

func (s *RunWritingRequestWritingConfigPromptTag) SetTheme(v string) *RunWritingRequestWritingConfigPromptTag {
	s.Theme = &v
	return s
}

type RunWritingRequestWritingConfigTags struct {
	// example:
	//
	// 10
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// gcNumberSizeTag
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s RunWritingRequestWritingConfigTags) String() string {
	return tea.Prettify(s)
}

func (s RunWritingRequestWritingConfigTags) GoString() string {
	return s.String()
}

func (s *RunWritingRequestWritingConfigTags) SetKeyword(v string) *RunWritingRequestWritingConfigTags {
	s.Keyword = &v
	return s
}

func (s *RunWritingRequestWritingConfigTags) SetTag(v string) *RunWritingRequestWritingConfigTags {
	s.Tag = &v
	return s
}

type RunWritingShrinkRequest struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 提示词
	Prompt              *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	ReferenceDataShrink *string `json:"ReferenceData,omitempty" xml:"ReferenceData,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId         *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
	WritingConfigShrink *string `json:"WritingConfig,omitempty" xml:"WritingConfig,omitempty"`
}

func (s RunWritingShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunWritingShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunWritingShrinkRequest) SetOriginSessionId(v string) *RunWritingShrinkRequest {
	s.OriginSessionId = &v
	return s
}

func (s *RunWritingShrinkRequest) SetPrompt(v string) *RunWritingShrinkRequest {
	s.Prompt = &v
	return s
}

func (s *RunWritingShrinkRequest) SetReferenceDataShrink(v string) *RunWritingShrinkRequest {
	s.ReferenceDataShrink = &v
	return s
}

func (s *RunWritingShrinkRequest) SetSessionId(v string) *RunWritingShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *RunWritingShrinkRequest) SetTaskId(v string) *RunWritingShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *RunWritingShrinkRequest) SetWorkspaceId(v string) *RunWritingShrinkRequest {
	s.WorkspaceId = &v
	return s
}

func (s *RunWritingShrinkRequest) SetWritingConfigShrink(v string) *RunWritingShrinkRequest {
	s.WritingConfigShrink = &v
	return s
}

type RunWritingResponseBody struct {
	End     *bool                          `json:"End,omitempty" xml:"End,omitempty"`
	Header  *RunWritingResponseBodyHeader  `json:"Header,omitempty" xml:"Header,omitempty" type:"Struct"`
	Payload *RunWritingResponseBodyPayload `json:"Payload,omitempty" xml:"Payload,omitempty" type:"Struct"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunWritingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunWritingResponseBody) GoString() string {
	return s.String()
}

func (s *RunWritingResponseBody) SetEnd(v bool) *RunWritingResponseBody {
	s.End = &v
	return s
}

func (s *RunWritingResponseBody) SetHeader(v *RunWritingResponseBodyHeader) *RunWritingResponseBody {
	s.Header = v
	return s
}

func (s *RunWritingResponseBody) SetPayload(v *RunWritingResponseBodyPayload) *RunWritingResponseBody {
	s.Payload = v
	return s
}

func (s *RunWritingResponseBody) SetRequestId(v string) *RunWritingResponseBody {
	s.RequestId = &v
	return s
}

type RunWritingResponseBodyHeader struct {
	// example:
	//
	// 错误码
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 错误信息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// task-started
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	OriginSessionId *string `json:"OriginSessionId,omitempty" xml:"OriginSessionId,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// 400
	StatusCode *int32 `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 全链路ID
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RunWritingResponseBodyHeader) String() string {
	return tea.Prettify(s)
}

func (s RunWritingResponseBodyHeader) GoString() string {
	return s.String()
}

func (s *RunWritingResponseBodyHeader) SetErrorCode(v string) *RunWritingResponseBodyHeader {
	s.ErrorCode = &v
	return s
}

func (s *RunWritingResponseBodyHeader) SetErrorMessage(v string) *RunWritingResponseBodyHeader {
	s.ErrorMessage = &v
	return s
}

func (s *RunWritingResponseBodyHeader) SetEvent(v string) *RunWritingResponseBodyHeader {
	s.Event = &v
	return s
}

func (s *RunWritingResponseBodyHeader) SetOriginSessionId(v string) *RunWritingResponseBodyHeader {
	s.OriginSessionId = &v
	return s
}

func (s *RunWritingResponseBodyHeader) SetSessionId(v string) *RunWritingResponseBodyHeader {
	s.SessionId = &v
	return s
}

func (s *RunWritingResponseBodyHeader) SetStatusCode(v int32) *RunWritingResponseBodyHeader {
	s.StatusCode = &v
	return s
}

func (s *RunWritingResponseBodyHeader) SetTaskId(v string) *RunWritingResponseBodyHeader {
	s.TaskId = &v
	return s
}

func (s *RunWritingResponseBodyHeader) SetTraceId(v string) *RunWritingResponseBodyHeader {
	s.TraceId = &v
	return s
}

type RunWritingResponseBodyPayload struct {
	Output *RunWritingResponseBodyPayloadOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Usage  *RunWritingResponseBodyPayloadUsage  `json:"Usage,omitempty" xml:"Usage,omitempty" type:"Struct"`
}

func (s RunWritingResponseBodyPayload) String() string {
	return tea.Prettify(s)
}

func (s RunWritingResponseBodyPayload) GoString() string {
	return s.String()
}

func (s *RunWritingResponseBodyPayload) SetOutput(v *RunWritingResponseBodyPayloadOutput) *RunWritingResponseBodyPayload {
	s.Output = v
	return s
}

func (s *RunWritingResponseBodyPayload) SetUsage(v *RunWritingResponseBodyPayloadUsage) *RunWritingResponseBodyPayload {
	s.Usage = v
	return s
}

type RunWritingResponseBodyPayloadOutput struct {
	Articles []*RunWritingResponseBodyPayloadOutputArticles `json:"Articles,omitempty" xml:"Articles,omitempty" type:"Repeated"`
	// example:
	//
	// 文章精排之后的片段
	MiniDoc []*string `json:"MiniDoc,omitempty" xml:"MiniDoc,omitempty" type:"Repeated"`
	// example:
	//
	// 大模型改变世界
	SearchQuery *string `json:"SearchQuery,omitempty" xml:"SearchQuery,omitempty"`
	// example:
	//
	// 文本生成结果
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s RunWritingResponseBodyPayloadOutput) String() string {
	return tea.Prettify(s)
}

func (s RunWritingResponseBodyPayloadOutput) GoString() string {
	return s.String()
}

func (s *RunWritingResponseBodyPayloadOutput) SetArticles(v []*RunWritingResponseBodyPayloadOutputArticles) *RunWritingResponseBodyPayloadOutput {
	s.Articles = v
	return s
}

func (s *RunWritingResponseBodyPayloadOutput) SetMiniDoc(v []*string) *RunWritingResponseBodyPayloadOutput {
	s.MiniDoc = v
	return s
}

func (s *RunWritingResponseBodyPayloadOutput) SetSearchQuery(v string) *RunWritingResponseBodyPayloadOutput {
	s.SearchQuery = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutput) SetText(v string) *RunWritingResponseBodyPayloadOutput {
	s.Text = &v
	return s
}

type RunWritingResponseBodyPayloadOutputArticles struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文档-自定义的唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 98229f6001cf4deeb1668191d4eccc75
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2024-08-28 11:38:28
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 央视网
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标签
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s RunWritingResponseBodyPayloadOutputArticles) String() string {
	return tea.Prettify(s)
}

func (s RunWritingResponseBodyPayloadOutputArticles) GoString() string {
	return s.String()
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetAuthor(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.Author = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetContent(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.Content = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetDocId(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.DocId = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetDocUuid(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.DocUuid = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetPubTime(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.PubTime = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetSource(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.Source = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetSummary(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.Summary = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetTag(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.Tag = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetTitle(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.Title = &v
	return s
}

func (s *RunWritingResponseBodyPayloadOutputArticles) SetUrl(v string) *RunWritingResponseBodyPayloadOutputArticles {
	s.Url = &v
	return s
}

type RunWritingResponseBodyPayloadUsage struct {
	// example:
	//
	// 1
	InputTokens *int64 `json:"InputTokens,omitempty" xml:"InputTokens,omitempty"`
	// example:
	//
	// 1
	OutputTokens *int64            `json:"OutputTokens,omitempty" xml:"OutputTokens,omitempty"`
	TokenMap     map[string]*int64 `json:"TokenMap,omitempty" xml:"TokenMap,omitempty"`
	// example:
	//
	// 2
	TotalTokens *int64 `json:"TotalTokens,omitempty" xml:"TotalTokens,omitempty"`
}

func (s RunWritingResponseBodyPayloadUsage) String() string {
	return tea.Prettify(s)
}

func (s RunWritingResponseBodyPayloadUsage) GoString() string {
	return s.String()
}

func (s *RunWritingResponseBodyPayloadUsage) SetInputTokens(v int64) *RunWritingResponseBodyPayloadUsage {
	s.InputTokens = &v
	return s
}

func (s *RunWritingResponseBodyPayloadUsage) SetOutputTokens(v int64) *RunWritingResponseBodyPayloadUsage {
	s.OutputTokens = &v
	return s
}

func (s *RunWritingResponseBodyPayloadUsage) SetTokenMap(v map[string]*int64) *RunWritingResponseBodyPayloadUsage {
	s.TokenMap = v
	return s
}

func (s *RunWritingResponseBodyPayloadUsage) SetTotalTokens(v int64) *RunWritingResponseBodyPayloadUsage {
	s.TotalTokens = &v
	return s
}

type RunWritingResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunWritingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunWritingResponse) String() string {
	return tea.Prettify(s)
}

func (s RunWritingResponse) GoString() string {
	return s.String()
}

func (s *RunWritingResponse) SetHeaders(v map[string]*string) *RunWritingResponse {
	s.Headers = v
	return s
}

func (s *RunWritingResponse) SetStatusCode(v int32) *RunWritingResponse {
	s.StatusCode = &v
	return s
}

func (s *RunWritingResponse) SetBody(v *RunWritingResponseBody) *RunWritingResponse {
	s.Body = v
	return s
}

type SaveCustomTextRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 商品code
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// example:
	//
	// 内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s SaveCustomTextRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveCustomTextRequest) GoString() string {
	return s.String()
}

func (s *SaveCustomTextRequest) SetAgentKey(v string) *SaveCustomTextRequest {
	s.AgentKey = &v
	return s
}

func (s *SaveCustomTextRequest) SetCommodityCode(v string) *SaveCustomTextRequest {
	s.CommodityCode = &v
	return s
}

func (s *SaveCustomTextRequest) SetContent(v string) *SaveCustomTextRequest {
	s.Content = &v
	return s
}

func (s *SaveCustomTextRequest) SetTitle(v string) *SaveCustomTextRequest {
	s.Title = &v
	return s
}

type SaveCustomTextResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 5
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveCustomTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveCustomTextResponseBody) GoString() string {
	return s.String()
}

func (s *SaveCustomTextResponseBody) SetCode(v string) *SaveCustomTextResponseBody {
	s.Code = &v
	return s
}

func (s *SaveCustomTextResponseBody) SetData(v int64) *SaveCustomTextResponseBody {
	s.Data = &v
	return s
}

func (s *SaveCustomTextResponseBody) SetHttpStatusCode(v int32) *SaveCustomTextResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveCustomTextResponseBody) SetMessage(v string) *SaveCustomTextResponseBody {
	s.Message = &v
	return s
}

func (s *SaveCustomTextResponseBody) SetRequestId(v string) *SaveCustomTextResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveCustomTextResponseBody) SetSuccess(v bool) *SaveCustomTextResponseBody {
	s.Success = &v
	return s
}

type SaveCustomTextResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveCustomTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveCustomTextResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveCustomTextResponse) GoString() string {
	return s.String()
}

func (s *SaveCustomTextResponse) SetHeaders(v map[string]*string) *SaveCustomTextResponse {
	s.Headers = v
	return s
}

func (s *SaveCustomTextResponse) SetStatusCode(v int32) *SaveCustomTextResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveCustomTextResponse) SetBody(v *SaveCustomTextResponseBody) *SaveCustomTextResponse {
	s.Body = v
	return s
}

type SaveDataSourceOrderConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// miaobi
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// This parameter is required.
	UserConfigDataSourceList []*SaveDataSourceOrderConfigRequestUserConfigDataSourceList `json:"UserConfigDataSourceList,omitempty" xml:"UserConfigDataSourceList,omitempty" type:"Repeated"`
}

func (s SaveDataSourceOrderConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveDataSourceOrderConfigRequest) GoString() string {
	return s.String()
}

func (s *SaveDataSourceOrderConfigRequest) SetAgentKey(v string) *SaveDataSourceOrderConfigRequest {
	s.AgentKey = &v
	return s
}

func (s *SaveDataSourceOrderConfigRequest) SetProductCode(v string) *SaveDataSourceOrderConfigRequest {
	s.ProductCode = &v
	return s
}

func (s *SaveDataSourceOrderConfigRequest) SetUserConfigDataSourceList(v []*SaveDataSourceOrderConfigRequestUserConfigDataSourceList) *SaveDataSourceOrderConfigRequest {
	s.UserConfigDataSourceList = v
	return s
}

type SaveDataSourceOrderConfigRequestUserConfigDataSourceList struct {
	// This parameter is required.
	//
	// example:
	//
	// QuarkCommonNews
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 20
	Number *int32 `json:"Number,omitempty" xml:"Number,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// SystemSearch
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SaveDataSourceOrderConfigRequestUserConfigDataSourceList) String() string {
	return tea.Prettify(s)
}

func (s SaveDataSourceOrderConfigRequestUserConfigDataSourceList) GoString() string {
	return s.String()
}

func (s *SaveDataSourceOrderConfigRequestUserConfigDataSourceList) SetCode(v string) *SaveDataSourceOrderConfigRequestUserConfigDataSourceList {
	s.Code = &v
	return s
}

func (s *SaveDataSourceOrderConfigRequestUserConfigDataSourceList) SetName(v string) *SaveDataSourceOrderConfigRequestUserConfigDataSourceList {
	s.Name = &v
	return s
}

func (s *SaveDataSourceOrderConfigRequestUserConfigDataSourceList) SetNumber(v int32) *SaveDataSourceOrderConfigRequestUserConfigDataSourceList {
	s.Number = &v
	return s
}

func (s *SaveDataSourceOrderConfigRequestUserConfigDataSourceList) SetType(v string) *SaveDataSourceOrderConfigRequestUserConfigDataSourceList {
	s.Type = &v
	return s
}

type SaveDataSourceOrderConfigShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// miaobi
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// This parameter is required.
	UserConfigDataSourceListShrink *string `json:"UserConfigDataSourceList,omitempty" xml:"UserConfigDataSourceList,omitempty"`
}

func (s SaveDataSourceOrderConfigShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveDataSourceOrderConfigShrinkRequest) GoString() string {
	return s.String()
}

func (s *SaveDataSourceOrderConfigShrinkRequest) SetAgentKey(v string) *SaveDataSourceOrderConfigShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *SaveDataSourceOrderConfigShrinkRequest) SetProductCode(v string) *SaveDataSourceOrderConfigShrinkRequest {
	s.ProductCode = &v
	return s
}

func (s *SaveDataSourceOrderConfigShrinkRequest) SetUserConfigDataSourceListShrink(v string) *SaveDataSourceOrderConfigShrinkRequest {
	s.UserConfigDataSourceListShrink = &v
	return s
}

type SaveDataSourceOrderConfigResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveDataSourceOrderConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveDataSourceOrderConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SaveDataSourceOrderConfigResponseBody) SetCode(v string) *SaveDataSourceOrderConfigResponseBody {
	s.Code = &v
	return s
}

func (s *SaveDataSourceOrderConfigResponseBody) SetData(v bool) *SaveDataSourceOrderConfigResponseBody {
	s.Data = &v
	return s
}

func (s *SaveDataSourceOrderConfigResponseBody) SetHttpStatusCode(v int32) *SaveDataSourceOrderConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveDataSourceOrderConfigResponseBody) SetMessage(v string) *SaveDataSourceOrderConfigResponseBody {
	s.Message = &v
	return s
}

func (s *SaveDataSourceOrderConfigResponseBody) SetRequestId(v string) *SaveDataSourceOrderConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveDataSourceOrderConfigResponseBody) SetSuccess(v bool) *SaveDataSourceOrderConfigResponseBody {
	s.Success = &v
	return s
}

type SaveDataSourceOrderConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveDataSourceOrderConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveDataSourceOrderConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveDataSourceOrderConfigResponse) GoString() string {
	return s.String()
}

func (s *SaveDataSourceOrderConfigResponse) SetHeaders(v map[string]*string) *SaveDataSourceOrderConfigResponse {
	s.Headers = v
	return s
}

func (s *SaveDataSourceOrderConfigResponse) SetStatusCode(v int32) *SaveDataSourceOrderConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveDataSourceOrderConfigResponse) SetBody(v *SaveDataSourceOrderConfigResponseBody) *SaveDataSourceOrderConfigResponse {
	s.Body = v
	return s
}

type SaveMaterialDocumentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	Author   *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// false
	BothSavePrivateAndShare *bool     `json:"BothSavePrivateAndShare,omitempty" xml:"BothSavePrivateAndShare,omitempty"`
	DocKeywords             []*string `json:"DocKeywords,omitempty" xml:"DocKeywords,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// excel
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// http://xxxxx/xxx
	ExternalUrl *string `json:"ExternalUrl,omitempty" xml:"ExternalUrl,omitempty"`
	HtmlContent *string `json:"HtmlContent,omitempty" xml:"HtmlContent,omitempty"`
	// example:
	//
	// 2023-04-11 06:14:07
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 1
	ShareAttr *int32 `json:"ShareAttr,omitempty" xml:"ShareAttr,omitempty"`
	// example:
	//
	// IntellijSearch
	SrcFrom     *string `json:"SrcFrom,omitempty" xml:"SrcFrom,omitempty"`
	Summary     *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	TextContent *string `json:"TextContent,omitempty" xml:"TextContent,omitempty"`
	Title       *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://xxxxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SaveMaterialDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveMaterialDocumentRequest) GoString() string {
	return s.String()
}

func (s *SaveMaterialDocumentRequest) SetAgentKey(v string) *SaveMaterialDocumentRequest {
	s.AgentKey = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetAuthor(v string) *SaveMaterialDocumentRequest {
	s.Author = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetBothSavePrivateAndShare(v bool) *SaveMaterialDocumentRequest {
	s.BothSavePrivateAndShare = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetDocKeywords(v []*string) *SaveMaterialDocumentRequest {
	s.DocKeywords = v
	return s
}

func (s *SaveMaterialDocumentRequest) SetDocType(v string) *SaveMaterialDocumentRequest {
	s.DocType = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetExternalUrl(v string) *SaveMaterialDocumentRequest {
	s.ExternalUrl = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetHtmlContent(v string) *SaveMaterialDocumentRequest {
	s.HtmlContent = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetPubTime(v string) *SaveMaterialDocumentRequest {
	s.PubTime = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetShareAttr(v int32) *SaveMaterialDocumentRequest {
	s.ShareAttr = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetSrcFrom(v string) *SaveMaterialDocumentRequest {
	s.SrcFrom = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetSummary(v string) *SaveMaterialDocumentRequest {
	s.Summary = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetTextContent(v string) *SaveMaterialDocumentRequest {
	s.TextContent = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetTitle(v string) *SaveMaterialDocumentRequest {
	s.Title = &v
	return s
}

func (s *SaveMaterialDocumentRequest) SetUrl(v string) *SaveMaterialDocumentRequest {
	s.Url = &v
	return s
}

type SaveMaterialDocumentShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c160c841c8e54295bf2f441432785944_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	Author   *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// false
	BothSavePrivateAndShare *bool   `json:"BothSavePrivateAndShare,omitempty" xml:"BothSavePrivateAndShare,omitempty"`
	DocKeywordsShrink       *string `json:"DocKeywords,omitempty" xml:"DocKeywords,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// excel
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// http://xxxxx/xxx
	ExternalUrl *string `json:"ExternalUrl,omitempty" xml:"ExternalUrl,omitempty"`
	HtmlContent *string `json:"HtmlContent,omitempty" xml:"HtmlContent,omitempty"`
	// example:
	//
	// 2023-04-11 06:14:07
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 1
	ShareAttr *int32 `json:"ShareAttr,omitempty" xml:"ShareAttr,omitempty"`
	// example:
	//
	// IntellijSearch
	SrcFrom     *string `json:"SrcFrom,omitempty" xml:"SrcFrom,omitempty"`
	Summary     *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	TextContent *string `json:"TextContent,omitempty" xml:"TextContent,omitempty"`
	Title       *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://xxxxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SaveMaterialDocumentShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveMaterialDocumentShrinkRequest) GoString() string {
	return s.String()
}

func (s *SaveMaterialDocumentShrinkRequest) SetAgentKey(v string) *SaveMaterialDocumentShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetAuthor(v string) *SaveMaterialDocumentShrinkRequest {
	s.Author = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetBothSavePrivateAndShare(v bool) *SaveMaterialDocumentShrinkRequest {
	s.BothSavePrivateAndShare = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetDocKeywordsShrink(v string) *SaveMaterialDocumentShrinkRequest {
	s.DocKeywordsShrink = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetDocType(v string) *SaveMaterialDocumentShrinkRequest {
	s.DocType = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetExternalUrl(v string) *SaveMaterialDocumentShrinkRequest {
	s.ExternalUrl = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetHtmlContent(v string) *SaveMaterialDocumentShrinkRequest {
	s.HtmlContent = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetPubTime(v string) *SaveMaterialDocumentShrinkRequest {
	s.PubTime = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetShareAttr(v int32) *SaveMaterialDocumentShrinkRequest {
	s.ShareAttr = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetSrcFrom(v string) *SaveMaterialDocumentShrinkRequest {
	s.SrcFrom = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetSummary(v string) *SaveMaterialDocumentShrinkRequest {
	s.Summary = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetTextContent(v string) *SaveMaterialDocumentShrinkRequest {
	s.TextContent = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetTitle(v string) *SaveMaterialDocumentShrinkRequest {
	s.Title = &v
	return s
}

func (s *SaveMaterialDocumentShrinkRequest) SetUrl(v string) *SaveMaterialDocumentShrinkRequest {
	s.Url = &v
	return s
}

type SaveMaterialDocumentResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 12
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 数据不存在
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// false
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveMaterialDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveMaterialDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *SaveMaterialDocumentResponseBody) SetCode(v string) *SaveMaterialDocumentResponseBody {
	s.Code = &v
	return s
}

func (s *SaveMaterialDocumentResponseBody) SetData(v int64) *SaveMaterialDocumentResponseBody {
	s.Data = &v
	return s
}

func (s *SaveMaterialDocumentResponseBody) SetHttpStatusCode(v int32) *SaveMaterialDocumentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveMaterialDocumentResponseBody) SetMessage(v string) *SaveMaterialDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *SaveMaterialDocumentResponseBody) SetRequestId(v string) *SaveMaterialDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveMaterialDocumentResponseBody) SetSuccess(v bool) *SaveMaterialDocumentResponseBody {
	s.Success = &v
	return s
}

type SaveMaterialDocumentResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveMaterialDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveMaterialDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveMaterialDocumentResponse) GoString() string {
	return s.String()
}

func (s *SaveMaterialDocumentResponse) SetHeaders(v map[string]*string) *SaveMaterialDocumentResponse {
	s.Headers = v
	return s
}

func (s *SaveMaterialDocumentResponse) SetStatusCode(v int32) *SaveMaterialDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveMaterialDocumentResponse) SetBody(v *SaveMaterialDocumentResponseBody) *SaveMaterialDocumentResponse {
	s.Body = v
	return s
}

type SaveStyleLearningResultRequest struct {
	// example:
	//
	// xxxxx_p_efm
	AgentKey         *string  `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	AigcResult       *string  `json:"AigcResult,omitempty" xml:"AigcResult,omitempty"`
	CustomTextIdList []*int64 `json:"CustomTextIdList,omitempty" xml:"CustomTextIdList,omitempty" type:"Repeated"`
	MaterialIdList   []*int64 `json:"MaterialIdList,omitempty" xml:"MaterialIdList,omitempty" type:"Repeated"`
	RewriteResult    *string  `json:"RewriteResult,omitempty" xml:"RewriteResult,omitempty"`
	StyleName        *string  `json:"StyleName,omitempty" xml:"StyleName,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SaveStyleLearningResultRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveStyleLearningResultRequest) GoString() string {
	return s.String()
}

func (s *SaveStyleLearningResultRequest) SetAgentKey(v string) *SaveStyleLearningResultRequest {
	s.AgentKey = &v
	return s
}

func (s *SaveStyleLearningResultRequest) SetAigcResult(v string) *SaveStyleLearningResultRequest {
	s.AigcResult = &v
	return s
}

func (s *SaveStyleLearningResultRequest) SetCustomTextIdList(v []*int64) *SaveStyleLearningResultRequest {
	s.CustomTextIdList = v
	return s
}

func (s *SaveStyleLearningResultRequest) SetMaterialIdList(v []*int64) *SaveStyleLearningResultRequest {
	s.MaterialIdList = v
	return s
}

func (s *SaveStyleLearningResultRequest) SetRewriteResult(v string) *SaveStyleLearningResultRequest {
	s.RewriteResult = &v
	return s
}

func (s *SaveStyleLearningResultRequest) SetStyleName(v string) *SaveStyleLearningResultRequest {
	s.StyleName = &v
	return s
}

func (s *SaveStyleLearningResultRequest) SetTaskId(v string) *SaveStyleLearningResultRequest {
	s.TaskId = &v
	return s
}

type SaveStyleLearningResultShrinkRequest struct {
	// example:
	//
	// xxxxx_p_efm
	AgentKey               *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	AigcResult             *string `json:"AigcResult,omitempty" xml:"AigcResult,omitempty"`
	CustomTextIdListShrink *string `json:"CustomTextIdList,omitempty" xml:"CustomTextIdList,omitempty"`
	MaterialIdListShrink   *string `json:"MaterialIdList,omitempty" xml:"MaterialIdList,omitempty"`
	RewriteResult          *string `json:"RewriteResult,omitempty" xml:"RewriteResult,omitempty"`
	StyleName              *string `json:"StyleName,omitempty" xml:"StyleName,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SaveStyleLearningResultShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveStyleLearningResultShrinkRequest) GoString() string {
	return s.String()
}

func (s *SaveStyleLearningResultShrinkRequest) SetAgentKey(v string) *SaveStyleLearningResultShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *SaveStyleLearningResultShrinkRequest) SetAigcResult(v string) *SaveStyleLearningResultShrinkRequest {
	s.AigcResult = &v
	return s
}

func (s *SaveStyleLearningResultShrinkRequest) SetCustomTextIdListShrink(v string) *SaveStyleLearningResultShrinkRequest {
	s.CustomTextIdListShrink = &v
	return s
}

func (s *SaveStyleLearningResultShrinkRequest) SetMaterialIdListShrink(v string) *SaveStyleLearningResultShrinkRequest {
	s.MaterialIdListShrink = &v
	return s
}

func (s *SaveStyleLearningResultShrinkRequest) SetRewriteResult(v string) *SaveStyleLearningResultShrinkRequest {
	s.RewriteResult = &v
	return s
}

func (s *SaveStyleLearningResultShrinkRequest) SetStyleName(v string) *SaveStyleLearningResultShrinkRequest {
	s.StyleName = &v
	return s
}

func (s *SaveStyleLearningResultShrinkRequest) SetTaskId(v string) *SaveStyleLearningResultShrinkRequest {
	s.TaskId = &v
	return s
}

type SaveStyleLearningResultResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveStyleLearningResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveStyleLearningResultResponseBody) GoString() string {
	return s.String()
}

func (s *SaveStyleLearningResultResponseBody) SetCode(v string) *SaveStyleLearningResultResponseBody {
	s.Code = &v
	return s
}

func (s *SaveStyleLearningResultResponseBody) SetData(v bool) *SaveStyleLearningResultResponseBody {
	s.Data = &v
	return s
}

func (s *SaveStyleLearningResultResponseBody) SetHttpStatusCode(v int32) *SaveStyleLearningResultResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveStyleLearningResultResponseBody) SetMessage(v string) *SaveStyleLearningResultResponseBody {
	s.Message = &v
	return s
}

func (s *SaveStyleLearningResultResponseBody) SetRequestId(v string) *SaveStyleLearningResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveStyleLearningResultResponseBody) SetSuccess(v bool) *SaveStyleLearningResultResponseBody {
	s.Success = &v
	return s
}

type SaveStyleLearningResultResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveStyleLearningResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveStyleLearningResultResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveStyleLearningResultResponse) GoString() string {
	return s.String()
}

func (s *SaveStyleLearningResultResponse) SetHeaders(v map[string]*string) *SaveStyleLearningResultResponse {
	s.Headers = v
	return s
}

func (s *SaveStyleLearningResultResponse) SetStatusCode(v int32) *SaveStyleLearningResultResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveStyleLearningResultResponse) SetBody(v *SaveStyleLearningResultResponseBody) *SaveStyleLearningResultResponse {
	s.Body = v
	return s
}

type SearchDatasetDocumentsRequest struct {
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 数据集名称
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// 业务参数
	Extend1 *string `json:"Extend1,omitempty" xml:"Extend1,omitempty"`
	// example:
	//
	// false
	IncludeContent *bool `json:"IncludeContent,omitempty" xml:"IncludeContent,omitempty"`
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 搜索内容
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s SearchDatasetDocumentsRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchDatasetDocumentsRequest) GoString() string {
	return s.String()
}

func (s *SearchDatasetDocumentsRequest) SetDatasetId(v int64) *SearchDatasetDocumentsRequest {
	s.DatasetId = &v
	return s
}

func (s *SearchDatasetDocumentsRequest) SetDatasetName(v string) *SearchDatasetDocumentsRequest {
	s.DatasetName = &v
	return s
}

func (s *SearchDatasetDocumentsRequest) SetExtend1(v string) *SearchDatasetDocumentsRequest {
	s.Extend1 = &v
	return s
}

func (s *SearchDatasetDocumentsRequest) SetIncludeContent(v bool) *SearchDatasetDocumentsRequest {
	s.IncludeContent = &v
	return s
}

func (s *SearchDatasetDocumentsRequest) SetPageSize(v string) *SearchDatasetDocumentsRequest {
	s.PageSize = &v
	return s
}

func (s *SearchDatasetDocumentsRequest) SetQuery(v string) *SearchDatasetDocumentsRequest {
	s.Query = &v
	return s
}

func (s *SearchDatasetDocumentsRequest) SetWorkspaceId(v string) *SearchDatasetDocumentsRequest {
	s.WorkspaceId = &v
	return s
}

type SearchDatasetDocumentsResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SearchDatasetDocumentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SearchDatasetDocumentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchDatasetDocumentsResponseBody) GoString() string {
	return s.String()
}

func (s *SearchDatasetDocumentsResponseBody) SetCode(v string) *SearchDatasetDocumentsResponseBody {
	s.Code = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBody) SetData(v *SearchDatasetDocumentsResponseBodyData) *SearchDatasetDocumentsResponseBody {
	s.Data = v
	return s
}

func (s *SearchDatasetDocumentsResponseBody) SetHttpStatusCode(v int32) *SearchDatasetDocumentsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBody) SetMessage(v string) *SearchDatasetDocumentsResponseBody {
	s.Message = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBody) SetRequestId(v string) *SearchDatasetDocumentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBody) SetSuccess(v bool) *SearchDatasetDocumentsResponseBody {
	s.Success = &v
	return s
}

type SearchDatasetDocumentsResponseBodyData struct {
	Documents []*SearchDatasetDocumentsResponseBodyDataDocuments `json:"Documents,omitempty" xml:"Documents,omitempty" type:"Repeated"`
}

func (s SearchDatasetDocumentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchDatasetDocumentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchDatasetDocumentsResponseBodyData) SetDocuments(v []*SearchDatasetDocumentsResponseBodyDataDocuments) *SearchDatasetDocumentsResponseBodyData {
	s.Documents = v
	return s
}

type SearchDatasetDocumentsResponseBodyDataDocuments struct {
	// example:
	//
	// xx
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 用户指定的文档唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 内部文档唯一ID
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// 2024-12-09 17:09:40
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 来源
	SourceFrom *string `json:"SourceFrom,omitempty" xml:"SourceFrom,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// xx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SearchDatasetDocumentsResponseBodyDataDocuments) String() string {
	return tea.Prettify(s)
}

func (s SearchDatasetDocumentsResponseBodyDataDocuments) GoString() string {
	return s.String()
}

func (s *SearchDatasetDocumentsResponseBodyDataDocuments) SetContent(v string) *SearchDatasetDocumentsResponseBodyDataDocuments {
	s.Content = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBodyDataDocuments) SetDocId(v string) *SearchDatasetDocumentsResponseBodyDataDocuments {
	s.DocId = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBodyDataDocuments) SetDocUuid(v string) *SearchDatasetDocumentsResponseBodyDataDocuments {
	s.DocUuid = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBodyDataDocuments) SetPubTime(v string) *SearchDatasetDocumentsResponseBodyDataDocuments {
	s.PubTime = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBodyDataDocuments) SetSourceFrom(v string) *SearchDatasetDocumentsResponseBodyDataDocuments {
	s.SourceFrom = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBodyDataDocuments) SetSummary(v string) *SearchDatasetDocumentsResponseBodyDataDocuments {
	s.Summary = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBodyDataDocuments) SetTitle(v string) *SearchDatasetDocumentsResponseBodyDataDocuments {
	s.Title = &v
	return s
}

func (s *SearchDatasetDocumentsResponseBodyDataDocuments) SetUrl(v string) *SearchDatasetDocumentsResponseBodyDataDocuments {
	s.Url = &v
	return s
}

type SearchDatasetDocumentsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchDatasetDocumentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchDatasetDocumentsResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchDatasetDocumentsResponse) GoString() string {
	return s.String()
}

func (s *SearchDatasetDocumentsResponse) SetHeaders(v map[string]*string) *SearchDatasetDocumentsResponse {
	s.Headers = v
	return s
}

func (s *SearchDatasetDocumentsResponse) SetStatusCode(v int32) *SearchDatasetDocumentsResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchDatasetDocumentsResponse) SetBody(v *SearchDatasetDocumentsResponseBody) *SearchDatasetDocumentsResponse {
	s.Body = v
	return s
}

type SearchNewsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// false
	FilterNotNull *bool `json:"FilterNotNull,omitempty" xml:"FilterNotNull,omitempty"`
	// example:
	//
	// false
	IncludeContent *bool `json:"IncludeContent,omitempty" xml:"IncludeContent,omitempty"`
	// example:
	//
	// 81
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// example:
	//
	// 35
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 检索Query
	Query         *string   `json:"Query,omitempty" xml:"Query,omitempty"`
	SearchSources []*string `json:"SearchSources,omitempty" xml:"SearchSources,omitempty" type:"Repeated"`
}

func (s SearchNewsRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchNewsRequest) GoString() string {
	return s.String()
}

func (s *SearchNewsRequest) SetAgentKey(v string) *SearchNewsRequest {
	s.AgentKey = &v
	return s
}

func (s *SearchNewsRequest) SetFilterNotNull(v bool) *SearchNewsRequest {
	s.FilterNotNull = &v
	return s
}

func (s *SearchNewsRequest) SetIncludeContent(v bool) *SearchNewsRequest {
	s.IncludeContent = &v
	return s
}

func (s *SearchNewsRequest) SetPage(v int32) *SearchNewsRequest {
	s.Page = &v
	return s
}

func (s *SearchNewsRequest) SetPageSize(v int32) *SearchNewsRequest {
	s.PageSize = &v
	return s
}

func (s *SearchNewsRequest) SetQuery(v string) *SearchNewsRequest {
	s.Query = &v
	return s
}

func (s *SearchNewsRequest) SetSearchSources(v []*string) *SearchNewsRequest {
	s.SearchSources = v
	return s
}

type SearchNewsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// false
	FilterNotNull *bool `json:"FilterNotNull,omitempty" xml:"FilterNotNull,omitempty"`
	// example:
	//
	// false
	IncludeContent *bool `json:"IncludeContent,omitempty" xml:"IncludeContent,omitempty"`
	// example:
	//
	// 81
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// example:
	//
	// 35
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 检索Query
	Query               *string `json:"Query,omitempty" xml:"Query,omitempty"`
	SearchSourcesShrink *string `json:"SearchSources,omitempty" xml:"SearchSources,omitempty"`
}

func (s SearchNewsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchNewsShrinkRequest) GoString() string {
	return s.String()
}

func (s *SearchNewsShrinkRequest) SetAgentKey(v string) *SearchNewsShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *SearchNewsShrinkRequest) SetFilterNotNull(v bool) *SearchNewsShrinkRequest {
	s.FilterNotNull = &v
	return s
}

func (s *SearchNewsShrinkRequest) SetIncludeContent(v bool) *SearchNewsShrinkRequest {
	s.IncludeContent = &v
	return s
}

func (s *SearchNewsShrinkRequest) SetPage(v int32) *SearchNewsShrinkRequest {
	s.Page = &v
	return s
}

func (s *SearchNewsShrinkRequest) SetPageSize(v int32) *SearchNewsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *SearchNewsShrinkRequest) SetQuery(v string) *SearchNewsShrinkRequest {
	s.Query = &v
	return s
}

func (s *SearchNewsShrinkRequest) SetSearchSourcesShrink(v string) *SearchNewsShrinkRequest {
	s.SearchSourcesShrink = &v
	return s
}

type SearchNewsResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1
	Current *int32                        `json:"Current,omitempty" xml:"Current,omitempty"`
	Data    []*SearchNewsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 100
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchNewsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchNewsResponseBody) GoString() string {
	return s.String()
}

func (s *SearchNewsResponseBody) SetCode(v string) *SearchNewsResponseBody {
	s.Code = &v
	return s
}

func (s *SearchNewsResponseBody) SetCurrent(v int32) *SearchNewsResponseBody {
	s.Current = &v
	return s
}

func (s *SearchNewsResponseBody) SetData(v []*SearchNewsResponseBodyData) *SearchNewsResponseBody {
	s.Data = v
	return s
}

func (s *SearchNewsResponseBody) SetHttpStatusCode(v int32) *SearchNewsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SearchNewsResponseBody) SetMessage(v string) *SearchNewsResponseBody {
	s.Message = &v
	return s
}

func (s *SearchNewsResponseBody) SetRequestId(v string) *SearchNewsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchNewsResponseBody) SetSize(v int32) *SearchNewsResponseBody {
	s.Size = &v
	return s
}

func (s *SearchNewsResponseBody) SetSuccess(v bool) *SearchNewsResponseBody {
	s.Success = &v
	return s
}

func (s *SearchNewsResponseBody) SetTotal(v int32) *SearchNewsResponseBody {
	s.Total = &v
	return s
}

type SearchNewsResponseBodyData struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 9a598b44c6444da5907b8ea68a5f82c4
	DocUuid   *string   `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	ImageUrls []*string `json:"ImageUrls,omitempty" xml:"ImageUrls,omitempty" type:"Repeated"`
	// example:
	//
	// 2024-01-18 06:46:22
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// QuarkCommonNews
	SearchSource *string `json:"SearchSource,omitempty" xml:"SearchSource,omitempty"`
	// example:
	//
	// 夸克检索
	SearchSourceName *string `json:"SearchSourceName,omitempty" xml:"SearchSourceName,omitempty"`
	// example:
	//
	// 央视网
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标签
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 2024-01-18 06:46:22
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// 文章URL
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SearchNewsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchNewsResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchNewsResponseBodyData) SetAuthor(v string) *SearchNewsResponseBodyData {
	s.Author = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetContent(v string) *SearchNewsResponseBodyData {
	s.Content = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetDocUuid(v string) *SearchNewsResponseBodyData {
	s.DocUuid = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetImageUrls(v []*string) *SearchNewsResponseBodyData {
	s.ImageUrls = v
	return s
}

func (s *SearchNewsResponseBodyData) SetPubTime(v string) *SearchNewsResponseBodyData {
	s.PubTime = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetSearchSource(v string) *SearchNewsResponseBodyData {
	s.SearchSource = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetSearchSourceName(v string) *SearchNewsResponseBodyData {
	s.SearchSourceName = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetSource(v string) *SearchNewsResponseBodyData {
	s.Source = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetSummary(v string) *SearchNewsResponseBodyData {
	s.Summary = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetTag(v string) *SearchNewsResponseBodyData {
	s.Tag = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetTitle(v string) *SearchNewsResponseBodyData {
	s.Title = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetUpdateTime(v string) *SearchNewsResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *SearchNewsResponseBodyData) SetUrl(v string) *SearchNewsResponseBodyData {
	s.Url = &v
	return s
}

type SearchNewsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchNewsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchNewsResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchNewsResponse) GoString() string {
	return s.String()
}

func (s *SearchNewsResponse) SetHeaders(v map[string]*string) *SearchNewsResponse {
	s.Headers = v
	return s
}

func (s *SearchNewsResponse) SetStatusCode(v int32) *SearchNewsResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchNewsResponse) SetBody(v *SearchNewsResponseBody) *SearchNewsResponse {
	s.Body = v
	return s
}

type SubmitAsyncTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2daaa2e0c209xb26acb97009ea77bd4b_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// MaterialDocumentUpload
	TaskCode *string `json:"TaskCode,omitempty" xml:"TaskCode,omitempty"`
	// example:
	//
	// 2023-10-14 14:30:00
	TaskExecuteTime *string `json:"TaskExecuteTime,omitempty" xml:"TaskExecuteTime,omitempty"`
	// example:
	//
	// 任务名称
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// 任务提交参数
	TaskParam *string `json:"TaskParam,omitempty" xml:"TaskParam,omitempty"`
}

func (s SubmitAsyncTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAsyncTaskRequest) GoString() string {
	return s.String()
}

func (s *SubmitAsyncTaskRequest) SetAgentKey(v string) *SubmitAsyncTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *SubmitAsyncTaskRequest) SetTaskCode(v string) *SubmitAsyncTaskRequest {
	s.TaskCode = &v
	return s
}

func (s *SubmitAsyncTaskRequest) SetTaskExecuteTime(v string) *SubmitAsyncTaskRequest {
	s.TaskExecuteTime = &v
	return s
}

func (s *SubmitAsyncTaskRequest) SetTaskName(v string) *SubmitAsyncTaskRequest {
	s.TaskName = &v
	return s
}

func (s *SubmitAsyncTaskRequest) SetTaskParam(v string) *SubmitAsyncTaskRequest {
	s.TaskParam = &v
	return s
}

type SubmitAsyncTaskResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SubmitAsyncTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitAsyncTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAsyncTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAsyncTaskResponseBody) SetCode(v string) *SubmitAsyncTaskResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitAsyncTaskResponseBody) SetData(v *SubmitAsyncTaskResponseBodyData) *SubmitAsyncTaskResponseBody {
	s.Data = v
	return s
}

func (s *SubmitAsyncTaskResponseBody) SetHttpStatusCode(v int32) *SubmitAsyncTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitAsyncTaskResponseBody) SetMessage(v string) *SubmitAsyncTaskResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitAsyncTaskResponseBody) SetRequestId(v string) *SubmitAsyncTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitAsyncTaskResponseBody) SetSuccess(v bool) *SubmitAsyncTaskResponseBody {
	s.Success = &v
	return s
}

type SubmitAsyncTaskResponseBodyData struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// {}
	TaskIntermediateResult interface{} `json:"TaskIntermediateResult,omitempty" xml:"TaskIntermediateResult,omitempty"`
	// example:
	//
	// 任务名称
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s SubmitAsyncTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitAsyncTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitAsyncTaskResponseBodyData) SetTaskId(v string) *SubmitAsyncTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *SubmitAsyncTaskResponseBodyData) SetTaskIntermediateResult(v interface{}) *SubmitAsyncTaskResponseBodyData {
	s.TaskIntermediateResult = v
	return s
}

func (s *SubmitAsyncTaskResponseBodyData) SetTaskName(v string) *SubmitAsyncTaskResponseBodyData {
	s.TaskName = &v
	return s
}

type SubmitAsyncTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitAsyncTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitAsyncTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAsyncTaskResponse) GoString() string {
	return s.String()
}

func (s *SubmitAsyncTaskResponse) SetHeaders(v map[string]*string) *SubmitAsyncTaskResponse {
	s.Headers = v
	return s
}

func (s *SubmitAsyncTaskResponse) SetStatusCode(v int32) *SubmitAsyncTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAsyncTaskResponse) SetBody(v *SubmitAsyncTaskResponseBody) *SubmitAsyncTaskResponse {
	s.Body = v
	return s
}

type SubmitCustomHotTopicBroadcastJobRequest struct {
	// This parameter is required.
	HotTopicBroadcastConfig *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfig `json:"HotTopicBroadcastConfig,omitempty" xml:"HotTopicBroadcastConfig,omitempty" type:"Struct"`
	// example:
	//
	// 热点版本
	HotTopicVersion *string   `json:"HotTopicVersion,omitempty" xml:"HotTopicVersion,omitempty"`
	Topics          []*string `json:"Topics,omitempty" xml:"Topics,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s SubmitCustomHotTopicBroadcastJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomHotTopicBroadcastJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitCustomHotTopicBroadcastJobRequest) SetHotTopicBroadcastConfig(v *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfig) *SubmitCustomHotTopicBroadcastJobRequest {
	s.HotTopicBroadcastConfig = v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequest) SetHotTopicVersion(v string) *SubmitCustomHotTopicBroadcastJobRequest {
	s.HotTopicVersion = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequest) SetTopics(v []*string) *SubmitCustomHotTopicBroadcastJobRequest {
	s.Topics = v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequest) SetWorkspaceId(v string) *SubmitCustomHotTopicBroadcastJobRequest {
	s.WorkspaceId = &v
	return s
}

type SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfig struct {
	// This parameter is required.
	StepForCustomSummaryStyleConfig *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig `json:"StepForCustomSummaryStyleConfig,omitempty" xml:"StepForCustomSummaryStyleConfig,omitempty" type:"Struct"`
	// This parameter is required.
	StepForNewsBroadcastContentConfig *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig `json:"StepForNewsBroadcastContentConfig,omitempty" xml:"StepForNewsBroadcastContentConfig,omitempty" type:"Struct"`
}

func (s SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfig) GoString() string {
	return s.String()
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfig) SetStepForCustomSummaryStyleConfig(v *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfig {
	s.StepForCustomSummaryStyleConfig = v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfig) SetStepForNewsBroadcastContentConfig(v *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfig {
	s.StepForNewsBroadcastContentConfig = v
	return s
}

type SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig struct {
	// example:
	//
	// 3
	SummaryImageCount *int32 `json:"SummaryImageCount,omitempty" xml:"SummaryImageCount,omitempty"`
	// example:
	//
	// qwen-max
	SummaryModel *string `json:"SummaryModel,omitempty" xml:"SummaryModel,omitempty"`
	// example:
	//
	// xxxx
	SummaryPrompt *string `json:"SummaryPrompt,omitempty" xml:"SummaryPrompt,omitempty"`
}

func (s SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig) GoString() string {
	return s.String()
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig) SetSummaryImageCount(v int32) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig {
	s.SummaryImageCount = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig) SetSummaryModel(v string) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig {
	s.SummaryModel = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig) SetSummaryPrompt(v string) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForCustomSummaryStyleConfig {
	s.SummaryPrompt = &v
	return s
}

type SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig struct {
	// example:
	//
	// ["科技","经济","时政","娱乐"]
	Categories            []*string                                                                                                               `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	CustomHotValueWeights []*SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights `json:"CustomHotValueWeights,omitempty" xml:"CustomHotValueWeights,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	TopicCount *int32 `json:"TopicCount,omitempty" xml:"TopicCount,omitempty"`
}

func (s SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig) GoString() string {
	return s.String()
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig) SetCategories(v []*string) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig {
	s.Categories = v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig) SetCustomHotValueWeights(v []*SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig {
	s.CustomHotValueWeights = v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig) SetTopicCount(v int32) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfig {
	s.TopicCount = &v
	return s
}

type SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights struct {
	// example:
	//
	// views
	Dimension *string `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// example:
	//
	// 维度名称
	DimensionName *string `json:"DimensionName,omitempty" xml:"DimensionName,omitempty"`
	// example:
	//
	// 1
	Weight *int32 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights) GoString() string {
	return s.String()
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights) SetDimension(v string) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights {
	s.Dimension = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights) SetDimensionName(v string) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights {
	s.DimensionName = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights) SetWeight(v int32) *SubmitCustomHotTopicBroadcastJobRequestHotTopicBroadcastConfigStepForNewsBroadcastContentConfigCustomHotValueWeights {
	s.Weight = &v
	return s
}

type SubmitCustomHotTopicBroadcastJobShrinkRequest struct {
	// This parameter is required.
	HotTopicBroadcastConfigShrink *string `json:"HotTopicBroadcastConfig,omitempty" xml:"HotTopicBroadcastConfig,omitempty"`
	// example:
	//
	// 热点版本
	HotTopicVersion *string `json:"HotTopicVersion,omitempty" xml:"HotTopicVersion,omitempty"`
	TopicsShrink    *string `json:"Topics,omitempty" xml:"Topics,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s SubmitCustomHotTopicBroadcastJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomHotTopicBroadcastJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitCustomHotTopicBroadcastJobShrinkRequest) SetHotTopicBroadcastConfigShrink(v string) *SubmitCustomHotTopicBroadcastJobShrinkRequest {
	s.HotTopicBroadcastConfigShrink = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobShrinkRequest) SetHotTopicVersion(v string) *SubmitCustomHotTopicBroadcastJobShrinkRequest {
	s.HotTopicVersion = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobShrinkRequest) SetTopicsShrink(v string) *SubmitCustomHotTopicBroadcastJobShrinkRequest {
	s.TopicsShrink = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobShrinkRequest) SetWorkspaceId(v string) *SubmitCustomHotTopicBroadcastJobShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type SubmitCustomHotTopicBroadcastJobResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SubmitCustomHotTopicBroadcastJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitCustomHotTopicBroadcastJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomHotTopicBroadcastJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitCustomHotTopicBroadcastJobResponseBody) SetCode(v string) *SubmitCustomHotTopicBroadcastJobResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobResponseBody) SetData(v *SubmitCustomHotTopicBroadcastJobResponseBodyData) *SubmitCustomHotTopicBroadcastJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobResponseBody) SetHttpStatusCode(v int32) *SubmitCustomHotTopicBroadcastJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobResponseBody) SetMessage(v string) *SubmitCustomHotTopicBroadcastJobResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobResponseBody) SetRequestId(v string) *SubmitCustomHotTopicBroadcastJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobResponseBody) SetSuccess(v bool) *SubmitCustomHotTopicBroadcastJobResponseBody {
	s.Success = &v
	return s
}

type SubmitCustomHotTopicBroadcastJobResponseBodyData struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SubmitCustomHotTopicBroadcastJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomHotTopicBroadcastJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitCustomHotTopicBroadcastJobResponseBodyData) SetTaskId(v string) *SubmitCustomHotTopicBroadcastJobResponseBodyData {
	s.TaskId = &v
	return s
}

type SubmitCustomHotTopicBroadcastJobResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitCustomHotTopicBroadcastJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitCustomHotTopicBroadcastJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomHotTopicBroadcastJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitCustomHotTopicBroadcastJobResponse) SetHeaders(v map[string]*string) *SubmitCustomHotTopicBroadcastJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobResponse) SetStatusCode(v int32) *SubmitCustomHotTopicBroadcastJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitCustomHotTopicBroadcastJobResponse) SetBody(v *SubmitCustomHotTopicBroadcastJobResponseBody) *SubmitCustomHotTopicBroadcastJobResponse {
	s.Body = v
	return s
}

type SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey  *string                                                              `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	Documents []*SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments `json:"Documents,omitempty" xml:"Documents,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 自定义观点的输入Prompt
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 待分析的主题名（documents与topic二者至少传一个）
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest) GoString() string {
	return s.String()
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest) SetAgentKey(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest) SetDocuments(v []*SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest {
	s.Documents = v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest) SetPrompt(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest {
	s.Prompt = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest) SetTopic(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest {
	s.Topic = &v
	return s
}

type SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments struct {
	// example:
	//
	// 作者
	Author *string `json:"Author,omitempty" xml:"Author,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 2024-01-22 10:29:00
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 新浪
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) GoString() string {
	return s.String()
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetAuthor(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Author = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetContent(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Content = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetPubTime(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.PubTime = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetSource(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Source = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetSummary(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Summary = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetTitle(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Title = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetUrl(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Url = &v
	return s
}

type SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey        *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	DocumentsShrink *string `json:"Documents,omitempty" xml:"Documents,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 自定义观点的输入Prompt
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 待分析的主题名（documents与topic二者至少传一个）
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest) SetAgentKey(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest) SetDocumentsShrink(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest {
	s.DocumentsShrink = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest) SetPrompt(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest {
	s.Prompt = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest) SetTopic(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest {
	s.Topic = &v
	return s
}

type SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetCode(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetData(v *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Data = v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetHttpStatusCode(v int32) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetMessage(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetRequestId(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) SetSuccess(v bool) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Success = &v
	return s
}

type SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetTaskId(v string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.TaskId = &v
	return s
}

type SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse struct {
	Headers    map[string]*string                                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse) GoString() string {
	return s.String()
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse) SetHeaders(v map[string]*string) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse {
	s.Headers = v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse) SetStatusCode(v int32) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse) SetBody(v *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponseBody) *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse {
	s.Body = v
	return s
}

type SubmitDocClusterTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	Documents []*SubmitDocClusterTaskRequestDocuments `json:"Documents,omitempty" xml:"Documents,omitempty" type:"Repeated"`
	// example:
	//
	// 49
	SummaryLength *int32 `json:"SummaryLength,omitempty" xml:"SummaryLength,omitempty"`
	// example:
	//
	// 69
	TitleLength *int32 `json:"TitleLength,omitempty" xml:"TitleLength,omitempty"`
	// example:
	//
	// 15
	TopicCount *int32 `json:"TopicCount,omitempty" xml:"TopicCount,omitempty"`
}

func (s SubmitDocClusterTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDocClusterTaskRequest) GoString() string {
	return s.String()
}

func (s *SubmitDocClusterTaskRequest) SetAgentKey(v string) *SubmitDocClusterTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *SubmitDocClusterTaskRequest) SetDocuments(v []*SubmitDocClusterTaskRequestDocuments) *SubmitDocClusterTaskRequest {
	s.Documents = v
	return s
}

func (s *SubmitDocClusterTaskRequest) SetSummaryLength(v int32) *SubmitDocClusterTaskRequest {
	s.SummaryLength = &v
	return s
}

func (s *SubmitDocClusterTaskRequest) SetTitleLength(v int32) *SubmitDocClusterTaskRequest {
	s.TitleLength = &v
	return s
}

func (s *SubmitDocClusterTaskRequest) SetTopicCount(v int32) *SubmitDocClusterTaskRequest {
	s.TopicCount = &v
	return s
}

type SubmitDocClusterTaskRequestDocuments struct {
	// This parameter is required.
	//
	// example:
	//
	// 文档内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 文档ID。用于在返回聚类文章时标识文章。如果文章列表中都不传则使用数组索引作为ID。如果部分传则会报错
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 文档标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s SubmitDocClusterTaskRequestDocuments) String() string {
	return tea.Prettify(s)
}

func (s SubmitDocClusterTaskRequestDocuments) GoString() string {
	return s.String()
}

func (s *SubmitDocClusterTaskRequestDocuments) SetContent(v string) *SubmitDocClusterTaskRequestDocuments {
	s.Content = &v
	return s
}

func (s *SubmitDocClusterTaskRequestDocuments) SetDocId(v string) *SubmitDocClusterTaskRequestDocuments {
	s.DocId = &v
	return s
}

func (s *SubmitDocClusterTaskRequestDocuments) SetTitle(v string) *SubmitDocClusterTaskRequestDocuments {
	s.Title = &v
	return s
}

type SubmitDocClusterTaskShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// This parameter is required.
	DocumentsShrink *string `json:"Documents,omitempty" xml:"Documents,omitempty"`
	// example:
	//
	// 49
	SummaryLength *int32 `json:"SummaryLength,omitempty" xml:"SummaryLength,omitempty"`
	// example:
	//
	// 69
	TitleLength *int32 `json:"TitleLength,omitempty" xml:"TitleLength,omitempty"`
	// example:
	//
	// 15
	TopicCount *int32 `json:"TopicCount,omitempty" xml:"TopicCount,omitempty"`
}

func (s SubmitDocClusterTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDocClusterTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitDocClusterTaskShrinkRequest) SetAgentKey(v string) *SubmitDocClusterTaskShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *SubmitDocClusterTaskShrinkRequest) SetDocumentsShrink(v string) *SubmitDocClusterTaskShrinkRequest {
	s.DocumentsShrink = &v
	return s
}

func (s *SubmitDocClusterTaskShrinkRequest) SetSummaryLength(v int32) *SubmitDocClusterTaskShrinkRequest {
	s.SummaryLength = &v
	return s
}

func (s *SubmitDocClusterTaskShrinkRequest) SetTitleLength(v int32) *SubmitDocClusterTaskShrinkRequest {
	s.TitleLength = &v
	return s
}

func (s *SubmitDocClusterTaskShrinkRequest) SetTopicCount(v int32) *SubmitDocClusterTaskShrinkRequest {
	s.TopicCount = &v
	return s
}

type SubmitDocClusterTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SubmitDocClusterTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitDocClusterTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitDocClusterTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitDocClusterTaskResponseBody) SetCode(v string) *SubmitDocClusterTaskResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitDocClusterTaskResponseBody) SetData(v *SubmitDocClusterTaskResponseBodyData) *SubmitDocClusterTaskResponseBody {
	s.Data = v
	return s
}

func (s *SubmitDocClusterTaskResponseBody) SetHttpStatusCode(v int32) *SubmitDocClusterTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitDocClusterTaskResponseBody) SetMessage(v string) *SubmitDocClusterTaskResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitDocClusterTaskResponseBody) SetRequestId(v string) *SubmitDocClusterTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitDocClusterTaskResponseBody) SetSuccess(v bool) *SubmitDocClusterTaskResponseBody {
	s.Success = &v
	return s
}

type SubmitDocClusterTaskResponseBodyData struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SubmitDocClusterTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitDocClusterTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitDocClusterTaskResponseBodyData) SetTaskId(v string) *SubmitDocClusterTaskResponseBodyData {
	s.TaskId = &v
	return s
}

type SubmitDocClusterTaskResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitDocClusterTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitDocClusterTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDocClusterTaskResponse) GoString() string {
	return s.String()
}

func (s *SubmitDocClusterTaskResponse) SetHeaders(v map[string]*string) *SubmitDocClusterTaskResponse {
	s.Headers = v
	return s
}

func (s *SubmitDocClusterTaskResponse) SetStatusCode(v int32) *SubmitDocClusterTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitDocClusterTaskResponse) SetBody(v *SubmitDocClusterTaskResponseBody) *SubmitDocClusterTaskResponse {
	s.Body = v
	return s
}

type SubmitEnterpriseVocAnalysisTaskRequest struct {
	ApiKey *string `json:"ApiKey,omitempty" xml:"ApiKey,omitempty"`
	// This parameter is required.
	ContentTags []*SubmitEnterpriseVocAnalysisTaskRequestContentTags `json:"ContentTags,omitempty" xml:"ContentTags,omitempty" type:"Repeated"`
	Contents    []*SubmitEnterpriseVocAnalysisTaskRequestContents    `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
	// example:
	//
	// oss://default/bucket-name/materialDocument/tenant_agent/fileName
	FileKey    *string                                             `json:"FileKey,omitempty" xml:"FileKey,omitempty"`
	FilterTags []*SubmitEnterpriseVocAnalysisTaskRequestFilterTags `json:"FilterTags,omitempty" xml:"FilterTags,omitempty" type:"Repeated"`
	// example:
	//
	// shortContent
	MaterialType *string `json:"MaterialType,omitempty" xml:"MaterialType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// qwen-max
	ModelId        *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	PositiveSample *string `json:"PositiveSample,omitempty" xml:"PositiveSample,omitempty"`
	// example:
	//
	// oss://default/bucket-name/path/xxx.xlsx
	PositiveSampleFileKey *string `json:"PositiveSampleFileKey,omitempty" xml:"PositiveSampleFileKey,omitempty"`
	// example:
	//
	// lightAppSass
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s SubmitEnterpriseVocAnalysisTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitEnterpriseVocAnalysisTaskRequest) GoString() string {
	return s.String()
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetApiKey(v string) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.ApiKey = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetContentTags(v []*SubmitEnterpriseVocAnalysisTaskRequestContentTags) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.ContentTags = v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetContents(v []*SubmitEnterpriseVocAnalysisTaskRequestContents) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.Contents = v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetFileKey(v string) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.FileKey = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetFilterTags(v []*SubmitEnterpriseVocAnalysisTaskRequestFilterTags) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.FilterTags = v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetMaterialType(v string) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.MaterialType = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetModelId(v string) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.ModelId = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetPositiveSample(v string) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.PositiveSample = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetPositiveSampleFileKey(v string) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.PositiveSampleFileKey = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetTaskType(v string) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.TaskType = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequest) SetWorkspaceId(v string) *SubmitEnterpriseVocAnalysisTaskRequest {
	s.WorkspaceId = &v
	return s
}

type SubmitEnterpriseVocAnalysisTaskRequestContentTags struct {
	// example:
	//
	// 一级标签-二级标签
	TagDefinePrompt *string `json:"TagDefinePrompt,omitempty" xml:"TagDefinePrompt,omitempty"`
	// example:
	//
	// 一级标签-二级标签
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	// example:
	//
	// singleTagValue
	TagTaskType          *string `json:"TagTaskType,omitempty" xml:"TagTaskType,omitempty"`
	TagValueDefinePrompt *string `json:"TagValueDefinePrompt,omitempty" xml:"TagValueDefinePrompt,omitempty"`
}

func (s SubmitEnterpriseVocAnalysisTaskRequestContentTags) String() string {
	return tea.Prettify(s)
}

func (s SubmitEnterpriseVocAnalysisTaskRequestContentTags) GoString() string {
	return s.String()
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestContentTags) SetTagDefinePrompt(v string) *SubmitEnterpriseVocAnalysisTaskRequestContentTags {
	s.TagDefinePrompt = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestContentTags) SetTagName(v string) *SubmitEnterpriseVocAnalysisTaskRequestContentTags {
	s.TagName = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestContentTags) SetTagTaskType(v string) *SubmitEnterpriseVocAnalysisTaskRequestContentTags {
	s.TagTaskType = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestContentTags) SetTagValueDefinePrompt(v string) *SubmitEnterpriseVocAnalysisTaskRequestContentTags {
	s.TagValueDefinePrompt = &v
	return s
}

type SubmitEnterpriseVocAnalysisTaskRequestContents struct {
	ExtraInfo *string `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	Text      *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s SubmitEnterpriseVocAnalysisTaskRequestContents) String() string {
	return tea.Prettify(s)
}

func (s SubmitEnterpriseVocAnalysisTaskRequestContents) GoString() string {
	return s.String()
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestContents) SetExtraInfo(v string) *SubmitEnterpriseVocAnalysisTaskRequestContents {
	s.ExtraInfo = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestContents) SetText(v string) *SubmitEnterpriseVocAnalysisTaskRequestContents {
	s.Text = &v
	return s
}

type SubmitEnterpriseVocAnalysisTaskRequestFilterTags struct {
	// example:
	//
	// 一级标签-二级标签
	TagDefinePrompt *string `json:"TagDefinePrompt,omitempty" xml:"TagDefinePrompt,omitempty"`
	// example:
	//
	// 一级标签-二级标签
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	// example:
	//
	// singleTagValue
	TagType              *string `json:"TagType,omitempty" xml:"TagType,omitempty"`
	TagValueDefinePrompt *string `json:"TagValueDefinePrompt,omitempty" xml:"TagValueDefinePrompt,omitempty"`
}

func (s SubmitEnterpriseVocAnalysisTaskRequestFilterTags) String() string {
	return tea.Prettify(s)
}

func (s SubmitEnterpriseVocAnalysisTaskRequestFilterTags) GoString() string {
	return s.String()
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestFilterTags) SetTagDefinePrompt(v string) *SubmitEnterpriseVocAnalysisTaskRequestFilterTags {
	s.TagDefinePrompt = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestFilterTags) SetTagName(v string) *SubmitEnterpriseVocAnalysisTaskRequestFilterTags {
	s.TagName = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestFilterTags) SetTagType(v string) *SubmitEnterpriseVocAnalysisTaskRequestFilterTags {
	s.TagType = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskRequestFilterTags) SetTagValueDefinePrompt(v string) *SubmitEnterpriseVocAnalysisTaskRequestFilterTags {
	s.TagValueDefinePrompt = &v
	return s
}

type SubmitEnterpriseVocAnalysisTaskShrinkRequest struct {
	ApiKey *string `json:"ApiKey,omitempty" xml:"ApiKey,omitempty"`
	// This parameter is required.
	ContentTagsShrink *string `json:"ContentTags,omitempty" xml:"ContentTags,omitempty"`
	ContentsShrink    *string `json:"Contents,omitempty" xml:"Contents,omitempty"`
	// example:
	//
	// oss://default/bucket-name/materialDocument/tenant_agent/fileName
	FileKey          *string `json:"FileKey,omitempty" xml:"FileKey,omitempty"`
	FilterTagsShrink *string `json:"FilterTags,omitempty" xml:"FilterTags,omitempty"`
	// example:
	//
	// shortContent
	MaterialType *string `json:"MaterialType,omitempty" xml:"MaterialType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// qwen-max
	ModelId        *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	PositiveSample *string `json:"PositiveSample,omitempty" xml:"PositiveSample,omitempty"`
	// example:
	//
	// oss://default/bucket-name/path/xxx.xlsx
	PositiveSampleFileKey *string `json:"PositiveSampleFileKey,omitempty" xml:"PositiveSampleFileKey,omitempty"`
	// example:
	//
	// lightAppSass
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s SubmitEnterpriseVocAnalysisTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitEnterpriseVocAnalysisTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetApiKey(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.ApiKey = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetContentTagsShrink(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.ContentTagsShrink = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetContentsShrink(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.ContentsShrink = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetFileKey(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.FileKey = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetFilterTagsShrink(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.FilterTagsShrink = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetMaterialType(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.MaterialType = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetModelId(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.ModelId = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetPositiveSample(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.PositiveSample = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetPositiveSampleFileKey(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.PositiveSampleFileKey = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetTaskType(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.TaskType = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskShrinkRequest) SetWorkspaceId(v string) *SubmitEnterpriseVocAnalysisTaskShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type SubmitEnterpriseVocAnalysisTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SubmitEnterpriseVocAnalysisTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitEnterpriseVocAnalysisTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitEnterpriseVocAnalysisTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitEnterpriseVocAnalysisTaskResponseBody) SetCode(v string) *SubmitEnterpriseVocAnalysisTaskResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskResponseBody) SetData(v *SubmitEnterpriseVocAnalysisTaskResponseBodyData) *SubmitEnterpriseVocAnalysisTaskResponseBody {
	s.Data = v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskResponseBody) SetHttpStatusCode(v int32) *SubmitEnterpriseVocAnalysisTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskResponseBody) SetMessage(v string) *SubmitEnterpriseVocAnalysisTaskResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskResponseBody) SetRequestId(v string) *SubmitEnterpriseVocAnalysisTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskResponseBody) SetSuccess(v bool) *SubmitEnterpriseVocAnalysisTaskResponseBody {
	s.Success = &v
	return s
}

type SubmitEnterpriseVocAnalysisTaskResponseBodyData struct {
	// example:
	//
	// xxxxx
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SubmitEnterpriseVocAnalysisTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitEnterpriseVocAnalysisTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitEnterpriseVocAnalysisTaskResponseBodyData) SetTaskId(v string) *SubmitEnterpriseVocAnalysisTaskResponseBodyData {
	s.TaskId = &v
	return s
}

type SubmitEnterpriseVocAnalysisTaskResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitEnterpriseVocAnalysisTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitEnterpriseVocAnalysisTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitEnterpriseVocAnalysisTaskResponse) GoString() string {
	return s.String()
}

func (s *SubmitEnterpriseVocAnalysisTaskResponse) SetHeaders(v map[string]*string) *SubmitEnterpriseVocAnalysisTaskResponse {
	s.Headers = v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskResponse) SetStatusCode(v int32) *SubmitEnterpriseVocAnalysisTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitEnterpriseVocAnalysisTaskResponse) SetBody(v *SubmitEnterpriseVocAnalysisTaskResponseBody) *SubmitEnterpriseVocAnalysisTaskResponse {
	s.Body = v
	return s
}

type SubmitSmartClipTaskRequest struct {
	EditingConfig *SubmitSmartClipTaskRequestEditingConfig `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty" type:"Struct"`
	ExtendParam   *string                                  `json:"ExtendParam,omitempty" xml:"ExtendParam,omitempty"`
	// This parameter is required.
	InputConfig  *SubmitSmartClipTaskRequestInputConfig  `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	OutputConfig *SubmitSmartClipTaskRequestOutputConfig `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty" type:"Struct"`
	// This parameter is required.
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s SubmitSmartClipTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequest) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequest) SetEditingConfig(v *SubmitSmartClipTaskRequestEditingConfig) *SubmitSmartClipTaskRequest {
	s.EditingConfig = v
	return s
}

func (s *SubmitSmartClipTaskRequest) SetExtendParam(v string) *SubmitSmartClipTaskRequest {
	s.ExtendParam = &v
	return s
}

func (s *SubmitSmartClipTaskRequest) SetInputConfig(v *SubmitSmartClipTaskRequestInputConfig) *SubmitSmartClipTaskRequest {
	s.InputConfig = v
	return s
}

func (s *SubmitSmartClipTaskRequest) SetOutputConfig(v *SubmitSmartClipTaskRequestOutputConfig) *SubmitSmartClipTaskRequest {
	s.OutputConfig = v
	return s
}

func (s *SubmitSmartClipTaskRequest) SetWorkspaceId(v string) *SubmitSmartClipTaskRequest {
	s.WorkspaceId = &v
	return s
}

type SubmitSmartClipTaskRequestEditingConfig struct {
	BackgroundMusicConfig *SubmitSmartClipTaskRequestEditingConfigBackgroundMusicConfig `json:"BackgroundMusicConfig,omitempty" xml:"BackgroundMusicConfig,omitempty" type:"Struct"`
	MediaConfig           *SubmitSmartClipTaskRequestEditingConfigMediaConfig           `json:"MediaConfig,omitempty" xml:"MediaConfig,omitempty" type:"Struct"`
	SpeechConfig          *SubmitSmartClipTaskRequestEditingConfigSpeechConfig          `json:"SpeechConfig,omitempty" xml:"SpeechConfig,omitempty" type:"Struct"`
	TitleConfig           *SubmitSmartClipTaskRequestEditingConfigTitleConfig           `json:"TitleConfig,omitempty" xml:"TitleConfig,omitempty" type:"Struct"`
}

func (s SubmitSmartClipTaskRequestEditingConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestEditingConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestEditingConfig) SetBackgroundMusicConfig(v *SubmitSmartClipTaskRequestEditingConfigBackgroundMusicConfig) *SubmitSmartClipTaskRequestEditingConfig {
	s.BackgroundMusicConfig = v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfig) SetMediaConfig(v *SubmitSmartClipTaskRequestEditingConfigMediaConfig) *SubmitSmartClipTaskRequestEditingConfig {
	s.MediaConfig = v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfig) SetSpeechConfig(v *SubmitSmartClipTaskRequestEditingConfigSpeechConfig) *SubmitSmartClipTaskRequestEditingConfig {
	s.SpeechConfig = v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfig) SetTitleConfig(v *SubmitSmartClipTaskRequestEditingConfigTitleConfig) *SubmitSmartClipTaskRequestEditingConfig {
	s.TitleConfig = v
	return s
}

type SubmitSmartClipTaskRequestEditingConfigBackgroundMusicConfig struct {
	Style *string `json:"Style,omitempty" xml:"Style,omitempty"`
	// example:
	//
	// 0.2
	Volume *float64 `json:"Volume,omitempty" xml:"Volume,omitempty"`
}

func (s SubmitSmartClipTaskRequestEditingConfigBackgroundMusicConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestEditingConfigBackgroundMusicConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestEditingConfigBackgroundMusicConfig) SetStyle(v string) *SubmitSmartClipTaskRequestEditingConfigBackgroundMusicConfig {
	s.Style = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigBackgroundMusicConfig) SetVolume(v float64) *SubmitSmartClipTaskRequestEditingConfigBackgroundMusicConfig {
	s.Volume = &v
	return s
}

type SubmitSmartClipTaskRequestEditingConfigMediaConfig struct {
	Volume *float64 `json:"Volume,omitempty" xml:"Volume,omitempty"`
}

func (s SubmitSmartClipTaskRequestEditingConfigMediaConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestEditingConfigMediaConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestEditingConfigMediaConfig) SetVolume(v float64) *SubmitSmartClipTaskRequestEditingConfigMediaConfig {
	s.Volume = &v
	return s
}

type SubmitSmartClipTaskRequestEditingConfigSpeechConfig struct {
	AsrConfig *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig `json:"AsrConfig,omitempty" xml:"AsrConfig,omitempty" type:"Struct"`
	// example:
	//
	// 0
	SpeechRate *float64 `json:"SpeechRate,omitempty" xml:"SpeechRate,omitempty"`
	Style      *string  `json:"Style,omitempty" xml:"Style,omitempty"`
	Voice      *string  `json:"Voice,omitempty" xml:"Voice,omitempty"`
	// example:
	//
	// 0.5
	Volume *float64 `json:"Volume,omitempty" xml:"Volume,omitempty"`
}

func (s SubmitSmartClipTaskRequestEditingConfigSpeechConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestEditingConfigSpeechConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfig) SetAsrConfig(v *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) *SubmitSmartClipTaskRequestEditingConfigSpeechConfig {
	s.AsrConfig = v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfig) SetSpeechRate(v float64) *SubmitSmartClipTaskRequestEditingConfigSpeechConfig {
	s.SpeechRate = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfig) SetStyle(v string) *SubmitSmartClipTaskRequestEditingConfigSpeechConfig {
	s.Style = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfig) SetVoice(v string) *SubmitSmartClipTaskRequestEditingConfigSpeechConfig {
	s.Voice = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfig) SetVolume(v float64) *SubmitSmartClipTaskRequestEditingConfigSpeechConfig {
	s.Volume = &v
	return s
}

type SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig struct {
	Alignment *string `json:"Alignment,omitempty" xml:"Alignment,omitempty"`
	// example:
	//
	// SimSun
	Font *string `json:"Font,omitempty" xml:"Font,omitempty"`
	// example:
	//
	// #ffffff
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// example:
	//
	// 0
	FontSize *string `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// example:
	//
	// 0
	Spacing *string  `json:"Spacing,omitempty" xml:"Spacing,omitempty"`
	X       *float32 `json:"X,omitempty" xml:"X,omitempty"`
	Y       *float32 `json:"Y,omitempty" xml:"Y,omitempty"`
}

func (s SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) SetAlignment(v string) *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig {
	s.Alignment = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) SetFont(v string) *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig {
	s.Font = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) SetFontColor(v string) *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig {
	s.FontColor = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) SetFontSize(v string) *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig {
	s.FontSize = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) SetSpacing(v string) *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig {
	s.Spacing = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) SetX(v float32) *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig {
	s.X = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig) SetY(v float32) *SubmitSmartClipTaskRequestEditingConfigSpeechConfigAsrConfig {
	s.Y = &v
	return s
}

type SubmitSmartClipTaskRequestEditingConfigTitleConfig struct {
	// example:
	//
	// TopLeft
	Alignment *string `json:"Alignment,omitempty" xml:"Alignment,omitempty"`
	// example:
	//
	// 2
	TimelineIn *float32 `json:"TimelineIn,omitempty" xml:"TimelineIn,omitempty"`
	// example:
	//
	// 3
	TimelineOut *float32 `json:"TimelineOut,omitempty" xml:"TimelineOut,omitempty"`
	// example:
	//
	// 100
	X *float32 `json:"X,omitempty" xml:"X,omitempty"`
	// example:
	//
	// 100
	Y *float32 `json:"Y,omitempty" xml:"Y,omitempty"`
}

func (s SubmitSmartClipTaskRequestEditingConfigTitleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestEditingConfigTitleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestEditingConfigTitleConfig) SetAlignment(v string) *SubmitSmartClipTaskRequestEditingConfigTitleConfig {
	s.Alignment = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigTitleConfig) SetTimelineIn(v float32) *SubmitSmartClipTaskRequestEditingConfigTitleConfig {
	s.TimelineIn = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigTitleConfig) SetTimelineOut(v float32) *SubmitSmartClipTaskRequestEditingConfigTitleConfig {
	s.TimelineOut = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigTitleConfig) SetX(v float32) *SubmitSmartClipTaskRequestEditingConfigTitleConfig {
	s.X = &v
	return s
}

func (s *SubmitSmartClipTaskRequestEditingConfigTitleConfig) SetY(v float32) *SubmitSmartClipTaskRequestEditingConfigTitleConfig {
	s.Y = &v
	return s
}

type SubmitSmartClipTaskRequestInputConfig struct {
	BackgroundMusics []*SubmitSmartClipTaskRequestInputConfigBackgroundMusics `json:"BackgroundMusics,omitempty" xml:"BackgroundMusics,omitempty" type:"Repeated"`
	SpeechTexts      []*string                                                `json:"SpeechTexts,omitempty" xml:"SpeechTexts,omitempty" type:"Repeated"`
	Stickers         []*SubmitSmartClipTaskRequestInputConfigStickers         `json:"Stickers,omitempty" xml:"Stickers,omitempty" type:"Repeated"`
	Titles           []*string                                                `json:"Titles,omitempty" xml:"Titles,omitempty" type:"Repeated"`
	// This parameter is required.
	VideoIds []*SubmitSmartClipTaskRequestInputConfigVideoIds `json:"VideoIds,omitempty" xml:"VideoIds,omitempty" type:"Repeated"`
}

func (s SubmitSmartClipTaskRequestInputConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestInputConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestInputConfig) SetBackgroundMusics(v []*SubmitSmartClipTaskRequestInputConfigBackgroundMusics) *SubmitSmartClipTaskRequestInputConfig {
	s.BackgroundMusics = v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfig) SetSpeechTexts(v []*string) *SubmitSmartClipTaskRequestInputConfig {
	s.SpeechTexts = v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfig) SetStickers(v []*SubmitSmartClipTaskRequestInputConfigStickers) *SubmitSmartClipTaskRequestInputConfig {
	s.Stickers = v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfig) SetTitles(v []*string) *SubmitSmartClipTaskRequestInputConfig {
	s.Titles = v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfig) SetVideoIds(v []*SubmitSmartClipTaskRequestInputConfigVideoIds) *SubmitSmartClipTaskRequestInputConfig {
	s.VideoIds = v
	return s
}

type SubmitSmartClipTaskRequestInputConfigBackgroundMusics struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://default/bucket-name/filepath/video.mp3
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// fileKey
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSmartClipTaskRequestInputConfigBackgroundMusics) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestInputConfigBackgroundMusics) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestInputConfigBackgroundMusics) SetId(v string) *SubmitSmartClipTaskRequestInputConfigBackgroundMusics {
	s.Id = &v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfigBackgroundMusics) SetType(v string) *SubmitSmartClipTaskRequestInputConfigBackgroundMusics {
	s.Type = &v
	return s
}

type SubmitSmartClipTaskRequestInputConfigStickers struct {
	// This parameter is required.
	//
	// example:
	//
	// 0.5
	Height *float64 `json:"Height,omitempty" xml:"Height,omitempty"`
	// This parameter is required.
	StickerId *SubmitSmartClipTaskRequestInputConfigStickersStickerId `json:"StickerId,omitempty" xml:"StickerId,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 0.5
	Width *float64 `json:"Width,omitempty" xml:"Width,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0.5
	X *float64 `json:"X,omitempty" xml:"X,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0.5
	Y *float64 `json:"Y,omitempty" xml:"Y,omitempty"`
}

func (s SubmitSmartClipTaskRequestInputConfigStickers) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestInputConfigStickers) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestInputConfigStickers) SetHeight(v float64) *SubmitSmartClipTaskRequestInputConfigStickers {
	s.Height = &v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfigStickers) SetStickerId(v *SubmitSmartClipTaskRequestInputConfigStickersStickerId) *SubmitSmartClipTaskRequestInputConfigStickers {
	s.StickerId = v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfigStickers) SetWidth(v float64) *SubmitSmartClipTaskRequestInputConfigStickers {
	s.Width = &v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfigStickers) SetX(v float64) *SubmitSmartClipTaskRequestInputConfigStickers {
	s.X = &v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfigStickers) SetY(v float64) *SubmitSmartClipTaskRequestInputConfigStickers {
	s.Y = &v
	return s
}

type SubmitSmartClipTaskRequestInputConfigStickersStickerId struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://default/bucket-name/filepath/sticker.png
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// fileKey
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSmartClipTaskRequestInputConfigStickersStickerId) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestInputConfigStickersStickerId) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestInputConfigStickersStickerId) SetId(v string) *SubmitSmartClipTaskRequestInputConfigStickersStickerId {
	s.Id = &v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfigStickersStickerId) SetType(v string) *SubmitSmartClipTaskRequestInputConfigStickersStickerId {
	s.Type = &v
	return s
}

type SubmitSmartClipTaskRequestInputConfigVideoIds struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://default/bucket-name/filepath/video.mp4
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// fileKey
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSmartClipTaskRequestInputConfigVideoIds) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestInputConfigVideoIds) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestInputConfigVideoIds) SetId(v string) *SubmitSmartClipTaskRequestInputConfigVideoIds {
	s.Id = &v
	return s
}

func (s *SubmitSmartClipTaskRequestInputConfigVideoIds) SetType(v string) *SubmitSmartClipTaskRequestInputConfigVideoIds {
	s.Type = &v
	return s
}

type SubmitSmartClipTaskRequestOutputConfig struct {
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// test_{index}.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 1080
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 120
	MaxDuration *int32 `json:"MaxDuration,omitempty" xml:"MaxDuration,omitempty"`
	// example:
	//
	// true
	SaveToGeneratedContent *bool `json:"SaveToGeneratedContent,omitempty" xml:"SaveToGeneratedContent,omitempty"`
	// example:
	//
	// 1920
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSmartClipTaskRequestOutputConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskRequestOutputConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskRequestOutputConfig) SetCount(v int32) *SubmitSmartClipTaskRequestOutputConfig {
	s.Count = &v
	return s
}

func (s *SubmitSmartClipTaskRequestOutputConfig) SetFileName(v string) *SubmitSmartClipTaskRequestOutputConfig {
	s.FileName = &v
	return s
}

func (s *SubmitSmartClipTaskRequestOutputConfig) SetHeight(v int32) *SubmitSmartClipTaskRequestOutputConfig {
	s.Height = &v
	return s
}

func (s *SubmitSmartClipTaskRequestOutputConfig) SetMaxDuration(v int32) *SubmitSmartClipTaskRequestOutputConfig {
	s.MaxDuration = &v
	return s
}

func (s *SubmitSmartClipTaskRequestOutputConfig) SetSaveToGeneratedContent(v bool) *SubmitSmartClipTaskRequestOutputConfig {
	s.SaveToGeneratedContent = &v
	return s
}

func (s *SubmitSmartClipTaskRequestOutputConfig) SetWidth(v int32) *SubmitSmartClipTaskRequestOutputConfig {
	s.Width = &v
	return s
}

type SubmitSmartClipTaskShrinkRequest struct {
	EditingConfigShrink *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	ExtendParam         *string `json:"ExtendParam,omitempty" xml:"ExtendParam,omitempty"`
	// This parameter is required.
	InputConfigShrink  *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	OutputConfigShrink *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// This parameter is required.
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s SubmitSmartClipTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskShrinkRequest) SetEditingConfigShrink(v string) *SubmitSmartClipTaskShrinkRequest {
	s.EditingConfigShrink = &v
	return s
}

func (s *SubmitSmartClipTaskShrinkRequest) SetExtendParam(v string) *SubmitSmartClipTaskShrinkRequest {
	s.ExtendParam = &v
	return s
}

func (s *SubmitSmartClipTaskShrinkRequest) SetInputConfigShrink(v string) *SubmitSmartClipTaskShrinkRequest {
	s.InputConfigShrink = &v
	return s
}

func (s *SubmitSmartClipTaskShrinkRequest) SetOutputConfigShrink(v string) *SubmitSmartClipTaskShrinkRequest {
	s.OutputConfigShrink = &v
	return s
}

func (s *SubmitSmartClipTaskShrinkRequest) SetWorkspaceId(v string) *SubmitSmartClipTaskShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type SubmitSmartClipTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SubmitSmartClipTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitSmartClipTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskResponseBody) SetCode(v string) *SubmitSmartClipTaskResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitSmartClipTaskResponseBody) SetData(v *SubmitSmartClipTaskResponseBodyData) *SubmitSmartClipTaskResponseBody {
	s.Data = v
	return s
}

func (s *SubmitSmartClipTaskResponseBody) SetHttpStatusCode(v int32) *SubmitSmartClipTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitSmartClipTaskResponseBody) SetMessage(v string) *SubmitSmartClipTaskResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitSmartClipTaskResponseBody) SetRequestId(v string) *SubmitSmartClipTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitSmartClipTaskResponseBody) SetSuccess(v bool) *SubmitSmartClipTaskResponseBody {
	s.Success = &v
	return s
}

type SubmitSmartClipTaskResponseBodyData struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SubmitSmartClipTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskResponseBodyData) SetTaskId(v string) *SubmitSmartClipTaskResponseBodyData {
	s.TaskId = &v
	return s
}

type SubmitSmartClipTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSmartClipTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSmartClipTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmartClipTaskResponse) GoString() string {
	return s.String()
}

func (s *SubmitSmartClipTaskResponse) SetHeaders(v map[string]*string) *SubmitSmartClipTaskResponse {
	s.Headers = v
	return s
}

func (s *SubmitSmartClipTaskResponse) SetStatusCode(v int32) *SubmitSmartClipTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSmartClipTaskResponse) SetBody(v *SubmitSmartClipTaskResponseBody) *SubmitSmartClipTaskResponse {
	s.Body = v
	return s
}

type SubmitTopicSelectionPerspectiveAnalysisTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey  *string                                                        `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	Documents []*SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments `json:"Documents,omitempty" xml:"Documents,omitempty" type:"Repeated"`
	// example:
	//
	// TimedViewPoints
	PerspectiveTypes []*string `json:"PerspectiveTypes,omitempty" xml:"PerspectiveTypes,omitempty" type:"Repeated"`
	// example:
	//
	// 待分析的主题名（documents与topic二者至少传一个）
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskRequest) GoString() string {
	return s.String()
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequest) SetAgentKey(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequest {
	s.AgentKey = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequest) SetDocuments(v []*SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) *SubmitTopicSelectionPerspectiveAnalysisTaskRequest {
	s.Documents = v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequest) SetPerspectiveTypes(v []*string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequest {
	s.PerspectiveTypes = v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequest) SetTopic(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequest {
	s.Topic = &v
	return s
}

type SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments struct {
	// example:
	//
	// 作者
	Author   *string                                                                `json:"Author,omitempty" xml:"Author,omitempty"`
	Comments []*SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocumentsComments `json:"Comments,omitempty" xml:"Comments,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 2024-01-22 10:29:00
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 新浪
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) String() string {
	return tea.Prettify(s)
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) GoString() string {
	return s.String()
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetAuthor(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Author = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetComments(v []*SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocumentsComments) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Comments = v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetContent(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Content = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetPubTime(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.PubTime = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetSource(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Source = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetSummary(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Summary = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetTitle(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Title = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments) SetUrl(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocuments {
	s.Url = &v
	return s
}

type SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocumentsComments struct {
	Text     *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocumentsComments) String() string {
	return tea.Prettify(s)
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocumentsComments) GoString() string {
	return s.String()
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocumentsComments) SetText(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocumentsComments {
	s.Text = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocumentsComments) SetUsername(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskRequestDocumentsComments {
	s.Username = &v
	return s
}

type SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey        *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	DocumentsShrink *string `json:"Documents,omitempty" xml:"Documents,omitempty"`
	// example:
	//
	// TimedViewPoints
	PerspectiveTypesShrink *string `json:"PerspectiveTypes,omitempty" xml:"PerspectiveTypes,omitempty"`
	// example:
	//
	// 待分析的主题名（documents与topic二者至少传一个）
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest) SetAgentKey(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest) SetDocumentsShrink(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest {
	s.DocumentsShrink = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest) SetPerspectiveTypesShrink(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest {
	s.PerspectiveTypesShrink = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest) SetTopic(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest {
	s.Topic = &v
	return s
}

type SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody) SetCode(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody) SetData(v *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBodyData) *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Data = v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody) SetHttpStatusCode(v int32) *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody) SetMessage(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody) SetRequestId(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody) SetSuccess(v bool) *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody {
	s.Success = &v
	return s
}

type SubmitTopicSelectionPerspectiveAnalysisTaskResponseBodyData struct {
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 任务名称
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetTaskId(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBodyData) SetTaskName(v string) *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBodyData {
	s.TaskName = &v
	return s
}

type SubmitTopicSelectionPerspectiveAnalysisTaskResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTopicSelectionPerspectiveAnalysisTaskResponse) GoString() string {
	return s.String()
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponse) SetHeaders(v map[string]*string) *SubmitTopicSelectionPerspectiveAnalysisTaskResponse {
	s.Headers = v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponse) SetStatusCode(v int32) *SubmitTopicSelectionPerspectiveAnalysisTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTopicSelectionPerspectiveAnalysisTaskResponse) SetBody(v *SubmitTopicSelectionPerspectiveAnalysisTaskResponseBody) *SubmitTopicSelectionPerspectiveAnalysisTaskResponse {
	s.Body = v
	return s
}

type UpdateCustomTextRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 商品code
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// example:
	//
	// 内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 96
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateCustomTextRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTextRequest) GoString() string {
	return s.String()
}

func (s *UpdateCustomTextRequest) SetAgentKey(v string) *UpdateCustomTextRequest {
	s.AgentKey = &v
	return s
}

func (s *UpdateCustomTextRequest) SetCommodityCode(v string) *UpdateCustomTextRequest {
	s.CommodityCode = &v
	return s
}

func (s *UpdateCustomTextRequest) SetContent(v string) *UpdateCustomTextRequest {
	s.Content = &v
	return s
}

func (s *UpdateCustomTextRequest) SetId(v int64) *UpdateCustomTextRequest {
	s.Id = &v
	return s
}

func (s *UpdateCustomTextRequest) SetTitle(v string) *UpdateCustomTextRequest {
	s.Title = &v
	return s
}

type UpdateCustomTextResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 48
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateCustomTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTextResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCustomTextResponseBody) SetCode(v string) *UpdateCustomTextResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateCustomTextResponseBody) SetData(v int64) *UpdateCustomTextResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateCustomTextResponseBody) SetHttpStatusCode(v int32) *UpdateCustomTextResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateCustomTextResponseBody) SetMessage(v string) *UpdateCustomTextResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateCustomTextResponseBody) SetRequestId(v string) *UpdateCustomTextResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCustomTextResponseBody) SetSuccess(v bool) *UpdateCustomTextResponseBody {
	s.Success = &v
	return s
}

type UpdateCustomTextResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCustomTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCustomTextResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTextResponse) GoString() string {
	return s.String()
}

func (s *UpdateCustomTextResponse) SetHeaders(v map[string]*string) *UpdateCustomTextResponse {
	s.Headers = v
	return s
}

func (s *UpdateCustomTextResponse) SetStatusCode(v int32) *UpdateCustomTextResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCustomTextResponse) SetBody(v *UpdateCustomTextResponseBody) *UpdateCustomTextResponse {
	s.Body = v
	return s
}

type UpdateDatasetRequest struct {
	DatasetConfig *UpdateDatasetRequestDatasetConfig `json:"DatasetConfig,omitempty" xml:"DatasetConfig,omitempty" type:"Struct"`
	// example:
	//
	// 企业自定义数据集
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 3
	SearchDatasetEnable *int32 `json:"SearchDatasetEnable,omitempty" xml:"SearchDatasetEnable,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequest) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequest) SetDatasetConfig(v *UpdateDatasetRequestDatasetConfig) *UpdateDatasetRequest {
	s.DatasetConfig = v
	return s
}

func (s *UpdateDatasetRequest) SetDatasetDescription(v string) *UpdateDatasetRequest {
	s.DatasetDescription = &v
	return s
}

func (s *UpdateDatasetRequest) SetDatasetId(v int64) *UpdateDatasetRequest {
	s.DatasetId = &v
	return s
}

func (s *UpdateDatasetRequest) SetSearchDatasetEnable(v int32) *UpdateDatasetRequest {
	s.SearchDatasetEnable = &v
	return s
}

func (s *UpdateDatasetRequest) SetWorkspaceId(v string) *UpdateDatasetRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateDatasetRequestDatasetConfig struct {
	SearchSourceConfigs []*UpdateDatasetRequestDatasetConfigSearchSourceConfigs `json:"SearchSourceConfigs,omitempty" xml:"SearchSourceConfigs,omitempty" type:"Repeated"`
}

func (s UpdateDatasetRequestDatasetConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequestDatasetConfig) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequestDatasetConfig) SetSearchSourceConfigs(v []*UpdateDatasetRequestDatasetConfigSearchSourceConfigs) *UpdateDatasetRequestDatasetConfig {
	s.SearchSourceConfigs = v
	return s
}

type UpdateDatasetRequestDatasetConfigSearchSourceConfigs struct {
	// example:
	//
	// 可以搜索到的关键词，用来验证是否可用
	DemoQuery                  *string                                                                         `json:"DemoQuery,omitempty" xml:"DemoQuery,omitempty"`
	SearchSourceRequestConfig  *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig  `json:"SearchSourceRequestConfig,omitempty" xml:"SearchSourceRequestConfig,omitempty" type:"Struct"`
	SearchSourceResponseConfig *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig `json:"SearchSourceResponseConfig,omitempty" xml:"SearchSourceResponseConfig,omitempty" type:"Struct"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigs) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigs) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigs) SetDemoQuery(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigs {
	s.DemoQuery = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigs) SetSearchSourceRequestConfig(v *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) *UpdateDatasetRequestDatasetConfigSearchSourceConfigs {
	s.SearchSourceRequestConfig = v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigs) SetSearchSourceResponseConfig(v *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) *UpdateDatasetRequestDatasetConfigSearchSourceConfigs {
	s.SearchSourceResponseConfig = v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigs) SetSize(v int32) *UpdateDatasetRequestDatasetConfigSearchSourceConfigs {
	s.Size = &v
	return s
}

type UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig struct {
	// example:
	//
	// {}
	Body *string `json:"Body,omitempty" xml:"Body,omitempty"`
	// example:
	//
	// 3000
	ConnectTimeout *int32                                                                                  `json:"ConnectTimeout,omitempty" xml:"ConnectTimeout,omitempty"`
	Headers        []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders `json:"Headers,omitempty" xml:"Headers,omitempty" type:"Repeated"`
	// example:
	//
	// 请求方式
	Method *string                                                                                `json:"Method,omitempty" xml:"Method,omitempty"`
	Params []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// true
	PathParamsEnable *bool `json:"PathParamsEnable,omitempty" xml:"PathParamsEnable,omitempty"`
	// example:
	//
	// 3000
	SocketTimeout *int32 `json:"SocketTimeout,omitempty" xml:"SocketTimeout,omitempty"`
	// example:
	//
	// api地址
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetBody(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Body = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetConnectTimeout(v int32) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.ConnectTimeout = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetHeaders(v []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Headers = v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetMethod(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Method = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetParams(v []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Params = v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetPathParamsEnable(v bool) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.PathParamsEnable = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetSocketTimeout(v int32) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.SocketTimeout = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig) SetUrl(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfig {
	s.Url = &v
	return s
}

type UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders struct {
	// example:
	//
	// 参数名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 参数值
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// example:
	//
	// valueType = time 时有效
	ValueFormat *string `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty"`
	// example:
	//
	// 参数值数据类型: 默认string
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetName(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.Name = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetValue(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.Value = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetValueFormat(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.ValueFormat = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders) SetValueType(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigHeaders {
	s.ValueType = &v
	return s
}

type UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams struct {
	// example:
	//
	// 参数名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 参数值
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// example:
	//
	// valueType = time 时有效
	ValueFormat *string `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty"`
	// example:
	//
	// 参数值数据类型: 默认string
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetName(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.Name = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetValue(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.Value = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetValueFormat(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.ValueFormat = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams) SetValueType(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceRequestConfigParams {
	s.ValueType = &v
	return s
}

type UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig struct {
	JqNodes []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes `json:"JqNodes,omitempty" xml:"JqNodes,omitempty" type:"Repeated"`
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig) SetJqNodes(v []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfig {
	s.JqNodes = v
	return s
}

type UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes struct {
	JqNodes []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes `json:"JqNodes,omitempty" xml:"JqNodes,omitempty" type:"Repeated"`
	// example:
	//
	// 节点key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 节点路径
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// 节点数据类型：string number list object base
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetJqNodes(v []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.JqNodes = v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetKey(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.Key = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetPath(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.Path = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes) SetType(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodes {
	s.Type = &v
	return s
}

type UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes struct {
	JqNodes []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes `json:"JqNodes,omitempty" xml:"JqNodes,omitempty" type:"Repeated"`
	// example:
	//
	// title
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// .title
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// string
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetJqNodes(v []*UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.JqNodes = v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetKey(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.Key = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetPath(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.Path = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes) SetType(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodes {
	s.Type = &v
	return s
}

type UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes struct {
	// example:
	//
	// title
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// .title
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// string
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) GoString() string {
	return s.String()
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) SetKey(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes {
	s.Key = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) SetPath(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes {
	s.Path = &v
	return s
}

func (s *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes) SetType(v string) *UpdateDatasetRequestDatasetConfigSearchSourceConfigsSearchSourceResponseConfigJqNodesJqNodesJqNodes {
	s.Type = &v
	return s
}

type UpdateDatasetShrinkRequest struct {
	DatasetConfigShrink *string `json:"DatasetConfig,omitempty" xml:"DatasetConfig,omitempty"`
	// example:
	//
	// 企业自定义数据集
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 3
	SearchDatasetEnable *int32 `json:"SearchDatasetEnable,omitempty" xml:"SearchDatasetEnable,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateDatasetShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateDatasetShrinkRequest) SetDatasetConfigShrink(v string) *UpdateDatasetShrinkRequest {
	s.DatasetConfigShrink = &v
	return s
}

func (s *UpdateDatasetShrinkRequest) SetDatasetDescription(v string) *UpdateDatasetShrinkRequest {
	s.DatasetDescription = &v
	return s
}

func (s *UpdateDatasetShrinkRequest) SetDatasetId(v int64) *UpdateDatasetShrinkRequest {
	s.DatasetId = &v
	return s
}

func (s *UpdateDatasetShrinkRequest) SetSearchDatasetEnable(v int32) *UpdateDatasetShrinkRequest {
	s.SearchDatasetEnable = &v
	return s
}

func (s *UpdateDatasetShrinkRequest) SetWorkspaceId(v string) *UpdateDatasetShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateDatasetResponseBody struct {
	// example:
	//
	// NoData
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *UpdateDatasetResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDatasetResponseBody) SetCode(v string) *UpdateDatasetResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDatasetResponseBody) SetData(v *UpdateDatasetResponseBodyData) *UpdateDatasetResponseBody {
	s.Data = v
	return s
}

func (s *UpdateDatasetResponseBody) SetHttpStatusCode(v int32) *UpdateDatasetResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateDatasetResponseBody) SetMessage(v string) *UpdateDatasetResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateDatasetResponseBody) SetRequestId(v string) *UpdateDatasetResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDatasetResponseBody) SetSuccess(v bool) *UpdateDatasetResponseBody {
	s.Success = &v
	return s
}

type UpdateDatasetResponseBodyData struct {
	// example:
	//
	// 2024-11-12 21:46:24
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// xxx
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// xxx
	DatasetDescription *string `json:"DatasetDescription,omitempty" xml:"DatasetDescription,omitempty"`
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// xxx
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// example:
	//
	// CustomSemanticSearch
	DatasetType        *string                                            `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	NewsArticleResults []*UpdateDatasetResponseBodyDataNewsArticleResults `json:"NewsArticleResults,omitempty" xml:"NewsArticleResults,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	SearchDatasetEnable *int32 `json:"SearchDatasetEnable,omitempty" xml:"SearchDatasetEnable,omitempty"`
}

func (s UpdateDatasetResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateDatasetResponseBodyData) SetCreateTime(v string) *UpdateDatasetResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *UpdateDatasetResponseBodyData) SetCreateUser(v string) *UpdateDatasetResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *UpdateDatasetResponseBodyData) SetDatasetDescription(v string) *UpdateDatasetResponseBodyData {
	s.DatasetDescription = &v
	return s
}

func (s *UpdateDatasetResponseBodyData) SetDatasetId(v int64) *UpdateDatasetResponseBodyData {
	s.DatasetId = &v
	return s
}

func (s *UpdateDatasetResponseBodyData) SetDatasetName(v string) *UpdateDatasetResponseBodyData {
	s.DatasetName = &v
	return s
}

func (s *UpdateDatasetResponseBodyData) SetDatasetType(v string) *UpdateDatasetResponseBodyData {
	s.DatasetType = &v
	return s
}

func (s *UpdateDatasetResponseBodyData) SetNewsArticleResults(v []*UpdateDatasetResponseBodyDataNewsArticleResults) *UpdateDatasetResponseBodyData {
	s.NewsArticleResults = v
	return s
}

func (s *UpdateDatasetResponseBodyData) SetSearchDatasetEnable(v int32) *UpdateDatasetResponseBodyData {
	s.SearchDatasetEnable = &v
	return s
}

type UpdateDatasetResponseBodyDataNewsArticleResults struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1
	Current *int32                                                 `json:"Current,omitempty" xml:"Current,omitempty"`
	Data    []*UpdateDatasetResponseBodyDataNewsArticleResultsData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 10
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 100
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s UpdateDatasetResponseBodyDataNewsArticleResults) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetResponseBodyDataNewsArticleResults) GoString() string {
	return s.String()
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResults) SetCode(v string) *UpdateDatasetResponseBodyDataNewsArticleResults {
	s.Code = &v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResults) SetCurrent(v int32) *UpdateDatasetResponseBodyDataNewsArticleResults {
	s.Current = &v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResults) SetData(v []*UpdateDatasetResponseBodyDataNewsArticleResultsData) *UpdateDatasetResponseBodyDataNewsArticleResults {
	s.Data = v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResults) SetMessage(v string) *UpdateDatasetResponseBodyDataNewsArticleResults {
	s.Message = &v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResults) SetSize(v int32) *UpdateDatasetResponseBodyDataNewsArticleResults {
	s.Size = &v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResults) SetTotal(v int32) *UpdateDatasetResponseBodyDataNewsArticleResults {
	s.Total = &v
	return s
}

type UpdateDatasetResponseBodyDataNewsArticleResultsData struct {
	// example:
	//
	// 文章内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 2024-11-12 15:12:14
	PubTime *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	// example:
	//
	// 央视网
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 文章摘要
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 文章标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// https://www.example.com/aaa.docx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s UpdateDatasetResponseBodyDataNewsArticleResultsData) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetResponseBodyDataNewsArticleResultsData) GoString() string {
	return s.String()
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResultsData) SetContent(v string) *UpdateDatasetResponseBodyDataNewsArticleResultsData {
	s.Content = &v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResultsData) SetPubTime(v string) *UpdateDatasetResponseBodyDataNewsArticleResultsData {
	s.PubTime = &v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResultsData) SetSource(v string) *UpdateDatasetResponseBodyDataNewsArticleResultsData {
	s.Source = &v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResultsData) SetSummary(v string) *UpdateDatasetResponseBodyDataNewsArticleResultsData {
	s.Summary = &v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResultsData) SetTitle(v string) *UpdateDatasetResponseBodyDataNewsArticleResultsData {
	s.Title = &v
	return s
}

func (s *UpdateDatasetResponseBodyDataNewsArticleResultsData) SetUrl(v string) *UpdateDatasetResponseBodyDataNewsArticleResultsData {
	s.Url = &v
	return s
}

type UpdateDatasetResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetResponse) GoString() string {
	return s.String()
}

func (s *UpdateDatasetResponse) SetHeaders(v map[string]*string) *UpdateDatasetResponse {
	s.Headers = v
	return s
}

func (s *UpdateDatasetResponse) SetStatusCode(v int32) *UpdateDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDatasetResponse) SetBody(v *UpdateDatasetResponseBody) *UpdateDatasetResponse {
	s.Body = v
	return s
}

type UpdateDatasetDocumentRequest struct {
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 数据集名称
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// This parameter is required.
	Document *UpdateDatasetDocumentRequestDocument `json:"Document,omitempty" xml:"Document,omitempty" type:"Struct"`
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateDatasetDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetDocumentRequest) GoString() string {
	return s.String()
}

func (s *UpdateDatasetDocumentRequest) SetDatasetId(v int64) *UpdateDatasetDocumentRequest {
	s.DatasetId = &v
	return s
}

func (s *UpdateDatasetDocumentRequest) SetDatasetName(v string) *UpdateDatasetDocumentRequest {
	s.DatasetName = &v
	return s
}

func (s *UpdateDatasetDocumentRequest) SetDocument(v *UpdateDatasetDocumentRequestDocument) *UpdateDatasetDocumentRequest {
	s.Document = v
	return s
}

func (s *UpdateDatasetDocumentRequest) SetWorkspaceId(v string) *UpdateDatasetDocumentRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateDatasetDocumentRequestDocument struct {
	// example:
	//
	// 用户指定的文档唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 内部文档唯一ID
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	// example:
	//
	// xx
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateDatasetDocumentRequestDocument) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetDocumentRequestDocument) GoString() string {
	return s.String()
}

func (s *UpdateDatasetDocumentRequestDocument) SetDocId(v string) *UpdateDatasetDocumentRequestDocument {
	s.DocId = &v
	return s
}

func (s *UpdateDatasetDocumentRequestDocument) SetDocUuid(v string) *UpdateDatasetDocumentRequestDocument {
	s.DocUuid = &v
	return s
}

func (s *UpdateDatasetDocumentRequestDocument) SetTitle(v string) *UpdateDatasetDocumentRequestDocument {
	s.Title = &v
	return s
}

type UpdateDatasetDocumentShrinkRequest struct {
	// example:
	//
	// 1
	DatasetId *int64 `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// example:
	//
	// 数据集名称
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// This parameter is required.
	DocumentShrink *string `json:"Document,omitempty" xml:"Document,omitempty"`
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateDatasetDocumentShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetDocumentShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateDatasetDocumentShrinkRequest) SetDatasetId(v int64) *UpdateDatasetDocumentShrinkRequest {
	s.DatasetId = &v
	return s
}

func (s *UpdateDatasetDocumentShrinkRequest) SetDatasetName(v string) *UpdateDatasetDocumentShrinkRequest {
	s.DatasetName = &v
	return s
}

func (s *UpdateDatasetDocumentShrinkRequest) SetDocumentShrink(v string) *UpdateDatasetDocumentShrinkRequest {
	s.DocumentShrink = &v
	return s
}

func (s *UpdateDatasetDocumentShrinkRequest) SetWorkspaceId(v string) *UpdateDatasetDocumentShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateDatasetDocumentResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *UpdateDatasetDocumentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDatasetDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDatasetDocumentResponseBody) SetCode(v string) *UpdateDatasetDocumentResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDatasetDocumentResponseBody) SetData(v *UpdateDatasetDocumentResponseBodyData) *UpdateDatasetDocumentResponseBody {
	s.Data = v
	return s
}

func (s *UpdateDatasetDocumentResponseBody) SetHttpStatusCode(v int32) *UpdateDatasetDocumentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateDatasetDocumentResponseBody) SetMessage(v string) *UpdateDatasetDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateDatasetDocumentResponseBody) SetRequestId(v string) *UpdateDatasetDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDatasetDocumentResponseBody) SetSuccess(v bool) *UpdateDatasetDocumentResponseBody {
	s.Success = &v
	return s
}

type UpdateDatasetDocumentResponseBodyData struct {
	// example:
	//
	// 用户指定的文档唯一ID
	DocId *string `json:"DocId,omitempty" xml:"DocId,omitempty"`
	// example:
	//
	// 内部文档唯一ID
	DocUuid *string `json:"DocUuid,omitempty" xml:"DocUuid,omitempty"`
	Title   *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateDatasetDocumentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetDocumentResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateDatasetDocumentResponseBodyData) SetDocId(v string) *UpdateDatasetDocumentResponseBodyData {
	s.DocId = &v
	return s
}

func (s *UpdateDatasetDocumentResponseBodyData) SetDocUuid(v string) *UpdateDatasetDocumentResponseBodyData {
	s.DocUuid = &v
	return s
}

func (s *UpdateDatasetDocumentResponseBodyData) SetTitle(v string) *UpdateDatasetDocumentResponseBodyData {
	s.Title = &v
	return s
}

type UpdateDatasetDocumentResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDatasetDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDatasetDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDatasetDocumentResponse) GoString() string {
	return s.String()
}

func (s *UpdateDatasetDocumentResponse) SetHeaders(v map[string]*string) *UpdateDatasetDocumentResponse {
	s.Headers = v
	return s
}

func (s *UpdateDatasetDocumentResponse) SetStatusCode(v int32) *UpdateDatasetDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDatasetDocumentResponse) SetBody(v *UpdateDatasetDocumentResponseBody) *UpdateDatasetDocumentResponse {
	s.Body = v
	return s
}

type UpdateGeneratedContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 正文
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 正文
	ContentText *string `json:"ContentText,omitempty" xml:"ContentText,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 36
	Id       *int64    `json:"Id,omitempty" xml:"Id,omitempty"`
	Keywords []*string `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
	// example:
	//
	// 创作xx文章
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 评论类文章
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateGeneratedContentRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeneratedContentRequest) GoString() string {
	return s.String()
}

func (s *UpdateGeneratedContentRequest) SetAgentKey(v string) *UpdateGeneratedContentRequest {
	s.AgentKey = &v
	return s
}

func (s *UpdateGeneratedContentRequest) SetContent(v string) *UpdateGeneratedContentRequest {
	s.Content = &v
	return s
}

func (s *UpdateGeneratedContentRequest) SetContentText(v string) *UpdateGeneratedContentRequest {
	s.ContentText = &v
	return s
}

func (s *UpdateGeneratedContentRequest) SetId(v int64) *UpdateGeneratedContentRequest {
	s.Id = &v
	return s
}

func (s *UpdateGeneratedContentRequest) SetKeywords(v []*string) *UpdateGeneratedContentRequest {
	s.Keywords = v
	return s
}

func (s *UpdateGeneratedContentRequest) SetPrompt(v string) *UpdateGeneratedContentRequest {
	s.Prompt = &v
	return s
}

func (s *UpdateGeneratedContentRequest) SetTitle(v string) *UpdateGeneratedContentRequest {
	s.Title = &v
	return s
}

type UpdateGeneratedContentShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxxxx_p_efm
	AgentKey *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	// example:
	//
	// 正文
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 正文
	ContentText *string `json:"ContentText,omitempty" xml:"ContentText,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 36
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	KeywordsShrink *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// example:
	//
	// 创作xx文章
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// 评论类文章
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateGeneratedContentShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeneratedContentShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateGeneratedContentShrinkRequest) SetAgentKey(v string) *UpdateGeneratedContentShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *UpdateGeneratedContentShrinkRequest) SetContent(v string) *UpdateGeneratedContentShrinkRequest {
	s.Content = &v
	return s
}

func (s *UpdateGeneratedContentShrinkRequest) SetContentText(v string) *UpdateGeneratedContentShrinkRequest {
	s.ContentText = &v
	return s
}

func (s *UpdateGeneratedContentShrinkRequest) SetId(v int64) *UpdateGeneratedContentShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateGeneratedContentShrinkRequest) SetKeywordsShrink(v string) *UpdateGeneratedContentShrinkRequest {
	s.KeywordsShrink = &v
	return s
}

func (s *UpdateGeneratedContentShrinkRequest) SetPrompt(v string) *UpdateGeneratedContentShrinkRequest {
	s.Prompt = &v
	return s
}

func (s *UpdateGeneratedContentShrinkRequest) SetTitle(v string) *UpdateGeneratedContentShrinkRequest {
	s.Title = &v
	return s
}

type UpdateGeneratedContentResponseBody struct {
	// example:
	//
	// NoData
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// false
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateGeneratedContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeneratedContentResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateGeneratedContentResponseBody) SetCode(v string) *UpdateGeneratedContentResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateGeneratedContentResponseBody) SetData(v bool) *UpdateGeneratedContentResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateGeneratedContentResponseBody) SetHttpStatusCode(v int32) *UpdateGeneratedContentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateGeneratedContentResponseBody) SetMessage(v string) *UpdateGeneratedContentResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateGeneratedContentResponseBody) SetRequestId(v string) *UpdateGeneratedContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateGeneratedContentResponseBody) SetSuccess(v bool) *UpdateGeneratedContentResponseBody {
	s.Success = &v
	return s
}

type UpdateGeneratedContentResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateGeneratedContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateGeneratedContentResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateGeneratedContentResponse) GoString() string {
	return s.String()
}

func (s *UpdateGeneratedContentResponse) SetHeaders(v map[string]*string) *UpdateGeneratedContentResponse {
	s.Headers = v
	return s
}

func (s *UpdateGeneratedContentResponse) SetStatusCode(v int32) *UpdateGeneratedContentResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateGeneratedContentResponse) SetBody(v *UpdateGeneratedContentResponseBody) *UpdateGeneratedContentResponse {
	s.Body = v
	return s
}

type UpdateMaterialDocumentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 67c520d1fa43455ea44fb69fa402d54d_p_beebot_public
	AgentKey    *string   `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	Author      *string   `json:"Author,omitempty" xml:"Author,omitempty"`
	DocKeywords []*string `json:"DocKeywords,omitempty" xml:"DocKeywords,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// image
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// http://xxxxx/xxx
	ExternalUrl *string `json:"ExternalUrl,omitempty" xml:"ExternalUrl,omitempty"`
	HtmlContent *string `json:"HtmlContent,omitempty" xml:"HtmlContent,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 44
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 2023-04-11 06:14:07
	PubTime  *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1
	ShareAttr *int32 `json:"ShareAttr,omitempty" xml:"ShareAttr,omitempty"`
	// example:
	//
	// UserUpload
	SrcFrom     *string `json:"SrcFrom,omitempty" xml:"SrcFrom,omitempty"`
	Summary     *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	TextContent *string `json:"TextContent,omitempty" xml:"TextContent,omitempty"`
	Title       *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://xxxxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s UpdateMaterialDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMaterialDocumentRequest) GoString() string {
	return s.String()
}

func (s *UpdateMaterialDocumentRequest) SetAgentKey(v string) *UpdateMaterialDocumentRequest {
	s.AgentKey = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetAuthor(v string) *UpdateMaterialDocumentRequest {
	s.Author = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetDocKeywords(v []*string) *UpdateMaterialDocumentRequest {
	s.DocKeywords = v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetDocType(v string) *UpdateMaterialDocumentRequest {
	s.DocType = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetExternalUrl(v string) *UpdateMaterialDocumentRequest {
	s.ExternalUrl = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetHtmlContent(v string) *UpdateMaterialDocumentRequest {
	s.HtmlContent = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetId(v int64) *UpdateMaterialDocumentRequest {
	s.Id = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetPubTime(v string) *UpdateMaterialDocumentRequest {
	s.PubTime = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetRegionId(v string) *UpdateMaterialDocumentRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetShareAttr(v int32) *UpdateMaterialDocumentRequest {
	s.ShareAttr = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetSrcFrom(v string) *UpdateMaterialDocumentRequest {
	s.SrcFrom = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetSummary(v string) *UpdateMaterialDocumentRequest {
	s.Summary = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetTextContent(v string) *UpdateMaterialDocumentRequest {
	s.TextContent = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetTitle(v string) *UpdateMaterialDocumentRequest {
	s.Title = &v
	return s
}

func (s *UpdateMaterialDocumentRequest) SetUrl(v string) *UpdateMaterialDocumentRequest {
	s.Url = &v
	return s
}

type UpdateMaterialDocumentShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 67c520d1fa43455ea44fb69fa402d54d_p_beebot_public
	AgentKey          *string `json:"AgentKey,omitempty" xml:"AgentKey,omitempty"`
	Author            *string `json:"Author,omitempty" xml:"Author,omitempty"`
	DocKeywordsShrink *string `json:"DocKeywords,omitempty" xml:"DocKeywords,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// image
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// http://xxxxx/xxx
	ExternalUrl *string `json:"ExternalUrl,omitempty" xml:"ExternalUrl,omitempty"`
	HtmlContent *string `json:"HtmlContent,omitempty" xml:"HtmlContent,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 44
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 2023-04-11 06:14:07
	PubTime  *string `json:"PubTime,omitempty" xml:"PubTime,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1
	ShareAttr *int32 `json:"ShareAttr,omitempty" xml:"ShareAttr,omitempty"`
	// example:
	//
	// UserUpload
	SrcFrom     *string `json:"SrcFrom,omitempty" xml:"SrcFrom,omitempty"`
	Summary     *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	TextContent *string `json:"TextContent,omitempty" xml:"TextContent,omitempty"`
	Title       *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// http://xxxxx/xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s UpdateMaterialDocumentShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMaterialDocumentShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateMaterialDocumentShrinkRequest) SetAgentKey(v string) *UpdateMaterialDocumentShrinkRequest {
	s.AgentKey = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetAuthor(v string) *UpdateMaterialDocumentShrinkRequest {
	s.Author = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetDocKeywordsShrink(v string) *UpdateMaterialDocumentShrinkRequest {
	s.DocKeywordsShrink = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetDocType(v string) *UpdateMaterialDocumentShrinkRequest {
	s.DocType = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetExternalUrl(v string) *UpdateMaterialDocumentShrinkRequest {
	s.ExternalUrl = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetHtmlContent(v string) *UpdateMaterialDocumentShrinkRequest {
	s.HtmlContent = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetId(v int64) *UpdateMaterialDocumentShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetPubTime(v string) *UpdateMaterialDocumentShrinkRequest {
	s.PubTime = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetRegionId(v string) *UpdateMaterialDocumentShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetShareAttr(v int32) *UpdateMaterialDocumentShrinkRequest {
	s.ShareAttr = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetSrcFrom(v string) *UpdateMaterialDocumentShrinkRequest {
	s.SrcFrom = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetSummary(v string) *UpdateMaterialDocumentShrinkRequest {
	s.Summary = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetTextContent(v string) *UpdateMaterialDocumentShrinkRequest {
	s.TextContent = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetTitle(v string) *UpdateMaterialDocumentShrinkRequest {
	s.Title = &v
	return s
}

func (s *UpdateMaterialDocumentShrinkRequest) SetUrl(v string) *UpdateMaterialDocumentShrinkRequest {
	s.Url = &v
	return s
}

type UpdateMaterialDocumentResponseBody struct {
	// example:
	//
	// DataNotExists
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 82
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 数据不存在
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// false
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMaterialDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMaterialDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMaterialDocumentResponseBody) SetCode(v string) *UpdateMaterialDocumentResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateMaterialDocumentResponseBody) SetData(v int64) *UpdateMaterialDocumentResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateMaterialDocumentResponseBody) SetHttpStatusCode(v int32) *UpdateMaterialDocumentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateMaterialDocumentResponseBody) SetMessage(v string) *UpdateMaterialDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateMaterialDocumentResponseBody) SetRequestId(v string) *UpdateMaterialDocumentResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMaterialDocumentResponseBody) SetSuccess(v bool) *UpdateMaterialDocumentResponseBody {
	s.Success = &v
	return s
}

type UpdateMaterialDocumentResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMaterialDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMaterialDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMaterialDocumentResponse) GoString() string {
	return s.String()
}

func (s *UpdateMaterialDocumentResponse) SetHeaders(v map[string]*string) *UpdateMaterialDocumentResponse {
	s.Headers = v
	return s
}

func (s *UpdateMaterialDocumentResponse) SetStatusCode(v int32) *UpdateMaterialDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMaterialDocumentResponse) SetBody(v *UpdateMaterialDocumentResponseBody) *UpdateMaterialDocumentResponse {
	s.Body = v
	return s
}

type UploadBookRequest struct {
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// This parameter is required.
	Docs []*UploadBookRequestDocs `json:"Docs,omitempty" xml:"Docs,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// llm-ipe7d81yq4sl5jmk
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UploadBookRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadBookRequest) GoString() string {
	return s.String()
}

func (s *UploadBookRequest) SetCategoryId(v string) *UploadBookRequest {
	s.CategoryId = &v
	return s
}

func (s *UploadBookRequest) SetDocs(v []*UploadBookRequestDocs) *UploadBookRequest {
	s.Docs = v
	return s
}

func (s *UploadBookRequest) SetWorkspaceId(v string) *UploadBookRequest {
	s.WorkspaceId = &v
	return s
}

type UploadBookRequestDocs struct {
	DocName *string `json:"DocName,omitempty" xml:"DocName,omitempty"`
	// example:
	//
	// http://xxx/ccc.pdf
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s UploadBookRequestDocs) String() string {
	return tea.Prettify(s)
}

func (s UploadBookRequestDocs) GoString() string {
	return s.String()
}

func (s *UploadBookRequestDocs) SetDocName(v string) *UploadBookRequestDocs {
	s.DocName = &v
	return s
}

func (s *UploadBookRequestDocs) SetFileUrl(v string) *UploadBookRequestDocs {
	s.FileUrl = &v
	return s
}

type UploadBookShrinkRequest struct {
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// This parameter is required.
	DocsShrink *string `json:"Docs,omitempty" xml:"Docs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-ipe7d81yq4sl5jmk
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UploadBookShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadBookShrinkRequest) GoString() string {
	return s.String()
}

func (s *UploadBookShrinkRequest) SetCategoryId(v string) *UploadBookShrinkRequest {
	s.CategoryId = &v
	return s
}

func (s *UploadBookShrinkRequest) SetDocsShrink(v string) *UploadBookShrinkRequest {
	s.DocsShrink = &v
	return s
}

func (s *UploadBookShrinkRequest) SetWorkspaceId(v string) *UploadBookShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type UploadBookResponseBody struct {
	// example:
	//
	// successful
	Code *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *UploadBookResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 3f7045e099474ba28ceca1b4eb6d6e21
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UploadBookResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadBookResponseBody) GoString() string {
	return s.String()
}

func (s *UploadBookResponseBody) SetCode(v string) *UploadBookResponseBody {
	s.Code = &v
	return s
}

func (s *UploadBookResponseBody) SetData(v *UploadBookResponseBodyData) *UploadBookResponseBody {
	s.Data = v
	return s
}

func (s *UploadBookResponseBody) SetHttpStatusCode(v int32) *UploadBookResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UploadBookResponseBody) SetMessage(v string) *UploadBookResponseBody {
	s.Message = &v
	return s
}

func (s *UploadBookResponseBody) SetRequestId(v string) *UploadBookResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadBookResponseBody) SetSuccess(v bool) *UploadBookResponseBody {
	s.Success = &v
	return s
}

type UploadBookResponseBodyData struct {
	DocIds     []*string `json:"DocIds,omitempty" xml:"DocIds,omitempty" type:"Repeated"`
	ExistedIds []*string `json:"ExistedIds,omitempty" xml:"ExistedIds,omitempty" type:"Repeated"`
}

func (s UploadBookResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UploadBookResponseBodyData) GoString() string {
	return s.String()
}

func (s *UploadBookResponseBodyData) SetDocIds(v []*string) *UploadBookResponseBodyData {
	s.DocIds = v
	return s
}

func (s *UploadBookResponseBodyData) SetExistedIds(v []*string) *UploadBookResponseBodyData {
	s.ExistedIds = v
	return s
}

type UploadBookResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadBookResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadBookResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadBookResponse) GoString() string {
	return s.String()
}

func (s *UploadBookResponse) SetHeaders(v map[string]*string) *UploadBookResponse {
	s.Headers = v
	return s
}

func (s *UploadBookResponse) SetStatusCode(v int32) *UploadBookResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadBookResponse) SetBody(v *UploadBookResponseBody) *UploadBookResponse {
	s.Body = v
	return s
}

type UploadDocRequest struct {
	// example:
	//
	// default
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// This parameter is required.
	Docs []*UploadDocRequestDocs `json:"Docs,omitempty" xml:"Docs,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// llm-yigtrrjl377rcbab
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UploadDocRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadDocRequest) GoString() string {
	return s.String()
}

func (s *UploadDocRequest) SetCategoryId(v string) *UploadDocRequest {
	s.CategoryId = &v
	return s
}

func (s *UploadDocRequest) SetDocs(v []*UploadDocRequestDocs) *UploadDocRequest {
	s.Docs = v
	return s
}

func (s *UploadDocRequest) SetWorkspaceId(v string) *UploadDocRequest {
	s.WorkspaceId = &v
	return s
}

type UploadDocRequestDocs struct {
	// This parameter is required.
	DocName *string `json:"DocName,omitempty" xml:"DocName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// http://xxx/ccc.pdf
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s UploadDocRequestDocs) String() string {
	return tea.Prettify(s)
}

func (s UploadDocRequestDocs) GoString() string {
	return s.String()
}

func (s *UploadDocRequestDocs) SetDocName(v string) *UploadDocRequestDocs {
	s.DocName = &v
	return s
}

func (s *UploadDocRequestDocs) SetFileUrl(v string) *UploadDocRequestDocs {
	s.FileUrl = &v
	return s
}

type UploadDocShrinkRequest struct {
	// example:
	//
	// default
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// This parameter is required.
	DocsShrink *string `json:"Docs,omitempty" xml:"Docs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// llm-yigtrrjl377rcbab
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UploadDocShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadDocShrinkRequest) GoString() string {
	return s.String()
}

func (s *UploadDocShrinkRequest) SetCategoryId(v string) *UploadDocShrinkRequest {
	s.CategoryId = &v
	return s
}

func (s *UploadDocShrinkRequest) SetDocsShrink(v string) *UploadDocShrinkRequest {
	s.DocsShrink = &v
	return s
}

func (s *UploadDocShrinkRequest) SetWorkspaceId(v string) *UploadDocShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type UploadDocResponseBody struct {
	// example:
	//
	// successful
	Code *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *UploadDocResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UploadDocResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadDocResponseBody) GoString() string {
	return s.String()
}

func (s *UploadDocResponseBody) SetCode(v string) *UploadDocResponseBody {
	s.Code = &v
	return s
}

func (s *UploadDocResponseBody) SetData(v *UploadDocResponseBodyData) *UploadDocResponseBody {
	s.Data = v
	return s
}

func (s *UploadDocResponseBody) SetHttpStatusCode(v int32) *UploadDocResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UploadDocResponseBody) SetMessage(v string) *UploadDocResponseBody {
	s.Message = &v
	return s
}

func (s *UploadDocResponseBody) SetRequestId(v string) *UploadDocResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadDocResponseBody) SetSuccess(v bool) *UploadDocResponseBody {
	s.Success = &v
	return s
}

type UploadDocResponseBodyData struct {
	DocIds     []*string `json:"DocIds,omitempty" xml:"DocIds,omitempty" type:"Repeated"`
	ExistedIds []*string `json:"ExistedIds,omitempty" xml:"ExistedIds,omitempty" type:"Repeated"`
}

func (s UploadDocResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UploadDocResponseBodyData) GoString() string {
	return s.String()
}

func (s *UploadDocResponseBodyData) SetDocIds(v []*string) *UploadDocResponseBodyData {
	s.DocIds = v
	return s
}

func (s *UploadDocResponseBodyData) SetExistedIds(v []*string) *UploadDocResponseBodyData {
	s.ExistedIds = v
	return s
}

type UploadDocResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadDocResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadDocResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadDocResponse) GoString() string {
	return s.String()
}

func (s *UploadDocResponse) SetHeaders(v map[string]*string) *UploadDocResponse {
	s.Headers = v
	return s
}

func (s *UploadDocResponse) SetStatusCode(v int32) *UploadDocResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadDocResponse) SetBody(v *UploadDocResponseBody) *UploadDocResponse {
	s.Body = v
	return s
}

type ValidateUploadTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Content
	FileKey *string `json:"FileKey,omitempty" xml:"FileKey,omitempty"`
	// example:
	//
	// lightAppSass
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Content
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ValidateUploadTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s ValidateUploadTemplateRequest) GoString() string {
	return s.String()
}

func (s *ValidateUploadTemplateRequest) SetFileKey(v string) *ValidateUploadTemplateRequest {
	s.FileKey = &v
	return s
}

func (s *ValidateUploadTemplateRequest) SetTaskType(v string) *ValidateUploadTemplateRequest {
	s.TaskType = &v
	return s
}

func (s *ValidateUploadTemplateRequest) SetTemplateType(v string) *ValidateUploadTemplateRequest {
	s.TemplateType = &v
	return s
}

func (s *ValidateUploadTemplateRequest) SetWorkspaceId(v string) *ValidateUploadTemplateRequest {
	s.WorkspaceId = &v
	return s
}

type ValidateUploadTemplateResponseBody struct {
	// example:
	//
	// NoData
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ValidateUploadTemplateResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1813ceee-7fe5-41b4-87e5-982a4d18cca5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ValidateUploadTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ValidateUploadTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ValidateUploadTemplateResponseBody) SetCode(v string) *ValidateUploadTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *ValidateUploadTemplateResponseBody) SetData(v *ValidateUploadTemplateResponseBodyData) *ValidateUploadTemplateResponseBody {
	s.Data = v
	return s
}

func (s *ValidateUploadTemplateResponseBody) SetHttpStatusCode(v int32) *ValidateUploadTemplateResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ValidateUploadTemplateResponseBody) SetMessage(v string) *ValidateUploadTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *ValidateUploadTemplateResponseBody) SetRequestId(v string) *ValidateUploadTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ValidateUploadTemplateResponseBody) SetSuccess(v bool) *ValidateUploadTemplateResponseBody {
	s.Success = &v
	return s
}

type ValidateUploadTemplateResponseBodyData struct {
	// example:
	//
	// 50
	CommentCount *int32 `json:"CommentCount,omitempty" xml:"CommentCount,omitempty"`
	// example:
	//
	// 50
	DialogueCount *int32 `json:"DialogueCount,omitempty" xml:"DialogueCount,omitempty"`
	// example:
	//
	// 50
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ValidateUploadTemplateResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ValidateUploadTemplateResponseBodyData) GoString() string {
	return s.String()
}

func (s *ValidateUploadTemplateResponseBodyData) SetCommentCount(v int32) *ValidateUploadTemplateResponseBodyData {
	s.CommentCount = &v
	return s
}

func (s *ValidateUploadTemplateResponseBodyData) SetDialogueCount(v int32) *ValidateUploadTemplateResponseBodyData {
	s.DialogueCount = &v
	return s
}

func (s *ValidateUploadTemplateResponseBodyData) SetTotalCount(v int32) *ValidateUploadTemplateResponseBodyData {
	s.TotalCount = &v
	return s
}

type ValidateUploadTemplateResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ValidateUploadTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ValidateUploadTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s ValidateUploadTemplateResponse) GoString() string {
	return s.String()
}

func (s *ValidateUploadTemplateResponse) SetHeaders(v map[string]*string) *ValidateUploadTemplateResponse {
	s.Headers = v
	return s
}

func (s *ValidateUploadTemplateResponse) SetStatusCode(v int32) *ValidateUploadTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *ValidateUploadTemplateResponse) SetBody(v *ValidateUploadTemplateResponseBody) *ValidateUploadTemplateResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("aimiaobi"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加文档到数据集
//
// @param tmpReq - AddDatasetDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddDatasetDocumentResponse
func (client *Client) AddDatasetDocumentWithOptions(tmpReq *AddDatasetDocumentRequest, runtime *util.RuntimeOptions) (_result *AddDatasetDocumentResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddDatasetDocumentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Document)) {
		request.DocumentShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Document, tea.String("Document"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		body["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.DocumentShrink)) {
		body["Document"] = request.DocumentShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDatasetDocument"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDatasetDocumentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加文档到数据集
//
// @param request - AddDatasetDocumentRequest
//
// @return AddDatasetDocumentResponse
func (client *Client) AddDatasetDocument(request *AddDatasetDocumentRequest) (_result *AddDatasetDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDatasetDocumentResponse{}
	_body, _err := client.AddDatasetDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消异步任务
//
// @param request - CancelAsyncTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelAsyncTaskResponse
func (client *Client) CancelAsyncTaskWithOptions(request *CancelAsyncTaskRequest, runtime *util.RuntimeOptions) (_result *CancelAsyncTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelAsyncTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelAsyncTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 取消异步任务
//
// @param request - CancelAsyncTaskRequest
//
// @return CancelAsyncTaskResponse
func (client *Client) CancelAsyncTask(request *CancelAsyncTaskRequest) (_result *CancelAsyncTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelAsyncTaskResponse{}
	_body, _err := client.CancelAsyncTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 清除所有干预内容
//
// @param request - ClearIntervenesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ClearIntervenesResponse
func (client *Client) ClearIntervenesWithOptions(request *ClearIntervenesRequest, runtime *util.RuntimeOptions) (_result *ClearIntervenesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ClearIntervenes"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ClearIntervenesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 清除所有干预内容
//
// @param request - ClearIntervenesRequest
//
// @return ClearIntervenesResponse
func (client *Client) ClearIntervenes(request *ClearIntervenesRequest) (_result *ClearIntervenesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClearIntervenesResponse{}
	_body, _err := client.ClearIntervenesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 数据集管理-创建
//
// @param tmpReq - CreateDatasetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDatasetResponse
func (client *Client) CreateDatasetWithOptions(tmpReq *CreateDatasetRequest, runtime *util.RuntimeOptions) (_result *CreateDatasetResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDatasetShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DatasetConfig)) {
		request.DatasetConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DatasetConfig, tea.String("DatasetConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.DocumentHandleConfig)) {
		request.DocumentHandleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DocumentHandleConfig, tea.String("DocumentHandleConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetConfigShrink)) {
		body["DatasetConfig"] = request.DatasetConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetDescription)) {
		body["DatasetDescription"] = request.DatasetDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		body["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetType)) {
		body["DatasetType"] = request.DatasetType
	}

	if !tea.BoolValue(util.IsUnset(request.DocumentHandleConfigShrink)) {
		body["DocumentHandleConfig"] = request.DocumentHandleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InvokeType)) {
		body["InvokeType"] = request.InvokeType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchDatasetEnable)) {
		body["SearchDatasetEnable"] = request.SearchDatasetEnable
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataset"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 数据集管理-创建
//
// @param request - CreateDatasetRequest
//
// @return CreateDatasetResponse
func (client *Client) CreateDataset(request *CreateDatasetRequest) (_result *CreateDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatasetResponse{}
	_body, _err := client.CreateDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文档管理-创建
//
// @param tmpReq - CreateGeneratedContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateGeneratedContentResponse
func (client *Client) CreateGeneratedContentWithOptions(tmpReq *CreateGeneratedContentRequest, runtime *util.RuntimeOptions) (_result *CreateGeneratedContentResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateGeneratedContentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Keywords)) {
		request.KeywordsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Keywords, tea.String("Keywords"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.ContentDomain)) {
		body["ContentDomain"] = request.ContentDomain
	}

	if !tea.BoolValue(util.IsUnset(request.ContentText)) {
		body["ContentText"] = request.ContentText
	}

	if !tea.BoolValue(util.IsUnset(request.KeywordsShrink)) {
		body["Keywords"] = request.KeywordsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		body["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateGeneratedContent"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateGeneratedContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文档管理-创建
//
// @param request - CreateGeneratedContentRequest
//
// @return CreateGeneratedContentResponse
func (client *Client) CreateGeneratedContent(request *CreateGeneratedContentRequest) (_result *CreateGeneratedContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGeneratedContentResponse{}
	_body, _err := client.CreateGeneratedContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取授权token
//
// @param request - CreateTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTokenResponse
func (client *Client) CreateTokenWithOptions(request *CreateTokenRequest, runtime *util.RuntimeOptions) (_result *CreateTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateToken"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取授权token
//
// @param request - CreateTokenRequest
//
// @return CreateTokenResponse
func (client *Client) CreateToken(request *CreateTokenRequest) (_result *CreateTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTokenResponse{}
	_body, _err := client.CreateTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除自定义文本
//
// @param request - DeleteCustomTextRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomTextResponse
func (client *Client) DeleteCustomTextWithOptions(request *DeleteCustomTextRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		body["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomText"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除自定义文本
//
// @param request - DeleteCustomTextRequest
//
// @return DeleteCustomTextResponse
func (client *Client) DeleteCustomText(request *DeleteCustomTextRequest) (_result *DeleteCustomTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomTextResponse{}
	_body, _err := client.DeleteCustomTextWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据主题删除自定义主题事件
//
// @param request - DeleteCustomTopicByTopicRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomTopicByTopicResponse
func (client *Client) DeleteCustomTopicByTopicWithOptions(request *DeleteCustomTopicByTopicRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomTopicByTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomTopicByTopic"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomTopicByTopicResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据主题删除自定义主题事件
//
// @param request - DeleteCustomTopicByTopicRequest
//
// @return DeleteCustomTopicByTopicResponse
func (client *Client) DeleteCustomTopicByTopic(request *DeleteCustomTopicByTopicRequest) (_result *DeleteCustomTopicByTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomTopicByTopicResponse{}
	_body, _err := client.DeleteCustomTopicByTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据自定义观点ID删除自定义观点
//
// @param request - DeleteCustomTopicViewPointByIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomTopicViewPointByIdResponse
func (client *Client) DeleteCustomTopicViewPointByIdWithOptions(request *DeleteCustomTopicViewPointByIdRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomTopicViewPointByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomViewPointId)) {
		body["CustomViewPointId"] = request.CustomViewPointId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomTopicViewPointById"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomTopicViewPointByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据自定义观点ID删除自定义观点
//
// @param request - DeleteCustomTopicViewPointByIdRequest
//
// @return DeleteCustomTopicViewPointByIdResponse
func (client *Client) DeleteCustomTopicViewPointById(request *DeleteCustomTopicViewPointByIdRequest) (_result *DeleteCustomTopicViewPointByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomTopicViewPointByIdResponse{}
	_body, _err := client.DeleteCustomTopicViewPointByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 数据集管理-删除
//
// @param request - DeleteDatasetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDatasetResponse
func (client *Client) DeleteDatasetWithOptions(request *DeleteDatasetRequest, runtime *util.RuntimeOptions) (_result *DeleteDatasetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataset"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 数据集管理-删除
//
// @param request - DeleteDatasetRequest
//
// @return DeleteDatasetResponse
func (client *Client) DeleteDataset(request *DeleteDatasetRequest) (_result *DeleteDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatasetResponse{}
	_body, _err := client.DeleteDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除数据集文档
//
// @param request - DeleteDatasetDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDatasetDocumentResponse
func (client *Client) DeleteDatasetDocumentWithOptions(request *DeleteDatasetDocumentRequest, runtime *util.RuntimeOptions) (_result *DeleteDatasetDocumentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		body["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.DocUuid)) {
		body["DocUuid"] = request.DocUuid
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDatasetDocument"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDatasetDocumentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除数据集文档
//
// @param request - DeleteDatasetDocumentRequest
//
// @return DeleteDatasetDocumentResponse
func (client *Client) DeleteDatasetDocument(request *DeleteDatasetDocumentRequest) (_result *DeleteDatasetDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatasetDocumentResponse{}
	_body, _err := client.DeleteDatasetDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读删除多个文档
//
// @param tmpReq - DeleteDocsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDocsResponse
func (client *Client) DeleteDocsWithOptions(tmpReq *DeleteDocsRequest, runtime *util.RuntimeOptions) (_result *DeleteDocsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteDocsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DocIds)) {
		request.DocIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DocIds, tea.String("DocIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocIdsShrink)) {
		body["DocIds"] = request.DocIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDocs"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDocsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读删除多个文档
//
// @param request - DeleteDocsRequest
//
// @return DeleteDocsResponse
func (client *Client) DeleteDocs(request *DeleteDocsRequest) (_result *DeleteDocsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDocsResponse{}
	_body, _err := client.DeleteDocsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文档管理-删除。
//
// @param request - DeleteGeneratedContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteGeneratedContentResponse
func (client *Client) DeleteGeneratedContentWithOptions(request *DeleteGeneratedContentRequest, runtime *util.RuntimeOptions) (_result *DeleteGeneratedContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGeneratedContent"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGeneratedContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文档管理-删除。
//
// @param request - DeleteGeneratedContentRequest
//
// @return DeleteGeneratedContentResponse
func (client *Client) DeleteGeneratedContent(request *DeleteGeneratedContentRequest) (_result *DeleteGeneratedContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGeneratedContentResponse{}
	_body, _err := client.DeleteGeneratedContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除干预规则
//
// @param request - DeleteInterveneRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteInterveneRuleResponse
func (client *Client) DeleteInterveneRuleWithOptions(request *DeleteInterveneRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteInterveneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		body["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInterveneRule"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInterveneRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除干预规则
//
// @param request - DeleteInterveneRuleRequest
//
// @return DeleteInterveneRuleResponse
func (client *Client) DeleteInterveneRule(request *DeleteInterveneRuleRequest) (_result *DeleteInterveneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInterveneRuleResponse{}
	_body, _err := client.DeleteInterveneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据ID删除素材
//
// @param request - DeleteMaterialByIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMaterialByIdResponse
func (client *Client) DeleteMaterialByIdWithOptions(request *DeleteMaterialByIdRequest, runtime *util.RuntimeOptions) (_result *DeleteMaterialByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMaterialById"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMaterialByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据ID删除素材
//
// @param request - DeleteMaterialByIdRequest
//
// @return DeleteMaterialByIdResponse
func (client *Client) DeleteMaterialById(request *DeleteMaterialByIdRequest) (_result *DeleteMaterialByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMaterialByIdResponse{}
	_body, _err := client.DeleteMaterialByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 从链接中提取文档内容
//
// @param tmpReq - DocumentExtractionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DocumentExtractionResponse
func (client *Client) DocumentExtractionWithOptions(tmpReq *DocumentExtractionRequest, runtime *util.RuntimeOptions) (_result *DocumentExtractionResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DocumentExtractionShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Urls)) {
		request.UrlsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Urls, tea.String("Urls"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UrlsShrink)) {
		body["Urls"] = request.UrlsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DocumentExtraction"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DocumentExtractionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 从链接中提取文档内容
//
// @param request - DocumentExtractionRequest
//
// @return DocumentExtractionResponse
func (client *Client) DocumentExtraction(request *DocumentExtractionRequest) (_result *DocumentExtractionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DocumentExtractionResponse{}
	_body, _err := client.DocumentExtractionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出企业VOC分析任务明细列表
//
// @param tmpReq - ExportAnalysisTagDetailByTaskIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportAnalysisTagDetailByTaskIdResponse
func (client *Client) ExportAnalysisTagDetailByTaskIdWithOptions(tmpReq *ExportAnalysisTagDetailByTaskIdRequest, runtime *util.RuntimeOptions) (_result *ExportAnalysisTagDetailByTaskIdResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ExportAnalysisTagDetailByTaskIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Categories)) {
		request.CategoriesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Categories, tea.String("Categories"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoriesShrink)) {
		body["Categories"] = request.CategoriesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportAnalysisTagDetailByTaskId"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportAnalysisTagDetailByTaskIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出企业VOC分析任务明细列表
//
// @param request - ExportAnalysisTagDetailByTaskIdRequest
//
// @return ExportAnalysisTagDetailByTaskIdResponse
func (client *Client) ExportAnalysisTagDetailByTaskId(request *ExportAnalysisTagDetailByTaskIdRequest) (_result *ExportAnalysisTagDetailByTaskIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportAnalysisTagDetailByTaskIdResponse{}
	_body, _err := client.ExportAnalysisTagDetailByTaskIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文档管理-导出。
//
// @param request - ExportGeneratedContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportGeneratedContentResponse
func (client *Client) ExportGeneratedContentWithOptions(request *ExportGeneratedContentRequest, runtime *util.RuntimeOptions) (_result *ExportGeneratedContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportGeneratedContent"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportGeneratedContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文档管理-导出。
//
// @param request - ExportGeneratedContentRequest
//
// @return ExportGeneratedContentResponse
func (client *Client) ExportGeneratedContent(request *ExportGeneratedContentRequest) (_result *ExportGeneratedContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportGeneratedContentResponse{}
	_body, _err := client.ExportGeneratedContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出选题策划文档，响应为一个可公开访问的URL。一小时后失效
//
// @param tmpReq - ExportHotTopicPlanningProposalsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportHotTopicPlanningProposalsResponse
func (client *Client) ExportHotTopicPlanningProposalsWithOptions(tmpReq *ExportHotTopicPlanningProposalsRequest, runtime *util.RuntimeOptions) (_result *ExportHotTopicPlanningProposalsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ExportHotTopicPlanningProposalsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CustomViewPointIds)) {
		request.CustomViewPointIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CustomViewPointIds, tea.String("CustomViewPointIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Titles)) {
		request.TitlesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Titles, tea.String("Titles"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomViewPointIdsShrink)) {
		body["CustomViewPointIds"] = request.CustomViewPointIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ExportType)) {
		body["ExportType"] = request.ExportType
	}

	if !tea.BoolValue(util.IsUnset(request.TitlesShrink)) {
		body["Titles"] = request.TitlesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	if !tea.BoolValue(util.IsUnset(request.TopicSource)) {
		body["TopicSource"] = request.TopicSource
	}

	if !tea.BoolValue(util.IsUnset(request.ViewPointType)) {
		body["ViewPointType"] = request.ViewPointType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportHotTopicPlanningProposals"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportHotTopicPlanningProposalsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出选题策划文档，响应为一个可公开访问的URL。一小时后失效
//
// @param request - ExportHotTopicPlanningProposalsRequest
//
// @return ExportHotTopicPlanningProposalsResponse
func (client *Client) ExportHotTopicPlanningProposals(request *ExportHotTopicPlanningProposalsRequest) (_result *ExportHotTopicPlanningProposalsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportHotTopicPlanningProposalsResponse{}
	_body, _err := client.ExportHotTopicPlanningProposalsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出所有干预内容
//
// @param request - ExportIntervenesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportIntervenesResponse
func (client *Client) ExportIntervenesWithOptions(request *ExportIntervenesRequest, runtime *util.RuntimeOptions) (_result *ExportIntervenesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportIntervenes"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportIntervenesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出所有干预内容
//
// @param request - ExportIntervenesRequest
//
// @return ExportIntervenesResponse
func (client *Client) ExportIntervenes(request *ExportIntervenesRequest) (_result *ExportIntervenesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportIntervenesResponse{}
	_body, _err := client.ExportIntervenesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 反馈某次生成的结果
//
// @param tmpReq - FeedbackDialogueRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return FeedbackDialogueResponse
func (client *Client) FeedbackDialogueWithOptions(tmpReq *FeedbackDialogueRequest, runtime *util.RuntimeOptions) (_result *FeedbackDialogueResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &FeedbackDialogueShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RatingTags)) {
		request.RatingTagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RatingTags, tea.String("RatingTags"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomerResponse)) {
		body["CustomerResponse"] = request.CustomerResponse
	}

	if !tea.BoolValue(util.IsUnset(request.GoodText)) {
		body["GoodText"] = request.GoodText
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedResponse)) {
		body["ModifiedResponse"] = request.ModifiedResponse
	}

	if !tea.BoolValue(util.IsUnset(request.Rating)) {
		body["Rating"] = request.Rating
	}

	if !tea.BoolValue(util.IsUnset(request.RatingTagsShrink)) {
		body["RatingTags"] = request.RatingTagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("FeedbackDialogue"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FeedbackDialogueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 反馈某次生成的结果
//
// @param request - FeedbackDialogueRequest
//
// @return FeedbackDialogueResponse
func (client *Client) FeedbackDialogue(request *FeedbackDialogueRequest) (_result *FeedbackDialogueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FeedbackDialogueResponse{}
	_body, _err := client.FeedbackDialogueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取图片任务执行结果
//
// @param tmpReq - FetchImageTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return FetchImageTaskResponse
func (client *Client) FetchImageTaskWithOptions(tmpReq *FetchImageTaskRequest, runtime *util.RuntimeOptions) (_result *FetchImageTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &FetchImageTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TaskIdList)) {
		request.TaskIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TaskIdList, tea.String("TaskIdList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ArticleTaskId)) {
		body["ArticleTaskId"] = request.ArticleTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIdListShrink)) {
		body["TaskIdList"] = request.TaskIdListShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("FetchImageTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FetchImageTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取图片任务执行结果
//
// @param request - FetchImageTaskRequest
//
// @return FetchImageTaskResponse
func (client *Client) FetchImageTask(request *FetchImageTaskRequest) (_result *FetchImageTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FetchImageTaskResponse{}
	_body, _err := client.FetchImageTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 生成临时可访问的公开url
//
// @param request - GenerateFileUrlByKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateFileUrlByKeyResponse
func (client *Client) GenerateFileUrlByKeyWithOptions(request *GenerateFileUrlByKeyRequest, runtime *util.RuntimeOptions) (_result *GenerateFileUrlByKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileKey)) {
		body["FileKey"] = request.FileKey
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateFileUrlByKey"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateFileUrlByKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 生成临时可访问的公开url
//
// @param request - GenerateFileUrlByKeyRequest
//
// @return GenerateFileUrlByKeyResponse
func (client *Client) GenerateFileUrlByKey(request *GenerateFileUrlByKeyRequest) (_result *GenerateFileUrlByKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateFileUrlByKeyResponse{}
	_body, _err := client.GenerateFileUrlByKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 智能配图，图片生成任务
//
// @param tmpReq - GenerateImageTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateImageTaskResponse
func (client *Client) GenerateImageTaskWithOptions(tmpReq *GenerateImageTaskRequest, runtime *util.RuntimeOptions) (_result *GenerateImageTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GenerateImageTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ParagraphList)) {
		request.ParagraphListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ParagraphList, tea.String("ParagraphList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ArticleTaskId)) {
		body["ArticleTaskId"] = request.ArticleTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.ParagraphListShrink)) {
		body["ParagraphList"] = request.ParagraphListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.Style)) {
		body["Style"] = request.Style
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateImageTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateImageTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 智能配图，图片生成任务
//
// @param request - GenerateImageTaskRequest
//
// @return GenerateImageTaskResponse
func (client *Client) GenerateImageTask(request *GenerateImageTaskRequest) (_result *GenerateImageTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateImageTaskResponse{}
	_body, _err := client.GenerateImageTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 生成上传配置
//
// @param request - GenerateUploadConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateUploadConfigResponse
func (client *Client) GenerateUploadConfigWithOptions(request *GenerateUploadConfigRequest, runtime *util.RuntimeOptions) (_result *GenerateUploadConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.ParentDir)) {
		body["ParentDir"] = request.ParentDir
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateUploadConfig"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateUploadConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 生成上传配置
//
// @param request - GenerateUploadConfigRequest
//
// @return GenerateUploadConfigResponse
func (client *Client) GenerateUploadConfig(request *GenerateUploadConfigRequest) (_result *GenerateUploadConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateUploadConfigResponse{}
	_body, _err := client.GenerateUploadConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 视角生成
//
// @param tmpReq - GenerateViewPointRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateViewPointResponse
func (client *Client) GenerateViewPointWithOptions(tmpReq *GenerateViewPointRequest, runtime *util.RuntimeOptions) (_result *GenerateViewPointResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GenerateViewPointShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ReferenceData)) {
		request.ReferenceDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReferenceData, tea.String("ReferenceData"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ReferenceDataShrink)) {
		body["ReferenceData"] = request.ReferenceDataShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateViewPoint"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateViewPointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 视角生成
//
// @param request - GenerateViewPointRequest
//
// @return GenerateViewPointResponse
func (client *Client) GenerateViewPoint(request *GenerateViewPointRequest) (_result *GenerateViewPointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateViewPointResponse{}
	_body, _err := client.GenerateViewPointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取某次标签挖掘结果分类
//
// @param request - GetCategoriesByTaskIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCategoriesByTaskIdResponse
func (client *Client) GetCategoriesByTaskIdWithOptions(request *GetCategoriesByTaskIdRequest, runtime *util.RuntimeOptions) (_result *GetCategoriesByTaskIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCategoriesByTaskId"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCategoriesByTaskIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取某次标签挖掘结果分类
//
// @param request - GetCategoriesByTaskIdRequest
//
// @return GetCategoriesByTaskIdResponse
func (client *Client) GetCategoriesByTaskId(request *GetCategoriesByTaskIdRequest) (_result *GetCategoriesByTaskIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCategoriesByTaskIdResponse{}
	_body, _err := client.GetCategoriesByTaskIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取自定义播报单任务结果
//
// @param request - GetCustomHotTopicBroadcastJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomHotTopicBroadcastJobResponse
func (client *Client) GetCustomHotTopicBroadcastJobWithOptions(request *GetCustomHotTopicBroadcastJobRequest, runtime *util.RuntimeOptions) (_result *GetCustomHotTopicBroadcastJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomHotTopicBroadcastJob"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomHotTopicBroadcastJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取自定义播报单任务结果
//
// @param request - GetCustomHotTopicBroadcastJobRequest
//
// @return GetCustomHotTopicBroadcastJobResponse
func (client *Client) GetCustomHotTopicBroadcastJob(request *GetCustomHotTopicBroadcastJobRequest) (_result *GetCustomHotTopicBroadcastJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomHotTopicBroadcastJobResponse{}
	_body, _err := client.GetCustomHotTopicBroadcastJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取自定义文本
//
// @param request - GetCustomTextRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomTextResponse
func (client *Client) GetCustomTextWithOptions(request *GetCustomTextRequest, runtime *util.RuntimeOptions) (_result *GetCustomTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		body["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomText"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取自定义文本
//
// @param request - GetCustomTextRequest
//
// @return GetCustomTextResponse
func (client *Client) GetCustomText(request *GetCustomTextRequest) (_result *GetCustomTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomTextResponse{}
	_body, _err := client.GetCustomTextWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取自定义选题视角分析任务结果
//
// @param request - GetCustomTopicSelectionPerspectiveAnalysisTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomTopicSelectionPerspectiveAnalysisTaskResponse
func (client *Client) GetCustomTopicSelectionPerspectiveAnalysisTaskWithOptions(request *GetCustomTopicSelectionPerspectiveAnalysisTaskRequest, runtime *util.RuntimeOptions) (_result *GetCustomTopicSelectionPerspectiveAnalysisTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomTopicSelectionPerspectiveAnalysisTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomTopicSelectionPerspectiveAnalysisTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取自定义选题视角分析任务结果
//
// @param request - GetCustomTopicSelectionPerspectiveAnalysisTaskRequest
//
// @return GetCustomTopicSelectionPerspectiveAnalysisTaskResponse
func (client *Client) GetCustomTopicSelectionPerspectiveAnalysisTask(request *GetCustomTopicSelectionPerspectiveAnalysisTaskRequest) (_result *GetCustomTopicSelectionPerspectiveAnalysisTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomTopicSelectionPerspectiveAnalysisTaskResponse{}
	_body, _err := client.GetCustomTopicSelectionPerspectiveAnalysisTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取系统数据源配置和个人配置
//
// @param request - GetDataSourceOrderConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDataSourceOrderConfigResponse
func (client *Client) GetDataSourceOrderConfigWithOptions(request *GetDataSourceOrderConfigRequest, runtime *util.RuntimeOptions) (_result *GetDataSourceOrderConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataSourceOrderConfig"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataSourceOrderConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取系统数据源配置和个人配置
//
// @param request - GetDataSourceOrderConfigRequest
//
// @return GetDataSourceOrderConfigResponse
func (client *Client) GetDataSourceOrderConfig(request *GetDataSourceOrderConfigRequest) (_result *GetDataSourceOrderConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataSourceOrderConfigResponse{}
	_body, _err := client.GetDataSourceOrderConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 数据集管理-详情
//
// @param request - GetDatasetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDatasetResponse
func (client *Client) GetDatasetWithOptions(request *GetDatasetRequest, runtime *util.RuntimeOptions) (_result *GetDatasetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		body["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataset"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 数据集管理-详情
//
// @param request - GetDatasetRequest
//
// @return GetDatasetResponse
func (client *Client) GetDataset(request *GetDatasetRequest) (_result *GetDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDatasetResponse{}
	_body, _err := client.GetDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取数据集文档
//
// @param request - GetDatasetDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDatasetDocumentResponse
func (client *Client) GetDatasetDocumentWithOptions(request *GetDatasetDocumentRequest, runtime *util.RuntimeOptions) (_result *GetDatasetDocumentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		body["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.DocUuid)) {
		body["DocUuid"] = request.DocUuid
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDatasetDocument"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDatasetDocumentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取数据集文档
//
// @param request - GetDatasetDocumentRequest
//
// @return GetDatasetDocumentResponse
func (client *Client) GetDatasetDocument(request *GetDatasetDocumentRequest) (_result *GetDatasetDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDatasetDocumentResponse{}
	_body, _err := client.GetDatasetDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取文档聚合任务结果
//
// @param request - GetDocClusterTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDocClusterTaskResponse
func (client *Client) GetDocClusterTaskWithOptions(request *GetDocClusterTaskRequest, runtime *util.RuntimeOptions) (_result *GetDocClusterTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDocClusterTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDocClusterTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取文档聚合任务结果
//
// @param request - GetDocClusterTaskRequest
//
// @return GetDocClusterTaskResponse
func (client *Client) GetDocClusterTask(request *GetDocClusterTaskRequest) (_result *GetDocClusterTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDocClusterTaskResponse{}
	_body, _err := client.GetDocClusterTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读获取文档信息
//
// @param request - GetDocInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDocInfoResponse
func (client *Client) GetDocInfoWithOptions(request *GetDocInfoRequest, runtime *util.RuntimeOptions) (_result *GetDocInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		body["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDocInfo"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDocInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读获取文档信息
//
// @param request - GetDocInfoRequest
//
// @return GetDocInfoResponse
func (client *Client) GetDocInfo(request *GetDocInfoRequest) (_result *GetDocInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDocInfoResponse{}
	_body, _err := client.GetDocInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取企业VOC分析任务结果
//
// @param request - GetEnterpriseVocAnalysisTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEnterpriseVocAnalysisTaskResponse
func (client *Client) GetEnterpriseVocAnalysisTaskWithOptions(request *GetEnterpriseVocAnalysisTaskRequest, runtime *util.RuntimeOptions) (_result *GetEnterpriseVocAnalysisTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEnterpriseVocAnalysisTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEnterpriseVocAnalysisTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取企业VOC分析任务结果
//
// @param request - GetEnterpriseVocAnalysisTaskRequest
//
// @return GetEnterpriseVocAnalysisTaskResponse
func (client *Client) GetEnterpriseVocAnalysisTask(request *GetEnterpriseVocAnalysisTaskRequest) (_result *GetEnterpriseVocAnalysisTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEnterpriseVocAnalysisTaskResponse{}
	_body, _err := client.GetEnterpriseVocAnalysisTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文档管理-查询详情。
//
// @param request - GetGeneratedContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetGeneratedContentResponse
func (client *Client) GetGeneratedContentWithOptions(request *GetGeneratedContentRequest, runtime *util.RuntimeOptions) (_result *GetGeneratedContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetGeneratedContent"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetGeneratedContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文档管理-查询详情。
//
// @param request - GetGeneratedContentRequest
//
// @return GetGeneratedContentResponse
func (client *Client) GetGeneratedContent(request *GetGeneratedContentRequest) (_result *GetGeneratedContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGeneratedContentResponse{}
	_body, _err := client.GetGeneratedContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询新闻播报单
//
// @param tmpReq - GetHotTopicBroadcastRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHotTopicBroadcastResponse
func (client *Client) GetHotTopicBroadcastWithOptions(tmpReq *GetHotTopicBroadcastRequest, runtime *util.RuntimeOptions) (_result *GetHotTopicBroadcastResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetHotTopicBroadcastShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Locations)) {
		request.LocationsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Locations, tea.String("Locations"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.StepForCustomSummaryStyleConfig)) {
		request.StepForCustomSummaryStyleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StepForCustomSummaryStyleConfig, tea.String("StepForCustomSummaryStyleConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.StepForNewsBroadcastContentConfig)) {
		request.StepForNewsBroadcastContentConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StepForNewsBroadcastContentConfig, tea.String("StepForNewsBroadcastContentConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Topics)) {
		request.TopicsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Topics, tea.String("Topics"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalcTotalToken)) {
		body["CalcTotalToken"] = request.CalcTotalToken
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		body["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.HotTopicVersion)) {
		body["HotTopicVersion"] = request.HotTopicVersion
	}

	if !tea.BoolValue(util.IsUnset(request.LocationQuery)) {
		body["LocationQuery"] = request.LocationQuery
	}

	if !tea.BoolValue(util.IsUnset(request.LocationsShrink)) {
		body["Locations"] = request.LocationsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.StepForCustomSummaryStyleConfigShrink)) {
		body["StepForCustomSummaryStyleConfig"] = request.StepForCustomSummaryStyleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StepForNewsBroadcastContentConfigShrink)) {
		body["StepForNewsBroadcastContentConfig"] = request.StepForNewsBroadcastContentConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TopicsShrink)) {
		body["Topics"] = request.TopicsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHotTopicBroadcast"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHotTopicBroadcastResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询新闻播报单
//
// @param request - GetHotTopicBroadcastRequest
//
// @return GetHotTopicBroadcastResponse
func (client *Client) GetHotTopicBroadcast(request *GetHotTopicBroadcastRequest) (_result *GetHotTopicBroadcastResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHotTopicBroadcastResponse{}
	_body, _err := client.GetHotTopicBroadcastWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得干预全局回复
//
// @param request - GetInterveneGlobalReplyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInterveneGlobalReplyResponse
func (client *Client) GetInterveneGlobalReplyWithOptions(request *GetInterveneGlobalReplyRequest, runtime *util.RuntimeOptions) (_result *GetInterveneGlobalReplyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInterveneGlobalReply"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInterveneGlobalReplyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得干预全局回复
//
// @param request - GetInterveneGlobalReplyRequest
//
// @return GetInterveneGlobalReplyResponse
func (client *Client) GetInterveneGlobalReply(request *GetInterveneGlobalReplyRequest) (_result *GetInterveneGlobalReplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInterveneGlobalReplyResponse{}
	_body, _err := client.GetInterveneGlobalReplyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得导入任务信息
//
// @param request - GetInterveneImportTaskInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInterveneImportTaskInfoResponse
func (client *Client) GetInterveneImportTaskInfoWithOptions(request *GetInterveneImportTaskInfoRequest, runtime *util.RuntimeOptions) (_result *GetInterveneImportTaskInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInterveneImportTaskInfo"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInterveneImportTaskInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得导入任务信息
//
// @param request - GetInterveneImportTaskInfoRequest
//
// @return GetInterveneImportTaskInfoResponse
func (client *Client) GetInterveneImportTaskInfo(request *GetInterveneImportTaskInfoRequest) (_result *GetInterveneImportTaskInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInterveneImportTaskInfoResponse{}
	_body, _err := client.GetInterveneImportTaskInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得干预项规则详情
//
// @param request - GetInterveneRuleDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInterveneRuleDetailResponse
func (client *Client) GetInterveneRuleDetailWithOptions(request *GetInterveneRuleDetailRequest, runtime *util.RuntimeOptions) (_result *GetInterveneRuleDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		body["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInterveneRuleDetail"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInterveneRuleDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得干预项规则详情
//
// @param request - GetInterveneRuleDetailRequest
//
// @return GetInterveneRuleDetailResponse
func (client *Client) GetInterveneRuleDetail(request *GetInterveneRuleDetailRequest) (_result *GetInterveneRuleDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInterveneRuleDetailResponse{}
	_body, _err := client.GetInterveneRuleDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得干预导入模版文件下载地址
//
// @param request - GetInterveneTemplateFileUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInterveneTemplateFileUrlResponse
func (client *Client) GetInterveneTemplateFileUrlWithOptions(request *GetInterveneTemplateFileUrlRequest, runtime *util.RuntimeOptions) (_result *GetInterveneTemplateFileUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInterveneTemplateFileUrl"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInterveneTemplateFileUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得干预导入模版文件下载地址
//
// @param request - GetInterveneTemplateFileUrlRequest
//
// @return GetInterveneTemplateFileUrlResponse
func (client *Client) GetInterveneTemplateFileUrl(request *GetInterveneTemplateFileUrlRequest) (_result *GetInterveneTemplateFileUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInterveneTemplateFileUrlResponse{}
	_body, _err := client.GetInterveneTemplateFileUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据ID获取素材内容
//
// @param request - GetMaterialByIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMaterialByIdResponse
func (client *Client) GetMaterialByIdWithOptions(request *GetMaterialByIdRequest, runtime *util.RuntimeOptions) (_result *GetMaterialByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMaterialById"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMaterialByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据ID获取素材内容
//
// @param request - GetMaterialByIdRequest
//
// @return GetMaterialByIdResponse
func (client *Client) GetMaterialById(request *GetMaterialByIdRequest) (_result *GetMaterialByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMaterialByIdResponse{}
	_body, _err := client.GetMaterialByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取当前用户的配置
//
// @param request - GetPropertiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPropertiesResponse
func (client *Client) GetPropertiesWithOptions(request *GetPropertiesRequest, runtime *util.RuntimeOptions) (_result *GetPropertiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProperties"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPropertiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取当前用户的配置
//
// @param request - GetPropertiesRequest
//
// @return GetPropertiesResponse
func (client *Client) GetProperties(request *GetPropertiesRequest) (_result *GetPropertiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPropertiesResponse{}
	_body, _err := client.GetPropertiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询一键成片剪辑任务
//
// @param request - GetSmartClipTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSmartClipTaskResponse
func (client *Client) GetSmartClipTaskWithOptions(request *GetSmartClipTaskRequest, runtime *util.RuntimeOptions) (_result *GetSmartClipTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSmartClipTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSmartClipTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询一键成片剪辑任务
//
// @param request - GetSmartClipTaskRequest
//
// @return GetSmartClipTaskResponse
func (client *Client) GetSmartClipTask(request *GetSmartClipTaskRequest) (_result *GetSmartClipTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSmartClipTaskResponse{}
	_body, _err := client.GetSmartClipTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据ID获取热点事件信息
//
// @param request - GetTopicByIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTopicByIdResponse
func (client *Client) GetTopicByIdWithOptions(request *GetTopicByIdRequest, runtime *util.RuntimeOptions) (_result *GetTopicByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTopicById"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTopicByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据ID获取热点事件信息
//
// @param request - GetTopicByIdRequest
//
// @return GetTopicByIdResponse
func (client *Client) GetTopicById(request *GetTopicByIdRequest) (_result *GetTopicByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTopicByIdResponse{}
	_body, _err := client.GetTopicByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取选题视角分析任务结果
//
// @param request - GetTopicSelectionPerspectiveAnalysisTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTopicSelectionPerspectiveAnalysisTaskResponse
func (client *Client) GetTopicSelectionPerspectiveAnalysisTaskWithOptions(request *GetTopicSelectionPerspectiveAnalysisTaskRequest, runtime *util.RuntimeOptions) (_result *GetTopicSelectionPerspectiveAnalysisTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTopicSelectionPerspectiveAnalysisTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTopicSelectionPerspectiveAnalysisTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取选题视角分析任务结果
//
// @param request - GetTopicSelectionPerspectiveAnalysisTaskRequest
//
// @return GetTopicSelectionPerspectiveAnalysisTaskResponse
func (client *Client) GetTopicSelectionPerspectiveAnalysisTask(request *GetTopicSelectionPerspectiveAnalysisTaskRequest) (_result *GetTopicSelectionPerspectiveAnalysisTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTopicSelectionPerspectiveAnalysisTaskResponse{}
	_body, _err := client.GetTopicSelectionPerspectiveAnalysisTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导入干预文件
//
// @param request - ImportInterveneFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportInterveneFileResponse
func (client *Client) ImportInterveneFileWithOptions(request *ImportInterveneFileRequest, runtime *util.RuntimeOptions) (_result *ImportInterveneFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocName)) {
		body["DocName"] = request.DocName
	}

	if !tea.BoolValue(util.IsUnset(request.FileKey)) {
		body["FileKey"] = request.FileKey
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		body["FileUrl"] = request.FileUrl
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportInterveneFile"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportInterveneFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导入干预文件
//
// @param request - ImportInterveneFileRequest
//
// @return ImportInterveneFileResponse
func (client *Client) ImportInterveneFile(request *ImportInterveneFileRequest) (_result *ImportInterveneFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportInterveneFileResponse{}
	_body, _err := client.ImportInterveneFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 异步导入干预文件
//
// @param request - ImportInterveneFileAsyncRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportInterveneFileAsyncResponse
func (client *Client) ImportInterveneFileAsyncWithOptions(request *ImportInterveneFileAsyncRequest, runtime *util.RuntimeOptions) (_result *ImportInterveneFileAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocName)) {
		body["DocName"] = request.DocName
	}

	if !tea.BoolValue(util.IsUnset(request.FileKey)) {
		body["FileKey"] = request.FileKey
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		body["FileUrl"] = request.FileUrl
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportInterveneFileAsync"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportInterveneFileAsyncResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 异步导入干预文件
//
// @param request - ImportInterveneFileAsyncRequest
//
// @return ImportInterveneFileAsyncResponse
func (client *Client) ImportInterveneFileAsync(request *ImportInterveneFileAsyncRequest) (_result *ImportInterveneFileAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportInterveneFileAsyncResponse{}
	_body, _err := client.ImportInterveneFileAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 设置干预全局回复
//
// @param tmpReq - InsertInterveneGlobalReplyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InsertInterveneGlobalReplyResponse
func (client *Client) InsertInterveneGlobalReplyWithOptions(tmpReq *InsertInterveneGlobalReplyRequest, runtime *util.RuntimeOptions) (_result *InsertInterveneGlobalReplyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InsertInterveneGlobalReplyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ReplyMessagList)) {
		request.ReplyMessagListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReplyMessagList, tea.String("ReplyMessagList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ReplyMessagListShrink)) {
		body["ReplyMessagList"] = request.ReplyMessagListShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertInterveneGlobalReply"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertInterveneGlobalReplyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 设置干预全局回复
//
// @param request - InsertInterveneGlobalReplyRequest
//
// @return InsertInterveneGlobalReplyResponse
func (client *Client) InsertInterveneGlobalReply(request *InsertInterveneGlobalReplyRequest) (_result *InsertInterveneGlobalReplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertInterveneGlobalReplyResponse{}
	_body, _err := client.InsertInterveneGlobalReplyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 插入干预规则
//
// @param tmpReq - InsertInterveneRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InsertInterveneRuleResponse
func (client *Client) InsertInterveneRuleWithOptions(tmpReq *InsertInterveneRuleRequest, runtime *util.RuntimeOptions) (_result *InsertInterveneRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InsertInterveneRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InterveneRuleConfig)) {
		request.InterveneRuleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InterveneRuleConfig, tea.String("InterveneRuleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InterveneRuleConfigShrink)) {
		body["InterveneRuleConfig"] = request.InterveneRuleConfigShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertInterveneRule"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertInterveneRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 插入干预规则
//
// @param request - InsertInterveneRuleRequest
//
// @return InsertInterveneRuleResponse
func (client *Client) InsertInterveneRule(request *InsertInterveneRuleRequest) (_result *InsertInterveneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertInterveneRuleResponse{}
	_body, _err := client.InsertInterveneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 分页获取企业VOC分析任务明细列表
//
// @param tmpReq - ListAnalysisTagDetailByTaskIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAnalysisTagDetailByTaskIdResponse
func (client *Client) ListAnalysisTagDetailByTaskIdWithOptions(tmpReq *ListAnalysisTagDetailByTaskIdRequest, runtime *util.RuntimeOptions) (_result *ListAnalysisTagDetailByTaskIdResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListAnalysisTagDetailByTaskIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Categories)) {
		request.CategoriesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Categories, tea.String("Categories"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoriesShrink)) {
		body["Categories"] = request.CategoriesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAnalysisTagDetailByTaskId"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAnalysisTagDetailByTaskIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 分页获取企业VOC分析任务明细列表
//
// @param request - ListAnalysisTagDetailByTaskIdRequest
//
// @return ListAnalysisTagDetailByTaskIdResponse
func (client *Client) ListAnalysisTagDetailByTaskId(request *ListAnalysisTagDetailByTaskIdRequest) (_result *ListAnalysisTagDetailByTaskIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAnalysisTagDetailByTaskIdResponse{}
	_body, _err := client.ListAnalysisTagDetailByTaskIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询任务列表
//
// @param tmpReq - ListAsyncTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAsyncTasksResponse
func (client *Client) ListAsyncTasksWithOptions(tmpReq *ListAsyncTasksRequest, runtime *util.RuntimeOptions) (_result *ListAsyncTasksResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListAsyncTasksShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TaskStatusList)) {
		request.TaskStatusListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TaskStatusList, tea.String("TaskStatusList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TaskTypeList)) {
		request.TaskTypeListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TaskTypeList, tea.String("TaskTypeList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimeEnd)) {
		body["CreateTimeEnd"] = request.CreateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeStart)) {
		body["CreateTimeStart"] = request.CreateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.TaskCode)) {
		body["TaskCode"] = request.TaskCode
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskStatus)) {
		body["TaskStatus"] = request.TaskStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TaskStatusListShrink)) {
		body["TaskStatusList"] = request.TaskStatusListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		body["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.TaskTypeListShrink)) {
		body["TaskTypeList"] = request.TaskTypeListShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAsyncTasks"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAsyncTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询任务列表
//
// @param request - ListAsyncTasksRequest
//
// @return ListAsyncTasksResponse
func (client *Client) ListAsyncTasks(request *ListAsyncTasksRequest) (_result *ListAsyncTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAsyncTasksResponse{}
	_body, _err := client.ListAsyncTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取系统自定义预设
//
// @param request - ListBuildConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBuildConfigsResponse
func (client *Client) ListBuildConfigsWithOptions(request *ListBuildConfigsRequest, runtime *util.RuntimeOptions) (_result *ListBuildConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBuildConfigs"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBuildConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取系统自定义预设
//
// @param request - ListBuildConfigsRequest
//
// @return ListBuildConfigsResponse
func (client *Client) ListBuildConfigs(request *ListBuildConfigsRequest) (_result *ListBuildConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBuildConfigsResponse{}
	_body, _err := client.ListBuildConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义文本列表
//
// @param request - ListCustomTextRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomTextResponse
func (client *Client) ListCustomTextWithOptions(request *ListCustomTextRequest, runtime *util.RuntimeOptions) (_result *ListCustomTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		body["CommodityCode"] = request.CommodityCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomText"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义文本列表
//
// @param request - ListCustomTextRequest
//
// @return ListCustomTextResponse
func (client *Client) ListCustomText(request *ListCustomTextRequest) (_result *ListCustomTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomTextResponse{}
	_body, _err := client.ListCustomTextWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义视角列表
//
// @param tmpReq - ListCustomViewPointsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomViewPointsResponse
func (client *Client) ListCustomViewPointsWithOptions(tmpReq *ListCustomViewPointsRequest, runtime *util.RuntimeOptions) (_result *ListCustomViewPointsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListCustomViewPointsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Attitudes)) {
		request.AttitudesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Attitudes, tea.String("Attitudes"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.CustomViewPointIds)) {
		request.CustomViewPointIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CustomViewPointIds, tea.String("CustomViewPointIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Attitude)) {
		body["Attitude"] = request.Attitude
	}

	if !tea.BoolValue(util.IsUnset(request.AttitudesShrink)) {
		body["Attitudes"] = request.AttitudesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CustomViewPointId)) {
		body["CustomViewPointId"] = request.CustomViewPointId
	}

	if !tea.BoolValue(util.IsUnset(request.CustomViewPointIdsShrink)) {
		body["CustomViewPointIds"] = request.CustomViewPointIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	if !tea.BoolValue(util.IsUnset(request.TopicId)) {
		body["TopicId"] = request.TopicId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomViewPoints"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomViewPointsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义视角列表
//
// @param request - ListCustomViewPointsRequest
//
// @return ListCustomViewPointsResponse
func (client *Client) ListCustomViewPoints(request *ListCustomViewPointsRequest) (_result *ListCustomViewPointsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomViewPointsResponse{}
	_body, _err := client.ListCustomViewPointsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询数据集文档列表
//
// @param tmpReq - ListDatasetDocumentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatasetDocumentsResponse
func (client *Client) ListDatasetDocumentsWithOptions(tmpReq *ListDatasetDocumentsRequest, runtime *util.RuntimeOptions) (_result *ListDatasetDocumentsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDatasetDocumentsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ExcludeFields)) {
		request.ExcludeFieldsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExcludeFields, tea.String("ExcludeFields"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.IncludeFields)) {
		request.IncludeFieldsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.IncludeFields, tea.String("IncludeFields"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetDescription)) {
		body["DatasetDescription"] = request.DatasetDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		body["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.DocType)) {
		body["DocType"] = request.DocType
	}

	if !tea.BoolValue(util.IsUnset(request.ExcludeFieldsShrink)) {
		body["ExcludeFields"] = request.ExcludeFieldsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeFieldsShrink)) {
		body["IncludeFields"] = request.IncludeFieldsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatasetDocuments"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDatasetDocumentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询数据集文档列表
//
// @param request - ListDatasetDocumentsRequest
//
// @return ListDatasetDocumentsResponse
func (client *Client) ListDatasetDocuments(request *ListDatasetDocumentsRequest) (_result *ListDatasetDocumentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatasetDocumentsResponse{}
	_body, _err := client.ListDatasetDocumentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 数据集管理-查询
//
// @param request - ListDatasetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatasetsResponse
func (client *Client) ListDatasetsWithOptions(request *ListDatasetsRequest, runtime *util.RuntimeOptions) (_result *ListDatasetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		body["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetType)) {
		body["DatasetType"] = request.DatasetType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchDatasetEnable)) {
		body["SearchDatasetEnable"] = request.SearchDatasetEnable
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatasets"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDatasetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 数据集管理-查询
//
// @param request - ListDatasetsRequest
//
// @return ListDatasetsResponse
func (client *Client) ListDatasets(request *ListDatasetsRequest) (_result *ListDatasetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatasetsResponse{}
	_body, _err := client.ListDatasetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 生成历史列表
//
// @param request - ListDialoguesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDialoguesResponse
func (client *Client) ListDialoguesWithOptions(request *ListDialoguesRequest, runtime *util.RuntimeOptions) (_result *ListDialoguesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.DialogueType)) {
		body["DialogueType"] = request.DialogueType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDialogues"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDialoguesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 生成历史列表
//
// @param request - ListDialoguesRequest
//
// @return ListDialoguesResponse
func (client *Client) ListDialogues(request *ListDialoguesRequest) (_result *ListDialoguesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDialoguesResponse{}
	_body, _err := client.ListDialoguesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读获取文档列表
//
// @param tmpReq - ListDocsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDocsResponse
func (client *Client) ListDocsWithOptions(tmpReq *ListDocsRequest, runtime *util.RuntimeOptions) (_result *ListDocsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDocsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Statuses)) {
		request.StatusesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Statuses, tea.String("Statuses"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		body["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.DocName)) {
		body["DocName"] = request.DocName
	}

	if !tea.BoolValue(util.IsUnset(request.DocType)) {
		body["DocType"] = request.DocType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Skip)) {
		body["Skip"] = request.Skip
	}

	if !tea.BoolValue(util.IsUnset(request.StatusesShrink)) {
		body["Statuses"] = request.StatusesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDocs"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDocsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读获取文档列表
//
// @param request - ListDocsRequest
//
// @return ListDocsResponse
func (client *Client) ListDocs(request *ListDocsRequest) (_result *ListDocsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDocsResponse{}
	_body, _err := client.ListDocsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新颖视角列表
//
// @param request - ListFreshViewPointsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFreshViewPointsResponse
func (client *Client) ListFreshViewPointsWithOptions(request *ListFreshViewPointsRequest, runtime *util.RuntimeOptions) (_result *ListFreshViewPointsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	if !tea.BoolValue(util.IsUnset(request.TopicSource)) {
		body["TopicSource"] = request.TopicSource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFreshViewPoints"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFreshViewPointsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新颖视角列表
//
// @param request - ListFreshViewPointsRequest
//
// @return ListFreshViewPointsResponse
func (client *Client) ListFreshViewPoints(request *ListFreshViewPointsRequest) (_result *ListFreshViewPointsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFreshViewPointsResponse{}
	_body, _err := client.ListFreshViewPointsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文档管理-列表。
//
// @param request - ListGeneratedContentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListGeneratedContentsResponse
func (client *Client) ListGeneratedContentsWithOptions(request *ListGeneratedContentsRequest, runtime *util.RuntimeOptions) (_result *ListGeneratedContentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContentDomain)) {
		body["ContentDomain"] = request.ContentDomain
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListGeneratedContents"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListGeneratedContentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文档管理-列表。
//
// @param request - ListGeneratedContentsRequest
//
// @return ListGeneratedContentsResponse
func (client *Client) ListGeneratedContents(request *ListGeneratedContentsRequest) (_result *ListGeneratedContentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListGeneratedContentsResponse{}
	_body, _err := client.ListGeneratedContentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取分类的热点新闻
//
// @param tmpReq - ListHotNewsWithTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHotNewsWithTypeResponse
func (client *Client) ListHotNewsWithTypeWithOptions(tmpReq *ListHotNewsWithTypeRequest, runtime *util.RuntimeOptions) (_result *ListHotNewsWithTypeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListHotNewsWithTypeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.NewsTypes)) {
		request.NewsTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.NewsTypes, tea.String("NewsTypes"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.NewsType)) {
		body["NewsType"] = request.NewsType
	}

	if !tea.BoolValue(util.IsUnset(request.NewsTypesShrink)) {
		body["NewsTypes"] = request.NewsTypesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHotNewsWithType"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHotNewsWithTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取分类的热点新闻
//
// @param request - ListHotNewsWithTypeRequest
//
// @return ListHotNewsWithTypeResponse
func (client *Client) ListHotNewsWithType(request *ListHotNewsWithTypeRequest) (_result *ListHotNewsWithTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHotNewsWithTypeResponse{}
	_body, _err := client.ListHotNewsWithTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取所有平台热榜源列表
//
// @param request - ListHotSourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHotSourcesResponse
func (client *Client) ListHotSourcesWithOptions(request *ListHotSourcesRequest, runtime *util.RuntimeOptions) (_result *ListHotSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHotSources"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHotSourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取所有平台热榜源列表
//
// @param request - ListHotSourcesRequest
//
// @return ListHotSourcesResponse
func (client *Client) ListHotSources(request *ListHotSourcesRequest) (_result *ListHotSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHotSourcesResponse{}
	_body, _err := client.ListHotSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取热点事件列表
//
// @param tmpReq - ListHotTopicsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHotTopicsResponse
func (client *Client) ListHotTopicsWithOptions(tmpReq *ListHotTopicsRequest, runtime *util.RuntimeOptions) (_result *ListHotTopicsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListHotTopicsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TopicIds)) {
		request.TopicIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TopicIds, tea.String("TopicIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Topics)) {
		request.TopicsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Topics, tea.String("Topics"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.TopicIdsShrink)) {
		body["TopicIds"] = request.TopicIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TopicQuery)) {
		body["TopicQuery"] = request.TopicQuery
	}

	if !tea.BoolValue(util.IsUnset(request.TopicSource)) {
		body["TopicSource"] = request.TopicSource
	}

	if !tea.BoolValue(util.IsUnset(request.TopicVersion)) {
		body["TopicVersion"] = request.TopicVersion
	}

	if !tea.BoolValue(util.IsUnset(request.TopicsShrink)) {
		body["Topics"] = request.TopicsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WithNews)) {
		body["WithNews"] = request.WithNews
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHotTopics"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHotTopicsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取热点事件列表
//
// @param request - ListHotTopicsRequest
//
// @return ListHotTopicsResponse
func (client *Client) ListHotTopics(request *ListHotTopicsRequest) (_result *ListHotTopicsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHotTopicsResponse{}
	_body, _err := client.ListHotTopicsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 热门视角列表
//
// @param request - ListHotViewPointsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHotViewPointsResponse
func (client *Client) ListHotViewPointsWithOptions(request *ListHotViewPointsRequest, runtime *util.RuntimeOptions) (_result *ListHotViewPointsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	if !tea.BoolValue(util.IsUnset(request.TopicSource)) {
		body["TopicSource"] = request.TopicSource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHotViewPoints"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHotViewPointsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 热门视角列表
//
// @param request - ListHotViewPointsRequest
//
// @return ListHotViewPointsResponse
func (client *Client) ListHotViewPoints(request *ListHotViewPointsRequest) (_result *ListHotViewPointsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHotViewPointsResponse{}
	_body, _err := client.ListHotViewPointsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得干预项目数量列表
//
// @param request - ListInterveneCntRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInterveneCntResponse
func (client *Client) ListInterveneCntWithOptions(request *ListInterveneCntRequest, runtime *util.RuntimeOptions) (_result *ListInterveneCntResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageIndex)) {
		body["PageIndex"] = request.PageIndex
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInterveneCnt"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInterveneCntResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得干预项目数量列表
//
// @param request - ListInterveneCntRequest
//
// @return ListInterveneCntResponse
func (client *Client) ListInterveneCnt(request *ListInterveneCntRequest) (_result *ListInterveneCntResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInterveneCntResponse{}
	_body, _err := client.ListInterveneCntWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得导入任务列表
//
// @param request - ListInterveneImportTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInterveneImportTasksResponse
func (client *Client) ListInterveneImportTasksWithOptions(request *ListInterveneImportTasksRequest, runtime *util.RuntimeOptions) (_result *ListInterveneImportTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageIndex)) {
		body["PageIndex"] = request.PageIndex
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInterveneImportTasks"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInterveneImportTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得导入任务列表
//
// @param request - ListInterveneImportTasksRequest
//
// @return ListInterveneImportTasksResponse
func (client *Client) ListInterveneImportTasks(request *ListInterveneImportTasksRequest) (_result *ListInterveneImportTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInterveneImportTasksResponse{}
	_body, _err := client.ListInterveneImportTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得干预规则列表
//
// @param request - ListInterveneRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInterveneRulesResponse
func (client *Client) ListInterveneRulesWithOptions(request *ListInterveneRulesRequest, runtime *util.RuntimeOptions) (_result *ListInterveneRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageIndex)) {
		body["PageIndex"] = request.PageIndex
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInterveneRules"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInterveneRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得干预规则列表
//
// @param request - ListInterveneRulesRequest
//
// @return ListInterveneRulesResponse
func (client *Client) ListInterveneRules(request *ListInterveneRulesRequest) (_result *ListInterveneRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInterveneRulesResponse{}
	_body, _err := client.ListInterveneRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得干预项列表
//
// @param request - ListIntervenesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIntervenesResponse
func (client *Client) ListIntervenesWithOptions(request *ListIntervenesRequest, runtime *util.RuntimeOptions) (_result *ListIntervenesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InterveneType)) {
		body["InterveneType"] = request.InterveneType
	}

	if !tea.BoolValue(util.IsUnset(request.PageIndex)) {
		body["PageIndex"] = request.PageIndex
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		body["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIntervenes"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIntervenesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得干预项列表
//
// @param request - ListIntervenesRequest
//
// @return ListIntervenesResponse
func (client *Client) ListIntervenes(request *ListIntervenesRequest) (_result *ListIntervenesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIntervenesResponse{}
	_body, _err := client.ListIntervenesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询素材列表
//
// @param tmpReq - ListMaterialDocumentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMaterialDocumentsResponse
func (client *Client) ListMaterialDocumentsWithOptions(tmpReq *ListMaterialDocumentsRequest, runtime *util.RuntimeOptions) (_result *ListMaterialDocumentsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListMaterialDocumentsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DocTypeList)) {
		request.DocTypeListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DocTypeList, tea.String("DocTypeList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Keywords)) {
		request.KeywordsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Keywords, tea.String("Keywords"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeEnd)) {
		body["CreateTimeEnd"] = request.CreateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeStart)) {
		body["CreateTimeStart"] = request.CreateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.DocType)) {
		body["DocType"] = request.DocType
	}

	if !tea.BoolValue(util.IsUnset(request.DocTypeListShrink)) {
		body["DocTypeList"] = request.DocTypeListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.GeneratePublicUrl)) {
		body["GeneratePublicUrl"] = request.GeneratePublicUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.KeywordsShrink)) {
		body["Keywords"] = request.KeywordsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.ShareAttr)) {
		body["ShareAttr"] = request.ShareAttr
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateTimeEnd)) {
		body["UpdateTimeEnd"] = request.UpdateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateTimeStart)) {
		body["UpdateTimeStart"] = request.UpdateTimeStart
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMaterialDocuments"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMaterialDocumentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询素材列表
//
// @param request - ListMaterialDocumentsRequest
//
// @return ListMaterialDocumentsResponse
func (client *Client) ListMaterialDocuments(request *ListMaterialDocumentsRequest) (_result *ListMaterialDocumentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMaterialDocumentsResponse{}
	_body, _err := client.ListMaterialDocumentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取选题策划列表
//
// @param tmpReq - ListPlanningProposalRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPlanningProposalResponse
func (client *Client) ListPlanningProposalWithOptions(tmpReq *ListPlanningProposalRequest, runtime *util.RuntimeOptions) (_result *ListPlanningProposalResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListPlanningProposalShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CustomViewPointIds)) {
		request.CustomViewPointIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CustomViewPointIds, tea.String("CustomViewPointIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Titles)) {
		request.TitlesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Titles, tea.String("Titles"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomViewPointId)) {
		body["CustomViewPointId"] = request.CustomViewPointId
	}

	if !tea.BoolValue(util.IsUnset(request.CustomViewPointIdsShrink)) {
		body["CustomViewPointIds"] = request.CustomViewPointIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.TitlesShrink)) {
		body["Titles"] = request.TitlesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	if !tea.BoolValue(util.IsUnset(request.TopicSource)) {
		body["TopicSource"] = request.TopicSource
	}

	if !tea.BoolValue(util.IsUnset(request.TopicVersion)) {
		body["TopicVersion"] = request.TopicVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ViewPointType)) {
		body["ViewPointType"] = request.ViewPointType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPlanningProposal"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPlanningProposalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取选题策划列表
//
// @param request - ListPlanningProposalRequest
//
// @return ListPlanningProposalResponse
func (client *Client) ListPlanningProposal(request *ListPlanningProposalRequest) (_result *ListPlanningProposalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPlanningProposalResponse{}
	_body, _err := client.ListPlanningProposalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询搜索生成任务对话详情中数据列表
//
// @param request - ListSearchTaskDialogueDatasRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSearchTaskDialogueDatasResponse
func (client *Client) ListSearchTaskDialogueDatasWithOptions(request *ListSearchTaskDialogueDatasRequest, runtime *util.RuntimeOptions) (_result *ListSearchTaskDialogueDatasResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IncludeContent)) {
		body["IncludeContent"] = request.IncludeContent
	}

	if !tea.BoolValue(util.IsUnset(request.MultimodalSearchType)) {
		body["MultimodalSearchType"] = request.MultimodalSearchType
	}

	if !tea.BoolValue(util.IsUnset(request.OriginalSessionId)) {
		body["OriginalSessionId"] = request.OriginalSessionId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.SearchModel)) {
		body["SearchModel"] = request.SearchModel
	}

	if !tea.BoolValue(util.IsUnset(request.SearchModelDataValue)) {
		body["SearchModelDataValue"] = request.SearchModelDataValue
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSearchTaskDialogueDatas"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSearchTaskDialogueDatasResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询搜索生成任务对话详情中数据列表
//
// @param request - ListSearchTaskDialogueDatasRequest
//
// @return ListSearchTaskDialogueDatasResponse
func (client *Client) ListSearchTaskDialogueDatas(request *ListSearchTaskDialogueDatasRequest) (_result *ListSearchTaskDialogueDatasResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSearchTaskDialogueDatasResponse{}
	_body, _err := client.ListSearchTaskDialogueDatasWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询妙搜搜索生成任务详情列表
//
// @param request - ListSearchTaskDialoguesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSearchTaskDialoguesResponse
func (client *Client) ListSearchTaskDialoguesWithOptions(request *ListSearchTaskDialoguesRequest, runtime *util.RuntimeOptions) (_result *ListSearchTaskDialoguesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSearchTaskDialogues"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSearchTaskDialoguesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询妙搜搜索生成任务详情列表
//
// @param request - ListSearchTaskDialoguesRequest
//
// @return ListSearchTaskDialoguesResponse
func (client *Client) ListSearchTaskDialogues(request *ListSearchTaskDialoguesRequest) (_result *ListSearchTaskDialoguesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSearchTaskDialoguesResponse{}
	_body, _err := client.ListSearchTaskDialoguesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询妙搜搜索生成历史任务列表
//
// @param tmpReq - ListSearchTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSearchTasksResponse
func (client *Client) ListSearchTasksWithOptions(tmpReq *ListSearchTasksRequest, runtime *util.RuntimeOptions) (_result *ListSearchTasksResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListSearchTasksShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DialogueTypes)) {
		request.DialogueTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DialogueTypes, tea.String("DialogueTypes"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DialogueTypesShrink)) {
		body["DialogueTypes"] = request.DialogueTypesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSearchTasks"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSearchTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询妙搜搜索生成历史任务列表
//
// @param request - ListSearchTasksRequest
//
// @return ListSearchTasksResponse
func (client *Client) ListSearchTasks(request *ListSearchTasksRequest) (_result *ListSearchTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSearchTasksResponse{}
	_body, _err := client.ListSearchTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取文体学习分析结果列表
//
// @param request - ListStyleLearningResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListStyleLearningResultResponse
func (client *Client) ListStyleLearningResultWithOptions(request *ListStyleLearningResultRequest, runtime *util.RuntimeOptions) (_result *ListStyleLearningResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListStyleLearningResult"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListStyleLearningResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取文体学习分析结果列表
//
// @param request - ListStyleLearningResultRequest
//
// @return ListStyleLearningResultResponse
func (client *Client) ListStyleLearningResult(request *ListStyleLearningResultRequest) (_result *ListStyleLearningResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListStyleLearningResultResponse{}
	_body, _err := client.ListStyleLearningResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 时效性视角列表
//
// @param request - ListTimedViewAttitudeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTimedViewAttitudeResponse
func (client *Client) ListTimedViewAttitudeWithOptions(request *ListTimedViewAttitudeRequest, runtime *util.RuntimeOptions) (_result *ListTimedViewAttitudeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	if !tea.BoolValue(util.IsUnset(request.TopicSource)) {
		body["TopicSource"] = request.TopicSource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTimedViewAttitude"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTimedViewAttitudeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 时效性视角列表
//
// @param request - ListTimedViewAttitudeRequest
//
// @return ListTimedViewAttitudeResponse
func (client *Client) ListTimedViewAttitude(request *ListTimedViewAttitudeRequest) (_result *ListTimedViewAttitudeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTimedViewAttitudeResponse{}
	_body, _err := client.ListTimedViewAttitudeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取热点推荐事件
//
// @param request - ListTopicRecommendEventListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTopicRecommendEventListResponse
func (client *Client) ListTopicRecommendEventListWithOptions(request *ListTopicRecommendEventListRequest, runtime *util.RuntimeOptions) (_result *ListTopicRecommendEventListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTopicRecommendEventList"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTopicRecommendEventListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取热点推荐事件
//
// @param request - ListTopicRecommendEventListRequest
//
// @return ListTopicRecommendEventListResponse
func (client *Client) ListTopicRecommendEventList(request *ListTopicRecommendEventListRequest) (_result *ListTopicRecommendEventListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTopicRecommendEventListResponse{}
	_body, _err := client.ListTopicRecommendEventListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取主题事件推荐观点列表
//
// @param request - ListTopicViewPointRecommendEventListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTopicViewPointRecommendEventListResponse
func (client *Client) ListTopicViewPointRecommendEventListWithOptions(request *ListTopicViewPointRecommendEventListRequest, runtime *util.RuntimeOptions) (_result *ListTopicViewPointRecommendEventListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTopicViewPointRecommendEventList"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTopicViewPointRecommendEventListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取主题事件推荐观点列表
//
// @param request - ListTopicViewPointRecommendEventListRequest
//
// @return ListTopicViewPointRecommendEventListResponse
func (client *Client) ListTopicViewPointRecommendEventList(request *ListTopicViewPointRecommendEventListRequest) (_result *ListTopicViewPointRecommendEventListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTopicViewPointRecommendEventListResponse{}
	_body, _err := client.ListTopicViewPointRecommendEventListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取系统所有实例信息
//
// @param request - ListVersionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVersionsResponse
func (client *Client) ListVersionsWithOptions(request *ListVersionsRequest, runtime *util.RuntimeOptions) (_result *ListVersionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListVersions"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListVersionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取系统所有实例信息
//
// @param request - ListVersionsRequest
//
// @return ListVersionsResponse
func (client *Client) ListVersions(request *ListVersionsRequest) (_result *ListVersionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListVersionsResponse{}
	_body, _err := client.ListVersionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 网友视角列表
//
// @param request - ListWebReviewPointsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWebReviewPointsResponse
func (client *Client) ListWebReviewPointsWithOptions(request *ListWebReviewPointsRequest, runtime *util.RuntimeOptions) (_result *ListWebReviewPointsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	if !tea.BoolValue(util.IsUnset(request.TopicSource)) {
		body["TopicSource"] = request.TopicSource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWebReviewPoints"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWebReviewPointsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 网友视角列表
//
// @param request - ListWebReviewPointsRequest
//
// @return ListWebReviewPointsResponse
func (client *Client) ListWebReviewPoints(request *ListWebReviewPointsRequest) (_result *ListWebReviewPointsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListWebReviewPointsResponse{}
	_body, _err := client.ListWebReviewPointsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据taskId查询异步任务状态
//
// @param request - QueryAsyncTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAsyncTaskResponse
func (client *Client) QueryAsyncTaskWithOptions(request *QueryAsyncTaskRequest, runtime *util.RuntimeOptions) (_result *QueryAsyncTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAsyncTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAsyncTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据taskId查询异步任务状态
//
// @param request - QueryAsyncTaskRequest
//
// @return QueryAsyncTaskResponse
func (client *Client) QueryAsyncTask(request *QueryAsyncTaskRequest) (_result *QueryAsyncTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAsyncTaskResponse{}
	_body, _err := client.QueryAsyncTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 内容缩写
//
// @param request - RunAbbreviationContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunAbbreviationContentResponse
func (client *Client) RunAbbreviationContentWithOptions(request *RunAbbreviationContentRequest, runtime *util.RuntimeOptions) (_result *RunAbbreviationContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunAbbreviationContent"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunAbbreviationContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 内容缩写
//
// @param request - RunAbbreviationContentRequest
//
// @return RunAbbreviationContentResponse
func (client *Client) RunAbbreviationContent(request *RunAbbreviationContentRequest) (_result *RunAbbreviationContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunAbbreviationContentResponse{}
	_body, _err := client.RunAbbreviationContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 书籍导读接口
//
// @param request - RunBookIntroductionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunBookIntroductionResponse
func (client *Client) RunBookIntroductionWithOptions(request *RunBookIntroductionRequest, runtime *util.RuntimeOptions) (_result *RunBookIntroductionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPointPrompt)) {
		body["KeyPointPrompt"] = request.KeyPointPrompt
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.SummaryPrompt)) {
		body["SummaryPrompt"] = request.SummaryPrompt
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunBookIntroduction"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunBookIntroductionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 书籍导读接口
//
// @param request - RunBookIntroductionRequest
//
// @return RunBookIntroductionResponse
func (client *Client) RunBookIntroduction(request *RunBookIntroductionRequest) (_result *RunBookIntroductionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunBookIntroductionResponse{}
	_body, _err := client.RunBookIntroductionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 书籍智能卡片接口
//
// @param request - RunBookSmartCardRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunBookSmartCardResponse
func (client *Client) RunBookSmartCardWithOptions(request *RunBookSmartCardRequest, runtime *util.RuntimeOptions) (_result *RunBookSmartCardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunBookSmartCard"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunBookSmartCardResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 书籍智能卡片接口
//
// @param request - RunBookSmartCardRequest
//
// @return RunBookSmartCardResponse
func (client *Client) RunBookSmartCard(request *RunBookSmartCardRequest) (_result *RunBookSmartCardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunBookSmartCardResponse{}
	_body, _err := client.RunBookSmartCardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 客户之声预测
//
// @param tmpReq - RunCommentGenerationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunCommentGenerationResponse
func (client *Client) RunCommentGenerationWithOptions(tmpReq *RunCommentGenerationRequest, runtime *util.RuntimeOptions) (_result *RunCommentGenerationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunCommentGenerationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.LengthRange)) {
		request.LengthRangeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.LengthRange, tea.String("LengthRange"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Sentiment)) {
		request.SentimentShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Sentiment, tea.String("Sentiment"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Type)) {
		request.TypeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Type, tea.String("Type"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowEmoji)) {
		body["AllowEmoji"] = request.AllowEmoji
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraInfo)) {
		body["ExtraInfo"] = request.ExtraInfo
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		body["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.LengthRangeShrink)) {
		body["LengthRange"] = request.LengthRangeShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NumComments)) {
		body["NumComments"] = request.NumComments
	}

	if !tea.BoolValue(util.IsUnset(request.SentimentShrink)) {
		body["Sentiment"] = request.SentimentShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceMaterial)) {
		body["SourceMaterial"] = request.SourceMaterial
	}

	if !tea.BoolValue(util.IsUnset(request.Style)) {
		body["Style"] = request.Style
	}

	if !tea.BoolValue(util.IsUnset(request.TypeShrink)) {
		body["Type"] = request.TypeShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunCommentGeneration"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunCommentGenerationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 客户之声预测
//
// @param request - RunCommentGenerationRequest
//
// @return RunCommentGenerationResponse
func (client *Client) RunCommentGeneration(request *RunCommentGenerationRequest) (_result *RunCommentGenerationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCommentGenerationResponse{}
	_body, _err := client.RunCommentGenerationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 内容续写
//
// @param request - RunContinueContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunContinueContentResponse
func (client *Client) RunContinueContentWithOptions(request *RunContinueContentRequest, runtime *util.RuntimeOptions) (_result *RunContinueContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunContinueContent"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunContinueContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 内容续写
//
// @param request - RunContinueContentRequest
//
// @return RunContinueContentResponse
func (client *Client) RunContinueContent(request *RunContinueContentRequest) (_result *RunContinueContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunContinueContentResponse{}
	_body, _err := client.RunContinueContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义热点话题分析
//
// @param request - RunCustomHotTopicAnalysisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunCustomHotTopicAnalysisResponse
func (client *Client) RunCustomHotTopicAnalysisWithOptions(request *RunCustomHotTopicAnalysisRequest, runtime *util.RuntimeOptions) (_result *RunCustomHotTopicAnalysisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AskUser)) {
		body["AskUser"] = request.AskUser
	}

	if !tea.BoolValue(util.IsUnset(request.ForceAnalysisExistsTopic)) {
		body["ForceAnalysisExistsTopic"] = request.ForceAnalysisExistsTopic
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.UserBack)) {
		body["UserBack"] = request.UserBack
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunCustomHotTopicAnalysis"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunCustomHotTopicAnalysisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义热点话题分析
//
// @param request - RunCustomHotTopicAnalysisRequest
//
// @return RunCustomHotTopicAnalysisResponse
func (client *Client) RunCustomHotTopicAnalysis(request *RunCustomHotTopicAnalysisRequest) (_result *RunCustomHotTopicAnalysisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCustomHotTopicAnalysisResponse{}
	_body, _err := client.RunCustomHotTopicAnalysisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义选题视角分析
//
// @param request - RunCustomHotTopicViewPointAnalysisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunCustomHotTopicViewPointAnalysisResponse
func (client *Client) RunCustomHotTopicViewPointAnalysisWithOptions(request *RunCustomHotTopicViewPointAnalysisRequest, runtime *util.RuntimeOptions) (_result *RunCustomHotTopicViewPointAnalysisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AskUser)) {
		body["AskUser"] = request.AskUser
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.SearchQuery)) {
		body["SearchQuery"] = request.SearchQuery
	}

	if !tea.BoolValue(util.IsUnset(request.SkipAskUser)) {
		body["SkipAskUser"] = request.SkipAskUser
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	if !tea.BoolValue(util.IsUnset(request.TopicId)) {
		body["TopicId"] = request.TopicId
	}

	if !tea.BoolValue(util.IsUnset(request.TopicSource)) {
		body["TopicSource"] = request.TopicSource
	}

	if !tea.BoolValue(util.IsUnset(request.TopicVersion)) {
		body["TopicVersion"] = request.TopicVersion
	}

	if !tea.BoolValue(util.IsUnset(request.UserBack)) {
		body["UserBack"] = request.UserBack
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunCustomHotTopicViewPointAnalysis"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunCustomHotTopicViewPointAnalysisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义选题视角分析
//
// @param request - RunCustomHotTopicViewPointAnalysisRequest
//
// @return RunCustomHotTopicViewPointAnalysisResponse
func (client *Client) RunCustomHotTopicViewPointAnalysis(request *RunCustomHotTopicViewPointAnalysisRequest) (_result *RunCustomHotTopicViewPointAnalysisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCustomHotTopicViewPointAnalysisResponse{}
	_body, _err := client.RunCustomHotTopicViewPointAnalysisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读脑图生成接口
//
// @param request - RunDocBrainmapRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunDocBrainmapResponse
func (client *Client) RunDocBrainmapWithOptions(request *RunDocBrainmapRequest, runtime *util.RuntimeOptions) (_result *RunDocBrainmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CleanCache)) {
		body["CleanCache"] = request.CleanCache
	}

	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeNumber)) {
		body["NodeNumber"] = request.NodeNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.WordNumber)) {
		body["WordNumber"] = request.WordNumber
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceContent)) {
		body["referenceContent"] = request.ReferenceContent
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunDocBrainmap"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunDocBrainmapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读脑图生成接口
//
// @param request - RunDocBrainmapRequest
//
// @return RunDocBrainmapResponse
func (client *Client) RunDocBrainmap(request *RunDocBrainmapRequest) (_result *RunDocBrainmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunDocBrainmapResponse{}
	_body, _err := client.RunDocBrainmapWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读文档导读接口
//
// @param request - RunDocIntroductionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunDocIntroductionResponse
func (client *Client) RunDocIntroductionWithOptions(request *RunDocIntroductionRequest, runtime *util.RuntimeOptions) (_result *RunDocIntroductionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CleanCache)) {
		body["CleanCache"] = request.CleanCache
	}

	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.IntroductionPrompt)) {
		body["IntroductionPrompt"] = request.IntroductionPrompt
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPointPrompt)) {
		body["KeyPointPrompt"] = request.KeyPointPrompt
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.SummaryPrompt)) {
		body["SummaryPrompt"] = request.SummaryPrompt
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceContent)) {
		body["referenceContent"] = request.ReferenceContent
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunDocIntroduction"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunDocIntroductionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读文档导读接口
//
// @param request - RunDocIntroductionRequest
//
// @return RunDocIntroductionResponse
func (client *Client) RunDocIntroduction(request *RunDocIntroductionRequest) (_result *RunDocIntroductionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunDocIntroductionResponse{}
	_body, _err := client.RunDocIntroductionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读问答接口
//
// @param tmpReq - RunDocQaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunDocQaResponse
func (client *Client) RunDocQaWithOptions(tmpReq *RunDocQaRequest, runtime *util.RuntimeOptions) (_result *RunDocQaResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunDocQaShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CategoryIds)) {
		request.CategoryIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CategoryIds, tea.String("CategoryIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ConversationContexts)) {
		request.ConversationContextsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ConversationContexts, tea.String("ConversationContexts"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.DocIds)) {
		request.DocIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DocIds, tea.String("DocIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryIdsShrink)) {
		body["CategoryIds"] = request.CategoryIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConversationContextsShrink)) {
		body["ConversationContexts"] = request.ConversationContextsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DocIdsShrink)) {
		body["DocIds"] = request.DocIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceContent)) {
		body["ReferenceContent"] = request.ReferenceContent
	}

	if !tea.BoolValue(util.IsUnset(request.SearchSource)) {
		body["SearchSource"] = request.SearchSource
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunDocQa"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunDocQaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读问答接口
//
// @param request - RunDocQaRequest
//
// @return RunDocQaResponse
func (client *Client) RunDocQa(request *RunDocQaRequest) (_result *RunDocQaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunDocQaResponse{}
	_body, _err := client.RunDocQaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文档智能卡片接口
//
// @param request - RunDocSmartCardRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunDocSmartCardResponse
func (client *Client) RunDocSmartCardWithOptions(request *RunDocSmartCardRequest, runtime *util.RuntimeOptions) (_result *RunDocSmartCardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunDocSmartCard"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunDocSmartCardResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文档智能卡片接口
//
// @param request - RunDocSmartCardRequest
//
// @return RunDocSmartCardResponse
func (client *Client) RunDocSmartCard(request *RunDocSmartCardRequest) (_result *RunDocSmartCardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunDocSmartCardResponse{}
	_body, _err := client.RunDocSmartCardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读文档总结摘要接口
//
// @param request - RunDocSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunDocSummaryResponse
func (client *Client) RunDocSummaryWithOptions(request *RunDocSummaryRequest, runtime *util.RuntimeOptions) (_result *RunDocSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CleanCache)) {
		body["CleanCache"] = request.CleanCache
	}

	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.RecommendContent)) {
		body["RecommendContent"] = request.RecommendContent
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunDocSummary"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunDocSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读文档总结摘要接口
//
// @param request - RunDocSummaryRequest
//
// @return RunDocSummaryResponse
func (client *Client) RunDocSummary(request *RunDocSummaryRequest) (_result *RunDocSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunDocSummaryResponse{}
	_body, _err := client.RunDocSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读文档翻译接口
//
// @param request - RunDocTranslationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunDocTranslationResponse
func (client *Client) RunDocTranslationWithOptions(request *RunDocTranslationRequest, runtime *util.RuntimeOptions) (_result *RunDocTranslationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CleanCache)) {
		body["CleanCache"] = request.CleanCache
	}

	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.RecommendContent)) {
		body["RecommendContent"] = request.RecommendContent
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TransType)) {
		body["TransType"] = request.TransType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunDocTranslation"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunDocTranslationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读文档翻译接口
//
// @param request - RunDocTranslationRequest
//
// @return RunDocTranslationResponse
func (client *Client) RunDocTranslation(request *RunDocTranslationRequest) (_result *RunDocTranslationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunDocTranslationResponse{}
	_body, _err := client.RunDocTranslationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文档改写
//
// @param request - RunDocWashingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunDocWashingResponse
func (client *Client) RunDocWashingWithOptions(request *RunDocWashingRequest, runtime *util.RuntimeOptions) (_result *RunDocWashingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceContent)) {
		body["ReferenceContent"] = request.ReferenceContent
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	if !tea.BoolValue(util.IsUnset(request.WordNumber)) {
		body["WordNumber"] = request.WordNumber
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.WritingTypeName)) {
		body["WritingTypeName"] = request.WritingTypeName
	}

	if !tea.BoolValue(util.IsUnset(request.WritingTypeRefDoc)) {
		body["WritingTypeRefDoc"] = request.WritingTypeRefDoc
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunDocWashing"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunDocWashingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文档改写
//
// @param request - RunDocWashingRequest
//
// @return RunDocWashingResponse
func (client *Client) RunDocWashing(request *RunDocWashingRequest) (_result *RunDocWashingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunDocWashingResponse{}
	_body, _err := client.RunDocWashingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 内容扩写
//
// @param request - RunExpandContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunExpandContentResponse
func (client *Client) RunExpandContentWithOptions(request *RunExpandContentRequest, runtime *util.RuntimeOptions) (_result *RunExpandContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunExpandContent"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunExpandContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 内容扩写
//
// @param request - RunExpandContentRequest
//
// @return RunExpandContentResponse
func (client *Client) RunExpandContent(request *RunExpandContentRequest) (_result *RunExpandContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunExpandContentResponse{}
	_body, _err := client.RunExpandContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读猜你想问接口
//
// @param request - RunGenerateQuestionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunGenerateQuestionsResponse
func (client *Client) RunGenerateQuestionsWithOptions(request *RunGenerateQuestionsRequest, runtime *util.RuntimeOptions) (_result *RunGenerateQuestionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceContent)) {
		body["ReferenceContent"] = request.ReferenceContent
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunGenerateQuestions"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunGenerateQuestionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读猜你想问接口
//
// @param request - RunGenerateQuestionsRequest
//
// @return RunGenerateQuestionsResponse
func (client *Client) RunGenerateQuestions(request *RunGenerateQuestionsRequest) (_result *RunGenerateQuestionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunGenerateQuestionsResponse{}
	_body, _err := client.RunGenerateQuestionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读文档关键词抽取接口
//
// @param request - RunHotwordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunHotwordResponse
func (client *Client) RunHotwordWithOptions(request *RunHotwordRequest, runtime *util.RuntimeOptions) (_result *RunHotwordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		body["DocId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceContent)) {
		body["ReferenceContent"] = request.ReferenceContent
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunHotword"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunHotwordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读文档关键词抽取接口
//
// @param request - RunHotwordRequest
//
// @return RunHotwordResponse
func (client *Client) RunHotword(request *RunHotwordRequest) (_result *RunHotwordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunHotwordResponse{}
	_body, _err := client.RunHotwordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # AI妙笔-创作-抽取关键词
//
// @param tmpReq - RunKeywordsExtractionGenerationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunKeywordsExtractionGenerationResponse
func (client *Client) RunKeywordsExtractionGenerationWithOptions(tmpReq *RunKeywordsExtractionGenerationRequest, runtime *util.RuntimeOptions) (_result *RunKeywordsExtractionGenerationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunKeywordsExtractionGenerationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ReferenceData)) {
		request.ReferenceDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReferenceData, tea.String("ReferenceData"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ReferenceDataShrink)) {
		body["ReferenceData"] = request.ReferenceDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunKeywordsExtractionGeneration"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunKeywordsExtractionGenerationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # AI妙笔-创作-抽取关键词
//
// @param request - RunKeywordsExtractionGenerationRequest
//
// @return RunKeywordsExtractionGenerationResponse
func (client *Client) RunKeywordsExtractionGeneration(request *RunKeywordsExtractionGenerationRequest) (_result *RunKeywordsExtractionGenerationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunKeywordsExtractionGenerationResponse{}
	_body, _err := client.RunKeywordsExtractionGenerationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文档批量导读
//
// @param tmpReq - RunMultiDocIntroductionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunMultiDocIntroductionResponse
func (client *Client) RunMultiDocIntroductionWithOptions(tmpReq *RunMultiDocIntroductionRequest, runtime *util.RuntimeOptions) (_result *RunMultiDocIntroductionResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunMultiDocIntroductionShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DocIds)) {
		request.DocIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DocIds, tea.String("DocIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocIdsShrink)) {
		body["DocIds"] = request.DocIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPointPrompt)) {
		body["KeyPointPrompt"] = request.KeyPointPrompt
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.SummaryPrompt)) {
		body["SummaryPrompt"] = request.SummaryPrompt
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunMultiDocIntroduction"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunMultiDocIntroductionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文档批量导读
//
// @param request - RunMultiDocIntroductionRequest
//
// @return RunMultiDocIntroductionResponse
func (client *Client) RunMultiDocIntroduction(request *RunMultiDocIntroductionRequest) (_result *RunMultiDocIntroductionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunMultiDocIntroductionResponse{}
	_body, _err := client.RunMultiDocIntroductionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # AI妙搜-智能搜索生成
//
// @param tmpReq - RunSearchGenerationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunSearchGenerationResponse
func (client *Client) RunSearchGenerationWithOptions(tmpReq *RunSearchGenerationRequest, runtime *util.RuntimeOptions) (_result *RunSearchGenerationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunSearchGenerationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AgentContext)) {
		request.AgentContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AgentContext, tea.String("AgentContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ChatConfig)) {
		request.ChatConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ChatConfig, tea.String("ChatConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentContextShrink)) {
		body["AgentContext"] = request.AgentContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ChatConfigShrink)) {
		body["ChatConfig"] = request.ChatConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.OriginalSessionId)) {
		body["OriginalSessionId"] = request.OriginalSessionId
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunSearchGeneration"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunSearchGenerationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # AI妙搜-智能搜索生成
//
// @param request - RunSearchGenerationRequest
//
// @return RunSearchGenerationResponse
func (client *Client) RunSearchGeneration(request *RunSearchGenerationRequest) (_result *RunSearchGenerationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunSearchGenerationResponse{}
	_body, _err := client.RunSearchGenerationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙搜-文搜文
//
// @param tmpReq - RunSearchSimilarArticlesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunSearchSimilarArticlesResponse
func (client *Client) RunSearchSimilarArticlesWithOptions(tmpReq *RunSearchSimilarArticlesRequest, runtime *util.RuntimeOptions) (_result *RunSearchSimilarArticlesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunSearchSimilarArticlesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ChatConfig)) {
		request.ChatConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ChatConfig, tea.String("ChatConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChatConfigShrink)) {
		body["ChatConfig"] = request.ChatConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DocType)) {
		body["DocType"] = request.DocType
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		body["Url"] = request.Url
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunSearchSimilarArticles"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunSearchSimilarArticlesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙搜-文搜文
//
// @param request - RunSearchSimilarArticlesRequest
//
// @return RunSearchSimilarArticlesResponse
func (client *Client) RunSearchSimilarArticles(request *RunSearchSimilarArticlesRequest) (_result *RunSearchSimilarArticlesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunSearchSimilarArticlesResponse{}
	_body, _err := client.RunSearchSimilarArticlesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创作-分步骤写作
//
// @param tmpReq - RunStepByStepWritingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunStepByStepWritingResponse
func (client *Client) RunStepByStepWritingWithOptions(tmpReq *RunStepByStepWritingRequest, runtime *util.RuntimeOptions) (_result *RunStepByStepWritingResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunStepByStepWritingShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ReferenceData)) {
		request.ReferenceDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReferenceData, tea.String("ReferenceData"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.WritingConfig)) {
		request.WritingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.WritingConfig, tea.String("WritingConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OriginSessionId)) {
		body["OriginSessionId"] = request.OriginSessionId
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceDataShrink)) {
		body["ReferenceData"] = request.ReferenceDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.WritingConfigShrink)) {
		body["WritingConfig"] = request.WritingConfigShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunStepByStepWriting"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunStepByStepWritingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创作-分步骤写作
//
// @param request - RunStepByStepWritingRequest
//
// @return RunStepByStepWritingResponse
func (client *Client) RunStepByStepWriting(request *RunStepByStepWritingRequest) (_result *RunStepByStepWritingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunStepByStepWritingResponse{}
	_body, _err := client.RunStepByStepWritingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 内容特点分析
//
// @param tmpReq - RunStyleFeatureAnalysisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunStyleFeatureAnalysisResponse
func (client *Client) RunStyleFeatureAnalysisWithOptions(tmpReq *RunStyleFeatureAnalysisRequest, runtime *util.RuntimeOptions) (_result *RunStyleFeatureAnalysisResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunStyleFeatureAnalysisShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Contents)) {
		request.ContentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Contents, tea.String("Contents"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MaterialIds)) {
		request.MaterialIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MaterialIds, tea.String("MaterialIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContentsShrink)) {
		body["Contents"] = request.ContentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialIdsShrink)) {
		body["MaterialIds"] = request.MaterialIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunStyleFeatureAnalysis"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunStyleFeatureAnalysisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 内容特点分析
//
// @param request - RunStyleFeatureAnalysisRequest
//
// @return RunStyleFeatureAnalysisResponse
func (client *Client) RunStyleFeatureAnalysis(request *RunStyleFeatureAnalysisRequest) (_result *RunStyleFeatureAnalysisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunStyleFeatureAnalysisResponse{}
	_body, _err := client.RunStyleFeatureAnalysisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 内容摘要生成
//
// @param request - RunSummaryGenerateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunSummaryGenerateResponse
func (client *Client) RunSummaryGenerateWithOptions(request *RunSummaryGenerateRequest, runtime *util.RuntimeOptions) (_result *RunSummaryGenerateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunSummaryGenerate"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunSummaryGenerateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 内容摘要生成
//
// @param request - RunSummaryGenerateRequest
//
// @return RunSummaryGenerateResponse
func (client *Client) RunSummaryGenerate(request *RunSummaryGenerateRequest) (_result *RunSummaryGenerateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunSummaryGenerateResponse{}
	_body, _err := client.RunSummaryGenerateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创作-文本润色
//
// @param request - RunTextPolishingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunTextPolishingResponse
func (client *Client) RunTextPolishingWithOptions(request *RunTextPolishingRequest, runtime *util.RuntimeOptions) (_result *RunTextPolishingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunTextPolishing"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunTextPolishingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创作-文本润色
//
// @param request - RunTextPolishingRequest
//
// @return RunTextPolishingResponse
func (client *Client) RunTextPolishing(request *RunTextPolishingRequest) (_result *RunTextPolishingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunTextPolishingResponse{}
	_body, _err := client.RunTextPolishingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙笔：标题生成
//
// @param tmpReq - RunTitleGenerationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunTitleGenerationResponse
func (client *Client) RunTitleGenerationWithOptions(tmpReq *RunTitleGenerationRequest, runtime *util.RuntimeOptions) (_result *RunTitleGenerationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunTitleGenerationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DeduplicatedTitles)) {
		request.DeduplicatedTitlesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DeduplicatedTitles, tea.String("DeduplicatedTitles"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ReferenceData)) {
		request.ReferenceDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReferenceData, tea.String("ReferenceData"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeduplicatedTitlesShrink)) {
		body["DeduplicatedTitles"] = request.DeduplicatedTitlesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceDataShrink)) {
		body["ReferenceData"] = request.ReferenceDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TitleCount)) {
		body["TitleCount"] = request.TitleCount
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunTitleGeneration"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunTitleGenerationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙笔：标题生成
//
// @param request - RunTitleGenerationRequest
//
// @return RunTitleGenerationResponse
func (client *Client) RunTitleGeneration(request *RunTitleGenerationRequest) (_result *RunTitleGenerationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunTitleGenerationResponse{}
	_body, _err := client.RunTitleGenerationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # AI妙笔-创作-中英文翻译
//
// @param tmpReq - RunTranslateGenerationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunTranslateGenerationResponse
func (client *Client) RunTranslateGenerationWithOptions(tmpReq *RunTranslateGenerationRequest, runtime *util.RuntimeOptions) (_result *RunTranslateGenerationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunTranslateGenerationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ReferenceData)) {
		request.ReferenceDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReferenceData, tea.String("ReferenceData"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceDataShrink)) {
		body["ReferenceData"] = request.ReferenceDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunTranslateGeneration"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunTranslateGenerationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # AI妙笔-创作-中英文翻译
//
// @param request - RunTranslateGenerationRequest
//
// @return RunTranslateGenerationResponse
func (client *Client) RunTranslateGeneration(request *RunTranslateGenerationRequest) (_result *RunTranslateGenerationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunTranslateGenerationResponse{}
	_body, _err := client.RunTranslateGenerationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # AI妙笔-创作-文风改写
//
// @param tmpReq - RunWriteToneGenerationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunWriteToneGenerationResponse
func (client *Client) RunWriteToneGenerationWithOptions(tmpReq *RunWriteToneGenerationRequest, runtime *util.RuntimeOptions) (_result *RunWriteToneGenerationResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunWriteToneGenerationShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ReferenceData)) {
		request.ReferenceDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReferenceData, tea.String("ReferenceData"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceDataShrink)) {
		body["ReferenceData"] = request.ReferenceDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunWriteToneGeneration"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunWriteToneGenerationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # AI妙笔-创作-文风改写
//
// @param request - RunWriteToneGenerationRequest
//
// @return RunWriteToneGenerationResponse
func (client *Client) RunWriteToneGeneration(request *RunWriteToneGenerationRequest) (_result *RunWriteToneGenerationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunWriteToneGenerationResponse{}
	_body, _err := client.RunWriteToneGenerationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 直接写作
//
// @param tmpReq - RunWritingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunWritingResponse
func (client *Client) RunWritingWithOptions(tmpReq *RunWritingRequest, runtime *util.RuntimeOptions) (_result *RunWritingResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunWritingShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ReferenceData)) {
		request.ReferenceDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReferenceData, tea.String("ReferenceData"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.WritingConfig)) {
		request.WritingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.WritingConfig, tea.String("WritingConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OriginSessionId)) {
		body["OriginSessionId"] = request.OriginSessionId
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceDataShrink)) {
		body["ReferenceData"] = request.ReferenceDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	if !tea.BoolValue(util.IsUnset(request.WritingConfigShrink)) {
		body["WritingConfig"] = request.WritingConfigShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunWriting"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunWritingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 直接写作
//
// @param request - RunWritingRequest
//
// @return RunWritingResponse
func (client *Client) RunWriting(request *RunWritingRequest) (_result *RunWritingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunWritingResponse{}
	_body, _err := client.RunWritingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 保存自定义文本
//
// @param request - SaveCustomTextRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveCustomTextResponse
func (client *Client) SaveCustomTextWithOptions(request *SaveCustomTextRequest, runtime *util.RuntimeOptions) (_result *SaveCustomTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		body["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveCustomText"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveCustomTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 保存自定义文本
//
// @param request - SaveCustomTextRequest
//
// @return SaveCustomTextResponse
func (client *Client) SaveCustomText(request *SaveCustomTextRequest) (_result *SaveCustomTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveCustomTextResponse{}
	_body, _err := client.SaveCustomTextWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 保存用户的信源配置
//
// @param tmpReq - SaveDataSourceOrderConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveDataSourceOrderConfigResponse
func (client *Client) SaveDataSourceOrderConfigWithOptions(tmpReq *SaveDataSourceOrderConfigRequest, runtime *util.RuntimeOptions) (_result *SaveDataSourceOrderConfigResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SaveDataSourceOrderConfigShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.UserConfigDataSourceList)) {
		request.UserConfigDataSourceListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserConfigDataSourceList, tea.String("UserConfigDataSourceList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.UserConfigDataSourceListShrink)) {
		body["UserConfigDataSourceList"] = request.UserConfigDataSourceListShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveDataSourceOrderConfig"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveDataSourceOrderConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 保存用户的信源配置
//
// @param request - SaveDataSourceOrderConfigRequest
//
// @return SaveDataSourceOrderConfigResponse
func (client *Client) SaveDataSourceOrderConfig(request *SaveDataSourceOrderConfigRequest) (_result *SaveDataSourceOrderConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveDataSourceOrderConfigResponse{}
	_body, _err := client.SaveDataSourceOrderConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 保存素材
//
// @param tmpReq - SaveMaterialDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveMaterialDocumentResponse
func (client *Client) SaveMaterialDocumentWithOptions(tmpReq *SaveMaterialDocumentRequest, runtime *util.RuntimeOptions) (_result *SaveMaterialDocumentResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SaveMaterialDocumentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DocKeywords)) {
		request.DocKeywordsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DocKeywords, tea.String("DocKeywords"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Author)) {
		body["Author"] = request.Author
	}

	if !tea.BoolValue(util.IsUnset(request.BothSavePrivateAndShare)) {
		body["BothSavePrivateAndShare"] = request.BothSavePrivateAndShare
	}

	if !tea.BoolValue(util.IsUnset(request.DocKeywordsShrink)) {
		body["DocKeywords"] = request.DocKeywordsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DocType)) {
		body["DocType"] = request.DocType
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalUrl)) {
		body["ExternalUrl"] = request.ExternalUrl
	}

	if !tea.BoolValue(util.IsUnset(request.HtmlContent)) {
		body["HtmlContent"] = request.HtmlContent
	}

	if !tea.BoolValue(util.IsUnset(request.PubTime)) {
		body["PubTime"] = request.PubTime
	}

	if !tea.BoolValue(util.IsUnset(request.ShareAttr)) {
		body["ShareAttr"] = request.ShareAttr
	}

	if !tea.BoolValue(util.IsUnset(request.SrcFrom)) {
		body["SrcFrom"] = request.SrcFrom
	}

	if !tea.BoolValue(util.IsUnset(request.Summary)) {
		body["Summary"] = request.Summary
	}

	if !tea.BoolValue(util.IsUnset(request.TextContent)) {
		body["TextContent"] = request.TextContent
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		body["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveMaterialDocument"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveMaterialDocumentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 保存素材
//
// @param request - SaveMaterialDocumentRequest
//
// @return SaveMaterialDocumentResponse
func (client *Client) SaveMaterialDocument(request *SaveMaterialDocumentRequest) (_result *SaveMaterialDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveMaterialDocumentResponse{}
	_body, _err := client.SaveMaterialDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 保存自定义文体
//
// @param tmpReq - SaveStyleLearningResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveStyleLearningResultResponse
func (client *Client) SaveStyleLearningResultWithOptions(tmpReq *SaveStyleLearningResultRequest, runtime *util.RuntimeOptions) (_result *SaveStyleLearningResultResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SaveStyleLearningResultShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CustomTextIdList)) {
		request.CustomTextIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CustomTextIdList, tea.String("CustomTextIdList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MaterialIdList)) {
		request.MaterialIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MaterialIdList, tea.String("MaterialIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		body["AgentKey"] = request.AgentKey
	}

	if !tea.BoolValue(util.IsUnset(request.AigcResult)) {
		body["AigcResult"] = request.AigcResult
	}

	if !tea.BoolValue(util.IsUnset(request.CustomTextIdListShrink)) {
		body["CustomTextIdList"] = request.CustomTextIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialIdListShrink)) {
		body["MaterialIdList"] = request.MaterialIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RewriteResult)) {
		body["RewriteResult"] = request.RewriteResult
	}

	if !tea.BoolValue(util.IsUnset(request.StyleName)) {
		body["StyleName"] = request.StyleName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveStyleLearningResult"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveStyleLearningResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 保存自定义文体
//
// @param request - SaveStyleLearningResultRequest
//
// @return SaveStyleLearningResultResponse
func (client *Client) SaveStyleLearningResult(request *SaveStyleLearningResultRequest) (_result *SaveStyleLearningResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveStyleLearningResultResponse{}
	_body, _err := client.SaveStyleLearningResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 搜索数据集文档
//
// @param request - SearchDatasetDocumentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchDatasetDocumentsResponse
func (client *Client) SearchDatasetDocumentsWithOptions(request *SearchDatasetDocumentsRequest, runtime *util.RuntimeOptions) (_result *SearchDatasetDocumentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		body["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.Extend1)) {
		body["Extend1"] = request.Extend1
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeContent)) {
		body["IncludeContent"] = request.IncludeContent
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchDatasetDocuments"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchDatasetDocumentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 搜索数据集文档
//
// @param request - SearchDatasetDocumentsRequest
//
// @return SearchDatasetDocumentsResponse
func (client *Client) SearchDatasetDocuments(request *SearchDatasetDocumentsRequest) (_result *SearchDatasetDocumentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchDatasetDocumentsResponse{}
	_body, _err := client.SearchDatasetDocumentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新闻检索
//
// @param tmpReq - SearchNewsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchNewsResponse
func (client *Client) SearchNewsWithOptions(tmpReq *SearchNewsRequest, runtime *util.RuntimeOptions) (_result *SearchNewsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SearchNewsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SearchSources)) {
		request.SearchSourcesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SearchSources, tea.String("SearchSources"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilterNotNull)) {
		body["FilterNotNull"] = request.FilterNotNull
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeContent)) {
		body["IncludeContent"] = request.IncludeContent
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		body["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		body["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.SearchSourcesShrink)) {
		body["SearchSources"] = request.SearchSourcesShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchNews"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchNewsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新闻检索
//
// @param request - SearchNewsRequest
//
// @return SearchNewsResponse
func (client *Client) SearchNews(request *SearchNewsRequest) (_result *SearchNewsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchNewsResponse{}
	_body, _err := client.SearchNewsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交异步任务
//
// @param request - SubmitAsyncTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitAsyncTaskResponse
func (client *Client) SubmitAsyncTaskWithOptions(request *SubmitAsyncTaskRequest, runtime *util.RuntimeOptions) (_result *SubmitAsyncTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskCode)) {
		body["TaskCode"] = request.TaskCode
	}

	if !tea.BoolValue(util.IsUnset(request.TaskExecuteTime)) {
		body["TaskExecuteTime"] = request.TaskExecuteTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskParam)) {
		body["TaskParam"] = request.TaskParam
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAsyncTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAsyncTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交异步任务
//
// @param request - SubmitAsyncTaskRequest
//
// @return SubmitAsyncTaskResponse
func (client *Client) SubmitAsyncTask(request *SubmitAsyncTaskRequest) (_result *SubmitAsyncTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAsyncTaskResponse{}
	_body, _err := client.SubmitAsyncTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交自定义播报单任务
//
// @param tmpReq - SubmitCustomHotTopicBroadcastJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitCustomHotTopicBroadcastJobResponse
func (client *Client) SubmitCustomHotTopicBroadcastJobWithOptions(tmpReq *SubmitCustomHotTopicBroadcastJobRequest, runtime *util.RuntimeOptions) (_result *SubmitCustomHotTopicBroadcastJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitCustomHotTopicBroadcastJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.HotTopicBroadcastConfig)) {
		request.HotTopicBroadcastConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.HotTopicBroadcastConfig, tea.String("HotTopicBroadcastConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Topics)) {
		request.TopicsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Topics, tea.String("Topics"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HotTopicBroadcastConfigShrink)) {
		body["HotTopicBroadcastConfig"] = request.HotTopicBroadcastConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.HotTopicVersion)) {
		body["HotTopicVersion"] = request.HotTopicVersion
	}

	if !tea.BoolValue(util.IsUnset(request.TopicsShrink)) {
		body["Topics"] = request.TopicsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitCustomHotTopicBroadcastJob"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitCustomHotTopicBroadcastJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交自定义播报单任务
//
// @param request - SubmitCustomHotTopicBroadcastJobRequest
//
// @return SubmitCustomHotTopicBroadcastJobResponse
func (client *Client) SubmitCustomHotTopicBroadcastJob(request *SubmitCustomHotTopicBroadcastJobRequest) (_result *SubmitCustomHotTopicBroadcastJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitCustomHotTopicBroadcastJobResponse{}
	_body, _err := client.SubmitCustomHotTopicBroadcastJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交自定义热点选题视角分析任务
//
// @param tmpReq - SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse
func (client *Client) SubmitCustomTopicSelectionPerspectiveAnalysisTaskWithOptions(tmpReq *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest, runtime *util.RuntimeOptions) (_result *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitCustomTopicSelectionPerspectiveAnalysisTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Documents)) {
		request.DocumentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Documents, tea.String("Documents"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocumentsShrink)) {
		body["Documents"] = request.DocumentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitCustomTopicSelectionPerspectiveAnalysisTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交自定义热点选题视角分析任务
//
// @param request - SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest
//
// @return SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse
func (client *Client) SubmitCustomTopicSelectionPerspectiveAnalysisTask(request *SubmitCustomTopicSelectionPerspectiveAnalysisTaskRequest) (_result *SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitCustomTopicSelectionPerspectiveAnalysisTaskResponse{}
	_body, _err := client.SubmitCustomTopicSelectionPerspectiveAnalysisTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交文档聚合任务
//
// @param tmpReq - SubmitDocClusterTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitDocClusterTaskResponse
func (client *Client) SubmitDocClusterTaskWithOptions(tmpReq *SubmitDocClusterTaskRequest, runtime *util.RuntimeOptions) (_result *SubmitDocClusterTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitDocClusterTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Documents)) {
		request.DocumentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Documents, tea.String("Documents"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocumentsShrink)) {
		body["Documents"] = request.DocumentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SummaryLength)) {
		body["SummaryLength"] = request.SummaryLength
	}

	if !tea.BoolValue(util.IsUnset(request.TitleLength)) {
		body["TitleLength"] = request.TitleLength
	}

	if !tea.BoolValue(util.IsUnset(request.TopicCount)) {
		body["TopicCount"] = request.TopicCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitDocClusterTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitDocClusterTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交文档聚合任务
//
// @param request - SubmitDocClusterTaskRequest
//
// @return SubmitDocClusterTaskResponse
func (client *Client) SubmitDocClusterTask(request *SubmitDocClusterTaskRequest) (_result *SubmitDocClusterTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitDocClusterTaskResponse{}
	_body, _err := client.SubmitDocClusterTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交VOC异步任务
//
// @param tmpReq - SubmitEnterpriseVocAnalysisTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitEnterpriseVocAnalysisTaskResponse
func (client *Client) SubmitEnterpriseVocAnalysisTaskWithOptions(tmpReq *SubmitEnterpriseVocAnalysisTaskRequest, runtime *util.RuntimeOptions) (_result *SubmitEnterpriseVocAnalysisTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitEnterpriseVocAnalysisTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ContentTags)) {
		request.ContentTagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ContentTags, tea.String("ContentTags"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Contents)) {
		request.ContentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Contents, tea.String("Contents"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.FilterTags)) {
		request.FilterTagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FilterTags, tea.String("FilterTags"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiKey)) {
		body["ApiKey"] = request.ApiKey
	}

	if !tea.BoolValue(util.IsUnset(request.ContentTagsShrink)) {
		body["ContentTags"] = request.ContentTagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ContentsShrink)) {
		body["Contents"] = request.ContentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FileKey)) {
		body["FileKey"] = request.FileKey
	}

	if !tea.BoolValue(util.IsUnset(request.FilterTagsShrink)) {
		body["FilterTags"] = request.FilterTagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialType)) {
		body["MaterialType"] = request.MaterialType
	}

	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.PositiveSample)) {
		body["PositiveSample"] = request.PositiveSample
	}

	if !tea.BoolValue(util.IsUnset(request.PositiveSampleFileKey)) {
		body["PositiveSampleFileKey"] = request.PositiveSampleFileKey
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		body["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitEnterpriseVocAnalysisTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitEnterpriseVocAnalysisTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交VOC异步任务
//
// @param request - SubmitEnterpriseVocAnalysisTaskRequest
//
// @return SubmitEnterpriseVocAnalysisTaskResponse
func (client *Client) SubmitEnterpriseVocAnalysisTask(request *SubmitEnterpriseVocAnalysisTaskRequest) (_result *SubmitEnterpriseVocAnalysisTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitEnterpriseVocAnalysisTaskResponse{}
	_body, _err := client.SubmitEnterpriseVocAnalysisTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交一键成片剪辑任务
//
// @param tmpReq - SubmitSmartClipTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSmartClipTaskResponse
func (client *Client) SubmitSmartClipTaskWithOptions(tmpReq *SubmitSmartClipTaskRequest, runtime *util.RuntimeOptions) (_result *SubmitSmartClipTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSmartClipTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.EditingConfig)) {
		request.EditingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.EditingConfig, tea.String("EditingConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.InputConfig)) {
		request.InputConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InputConfig, tea.String("InputConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OutputConfig)) {
		request.OutputConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OutputConfig, tea.String("OutputConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EditingConfigShrink)) {
		body["EditingConfig"] = request.EditingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendParam)) {
		body["ExtendParam"] = request.ExtendParam
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfigShrink)) {
		body["InputConfig"] = request.InputConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfigShrink)) {
		body["OutputConfig"] = request.OutputConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSmartClipTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSmartClipTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交一键成片剪辑任务
//
// @param request - SubmitSmartClipTaskRequest
//
// @return SubmitSmartClipTaskResponse
func (client *Client) SubmitSmartClipTask(request *SubmitSmartClipTaskRequest) (_result *SubmitSmartClipTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSmartClipTaskResponse{}
	_body, _err := client.SubmitSmartClipTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交选题热点分析任务
//
// @param tmpReq - SubmitTopicSelectionPerspectiveAnalysisTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitTopicSelectionPerspectiveAnalysisTaskResponse
func (client *Client) SubmitTopicSelectionPerspectiveAnalysisTaskWithOptions(tmpReq *SubmitTopicSelectionPerspectiveAnalysisTaskRequest, runtime *util.RuntimeOptions) (_result *SubmitTopicSelectionPerspectiveAnalysisTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitTopicSelectionPerspectiveAnalysisTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Documents)) {
		request.DocumentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Documents, tea.String("Documents"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.PerspectiveTypes)) {
		request.PerspectiveTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PerspectiveTypes, tea.String("PerspectiveTypes"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocumentsShrink)) {
		body["Documents"] = request.DocumentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PerspectiveTypesShrink)) {
		body["PerspectiveTypes"] = request.PerspectiveTypesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Topic)) {
		body["Topic"] = request.Topic
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTopicSelectionPerspectiveAnalysisTask"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTopicSelectionPerspectiveAnalysisTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交选题热点分析任务
//
// @param request - SubmitTopicSelectionPerspectiveAnalysisTaskRequest
//
// @return SubmitTopicSelectionPerspectiveAnalysisTaskResponse
func (client *Client) SubmitTopicSelectionPerspectiveAnalysisTask(request *SubmitTopicSelectionPerspectiveAnalysisTaskRequest) (_result *SubmitTopicSelectionPerspectiveAnalysisTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTopicSelectionPerspectiveAnalysisTaskResponse{}
	_body, _err := client.SubmitTopicSelectionPerspectiveAnalysisTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新自定义文本
//
// @param request - UpdateCustomTextRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCustomTextResponse
func (client *Client) UpdateCustomTextWithOptions(request *UpdateCustomTextRequest, runtime *util.RuntimeOptions) (_result *UpdateCustomTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		body["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCustomText"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCustomTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新自定义文本
//
// @param request - UpdateCustomTextRequest
//
// @return UpdateCustomTextResponse
func (client *Client) UpdateCustomText(request *UpdateCustomTextRequest) (_result *UpdateCustomTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCustomTextResponse{}
	_body, _err := client.UpdateCustomTextWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 数据集管理-更新
//
// @param tmpReq - UpdateDatasetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDatasetResponse
func (client *Client) UpdateDatasetWithOptions(tmpReq *UpdateDatasetRequest, runtime *util.RuntimeOptions) (_result *UpdateDatasetResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateDatasetShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DatasetConfig)) {
		request.DatasetConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DatasetConfig, tea.String("DatasetConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetConfigShrink)) {
		body["DatasetConfig"] = request.DatasetConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetDescription)) {
		body["DatasetDescription"] = request.DatasetDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchDatasetEnable)) {
		body["SearchDatasetEnable"] = request.SearchDatasetEnable
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataset"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 数据集管理-更新
//
// @param request - UpdateDatasetRequest
//
// @return UpdateDatasetResponse
func (client *Client) UpdateDataset(request *UpdateDatasetRequest) (_result *UpdateDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDatasetResponse{}
	_body, _err := client.UpdateDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改数据集文档
//
// @param tmpReq - UpdateDatasetDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDatasetDocumentResponse
func (client *Client) UpdateDatasetDocumentWithOptions(tmpReq *UpdateDatasetDocumentRequest, runtime *util.RuntimeOptions) (_result *UpdateDatasetDocumentResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateDatasetDocumentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Document)) {
		request.DocumentShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Document, tea.String("Document"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		body["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		body["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.DocumentShrink)) {
		body["Document"] = request.DocumentShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDatasetDocument"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDatasetDocumentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改数据集文档
//
// @param request - UpdateDatasetDocumentRequest
//
// @return UpdateDatasetDocumentResponse
func (client *Client) UpdateDatasetDocument(request *UpdateDatasetDocumentRequest) (_result *UpdateDatasetDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDatasetDocumentResponse{}
	_body, _err := client.UpdateDatasetDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 文档管理-更新。
//
// @param tmpReq - UpdateGeneratedContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateGeneratedContentResponse
func (client *Client) UpdateGeneratedContentWithOptions(tmpReq *UpdateGeneratedContentRequest, runtime *util.RuntimeOptions) (_result *UpdateGeneratedContentResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateGeneratedContentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Keywords)) {
		request.KeywordsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Keywords, tea.String("Keywords"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.ContentText)) {
		body["ContentText"] = request.ContentText
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.KeywordsShrink)) {
		body["Keywords"] = request.KeywordsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Prompt)) {
		body["Prompt"] = request.Prompt
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateGeneratedContent"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateGeneratedContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 文档管理-更新。
//
// @param request - UpdateGeneratedContentRequest
//
// @return UpdateGeneratedContentResponse
func (client *Client) UpdateGeneratedContent(request *UpdateGeneratedContentRequest) (_result *UpdateGeneratedContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateGeneratedContentResponse{}
	_body, _err := client.UpdateGeneratedContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据ID更新素材
//
// @param tmpReq - UpdateMaterialDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMaterialDocumentResponse
func (client *Client) UpdateMaterialDocumentWithOptions(tmpReq *UpdateMaterialDocumentRequest, runtime *util.RuntimeOptions) (_result *UpdateMaterialDocumentResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMaterialDocumentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DocKeywords)) {
		request.DocKeywordsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DocKeywords, tea.String("DocKeywords"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentKey)) {
		query["AgentKey"] = request.AgentKey
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Author)) {
		body["Author"] = request.Author
	}

	if !tea.BoolValue(util.IsUnset(request.DocKeywordsShrink)) {
		body["DocKeywords"] = request.DocKeywordsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DocType)) {
		body["DocType"] = request.DocType
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalUrl)) {
		body["ExternalUrl"] = request.ExternalUrl
	}

	if !tea.BoolValue(util.IsUnset(request.HtmlContent)) {
		body["HtmlContent"] = request.HtmlContent
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PubTime)) {
		body["PubTime"] = request.PubTime
	}

	if !tea.BoolValue(util.IsUnset(request.ShareAttr)) {
		body["ShareAttr"] = request.ShareAttr
	}

	if !tea.BoolValue(util.IsUnset(request.SrcFrom)) {
		body["SrcFrom"] = request.SrcFrom
	}

	if !tea.BoolValue(util.IsUnset(request.Summary)) {
		body["Summary"] = request.Summary
	}

	if !tea.BoolValue(util.IsUnset(request.TextContent)) {
		body["TextContent"] = request.TextContent
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		body["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMaterialDocument"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMaterialDocumentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据ID更新素材
//
// @param request - UpdateMaterialDocumentRequest
//
// @return UpdateMaterialDocumentResponse
func (client *Client) UpdateMaterialDocument(request *UpdateMaterialDocumentRequest) (_result *UpdateMaterialDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMaterialDocumentResponse{}
	_body, _err := client.UpdateMaterialDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读上传书籍
//
// @param tmpReq - UploadBookRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadBookResponse
func (client *Client) UploadBookWithOptions(tmpReq *UploadBookRequest, runtime *util.RuntimeOptions) (_result *UploadBookResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UploadBookShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Docs)) {
		request.DocsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Docs, tea.String("Docs"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		body["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.DocsShrink)) {
		body["Docs"] = request.DocsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadBook"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadBookResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读上传书籍
//
// @param request - UploadBookRequest
//
// @return UploadBookResponse
func (client *Client) UploadBook(request *UploadBookRequest) (_result *UploadBookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadBookResponse{}
	_body, _err := client.UploadBookWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 妙读上传文档接口
//
// @param tmpReq - UploadDocRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadDocResponse
func (client *Client) UploadDocWithOptions(tmpReq *UploadDocRequest, runtime *util.RuntimeOptions) (_result *UploadDocResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UploadDocShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Docs)) {
		request.DocsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Docs, tea.String("Docs"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		body["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.DocsShrink)) {
		body["Docs"] = request.DocsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadDoc"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadDocResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 妙读上传文档接口
//
// @param request - UploadDocRequest
//
// @return UploadDocResponse
func (client *Client) UploadDoc(request *UploadDocRequest) (_result *UploadDocResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadDocResponse{}
	_body, _err := client.UploadDocWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 校验企业VOC上传模板
//
// @param request - ValidateUploadTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ValidateUploadTemplateResponse
func (client *Client) ValidateUploadTemplateWithOptions(request *ValidateUploadTemplateRequest, runtime *util.RuntimeOptions) (_result *ValidateUploadTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileKey)) {
		body["FileKey"] = request.FileKey
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		body["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		body["TemplateType"] = request.TemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ValidateUploadTemplate"),
		Version:     tea.String("2023-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ValidateUploadTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 校验企业VOC上传模板
//
// @param request - ValidateUploadTemplateRequest
//
// @return ValidateUploadTemplateResponse
func (client *Client) ValidateUploadTemplate(request *ValidateUploadTemplateRequest) (_result *ValidateUploadTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ValidateUploadTemplateResponse{}
	_body, _err := client.ValidateUploadTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
