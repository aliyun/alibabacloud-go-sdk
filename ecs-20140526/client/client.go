// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AcceptInquiredSystemEventRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EventId              *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
}

func (s AcceptInquiredSystemEventRequest) String() string {
	return tea.Prettify(s)
}

func (s AcceptInquiredSystemEventRequest) GoString() string {
	return s.String()
}

func (s *AcceptInquiredSystemEventRequest) SetOwnerId(v int64) *AcceptInquiredSystemEventRequest {
	s.OwnerId = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetResourceOwnerAccount(v string) *AcceptInquiredSystemEventRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetResourceOwnerId(v int64) *AcceptInquiredSystemEventRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetOwnerAccount(v string) *AcceptInquiredSystemEventRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetRegionId(v string) *AcceptInquiredSystemEventRequest {
	s.RegionId = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetEventId(v string) *AcceptInquiredSystemEventRequest {
	s.EventId = &v
	return s
}

type AcceptInquiredSystemEventResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AcceptInquiredSystemEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AcceptInquiredSystemEventResponseBody) GoString() string {
	return s.String()
}

func (s *AcceptInquiredSystemEventResponseBody) SetRequestId(v string) *AcceptInquiredSystemEventResponseBody {
	s.RequestId = &v
	return s
}

type AcceptInquiredSystemEventResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AcceptInquiredSystemEventResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AcceptInquiredSystemEventResponse) String() string {
	return tea.Prettify(s)
}

func (s AcceptInquiredSystemEventResponse) GoString() string {
	return s.String()
}

func (s *AcceptInquiredSystemEventResponse) SetHeaders(v map[string]*string) *AcceptInquiredSystemEventResponse {
	s.Headers = v
	return s
}

func (s *AcceptInquiredSystemEventResponse) SetBody(v *AcceptInquiredSystemEventResponseBody) *AcceptInquiredSystemEventResponse {
	s.Body = v
	return s
}

type ActivateRouterInterfaceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouterInterfaceId    *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty"`
}

func (s ActivateRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ActivateRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *ActivateRouterInterfaceRequest) SetOwnerId(v int64) *ActivateRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *ActivateRouterInterfaceRequest) SetResourceOwnerAccount(v string) *ActivateRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ActivateRouterInterfaceRequest) SetResourceOwnerId(v int64) *ActivateRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ActivateRouterInterfaceRequest) SetRegionId(v string) *ActivateRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *ActivateRouterInterfaceRequest) SetRouterInterfaceId(v string) *ActivateRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

type ActivateRouterInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ActivateRouterInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ActivateRouterInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *ActivateRouterInterfaceResponseBody) SetRequestId(v string) *ActivateRouterInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type ActivateRouterInterfaceResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ActivateRouterInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ActivateRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ActivateRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *ActivateRouterInterfaceResponse) SetHeaders(v map[string]*string) *ActivateRouterInterfaceResponse {
	s.Headers = v
	return s
}

func (s *ActivateRouterInterfaceResponse) SetBody(v *ActivateRouterInterfaceResponseBody) *ActivateRouterInterfaceResponse {
	s.Body = v
	return s
}

type AddBandwidthPackageIpsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BandwidthPackageId   *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty"`
	IpCount              *string `json:"IpCount,omitempty" xml:"IpCount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AddBandwidthPackageIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBandwidthPackageIpsRequest) GoString() string {
	return s.String()
}

func (s *AddBandwidthPackageIpsRequest) SetOwnerId(v int64) *AddBandwidthPackageIpsRequest {
	s.OwnerId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetResourceOwnerAccount(v string) *AddBandwidthPackageIpsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetResourceOwnerId(v int64) *AddBandwidthPackageIpsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetOwnerAccount(v string) *AddBandwidthPackageIpsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetRegionId(v string) *AddBandwidthPackageIpsRequest {
	s.RegionId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetBandwidthPackageId(v string) *AddBandwidthPackageIpsRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetIpCount(v string) *AddBandwidthPackageIpsRequest {
	s.IpCount = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetClientToken(v string) *AddBandwidthPackageIpsRequest {
	s.ClientToken = &v
	return s
}

type AddBandwidthPackageIpsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddBandwidthPackageIpsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddBandwidthPackageIpsResponseBody) GoString() string {
	return s.String()
}

func (s *AddBandwidthPackageIpsResponseBody) SetRequestId(v string) *AddBandwidthPackageIpsResponseBody {
	s.RequestId = &v
	return s
}

type AddBandwidthPackageIpsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddBandwidthPackageIpsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddBandwidthPackageIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBandwidthPackageIpsResponse) GoString() string {
	return s.String()
}

func (s *AddBandwidthPackageIpsResponse) SetHeaders(v map[string]*string) *AddBandwidthPackageIpsResponse {
	s.Headers = v
	return s
}

func (s *AddBandwidthPackageIpsResponse) SetBody(v *AddBandwidthPackageIpsResponseBody) *AddBandwidthPackageIpsResponse {
	s.Body = v
	return s
}

type AddTagsRequest struct {
	OwnerId              *int64               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string              `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64               `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType         *string              `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId           *string              `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	Tag                  []*AddTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s AddTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTagsRequest) GoString() string {
	return s.String()
}

func (s *AddTagsRequest) SetOwnerId(v int64) *AddTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *AddTagsRequest) SetResourceOwnerAccount(v string) *AddTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddTagsRequest) SetResourceOwnerId(v int64) *AddTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddTagsRequest) SetRegionId(v string) *AddTagsRequest {
	s.RegionId = &v
	return s
}

func (s *AddTagsRequest) SetResourceType(v string) *AddTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *AddTagsRequest) SetResourceId(v string) *AddTagsRequest {
	s.ResourceId = &v
	return s
}

func (s *AddTagsRequest) SetTag(v []*AddTagsRequestTag) *AddTagsRequest {
	s.Tag = v
	return s
}

type AddTagsRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s AddTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AddTagsRequestTag) GoString() string {
	return s.String()
}

func (s *AddTagsRequestTag) SetKey(v string) *AddTagsRequestTag {
	s.Key = &v
	return s
}

func (s *AddTagsRequestTag) SetValue(v string) *AddTagsRequestTag {
	s.Value = &v
	return s
}

type AddTagsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTagsResponseBody) GoString() string {
	return s.String()
}

func (s *AddTagsResponseBody) SetRequestId(v string) *AddTagsResponseBody {
	s.RequestId = &v
	return s
}

type AddTagsResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTagsResponse) GoString() string {
	return s.String()
}

func (s *AddTagsResponse) SetHeaders(v map[string]*string) *AddTagsResponse {
	s.Headers = v
	return s
}

func (s *AddTagsResponse) SetBody(v *AddTagsResponseBody) *AddTagsResponse {
	s.Body = v
	return s
}

type AllocateDedicatedHostsRequest struct {
	NetworkAttributes      *AllocateDedicatedHostsRequestNetworkAttributes `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	OwnerId                *int64                                          `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string                                         `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64                                          `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount           *string                                         `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId               *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Tag                    []*AllocateDedicatedHostsRequestTag             `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ResourceGroupId        *string                                         `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId                 *string                                         `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DedicatedHostName      *string                                         `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	DedicatedHostClusterId *string                                         `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostType      *string                                         `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	ActionOnMaintenance    *string                                         `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty"`
	Description            *string                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	AutoPlacement          *string                                         `json:"AutoPlacement,omitempty" xml:"AutoPlacement,omitempty"`
	CpuOverCommitRatio     *float32                                        `json:"CpuOverCommitRatio,omitempty" xml:"CpuOverCommitRatio,omitempty"`
	ChargeType             *string                                         `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Quantity               *int32                                          `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	Period                 *int32                                          `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit             *string                                         `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	AutoRenew              *bool                                           `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	AutoRenewPeriod        *int32                                          `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	AutoReleaseTime        *string                                         `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	ClientToken            *string                                         `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AllocateDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequest) SetNetworkAttributes(v *AllocateDedicatedHostsRequestNetworkAttributes) *AllocateDedicatedHostsRequest {
	s.NetworkAttributes = v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetOwnerId(v int64) *AllocateDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetResourceOwnerAccount(v string) *AllocateDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetResourceOwnerId(v int64) *AllocateDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetOwnerAccount(v string) *AllocateDedicatedHostsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetRegionId(v string) *AllocateDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetTag(v []*AllocateDedicatedHostsRequestTag) *AllocateDedicatedHostsRequest {
	s.Tag = v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetResourceGroupId(v string) *AllocateDedicatedHostsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetZoneId(v string) *AllocateDedicatedHostsRequest {
	s.ZoneId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDedicatedHostName(v string) *AllocateDedicatedHostsRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDedicatedHostClusterId(v string) *AllocateDedicatedHostsRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDedicatedHostType(v string) *AllocateDedicatedHostsRequest {
	s.DedicatedHostType = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetActionOnMaintenance(v string) *AllocateDedicatedHostsRequest {
	s.ActionOnMaintenance = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDescription(v string) *AllocateDedicatedHostsRequest {
	s.Description = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoPlacement(v string) *AllocateDedicatedHostsRequest {
	s.AutoPlacement = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetCpuOverCommitRatio(v float32) *AllocateDedicatedHostsRequest {
	s.CpuOverCommitRatio = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetChargeType(v string) *AllocateDedicatedHostsRequest {
	s.ChargeType = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetQuantity(v int32) *AllocateDedicatedHostsRequest {
	s.Quantity = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetPeriod(v int32) *AllocateDedicatedHostsRequest {
	s.Period = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetPeriodUnit(v string) *AllocateDedicatedHostsRequest {
	s.PeriodUnit = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoRenew(v bool) *AllocateDedicatedHostsRequest {
	s.AutoRenew = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoRenewPeriod(v int32) *AllocateDedicatedHostsRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoReleaseTime(v string) *AllocateDedicatedHostsRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetClientToken(v string) *AllocateDedicatedHostsRequest {
	s.ClientToken = &v
	return s
}

type AllocateDedicatedHostsRequestNetworkAttributes struct {
	SlbUdpTimeout *int32 `json:"SlbUdpTimeout,omitempty" xml:"SlbUdpTimeout,omitempty"`
	UdpTimeout    *int32 `json:"UdpTimeout,omitempty" xml:"UdpTimeout,omitempty"`
}

func (s AllocateDedicatedHostsRequestNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequestNetworkAttributes) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequestNetworkAttributes) SetSlbUdpTimeout(v int32) *AllocateDedicatedHostsRequestNetworkAttributes {
	s.SlbUdpTimeout = &v
	return s
}

func (s *AllocateDedicatedHostsRequestNetworkAttributes) SetUdpTimeout(v int32) *AllocateDedicatedHostsRequestNetworkAttributes {
	s.UdpTimeout = &v
	return s
}

type AllocateDedicatedHostsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s AllocateDedicatedHostsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequestTag) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequestTag) SetKey(v string) *AllocateDedicatedHostsRequestTag {
	s.Key = &v
	return s
}

func (s *AllocateDedicatedHostsRequestTag) SetValue(v string) *AllocateDedicatedHostsRequestTag {
	s.Value = &v
	return s
}

type AllocateDedicatedHostsResponseBody struct {
	RequestId           *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DedicatedHostIdSets []*string `json:"DedicatedHostIdSets,omitempty" xml:"DedicatedHostIdSets,omitempty" type:"Repeated"`
}

func (s AllocateDedicatedHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsResponseBody) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsResponseBody) SetRequestId(v string) *AllocateDedicatedHostsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AllocateDedicatedHostsResponseBody) SetDedicatedHostIdSets(v []*string) *AllocateDedicatedHostsResponseBody {
	s.DedicatedHostIdSets = v
	return s
}

type AllocateDedicatedHostsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AllocateDedicatedHostsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AllocateDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsResponse) SetHeaders(v map[string]*string) *AllocateDedicatedHostsResponse {
	s.Headers = v
	return s
}

func (s *AllocateDedicatedHostsResponse) SetBody(v *AllocateDedicatedHostsResponseBody) *AllocateDedicatedHostsResponse {
	s.Body = v
	return s
}

type AllocateEipAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Bandwidth            *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	ISP                  *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	InternetChargeType   *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	ActivityId           *int64  `json:"ActivityId,omitempty" xml:"ActivityId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s AllocateEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipAddressRequest) GoString() string {
	return s.String()
}

func (s *AllocateEipAddressRequest) SetOwnerId(v int64) *AllocateEipAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetResourceOwnerAccount(v string) *AllocateEipAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocateEipAddressRequest) SetResourceOwnerId(v int64) *AllocateEipAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetRegionId(v string) *AllocateEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetBandwidth(v string) *AllocateEipAddressRequest {
	s.Bandwidth = &v
	return s
}

func (s *AllocateEipAddressRequest) SetISP(v string) *AllocateEipAddressRequest {
	s.ISP = &v
	return s
}

func (s *AllocateEipAddressRequest) SetInternetChargeType(v string) *AllocateEipAddressRequest {
	s.InternetChargeType = &v
	return s
}

func (s *AllocateEipAddressRequest) SetActivityId(v int64) *AllocateEipAddressRequest {
	s.ActivityId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetOwnerAccount(v string) *AllocateEipAddressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AllocateEipAddressRequest) SetClientToken(v string) *AllocateEipAddressRequest {
	s.ClientToken = &v
	return s
}

type AllocateEipAddressResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	EipAddress   *string `json:"EipAddress,omitempty" xml:"EipAddress,omitempty"`
}

func (s AllocateEipAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipAddressResponseBody) GoString() string {
	return s.String()
}

func (s *AllocateEipAddressResponseBody) SetRequestId(v string) *AllocateEipAddressResponseBody {
	s.RequestId = &v
	return s
}

func (s *AllocateEipAddressResponseBody) SetAllocationId(v string) *AllocateEipAddressResponseBody {
	s.AllocationId = &v
	return s
}

func (s *AllocateEipAddressResponseBody) SetEipAddress(v string) *AllocateEipAddressResponseBody {
	s.EipAddress = &v
	return s
}

type AllocateEipAddressResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AllocateEipAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AllocateEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipAddressResponse) GoString() string {
	return s.String()
}

func (s *AllocateEipAddressResponse) SetHeaders(v map[string]*string) *AllocateEipAddressResponse {
	s.Headers = v
	return s
}

func (s *AllocateEipAddressResponse) SetBody(v *AllocateEipAddressResponseBody) *AllocateEipAddressResponse {
	s.Body = v
	return s
}

type AllocatePublicIpAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IpAddress            *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	VlanId               *string `json:"VlanId,omitempty" xml:"VlanId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AllocatePublicIpAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocatePublicIpAddressRequest) GoString() string {
	return s.String()
}

func (s *AllocatePublicIpAddressRequest) SetOwnerId(v int64) *AllocatePublicIpAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetResourceOwnerAccount(v string) *AllocatePublicIpAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetResourceOwnerId(v int64) *AllocatePublicIpAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetInstanceId(v string) *AllocatePublicIpAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetIpAddress(v string) *AllocatePublicIpAddressRequest {
	s.IpAddress = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetVlanId(v string) *AllocatePublicIpAddressRequest {
	s.VlanId = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetOwnerAccount(v string) *AllocatePublicIpAddressRequest {
	s.OwnerAccount = &v
	return s
}

type AllocatePublicIpAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	IpAddress *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
}

func (s AllocatePublicIpAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllocatePublicIpAddressResponseBody) GoString() string {
	return s.String()
}

func (s *AllocatePublicIpAddressResponseBody) SetRequestId(v string) *AllocatePublicIpAddressResponseBody {
	s.RequestId = &v
	return s
}

func (s *AllocatePublicIpAddressResponseBody) SetIpAddress(v string) *AllocatePublicIpAddressResponseBody {
	s.IpAddress = &v
	return s
}

type AllocatePublicIpAddressResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AllocatePublicIpAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AllocatePublicIpAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocatePublicIpAddressResponse) GoString() string {
	return s.String()
}

func (s *AllocatePublicIpAddressResponse) SetHeaders(v map[string]*string) *AllocatePublicIpAddressResponse {
	s.Headers = v
	return s
}

func (s *AllocatePublicIpAddressResponse) SetBody(v *AllocatePublicIpAddressResponseBody) *AllocatePublicIpAddressResponse {
	s.Body = v
	return s
}

type ApplyAutoSnapshotPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"regionId,omitempty" xml:"regionId,omitempty"`
	AutoSnapshotPolicyId *string `json:"autoSnapshotPolicyId,omitempty" xml:"autoSnapshotPolicyId,omitempty"`
	DiskIds              *string `json:"diskIds,omitempty" xml:"diskIds,omitempty"`
}

func (s ApplyAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *ApplyAutoSnapshotPolicyRequest) SetOwnerId(v int64) *ApplyAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *ApplyAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *ApplyAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetRegionId(v string) *ApplyAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetAutoSnapshotPolicyId(v string) *ApplyAutoSnapshotPolicyRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetDiskIds(v string) *ApplyAutoSnapshotPolicyRequest {
	s.DiskIds = &v
	return s
}

type ApplyAutoSnapshotPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ApplyAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyAutoSnapshotPolicyResponseBody) SetRequestId(v string) *ApplyAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ApplyAutoSnapshotPolicyResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ApplyAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *ApplyAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *ApplyAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *ApplyAutoSnapshotPolicyResponse) SetBody(v *ApplyAutoSnapshotPolicyResponseBody) *ApplyAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type AssignIpv6AddressesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfaceId   *string   `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	Ipv6AddressCount     *int32    `json:"Ipv6AddressCount,omitempty" xml:"Ipv6AddressCount,omitempty"`
	Ipv6Address          []*string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty" type:"Repeated"`
}

func (s AssignIpv6AddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignIpv6AddressesRequest) GoString() string {
	return s.String()
}

func (s *AssignIpv6AddressesRequest) SetOwnerId(v int64) *AssignIpv6AddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetResourceOwnerAccount(v string) *AssignIpv6AddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetResourceOwnerId(v int64) *AssignIpv6AddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetOwnerAccount(v string) *AssignIpv6AddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetRegionId(v string) *AssignIpv6AddressesRequest {
	s.RegionId = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetNetworkInterfaceId(v string) *AssignIpv6AddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetIpv6AddressCount(v int32) *AssignIpv6AddressesRequest {
	s.Ipv6AddressCount = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetIpv6Address(v []*string) *AssignIpv6AddressesRequest {
	s.Ipv6Address = v
	return s
}

type AssignIpv6AddressesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssignIpv6AddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssignIpv6AddressesResponseBody) GoString() string {
	return s.String()
}

func (s *AssignIpv6AddressesResponseBody) SetRequestId(v string) *AssignIpv6AddressesResponseBody {
	s.RequestId = &v
	return s
}

type AssignIpv6AddressesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AssignIpv6AddressesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssignIpv6AddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignIpv6AddressesResponse) GoString() string {
	return s.String()
}

func (s *AssignIpv6AddressesResponse) SetHeaders(v map[string]*string) *AssignIpv6AddressesResponse {
	s.Headers = v
	return s
}

func (s *AssignIpv6AddressesResponse) SetBody(v *AssignIpv6AddressesResponseBody) *AssignIpv6AddressesResponse {
	s.Body = v
	return s
}

type AssignPrivateIpAddressesRequest struct {
	OwnerId                        *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount           *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                   *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                       *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfaceId             *string   `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	SecondaryPrivateIpAddressCount *int32    `json:"SecondaryPrivateIpAddressCount,omitempty" xml:"SecondaryPrivateIpAddressCount,omitempty"`
	ClientToken                    *string   `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	PrivateIpAddress               []*string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
}

func (s AssignPrivateIpAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesRequest) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesRequest) SetOwnerId(v int64) *AssignPrivateIpAddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetResourceOwnerAccount(v string) *AssignPrivateIpAddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetResourceOwnerId(v int64) *AssignPrivateIpAddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetOwnerAccount(v string) *AssignPrivateIpAddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetRegionId(v string) *AssignPrivateIpAddressesRequest {
	s.RegionId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetNetworkInterfaceId(v string) *AssignPrivateIpAddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetSecondaryPrivateIpAddressCount(v int32) *AssignPrivateIpAddressesRequest {
	s.SecondaryPrivateIpAddressCount = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetClientToken(v string) *AssignPrivateIpAddressesRequest {
	s.ClientToken = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetPrivateIpAddress(v []*string) *AssignPrivateIpAddressesRequest {
	s.PrivateIpAddress = v
	return s
}

type AssignPrivateIpAddressesResponseBody struct {
	RequestId                     *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AssignedPrivateIpAddressesSet *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet `json:"AssignedPrivateIpAddressesSet,omitempty" xml:"AssignedPrivateIpAddressesSet,omitempty" type:"Struct"`
}

func (s AssignPrivateIpAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponseBody) SetRequestId(v string) *AssignPrivateIpAddressesResponseBody {
	s.RequestId = &v
	return s
}

func (s *AssignPrivateIpAddressesResponseBody) SetAssignedPrivateIpAddressesSet(v *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) *AssignPrivateIpAddressesResponseBody {
	s.AssignedPrivateIpAddressesSet = v
	return s
}

type AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet struct {
	NetworkInterfaceId *string   `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	PrivateIpSet       []*string `json:"PrivateIpSet,omitempty" xml:"PrivateIpSet,omitempty" type:"Repeated"`
}

func (s AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) SetNetworkInterfaceId(v string) *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) SetPrivateIpSet(v []*string) *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet {
	s.PrivateIpSet = v
	return s
}

type AssignPrivateIpAddressesResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AssignPrivateIpAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssignPrivateIpAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponse) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponse) SetHeaders(v map[string]*string) *AssignPrivateIpAddressesResponse {
	s.Headers = v
	return s
}

func (s *AssignPrivateIpAddressesResponse) SetBody(v *AssignPrivateIpAddressesResponseBody) *AssignPrivateIpAddressesResponse {
	s.Body = v
	return s
}

type AssociateEipAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId         *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s AssociateEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateEipAddressRequest) GoString() string {
	return s.String()
}

func (s *AssociateEipAddressRequest) SetOwnerId(v int64) *AssociateEipAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetResourceOwnerAccount(v string) *AssociateEipAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssociateEipAddressRequest) SetResourceOwnerId(v int64) *AssociateEipAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetRegionId(v string) *AssociateEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetAllocationId(v string) *AssociateEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetInstanceId(v string) *AssociateEipAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetOwnerAccount(v string) *AssociateEipAddressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssociateEipAddressRequest) SetInstanceType(v string) *AssociateEipAddressRequest {
	s.InstanceType = &v
	return s
}

type AssociateEipAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateEipAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateEipAddressResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateEipAddressResponseBody) SetRequestId(v string) *AssociateEipAddressResponseBody {
	s.RequestId = &v
	return s
}

type AssociateEipAddressResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AssociateEipAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssociateEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateEipAddressResponse) GoString() string {
	return s.String()
}

func (s *AssociateEipAddressResponse) SetHeaders(v map[string]*string) *AssociateEipAddressResponse {
	s.Headers = v
	return s
}

func (s *AssociateEipAddressResponse) SetBody(v *AssociateEipAddressResponseBody) *AssociateEipAddressResponse {
	s.Body = v
	return s
}

type AssociateHaVipRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	HaVipId              *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AssociateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipRequest) GoString() string {
	return s.String()
}

func (s *AssociateHaVipRequest) SetOwnerId(v int64) *AssociateHaVipRequest {
	s.OwnerId = &v
	return s
}

func (s *AssociateHaVipRequest) SetResourceOwnerAccount(v string) *AssociateHaVipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssociateHaVipRequest) SetResourceOwnerId(v int64) *AssociateHaVipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssociateHaVipRequest) SetOwnerAccount(v string) *AssociateHaVipRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssociateHaVipRequest) SetClientToken(v string) *AssociateHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *AssociateHaVipRequest) SetRegionId(v string) *AssociateHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateHaVipRequest) SetHaVipId(v string) *AssociateHaVipRequest {
	s.HaVipId = &v
	return s
}

func (s *AssociateHaVipRequest) SetInstanceId(v string) *AssociateHaVipRequest {
	s.InstanceId = &v
	return s
}

type AssociateHaVipResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateHaVipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateHaVipResponseBody) SetRequestId(v string) *AssociateHaVipResponseBody {
	s.RequestId = &v
	return s
}

type AssociateHaVipResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AssociateHaVipResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssociateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipResponse) GoString() string {
	return s.String()
}

func (s *AssociateHaVipResponse) SetHeaders(v map[string]*string) *AssociateHaVipResponse {
	s.Headers = v
	return s
}

func (s *AssociateHaVipResponse) SetBody(v *AssociateHaVipResponseBody) *AssociateHaVipResponse {
	s.Body = v
	return s
}

type AttachClassicLinkVpcRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s AttachClassicLinkVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachClassicLinkVpcRequest) GoString() string {
	return s.String()
}

func (s *AttachClassicLinkVpcRequest) SetOwnerId(v int64) *AttachClassicLinkVpcRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetResourceOwnerAccount(v string) *AttachClassicLinkVpcRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetResourceOwnerId(v int64) *AttachClassicLinkVpcRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetRegionId(v string) *AttachClassicLinkVpcRequest {
	s.RegionId = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetInstanceId(v string) *AttachClassicLinkVpcRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetVpcId(v string) *AttachClassicLinkVpcRequest {
	s.VpcId = &v
	return s
}

type AttachClassicLinkVpcResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachClassicLinkVpcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachClassicLinkVpcResponseBody) GoString() string {
	return s.String()
}

func (s *AttachClassicLinkVpcResponseBody) SetRequestId(v string) *AttachClassicLinkVpcResponseBody {
	s.RequestId = &v
	return s
}

type AttachClassicLinkVpcResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AttachClassicLinkVpcResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AttachClassicLinkVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachClassicLinkVpcResponse) GoString() string {
	return s.String()
}

func (s *AttachClassicLinkVpcResponse) SetHeaders(v map[string]*string) *AttachClassicLinkVpcResponse {
	s.Headers = v
	return s
}

func (s *AttachClassicLinkVpcResponse) SetBody(v *AttachClassicLinkVpcResponseBody) *AttachClassicLinkVpcResponse {
	s.Body = v
	return s
}

type AttachDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DiskId               *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	Device               *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DeleteWithInstance   *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	Bootable             *bool   `json:"Bootable,omitempty" xml:"Bootable,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	KeyPairName          *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AttachDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskRequest) GoString() string {
	return s.String()
}

func (s *AttachDiskRequest) SetOwnerId(v int64) *AttachDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachDiskRequest) SetResourceOwnerAccount(v string) *AttachDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachDiskRequest) SetResourceOwnerId(v int64) *AttachDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachDiskRequest) SetInstanceId(v string) *AttachDiskRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachDiskRequest) SetDiskId(v string) *AttachDiskRequest {
	s.DiskId = &v
	return s
}

func (s *AttachDiskRequest) SetDevice(v string) *AttachDiskRequest {
	s.Device = &v
	return s
}

func (s *AttachDiskRequest) SetDeleteWithInstance(v bool) *AttachDiskRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *AttachDiskRequest) SetBootable(v bool) *AttachDiskRequest {
	s.Bootable = &v
	return s
}

func (s *AttachDiskRequest) SetPassword(v string) *AttachDiskRequest {
	s.Password = &v
	return s
}

func (s *AttachDiskRequest) SetKeyPairName(v string) *AttachDiskRequest {
	s.KeyPairName = &v
	return s
}

func (s *AttachDiskRequest) SetOwnerAccount(v string) *AttachDiskRequest {
	s.OwnerAccount = &v
	return s
}

type AttachDiskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskResponseBody) GoString() string {
	return s.String()
}

func (s *AttachDiskResponseBody) SetRequestId(v string) *AttachDiskResponseBody {
	s.RequestId = &v
	return s
}

type AttachDiskResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AttachDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AttachDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskResponse) GoString() string {
	return s.String()
}

func (s *AttachDiskResponse) SetHeaders(v map[string]*string) *AttachDiskResponse {
	s.Headers = v
	return s
}

func (s *AttachDiskResponse) SetBody(v *AttachDiskResponseBody) *AttachDiskResponse {
	s.Body = v
	return s
}

type AttachInstanceRamRoleRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RamRoleName          *string `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s AttachInstanceRamRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceRamRoleRequest) GoString() string {
	return s.String()
}

func (s *AttachInstanceRamRoleRequest) SetOwnerId(v int64) *AttachInstanceRamRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetResourceOwnerAccount(v string) *AttachInstanceRamRoleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetResourceOwnerId(v int64) *AttachInstanceRamRoleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetRegionId(v string) *AttachInstanceRamRoleRequest {
	s.RegionId = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetRamRoleName(v string) *AttachInstanceRamRoleRequest {
	s.RamRoleName = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetInstanceIds(v string) *AttachInstanceRamRoleRequest {
	s.InstanceIds = &v
	return s
}

type AttachInstanceRamRoleResponseBody struct {
	AttachInstanceRamRoleResults []*AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults `json:"AttachInstanceRamRoleResults,omitempty" xml:"AttachInstanceRamRoleResults,omitempty" type:"Repeated"`
	TotalCount                   *int32                                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RamRoleName                  *string                                                          `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	RequestId                    *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	FailCount                    *int32                                                           `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
}

func (s AttachInstanceRamRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceRamRoleResponseBody) GoString() string {
	return s.String()
}

func (s *AttachInstanceRamRoleResponseBody) SetAttachInstanceRamRoleResults(v []*AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults) *AttachInstanceRamRoleResponseBody {
	s.AttachInstanceRamRoleResults = v
	return s
}

func (s *AttachInstanceRamRoleResponseBody) SetTotalCount(v int32) *AttachInstanceRamRoleResponseBody {
	s.TotalCount = &v
	return s
}

func (s *AttachInstanceRamRoleResponseBody) SetRamRoleName(v string) *AttachInstanceRamRoleResponseBody {
	s.RamRoleName = &v
	return s
}

func (s *AttachInstanceRamRoleResponseBody) SetRequestId(v string) *AttachInstanceRamRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachInstanceRamRoleResponseBody) SetFailCount(v int32) *AttachInstanceRamRoleResponseBody {
	s.FailCount = &v
	return s
}

type AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults struct {
	Success    *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code       *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults) GoString() string {
	return s.String()
}

func (s *AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults) SetSuccess(v bool) *AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults {
	s.Success = &v
	return s
}

func (s *AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults) SetCode(v string) *AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults {
	s.Code = &v
	return s
}

func (s *AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults) SetMessage(v string) *AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults {
	s.Message = &v
	return s
}

func (s *AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults) SetInstanceId(v string) *AttachInstanceRamRoleResponseBodyAttachInstanceRamRoleResults {
	s.InstanceId = &v
	return s
}

type AttachInstanceRamRoleResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AttachInstanceRamRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AttachInstanceRamRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceRamRoleResponse) GoString() string {
	return s.String()
}

func (s *AttachInstanceRamRoleResponse) SetHeaders(v map[string]*string) *AttachInstanceRamRoleResponse {
	s.Headers = v
	return s
}

func (s *AttachInstanceRamRoleResponse) SetBody(v *AttachInstanceRamRoleResponseBody) *AttachInstanceRamRoleResponse {
	s.Body = v
	return s
}

type AttachKeyPairRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	KeyPairName          *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s AttachKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachKeyPairRequest) GoString() string {
	return s.String()
}

func (s *AttachKeyPairRequest) SetOwnerId(v int64) *AttachKeyPairRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachKeyPairRequest) SetResourceOwnerAccount(v string) *AttachKeyPairRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachKeyPairRequest) SetResourceOwnerId(v int64) *AttachKeyPairRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachKeyPairRequest) SetRegionId(v string) *AttachKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *AttachKeyPairRequest) SetKeyPairName(v string) *AttachKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *AttachKeyPairRequest) SetInstanceIds(v string) *AttachKeyPairRequest {
	s.InstanceIds = &v
	return s
}

type AttachKeyPairResponseBody struct {
	KeyPairName *string                             `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	TotalCount  *string                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId   *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results     []*AttachKeyPairResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
	FailCount   *string                             `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
}

func (s AttachKeyPairResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *AttachKeyPairResponseBody) SetKeyPairName(v string) *AttachKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *AttachKeyPairResponseBody) SetTotalCount(v string) *AttachKeyPairResponseBody {
	s.TotalCount = &v
	return s
}

func (s *AttachKeyPairResponseBody) SetRequestId(v string) *AttachKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachKeyPairResponseBody) SetResults(v []*AttachKeyPairResponseBodyResults) *AttachKeyPairResponseBody {
	s.Results = v
	return s
}

func (s *AttachKeyPairResponseBody) SetFailCount(v string) *AttachKeyPairResponseBody {
	s.FailCount = &v
	return s
}

type AttachKeyPairResponseBodyResults struct {
	Success    *string `json:"Success,omitempty" xml:"Success,omitempty"`
	Code       *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AttachKeyPairResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s AttachKeyPairResponseBodyResults) GoString() string {
	return s.String()
}

func (s *AttachKeyPairResponseBodyResults) SetSuccess(v string) *AttachKeyPairResponseBodyResults {
	s.Success = &v
	return s
}

func (s *AttachKeyPairResponseBodyResults) SetCode(v string) *AttachKeyPairResponseBodyResults {
	s.Code = &v
	return s
}

func (s *AttachKeyPairResponseBodyResults) SetMessage(v string) *AttachKeyPairResponseBodyResults {
	s.Message = &v
	return s
}

func (s *AttachKeyPairResponseBodyResults) SetInstanceId(v string) *AttachKeyPairResponseBodyResults {
	s.InstanceId = &v
	return s
}

type AttachKeyPairResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AttachKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AttachKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachKeyPairResponse) GoString() string {
	return s.String()
}

func (s *AttachKeyPairResponse) SetHeaders(v map[string]*string) *AttachKeyPairResponse {
	s.Headers = v
	return s
}

func (s *AttachKeyPairResponse) SetBody(v *AttachKeyPairResponseBody) *AttachKeyPairResponse {
	s.Body = v
	return s
}

type AttachNetworkInterfaceRequest struct {
	OwnerId                          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount             *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                  *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                     *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfaceId               *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	InstanceId                       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TrunkNetworkInstanceId           *string `json:"TrunkNetworkInstanceId,omitempty" xml:"TrunkNetworkInstanceId,omitempty"`
	WaitForNetworkConfigurationReady *bool   `json:"WaitForNetworkConfigurationReady,omitempty" xml:"WaitForNetworkConfigurationReady,omitempty"`
}

func (s AttachNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *AttachNetworkInterfaceRequest) SetOwnerId(v int64) *AttachNetworkInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetResourceOwnerAccount(v string) *AttachNetworkInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetResourceOwnerId(v int64) *AttachNetworkInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetOwnerAccount(v string) *AttachNetworkInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetRegionId(v string) *AttachNetworkInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetNetworkInterfaceId(v string) *AttachNetworkInterfaceRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetInstanceId(v string) *AttachNetworkInterfaceRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetTrunkNetworkInstanceId(v string) *AttachNetworkInterfaceRequest {
	s.TrunkNetworkInstanceId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetWaitForNetworkConfigurationReady(v bool) *AttachNetworkInterfaceRequest {
	s.WaitForNetworkConfigurationReady = &v
	return s
}

type AttachNetworkInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachNetworkInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachNetworkInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *AttachNetworkInterfaceResponseBody) SetRequestId(v string) *AttachNetworkInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type AttachNetworkInterfaceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AttachNetworkInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AttachNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *AttachNetworkInterfaceResponse) SetHeaders(v map[string]*string) *AttachNetworkInterfaceResponse {
	s.Headers = v
	return s
}

func (s *AttachNetworkInterfaceResponse) SetBody(v *AttachNetworkInterfaceResponseBody) *AttachNetworkInterfaceResponse {
	s.Body = v
	return s
}

type AuthorizeSecurityGroupRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecurityGroupId         *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IpProtocol              *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	PortRange               *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	SourceGroupId           *string `json:"SourceGroupId,omitempty" xml:"SourceGroupId,omitempty"`
	SourceGroupOwnerId      *int64  `json:"SourceGroupOwnerId,omitempty" xml:"SourceGroupOwnerId,omitempty"`
	SourceGroupOwnerAccount *string `json:"SourceGroupOwnerAccount,omitempty" xml:"SourceGroupOwnerAccount,omitempty"`
	SourceCidrIp            *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	Ipv6SourceCidrIp        *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	SourcePortRange         *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	DestCidrIp              *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Ipv6DestCidrIp          *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	Policy                  *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority                *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NicType                 *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	ClientToken             *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s AuthorizeSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupRequest) SetOwnerId(v int64) *AuthorizeSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetResourceOwnerAccount(v string) *AuthorizeSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetResourceOwnerId(v int64) *AuthorizeSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetOwnerAccount(v string) *AuthorizeSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetRegionId(v string) *AuthorizeSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSecurityGroupId(v string) *AuthorizeSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetIpProtocol(v string) *AuthorizeSecurityGroupRequest {
	s.IpProtocol = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPortRange(v string) *AuthorizeSecurityGroupRequest {
	s.PortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceGroupId(v string) *AuthorizeSecurityGroupRequest {
	s.SourceGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceGroupOwnerId(v int64) *AuthorizeSecurityGroupRequest {
	s.SourceGroupOwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceGroupOwnerAccount(v string) *AuthorizeSecurityGroupRequest {
	s.SourceGroupOwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetIpv6SourceCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourcePortRange(v string) *AuthorizeSecurityGroupRequest {
	s.SourcePortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetDestCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetIpv6DestCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPolicy(v string) *AuthorizeSecurityGroupRequest {
	s.Policy = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPriority(v string) *AuthorizeSecurityGroupRequest {
	s.Priority = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetNicType(v string) *AuthorizeSecurityGroupRequest {
	s.NicType = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetClientToken(v string) *AuthorizeSecurityGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetDescription(v string) *AuthorizeSecurityGroupRequest {
	s.Description = &v
	return s
}

type AuthorizeSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupResponseBody) SetRequestId(v string) *AuthorizeSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeSecurityGroupResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AuthorizeSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupResponse) SetHeaders(v map[string]*string) *AuthorizeSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeSecurityGroupResponse) SetBody(v *AuthorizeSecurityGroupResponseBody) *AuthorizeSecurityGroupResponse {
	s.Body = v
	return s
}

type AuthorizeSecurityGroupEgressRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecurityGroupId       *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IpProtocol            *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	PortRange             *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	DestGroupId           *string `json:"DestGroupId,omitempty" xml:"DestGroupId,omitempty"`
	DestGroupOwnerId      *int64  `json:"DestGroupOwnerId,omitempty" xml:"DestGroupOwnerId,omitempty"`
	DestGroupOwnerAccount *string `json:"DestGroupOwnerAccount,omitempty" xml:"DestGroupOwnerAccount,omitempty"`
	DestCidrIp            *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Ipv6DestCidrIp        *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	SourceCidrIp          *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	Ipv6SourceCidrIp      *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	SourcePortRange       *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Policy                *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority              *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NicType               *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s AuthorizeSecurityGroupEgressRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressRequest) SetOwnerId(v int64) *AuthorizeSecurityGroupEgressRequest {
	s.OwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetResourceOwnerAccount(v string) *AuthorizeSecurityGroupEgressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetResourceOwnerId(v int64) *AuthorizeSecurityGroupEgressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetOwnerAccount(v string) *AuthorizeSecurityGroupEgressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetRegionId(v string) *AuthorizeSecurityGroupEgressRequest {
	s.RegionId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSecurityGroupId(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetIpProtocol(v string) *AuthorizeSecurityGroupEgressRequest {
	s.IpProtocol = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPortRange(v string) *AuthorizeSecurityGroupEgressRequest {
	s.PortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestGroupId(v string) *AuthorizeSecurityGroupEgressRequest {
	s.DestGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestGroupOwnerId(v int64) *AuthorizeSecurityGroupEgressRequest {
	s.DestGroupOwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestGroupOwnerAccount(v string) *AuthorizeSecurityGroupEgressRequest {
	s.DestGroupOwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetIpv6DestCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSourceCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetIpv6SourceCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSourcePortRange(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SourcePortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPolicy(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Policy = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPriority(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Priority = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetNicType(v string) *AuthorizeSecurityGroupEgressRequest {
	s.NicType = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetClientToken(v string) *AuthorizeSecurityGroupEgressRequest {
	s.ClientToken = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDescription(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Description = &v
	return s
}

type AuthorizeSecurityGroupEgressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeSecurityGroupEgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressResponseBody) SetRequestId(v string) *AuthorizeSecurityGroupEgressResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeSecurityGroupEgressResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AuthorizeSecurityGroupEgressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeSecurityGroupEgressResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressResponse) SetHeaders(v map[string]*string) *AuthorizeSecurityGroupEgressResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeSecurityGroupEgressResponse) SetBody(v *AuthorizeSecurityGroupEgressResponseBody) *AuthorizeSecurityGroupEgressResponse {
	s.Body = v
	return s
}

type CancelAutoSnapshotPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"regionId,omitempty" xml:"regionId,omitempty"`
	DiskIds              *string `json:"diskIds,omitempty" xml:"diskIds,omitempty"`
}

func (s CancelAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *CancelAutoSnapshotPolicyRequest) SetOwnerId(v int64) *CancelAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *CancelAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *CancelAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetRegionId(v string) *CancelAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetDiskIds(v string) *CancelAutoSnapshotPolicyRequest {
	s.DiskIds = &v
	return s
}

type CancelAutoSnapshotPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CancelAutoSnapshotPolicyResponseBody) SetRequestId(v string) *CancelAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type CancelAutoSnapshotPolicyResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *CancelAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *CancelAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *CancelAutoSnapshotPolicyResponse) SetBody(v *CancelAutoSnapshotPolicyResponseBody) *CancelAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type CancelCopyImageRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageId              *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CancelCopyImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelCopyImageRequest) GoString() string {
	return s.String()
}

func (s *CancelCopyImageRequest) SetOwnerId(v int64) *CancelCopyImageRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelCopyImageRequest) SetResourceOwnerAccount(v string) *CancelCopyImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelCopyImageRequest) SetResourceOwnerId(v int64) *CancelCopyImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelCopyImageRequest) SetRegionId(v string) *CancelCopyImageRequest {
	s.RegionId = &v
	return s
}

func (s *CancelCopyImageRequest) SetImageId(v string) *CancelCopyImageRequest {
	s.ImageId = &v
	return s
}

func (s *CancelCopyImageRequest) SetOwnerAccount(v string) *CancelCopyImageRequest {
	s.OwnerAccount = &v
	return s
}

type CancelCopyImageResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelCopyImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelCopyImageResponseBody) GoString() string {
	return s.String()
}

func (s *CancelCopyImageResponseBody) SetRequestId(v string) *CancelCopyImageResponseBody {
	s.RequestId = &v
	return s
}

type CancelCopyImageResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelCopyImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelCopyImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelCopyImageResponse) GoString() string {
	return s.String()
}

func (s *CancelCopyImageResponse) SetHeaders(v map[string]*string) *CancelCopyImageResponse {
	s.Headers = v
	return s
}

func (s *CancelCopyImageResponse) SetBody(v *CancelCopyImageResponseBody) *CancelCopyImageResponse {
	s.Body = v
	return s
}

type CancelPhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s CancelPhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelPhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *CancelPhysicalConnectionRequest) SetRegionId(v string) *CancelPhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetPhysicalConnectionId(v string) *CancelPhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetOwnerId(v int64) *CancelPhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetResourceOwnerAccount(v string) *CancelPhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetResourceOwnerId(v int64) *CancelPhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetClientToken(v string) *CancelPhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetOwnerAccount(v string) *CancelPhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetUserCidr(v string) *CancelPhysicalConnectionRequest {
	s.UserCidr = &v
	return s
}

type CancelPhysicalConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelPhysicalConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelPhysicalConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CancelPhysicalConnectionResponseBody) SetRequestId(v string) *CancelPhysicalConnectionResponseBody {
	s.RequestId = &v
	return s
}

type CancelPhysicalConnectionResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelPhysicalConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelPhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelPhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *CancelPhysicalConnectionResponse) SetHeaders(v map[string]*string) *CancelPhysicalConnectionResponse {
	s.Headers = v
	return s
}

func (s *CancelPhysicalConnectionResponse) SetBody(v *CancelPhysicalConnectionResponseBody) *CancelPhysicalConnectionResponse {
	s.Body = v
	return s
}

type CancelSimulatedSystemEventsRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EventId              []*string `json:"EventId,omitempty" xml:"EventId,omitempty" type:"Repeated"`
}

func (s CancelSimulatedSystemEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelSimulatedSystemEventsRequest) GoString() string {
	return s.String()
}

func (s *CancelSimulatedSystemEventsRequest) SetOwnerId(v int64) *CancelSimulatedSystemEventsRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetResourceOwnerAccount(v string) *CancelSimulatedSystemEventsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetResourceOwnerId(v int64) *CancelSimulatedSystemEventsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetOwnerAccount(v string) *CancelSimulatedSystemEventsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetRegionId(v string) *CancelSimulatedSystemEventsRequest {
	s.RegionId = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetEventId(v []*string) *CancelSimulatedSystemEventsRequest {
	s.EventId = v
	return s
}

type CancelSimulatedSystemEventsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelSimulatedSystemEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelSimulatedSystemEventsResponseBody) GoString() string {
	return s.String()
}

func (s *CancelSimulatedSystemEventsResponseBody) SetRequestId(v string) *CancelSimulatedSystemEventsResponseBody {
	s.RequestId = &v
	return s
}

type CancelSimulatedSystemEventsResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelSimulatedSystemEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelSimulatedSystemEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelSimulatedSystemEventsResponse) GoString() string {
	return s.String()
}

func (s *CancelSimulatedSystemEventsResponse) SetHeaders(v map[string]*string) *CancelSimulatedSystemEventsResponse {
	s.Headers = v
	return s
}

func (s *CancelSimulatedSystemEventsResponse) SetBody(v *CancelSimulatedSystemEventsResponseBody) *CancelSimulatedSystemEventsResponse {
	s.Body = v
	return s
}

type CancelTaskRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TaskId               *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CancelTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelTaskRequest) GoString() string {
	return s.String()
}

func (s *CancelTaskRequest) SetOwnerId(v int64) *CancelTaskRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelTaskRequest) SetResourceOwnerAccount(v string) *CancelTaskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelTaskRequest) SetResourceOwnerId(v int64) *CancelTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelTaskRequest) SetRegionId(v string) *CancelTaskRequest {
	s.RegionId = &v
	return s
}

func (s *CancelTaskRequest) SetTaskId(v string) *CancelTaskRequest {
	s.TaskId = &v
	return s
}

type CancelTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CancelTaskResponseBody) SetRequestId(v string) *CancelTaskResponseBody {
	s.RequestId = &v
	return s
}

type CancelTaskResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelTaskResponse) GoString() string {
	return s.String()
}

func (s *CancelTaskResponse) SetHeaders(v map[string]*string) *CancelTaskResponse {
	s.Headers = v
	return s
}

func (s *CancelTaskResponse) SetBody(v *CancelTaskResponseBody) *CancelTaskResponse {
	s.Body = v
	return s
}

type ConnectRouterInterfaceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouterInterfaceId    *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty"`
}

func (s ConnectRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ConnectRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *ConnectRouterInterfaceRequest) SetOwnerId(v int64) *ConnectRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *ConnectRouterInterfaceRequest) SetResourceOwnerAccount(v string) *ConnectRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ConnectRouterInterfaceRequest) SetResourceOwnerId(v int64) *ConnectRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ConnectRouterInterfaceRequest) SetRegionId(v string) *ConnectRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *ConnectRouterInterfaceRequest) SetRouterInterfaceId(v string) *ConnectRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

type ConnectRouterInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConnectRouterInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConnectRouterInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *ConnectRouterInterfaceResponseBody) SetRequestId(v string) *ConnectRouterInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type ConnectRouterInterfaceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ConnectRouterInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConnectRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ConnectRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *ConnectRouterInterfaceResponse) SetHeaders(v map[string]*string) *ConnectRouterInterfaceResponse {
	s.Headers = v
	return s
}

func (s *ConnectRouterInterfaceResponse) SetBody(v *ConnectRouterInterfaceResponseBody) *ConnectRouterInterfaceResponse {
	s.Body = v
	return s
}

type ConvertNatPublicIpToEipRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ConvertNatPublicIpToEipRequest) String() string {
	return tea.Prettify(s)
}

func (s ConvertNatPublicIpToEipRequest) GoString() string {
	return s.String()
}

func (s *ConvertNatPublicIpToEipRequest) SetOwnerId(v int64) *ConvertNatPublicIpToEipRequest {
	s.OwnerId = &v
	return s
}

func (s *ConvertNatPublicIpToEipRequest) SetResourceOwnerAccount(v string) *ConvertNatPublicIpToEipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ConvertNatPublicIpToEipRequest) SetResourceOwnerId(v int64) *ConvertNatPublicIpToEipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ConvertNatPublicIpToEipRequest) SetInstanceId(v string) *ConvertNatPublicIpToEipRequest {
	s.InstanceId = &v
	return s
}

func (s *ConvertNatPublicIpToEipRequest) SetRegionId(v string) *ConvertNatPublicIpToEipRequest {
	s.RegionId = &v
	return s
}

type ConvertNatPublicIpToEipResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConvertNatPublicIpToEipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConvertNatPublicIpToEipResponseBody) GoString() string {
	return s.String()
}

func (s *ConvertNatPublicIpToEipResponseBody) SetRequestId(v string) *ConvertNatPublicIpToEipResponseBody {
	s.RequestId = &v
	return s
}

type ConvertNatPublicIpToEipResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ConvertNatPublicIpToEipResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConvertNatPublicIpToEipResponse) String() string {
	return tea.Prettify(s)
}

func (s ConvertNatPublicIpToEipResponse) GoString() string {
	return s.String()
}

func (s *ConvertNatPublicIpToEipResponse) SetHeaders(v map[string]*string) *ConvertNatPublicIpToEipResponse {
	s.Headers = v
	return s
}

func (s *ConvertNatPublicIpToEipResponse) SetBody(v *ConvertNatPublicIpToEipResponseBody) *ConvertNatPublicIpToEipResponse {
	s.Body = v
	return s
}

type CopyImageRequest struct {
	OwnerId                *int64                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DestinationImageName   *string                `json:"DestinationImageName,omitempty" xml:"DestinationImageName,omitempty"`
	DestinationDescription *string                `json:"DestinationDescription,omitempty" xml:"DestinationDescription,omitempty"`
	ImageId                *string                `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	RegionId               *string                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DestinationRegionId    *string                `json:"DestinationRegionId,omitempty" xml:"DestinationRegionId,omitempty"`
	OwnerAccount           *string                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Encrypted              *bool                  `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	KMSKeyId               *string                `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	EncryptAlgorithm       *string                `json:"EncryptAlgorithm,omitempty" xml:"EncryptAlgorithm,omitempty"`
	ResourceGroupId        *string                `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                    []*CopyImageRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CopyImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyImageRequest) GoString() string {
	return s.String()
}

func (s *CopyImageRequest) SetOwnerId(v int64) *CopyImageRequest {
	s.OwnerId = &v
	return s
}

func (s *CopyImageRequest) SetResourceOwnerAccount(v string) *CopyImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CopyImageRequest) SetResourceOwnerId(v int64) *CopyImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CopyImageRequest) SetDestinationImageName(v string) *CopyImageRequest {
	s.DestinationImageName = &v
	return s
}

func (s *CopyImageRequest) SetDestinationDescription(v string) *CopyImageRequest {
	s.DestinationDescription = &v
	return s
}

func (s *CopyImageRequest) SetImageId(v string) *CopyImageRequest {
	s.ImageId = &v
	return s
}

func (s *CopyImageRequest) SetRegionId(v string) *CopyImageRequest {
	s.RegionId = &v
	return s
}

func (s *CopyImageRequest) SetDestinationRegionId(v string) *CopyImageRequest {
	s.DestinationRegionId = &v
	return s
}

func (s *CopyImageRequest) SetOwnerAccount(v string) *CopyImageRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CopyImageRequest) SetEncrypted(v bool) *CopyImageRequest {
	s.Encrypted = &v
	return s
}

func (s *CopyImageRequest) SetKMSKeyId(v string) *CopyImageRequest {
	s.KMSKeyId = &v
	return s
}

func (s *CopyImageRequest) SetEncryptAlgorithm(v string) *CopyImageRequest {
	s.EncryptAlgorithm = &v
	return s
}

func (s *CopyImageRequest) SetResourceGroupId(v string) *CopyImageRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CopyImageRequest) SetTag(v []*CopyImageRequestTag) *CopyImageRequest {
	s.Tag = v
	return s
}

type CopyImageRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CopyImageRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CopyImageRequestTag) GoString() string {
	return s.String()
}

func (s *CopyImageRequestTag) SetKey(v string) *CopyImageRequestTag {
	s.Key = &v
	return s
}

func (s *CopyImageRequestTag) SetValue(v string) *CopyImageRequestTag {
	s.Value = &v
	return s
}

type CopyImageResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ImageId   *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s CopyImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyImageResponseBody) GoString() string {
	return s.String()
}

func (s *CopyImageResponseBody) SetRequestId(v string) *CopyImageResponseBody {
	s.RequestId = &v
	return s
}

func (s *CopyImageResponseBody) SetImageId(v string) *CopyImageResponseBody {
	s.ImageId = &v
	return s
}

type CopyImageResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CopyImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyImageResponse) GoString() string {
	return s.String()
}

func (s *CopyImageResponse) SetHeaders(v map[string]*string) *CopyImageResponse {
	s.Headers = v
	return s
}

func (s *CopyImageResponse) SetBody(v *CopyImageResponseBody) *CopyImageResponse {
	s.Body = v
	return s
}

type CopySnapshotRequest struct {
	OwnerId                        *int64                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount           *string                   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                *int64                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceGroupId                *string                   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                            []*CopySnapshotRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	RegionId                       *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DestinationRegionId            *string                   `json:"DestinationRegionId,omitempty" xml:"DestinationRegionId,omitempty"`
	SnapshotId                     *string                   `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	DestinationSnapshotName        *string                   `json:"DestinationSnapshotName,omitempty" xml:"DestinationSnapshotName,omitempty"`
	DestinationSnapshotDescription *string                   `json:"DestinationSnapshotDescription,omitempty" xml:"DestinationSnapshotDescription,omitempty"`
	RetentionDays                  *int32                    `json:"RetentionDays,omitempty" xml:"RetentionDays,omitempty"`
}

func (s CopySnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotRequest) GoString() string {
	return s.String()
}

func (s *CopySnapshotRequest) SetOwnerId(v int64) *CopySnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *CopySnapshotRequest) SetResourceOwnerAccount(v string) *CopySnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CopySnapshotRequest) SetResourceOwnerId(v int64) *CopySnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CopySnapshotRequest) SetResourceGroupId(v string) *CopySnapshotRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CopySnapshotRequest) SetTag(v []*CopySnapshotRequestTag) *CopySnapshotRequest {
	s.Tag = v
	return s
}

func (s *CopySnapshotRequest) SetRegionId(v string) *CopySnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *CopySnapshotRequest) SetDestinationRegionId(v string) *CopySnapshotRequest {
	s.DestinationRegionId = &v
	return s
}

func (s *CopySnapshotRequest) SetSnapshotId(v string) *CopySnapshotRequest {
	s.SnapshotId = &v
	return s
}

func (s *CopySnapshotRequest) SetDestinationSnapshotName(v string) *CopySnapshotRequest {
	s.DestinationSnapshotName = &v
	return s
}

func (s *CopySnapshotRequest) SetDestinationSnapshotDescription(v string) *CopySnapshotRequest {
	s.DestinationSnapshotDescription = &v
	return s
}

func (s *CopySnapshotRequest) SetRetentionDays(v int32) *CopySnapshotRequest {
	s.RetentionDays = &v
	return s
}

type CopySnapshotRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CopySnapshotRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotRequestTag) GoString() string {
	return s.String()
}

func (s *CopySnapshotRequestTag) SetKey(v string) *CopySnapshotRequestTag {
	s.Key = &v
	return s
}

func (s *CopySnapshotRequestTag) SetValue(v string) *CopySnapshotRequestTag {
	s.Value = &v
	return s
}

type CopySnapshotResponseBody struct {
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CopySnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *CopySnapshotResponseBody) SetSnapshotId(v string) *CopySnapshotResponseBody {
	s.SnapshotId = &v
	return s
}

func (s *CopySnapshotResponseBody) SetRequestId(v string) *CopySnapshotResponseBody {
	s.RequestId = &v
	return s
}

type CopySnapshotResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CopySnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopySnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotResponse) GoString() string {
	return s.String()
}

func (s *CopySnapshotResponse) SetHeaders(v map[string]*string) *CopySnapshotResponse {
	s.Headers = v
	return s
}

func (s *CopySnapshotResponse) SetBody(v *CopySnapshotResponseBody) *CopySnapshotResponse {
	s.Body = v
	return s
}

type CreateAutoProvisioningGroupRequest struct {
	LaunchConfiguration              *CreateAutoProvisioningGroupRequestLaunchConfiguration    `json:"LaunchConfiguration,omitempty" xml:"LaunchConfiguration,omitempty" type:"Struct"`
	OwnerId                          *int64                                                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount             *string                                                   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                  *int64                                                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                     *string                                                   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                         *string                                                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId                  *string                                                   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	AutoProvisioningGroupName        *string                                                   `json:"AutoProvisioningGroupName,omitempty" xml:"AutoProvisioningGroupName,omitempty"`
	AutoProvisioningGroupType        *string                                                   `json:"AutoProvisioningGroupType,omitempty" xml:"AutoProvisioningGroupType,omitempty"`
	SpotAllocationStrategy           *string                                                   `json:"SpotAllocationStrategy,omitempty" xml:"SpotAllocationStrategy,omitempty"`
	SpotInstanceInterruptionBehavior *string                                                   `json:"SpotInstanceInterruptionBehavior,omitempty" xml:"SpotInstanceInterruptionBehavior,omitempty"`
	SpotInstancePoolsToUseCount      *int32                                                    `json:"SpotInstancePoolsToUseCount,omitempty" xml:"SpotInstancePoolsToUseCount,omitempty"`
	PayAsYouGoAllocationStrategy     *string                                                   `json:"PayAsYouGoAllocationStrategy,omitempty" xml:"PayAsYouGoAllocationStrategy,omitempty"`
	ExcessCapacityTerminationPolicy  *string                                                   `json:"ExcessCapacityTerminationPolicy,omitempty" xml:"ExcessCapacityTerminationPolicy,omitempty"`
	ValidFrom                        *string                                                   `json:"ValidFrom,omitempty" xml:"ValidFrom,omitempty"`
	ValidUntil                       *string                                                   `json:"ValidUntil,omitempty" xml:"ValidUntil,omitempty"`
	TerminateInstancesWithExpiration *bool                                                     `json:"TerminateInstancesWithExpiration,omitempty" xml:"TerminateInstancesWithExpiration,omitempty"`
	TerminateInstances               *bool                                                     `json:"TerminateInstances,omitempty" xml:"TerminateInstances,omitempty"`
	MaxSpotPrice                     *float32                                                  `json:"MaxSpotPrice,omitempty" xml:"MaxSpotPrice,omitempty"`
	TotalTargetCapacity              *string                                                   `json:"TotalTargetCapacity,omitempty" xml:"TotalTargetCapacity,omitempty"`
	PayAsYouGoTargetCapacity         *string                                                   `json:"PayAsYouGoTargetCapacity,omitempty" xml:"PayAsYouGoTargetCapacity,omitempty"`
	SpotTargetCapacity               *string                                                   `json:"SpotTargetCapacity,omitempty" xml:"SpotTargetCapacity,omitempty"`
	DefaultTargetCapacityType        *string                                                   `json:"DefaultTargetCapacityType,omitempty" xml:"DefaultTargetCapacityType,omitempty"`
	LaunchTemplateId                 *string                                                   `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	LaunchTemplateVersion            *string                                                   `json:"LaunchTemplateVersion,omitempty" xml:"LaunchTemplateVersion,omitempty"`
	Description                      *string                                                   `json:"Description,omitempty" xml:"Description,omitempty"`
	LaunchTemplateConfig             []*CreateAutoProvisioningGroupRequestLaunchTemplateConfig `json:"LaunchTemplateConfig,omitempty" xml:"LaunchTemplateConfig,omitempty" type:"Repeated"`
	SystemDiskConfig                 []*CreateAutoProvisioningGroupRequestSystemDiskConfig     `json:"SystemDiskConfig,omitempty" xml:"SystemDiskConfig,omitempty" type:"Repeated"`
	DataDiskConfig                   []*CreateAutoProvisioningGroupRequestDataDiskConfig       `json:"DataDiskConfig,omitempty" xml:"DataDiskConfig,omitempty" type:"Repeated"`
}

func (s CreateAutoProvisioningGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupRequest) SetLaunchConfiguration(v *CreateAutoProvisioningGroupRequestLaunchConfiguration) *CreateAutoProvisioningGroupRequest {
	s.LaunchConfiguration = v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetOwnerId(v int64) *CreateAutoProvisioningGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetResourceOwnerAccount(v string) *CreateAutoProvisioningGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetResourceOwnerId(v int64) *CreateAutoProvisioningGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetOwnerAccount(v string) *CreateAutoProvisioningGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetRegionId(v string) *CreateAutoProvisioningGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetResourceGroupId(v string) *CreateAutoProvisioningGroupRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetAutoProvisioningGroupName(v string) *CreateAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupName = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetAutoProvisioningGroupType(v string) *CreateAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupType = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetSpotAllocationStrategy(v string) *CreateAutoProvisioningGroupRequest {
	s.SpotAllocationStrategy = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetSpotInstanceInterruptionBehavior(v string) *CreateAutoProvisioningGroupRequest {
	s.SpotInstanceInterruptionBehavior = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetSpotInstancePoolsToUseCount(v int32) *CreateAutoProvisioningGroupRequest {
	s.SpotInstancePoolsToUseCount = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetPayAsYouGoAllocationStrategy(v string) *CreateAutoProvisioningGroupRequest {
	s.PayAsYouGoAllocationStrategy = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetExcessCapacityTerminationPolicy(v string) *CreateAutoProvisioningGroupRequest {
	s.ExcessCapacityTerminationPolicy = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetValidFrom(v string) *CreateAutoProvisioningGroupRequest {
	s.ValidFrom = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetValidUntil(v string) *CreateAutoProvisioningGroupRequest {
	s.ValidUntil = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetTerminateInstancesWithExpiration(v bool) *CreateAutoProvisioningGroupRequest {
	s.TerminateInstancesWithExpiration = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetTerminateInstances(v bool) *CreateAutoProvisioningGroupRequest {
	s.TerminateInstances = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetMaxSpotPrice(v float32) *CreateAutoProvisioningGroupRequest {
	s.MaxSpotPrice = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetTotalTargetCapacity(v string) *CreateAutoProvisioningGroupRequest {
	s.TotalTargetCapacity = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetPayAsYouGoTargetCapacity(v string) *CreateAutoProvisioningGroupRequest {
	s.PayAsYouGoTargetCapacity = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetSpotTargetCapacity(v string) *CreateAutoProvisioningGroupRequest {
	s.SpotTargetCapacity = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetDefaultTargetCapacityType(v string) *CreateAutoProvisioningGroupRequest {
	s.DefaultTargetCapacityType = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetLaunchTemplateId(v string) *CreateAutoProvisioningGroupRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetLaunchTemplateVersion(v string) *CreateAutoProvisioningGroupRequest {
	s.LaunchTemplateVersion = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetDescription(v string) *CreateAutoProvisioningGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetLaunchTemplateConfig(v []*CreateAutoProvisioningGroupRequestLaunchTemplateConfig) *CreateAutoProvisioningGroupRequest {
	s.LaunchTemplateConfig = v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetSystemDiskConfig(v []*CreateAutoProvisioningGroupRequestSystemDiskConfig) *CreateAutoProvisioningGroupRequest {
	s.SystemDiskConfig = v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetDataDiskConfig(v []*CreateAutoProvisioningGroupRequestDataDiskConfig) *CreateAutoProvisioningGroupRequest {
	s.DataDiskConfig = v
	return s
}

type CreateAutoProvisioningGroupRequestLaunchConfiguration struct {
	ImageId                     *string                                                          `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	SecurityGroupId             *string                                                          `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IoOptimized                 *string                                                          `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	InternetChargeType          *string                                                          `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InternetMaxBandwidthIn      *int32                                                           `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InternetMaxBandwidthOut     *int32                                                           `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	InstanceName                *string                                                          `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	HostName                    *string                                                          `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceDescription         *string                                                          `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	KeyPairName                 *string                                                          `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	RamRoleName                 *string                                                          `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	SecurityEnhancementStrategy *string                                                          `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
	UserData                    *string                                                          `json:"UserData,omitempty" xml:"UserData,omitempty"`
	SystemDiskCategory          *string                                                          `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	SystemDiskSize              *int32                                                           `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
	SystemDiskName              *string                                                          `json:"SystemDiskName,omitempty" xml:"SystemDiskName,omitempty"`
	SystemDiskDescription       *string                                                          `json:"SystemDiskDescription,omitempty" xml:"SystemDiskDescription,omitempty"`
	SystemDiskPerformanceLevel  *string                                                          `json:"SystemDiskPerformanceLevel,omitempty" xml:"SystemDiskPerformanceLevel,omitempty"`
	PasswordInherit             *bool                                                            `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	ResourceGroupId             *string                                                          `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	CreditSpecification         *string                                                          `json:"CreditSpecification,omitempty" xml:"CreditSpecification,omitempty"`
	DataDisk                    []*CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	Tag                         []*CreateAutoProvisioningGroupRequestLaunchConfigurationTag      `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateAutoProvisioningGroupRequestLaunchConfiguration) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupRequestLaunchConfiguration) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetImageId(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.ImageId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetSecurityGroupId(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetIoOptimized(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.IoOptimized = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetInternetChargeType(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.InternetChargeType = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetInternetMaxBandwidthIn(v int32) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetInternetMaxBandwidthOut(v int32) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetInstanceName(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.InstanceName = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetHostName(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.HostName = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetInstanceDescription(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.InstanceDescription = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetKeyPairName(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.KeyPairName = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetRamRoleName(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.RamRoleName = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetSecurityEnhancementStrategy(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetUserData(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.UserData = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetSystemDiskCategory(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.SystemDiskCategory = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetSystemDiskSize(v int32) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.SystemDiskSize = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetSystemDiskName(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.SystemDiskName = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetSystemDiskDescription(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.SystemDiskDescription = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetSystemDiskPerformanceLevel(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.SystemDiskPerformanceLevel = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetPasswordInherit(v bool) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.PasswordInherit = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetResourceGroupId(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetCreditSpecification(v string) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.CreditSpecification = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetDataDisk(v []*CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.DataDisk = v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfiguration) SetTag(v []*CreateAutoProvisioningGroupRequestLaunchConfigurationTag) *CreateAutoProvisioningGroupRequestLaunchConfiguration {
	s.Tag = v
	return s
}

type CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk struct {
	PerformanceLevel   *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	KmsKeyId           *string `json:"KmsKeyId,omitempty" xml:"KmsKeyId,omitempty"`
	SnapshotId         *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	Size               *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Device             *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskName           *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Category           *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	Encrypted          *bool   `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
}

func (s CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetPerformanceLevel(v string) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetDescription(v string) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.Description = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetKmsKeyId(v string) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.KmsKeyId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetSnapshotId(v string) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetSize(v int32) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.Size = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetDevice(v string) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.Device = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetDiskName(v string) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.DiskName = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetCategory(v string) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.Category = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetDeleteWithInstance(v bool) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk) SetEncrypted(v bool) *CreateAutoProvisioningGroupRequestLaunchConfigurationDataDisk {
	s.Encrypted = &v
	return s
}

type CreateAutoProvisioningGroupRequestLaunchConfigurationTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateAutoProvisioningGroupRequestLaunchConfigurationTag) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupRequestLaunchConfigurationTag) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationTag) SetKey(v string) *CreateAutoProvisioningGroupRequestLaunchConfigurationTag {
	s.Key = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchConfigurationTag) SetValue(v string) *CreateAutoProvisioningGroupRequestLaunchConfigurationTag {
	s.Value = &v
	return s
}

type CreateAutoProvisioningGroupRequestLaunchTemplateConfig struct {
	VSwitchId        *string  `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	MaxPrice         *float64 `json:"MaxPrice,omitempty" xml:"MaxPrice,omitempty"`
	Priority         *int32   `json:"Priority,omitempty" xml:"Priority,omitempty"`
	WeightedCapacity *float64 `json:"WeightedCapacity,omitempty" xml:"WeightedCapacity,omitempty"`
	InstanceType     *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s CreateAutoProvisioningGroupRequestLaunchTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupRequestLaunchTemplateConfig) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetVSwitchId(v string) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.VSwitchId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetMaxPrice(v float64) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.MaxPrice = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetPriority(v int32) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.Priority = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetWeightedCapacity(v float64) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.WeightedCapacity = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetInstanceType(v string) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.InstanceType = &v
	return s
}

type CreateAutoProvisioningGroupRequestSystemDiskConfig struct {
	DiskCategory *string `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
}

func (s CreateAutoProvisioningGroupRequestSystemDiskConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupRequestSystemDiskConfig) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupRequestSystemDiskConfig) SetDiskCategory(v string) *CreateAutoProvisioningGroupRequestSystemDiskConfig {
	s.DiskCategory = &v
	return s
}

type CreateAutoProvisioningGroupRequestDataDiskConfig struct {
	DiskCategory *string `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
}

func (s CreateAutoProvisioningGroupRequestDataDiskConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupRequestDataDiskConfig) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupRequestDataDiskConfig) SetDiskCategory(v string) *CreateAutoProvisioningGroupRequestDataDiskConfig {
	s.DiskCategory = &v
	return s
}

type CreateAutoProvisioningGroupResponseBody struct {
	RequestId               *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AutoProvisioningGroupId *string `json:"AutoProvisioningGroupId,omitempty" xml:"AutoProvisioningGroupId,omitempty"`
}

func (s CreateAutoProvisioningGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupResponseBody) SetRequestId(v string) *CreateAutoProvisioningGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAutoProvisioningGroupResponseBody) SetAutoProvisioningGroupId(v string) *CreateAutoProvisioningGroupResponseBody {
	s.AutoProvisioningGroupId = &v
	return s
}

type CreateAutoProvisioningGroupResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateAutoProvisioningGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateAutoProvisioningGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupResponse) SetHeaders(v map[string]*string) *CreateAutoProvisioningGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateAutoProvisioningGroupResponse) SetBody(v *CreateAutoProvisioningGroupResponseBody) *CreateAutoProvisioningGroupResponse {
	s.Body = v
	return s
}

type CreateAutoSnapshotPolicyRequest struct {
	OwnerId                      *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount         *string                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId              *int64                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                     *string                               `json:"regionId,omitempty" xml:"regionId,omitempty"`
	AutoSnapshotPolicyName       *string                               `json:"autoSnapshotPolicyName,omitempty" xml:"autoSnapshotPolicyName,omitempty"`
	TimePoints                   *string                               `json:"timePoints,omitempty" xml:"timePoints,omitempty"`
	RepeatWeekdays               *string                               `json:"repeatWeekdays,omitempty" xml:"repeatWeekdays,omitempty"`
	RetentionDays                *int32                                `json:"retentionDays,omitempty" xml:"retentionDays,omitempty"`
	EnableCrossRegionCopy        *bool                                 `json:"EnableCrossRegionCopy,omitempty" xml:"EnableCrossRegionCopy,omitempty"`
	TargetCopyRegions            *string                               `json:"TargetCopyRegions,omitempty" xml:"TargetCopyRegions,omitempty"`
	CopiedSnapshotsRetentionDays *int32                                `json:"CopiedSnapshotsRetentionDays,omitempty" xml:"CopiedSnapshotsRetentionDays,omitempty"`
	Tag                          []*CreateAutoSnapshotPolicyRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyRequest) SetOwnerId(v int64) *CreateAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *CreateAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *CreateAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetRegionId(v string) *CreateAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetAutoSnapshotPolicyName(v string) *CreateAutoSnapshotPolicyRequest {
	s.AutoSnapshotPolicyName = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetTimePoints(v string) *CreateAutoSnapshotPolicyRequest {
	s.TimePoints = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetRepeatWeekdays(v string) *CreateAutoSnapshotPolicyRequest {
	s.RepeatWeekdays = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetRetentionDays(v int32) *CreateAutoSnapshotPolicyRequest {
	s.RetentionDays = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetEnableCrossRegionCopy(v bool) *CreateAutoSnapshotPolicyRequest {
	s.EnableCrossRegionCopy = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetTargetCopyRegions(v string) *CreateAutoSnapshotPolicyRequest {
	s.TargetCopyRegions = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetCopiedSnapshotsRetentionDays(v int32) *CreateAutoSnapshotPolicyRequest {
	s.CopiedSnapshotsRetentionDays = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetTag(v []*CreateAutoSnapshotPolicyRequestTag) *CreateAutoSnapshotPolicyRequest {
	s.Tag = v
	return s
}

type CreateAutoSnapshotPolicyRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateAutoSnapshotPolicyRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyRequestTag) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyRequestTag) SetKey(v string) *CreateAutoSnapshotPolicyRequestTag {
	s.Key = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequestTag) SetValue(v string) *CreateAutoSnapshotPolicyRequestTag {
	s.Value = &v
	return s
}

type CreateAutoSnapshotPolicyResponseBody struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AutoSnapshotPolicyId *string `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
}

func (s CreateAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyResponseBody) SetRequestId(v string) *CreateAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyResponseBody) SetAutoSnapshotPolicyId(v string) *CreateAutoSnapshotPolicyResponseBody {
	s.AutoSnapshotPolicyId = &v
	return s
}

type CreateAutoSnapshotPolicyResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *CreateAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateAutoSnapshotPolicyResponse) SetBody(v *CreateAutoSnapshotPolicyResponseBody) *CreateAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type CreateCapacityReservationRequest struct {
	PrivatePoolOptions   *CreateCapacityReservationRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId              *int64                                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ChargeType           *string                                             `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Period               *int32                                              `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string                                             `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	ClientToken          *string                                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description          *string                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceAmount       *int32                                              `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceType         *string                                             `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	StartTime            *string                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EndTimeType          *string                                             `json:"EndTimeType,omitempty" xml:"EndTimeType,omitempty"`
	Platform             *string                                             `json:"Platform,omitempty" xml:"Platform,omitempty"`
	InstanceChargeType   *string                                             `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	PackageType          *string                                             `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	ResourceType         *string                                             `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	EfficientStatus      *int32                                              `json:"EfficientStatus,omitempty" xml:"EfficientStatus,omitempty"`
	TimeSlot             *string                                             `json:"TimeSlot,omitempty" xml:"TimeSlot,omitempty"`
	ZoneId               []*string                                           `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" type:"Repeated"`
}

func (s CreateCapacityReservationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCapacityReservationRequest) GoString() string {
	return s.String()
}

func (s *CreateCapacityReservationRequest) SetPrivatePoolOptions(v *CreateCapacityReservationRequestPrivatePoolOptions) *CreateCapacityReservationRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *CreateCapacityReservationRequest) SetOwnerId(v int64) *CreateCapacityReservationRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetResourceOwnerAccount(v string) *CreateCapacityReservationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetResourceOwnerId(v int64) *CreateCapacityReservationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetOwnerAccount(v string) *CreateCapacityReservationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetRegionId(v string) *CreateCapacityReservationRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetChargeType(v string) *CreateCapacityReservationRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetPeriod(v int32) *CreateCapacityReservationRequest {
	s.Period = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetPeriodUnit(v string) *CreateCapacityReservationRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetClientToken(v string) *CreateCapacityReservationRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetDescription(v string) *CreateCapacityReservationRequest {
	s.Description = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetInstanceAmount(v int32) *CreateCapacityReservationRequest {
	s.InstanceAmount = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetInstanceType(v string) *CreateCapacityReservationRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetStartTime(v string) *CreateCapacityReservationRequest {
	s.StartTime = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetEndTime(v string) *CreateCapacityReservationRequest {
	s.EndTime = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetEndTimeType(v string) *CreateCapacityReservationRequest {
	s.EndTimeType = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetPlatform(v string) *CreateCapacityReservationRequest {
	s.Platform = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetInstanceChargeType(v string) *CreateCapacityReservationRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetPackageType(v string) *CreateCapacityReservationRequest {
	s.PackageType = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetResourceType(v string) *CreateCapacityReservationRequest {
	s.ResourceType = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetEfficientStatus(v int32) *CreateCapacityReservationRequest {
	s.EfficientStatus = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetTimeSlot(v string) *CreateCapacityReservationRequest {
	s.TimeSlot = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetZoneId(v []*string) *CreateCapacityReservationRequest {
	s.ZoneId = v
	return s
}

type CreateCapacityReservationRequestPrivatePoolOptions struct {
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	MatchCriteria *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
}

func (s CreateCapacityReservationRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateCapacityReservationRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *CreateCapacityReservationRequestPrivatePoolOptions) SetName(v string) *CreateCapacityReservationRequestPrivatePoolOptions {
	s.Name = &v
	return s
}

func (s *CreateCapacityReservationRequestPrivatePoolOptions) SetMatchCriteria(v string) *CreateCapacityReservationRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

type CreateCapacityReservationResponseBody struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PrivatePoolOptionsId *string `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
}

func (s CreateCapacityReservationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCapacityReservationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCapacityReservationResponseBody) SetRequestId(v string) *CreateCapacityReservationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCapacityReservationResponseBody) SetPrivatePoolOptionsId(v string) *CreateCapacityReservationResponseBody {
	s.PrivatePoolOptionsId = &v
	return s
}

type CreateCapacityReservationResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateCapacityReservationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCapacityReservationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCapacityReservationResponse) GoString() string {
	return s.String()
}

func (s *CreateCapacityReservationResponse) SetHeaders(v map[string]*string) *CreateCapacityReservationResponse {
	s.Headers = v
	return s
}

func (s *CreateCapacityReservationResponse) SetBody(v *CreateCapacityReservationResponseBody) *CreateCapacityReservationResponse {
	s.Body = v
	return s
}

type CreateCommandRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
	CommandContent       *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	WorkingDir           *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
	Timeout              *int64  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	EnableParameter      *bool   `json:"EnableParameter,omitempty" xml:"EnableParameter,omitempty"`
}

func (s CreateCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCommandRequest) GoString() string {
	return s.String()
}

func (s *CreateCommandRequest) SetOwnerId(v int64) *CreateCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCommandRequest) SetResourceOwnerAccount(v string) *CreateCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateCommandRequest) SetResourceOwnerId(v int64) *CreateCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateCommandRequest) SetOwnerAccount(v string) *CreateCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateCommandRequest) SetRegionId(v string) *CreateCommandRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCommandRequest) SetName(v string) *CreateCommandRequest {
	s.Name = &v
	return s
}

func (s *CreateCommandRequest) SetDescription(v string) *CreateCommandRequest {
	s.Description = &v
	return s
}

func (s *CreateCommandRequest) SetType(v string) *CreateCommandRequest {
	s.Type = &v
	return s
}

func (s *CreateCommandRequest) SetCommandContent(v string) *CreateCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *CreateCommandRequest) SetWorkingDir(v string) *CreateCommandRequest {
	s.WorkingDir = &v
	return s
}

func (s *CreateCommandRequest) SetTimeout(v int64) *CreateCommandRequest {
	s.Timeout = &v
	return s
}

func (s *CreateCommandRequest) SetEnableParameter(v bool) *CreateCommandRequest {
	s.EnableParameter = &v
	return s
}

type CreateCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
}

func (s CreateCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCommandResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCommandResponseBody) SetRequestId(v string) *CreateCommandResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCommandResponseBody) SetCommandId(v string) *CreateCommandResponseBody {
	s.CommandId = &v
	return s
}

type CreateCommandResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCommandResponse) GoString() string {
	return s.String()
}

func (s *CreateCommandResponse) SetHeaders(v map[string]*string) *CreateCommandResponse {
	s.Headers = v
	return s
}

func (s *CreateCommandResponse) SetBody(v *CreateCommandResponseBody) *CreateCommandResponse {
	s.Body = v
	return s
}

type CreateDedicatedHostClusterRequest struct {
	OwnerId                  *int64                                  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount     *string                                 `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64                                  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount             *string                                 `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                 *string                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DryRun                   *bool                                   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	Tag                      []*CreateDedicatedHostClusterRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ResourceGroupId          *string                                 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId                   *string                                 `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DedicatedHostClusterName *string                                 `json:"DedicatedHostClusterName,omitempty" xml:"DedicatedHostClusterName,omitempty"`
	Description              *string                                 `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s CreateDedicatedHostClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostClusterRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostClusterRequest) SetOwnerId(v int64) *CreateDedicatedHostClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetResourceOwnerAccount(v string) *CreateDedicatedHostClusterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetResourceOwnerId(v int64) *CreateDedicatedHostClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetOwnerAccount(v string) *CreateDedicatedHostClusterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetRegionId(v string) *CreateDedicatedHostClusterRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetDryRun(v bool) *CreateDedicatedHostClusterRequest {
	s.DryRun = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetTag(v []*CreateDedicatedHostClusterRequestTag) *CreateDedicatedHostClusterRequest {
	s.Tag = v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetResourceGroupId(v string) *CreateDedicatedHostClusterRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetZoneId(v string) *CreateDedicatedHostClusterRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetDedicatedHostClusterName(v string) *CreateDedicatedHostClusterRequest {
	s.DedicatedHostClusterName = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetDescription(v string) *CreateDedicatedHostClusterRequest {
	s.Description = &v
	return s
}

type CreateDedicatedHostClusterRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDedicatedHostClusterRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostClusterRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostClusterRequestTag) SetKey(v string) *CreateDedicatedHostClusterRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDedicatedHostClusterRequestTag) SetValue(v string) *CreateDedicatedHostClusterRequestTag {
	s.Value = &v
	return s
}

type CreateDedicatedHostClusterResponseBody struct {
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
}

func (s CreateDedicatedHostClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostClusterResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostClusterResponseBody) SetRequestId(v string) *CreateDedicatedHostClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDedicatedHostClusterResponseBody) SetDedicatedHostClusterId(v string) *CreateDedicatedHostClusterResponseBody {
	s.DedicatedHostClusterId = &v
	return s
}

type CreateDedicatedHostClusterResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDedicatedHostClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDedicatedHostClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostClusterResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostClusterResponse) SetHeaders(v map[string]*string) *CreateDedicatedHostClusterResponse {
	s.Headers = v
	return s
}

func (s *CreateDedicatedHostClusterResponse) SetBody(v *CreateDedicatedHostClusterResponseBody) *CreateDedicatedHostClusterResponse {
	s.Body = v
	return s
}

type CreateDemandRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DemandName           *string `json:"DemandName,omitempty" xml:"DemandName,omitempty"`
	DemandDescription    *string `json:"DemandDescription,omitempty" xml:"DemandDescription,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Amount               *int32  `json:"Amount,omitempty" xml:"Amount,omitempty"`
	InstanceChargeType   *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s CreateDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDemandRequest) GoString() string {
	return s.String()
}

func (s *CreateDemandRequest) SetOwnerId(v int64) *CreateDemandRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDemandRequest) SetResourceOwnerAccount(v string) *CreateDemandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDemandRequest) SetResourceOwnerId(v int64) *CreateDemandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDemandRequest) SetOwnerAccount(v string) *CreateDemandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDemandRequest) SetClientToken(v string) *CreateDemandRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDemandRequest) SetRegionId(v string) *CreateDemandRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDemandRequest) SetZoneId(v string) *CreateDemandRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDemandRequest) SetDemandName(v string) *CreateDemandRequest {
	s.DemandName = &v
	return s
}

func (s *CreateDemandRequest) SetDemandDescription(v string) *CreateDemandRequest {
	s.DemandDescription = &v
	return s
}

func (s *CreateDemandRequest) SetInstanceType(v string) *CreateDemandRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateDemandRequest) SetAmount(v int32) *CreateDemandRequest {
	s.Amount = &v
	return s
}

func (s *CreateDemandRequest) SetInstanceChargeType(v string) *CreateDemandRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateDemandRequest) SetPeriod(v int32) *CreateDemandRequest {
	s.Period = &v
	return s
}

func (s *CreateDemandRequest) SetPeriodUnit(v string) *CreateDemandRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateDemandRequest) SetStartTime(v string) *CreateDemandRequest {
	s.StartTime = &v
	return s
}

func (s *CreateDemandRequest) SetEndTime(v string) *CreateDemandRequest {
	s.EndTime = &v
	return s
}

type CreateDemandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DemandId  *string `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
}

func (s CreateDemandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDemandResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDemandResponseBody) SetRequestId(v string) *CreateDemandResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDemandResponseBody) SetDemandId(v string) *CreateDemandResponseBody {
	s.DemandId = &v
	return s
}

type CreateDemandResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDemandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDemandResponse) GoString() string {
	return s.String()
}

func (s *CreateDemandResponse) SetHeaders(v map[string]*string) *CreateDemandResponse {
	s.Headers = v
	return s
}

func (s *CreateDemandResponse) SetBody(v *CreateDemandResponseBody) *CreateDemandResponse {
	s.Body = v
	return s
}

type CreateDeploymentSetRequest struct {
	OwnerId                          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount             *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                  *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OnUnableToRedeployFailedInstance *string `json:"OnUnableToRedeployFailedInstance,omitempty" xml:"OnUnableToRedeployFailedInstance,omitempty"`
	Description                      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken                      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DeploymentSetName                *string `json:"DeploymentSetName,omitempty" xml:"DeploymentSetName,omitempty"`
	Domain                           *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Granularity                      *string `json:"Granularity,omitempty" xml:"Granularity,omitempty"`
	Strategy                         *string `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	GroupCount                       *int64  `json:"GroupCount,omitempty" xml:"GroupCount,omitempty"`
	OwnerAccount                     *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CreateDeploymentSetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeploymentSetRequest) GoString() string {
	return s.String()
}

func (s *CreateDeploymentSetRequest) SetOwnerId(v int64) *CreateDeploymentSetRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetResourceOwnerAccount(v string) *CreateDeploymentSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetResourceOwnerId(v int64) *CreateDeploymentSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetRegionId(v string) *CreateDeploymentSetRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetOnUnableToRedeployFailedInstance(v string) *CreateDeploymentSetRequest {
	s.OnUnableToRedeployFailedInstance = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetDescription(v string) *CreateDeploymentSetRequest {
	s.Description = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetClientToken(v string) *CreateDeploymentSetRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetDeploymentSetName(v string) *CreateDeploymentSetRequest {
	s.DeploymentSetName = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetDomain(v string) *CreateDeploymentSetRequest {
	s.Domain = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetGranularity(v string) *CreateDeploymentSetRequest {
	s.Granularity = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetStrategy(v string) *CreateDeploymentSetRequest {
	s.Strategy = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetGroupCount(v int64) *CreateDeploymentSetRequest {
	s.GroupCount = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetOwnerAccount(v string) *CreateDeploymentSetRequest {
	s.OwnerAccount = &v
	return s
}

type CreateDeploymentSetResponseBody struct {
	DeploymentSetId *string `json:"DeploymentSetId,omitempty" xml:"DeploymentSetId,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDeploymentSetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDeploymentSetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDeploymentSetResponseBody) SetDeploymentSetId(v string) *CreateDeploymentSetResponseBody {
	s.DeploymentSetId = &v
	return s
}

func (s *CreateDeploymentSetResponseBody) SetRequestId(v string) *CreateDeploymentSetResponseBody {
	s.RequestId = &v
	return s
}

type CreateDeploymentSetResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDeploymentSetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDeploymentSetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeploymentSetResponse) GoString() string {
	return s.String()
}

func (s *CreateDeploymentSetResponse) SetHeaders(v map[string]*string) *CreateDeploymentSetResponse {
	s.Headers = v
	return s
}

func (s *CreateDeploymentSetResponse) SetBody(v *CreateDeploymentSetResponseBody) *CreateDeploymentSetResponse {
	s.Body = v
	return s
}

type CreateDiskRequest struct {
	OwnerId                   *int64                  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount      *string                 `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId           *int64                  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                  *string                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                    *string                 `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	SnapshotId                *string                 `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	DiskName                  *string                 `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Size                      *int32                  `json:"Size,omitempty" xml:"Size,omitempty"`
	DiskCategory              *string                 `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
	Description               *string                 `json:"Description,omitempty" xml:"Description,omitempty"`
	Encrypted                 *bool                   `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	ClientToken               *string                 `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount              *string                 `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceId                *string                 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ResourceGroupId           *string                 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	KMSKeyId                  *string                 `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	PerformanceLevel          *string                 `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	AdvancedFeatures          *string                 `json:"AdvancedFeatures,omitempty" xml:"AdvancedFeatures,omitempty"`
	StorageSetId              *string                 `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	EncryptAlgorithm          *string                 `json:"EncryptAlgorithm,omitempty" xml:"EncryptAlgorithm,omitempty"`
	StorageSetPartitionNumber *int32                  `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	Tag                       []*CreateDiskRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	Arn                       []*CreateDiskRequestArn `json:"Arn,omitempty" xml:"Arn,omitempty" type:"Repeated"`
}

func (s CreateDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskRequest) GoString() string {
	return s.String()
}

func (s *CreateDiskRequest) SetOwnerId(v int64) *CreateDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDiskRequest) SetResourceOwnerAccount(v string) *CreateDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDiskRequest) SetResourceOwnerId(v int64) *CreateDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDiskRequest) SetRegionId(v string) *CreateDiskRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDiskRequest) SetZoneId(v string) *CreateDiskRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDiskRequest) SetSnapshotId(v string) *CreateDiskRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateDiskRequest) SetDiskName(v string) *CreateDiskRequest {
	s.DiskName = &v
	return s
}

func (s *CreateDiskRequest) SetSize(v int32) *CreateDiskRequest {
	s.Size = &v
	return s
}

func (s *CreateDiskRequest) SetDiskCategory(v string) *CreateDiskRequest {
	s.DiskCategory = &v
	return s
}

func (s *CreateDiskRequest) SetDescription(v string) *CreateDiskRequest {
	s.Description = &v
	return s
}

func (s *CreateDiskRequest) SetEncrypted(v bool) *CreateDiskRequest {
	s.Encrypted = &v
	return s
}

func (s *CreateDiskRequest) SetClientToken(v string) *CreateDiskRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDiskRequest) SetOwnerAccount(v string) *CreateDiskRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDiskRequest) SetInstanceId(v string) *CreateDiskRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateDiskRequest) SetResourceGroupId(v string) *CreateDiskRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDiskRequest) SetKMSKeyId(v string) *CreateDiskRequest {
	s.KMSKeyId = &v
	return s
}

func (s *CreateDiskRequest) SetPerformanceLevel(v string) *CreateDiskRequest {
	s.PerformanceLevel = &v
	return s
}

func (s *CreateDiskRequest) SetAdvancedFeatures(v string) *CreateDiskRequest {
	s.AdvancedFeatures = &v
	return s
}

func (s *CreateDiskRequest) SetStorageSetId(v string) *CreateDiskRequest {
	s.StorageSetId = &v
	return s
}

func (s *CreateDiskRequest) SetEncryptAlgorithm(v string) *CreateDiskRequest {
	s.EncryptAlgorithm = &v
	return s
}

func (s *CreateDiskRequest) SetStorageSetPartitionNumber(v int32) *CreateDiskRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *CreateDiskRequest) SetTag(v []*CreateDiskRequestTag) *CreateDiskRequest {
	s.Tag = v
	return s
}

func (s *CreateDiskRequest) SetArn(v []*CreateDiskRequestArn) *CreateDiskRequest {
	s.Arn = v
	return s
}

type CreateDiskRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDiskRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDiskRequestTag) SetKey(v string) *CreateDiskRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDiskRequestTag) SetValue(v string) *CreateDiskRequestTag {
	s.Value = &v
	return s
}

type CreateDiskRequestArn struct {
	RoleType      *string `json:"RoleType,omitempty" xml:"RoleType,omitempty"`
	Rolearn       *string `json:"Rolearn,omitempty" xml:"Rolearn,omitempty"`
	AssumeRoleFor *int64  `json:"AssumeRoleFor,omitempty" xml:"AssumeRoleFor,omitempty"`
}

func (s CreateDiskRequestArn) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskRequestArn) GoString() string {
	return s.String()
}

func (s *CreateDiskRequestArn) SetRoleType(v string) *CreateDiskRequestArn {
	s.RoleType = &v
	return s
}

func (s *CreateDiskRequestArn) SetRolearn(v string) *CreateDiskRequestArn {
	s.Rolearn = &v
	return s
}

func (s *CreateDiskRequestArn) SetAssumeRoleFor(v int64) *CreateDiskRequestArn {
	s.AssumeRoleFor = &v
	return s
}

type CreateDiskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DiskId    *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
}

func (s CreateDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiskResponseBody) SetRequestId(v string) *CreateDiskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDiskResponseBody) SetDiskId(v string) *CreateDiskResponseBody {
	s.DiskId = &v
	return s
}

type CreateDiskResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskResponse) GoString() string {
	return s.String()
}

func (s *CreateDiskResponse) SetHeaders(v map[string]*string) *CreateDiskResponse {
	s.Headers = v
	return s
}

func (s *CreateDiskResponse) SetBody(v *CreateDiskResponseBody) *CreateDiskResponse {
	s.Body = v
	return s
}

type CreateElasticityAssuranceRequest struct {
	PrivatePoolOptions   *CreateElasticityAssuranceRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId              *int64                                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ChargeType           *string                                             `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Period               *int32                                              `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string                                             `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	ClientToken          *string                                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description          *string                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	AssuranceTimes       *string                                             `json:"AssuranceTimes,omitempty" xml:"AssuranceTimes,omitempty"`
	InstanceAmount       *int32                                              `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceCpuCoreCount *int32                                              `json:"InstanceCpuCoreCount,omitempty" xml:"InstanceCpuCoreCount,omitempty"`
	StartTime            *string                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	InstanceChargeType   *string                                             `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Platform             *string                                             `json:"Platform,omitempty" xml:"Platform,omitempty"`
	PackageType          *string                                             `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	ResourceType         *string                                             `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ZoneId               []*string                                           `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" type:"Repeated"`
	InstanceType         []*string                                           `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" type:"Repeated"`
}

func (s CreateElasticityAssuranceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateElasticityAssuranceRequest) GoString() string {
	return s.String()
}

func (s *CreateElasticityAssuranceRequest) SetPrivatePoolOptions(v *CreateElasticityAssuranceRequestPrivatePoolOptions) *CreateElasticityAssuranceRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetOwnerId(v int64) *CreateElasticityAssuranceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetResourceOwnerAccount(v string) *CreateElasticityAssuranceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetResourceOwnerId(v int64) *CreateElasticityAssuranceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetOwnerAccount(v string) *CreateElasticityAssuranceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetRegionId(v string) *CreateElasticityAssuranceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetChargeType(v string) *CreateElasticityAssuranceRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetPeriod(v int32) *CreateElasticityAssuranceRequest {
	s.Period = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetPeriodUnit(v string) *CreateElasticityAssuranceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetClientToken(v string) *CreateElasticityAssuranceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetDescription(v string) *CreateElasticityAssuranceRequest {
	s.Description = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetAssuranceTimes(v string) *CreateElasticityAssuranceRequest {
	s.AssuranceTimes = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetInstanceAmount(v int32) *CreateElasticityAssuranceRequest {
	s.InstanceAmount = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetInstanceCpuCoreCount(v int32) *CreateElasticityAssuranceRequest {
	s.InstanceCpuCoreCount = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetStartTime(v string) *CreateElasticityAssuranceRequest {
	s.StartTime = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetInstanceChargeType(v string) *CreateElasticityAssuranceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetPlatform(v string) *CreateElasticityAssuranceRequest {
	s.Platform = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetPackageType(v string) *CreateElasticityAssuranceRequest {
	s.PackageType = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetResourceType(v string) *CreateElasticityAssuranceRequest {
	s.ResourceType = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetZoneId(v []*string) *CreateElasticityAssuranceRequest {
	s.ZoneId = v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetInstanceType(v []*string) *CreateElasticityAssuranceRequest {
	s.InstanceType = v
	return s
}

type CreateElasticityAssuranceRequestPrivatePoolOptions struct {
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	MatchCriteria *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
}

func (s CreateElasticityAssuranceRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateElasticityAssuranceRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *CreateElasticityAssuranceRequestPrivatePoolOptions) SetName(v string) *CreateElasticityAssuranceRequestPrivatePoolOptions {
	s.Name = &v
	return s
}

func (s *CreateElasticityAssuranceRequestPrivatePoolOptions) SetMatchCriteria(v string) *CreateElasticityAssuranceRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

type CreateElasticityAssuranceResponseBody struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId              *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PrivatePoolOptionsId *string `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
}

func (s CreateElasticityAssuranceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateElasticityAssuranceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateElasticityAssuranceResponseBody) SetRequestId(v string) *CreateElasticityAssuranceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateElasticityAssuranceResponseBody) SetOrderId(v string) *CreateElasticityAssuranceResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateElasticityAssuranceResponseBody) SetPrivatePoolOptionsId(v string) *CreateElasticityAssuranceResponseBody {
	s.PrivatePoolOptionsId = &v
	return s
}

type CreateElasticityAssuranceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateElasticityAssuranceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateElasticityAssuranceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateElasticityAssuranceResponse) GoString() string {
	return s.String()
}

func (s *CreateElasticityAssuranceResponse) SetHeaders(v map[string]*string) *CreateElasticityAssuranceResponse {
	s.Headers = v
	return s
}

func (s *CreateElasticityAssuranceResponse) SetBody(v *CreateElasticityAssuranceResponseBody) *CreateElasticityAssuranceResponse {
	s.Body = v
	return s
}

type CreateForwardEntryRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ForwardTableId       *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty"`
	ExternalIp           *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort         *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	InternalIp           *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort         *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	IpProtocol           *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
}

func (s CreateForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryRequest) SetOwnerId(v int64) *CreateForwardEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetResourceOwnerAccount(v string) *CreateForwardEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateForwardEntryRequest) SetResourceOwnerId(v int64) *CreateForwardEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetOwnerAccount(v string) *CreateForwardEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateForwardEntryRequest) SetRegionId(v string) *CreateForwardEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetForwardTableId(v string) *CreateForwardEntryRequest {
	s.ForwardTableId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetExternalIp(v string) *CreateForwardEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetExternalPort(v string) *CreateForwardEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalIp(v string) *CreateForwardEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalPort(v string) *CreateForwardEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetIpProtocol(v string) *CreateForwardEntryRequest {
	s.IpProtocol = &v
	return s
}

type CreateForwardEntryResponseBody struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
}

func (s CreateForwardEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryResponseBody) SetRequestId(v string) *CreateForwardEntryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateForwardEntryResponseBody) SetForwardEntryId(v string) *CreateForwardEntryResponseBody {
	s.ForwardEntryId = &v
	return s
}

type CreateForwardEntryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateForwardEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryResponse) SetHeaders(v map[string]*string) *CreateForwardEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateForwardEntryResponse) SetBody(v *CreateForwardEntryResponseBody) *CreateForwardEntryResponse {
	s.Body = v
	return s
}

type CreateHaVipRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	IpAddress            *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s CreateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipRequest) GoString() string {
	return s.String()
}

func (s *CreateHaVipRequest) SetOwnerId(v int64) *CreateHaVipRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateHaVipRequest) SetResourceOwnerAccount(v string) *CreateHaVipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateHaVipRequest) SetResourceOwnerId(v int64) *CreateHaVipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateHaVipRequest) SetOwnerAccount(v string) *CreateHaVipRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateHaVipRequest) SetClientToken(v string) *CreateHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateHaVipRequest) SetRegionId(v string) *CreateHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHaVipRequest) SetVSwitchId(v string) *CreateHaVipRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateHaVipRequest) SetIpAddress(v string) *CreateHaVipRequest {
	s.IpAddress = &v
	return s
}

func (s *CreateHaVipRequest) SetDescription(v string) *CreateHaVipRequest {
	s.Description = &v
	return s
}

type CreateHaVipResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HaVipId   *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
}

func (s CreateHaVipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHaVipResponseBody) SetRequestId(v string) *CreateHaVipResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHaVipResponseBody) SetHaVipId(v string) *CreateHaVipResponseBody {
	s.HaVipId = &v
	return s
}

type CreateHaVipResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateHaVipResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipResponse) GoString() string {
	return s.String()
}

func (s *CreateHaVipResponse) SetHeaders(v map[string]*string) *CreateHaVipResponse {
	s.Headers = v
	return s
}

func (s *CreateHaVipResponse) SetBody(v *CreateHaVipResponseBody) *CreateHaVipResponse {
	s.Body = v
	return s
}

type CreateHpcClusterRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateHpcClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHpcClusterRequest) GoString() string {
	return s.String()
}

func (s *CreateHpcClusterRequest) SetOwnerId(v int64) *CreateHpcClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateHpcClusterRequest) SetResourceOwnerAccount(v string) *CreateHpcClusterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateHpcClusterRequest) SetResourceOwnerId(v int64) *CreateHpcClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateHpcClusterRequest) SetRegionId(v string) *CreateHpcClusterRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHpcClusterRequest) SetClientToken(v string) *CreateHpcClusterRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateHpcClusterRequest) SetOwnerAccount(v string) *CreateHpcClusterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateHpcClusterRequest) SetDescription(v string) *CreateHpcClusterRequest {
	s.Description = &v
	return s
}

func (s *CreateHpcClusterRequest) SetName(v string) *CreateHpcClusterRequest {
	s.Name = &v
	return s
}

type CreateHpcClusterResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HpcClusterId *string `json:"HpcClusterId,omitempty" xml:"HpcClusterId,omitempty"`
}

func (s CreateHpcClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHpcClusterResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHpcClusterResponseBody) SetRequestId(v string) *CreateHpcClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHpcClusterResponseBody) SetHpcClusterId(v string) *CreateHpcClusterResponseBody {
	s.HpcClusterId = &v
	return s
}

type CreateHpcClusterResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateHpcClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateHpcClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHpcClusterResponse) GoString() string {
	return s.String()
}

func (s *CreateHpcClusterResponse) SetHeaders(v map[string]*string) *CreateHpcClusterResponse {
	s.Headers = v
	return s
}

func (s *CreateHpcClusterResponse) SetBody(v *CreateHpcClusterResponseBody) *CreateHpcClusterResponse {
	s.Body = v
	return s
}

type CreateImageRequest struct {
	OwnerId              *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SnapshotId           *string                                `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	InstanceId           *string                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ImageName            *string                                `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	ImageFamily          *string                                `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty"`
	ImageVersion         *string                                `json:"ImageVersion,omitempty" xml:"ImageVersion,omitempty"`
	Description          *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	Platform             *string                                `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Architecture         *string                                `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	ClientToken          *string                                `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string                                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceGroupId      *string                                `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	DiskDeviceMapping    []*CreateImageRequestDiskDeviceMapping `json:"DiskDeviceMapping,omitempty" xml:"DiskDeviceMapping,omitempty" type:"Repeated"`
	Tag                  []*CreateImageRequestTag               `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateImageRequest) GoString() string {
	return s.String()
}

func (s *CreateImageRequest) SetOwnerId(v int64) *CreateImageRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateImageRequest) SetResourceOwnerAccount(v string) *CreateImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateImageRequest) SetResourceOwnerId(v int64) *CreateImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateImageRequest) SetRegionId(v string) *CreateImageRequest {
	s.RegionId = &v
	return s
}

func (s *CreateImageRequest) SetSnapshotId(v string) *CreateImageRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateImageRequest) SetInstanceId(v string) *CreateImageRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateImageRequest) SetImageName(v string) *CreateImageRequest {
	s.ImageName = &v
	return s
}

func (s *CreateImageRequest) SetImageFamily(v string) *CreateImageRequest {
	s.ImageFamily = &v
	return s
}

func (s *CreateImageRequest) SetImageVersion(v string) *CreateImageRequest {
	s.ImageVersion = &v
	return s
}

func (s *CreateImageRequest) SetDescription(v string) *CreateImageRequest {
	s.Description = &v
	return s
}

func (s *CreateImageRequest) SetPlatform(v string) *CreateImageRequest {
	s.Platform = &v
	return s
}

func (s *CreateImageRequest) SetArchitecture(v string) *CreateImageRequest {
	s.Architecture = &v
	return s
}

func (s *CreateImageRequest) SetClientToken(v string) *CreateImageRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateImageRequest) SetOwnerAccount(v string) *CreateImageRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateImageRequest) SetResourceGroupId(v string) *CreateImageRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateImageRequest) SetDiskDeviceMapping(v []*CreateImageRequestDiskDeviceMapping) *CreateImageRequest {
	s.DiskDeviceMapping = v
	return s
}

func (s *CreateImageRequest) SetTag(v []*CreateImageRequestTag) *CreateImageRequest {
	s.Tag = v
	return s
}

type CreateImageRequestDiskDeviceMapping struct {
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	Size       *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Device     *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskType   *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
}

func (s CreateImageRequestDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s CreateImageRequestDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *CreateImageRequestDiskDeviceMapping) SetSnapshotId(v string) *CreateImageRequestDiskDeviceMapping {
	s.SnapshotId = &v
	return s
}

func (s *CreateImageRequestDiskDeviceMapping) SetSize(v int32) *CreateImageRequestDiskDeviceMapping {
	s.Size = &v
	return s
}

func (s *CreateImageRequestDiskDeviceMapping) SetDevice(v string) *CreateImageRequestDiskDeviceMapping {
	s.Device = &v
	return s
}

func (s *CreateImageRequestDiskDeviceMapping) SetDiskType(v string) *CreateImageRequestDiskDeviceMapping {
	s.DiskType = &v
	return s
}

type CreateImageRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateImageRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateImageRequestTag) GoString() string {
	return s.String()
}

func (s *CreateImageRequestTag) SetKey(v string) *CreateImageRequestTag {
	s.Key = &v
	return s
}

func (s *CreateImageRequestTag) SetValue(v string) *CreateImageRequestTag {
	s.Value = &v
	return s
}

type CreateImageResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ImageId   *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s CreateImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateImageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateImageResponseBody) SetRequestId(v string) *CreateImageResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateImageResponseBody) SetImageId(v string) *CreateImageResponseBody {
	s.ImageId = &v
	return s
}

type CreateImageResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateImageResponse) GoString() string {
	return s.String()
}

func (s *CreateImageResponse) SetHeaders(v map[string]*string) *CreateImageResponse {
	s.Headers = v
	return s
}

func (s *CreateImageResponse) SetBody(v *CreateImageResponseBody) *CreateImageResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	SystemDisk                    *CreateInstanceRequestSystemDisk         `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	PrivatePoolOptions            *CreateInstanceRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId                       *int64                                   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount          *string                                  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId               *int64                                   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                      *string                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageId                       *string                                  `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageFamily                   *string                                  `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty"`
	InstanceType                  *string                                  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	SecurityGroupId               *string                                  `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	InstanceName                  *string                                  `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetChargeType            *string                                  `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	AutoRenew                     *bool                                    `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	AutoRenewPeriod               *int32                                   `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	InternetMaxBandwidthIn        *int32                                   `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InternetMaxBandwidthOut       *int32                                   `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	HostName                      *string                                  `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Password                      *string                                  `json:"Password,omitempty" xml:"Password,omitempty"`
	PasswordInherit               *bool                                    `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	DeploymentSetId               *string                                  `json:"DeploymentSetId,omitempty" xml:"DeploymentSetId,omitempty"`
	DeploymentSetGroupNo          *int32                                   `json:"DeploymentSetGroupNo,omitempty" xml:"DeploymentSetGroupNo,omitempty"`
	ZoneId                        *string                                  `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ClusterId                     *string                                  `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClientToken                   *string                                  `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	VlanId                        *string                                  `json:"VlanId,omitempty" xml:"VlanId,omitempty"`
	InnerIpAddress                *string                                  `json:"InnerIpAddress,omitempty" xml:"InnerIpAddress,omitempty"`
	NodeControllerId              *string                                  `json:"NodeControllerId,omitempty" xml:"NodeControllerId,omitempty"`
	Description                   *string                                  `json:"Description,omitempty" xml:"Description,omitempty"`
	VSwitchId                     *string                                  `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress              *string                                  `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	IoOptimized                   *string                                  `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	OwnerAccount                  *string                                  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UseAdditionalService          *bool                                    `json:"UseAdditionalService,omitempty" xml:"UseAdditionalService,omitempty"`
	InstanceChargeType            *string                                  `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Period                        *int32                                   `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit                    *string                                  `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	UserData                      *string                                  `json:"UserData,omitempty" xml:"UserData,omitempty"`
	SpotStrategy                  *string                                  `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	KeyPairName                   *string                                  `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	SpotPriceLimit                *float32                                 `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty"`
	SpotDuration                  *int32                                   `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	SpotInterruptionBehavior      *string                                  `json:"SpotInterruptionBehavior,omitempty" xml:"SpotInterruptionBehavior,omitempty"`
	RamRoleName                   *string                                  `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	SecurityEnhancementStrategy   *string                                  `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
	ResourceGroupId               *string                                  `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	HpcClusterId                  *string                                  `json:"HpcClusterId,omitempty" xml:"HpcClusterId,omitempty"`
	DryRun                        *bool                                    `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	DedicatedHostId               *string                                  `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	CreditSpecification           *string                                  `json:"CreditSpecification,omitempty" xml:"CreditSpecification,omitempty"`
	DeletionProtection            *bool                                    `json:"DeletionProtection,omitempty" xml:"DeletionProtection,omitempty"`
	CapacityReservationId         *string                                  `json:"CapacityReservationId,omitempty" xml:"CapacityReservationId,omitempty"`
	CapacityReservationPreference *string                                  `json:"CapacityReservationPreference,omitempty" xml:"CapacityReservationPreference,omitempty"`
	Affinity                      *string                                  `json:"Affinity,omitempty" xml:"Affinity,omitempty"`
	Tenancy                       *string                                  `json:"Tenancy,omitempty" xml:"Tenancy,omitempty"`
	StorageSetId                  *string                                  `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetPartitionNumber     *int32                                   `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	HttpEndpoint                  *string                                  `json:"HttpEndpoint,omitempty" xml:"HttpEndpoint,omitempty"`
	HttpTokens                    *string                                  `json:"HttpTokens,omitempty" xml:"HttpTokens,omitempty"`
	HttpPutResponseHopLimit       *int32                                   `json:"HttpPutResponseHopLimit,omitempty" xml:"HttpPutResponseHopLimit,omitempty"`
	DataDisk                      []*CreateInstanceRequestDataDisk         `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	Arn                           []*CreateInstanceRequestArn              `json:"Arn,omitempty" xml:"Arn,omitempty" type:"Repeated"`
	Tag                           []*CreateInstanceRequestTag              `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetSystemDisk(v *CreateInstanceRequestSystemDisk) *CreateInstanceRequest {
	s.SystemDisk = v
	return s
}

func (s *CreateInstanceRequest) SetPrivatePoolOptions(v *CreateInstanceRequestPrivatePoolOptions) *CreateInstanceRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *CreateInstanceRequest) SetOwnerId(v int64) *CreateInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateInstanceRequest) SetResourceOwnerAccount(v string) *CreateInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateInstanceRequest) SetResourceOwnerId(v int64) *CreateInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateInstanceRequest) SetRegionId(v string) *CreateInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateInstanceRequest) SetImageId(v string) *CreateInstanceRequest {
	s.ImageId = &v
	return s
}

func (s *CreateInstanceRequest) SetImageFamily(v string) *CreateInstanceRequest {
	s.ImageFamily = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceType(v string) *CreateInstanceRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateInstanceRequest) SetSecurityGroupId(v string) *CreateInstanceRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceName(v string) *CreateInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceRequest) SetInternetChargeType(v string) *CreateInstanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateInstanceRequest) SetAutoRenew(v bool) *CreateInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateInstanceRequest) SetAutoRenewPeriod(v int32) *CreateInstanceRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *CreateInstanceRequest) SetInternetMaxBandwidthIn(v int32) *CreateInstanceRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *CreateInstanceRequest) SetInternetMaxBandwidthOut(v int32) *CreateInstanceRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateInstanceRequest) SetHostName(v string) *CreateInstanceRequest {
	s.HostName = &v
	return s
}

func (s *CreateInstanceRequest) SetPassword(v string) *CreateInstanceRequest {
	s.Password = &v
	return s
}

func (s *CreateInstanceRequest) SetPasswordInherit(v bool) *CreateInstanceRequest {
	s.PasswordInherit = &v
	return s
}

func (s *CreateInstanceRequest) SetDeploymentSetId(v string) *CreateInstanceRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *CreateInstanceRequest) SetDeploymentSetGroupNo(v int32) *CreateInstanceRequest {
	s.DeploymentSetGroupNo = &v
	return s
}

func (s *CreateInstanceRequest) SetZoneId(v string) *CreateInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateInstanceRequest) SetClusterId(v string) *CreateInstanceRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateInstanceRequest) SetClientToken(v string) *CreateInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateInstanceRequest) SetVlanId(v string) *CreateInstanceRequest {
	s.VlanId = &v
	return s
}

func (s *CreateInstanceRequest) SetInnerIpAddress(v string) *CreateInstanceRequest {
	s.InnerIpAddress = &v
	return s
}

func (s *CreateInstanceRequest) SetNodeControllerId(v string) *CreateInstanceRequest {
	s.NodeControllerId = &v
	return s
}

func (s *CreateInstanceRequest) SetDescription(v string) *CreateInstanceRequest {
	s.Description = &v
	return s
}

func (s *CreateInstanceRequest) SetVSwitchId(v string) *CreateInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateInstanceRequest) SetPrivateIpAddress(v string) *CreateInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateInstanceRequest) SetIoOptimized(v string) *CreateInstanceRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateInstanceRequest) SetOwnerAccount(v string) *CreateInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateInstanceRequest) SetUseAdditionalService(v bool) *CreateInstanceRequest {
	s.UseAdditionalService = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceChargeType(v string) *CreateInstanceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateInstanceRequest) SetPeriod(v int32) *CreateInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateInstanceRequest) SetPeriodUnit(v string) *CreateInstanceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateInstanceRequest) SetUserData(v string) *CreateInstanceRequest {
	s.UserData = &v
	return s
}

func (s *CreateInstanceRequest) SetSpotStrategy(v string) *CreateInstanceRequest {
	s.SpotStrategy = &v
	return s
}

func (s *CreateInstanceRequest) SetKeyPairName(v string) *CreateInstanceRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateInstanceRequest) SetSpotPriceLimit(v float32) *CreateInstanceRequest {
	s.SpotPriceLimit = &v
	return s
}

func (s *CreateInstanceRequest) SetSpotDuration(v int32) *CreateInstanceRequest {
	s.SpotDuration = &v
	return s
}

func (s *CreateInstanceRequest) SetSpotInterruptionBehavior(v string) *CreateInstanceRequest {
	s.SpotInterruptionBehavior = &v
	return s
}

func (s *CreateInstanceRequest) SetRamRoleName(v string) *CreateInstanceRequest {
	s.RamRoleName = &v
	return s
}

func (s *CreateInstanceRequest) SetSecurityEnhancementStrategy(v string) *CreateInstanceRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *CreateInstanceRequest) SetResourceGroupId(v string) *CreateInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateInstanceRequest) SetHpcClusterId(v string) *CreateInstanceRequest {
	s.HpcClusterId = &v
	return s
}

func (s *CreateInstanceRequest) SetDryRun(v bool) *CreateInstanceRequest {
	s.DryRun = &v
	return s
}

func (s *CreateInstanceRequest) SetDedicatedHostId(v string) *CreateInstanceRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *CreateInstanceRequest) SetCreditSpecification(v string) *CreateInstanceRequest {
	s.CreditSpecification = &v
	return s
}

func (s *CreateInstanceRequest) SetDeletionProtection(v bool) *CreateInstanceRequest {
	s.DeletionProtection = &v
	return s
}

func (s *CreateInstanceRequest) SetCapacityReservationId(v string) *CreateInstanceRequest {
	s.CapacityReservationId = &v
	return s
}

func (s *CreateInstanceRequest) SetCapacityReservationPreference(v string) *CreateInstanceRequest {
	s.CapacityReservationPreference = &v
	return s
}

func (s *CreateInstanceRequest) SetAffinity(v string) *CreateInstanceRequest {
	s.Affinity = &v
	return s
}

func (s *CreateInstanceRequest) SetTenancy(v string) *CreateInstanceRequest {
	s.Tenancy = &v
	return s
}

func (s *CreateInstanceRequest) SetStorageSetId(v string) *CreateInstanceRequest {
	s.StorageSetId = &v
	return s
}

func (s *CreateInstanceRequest) SetStorageSetPartitionNumber(v int32) *CreateInstanceRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *CreateInstanceRequest) SetHttpEndpoint(v string) *CreateInstanceRequest {
	s.HttpEndpoint = &v
	return s
}

func (s *CreateInstanceRequest) SetHttpTokens(v string) *CreateInstanceRequest {
	s.HttpTokens = &v
	return s
}

func (s *CreateInstanceRequest) SetHttpPutResponseHopLimit(v int32) *CreateInstanceRequest {
	s.HttpPutResponseHopLimit = &v
	return s
}

func (s *CreateInstanceRequest) SetDataDisk(v []*CreateInstanceRequestDataDisk) *CreateInstanceRequest {
	s.DataDisk = v
	return s
}

func (s *CreateInstanceRequest) SetArn(v []*CreateInstanceRequestArn) *CreateInstanceRequest {
	s.Arn = v
	return s
}

func (s *CreateInstanceRequest) SetTag(v []*CreateInstanceRequestTag) *CreateInstanceRequest {
	s.Tag = v
	return s
}

type CreateInstanceRequestSystemDisk struct {
	Size             *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Category         *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DiskName         *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	PerformanceLevel *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
}

func (s CreateInstanceRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestSystemDisk) SetSize(v int32) *CreateInstanceRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *CreateInstanceRequestSystemDisk) SetCategory(v string) *CreateInstanceRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *CreateInstanceRequestSystemDisk) SetDiskName(v string) *CreateInstanceRequestSystemDisk {
	s.DiskName = &v
	return s
}

func (s *CreateInstanceRequestSystemDisk) SetDescription(v string) *CreateInstanceRequestSystemDisk {
	s.Description = &v
	return s
}

func (s *CreateInstanceRequestSystemDisk) SetPerformanceLevel(v string) *CreateInstanceRequestSystemDisk {
	s.PerformanceLevel = &v
	return s
}

type CreateInstanceRequestPrivatePoolOptions struct {
	MatchCriteria *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateInstanceRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestPrivatePoolOptions) SetMatchCriteria(v string) *CreateInstanceRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

func (s *CreateInstanceRequestPrivatePoolOptions) SetId(v string) *CreateInstanceRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

type CreateInstanceRequestDataDisk struct {
	PerformanceLevel   *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SnapshotId         *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	Size               *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Device             *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskName           *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Category           *string `json:"Category,omitempty" xml:"Category,omitempty"`
	KMSKeyId           *string `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	EncryptAlgorithm   *string `json:"EncryptAlgorithm,omitempty" xml:"EncryptAlgorithm,omitempty"`
	Encrypted          *bool   `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
}

func (s CreateInstanceRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestDataDisk) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestDataDisk) SetPerformanceLevel(v string) *CreateInstanceRequestDataDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetDescription(v string) *CreateInstanceRequestDataDisk {
	s.Description = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetSnapshotId(v string) *CreateInstanceRequestDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetSize(v int32) *CreateInstanceRequestDataDisk {
	s.Size = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetDevice(v string) *CreateInstanceRequestDataDisk {
	s.Device = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetDiskName(v string) *CreateInstanceRequestDataDisk {
	s.DiskName = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetCategory(v string) *CreateInstanceRequestDataDisk {
	s.Category = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetKMSKeyId(v string) *CreateInstanceRequestDataDisk {
	s.KMSKeyId = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetDeleteWithInstance(v bool) *CreateInstanceRequestDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetEncryptAlgorithm(v string) *CreateInstanceRequestDataDisk {
	s.EncryptAlgorithm = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetEncrypted(v bool) *CreateInstanceRequestDataDisk {
	s.Encrypted = &v
	return s
}

type CreateInstanceRequestArn struct {
	RoleType      *string `json:"RoleType,omitempty" xml:"RoleType,omitempty"`
	Rolearn       *string `json:"Rolearn,omitempty" xml:"Rolearn,omitempty"`
	AssumeRoleFor *int64  `json:"AssumeRoleFor,omitempty" xml:"AssumeRoleFor,omitempty"`
}

func (s CreateInstanceRequestArn) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestArn) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestArn) SetRoleType(v string) *CreateInstanceRequestArn {
	s.RoleType = &v
	return s
}

func (s *CreateInstanceRequestArn) SetRolearn(v string) *CreateInstanceRequestArn {
	s.Rolearn = &v
	return s
}

func (s *CreateInstanceRequestArn) SetAssumeRoleFor(v int64) *CreateInstanceRequestArn {
	s.AssumeRoleFor = &v
	return s
}

type CreateInstanceRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestTag) SetKey(v string) *CreateInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *CreateInstanceRequestTag) SetValue(v string) *CreateInstanceRequestTag {
	s.Value = &v
	return s
}

type CreateInstanceResponseBody struct {
	RequestId  *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceId *string  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OrderId    *string  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	TradePrice *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetInstanceId(v string) *CreateInstanceResponseBody {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetOrderId(v string) *CreateInstanceResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetTradePrice(v float32) *CreateInstanceResponseBody {
	s.TradePrice = &v
	return s
}

type CreateInstanceResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateKeyPairRequest struct {
	OwnerId              *int64                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                    `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	KeyPairName          *string                    `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	ResourceGroupId      *string                    `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                  []*CreateKeyPairRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairRequest) GoString() string {
	return s.String()
}

func (s *CreateKeyPairRequest) SetOwnerId(v int64) *CreateKeyPairRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateKeyPairRequest) SetResourceOwnerAccount(v string) *CreateKeyPairRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateKeyPairRequest) SetResourceOwnerId(v int64) *CreateKeyPairRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateKeyPairRequest) SetRegionId(v string) *CreateKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *CreateKeyPairRequest) SetKeyPairName(v string) *CreateKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateKeyPairRequest) SetResourceGroupId(v string) *CreateKeyPairRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateKeyPairRequest) SetTag(v []*CreateKeyPairRequestTag) *CreateKeyPairRequest {
	s.Tag = v
	return s
}

type CreateKeyPairRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateKeyPairRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairRequestTag) GoString() string {
	return s.String()
}

func (s *CreateKeyPairRequestTag) SetKey(v string) *CreateKeyPairRequestTag {
	s.Key = &v
	return s
}

func (s *CreateKeyPairRequestTag) SetValue(v string) *CreateKeyPairRequestTag {
	s.Value = &v
	return s
}

type CreateKeyPairResponseBody struct {
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
	KeyPairName        *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	KeyPairId          *string `json:"KeyPairId,omitempty" xml:"KeyPairId,omitempty"`
	PrivateKeyBody     *string `json:"PrivateKeyBody,omitempty" xml:"PrivateKeyBody,omitempty"`
}

func (s CreateKeyPairResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *CreateKeyPairResponseBody) SetKeyPairFingerPrint(v string) *CreateKeyPairResponseBody {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetKeyPairName(v string) *CreateKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetRequestId(v string) *CreateKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetKeyPairId(v string) *CreateKeyPairResponseBody {
	s.KeyPairId = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetPrivateKeyBody(v string) *CreateKeyPairResponseBody {
	s.PrivateKeyBody = &v
	return s
}

type CreateKeyPairResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairResponse) GoString() string {
	return s.String()
}

func (s *CreateKeyPairResponse) SetHeaders(v map[string]*string) *CreateKeyPairResponse {
	s.Headers = v
	return s
}

func (s *CreateKeyPairResponse) SetBody(v *CreateKeyPairResponseBody) *CreateKeyPairResponse {
	s.Body = v
	return s
}

type CreateLaunchTemplateRequest struct {
	SystemDisk                  *CreateLaunchTemplateRequestSystemDisk         `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	OwnerId                     *int64                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount        *string                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                *string                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                    *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TemplateTag                 []*CreateLaunchTemplateRequestTemplateTag      `json:"TemplateTag,omitempty" xml:"TemplateTag,omitempty" type:"Repeated"`
	LaunchTemplateName          *string                                        `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty"`
	VersionDescription          *string                                        `json:"VersionDescription,omitempty" xml:"VersionDescription,omitempty"`
	ImageId                     *string                                        `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageOwnerAlias             *string                                        `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	PasswordInherit             *bool                                          `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	InstanceType                *string                                        `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	SecurityGroupId             *string                                        `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	VpcId                       *string                                        `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId                   *string                                        `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	InstanceName                *string                                        `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Description                 *string                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	InternetMaxBandwidthIn      *int32                                         `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InternetMaxBandwidthOut     *int32                                         `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	HostName                    *string                                        `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ZoneId                      *string                                        `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	IoOptimized                 *string                                        `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	InstanceChargeType          *string                                        `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Period                      *int32                                         `json:"Period,omitempty" xml:"Period,omitempty"`
	InternetChargeType          *string                                        `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	EnableVmOsConfig            *bool                                          `json:"EnableVmOsConfig,omitempty" xml:"EnableVmOsConfig,omitempty"`
	NetworkType                 *string                                        `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	UserData                    *string                                        `json:"UserData,omitempty" xml:"UserData,omitempty"`
	KeyPairName                 *string                                        `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	RamRoleName                 *string                                        `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	AutoReleaseTime             *string                                        `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	SpotStrategy                *string                                        `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	SpotPriceLimit              *float32                                       `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty"`
	SpotDuration                *int32                                         `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	ResourceGroupId             *string                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	TemplateResourceGroupId     *string                                        `json:"TemplateResourceGroupId,omitempty" xml:"TemplateResourceGroupId,omitempty"`
	SecurityEnhancementStrategy *string                                        `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
	DataDisk                    []*CreateLaunchTemplateRequestDataDisk         `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	NetworkInterface            []*CreateLaunchTemplateRequestNetworkInterface `json:"NetworkInterface,omitempty" xml:"NetworkInterface,omitempty" type:"Repeated"`
	Tag                         []*CreateLaunchTemplateRequestTag              `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateLaunchTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequest) SetSystemDisk(v *CreateLaunchTemplateRequestSystemDisk) *CreateLaunchTemplateRequest {
	s.SystemDisk = v
	return s
}

func (s *CreateLaunchTemplateRequest) SetOwnerId(v int64) *CreateLaunchTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetResourceOwnerAccount(v string) *CreateLaunchTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetResourceOwnerId(v int64) *CreateLaunchTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetOwnerAccount(v string) *CreateLaunchTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetRegionId(v string) *CreateLaunchTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetTemplateTag(v []*CreateLaunchTemplateRequestTemplateTag) *CreateLaunchTemplateRequest {
	s.TemplateTag = v
	return s
}

func (s *CreateLaunchTemplateRequest) SetLaunchTemplateName(v string) *CreateLaunchTemplateRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetVersionDescription(v string) *CreateLaunchTemplateRequest {
	s.VersionDescription = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetImageId(v string) *CreateLaunchTemplateRequest {
	s.ImageId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetImageOwnerAlias(v string) *CreateLaunchTemplateRequest {
	s.ImageOwnerAlias = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetPasswordInherit(v bool) *CreateLaunchTemplateRequest {
	s.PasswordInherit = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInstanceType(v string) *CreateLaunchTemplateRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSecurityGroupId(v string) *CreateLaunchTemplateRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetVpcId(v string) *CreateLaunchTemplateRequest {
	s.VpcId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetVSwitchId(v string) *CreateLaunchTemplateRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInstanceName(v string) *CreateLaunchTemplateRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetDescription(v string) *CreateLaunchTemplateRequest {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInternetMaxBandwidthIn(v int32) *CreateLaunchTemplateRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInternetMaxBandwidthOut(v int32) *CreateLaunchTemplateRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetHostName(v string) *CreateLaunchTemplateRequest {
	s.HostName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetZoneId(v string) *CreateLaunchTemplateRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetIoOptimized(v string) *CreateLaunchTemplateRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInstanceChargeType(v string) *CreateLaunchTemplateRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetPeriod(v int32) *CreateLaunchTemplateRequest {
	s.Period = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInternetChargeType(v string) *CreateLaunchTemplateRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetEnableVmOsConfig(v bool) *CreateLaunchTemplateRequest {
	s.EnableVmOsConfig = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetNetworkType(v string) *CreateLaunchTemplateRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetUserData(v string) *CreateLaunchTemplateRequest {
	s.UserData = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetKeyPairName(v string) *CreateLaunchTemplateRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetRamRoleName(v string) *CreateLaunchTemplateRequest {
	s.RamRoleName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetAutoReleaseTime(v string) *CreateLaunchTemplateRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSpotStrategy(v string) *CreateLaunchTemplateRequest {
	s.SpotStrategy = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSpotPriceLimit(v float32) *CreateLaunchTemplateRequest {
	s.SpotPriceLimit = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSpotDuration(v int32) *CreateLaunchTemplateRequest {
	s.SpotDuration = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetResourceGroupId(v string) *CreateLaunchTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetTemplateResourceGroupId(v string) *CreateLaunchTemplateRequest {
	s.TemplateResourceGroupId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSecurityEnhancementStrategy(v string) *CreateLaunchTemplateRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetDataDisk(v []*CreateLaunchTemplateRequestDataDisk) *CreateLaunchTemplateRequest {
	s.DataDisk = v
	return s
}

func (s *CreateLaunchTemplateRequest) SetNetworkInterface(v []*CreateLaunchTemplateRequestNetworkInterface) *CreateLaunchTemplateRequest {
	s.NetworkInterface = v
	return s
}

func (s *CreateLaunchTemplateRequest) SetTag(v []*CreateLaunchTemplateRequestTag) *CreateLaunchTemplateRequest {
	s.Tag = v
	return s
}

type CreateLaunchTemplateRequestSystemDisk struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Size        *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	DiskName    *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Iops        *int32  `json:"Iops,omitempty" xml:"Iops,omitempty"`
}

func (s CreateLaunchTemplateRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetCategory(v string) *CreateLaunchTemplateRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetSize(v int32) *CreateLaunchTemplateRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetDiskName(v string) *CreateLaunchTemplateRequestSystemDisk {
	s.DiskName = &v
	return s
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetDescription(v string) *CreateLaunchTemplateRequestSystemDisk {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetIops(v int32) *CreateLaunchTemplateRequestSystemDisk {
	s.Iops = &v
	return s
}

type CreateLaunchTemplateRequestTemplateTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateLaunchTemplateRequestTemplateTag) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestTemplateTag) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestTemplateTag) SetKey(v string) *CreateLaunchTemplateRequestTemplateTag {
	s.Key = &v
	return s
}

func (s *CreateLaunchTemplateRequestTemplateTag) SetValue(v string) *CreateLaunchTemplateRequestTemplateTag {
	s.Value = &v
	return s
}

type CreateLaunchTemplateRequestDataDisk struct {
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SnapshotId         *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	Size               *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Device             *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskName           *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Category           *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	Encrypted          *string `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
}

func (s CreateLaunchTemplateRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestDataDisk) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestDataDisk) SetDescription(v string) *CreateLaunchTemplateRequestDataDisk {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetSnapshotId(v string) *CreateLaunchTemplateRequestDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetSize(v int32) *CreateLaunchTemplateRequestDataDisk {
	s.Size = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetDevice(v string) *CreateLaunchTemplateRequestDataDisk {
	s.Device = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetDiskName(v string) *CreateLaunchTemplateRequestDataDisk {
	s.DiskName = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetCategory(v string) *CreateLaunchTemplateRequestDataDisk {
	s.Category = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetDeleteWithInstance(v bool) *CreateLaunchTemplateRequestDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetEncrypted(v string) *CreateLaunchTemplateRequestDataDisk {
	s.Encrypted = &v
	return s
}

type CreateLaunchTemplateRequestNetworkInterface struct {
	NetworkInterfaceName *string `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	PrimaryIpAddress     *string `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
}

func (s CreateLaunchTemplateRequestNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestNetworkInterface) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetNetworkInterfaceName(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetVSwitchId(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.VSwitchId = &v
	return s
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetDescription(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetSecurityGroupId(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetPrimaryIpAddress(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

type CreateLaunchTemplateRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateLaunchTemplateRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestTag) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestTag) SetKey(v string) *CreateLaunchTemplateRequestTag {
	s.Key = &v
	return s
}

func (s *CreateLaunchTemplateRequestTag) SetValue(v string) *CreateLaunchTemplateRequestTag {
	s.Value = &v
	return s
}

type CreateLaunchTemplateResponseBody struct {
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LaunchTemplateId *string `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
}

func (s CreateLaunchTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateResponseBody) SetRequestId(v string) *CreateLaunchTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLaunchTemplateResponseBody) SetLaunchTemplateId(v string) *CreateLaunchTemplateResponseBody {
	s.LaunchTemplateId = &v
	return s
}

type CreateLaunchTemplateResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateLaunchTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLaunchTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateResponse) SetHeaders(v map[string]*string) *CreateLaunchTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateLaunchTemplateResponse) SetBody(v *CreateLaunchTemplateResponseBody) *CreateLaunchTemplateResponse {
	s.Body = v
	return s
}

type CreateLaunchTemplateVersionRequest struct {
	SystemDisk                  *CreateLaunchTemplateVersionRequestSystemDisk         `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	OwnerId                     *int64                                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount        *string                                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                *string                                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                    *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LaunchTemplateId            *string                                               `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	LaunchTemplateName          *string                                               `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty"`
	VersionDescription          *string                                               `json:"VersionDescription,omitempty" xml:"VersionDescription,omitempty"`
	ImageId                     *string                                               `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageOwnerAlias             *string                                               `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	PasswordInherit             *bool                                                 `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	InstanceType                *string                                               `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	SecurityGroupId             *string                                               `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	VpcId                       *string                                               `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId                   *string                                               `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	InstanceName                *string                                               `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Description                 *string                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	InternetMaxBandwidthIn      *int32                                                `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InternetMaxBandwidthOut     *int32                                                `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	HostName                    *string                                               `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ZoneId                      *string                                               `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	IoOptimized                 *string                                               `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	InstanceChargeType          *string                                               `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Period                      *int32                                                `json:"Period,omitempty" xml:"Period,omitempty"`
	InternetChargeType          *string                                               `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	EnableVmOsConfig            *bool                                                 `json:"EnableVmOsConfig,omitempty" xml:"EnableVmOsConfig,omitempty"`
	NetworkType                 *string                                               `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	UserData                    *string                                               `json:"UserData,omitempty" xml:"UserData,omitempty"`
	KeyPairName                 *string                                               `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	RamRoleName                 *string                                               `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	AutoReleaseTime             *string                                               `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	SpotStrategy                *string                                               `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	SpotPriceLimit              *float32                                              `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty"`
	SpotDuration                *int32                                                `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	ResourceGroupId             *string                                               `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SecurityEnhancementStrategy *string                                               `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
	DataDisk                    []*CreateLaunchTemplateVersionRequestDataDisk         `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	NetworkInterface            []*CreateLaunchTemplateVersionRequestNetworkInterface `json:"NetworkInterface,omitempty" xml:"NetworkInterface,omitempty" type:"Repeated"`
	Tag                         []*CreateLaunchTemplateVersionRequestTag              `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateLaunchTemplateVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequest) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequest) SetSystemDisk(v *CreateLaunchTemplateVersionRequestSystemDisk) *CreateLaunchTemplateVersionRequest {
	s.SystemDisk = v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetOwnerId(v int64) *CreateLaunchTemplateVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetResourceOwnerAccount(v string) *CreateLaunchTemplateVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetResourceOwnerId(v int64) *CreateLaunchTemplateVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetOwnerAccount(v string) *CreateLaunchTemplateVersionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetRegionId(v string) *CreateLaunchTemplateVersionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetLaunchTemplateId(v string) *CreateLaunchTemplateVersionRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetLaunchTemplateName(v string) *CreateLaunchTemplateVersionRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetVersionDescription(v string) *CreateLaunchTemplateVersionRequest {
	s.VersionDescription = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetImageId(v string) *CreateLaunchTemplateVersionRequest {
	s.ImageId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetImageOwnerAlias(v string) *CreateLaunchTemplateVersionRequest {
	s.ImageOwnerAlias = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetPasswordInherit(v bool) *CreateLaunchTemplateVersionRequest {
	s.PasswordInherit = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInstanceType(v string) *CreateLaunchTemplateVersionRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSecurityGroupId(v string) *CreateLaunchTemplateVersionRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetVpcId(v string) *CreateLaunchTemplateVersionRequest {
	s.VpcId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetVSwitchId(v string) *CreateLaunchTemplateVersionRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInstanceName(v string) *CreateLaunchTemplateVersionRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetDescription(v string) *CreateLaunchTemplateVersionRequest {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInternetMaxBandwidthIn(v int32) *CreateLaunchTemplateVersionRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInternetMaxBandwidthOut(v int32) *CreateLaunchTemplateVersionRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetHostName(v string) *CreateLaunchTemplateVersionRequest {
	s.HostName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetZoneId(v string) *CreateLaunchTemplateVersionRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetIoOptimized(v string) *CreateLaunchTemplateVersionRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInstanceChargeType(v string) *CreateLaunchTemplateVersionRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetPeriod(v int32) *CreateLaunchTemplateVersionRequest {
	s.Period = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInternetChargeType(v string) *CreateLaunchTemplateVersionRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetEnableVmOsConfig(v bool) *CreateLaunchTemplateVersionRequest {
	s.EnableVmOsConfig = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetNetworkType(v string) *CreateLaunchTemplateVersionRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetUserData(v string) *CreateLaunchTemplateVersionRequest {
	s.UserData = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetKeyPairName(v string) *CreateLaunchTemplateVersionRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetRamRoleName(v string) *CreateLaunchTemplateVersionRequest {
	s.RamRoleName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetAutoReleaseTime(v string) *CreateLaunchTemplateVersionRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSpotStrategy(v string) *CreateLaunchTemplateVersionRequest {
	s.SpotStrategy = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSpotPriceLimit(v float32) *CreateLaunchTemplateVersionRequest {
	s.SpotPriceLimit = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSpotDuration(v int32) *CreateLaunchTemplateVersionRequest {
	s.SpotDuration = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetResourceGroupId(v string) *CreateLaunchTemplateVersionRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSecurityEnhancementStrategy(v string) *CreateLaunchTemplateVersionRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetDataDisk(v []*CreateLaunchTemplateVersionRequestDataDisk) *CreateLaunchTemplateVersionRequest {
	s.DataDisk = v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetNetworkInterface(v []*CreateLaunchTemplateVersionRequestNetworkInterface) *CreateLaunchTemplateVersionRequest {
	s.NetworkInterface = v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetTag(v []*CreateLaunchTemplateVersionRequestTag) *CreateLaunchTemplateVersionRequest {
	s.Tag = v
	return s
}

type CreateLaunchTemplateVersionRequestSystemDisk struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Size        *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	DiskName    *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Iops        *int32  `json:"Iops,omitempty" xml:"Iops,omitempty"`
}

func (s CreateLaunchTemplateVersionRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetCategory(v string) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetSize(v int32) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetDiskName(v string) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.DiskName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetDescription(v string) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetIops(v int32) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.Iops = &v
	return s
}

type CreateLaunchTemplateVersionRequestDataDisk struct {
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SnapshotId         *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	Size               *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Device             *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskName           *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Category           *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	Encrypted          *string `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
}

func (s CreateLaunchTemplateVersionRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequestDataDisk) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetDescription(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetSnapshotId(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetSize(v int32) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Size = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetDevice(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Device = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetDiskName(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.DiskName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetCategory(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Category = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetDeleteWithInstance(v bool) *CreateLaunchTemplateVersionRequestDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetEncrypted(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Encrypted = &v
	return s
}

type CreateLaunchTemplateVersionRequestNetworkInterface struct {
	NetworkInterfaceName *string `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	PrimaryIpAddress     *string `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
}

func (s CreateLaunchTemplateVersionRequestNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequestNetworkInterface) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetNetworkInterfaceName(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetVSwitchId(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.VSwitchId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetDescription(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetSecurityGroupId(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetPrimaryIpAddress(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

type CreateLaunchTemplateVersionRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateLaunchTemplateVersionRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequestTag) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequestTag) SetKey(v string) *CreateLaunchTemplateVersionRequestTag {
	s.Key = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestTag) SetValue(v string) *CreateLaunchTemplateVersionRequestTag {
	s.Value = &v
	return s
}

type CreateLaunchTemplateVersionResponseBody struct {
	RequestId                   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LaunchTemplateVersionNumber *int64  `json:"LaunchTemplateVersionNumber,omitempty" xml:"LaunchTemplateVersionNumber,omitempty"`
}

func (s CreateLaunchTemplateVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionResponseBody) SetRequestId(v string) *CreateLaunchTemplateVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLaunchTemplateVersionResponseBody) SetLaunchTemplateVersionNumber(v int64) *CreateLaunchTemplateVersionResponseBody {
	s.LaunchTemplateVersionNumber = &v
	return s
}

type CreateLaunchTemplateVersionResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateLaunchTemplateVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLaunchTemplateVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionResponse) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionResponse) SetHeaders(v map[string]*string) *CreateLaunchTemplateVersionResponse {
	s.Headers = v
	return s
}

func (s *CreateLaunchTemplateVersionResponse) SetBody(v *CreateLaunchTemplateVersionResponseBody) *CreateLaunchTemplateVersionResponse {
	s.Body = v
	return s
}

type CreateNatGatewayRequest struct {
	OwnerId              *int64                                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                    `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                    `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VpcId                *string                                    `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	Name                 *string                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Description          *string                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken          *string                                    `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	BandwidthPackage     []*CreateNatGatewayRequestBandwidthPackage `json:"BandwidthPackage,omitempty" xml:"BandwidthPackage,omitempty" type:"Repeated"`
}

func (s CreateNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayRequest) SetOwnerId(v int64) *CreateNatGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetResourceOwnerAccount(v string) *CreateNatGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateNatGatewayRequest) SetResourceOwnerId(v int64) *CreateNatGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetOwnerAccount(v string) *CreateNatGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateNatGatewayRequest) SetRegionId(v string) *CreateNatGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetVpcId(v string) *CreateNatGatewayRequest {
	s.VpcId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetName(v string) *CreateNatGatewayRequest {
	s.Name = &v
	return s
}

func (s *CreateNatGatewayRequest) SetDescription(v string) *CreateNatGatewayRequest {
	s.Description = &v
	return s
}

func (s *CreateNatGatewayRequest) SetClientToken(v string) *CreateNatGatewayRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateNatGatewayRequest) SetBandwidthPackage(v []*CreateNatGatewayRequestBandwidthPackage) *CreateNatGatewayRequest {
	s.BandwidthPackage = v
	return s
}

type CreateNatGatewayRequestBandwidthPackage struct {
	Bandwidth *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Zone      *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
	IpCount   *int32  `json:"IpCount,omitempty" xml:"IpCount,omitempty"`
}

func (s CreateNatGatewayRequestBandwidthPackage) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayRequestBandwidthPackage) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetBandwidth(v int32) *CreateNatGatewayRequestBandwidthPackage {
	s.Bandwidth = &v
	return s
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetZone(v string) *CreateNatGatewayRequestBandwidthPackage {
	s.Zone = &v
	return s
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetIpCount(v int32) *CreateNatGatewayRequestBandwidthPackage {
	s.IpCount = &v
	return s
}

type CreateNatGatewayResponseBody struct {
	RequestId           *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ForwardTableIds     []*string `json:"ForwardTableIds,omitempty" xml:"ForwardTableIds,omitempty" type:"Repeated"`
	BandwidthPackageIds []*string `json:"BandwidthPackageIds,omitempty" xml:"BandwidthPackageIds,omitempty" type:"Repeated"`
	NatGatewayId        *string   `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
}

func (s CreateNatGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponseBody) SetRequestId(v string) *CreateNatGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNatGatewayResponseBody) SetForwardTableIds(v []*string) *CreateNatGatewayResponseBody {
	s.ForwardTableIds = v
	return s
}

func (s *CreateNatGatewayResponseBody) SetBandwidthPackageIds(v []*string) *CreateNatGatewayResponseBody {
	s.BandwidthPackageIds = v
	return s
}

func (s *CreateNatGatewayResponseBody) SetNatGatewayId(v string) *CreateNatGatewayResponseBody {
	s.NatGatewayId = &v
	return s
}

type CreateNatGatewayResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateNatGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponse) SetHeaders(v map[string]*string) *CreateNatGatewayResponse {
	s.Headers = v
	return s
}

func (s *CreateNatGatewayResponse) SetBody(v *CreateNatGatewayResponseBody) *CreateNatGatewayResponse {
	s.Body = v
	return s
}

type CreateNetworkInterfaceRequest struct {
	OwnerId                        *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount           *string                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                   *string                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                       *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Tag                            []*CreateNetworkInterfaceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ResourceGroupId                *string                             `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	VSwitchId                      *string                             `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrimaryIpAddress               *string                             `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
	SecurityGroupId                *string                             `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	NetworkInterfaceName           *string                             `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	Description                    *string                             `json:"Description,omitempty" xml:"Description,omitempty"`
	Visible                        *bool                               `json:"Visible,omitempty" xml:"Visible,omitempty"`
	InstanceType                   *string                             `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	BusinessType                   *string                             `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	SecondaryPrivateIpAddressCount *int32                              `json:"SecondaryPrivateIpAddressCount,omitempty" xml:"SecondaryPrivateIpAddressCount,omitempty"`
	QueueNumber                    *int32                              `json:"QueueNumber,omitempty" xml:"QueueNumber,omitempty"`
	ClientToken                    *string                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	SecurityGroupIds               []*string                           `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	PrivateIpAddress               []*string                           `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
}

func (s CreateNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceRequest) SetOwnerId(v int64) *CreateNetworkInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetResourceOwnerAccount(v string) *CreateNetworkInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetResourceOwnerId(v int64) *CreateNetworkInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetOwnerAccount(v string) *CreateNetworkInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetRegionId(v string) *CreateNetworkInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetTag(v []*CreateNetworkInterfaceRequestTag) *CreateNetworkInterfaceRequest {
	s.Tag = v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetResourceGroupId(v string) *CreateNetworkInterfaceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetVSwitchId(v string) *CreateNetworkInterfaceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetPrimaryIpAddress(v string) *CreateNetworkInterfaceRequest {
	s.PrimaryIpAddress = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetSecurityGroupId(v string) *CreateNetworkInterfaceRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetNetworkInterfaceName(v string) *CreateNetworkInterfaceRequest {
	s.NetworkInterfaceName = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetDescription(v string) *CreateNetworkInterfaceRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetVisible(v bool) *CreateNetworkInterfaceRequest {
	s.Visible = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetInstanceType(v string) *CreateNetworkInterfaceRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetBusinessType(v string) *CreateNetworkInterfaceRequest {
	s.BusinessType = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetSecondaryPrivateIpAddressCount(v int32) *CreateNetworkInterfaceRequest {
	s.SecondaryPrivateIpAddressCount = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetQueueNumber(v int32) *CreateNetworkInterfaceRequest {
	s.QueueNumber = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetClientToken(v string) *CreateNetworkInterfaceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetSecurityGroupIds(v []*string) *CreateNetworkInterfaceRequest {
	s.SecurityGroupIds = v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetPrivateIpAddress(v []*string) *CreateNetworkInterfaceRequest {
	s.PrivateIpAddress = v
	return s
}

type CreateNetworkInterfaceRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateNetworkInterfaceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceRequestTag) SetKey(v string) *CreateNetworkInterfaceRequestTag {
	s.Key = &v
	return s
}

func (s *CreateNetworkInterfaceRequestTag) SetValue(v string) *CreateNetworkInterfaceRequestTag {
	s.Value = &v
	return s
}

type CreateNetworkInterfaceResponseBody struct {
	Status               *string                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	Description          *string                                            `json:"Description,omitempty" xml:"Description,omitempty"`
	PrivateIpAddress     *string                                            `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	ServiceManaged       *bool                                              `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	RequestId            *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceGroupId      *string                                            `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId               *string                                            `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	VSwitchId            *string                                            `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NetworkInterfaceName *string                                            `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	MacAddress           *string                                            `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	NetworkInterfaceId   *string                                            `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	SecurityGroupIds     []*string                                          `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	ServiceID            *int64                                             `json:"ServiceID,omitempty" xml:"ServiceID,omitempty"`
	Type                 *string                                            `json:"Type,omitempty" xml:"Type,omitempty"`
	VpcId                *string                                            `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	OwnerId              *string                                            `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Tags                 []*CreateNetworkInterfaceResponseBodyTags          `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	PrivateIpSets        []*CreateNetworkInterfaceResponseBodyPrivateIpSets `json:"PrivateIpSets,omitempty" xml:"PrivateIpSets,omitempty" type:"Repeated"`
}

func (s CreateNetworkInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceResponseBody) SetStatus(v string) *CreateNetworkInterfaceResponseBody {
	s.Status = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetDescription(v string) *CreateNetworkInterfaceResponseBody {
	s.Description = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetPrivateIpAddress(v string) *CreateNetworkInterfaceResponseBody {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetServiceManaged(v bool) *CreateNetworkInterfaceResponseBody {
	s.ServiceManaged = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetRequestId(v string) *CreateNetworkInterfaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetResourceGroupId(v string) *CreateNetworkInterfaceResponseBody {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetZoneId(v string) *CreateNetworkInterfaceResponseBody {
	s.ZoneId = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetVSwitchId(v string) *CreateNetworkInterfaceResponseBody {
	s.VSwitchId = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetNetworkInterfaceName(v string) *CreateNetworkInterfaceResponseBody {
	s.NetworkInterfaceName = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetMacAddress(v string) *CreateNetworkInterfaceResponseBody {
	s.MacAddress = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetNetworkInterfaceId(v string) *CreateNetworkInterfaceResponseBody {
	s.NetworkInterfaceId = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetSecurityGroupIds(v []*string) *CreateNetworkInterfaceResponseBody {
	s.SecurityGroupIds = v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetServiceID(v int64) *CreateNetworkInterfaceResponseBody {
	s.ServiceID = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetType(v string) *CreateNetworkInterfaceResponseBody {
	s.Type = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetVpcId(v string) *CreateNetworkInterfaceResponseBody {
	s.VpcId = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetOwnerId(v string) *CreateNetworkInterfaceResponseBody {
	s.OwnerId = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetTags(v []*CreateNetworkInterfaceResponseBodyTags) *CreateNetworkInterfaceResponseBody {
	s.Tags = v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetPrivateIpSets(v []*CreateNetworkInterfaceResponseBodyPrivateIpSets) *CreateNetworkInterfaceResponseBody {
	s.PrivateIpSets = v
	return s
}

type CreateNetworkInterfaceResponseBodyTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s CreateNetworkInterfaceResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceResponseBodyTags) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceResponseBodyTags) SetTagValue(v string) *CreateNetworkInterfaceResponseBodyTags {
	s.TagValue = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBodyTags) SetTagKey(v string) *CreateNetworkInterfaceResponseBodyTags {
	s.TagKey = &v
	return s
}

type CreateNetworkInterfaceResponseBodyPrivateIpSets struct {
	Primary          *bool   `json:"Primary,omitempty" xml:"Primary,omitempty"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s CreateNetworkInterfaceResponseBodyPrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceResponseBodyPrivateIpSets) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceResponseBodyPrivateIpSets) SetPrimary(v bool) *CreateNetworkInterfaceResponseBodyPrivateIpSets {
	s.Primary = &v
	return s
}

func (s *CreateNetworkInterfaceResponseBodyPrivateIpSets) SetPrivateIpAddress(v string) *CreateNetworkInterfaceResponseBodyPrivateIpSets {
	s.PrivateIpAddress = &v
	return s
}

type CreateNetworkInterfaceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateNetworkInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceResponse) SetHeaders(v map[string]*string) *CreateNetworkInterfaceResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkInterfaceResponse) SetBody(v *CreateNetworkInterfaceResponseBody) *CreateNetworkInterfaceResponse {
	s.Body = v
	return s
}

type CreateNetworkInterfacePermissionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AccountId            *int64  `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	NetworkInterfaceId   *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	Permission           *string `json:"Permission,omitempty" xml:"Permission,omitempty"`
}

func (s CreateNetworkInterfacePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfacePermissionRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfacePermissionRequest) SetOwnerId(v int64) *CreateNetworkInterfacePermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetResourceOwnerAccount(v string) *CreateNetworkInterfacePermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetResourceOwnerId(v int64) *CreateNetworkInterfacePermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetOwnerAccount(v string) *CreateNetworkInterfacePermissionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetRegionId(v string) *CreateNetworkInterfacePermissionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetAccountId(v int64) *CreateNetworkInterfacePermissionRequest {
	s.AccountId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetNetworkInterfaceId(v string) *CreateNetworkInterfacePermissionRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetPermission(v string) *CreateNetworkInterfacePermissionRequest {
	s.Permission = &v
	return s
}

type CreateNetworkInterfacePermissionResponseBody struct {
	RequestId                  *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NetworkInterfacePermission *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission `json:"NetworkInterfacePermission,omitempty" xml:"NetworkInterfacePermission,omitempty" type:"Struct"`
}

func (s CreateNetworkInterfacePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfacePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfacePermissionResponseBody) SetRequestId(v string) *CreateNetworkInterfacePermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseBody) SetNetworkInterfacePermission(v *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission) *CreateNetworkInterfacePermissionResponseBody {
	s.NetworkInterfacePermission = v
	return s
}

type CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission struct {
	Permission                   *string `json:"Permission,omitempty" xml:"Permission,omitempty"`
	NetworkInterfaceId           *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	AccountId                    *int64  `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	NetworkInterfacePermissionId *string `json:"NetworkInterfacePermissionId,omitempty" xml:"NetworkInterfacePermissionId,omitempty"`
	ServiceName                  *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	PermissionState              *string `json:"PermissionState,omitempty" xml:"PermissionState,omitempty"`
}

func (s CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission) SetPermission(v string) *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission {
	s.Permission = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission) SetNetworkInterfaceId(v string) *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission {
	s.NetworkInterfaceId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission) SetAccountId(v int64) *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission {
	s.AccountId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission) SetNetworkInterfacePermissionId(v string) *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission {
	s.NetworkInterfacePermissionId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission) SetServiceName(v string) *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission {
	s.ServiceName = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission) SetPermissionState(v string) *CreateNetworkInterfacePermissionResponseBodyNetworkInterfacePermission {
	s.PermissionState = &v
	return s
}

type CreateNetworkInterfacePermissionResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateNetworkInterfacePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNetworkInterfacePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfacePermissionResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfacePermissionResponse) SetHeaders(v map[string]*string) *CreateNetworkInterfacePermissionResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkInterfacePermissionResponse) SetBody(v *CreateNetworkInterfacePermissionResponseBody) *CreateNetworkInterfacePermissionResponse {
	s.Body = v
	return s
}

type CreatePhysicalConnectionRequest struct {
	RegionId                      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AccessPointId                 *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	Type                          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	LineOperator                  *string `json:"LineOperator,omitempty" xml:"LineOperator,omitempty"`
	Bandwidth                     *int32  `json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	PeerLocation                  *string `json:"PeerLocation,omitempty" xml:"PeerLocation,omitempty"`
	PortType                      *string `json:"PortType,omitempty" xml:"PortType,omitempty"`
	RedundantPhysicalConnectionId *string `json:"RedundantPhysicalConnectionId,omitempty" xml:"RedundantPhysicalConnectionId,omitempty"`
	Description                   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	CircuitCode                   *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	ClientToken                   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId                       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount          *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId               *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr                      *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s CreatePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionRequest) SetRegionId(v string) *CreatePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetAccessPointId(v string) *CreatePhysicalConnectionRequest {
	s.AccessPointId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetType(v string) *CreatePhysicalConnectionRequest {
	s.Type = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetLineOperator(v string) *CreatePhysicalConnectionRequest {
	s.LineOperator = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetBandwidth(v int32) *CreatePhysicalConnectionRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetPeerLocation(v string) *CreatePhysicalConnectionRequest {
	s.PeerLocation = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetPortType(v string) *CreatePhysicalConnectionRequest {
	s.PortType = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetRedundantPhysicalConnectionId(v string) *CreatePhysicalConnectionRequest {
	s.RedundantPhysicalConnectionId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetDescription(v string) *CreatePhysicalConnectionRequest {
	s.Description = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetName(v string) *CreatePhysicalConnectionRequest {
	s.Name = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetCircuitCode(v string) *CreatePhysicalConnectionRequest {
	s.CircuitCode = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetClientToken(v string) *CreatePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetOwnerId(v int64) *CreatePhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetResourceOwnerAccount(v string) *CreatePhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetResourceOwnerId(v int64) *CreatePhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetOwnerAccount(v string) *CreatePhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetUserCidr(v string) *CreatePhysicalConnectionRequest {
	s.UserCidr = &v
	return s
}

type CreatePhysicalConnectionResponseBody struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty"`
}

func (s CreatePhysicalConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionResponseBody) SetRequestId(v string) *CreatePhysicalConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePhysicalConnectionResponseBody) SetPhysicalConnectionId(v string) *CreatePhysicalConnectionResponseBody {
	s.PhysicalConnectionId = &v
	return s
}

type CreatePhysicalConnectionResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreatePhysicalConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreatePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionResponse) SetHeaders(v map[string]*string) *CreatePhysicalConnectionResponse {
	s.Headers = v
	return s
}

func (s *CreatePhysicalConnectionResponse) SetBody(v *CreatePhysicalConnectionResponseBody) *CreatePhysicalConnectionResponse {
	s.Body = v
	return s
}

type CreateResource02Request struct {
	Status *string                          `json:"Status,omitempty" xml:"Status,omitempty"`
	Filter []*CreateResource02RequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s CreateResource02Request) String() string {
	return tea.Prettify(s)
}

func (s CreateResource02Request) GoString() string {
	return s.String()
}

func (s *CreateResource02Request) SetStatus(v string) *CreateResource02Request {
	s.Status = &v
	return s
}

func (s *CreateResource02Request) SetFilter(v []*CreateResource02RequestFilter) *CreateResource02Request {
	s.Filter = v
	return s
}

type CreateResource02RequestFilter struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateResource02RequestFilter) String() string {
	return tea.Prettify(s)
}

func (s CreateResource02RequestFilter) GoString() string {
	return s.String()
}

func (s *CreateResource02RequestFilter) SetKey(v string) *CreateResource02RequestFilter {
	s.Key = &v
	return s
}

func (s *CreateResource02RequestFilter) SetValue(v string) *CreateResource02RequestFilter {
	s.Value = &v
	return s
}

type CreateResource02ResponseBody struct {
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Ids       *string `json:"ids,omitempty" xml:"ids,omitempty"`
}

func (s CreateResource02ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResource02ResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResource02ResponseBody) SetStatus(v string) *CreateResource02ResponseBody {
	s.Status = &v
	return s
}

func (s *CreateResource02ResponseBody) SetRequestId(v string) *CreateResource02ResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateResource02ResponseBody) SetIds(v string) *CreateResource02ResponseBody {
	s.Ids = &v
	return s
}

type CreateResource02Response struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateResource02ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateResource02Response) String() string {
	return tea.Prettify(s)
}

func (s CreateResource02Response) GoString() string {
	return s.String()
}

func (s *CreateResource02Response) SetHeaders(v map[string]*string) *CreateResource02Response {
	s.Headers = v
	return s
}

func (s *CreateResource02Response) SetBody(v *CreateResource02ResponseBody) *CreateResource02Response {
	s.Body = v
	return s
}

type CreateRouteEntryRequest struct {
	OwnerId              *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouteTableId         *string                               `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	DestinationCidrBlock *string                               `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	NextHopId            *string                               `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	ClientToken          *string                               `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	NextHopType          *string                               `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
	OwnerAccount         *string                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	NextHopList          []*CreateRouteEntryRequestNextHopList `json:"NextHopList,omitempty" xml:"NextHopList,omitempty" type:"Repeated"`
}

func (s CreateRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryRequest) SetOwnerId(v int64) *CreateRouteEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetResourceOwnerAccount(v string) *CreateRouteEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateRouteEntryRequest) SetResourceOwnerId(v int64) *CreateRouteEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetRegionId(v string) *CreateRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetRouteTableId(v string) *CreateRouteEntryRequest {
	s.RouteTableId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetDestinationCidrBlock(v string) *CreateRouteEntryRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *CreateRouteEntryRequest) SetNextHopId(v string) *CreateRouteEntryRequest {
	s.NextHopId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetClientToken(v string) *CreateRouteEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateRouteEntryRequest) SetNextHopType(v string) *CreateRouteEntryRequest {
	s.NextHopType = &v
	return s
}

func (s *CreateRouteEntryRequest) SetOwnerAccount(v string) *CreateRouteEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateRouteEntryRequest) SetNextHopList(v []*CreateRouteEntryRequestNextHopList) *CreateRouteEntryRequest {
	s.NextHopList = v
	return s
}

type CreateRouteEntryRequestNextHopList struct {
	NextHopId   *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	NextHopType *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
}

func (s CreateRouteEntryRequestNextHopList) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryRequestNextHopList) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryRequestNextHopList) SetNextHopId(v string) *CreateRouteEntryRequestNextHopList {
	s.NextHopId = &v
	return s
}

func (s *CreateRouteEntryRequestNextHopList) SetNextHopType(v string) *CreateRouteEntryRequestNextHopList {
	s.NextHopType = &v
	return s
}

type CreateRouteEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateRouteEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryResponseBody) SetRequestId(v string) *CreateRouteEntryResponseBody {
	s.RequestId = &v
	return s
}

type CreateRouteEntryResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateRouteEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryResponse) SetHeaders(v map[string]*string) *CreateRouteEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateRouteEntryResponse) SetBody(v *CreateRouteEntryResponseBody) *CreateRouteEntryResponse {
	s.Body = v
	return s
}

type CreateRouterInterfaceRequest struct {
	RegionId                 *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Role                     *string `json:"Role,omitempty" xml:"Role,omitempty"`
	OppositeRegionId         *string `json:"OppositeRegionId,omitempty" xml:"OppositeRegionId,omitempty"`
	Spec                     *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	RouterType               *string `json:"RouterType,omitempty" xml:"RouterType,omitempty"`
	RouterId                 *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	OppositeInterfaceId      *string `json:"OppositeInterfaceId,omitempty" xml:"OppositeInterfaceId,omitempty"`
	OppositeRouterId         *string `json:"OppositeRouterId,omitempty" xml:"OppositeRouterId,omitempty"`
	OppositeRouterType       *string `json:"OppositeRouterType,omitempty" xml:"OppositeRouterType,omitempty"`
	OppositeInterfaceOwnerId *string `json:"OppositeInterfaceOwnerId,omitempty" xml:"OppositeInterfaceOwnerId,omitempty"`
	HealthCheckSourceIp      *string `json:"HealthCheckSourceIp,omitempty" xml:"HealthCheckSourceIp,omitempty"`
	HealthCheckTargetIp      *string `json:"HealthCheckTargetIp,omitempty" xml:"HealthCheckTargetIp,omitempty"`
	AccessPointId            *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	OppositeAccessPointId    *string `json:"OppositeAccessPointId,omitempty" xml:"OppositeAccessPointId,omitempty"`
	Description              *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Period                   *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	InstanceChargeType       *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	AutoPay                  *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	PricingCycle             *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	ClientToken              *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId                  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount             *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr                 *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s CreateRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *CreateRouterInterfaceRequest) SetRegionId(v string) *CreateRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetRole(v string) *CreateRouterInterfaceRequest {
	s.Role = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeRegionId(v string) *CreateRouterInterfaceRequest {
	s.OppositeRegionId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetSpec(v string) *CreateRouterInterfaceRequest {
	s.Spec = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetRouterType(v string) *CreateRouterInterfaceRequest {
	s.RouterType = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetRouterId(v string) *CreateRouterInterfaceRequest {
	s.RouterId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeInterfaceId(v string) *CreateRouterInterfaceRequest {
	s.OppositeInterfaceId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeRouterId(v string) *CreateRouterInterfaceRequest {
	s.OppositeRouterId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeRouterType(v string) *CreateRouterInterfaceRequest {
	s.OppositeRouterType = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeInterfaceOwnerId(v string) *CreateRouterInterfaceRequest {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetHealthCheckSourceIp(v string) *CreateRouterInterfaceRequest {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetHealthCheckTargetIp(v string) *CreateRouterInterfaceRequest {
	s.HealthCheckTargetIp = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetAccessPointId(v string) *CreateRouterInterfaceRequest {
	s.AccessPointId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeAccessPointId(v string) *CreateRouterInterfaceRequest {
	s.OppositeAccessPointId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetDescription(v string) *CreateRouterInterfaceRequest {
	s.Description = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetName(v string) *CreateRouterInterfaceRequest {
	s.Name = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetPeriod(v int32) *CreateRouterInterfaceRequest {
	s.Period = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetInstanceChargeType(v string) *CreateRouterInterfaceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetAutoPay(v bool) *CreateRouterInterfaceRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetPricingCycle(v string) *CreateRouterInterfaceRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetClientToken(v string) *CreateRouterInterfaceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOwnerId(v int64) *CreateRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetResourceOwnerAccount(v string) *CreateRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetResourceOwnerId(v int64) *CreateRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOwnerAccount(v string) *CreateRouterInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetUserCidr(v string) *CreateRouterInterfaceRequest {
	s.UserCidr = &v
	return s
}

type CreateRouterInterfaceResponseBody struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId           *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RouterInterfaceId *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty"`
}

func (s CreateRouterInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRouterInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRouterInterfaceResponseBody) SetRequestId(v string) *CreateRouterInterfaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRouterInterfaceResponseBody) SetOrderId(v int64) *CreateRouterInterfaceResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateRouterInterfaceResponseBody) SetRouterInterfaceId(v string) *CreateRouterInterfaceResponseBody {
	s.RouterInterfaceId = &v
	return s
}

type CreateRouterInterfaceResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateRouterInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *CreateRouterInterfaceResponse) SetHeaders(v map[string]*string) *CreateRouterInterfaceResponse {
	s.Headers = v
	return s
}

func (s *CreateRouterInterfaceResponse) SetBody(v *CreateRouterInterfaceResponseBody) *CreateRouterInterfaceResponse {
	s.Body = v
	return s
}

type CreateSecurityGroupRequest struct {
	OwnerId              *int64                           `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                          `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                           `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                          `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Description          *string                          `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken          *string                          `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	SecurityGroupName    *string                          `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	VpcId                *string                          `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	SecurityGroupType    *string                          `json:"SecurityGroupType,omitempty" xml:"SecurityGroupType,omitempty"`
	ServiceManaged       *bool                            `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	OwnerAccount         *string                          `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceGroupId      *string                          `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                  []*CreateSecurityGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupRequest) SetOwnerId(v int64) *CreateSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetResourceOwnerAccount(v string) *CreateSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetResourceOwnerId(v int64) *CreateSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetRegionId(v string) *CreateSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetDescription(v string) *CreateSecurityGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetClientToken(v string) *CreateSecurityGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetSecurityGroupName(v string) *CreateSecurityGroupRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetVpcId(v string) *CreateSecurityGroupRequest {
	s.VpcId = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetSecurityGroupType(v string) *CreateSecurityGroupRequest {
	s.SecurityGroupType = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetServiceManaged(v bool) *CreateSecurityGroupRequest {
	s.ServiceManaged = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetOwnerAccount(v string) *CreateSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetResourceGroupId(v string) *CreateSecurityGroupRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetTag(v []*CreateSecurityGroupRequestTag) *CreateSecurityGroupRequest {
	s.Tag = v
	return s
}

type CreateSecurityGroupRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateSecurityGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupRequestTag) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupRequestTag) SetKey(v string) *CreateSecurityGroupRequestTag {
	s.Key = &v
	return s
}

func (s *CreateSecurityGroupRequestTag) SetValue(v string) *CreateSecurityGroupRequestTag {
	s.Value = &v
	return s
}

type CreateSecurityGroupResponseBody struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s CreateSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupResponseBody) SetRequestId(v string) *CreateSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSecurityGroupResponseBody) SetSecurityGroupId(v string) *CreateSecurityGroupResponseBody {
	s.SecurityGroupId = &v
	return s
}

type CreateSecurityGroupResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupResponse) SetHeaders(v map[string]*string) *CreateSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateSecurityGroupResponse) SetBody(v *CreateSecurityGroupResponseBody) *CreateSecurityGroupResponse {
	s.Body = v
	return s
}

type CreateSimulatedSystemEventsRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EventType            *string   `json:"EventType,omitempty" xml:"EventType,omitempty"`
	NotBefore            *string   `json:"NotBefore,omitempty" xml:"NotBefore,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s CreateSimulatedSystemEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSimulatedSystemEventsRequest) GoString() string {
	return s.String()
}

func (s *CreateSimulatedSystemEventsRequest) SetOwnerId(v int64) *CreateSimulatedSystemEventsRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetResourceOwnerAccount(v string) *CreateSimulatedSystemEventsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetResourceOwnerId(v int64) *CreateSimulatedSystemEventsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetOwnerAccount(v string) *CreateSimulatedSystemEventsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetRegionId(v string) *CreateSimulatedSystemEventsRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetEventType(v string) *CreateSimulatedSystemEventsRequest {
	s.EventType = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetNotBefore(v string) *CreateSimulatedSystemEventsRequest {
	s.NotBefore = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetInstanceId(v []*string) *CreateSimulatedSystemEventsRequest {
	s.InstanceId = v
	return s
}

type CreateSimulatedSystemEventsResponseBody struct {
	RequestId  *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	EventIdSet []*string `json:"EventIdSet,omitempty" xml:"EventIdSet,omitempty" type:"Repeated"`
}

func (s CreateSimulatedSystemEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSimulatedSystemEventsResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSimulatedSystemEventsResponseBody) SetRequestId(v string) *CreateSimulatedSystemEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSimulatedSystemEventsResponseBody) SetEventIdSet(v []*string) *CreateSimulatedSystemEventsResponseBody {
	s.EventIdSet = v
	return s
}

type CreateSimulatedSystemEventsResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateSimulatedSystemEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSimulatedSystemEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSimulatedSystemEventsResponse) GoString() string {
	return s.String()
}

func (s *CreateSimulatedSystemEventsResponse) SetHeaders(v map[string]*string) *CreateSimulatedSystemEventsResponse {
	s.Headers = v
	return s
}

func (s *CreateSimulatedSystemEventsResponse) SetBody(v *CreateSimulatedSystemEventsResponseBody) *CreateSimulatedSystemEventsResponse {
	s.Body = v
	return s
}

type CreateSnapshotRequest struct {
	OwnerId                    *int64                      `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount       *string                     `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId            *int64                      `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DiskId                     *string                     `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	SnapshotName               *string                     `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	Description                *string                     `json:"Description,omitempty" xml:"Description,omitempty"`
	RetentionDays              *int32                      `json:"RetentionDays,omitempty" xml:"RetentionDays,omitempty"`
	Category                   *string                     `json:"Category,omitempty" xml:"Category,omitempty"`
	ClientToken                *string                     `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount               *string                     `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceGroupId            *string                     `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	InstantAccess              *bool                       `json:"InstantAccess,omitempty" xml:"InstantAccess,omitempty"`
	InstantAccessRetentionDays *int32                      `json:"InstantAccessRetentionDays,omitempty" xml:"InstantAccessRetentionDays,omitempty"`
	Tag                        []*CreateSnapshotRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotRequest) GoString() string {
	return s.String()
}

func (s *CreateSnapshotRequest) SetOwnerId(v int64) *CreateSnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSnapshotRequest) SetResourceOwnerAccount(v string) *CreateSnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSnapshotRequest) SetResourceOwnerId(v int64) *CreateSnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSnapshotRequest) SetDiskId(v string) *CreateSnapshotRequest {
	s.DiskId = &v
	return s
}

func (s *CreateSnapshotRequest) SetSnapshotName(v string) *CreateSnapshotRequest {
	s.SnapshotName = &v
	return s
}

func (s *CreateSnapshotRequest) SetDescription(v string) *CreateSnapshotRequest {
	s.Description = &v
	return s
}

func (s *CreateSnapshotRequest) SetRetentionDays(v int32) *CreateSnapshotRequest {
	s.RetentionDays = &v
	return s
}

func (s *CreateSnapshotRequest) SetCategory(v string) *CreateSnapshotRequest {
	s.Category = &v
	return s
}

func (s *CreateSnapshotRequest) SetClientToken(v string) *CreateSnapshotRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateSnapshotRequest) SetOwnerAccount(v string) *CreateSnapshotRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSnapshotRequest) SetResourceGroupId(v string) *CreateSnapshotRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateSnapshotRequest) SetInstantAccess(v bool) *CreateSnapshotRequest {
	s.InstantAccess = &v
	return s
}

func (s *CreateSnapshotRequest) SetInstantAccessRetentionDays(v int32) *CreateSnapshotRequest {
	s.InstantAccessRetentionDays = &v
	return s
}

func (s *CreateSnapshotRequest) SetTag(v []*CreateSnapshotRequestTag) *CreateSnapshotRequest {
	s.Tag = v
	return s
}

type CreateSnapshotRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateSnapshotRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotRequestTag) GoString() string {
	return s.String()
}

func (s *CreateSnapshotRequestTag) SetKey(v string) *CreateSnapshotRequestTag {
	s.Key = &v
	return s
}

func (s *CreateSnapshotRequestTag) SetValue(v string) *CreateSnapshotRequestTag {
	s.Value = &v
	return s
}

type CreateSnapshotResponseBody struct {
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSnapshotResponseBody) SetSnapshotId(v string) *CreateSnapshotResponseBody {
	s.SnapshotId = &v
	return s
}

func (s *CreateSnapshotResponseBody) SetRequestId(v string) *CreateSnapshotResponseBody {
	s.RequestId = &v
	return s
}

type CreateSnapshotResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotResponse) GoString() string {
	return s.String()
}

func (s *CreateSnapshotResponse) SetHeaders(v map[string]*string) *CreateSnapshotResponse {
	s.Headers = v
	return s
}

func (s *CreateSnapshotResponse) SetBody(v *CreateSnapshotResponseBody) *CreateSnapshotResponse {
	s.Body = v
	return s
}

type CreateStorageSetRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	StorageSetName       *string `json:"StorageSetName,omitempty" xml:"StorageSetName,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	MaxPartitionNumber   *int32  `json:"MaxPartitionNumber,omitempty" xml:"MaxPartitionNumber,omitempty"`
}

func (s CreateStorageSetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageSetRequest) GoString() string {
	return s.String()
}

func (s *CreateStorageSetRequest) SetOwnerId(v int64) *CreateStorageSetRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateStorageSetRequest) SetResourceOwnerAccount(v string) *CreateStorageSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateStorageSetRequest) SetResourceOwnerId(v int64) *CreateStorageSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateStorageSetRequest) SetOwnerAccount(v string) *CreateStorageSetRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateStorageSetRequest) SetClientToken(v string) *CreateStorageSetRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateStorageSetRequest) SetRegionId(v string) *CreateStorageSetRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStorageSetRequest) SetZoneId(v string) *CreateStorageSetRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateStorageSetRequest) SetStorageSetName(v string) *CreateStorageSetRequest {
	s.StorageSetName = &v
	return s
}

func (s *CreateStorageSetRequest) SetDescription(v string) *CreateStorageSetRequest {
	s.Description = &v
	return s
}

func (s *CreateStorageSetRequest) SetMaxPartitionNumber(v int32) *CreateStorageSetRequest {
	s.MaxPartitionNumber = &v
	return s
}

type CreateStorageSetResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StorageSetId *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
}

func (s CreateStorageSetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageSetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStorageSetResponseBody) SetRequestId(v string) *CreateStorageSetResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStorageSetResponseBody) SetStorageSetId(v string) *CreateStorageSetResponseBody {
	s.StorageSetId = &v
	return s
}

type CreateStorageSetResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateStorageSetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateStorageSetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageSetResponse) GoString() string {
	return s.String()
}

func (s *CreateStorageSetResponse) SetHeaders(v map[string]*string) *CreateStorageSetResponse {
	s.Headers = v
	return s
}

func (s *CreateStorageSetResponse) SetBody(v *CreateStorageSetResponseBody) *CreateStorageSetResponse {
	s.Body = v
	return s
}

type CreateVirtualBorderRouterRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty"`
	VbrOwnerId           *int64  `json:"VbrOwnerId,omitempty" xml:"VbrOwnerId,omitempty"`
	VlanId               *int32  `json:"VlanId,omitempty" xml:"VlanId,omitempty"`
	CircuitCode          *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	LocalGatewayIp       *string `json:"LocalGatewayIp,omitempty" xml:"LocalGatewayIp,omitempty"`
	PeerGatewayIp        *string `json:"PeerGatewayIp,omitempty" xml:"PeerGatewayIp,omitempty"`
	PeeringSubnetMask    *string `json:"PeeringSubnetMask,omitempty" xml:"PeeringSubnetMask,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s CreateVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *CreateVirtualBorderRouterRequest) SetRegionId(v string) *CreateVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPhysicalConnectionId(v string) *CreateVirtualBorderRouterRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetVbrOwnerId(v int64) *CreateVirtualBorderRouterRequest {
	s.VbrOwnerId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetVlanId(v int32) *CreateVirtualBorderRouterRequest {
	s.VlanId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetCircuitCode(v string) *CreateVirtualBorderRouterRequest {
	s.CircuitCode = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetLocalGatewayIp(v string) *CreateVirtualBorderRouterRequest {
	s.LocalGatewayIp = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPeerGatewayIp(v string) *CreateVirtualBorderRouterRequest {
	s.PeerGatewayIp = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPeeringSubnetMask(v string) *CreateVirtualBorderRouterRequest {
	s.PeeringSubnetMask = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetDescription(v string) *CreateVirtualBorderRouterRequest {
	s.Description = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetName(v string) *CreateVirtualBorderRouterRequest {
	s.Name = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetClientToken(v string) *CreateVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetOwnerId(v int64) *CreateVirtualBorderRouterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetResourceOwnerAccount(v string) *CreateVirtualBorderRouterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetResourceOwnerId(v int64) *CreateVirtualBorderRouterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetOwnerAccount(v string) *CreateVirtualBorderRouterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetUserCidr(v string) *CreateVirtualBorderRouterRequest {
	s.UserCidr = &v
	return s
}

type CreateVirtualBorderRouterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VbrId     *string `json:"VbrId,omitempty" xml:"VbrId,omitempty"`
}

func (s CreateVirtualBorderRouterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVirtualBorderRouterResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVirtualBorderRouterResponseBody) SetRequestId(v string) *CreateVirtualBorderRouterResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVirtualBorderRouterResponseBody) SetVbrId(v string) *CreateVirtualBorderRouterResponseBody {
	s.VbrId = &v
	return s
}

type CreateVirtualBorderRouterResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateVirtualBorderRouterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *CreateVirtualBorderRouterResponse) SetHeaders(v map[string]*string) *CreateVirtualBorderRouterResponse {
	s.Headers = v
	return s
}

func (s *CreateVirtualBorderRouterResponse) SetBody(v *CreateVirtualBorderRouterResponseBody) *CreateVirtualBorderRouterResponse {
	s.Body = v
	return s
}

type CreateVpcRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CidrBlock            *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	VpcName              *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s CreateVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcRequest) GoString() string {
	return s.String()
}

func (s *CreateVpcRequest) SetOwnerId(v int64) *CreateVpcRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateVpcRequest) SetResourceOwnerAccount(v string) *CreateVpcRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateVpcRequest) SetResourceOwnerId(v int64) *CreateVpcRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateVpcRequest) SetRegionId(v string) *CreateVpcRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVpcRequest) SetCidrBlock(v string) *CreateVpcRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateVpcRequest) SetVpcName(v string) *CreateVpcRequest {
	s.VpcName = &v
	return s
}

func (s *CreateVpcRequest) SetDescription(v string) *CreateVpcRequest {
	s.Description = &v
	return s
}

func (s *CreateVpcRequest) SetClientToken(v string) *CreateVpcRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVpcRequest) SetOwnerAccount(v string) *CreateVpcRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateVpcRequest) SetUserCidr(v string) *CreateVpcRequest {
	s.UserCidr = &v
	return s
}

type CreateVpcResponseBody struct {
	VRouterId    *string `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateVpcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVpcResponseBody) SetVRouterId(v string) *CreateVpcResponseBody {
	s.VRouterId = &v
	return s
}

func (s *CreateVpcResponseBody) SetRouteTableId(v string) *CreateVpcResponseBody {
	s.RouteTableId = &v
	return s
}

func (s *CreateVpcResponseBody) SetVpcId(v string) *CreateVpcResponseBody {
	s.VpcId = &v
	return s
}

func (s *CreateVpcResponseBody) SetRequestId(v string) *CreateVpcResponseBody {
	s.RequestId = &v
	return s
}

type CreateVpcResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateVpcResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcResponse) GoString() string {
	return s.String()
}

func (s *CreateVpcResponse) SetHeaders(v map[string]*string) *CreateVpcResponse {
	s.Headers = v
	return s
}

func (s *CreateVpcResponse) SetBody(v *CreateVpcResponseBody) *CreateVpcResponse {
	s.Body = v
	return s
}

type CreateVSwitchRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	CidrBlock            *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VSwitchName          *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CreateVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchRequest) GoString() string {
	return s.String()
}

func (s *CreateVSwitchRequest) SetOwnerId(v int64) *CreateVSwitchRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateVSwitchRequest) SetResourceOwnerAccount(v string) *CreateVSwitchRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateVSwitchRequest) SetResourceOwnerId(v int64) *CreateVSwitchRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateVSwitchRequest) SetZoneId(v string) *CreateVSwitchRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateVSwitchRequest) SetCidrBlock(v string) *CreateVSwitchRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateVSwitchRequest) SetVpcId(v string) *CreateVSwitchRequest {
	s.VpcId = &v
	return s
}

func (s *CreateVSwitchRequest) SetRegionId(v string) *CreateVSwitchRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVSwitchRequest) SetVSwitchName(v string) *CreateVSwitchRequest {
	s.VSwitchName = &v
	return s
}

func (s *CreateVSwitchRequest) SetDescription(v string) *CreateVSwitchRequest {
	s.Description = &v
	return s
}

func (s *CreateVSwitchRequest) SetClientToken(v string) *CreateVSwitchRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVSwitchRequest) SetOwnerAccount(v string) *CreateVSwitchRequest {
	s.OwnerAccount = &v
	return s
}

type CreateVSwitchResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateVSwitchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVSwitchResponseBody) SetRequestId(v string) *CreateVSwitchResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVSwitchResponseBody) SetVSwitchId(v string) *CreateVSwitchResponseBody {
	s.VSwitchId = &v
	return s
}

type CreateVSwitchResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateVSwitchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchResponse) GoString() string {
	return s.String()
}

func (s *CreateVSwitchResponse) SetHeaders(v map[string]*string) *CreateVSwitchResponse {
	s.Headers = v
	return s
}

func (s *CreateVSwitchResponse) SetBody(v *CreateVSwitchResponseBody) *CreateVSwitchResponse {
	s.Body = v
	return s
}

type DeactivateRouterInterfaceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouterInterfaceId    *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty"`
}

func (s DeactivateRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeactivateRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DeactivateRouterInterfaceRequest) SetOwnerId(v int64) *DeactivateRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeactivateRouterInterfaceRequest) SetResourceOwnerAccount(v string) *DeactivateRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeactivateRouterInterfaceRequest) SetResourceOwnerId(v int64) *DeactivateRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeactivateRouterInterfaceRequest) SetRegionId(v string) *DeactivateRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeactivateRouterInterfaceRequest) SetRouterInterfaceId(v string) *DeactivateRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

type DeactivateRouterInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeactivateRouterInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeactivateRouterInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeactivateRouterInterfaceResponseBody) SetRequestId(v string) *DeactivateRouterInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type DeactivateRouterInterfaceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeactivateRouterInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeactivateRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeactivateRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DeactivateRouterInterfaceResponse) SetHeaders(v map[string]*string) *DeactivateRouterInterfaceResponse {
	s.Headers = v
	return s
}

func (s *DeactivateRouterInterfaceResponse) SetBody(v *DeactivateRouterInterfaceResponseBody) *DeactivateRouterInterfaceResponse {
	s.Body = v
	return s
}

type DeleteAutoProvisioningGroupRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AutoProvisioningGroupId *string `json:"AutoProvisioningGroupId,omitempty" xml:"AutoProvisioningGroupId,omitempty"`
	TerminateInstances      *bool   `json:"TerminateInstances,omitempty" xml:"TerminateInstances,omitempty"`
}

func (s DeleteAutoProvisioningGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoProvisioningGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteAutoProvisioningGroupRequest) SetOwnerId(v int64) *DeleteAutoProvisioningGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetResourceOwnerAccount(v string) *DeleteAutoProvisioningGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetResourceOwnerId(v int64) *DeleteAutoProvisioningGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetOwnerAccount(v string) *DeleteAutoProvisioningGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetRegionId(v string) *DeleteAutoProvisioningGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetAutoProvisioningGroupId(v string) *DeleteAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupId = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetTerminateInstances(v bool) *DeleteAutoProvisioningGroupRequest {
	s.TerminateInstances = &v
	return s
}

type DeleteAutoProvisioningGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAutoProvisioningGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoProvisioningGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAutoProvisioningGroupResponseBody) SetRequestId(v string) *DeleteAutoProvisioningGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAutoProvisioningGroupResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteAutoProvisioningGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAutoProvisioningGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoProvisioningGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteAutoProvisioningGroupResponse) SetHeaders(v map[string]*string) *DeleteAutoProvisioningGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteAutoProvisioningGroupResponse) SetBody(v *DeleteAutoProvisioningGroupResponseBody) *DeleteAutoProvisioningGroupResponse {
	s.Body = v
	return s
}

type DeleteAutoSnapshotPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"regionId,omitempty" xml:"regionId,omitempty"`
	AutoSnapshotPolicyId *string `json:"autoSnapshotPolicyId,omitempty" xml:"autoSnapshotPolicyId,omitempty"`
}

func (s DeleteAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *DeleteAutoSnapshotPolicyRequest) SetOwnerId(v int64) *DeleteAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *DeleteAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *DeleteAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteAutoSnapshotPolicyRequest) SetRegionId(v string) *DeleteAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteAutoSnapshotPolicyRequest) SetAutoSnapshotPolicyId(v string) *DeleteAutoSnapshotPolicyRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

type DeleteAutoSnapshotPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAutoSnapshotPolicyResponseBody) SetRequestId(v string) *DeleteAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAutoSnapshotPolicyResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *DeleteAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *DeleteAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *DeleteAutoSnapshotPolicyResponse) SetBody(v *DeleteAutoSnapshotPolicyResponseBody) *DeleteAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type DeleteBandwidthPackageRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BandwidthPackageId   *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty"`
}

func (s DeleteBandwidthPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBandwidthPackageRequest) GoString() string {
	return s.String()
}

func (s *DeleteBandwidthPackageRequest) SetOwnerId(v int64) *DeleteBandwidthPackageRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetResourceOwnerAccount(v string) *DeleteBandwidthPackageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetResourceOwnerId(v int64) *DeleteBandwidthPackageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetOwnerAccount(v string) *DeleteBandwidthPackageRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetRegionId(v string) *DeleteBandwidthPackageRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetBandwidthPackageId(v string) *DeleteBandwidthPackageRequest {
	s.BandwidthPackageId = &v
	return s
}

type DeleteBandwidthPackageResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBandwidthPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBandwidthPackageResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBandwidthPackageResponseBody) SetRequestId(v string) *DeleteBandwidthPackageResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBandwidthPackageResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteBandwidthPackageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteBandwidthPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBandwidthPackageResponse) GoString() string {
	return s.String()
}

func (s *DeleteBandwidthPackageResponse) SetHeaders(v map[string]*string) *DeleteBandwidthPackageResponse {
	s.Headers = v
	return s
}

func (s *DeleteBandwidthPackageResponse) SetBody(v *DeleteBandwidthPackageResponseBody) *DeleteBandwidthPackageResponse {
	s.Body = v
	return s
}

type DeleteCommandRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CommandId            *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
}

func (s DeleteCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCommandRequest) GoString() string {
	return s.String()
}

func (s *DeleteCommandRequest) SetOwnerId(v int64) *DeleteCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCommandRequest) SetResourceOwnerAccount(v string) *DeleteCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteCommandRequest) SetResourceOwnerId(v int64) *DeleteCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteCommandRequest) SetOwnerAccount(v string) *DeleteCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteCommandRequest) SetRegionId(v string) *DeleteCommandRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCommandRequest) SetCommandId(v string) *DeleteCommandRequest {
	s.CommandId = &v
	return s
}

type DeleteCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCommandResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCommandResponseBody) SetRequestId(v string) *DeleteCommandResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCommandResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCommandResponse) GoString() string {
	return s.String()
}

func (s *DeleteCommandResponse) SetHeaders(v map[string]*string) *DeleteCommandResponse {
	s.Headers = v
	return s
}

func (s *DeleteCommandResponse) SetBody(v *DeleteCommandResponseBody) *DeleteCommandResponse {
	s.Body = v
	return s
}

type DeleteDedicatedHostClusterRequest struct {
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
}

func (s DeleteDedicatedHostClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostClusterRequest) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostClusterRequest) SetOwnerId(v int64) *DeleteDedicatedHostClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetResourceOwnerAccount(v string) *DeleteDedicatedHostClusterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetResourceOwnerId(v int64) *DeleteDedicatedHostClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetOwnerAccount(v string) *DeleteDedicatedHostClusterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetRegionId(v string) *DeleteDedicatedHostClusterRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetDedicatedHostClusterId(v string) *DeleteDedicatedHostClusterRequest {
	s.DedicatedHostClusterId = &v
	return s
}

type DeleteDedicatedHostClusterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDedicatedHostClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostClusterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostClusterResponseBody) SetRequestId(v string) *DeleteDedicatedHostClusterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDedicatedHostClusterResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDedicatedHostClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDedicatedHostClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostClusterResponse) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostClusterResponse) SetHeaders(v map[string]*string) *DeleteDedicatedHostClusterResponse {
	s.Headers = v
	return s
}

func (s *DeleteDedicatedHostClusterResponse) SetBody(v *DeleteDedicatedHostClusterResponseBody) *DeleteDedicatedHostClusterResponse {
	s.Body = v
	return s
}

type DeleteDemandRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DemandId             *string `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
	Reason               *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s DeleteDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDemandRequest) GoString() string {
	return s.String()
}

func (s *DeleteDemandRequest) SetOwnerId(v int64) *DeleteDemandRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDemandRequest) SetResourceOwnerAccount(v string) *DeleteDemandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDemandRequest) SetResourceOwnerId(v int64) *DeleteDemandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDemandRequest) SetOwnerAccount(v string) *DeleteDemandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDemandRequest) SetClientToken(v string) *DeleteDemandRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteDemandRequest) SetRegionId(v string) *DeleteDemandRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDemandRequest) SetDemandId(v string) *DeleteDemandRequest {
	s.DemandId = &v
	return s
}

func (s *DeleteDemandRequest) SetReason(v string) *DeleteDemandRequest {
	s.Reason = &v
	return s
}

type DeleteDemandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDemandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDemandResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDemandResponseBody) SetRequestId(v string) *DeleteDemandResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDemandResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDemandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDemandResponse) GoString() string {
	return s.String()
}

func (s *DeleteDemandResponse) SetHeaders(v map[string]*string) *DeleteDemandResponse {
	s.Headers = v
	return s
}

func (s *DeleteDemandResponse) SetBody(v *DeleteDemandResponseBody) *DeleteDemandResponse {
	s.Body = v
	return s
}

type DeleteDeploymentSetRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DeploymentSetId      *string `json:"DeploymentSetId,omitempty" xml:"DeploymentSetId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteDeploymentSetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeploymentSetRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeploymentSetRequest) SetOwnerId(v int64) *DeleteDeploymentSetRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetResourceOwnerAccount(v string) *DeleteDeploymentSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetResourceOwnerId(v int64) *DeleteDeploymentSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetRegionId(v string) *DeleteDeploymentSetRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetDeploymentSetId(v string) *DeleteDeploymentSetRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetOwnerAccount(v string) *DeleteDeploymentSetRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteDeploymentSetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDeploymentSetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeploymentSetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeploymentSetResponseBody) SetRequestId(v string) *DeleteDeploymentSetResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDeploymentSetResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDeploymentSetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeploymentSetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeploymentSetResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeploymentSetResponse) SetHeaders(v map[string]*string) *DeleteDeploymentSetResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeploymentSetResponse) SetBody(v *DeleteDeploymentSetResponseBody) *DeleteDeploymentSetResponse {
	s.Body = v
	return s
}

type DeleteDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DiskId               *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDiskRequest) GoString() string {
	return s.String()
}

func (s *DeleteDiskRequest) SetOwnerId(v int64) *DeleteDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDiskRequest) SetResourceOwnerAccount(v string) *DeleteDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDiskRequest) SetResourceOwnerId(v int64) *DeleteDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDiskRequest) SetDiskId(v string) *DeleteDiskRequest {
	s.DiskId = &v
	return s
}

func (s *DeleteDiskRequest) SetOwnerAccount(v string) *DeleteDiskRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteDiskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDiskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDiskResponseBody) SetRequestId(v string) *DeleteDiskResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDiskResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDiskResponse) GoString() string {
	return s.String()
}

func (s *DeleteDiskResponse) SetHeaders(v map[string]*string) *DeleteDiskResponse {
	s.Headers = v
	return s
}

func (s *DeleteDiskResponse) SetBody(v *DeleteDiskResponseBody) *DeleteDiskResponse {
	s.Body = v
	return s
}

type DeleteForwardEntryRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ForwardTableId       *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty"`
	ForwardEntryId       *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
}

func (s DeleteForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryRequest) SetOwnerId(v int64) *DeleteForwardEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetResourceOwnerAccount(v string) *DeleteForwardEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetResourceOwnerId(v int64) *DeleteForwardEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetOwnerAccount(v string) *DeleteForwardEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetRegionId(v string) *DeleteForwardEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetForwardTableId(v string) *DeleteForwardEntryRequest {
	s.ForwardTableId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetForwardEntryId(v string) *DeleteForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

type DeleteForwardEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteForwardEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryResponseBody) SetRequestId(v string) *DeleteForwardEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteForwardEntryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteForwardEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryResponse) SetHeaders(v map[string]*string) *DeleteForwardEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteForwardEntryResponse) SetBody(v *DeleteForwardEntryResponseBody) *DeleteForwardEntryResponse {
	s.Body = v
	return s
}

type DeleteHaVipRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	HaVipId              *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
}

func (s DeleteHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipRequest) GoString() string {
	return s.String()
}

func (s *DeleteHaVipRequest) SetOwnerId(v int64) *DeleteHaVipRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteHaVipRequest) SetResourceOwnerAccount(v string) *DeleteHaVipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteHaVipRequest) SetResourceOwnerId(v int64) *DeleteHaVipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteHaVipRequest) SetOwnerAccount(v string) *DeleteHaVipRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteHaVipRequest) SetClientToken(v string) *DeleteHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteHaVipRequest) SetRegionId(v string) *DeleteHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteHaVipRequest) SetHaVipId(v string) *DeleteHaVipRequest {
	s.HaVipId = &v
	return s
}

type DeleteHaVipResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHaVipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHaVipResponseBody) SetRequestId(v string) *DeleteHaVipResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHaVipResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteHaVipResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipResponse) GoString() string {
	return s.String()
}

func (s *DeleteHaVipResponse) SetHeaders(v map[string]*string) *DeleteHaVipResponse {
	s.Headers = v
	return s
}

func (s *DeleteHaVipResponse) SetBody(v *DeleteHaVipResponseBody) *DeleteHaVipResponse {
	s.Body = v
	return s
}

type DeleteHpcClusterRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	HpcClusterId         *string `json:"HpcClusterId,omitempty" xml:"HpcClusterId,omitempty"`
}

func (s DeleteHpcClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHpcClusterRequest) GoString() string {
	return s.String()
}

func (s *DeleteHpcClusterRequest) SetOwnerId(v int64) *DeleteHpcClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetResourceOwnerAccount(v string) *DeleteHpcClusterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetResourceOwnerId(v int64) *DeleteHpcClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetRegionId(v string) *DeleteHpcClusterRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetClientToken(v string) *DeleteHpcClusterRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetOwnerAccount(v string) *DeleteHpcClusterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetHpcClusterId(v string) *DeleteHpcClusterRequest {
	s.HpcClusterId = &v
	return s
}

type DeleteHpcClusterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHpcClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHpcClusterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHpcClusterResponseBody) SetRequestId(v string) *DeleteHpcClusterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHpcClusterResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteHpcClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteHpcClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHpcClusterResponse) GoString() string {
	return s.String()
}

func (s *DeleteHpcClusterResponse) SetHeaders(v map[string]*string) *DeleteHpcClusterResponse {
	s.Headers = v
	return s
}

func (s *DeleteHpcClusterResponse) SetBody(v *DeleteHpcClusterResponseBody) *DeleteHpcClusterResponse {
	s.Body = v
	return s
}

type DeleteImageRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageId              *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	Force                *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteImageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageRequest) GoString() string {
	return s.String()
}

func (s *DeleteImageRequest) SetOwnerId(v int64) *DeleteImageRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteImageRequest) SetResourceOwnerAccount(v string) *DeleteImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteImageRequest) SetResourceOwnerId(v int64) *DeleteImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteImageRequest) SetRegionId(v string) *DeleteImageRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteImageRequest) SetImageId(v string) *DeleteImageRequest {
	s.ImageId = &v
	return s
}

func (s *DeleteImageRequest) SetForce(v bool) *DeleteImageRequest {
	s.Force = &v
	return s
}

func (s *DeleteImageRequest) SetOwnerAccount(v string) *DeleteImageRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteImageResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteImageResponseBody) SetRequestId(v string) *DeleteImageResponseBody {
	s.RequestId = &v
	return s
}

type DeleteImageResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteImageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageResponse) GoString() string {
	return s.String()
}

func (s *DeleteImageResponse) SetHeaders(v map[string]*string) *DeleteImageResponse {
	s.Headers = v
	return s
}

func (s *DeleteImageResponse) SetBody(v *DeleteImageResponseBody) *DeleteImageResponse {
	s.Body = v
	return s
}

type DeleteInstanceRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId            *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Force                 *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
	TerminateSubscription *bool   `json:"TerminateSubscription,omitempty" xml:"TerminateSubscription,omitempty"`
}

func (s DeleteInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstanceRequest) SetOwnerId(v int64) *DeleteInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteInstanceRequest) SetResourceOwnerAccount(v string) *DeleteInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteInstanceRequest) SetResourceOwnerId(v int64) *DeleteInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteInstanceRequest) SetInstanceId(v string) *DeleteInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteInstanceRequest) SetOwnerAccount(v string) *DeleteInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteInstanceRequest) SetForce(v bool) *DeleteInstanceRequest {
	s.Force = &v
	return s
}

func (s *DeleteInstanceRequest) SetTerminateSubscription(v bool) *DeleteInstanceRequest {
	s.TerminateSubscription = &v
	return s
}

type DeleteInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponseBody) SetRequestId(v string) *DeleteInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteInstanceResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponse) SetHeaders(v map[string]*string) *DeleteInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstanceResponse) SetBody(v *DeleteInstanceResponseBody) *DeleteInstanceResponse {
	s.Body = v
	return s
}

type DeleteInstancesRequest struct {
	OwnerId               *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DryRun                *bool     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	OwnerAccount          *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Force                 *bool     `json:"Force,omitempty" xml:"Force,omitempty"`
	TerminateSubscription *bool     `json:"TerminateSubscription,omitempty" xml:"TerminateSubscription,omitempty"`
	ClientToken           *string   `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId              *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId            []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s DeleteInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstancesRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstancesRequest) SetOwnerId(v int64) *DeleteInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteInstancesRequest) SetResourceOwnerAccount(v string) *DeleteInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteInstancesRequest) SetResourceOwnerId(v int64) *DeleteInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteInstancesRequest) SetDryRun(v bool) *DeleteInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *DeleteInstancesRequest) SetOwnerAccount(v string) *DeleteInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteInstancesRequest) SetForce(v bool) *DeleteInstancesRequest {
	s.Force = &v
	return s
}

func (s *DeleteInstancesRequest) SetTerminateSubscription(v bool) *DeleteInstancesRequest {
	s.TerminateSubscription = &v
	return s
}

func (s *DeleteInstancesRequest) SetClientToken(v string) *DeleteInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteInstancesRequest) SetRegionId(v string) *DeleteInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteInstancesRequest) SetInstanceId(v []*string) *DeleteInstancesRequest {
	s.InstanceId = v
	return s
}

type DeleteInstancesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstancesResponseBody) SetRequestId(v string) *DeleteInstancesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteInstancesResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstancesResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstancesResponse) SetHeaders(v map[string]*string) *DeleteInstancesResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstancesResponse) SetBody(v *DeleteInstancesResponseBody) *DeleteInstancesResponse {
	s.Body = v
	return s
}

type DeleteKeyPairsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	KeyPairNames         *string `json:"KeyPairNames,omitempty" xml:"KeyPairNames,omitempty"`
}

func (s DeleteKeyPairsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsRequest) SetOwnerId(v int64) *DeleteKeyPairsRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetResourceOwnerAccount(v string) *DeleteKeyPairsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetResourceOwnerId(v int64) *DeleteKeyPairsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetRegionId(v string) *DeleteKeyPairsRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetKeyPairNames(v string) *DeleteKeyPairsRequest {
	s.KeyPairNames = &v
	return s
}

type DeleteKeyPairsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteKeyPairsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsResponseBody) SetRequestId(v string) *DeleteKeyPairsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteKeyPairsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteKeyPairsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteKeyPairsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsResponse) SetHeaders(v map[string]*string) *DeleteKeyPairsResponse {
	s.Headers = v
	return s
}

func (s *DeleteKeyPairsResponse) SetBody(v *DeleteKeyPairsResponseBody) *DeleteKeyPairsResponse {
	s.Body = v
	return s
}

type DeleteLaunchTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LaunchTemplateId     *string `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	LaunchTemplateName   *string `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty"`
}

func (s DeleteLaunchTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateRequest) SetOwnerId(v int64) *DeleteLaunchTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetResourceOwnerAccount(v string) *DeleteLaunchTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetResourceOwnerId(v int64) *DeleteLaunchTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetOwnerAccount(v string) *DeleteLaunchTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetRegionId(v string) *DeleteLaunchTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetLaunchTemplateId(v string) *DeleteLaunchTemplateRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetLaunchTemplateName(v string) *DeleteLaunchTemplateRequest {
	s.LaunchTemplateName = &v
	return s
}

type DeleteLaunchTemplateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLaunchTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateResponseBody) SetRequestId(v string) *DeleteLaunchTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLaunchTemplateResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLaunchTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLaunchTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateResponse) SetHeaders(v map[string]*string) *DeleteLaunchTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteLaunchTemplateResponse) SetBody(v *DeleteLaunchTemplateResponseBody) *DeleteLaunchTemplateResponse {
	s.Body = v
	return s
}

type DeleteLaunchTemplateVersionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LaunchTemplateId     *string `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	LaunchTemplateName   *string `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty"`
	DeleteVersion        []*int  `json:"DeleteVersion,omitempty" xml:"DeleteVersion,omitempty" type:"Repeated"`
}

func (s DeleteLaunchTemplateVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateVersionRequest) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateVersionRequest) SetOwnerId(v int64) *DeleteLaunchTemplateVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetResourceOwnerAccount(v string) *DeleteLaunchTemplateVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetResourceOwnerId(v int64) *DeleteLaunchTemplateVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetOwnerAccount(v string) *DeleteLaunchTemplateVersionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetRegionId(v string) *DeleteLaunchTemplateVersionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetLaunchTemplateId(v string) *DeleteLaunchTemplateVersionRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetLaunchTemplateName(v string) *DeleteLaunchTemplateVersionRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetDeleteVersion(v []*int) *DeleteLaunchTemplateVersionRequest {
	s.DeleteVersion = v
	return s
}

type DeleteLaunchTemplateVersionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLaunchTemplateVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateVersionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateVersionResponseBody) SetRequestId(v string) *DeleteLaunchTemplateVersionResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLaunchTemplateVersionResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLaunchTemplateVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLaunchTemplateVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateVersionResponse) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateVersionResponse) SetHeaders(v map[string]*string) *DeleteLaunchTemplateVersionResponse {
	s.Headers = v
	return s
}

func (s *DeleteLaunchTemplateVersionResponse) SetBody(v *DeleteLaunchTemplateVersionResponseBody) *DeleteLaunchTemplateVersionResponse {
	s.Body = v
	return s
}

type DeleteNatGatewayRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NatGatewayId         *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
}

func (s DeleteNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayRequest) SetOwnerId(v int64) *DeleteNatGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetResourceOwnerAccount(v string) *DeleteNatGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetResourceOwnerId(v int64) *DeleteNatGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetOwnerAccount(v string) *DeleteNatGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetRegionId(v string) *DeleteNatGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetNatGatewayId(v string) *DeleteNatGatewayRequest {
	s.NatGatewayId = &v
	return s
}

type DeleteNatGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNatGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayResponseBody) SetRequestId(v string) *DeleteNatGatewayResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNatGatewayResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteNatGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayResponse) SetHeaders(v map[string]*string) *DeleteNatGatewayResponse {
	s.Headers = v
	return s
}

func (s *DeleteNatGatewayResponse) SetBody(v *DeleteNatGatewayResponseBody) *DeleteNatGatewayResponse {
	s.Body = v
	return s
}

type DeleteNetworkInterfaceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfaceId   *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
}

func (s DeleteNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfaceRequest) SetOwnerId(v int64) *DeleteNetworkInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetResourceOwnerAccount(v string) *DeleteNetworkInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetResourceOwnerId(v int64) *DeleteNetworkInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetOwnerAccount(v string) *DeleteNetworkInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetRegionId(v string) *DeleteNetworkInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetNetworkInterfaceId(v string) *DeleteNetworkInterfaceRequest {
	s.NetworkInterfaceId = &v
	return s
}

type DeleteNetworkInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfaceResponseBody) SetRequestId(v string) *DeleteNetworkInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkInterfaceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteNetworkInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfaceResponse) SetHeaders(v map[string]*string) *DeleteNetworkInterfaceResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkInterfaceResponse) SetBody(v *DeleteNetworkInterfaceResponseBody) *DeleteNetworkInterfaceResponse {
	s.Body = v
	return s
}

type DeleteNetworkInterfacePermissionRequest struct {
	OwnerId                      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount         *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId              *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                 *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfacePermissionId *string `json:"NetworkInterfacePermissionId,omitempty" xml:"NetworkInterfacePermissionId,omitempty"`
	Force                        *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
}

func (s DeleteNetworkInterfacePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfacePermissionRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfacePermissionRequest) SetOwnerId(v int64) *DeleteNetworkInterfacePermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetResourceOwnerAccount(v string) *DeleteNetworkInterfacePermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetResourceOwnerId(v int64) *DeleteNetworkInterfacePermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetOwnerAccount(v string) *DeleteNetworkInterfacePermissionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetRegionId(v string) *DeleteNetworkInterfacePermissionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetNetworkInterfacePermissionId(v string) *DeleteNetworkInterfacePermissionRequest {
	s.NetworkInterfacePermissionId = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetForce(v bool) *DeleteNetworkInterfacePermissionRequest {
	s.Force = &v
	return s
}

type DeleteNetworkInterfacePermissionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkInterfacePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfacePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfacePermissionResponseBody) SetRequestId(v string) *DeleteNetworkInterfacePermissionResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkInterfacePermissionResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteNetworkInterfacePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNetworkInterfacePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfacePermissionResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfacePermissionResponse) SetHeaders(v map[string]*string) *DeleteNetworkInterfacePermissionResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkInterfacePermissionResponse) SetBody(v *DeleteNetworkInterfacePermissionResponseBody) *DeleteNetworkInterfacePermissionResponse {
	s.Body = v
	return s
}

type DeletePhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeletePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *DeletePhysicalConnectionRequest) SetRegionId(v string) *DeletePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetPhysicalConnectionId(v string) *DeletePhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetOwnerId(v int64) *DeletePhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetResourceOwnerAccount(v string) *DeletePhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetResourceOwnerId(v int64) *DeletePhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetClientToken(v string) *DeletePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetOwnerAccount(v string) *DeletePhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

type DeletePhysicalConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePhysicalConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePhysicalConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePhysicalConnectionResponseBody) SetRequestId(v string) *DeletePhysicalConnectionResponseBody {
	s.RequestId = &v
	return s
}

type DeletePhysicalConnectionResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeletePhysicalConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *DeletePhysicalConnectionResponse) SetHeaders(v map[string]*string) *DeletePhysicalConnectionResponse {
	s.Headers = v
	return s
}

func (s *DeletePhysicalConnectionResponse) SetBody(v *DeletePhysicalConnectionResponseBody) *DeletePhysicalConnectionResponse {
	s.Body = v
	return s
}

type DeleteRouteEntryRequest struct {
	OwnerId              *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouteTableId         *string                               `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	DestinationCidrBlock *string                               `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	NextHopId            *string                               `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	OwnerAccount         *string                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	NextHopList          []*DeleteRouteEntryRequestNextHopList `json:"NextHopList,omitempty" xml:"NextHopList,omitempty" type:"Repeated"`
}

func (s DeleteRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryRequest) SetOwnerId(v int64) *DeleteRouteEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetResourceOwnerAccount(v string) *DeleteRouteEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetResourceOwnerId(v int64) *DeleteRouteEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetRegionId(v string) *DeleteRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetRouteTableId(v string) *DeleteRouteEntryRequest {
	s.RouteTableId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetDestinationCidrBlock(v string) *DeleteRouteEntryRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetNextHopId(v string) *DeleteRouteEntryRequest {
	s.NextHopId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetOwnerAccount(v string) *DeleteRouteEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetNextHopList(v []*DeleteRouteEntryRequestNextHopList) *DeleteRouteEntryRequest {
	s.NextHopList = v
	return s
}

type DeleteRouteEntryRequestNextHopList struct {
	NextHopId   *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	NextHopType *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
}

func (s DeleteRouteEntryRequestNextHopList) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryRequestNextHopList) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryRequestNextHopList) SetNextHopId(v string) *DeleteRouteEntryRequestNextHopList {
	s.NextHopId = &v
	return s
}

func (s *DeleteRouteEntryRequestNextHopList) SetNextHopType(v string) *DeleteRouteEntryRequestNextHopList {
	s.NextHopType = &v
	return s
}

type DeleteRouteEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRouteEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryResponseBody) SetRequestId(v string) *DeleteRouteEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRouteEntryResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteRouteEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryResponse) SetHeaders(v map[string]*string) *DeleteRouteEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteRouteEntryResponse) SetBody(v *DeleteRouteEntryResponseBody) *DeleteRouteEntryResponse {
	s.Body = v
	return s
}

type DeleteRouterInterfaceRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouterInterfaceId    *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s DeleteRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteRouterInterfaceRequest) SetRegionId(v string) *DeleteRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetRouterInterfaceId(v string) *DeleteRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetOwnerId(v int64) *DeleteRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetResourceOwnerAccount(v string) *DeleteRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetResourceOwnerId(v int64) *DeleteRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetClientToken(v string) *DeleteRouterInterfaceRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetOwnerAccount(v string) *DeleteRouterInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetUserCidr(v string) *DeleteRouterInterfaceRequest {
	s.UserCidr = &v
	return s
}

type DeleteRouterInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRouterInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouterInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRouterInterfaceResponseBody) SetRequestId(v string) *DeleteRouterInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRouterInterfaceResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteRouterInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteRouterInterfaceResponse) SetHeaders(v map[string]*string) *DeleteRouterInterfaceResponse {
	s.Headers = v
	return s
}

func (s *DeleteRouterInterfaceResponse) SetBody(v *DeleteRouterInterfaceResponseBody) *DeleteRouterInterfaceResponse {
	s.Body = v
	return s
}

type DeleteSecurityGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupRequest) SetOwnerId(v int64) *DeleteSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetResourceOwnerAccount(v string) *DeleteSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetResourceOwnerId(v int64) *DeleteSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetRegionId(v string) *DeleteSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetSecurityGroupId(v string) *DeleteSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetOwnerAccount(v string) *DeleteSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupResponseBody) SetRequestId(v string) *DeleteSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSecurityGroupResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupResponse) SetHeaders(v map[string]*string) *DeleteSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteSecurityGroupResponse) SetBody(v *DeleteSecurityGroupResponseBody) *DeleteSecurityGroupResponse {
	s.Body = v
	return s
}

type DeleteSnapshotRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SnapshotId           *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	Force                *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotRequest) SetOwnerId(v int64) *DeleteSnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSnapshotRequest) SetResourceOwnerAccount(v string) *DeleteSnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSnapshotRequest) SetResourceOwnerId(v int64) *DeleteSnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSnapshotRequest) SetSnapshotId(v string) *DeleteSnapshotRequest {
	s.SnapshotId = &v
	return s
}

func (s *DeleteSnapshotRequest) SetForce(v bool) *DeleteSnapshotRequest {
	s.Force = &v
	return s
}

func (s *DeleteSnapshotRequest) SetOwnerAccount(v string) *DeleteSnapshotRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteSnapshotResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotResponseBody) SetRequestId(v string) *DeleteSnapshotResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSnapshotResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotResponse) SetHeaders(v map[string]*string) *DeleteSnapshotResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnapshotResponse) SetBody(v *DeleteSnapshotResponseBody) *DeleteSnapshotResponse {
	s.Body = v
	return s
}

type DeleteStorageSetRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StorageSetId         *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
}

func (s DeleteStorageSetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageSetRequest) GoString() string {
	return s.String()
}

func (s *DeleteStorageSetRequest) SetOwnerId(v int64) *DeleteStorageSetRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteStorageSetRequest) SetResourceOwnerAccount(v string) *DeleteStorageSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteStorageSetRequest) SetResourceOwnerId(v int64) *DeleteStorageSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteStorageSetRequest) SetOwnerAccount(v string) *DeleteStorageSetRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteStorageSetRequest) SetClientToken(v string) *DeleteStorageSetRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteStorageSetRequest) SetRegionId(v string) *DeleteStorageSetRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteStorageSetRequest) SetStorageSetId(v string) *DeleteStorageSetRequest {
	s.StorageSetId = &v
	return s
}

type DeleteStorageSetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStorageSetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageSetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStorageSetResponseBody) SetRequestId(v string) *DeleteStorageSetResponseBody {
	s.RequestId = &v
	return s
}

type DeleteStorageSetResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteStorageSetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteStorageSetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageSetResponse) GoString() string {
	return s.String()
}

func (s *DeleteStorageSetResponse) SetHeaders(v map[string]*string) *DeleteStorageSetResponse {
	s.Headers = v
	return s
}

func (s *DeleteStorageSetResponse) SetBody(v *DeleteStorageSetResponseBody) *DeleteStorageSetResponse {
	s.Body = v
	return s
}

type DeleteVirtualBorderRouterRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VbrId                *string `json:"VbrId,omitempty" xml:"VbrId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s DeleteVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *DeleteVirtualBorderRouterRequest) SetRegionId(v string) *DeleteVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetVbrId(v string) *DeleteVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetOwnerId(v int64) *DeleteVirtualBorderRouterRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetResourceOwnerAccount(v string) *DeleteVirtualBorderRouterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetResourceOwnerId(v int64) *DeleteVirtualBorderRouterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetClientToken(v string) *DeleteVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetOwnerAccount(v string) *DeleteVirtualBorderRouterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetUserCidr(v string) *DeleteVirtualBorderRouterRequest {
	s.UserCidr = &v
	return s
}

type DeleteVirtualBorderRouterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVirtualBorderRouterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualBorderRouterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVirtualBorderRouterResponseBody) SetRequestId(v string) *DeleteVirtualBorderRouterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVirtualBorderRouterResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteVirtualBorderRouterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *DeleteVirtualBorderRouterResponse) SetHeaders(v map[string]*string) *DeleteVirtualBorderRouterResponse {
	s.Headers = v
	return s
}

func (s *DeleteVirtualBorderRouterResponse) SetBody(v *DeleteVirtualBorderRouterResponseBody) *DeleteVirtualBorderRouterResponse {
	s.Body = v
	return s
}

type DeleteVpcRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpcRequest) SetOwnerId(v int64) *DeleteVpcRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteVpcRequest) SetResourceOwnerAccount(v string) *DeleteVpcRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteVpcRequest) SetResourceOwnerId(v int64) *DeleteVpcRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteVpcRequest) SetVpcId(v string) *DeleteVpcRequest {
	s.VpcId = &v
	return s
}

func (s *DeleteVpcRequest) SetRegionId(v string) *DeleteVpcRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVpcRequest) SetOwnerAccount(v string) *DeleteVpcRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteVpcResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVpcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVpcResponseBody) SetRequestId(v string) *DeleteVpcResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVpcResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteVpcResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpcResponse) SetHeaders(v map[string]*string) *DeleteVpcResponse {
	s.Headers = v
	return s
}

func (s *DeleteVpcResponse) SetBody(v *DeleteVpcResponseBody) *DeleteVpcResponse {
	s.Body = v
	return s
}

type DeleteVSwitchRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchRequest) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchRequest) SetOwnerId(v int64) *DeleteVSwitchRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetResourceOwnerAccount(v string) *DeleteVSwitchRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteVSwitchRequest) SetResourceOwnerId(v int64) *DeleteVSwitchRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetVSwitchId(v string) *DeleteVSwitchRequest {
	s.VSwitchId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetRegionId(v string) *DeleteVSwitchRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetOwnerAccount(v string) *DeleteVSwitchRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteVSwitchResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVSwitchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchResponseBody) SetRequestId(v string) *DeleteVSwitchResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVSwitchResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteVSwitchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchResponse) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchResponse) SetHeaders(v map[string]*string) *DeleteVSwitchResponse {
	s.Headers = v
	return s
}

func (s *DeleteVSwitchResponse) SetBody(v *DeleteVSwitchResponseBody) *DeleteVSwitchResponse {
	s.Body = v
	return s
}

type DescribeAccessPointsRequest struct {
	OwnerId              *int64                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                              `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                               `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type                 *string                              `json:"Type,omitempty" xml:"Type,omitempty"`
	PageNumber           *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter               []*DescribeAccessPointsRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeAccessPointsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsRequest) SetOwnerId(v int64) *DescribeAccessPointsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetResourceOwnerAccount(v string) *DescribeAccessPointsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetResourceOwnerId(v int64) *DescribeAccessPointsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetRegionId(v string) *DescribeAccessPointsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetType(v string) *DescribeAccessPointsRequest {
	s.Type = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetPageNumber(v int32) *DescribeAccessPointsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetPageSize(v int32) *DescribeAccessPointsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetFilter(v []*DescribeAccessPointsRequestFilter) *DescribeAccessPointsRequest {
	s.Filter = v
	return s
}

type DescribeAccessPointsRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeAccessPointsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsRequestFilter) SetKey(v string) *DescribeAccessPointsRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeAccessPointsRequestFilter) SetValue(v []*string) *DescribeAccessPointsRequestFilter {
	s.Value = v
	return s
}

type DescribeAccessPointsResponseBody struct {
	AccessPointSet []*DescribeAccessPointsResponseBodyAccessPointSet `json:"AccessPointSet,omitempty" xml:"AccessPointSet,omitempty" type:"Repeated"`
	TotalCount     *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize       *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber     *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeAccessPointsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponseBody) SetAccessPointSet(v []*DescribeAccessPointsResponseBodyAccessPointSet) *DescribeAccessPointsResponseBody {
	s.AccessPointSet = v
	return s
}

func (s *DescribeAccessPointsResponseBody) SetTotalCount(v int32) *DescribeAccessPointsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeAccessPointsResponseBody) SetRequestId(v string) *DescribeAccessPointsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccessPointsResponseBody) SetPageSize(v int32) *DescribeAccessPointsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAccessPointsResponseBody) SetPageNumber(v int32) *DescribeAccessPointsResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeAccessPointsResponseBodyAccessPointSet struct {
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
	HostOperator     *string `json:"HostOperator,omitempty" xml:"HostOperator,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	AttachedRegionNo *string `json:"AttachedRegionNo,omitempty" xml:"AttachedRegionNo,omitempty"`
	Name             *string `json:"Name,omitempty" xml:"Name,omitempty"`
	AccessPointId    *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	Location         *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeAccessPointsResponseBodyAccessPointSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponseBodyAccessPointSet) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponseBodyAccessPointSet) SetStatus(v string) *DescribeAccessPointsResponseBodyAccessPointSet {
	s.Status = &v
	return s
}

func (s *DescribeAccessPointsResponseBodyAccessPointSet) SetType(v string) *DescribeAccessPointsResponseBodyAccessPointSet {
	s.Type = &v
	return s
}

func (s *DescribeAccessPointsResponseBodyAccessPointSet) SetHostOperator(v string) *DescribeAccessPointsResponseBodyAccessPointSet {
	s.HostOperator = &v
	return s
}

func (s *DescribeAccessPointsResponseBodyAccessPointSet) SetDescription(v string) *DescribeAccessPointsResponseBodyAccessPointSet {
	s.Description = &v
	return s
}

func (s *DescribeAccessPointsResponseBodyAccessPointSet) SetAttachedRegionNo(v string) *DescribeAccessPointsResponseBodyAccessPointSet {
	s.AttachedRegionNo = &v
	return s
}

func (s *DescribeAccessPointsResponseBodyAccessPointSet) SetName(v string) *DescribeAccessPointsResponseBodyAccessPointSet {
	s.Name = &v
	return s
}

func (s *DescribeAccessPointsResponseBodyAccessPointSet) SetAccessPointId(v string) *DescribeAccessPointsResponseBodyAccessPointSet {
	s.AccessPointId = &v
	return s
}

func (s *DescribeAccessPointsResponseBodyAccessPointSet) SetLocation(v string) *DescribeAccessPointsResponseBodyAccessPointSet {
	s.Location = &v
	return s
}

type DescribeAccessPointsResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAccessPointsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccessPointsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponse) SetHeaders(v map[string]*string) *DescribeAccessPointsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccessPointsResponse) SetBody(v *DescribeAccessPointsResponseBody) *DescribeAccessPointsResponse {
	s.Body = v
	return s
}

type DescribeAccountAttributesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId               *string   `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	AttributeName        []*string `json:"AttributeName,omitempty" xml:"AttributeName,omitempty" type:"Repeated"`
}

func (s DescribeAccountAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesRequest) SetOwnerId(v int64) *DescribeAccountAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetResourceOwnerAccount(v string) *DescribeAccountAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetResourceOwnerId(v int64) *DescribeAccountAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetRegionId(v string) *DescribeAccountAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetZoneId(v string) *DescribeAccountAttributesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetAttributeName(v []*string) *DescribeAccountAttributesRequest {
	s.AttributeName = v
	return s
}

type DescribeAccountAttributesResponseBody struct {
	RequestId             *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AccountAttributeItems []*DescribeAccountAttributesResponseBodyAccountAttributeItems `json:"AccountAttributeItems,omitempty" xml:"AccountAttributeItems,omitempty" type:"Repeated"`
}

func (s DescribeAccountAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseBody) SetRequestId(v string) *DescribeAccountAttributesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccountAttributesResponseBody) SetAccountAttributeItems(v []*DescribeAccountAttributesResponseBodyAccountAttributeItems) *DescribeAccountAttributesResponseBody {
	s.AccountAttributeItems = v
	return s
}

type DescribeAccountAttributesResponseBodyAccountAttributeItems struct {
	AttributeName   *string                                                                      `json:"AttributeName,omitempty" xml:"AttributeName,omitempty"`
	AttributeValues []*DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues `json:"AttributeValues,omitempty" xml:"AttributeValues,omitempty" type:"Repeated"`
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItems) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItems) SetAttributeName(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItems {
	s.AttributeName = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItems) SetAttributeValues(v []*DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) *DescribeAccountAttributesResponseBodyAccountAttributeItems {
	s.AttributeValues = v
	return s
}

type DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues struct {
	DiskCategory       *string `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
	Value              *string `json:"Value,omitempty" xml:"Value,omitempty"`
	ExpiredTime        *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	ZoneId             *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Count              *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) SetDiskCategory(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues {
	s.DiskCategory = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) SetValue(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues {
	s.Value = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) SetExpiredTime(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) SetZoneId(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues {
	s.ZoneId = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) SetInstanceType(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues {
	s.InstanceType = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) SetCount(v int32) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues {
	s.Count = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues) SetInstanceChargeType(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAttributeValues {
	s.InstanceChargeType = &v
	return s
}

type DescribeAccountAttributesResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAccountAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccountAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponse) SetHeaders(v map[string]*string) *DescribeAccountAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccountAttributesResponse) SetBody(v *DescribeAccountAttributesResponseBody) *DescribeAccountAttributesResponse {
	s.Body = v
	return s
}

type DescribeAutoProvisioningGroupHistoryRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber              *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	AutoProvisioningGroupId *string `json:"AutoProvisioningGroupId,omitempty" xml:"AutoProvisioningGroupId,omitempty"`
	StartTime               *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime                 *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeAutoProvisioningGroupHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetOwnerId(v int64) *DescribeAutoProvisioningGroupHistoryRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetResourceOwnerAccount(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetResourceOwnerId(v int64) *DescribeAutoProvisioningGroupHistoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetOwnerAccount(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetRegionId(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetPageNumber(v int32) *DescribeAutoProvisioningGroupHistoryRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetPageSize(v int32) *DescribeAutoProvisioningGroupHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetAutoProvisioningGroupId(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.AutoProvisioningGroupId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetStartTime(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetEndTime(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.EndTime = &v
	return s
}

type DescribeAutoProvisioningGroupHistoryResponseBody struct {
	TotalCount                     *int32                                                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize                       *int32                                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                      *string                                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber                     *int32                                                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	AutoProvisioningGroupHistories []*DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories `json:"AutoProvisioningGroupHistories,omitempty" xml:"AutoProvisioningGroupHistories,omitempty" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBody) SetTotalCount(v int32) *DescribeAutoProvisioningGroupHistoryResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBody) SetPageSize(v int32) *DescribeAutoProvisioningGroupHistoryResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBody) SetRequestId(v string) *DescribeAutoProvisioningGroupHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBody) SetPageNumber(v int32) *DescribeAutoProvisioningGroupHistoryResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBody) SetAutoProvisioningGroupHistories(v []*DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories) *DescribeAutoProvisioningGroupHistoryResponseBody {
	s.AutoProvisioningGroupHistories = v
	return s
}

type DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories struct {
	Status          *string                                                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	StartTime       *string                                                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	ActivityDetails []*DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistoriesActivityDetails `json:"ActivityDetails,omitempty" xml:"ActivityDetails,omitempty" type:"Repeated"`
	TaskId          *string                                                                                          `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	LastEventTime   *string                                                                                          `json:"LastEventTime,omitempty" xml:"LastEventTime,omitempty"`
}

func (s DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories) SetStatus(v string) *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories {
	s.Status = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories) SetStartTime(v string) *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories {
	s.StartTime = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories) SetActivityDetails(v []*DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistoriesActivityDetails) *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories {
	s.ActivityDetails = v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories) SetTaskId(v string) *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories {
	s.TaskId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories) SetLastEventTime(v string) *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistories {
	s.LastEventTime = &v
	return s
}

type DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistoriesActivityDetails struct {
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Detail *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
}

func (s DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistoriesActivityDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistoriesActivityDetails) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistoriesActivityDetails) SetStatus(v string) *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistoriesActivityDetails {
	s.Status = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistoriesActivityDetails) SetDetail(v string) *DescribeAutoProvisioningGroupHistoryResponseBodyAutoProvisioningGroupHistoriesActivityDetails {
	s.Detail = &v
	return s
}

type DescribeAutoProvisioningGroupHistoryResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAutoProvisioningGroupHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAutoProvisioningGroupHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryResponse) SetHeaders(v map[string]*string) *DescribeAutoProvisioningGroupHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponse) SetBody(v *DescribeAutoProvisioningGroupHistoryResponseBody) *DescribeAutoProvisioningGroupHistoryResponse {
	s.Body = v
	return s
}

type DescribeAutoProvisioningGroupInstancesRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber              *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	AutoProvisioningGroupId *string `json:"AutoProvisioningGroupId,omitempty" xml:"AutoProvisioningGroupId,omitempty"`
}

func (s DescribeAutoProvisioningGroupInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetOwnerId(v int64) *DescribeAutoProvisioningGroupInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetResourceOwnerAccount(v string) *DescribeAutoProvisioningGroupInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetResourceOwnerId(v int64) *DescribeAutoProvisioningGroupInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetOwnerAccount(v string) *DescribeAutoProvisioningGroupInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetRegionId(v string) *DescribeAutoProvisioningGroupInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetPageNumber(v int32) *DescribeAutoProvisioningGroupInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetPageSize(v int32) *DescribeAutoProvisioningGroupInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetAutoProvisioningGroupId(v string) *DescribeAutoProvisioningGroupInstancesRequest {
	s.AutoProvisioningGroupId = &v
	return s
}

type DescribeAutoProvisioningGroupInstancesResponseBody struct {
	Instances  []*DescribeAutoProvisioningGroupInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	TotalCount *int32                                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeAutoProvisioningGroupInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBody) SetInstances(v []*DescribeAutoProvisioningGroupInstancesResponseBodyInstances) *DescribeAutoProvisioningGroupInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBody) SetTotalCount(v int32) *DescribeAutoProvisioningGroupInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBody) SetPageSize(v int32) *DescribeAutoProvisioningGroupInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBody) SetRequestId(v string) *DescribeAutoProvisioningGroupInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBody) SetPageNumber(v int32) *DescribeAutoProvisioningGroupInstancesResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeAutoProvisioningGroupInstancesResponseBodyInstances struct {
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	IsSpot       *bool   `json:"IsSpot,omitempty" xml:"IsSpot,omitempty"`
	CPU          *int32  `json:"CPU,omitempty" xml:"CPU,omitempty"`
	NetworkType  *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	IoOptimized  *bool   `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	OsType       *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	ZoneId       *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Memory       *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s DescribeAutoProvisioningGroupInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetCreationTime(v string) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.CreationTime = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetStatus(v string) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.Status = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetIsSpot(v bool) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.IsSpot = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetCPU(v int32) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.CPU = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetNetworkType(v string) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.NetworkType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetInstanceId(v string) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetInstanceType(v string) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.InstanceType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetRegionId(v string) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetIoOptimized(v bool) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.IoOptimized = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetOsType(v string) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.OsType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetZoneId(v string) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.ZoneId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseBodyInstances) SetMemory(v int32) *DescribeAutoProvisioningGroupInstancesResponseBodyInstances {
	s.Memory = &v
	return s
}

type DescribeAutoProvisioningGroupInstancesResponse struct {
	Headers map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAutoProvisioningGroupInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAutoProvisioningGroupInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupInstancesResponse) SetHeaders(v map[string]*string) *DescribeAutoProvisioningGroupInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponse) SetBody(v *DescribeAutoProvisioningGroupInstancesResponseBody) *DescribeAutoProvisioningGroupInstancesResponse {
	s.Body = v
	return s
}

type DescribeAutoProvisioningGroupsRequest struct {
	OwnerId                     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount        *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                    *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber                  *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                    *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	AutoProvisioningGroupName   *string   `json:"AutoProvisioningGroupName,omitempty" xml:"AutoProvisioningGroupName,omitempty"`
	AutoProvisioningGroupId     []*string `json:"AutoProvisioningGroupId,omitempty" xml:"AutoProvisioningGroupId,omitempty" type:"Repeated"`
	AutoProvisioningGroupStatus []*string `json:"AutoProvisioningGroupStatus,omitempty" xml:"AutoProvisioningGroupStatus,omitempty" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsRequest) SetOwnerId(v int64) *DescribeAutoProvisioningGroupsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetResourceOwnerAccount(v string) *DescribeAutoProvisioningGroupsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetResourceOwnerId(v int64) *DescribeAutoProvisioningGroupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetOwnerAccount(v string) *DescribeAutoProvisioningGroupsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetRegionId(v string) *DescribeAutoProvisioningGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetPageNumber(v int32) *DescribeAutoProvisioningGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetPageSize(v int32) *DescribeAutoProvisioningGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetAutoProvisioningGroupName(v string) *DescribeAutoProvisioningGroupsRequest {
	s.AutoProvisioningGroupName = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetAutoProvisioningGroupId(v []*string) *DescribeAutoProvisioningGroupsRequest {
	s.AutoProvisioningGroupId = v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetAutoProvisioningGroupStatus(v []*string) *DescribeAutoProvisioningGroupsRequest {
	s.AutoProvisioningGroupStatus = v
	return s
}

type DescribeAutoProvisioningGroupsResponseBody struct {
	TotalCount             *int32                                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize               *int32                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId              *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber             *int32                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	AutoProvisioningGroups []*DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups `json:"AutoProvisioningGroups,omitempty" xml:"AutoProvisioningGroups,omitempty" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseBody) SetTotalCount(v int32) *DescribeAutoProvisioningGroupsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBody) SetPageSize(v int32) *DescribeAutoProvisioningGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBody) SetRequestId(v string) *DescribeAutoProvisioningGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBody) SetPageNumber(v int32) *DescribeAutoProvisioningGroupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBody) SetAutoProvisioningGroups(v []*DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) *DescribeAutoProvisioningGroupsResponseBody {
	s.AutoProvisioningGroups = v
	return s
}

type DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups struct {
	Status                           *string                                                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	AutoProvisioningGroupName        *string                                                                                      `json:"AutoProvisioningGroupName,omitempty" xml:"AutoProvisioningGroupName,omitempty"`
	CreationTime                     *string                                                                                      `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MaxSpotPrice                     *float32                                                                                     `json:"MaxSpotPrice,omitempty" xml:"MaxSpotPrice,omitempty"`
	TerminateInstances               *bool                                                                                        `json:"TerminateInstances,omitempty" xml:"TerminateInstances,omitempty"`
	LaunchTemplateId                 *string                                                                                      `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	State                            *string                                                                                      `json:"State,omitempty" xml:"State,omitempty"`
	ValidFrom                        *string                                                                                      `json:"ValidFrom,omitempty" xml:"ValidFrom,omitempty"`
	LaunchTemplateVersion            *string                                                                                      `json:"LaunchTemplateVersion,omitempty" xml:"LaunchTemplateVersion,omitempty"`
	ValidUntil                       *string                                                                                      `json:"ValidUntil,omitempty" xml:"ValidUntil,omitempty"`
	RegionId                         *string                                                                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TerminateInstancesWithExpiration *bool                                                                                        `json:"TerminateInstancesWithExpiration,omitempty" xml:"TerminateInstancesWithExpiration,omitempty"`
	AutoProvisioningGroupType        *string                                                                                      `json:"AutoProvisioningGroupType,omitempty" xml:"AutoProvisioningGroupType,omitempty"`
	AutoProvisioningGroupId          *string                                                                                      `json:"AutoProvisioningGroupId,omitempty" xml:"AutoProvisioningGroupId,omitempty"`
	PayAsYouGoOptions                *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsPayAsYouGoOptions           `json:"PayAsYouGoOptions,omitempty" xml:"PayAsYouGoOptions,omitempty" type:"Struct"`
	TargetCapacitySpecification      *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification `json:"TargetCapacitySpecification,omitempty" xml:"TargetCapacitySpecification,omitempty" type:"Struct"`
	SpotOptions                      *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions                 `json:"SpotOptions,omitempty" xml:"SpotOptions,omitempty" type:"Struct"`
	LaunchTemplateConfigs            []*DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs     `json:"LaunchTemplateConfigs,omitempty" xml:"LaunchTemplateConfigs,omitempty" type:"Repeated"`
	ExcessCapacityTerminationPolicy  *string                                                                                      `json:"ExcessCapacityTerminationPolicy,omitempty" xml:"ExcessCapacityTerminationPolicy,omitempty"`
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetStatus(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.Status = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetAutoProvisioningGroupName(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.AutoProvisioningGroupName = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetCreationTime(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.CreationTime = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetMaxSpotPrice(v float32) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.MaxSpotPrice = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetTerminateInstances(v bool) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.TerminateInstances = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetLaunchTemplateId(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.LaunchTemplateId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetState(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.State = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetValidFrom(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.ValidFrom = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetLaunchTemplateVersion(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.LaunchTemplateVersion = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetValidUntil(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.ValidUntil = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetRegionId(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetTerminateInstancesWithExpiration(v bool) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.TerminateInstancesWithExpiration = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetAutoProvisioningGroupType(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.AutoProvisioningGroupType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetAutoProvisioningGroupId(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.AutoProvisioningGroupId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetPayAsYouGoOptions(v *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsPayAsYouGoOptions) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.PayAsYouGoOptions = v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetTargetCapacitySpecification(v *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.TargetCapacitySpecification = v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetSpotOptions(v *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.SpotOptions = v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetLaunchTemplateConfigs(v []*DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.LaunchTemplateConfigs = v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups) SetExcessCapacityTerminationPolicy(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroups {
	s.ExcessCapacityTerminationPolicy = &v
	return s
}

type DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsPayAsYouGoOptions struct {
	AllocationStrategy *string `json:"AllocationStrategy,omitempty" xml:"AllocationStrategy,omitempty"`
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsPayAsYouGoOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsPayAsYouGoOptions) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsPayAsYouGoOptions) SetAllocationStrategy(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsPayAsYouGoOptions {
	s.AllocationStrategy = &v
	return s
}

type DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification struct {
	SpotTargetCapacity        *float32 `json:"SpotTargetCapacity,omitempty" xml:"SpotTargetCapacity,omitempty"`
	DefaultTargetCapacityType *string  `json:"DefaultTargetCapacityType,omitempty" xml:"DefaultTargetCapacityType,omitempty"`
	TotalTargetCapacity       *float32 `json:"TotalTargetCapacity,omitempty" xml:"TotalTargetCapacity,omitempty"`
	PayAsYouGoTargetCapacity  *float32 `json:"PayAsYouGoTargetCapacity,omitempty" xml:"PayAsYouGoTargetCapacity,omitempty"`
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification) SetSpotTargetCapacity(v float32) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification {
	s.SpotTargetCapacity = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification) SetDefaultTargetCapacityType(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification {
	s.DefaultTargetCapacityType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification) SetTotalTargetCapacity(v float32) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification {
	s.TotalTargetCapacity = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification) SetPayAsYouGoTargetCapacity(v float32) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsTargetCapacitySpecification {
	s.PayAsYouGoTargetCapacity = &v
	return s
}

type DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions struct {
	InstancePoolsToUseCount      *int32  `json:"InstancePoolsToUseCount,omitempty" xml:"InstancePoolsToUseCount,omitempty"`
	InstanceInterruptionBehavior *string `json:"InstanceInterruptionBehavior,omitempty" xml:"InstanceInterruptionBehavior,omitempty"`
	AllocationStrategy           *string `json:"AllocationStrategy,omitempty" xml:"AllocationStrategy,omitempty"`
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions) SetInstancePoolsToUseCount(v int32) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions {
	s.InstancePoolsToUseCount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions) SetInstanceInterruptionBehavior(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions {
	s.InstanceInterruptionBehavior = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions) SetAllocationStrategy(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsSpotOptions {
	s.AllocationStrategy = &v
	return s
}

type DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs struct {
	VSwitchId        *string  `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	MaxPrice         *float32 `json:"MaxPrice,omitempty" xml:"MaxPrice,omitempty"`
	Priority         *float32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	WeightedCapacity *float32 `json:"WeightedCapacity,omitempty" xml:"WeightedCapacity,omitempty"`
	InstanceType     *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs) SetVSwitchId(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs {
	s.VSwitchId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs) SetMaxPrice(v float32) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs {
	s.MaxPrice = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs) SetPriority(v float32) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs {
	s.Priority = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs) SetWeightedCapacity(v float32) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs {
	s.WeightedCapacity = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs) SetInstanceType(v string) *DescribeAutoProvisioningGroupsResponseBodyAutoProvisioningGroupsLaunchTemplateConfigs {
	s.InstanceType = &v
	return s
}

type DescribeAutoProvisioningGroupsResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAutoProvisioningGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAutoProvisioningGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponse) SetHeaders(v map[string]*string) *DescribeAutoProvisioningGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponse) SetBody(v *DescribeAutoProvisioningGroupsResponseBody) *DescribeAutoProvisioningGroupsResponse {
	s.Body = v
	return s
}

type DescribeAutoSnapshotPolicyExRequest struct {
	OwnerId              *int64                                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AutoSnapshotPolicyId *string                                   `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	PageNumber           *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Tag                  []*DescribeAutoSnapshotPolicyExRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeAutoSnapshotPolicyExRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetOwnerId(v int64) *DescribeAutoSnapshotPolicyExRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetResourceOwnerAccount(v string) *DescribeAutoSnapshotPolicyExRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetResourceOwnerId(v int64) *DescribeAutoSnapshotPolicyExRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetOwnerAccount(v string) *DescribeAutoSnapshotPolicyExRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetRegionId(v string) *DescribeAutoSnapshotPolicyExRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetAutoSnapshotPolicyId(v string) *DescribeAutoSnapshotPolicyExRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetPageNumber(v int32) *DescribeAutoSnapshotPolicyExRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetPageSize(v int32) *DescribeAutoSnapshotPolicyExRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetTag(v []*DescribeAutoSnapshotPolicyExRequestTag) *DescribeAutoSnapshotPolicyExRequest {
	s.Tag = v
	return s
}

type DescribeAutoSnapshotPolicyExRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAutoSnapshotPolicyExRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExRequestTag) SetKey(v string) *DescribeAutoSnapshotPolicyExRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequestTag) SetValue(v string) *DescribeAutoSnapshotPolicyExRequestTag {
	s.Value = &v
	return s
}

type DescribeAutoSnapshotPolicyExResponseBody struct {
	TotalCount           *int32                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize             *int32                                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber           *int32                                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	AutoSnapshotPolicies []*DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies `json:"AutoSnapshotPolicies,omitempty" xml:"AutoSnapshotPolicies,omitempty" type:"Repeated"`
}

func (s DescribeAutoSnapshotPolicyExResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExResponseBody) SetTotalCount(v int32) *DescribeAutoSnapshotPolicyExResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBody) SetPageSize(v int32) *DescribeAutoSnapshotPolicyExResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBody) SetRequestId(v string) *DescribeAutoSnapshotPolicyExResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBody) SetPageNumber(v int32) *DescribeAutoSnapshotPolicyExResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBody) SetAutoSnapshotPolicies(v []*DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) *DescribeAutoSnapshotPolicyExResponseBody {
	s.AutoSnapshotPolicies = v
	return s
}

type DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies struct {
	Status                       *string                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	CreationTime                 *string                                                             `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	TimePoints                   *string                                                             `json:"TimePoints,omitempty" xml:"TimePoints,omitempty"`
	AutoSnapshotPolicyName       *string                                                             `json:"AutoSnapshotPolicyName,omitempty" xml:"AutoSnapshotPolicyName,omitempty"`
	TargetCopyRegions            *string                                                             `json:"TargetCopyRegions,omitempty" xml:"TargetCopyRegions,omitempty"`
	CopiedSnapshotsRetentionDays *int32                                                              `json:"CopiedSnapshotsRetentionDays,omitempty" xml:"CopiedSnapshotsRetentionDays,omitempty"`
	AutoSnapshotPolicyId         *string                                                             `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	Tags                         []*DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPoliciesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	RetentionDays                *int32                                                              `json:"RetentionDays,omitempty" xml:"RetentionDays,omitempty"`
	RegionId                     *string                                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DiskNums                     *int32                                                              `json:"DiskNums,omitempty" xml:"DiskNums,omitempty"`
	EnableCrossRegionCopy        *bool                                                               `json:"EnableCrossRegionCopy,omitempty" xml:"EnableCrossRegionCopy,omitempty"`
	RepeatWeekdays               *string                                                             `json:"RepeatWeekdays,omitempty" xml:"RepeatWeekdays,omitempty"`
	VolumeNums                   *int32                                                              `json:"VolumeNums,omitempty" xml:"VolumeNums,omitempty"`
}

func (s DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetStatus(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.Status = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetCreationTime(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.CreationTime = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetTimePoints(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.TimePoints = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetAutoSnapshotPolicyName(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.AutoSnapshotPolicyName = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetTargetCopyRegions(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.TargetCopyRegions = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetCopiedSnapshotsRetentionDays(v int32) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.CopiedSnapshotsRetentionDays = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetAutoSnapshotPolicyId(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetTags(v []*DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPoliciesTags) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.Tags = v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetRetentionDays(v int32) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.RetentionDays = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetRegionId(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetDiskNums(v int32) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.DiskNums = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetEnableCrossRegionCopy(v bool) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.EnableCrossRegionCopy = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetRepeatWeekdays(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.RepeatWeekdays = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies) SetVolumeNums(v int32) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPolicies {
	s.VolumeNums = &v
	return s
}

type DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPoliciesTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPoliciesTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPoliciesTags) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPoliciesTags) SetTagValue(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPoliciesTags {
	s.TagValue = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPoliciesTags) SetTagKey(v string) *DescribeAutoSnapshotPolicyExResponseBodyAutoSnapshotPoliciesTags {
	s.TagKey = &v
	return s
}

type DescribeAutoSnapshotPolicyExResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAutoSnapshotPolicyExResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAutoSnapshotPolicyExResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExResponse) SetHeaders(v map[string]*string) *DescribeAutoSnapshotPolicyExResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponse) SetBody(v *DescribeAutoSnapshotPolicyExResponseBody) *DescribeAutoSnapshotPolicyExResponse {
	s.Body = v
	return s
}

type DescribeAvailableResourceRequest struct {
	OwnerId              *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceChargeType   *string  `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	SpotStrategy         *string  `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	SpotDuration         *int32   `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	DestinationResource  *string  `json:"DestinationResource,omitempty" xml:"DestinationResource,omitempty"`
	ZoneId               *string  `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	IoOptimized          *string  `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	DedicatedHostId      *string  `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	InstanceType         *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	SystemDiskCategory   *string  `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	DataDiskCategory     *string  `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty"`
	NetworkCategory      *string  `json:"NetworkCategory,omitempty" xml:"NetworkCategory,omitempty"`
	Cores                *int32   `json:"Cores,omitempty" xml:"Cores,omitempty"`
	Memory               *float32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	ResourceType         *string  `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Scope                *string  `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s DescribeAvailableResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceRequest) SetOwnerId(v int64) *DescribeAvailableResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetResourceOwnerAccount(v string) *DescribeAvailableResourceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetResourceOwnerId(v int64) *DescribeAvailableResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetOwnerAccount(v string) *DescribeAvailableResourceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetRegionId(v string) *DescribeAvailableResourceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetInstanceChargeType(v string) *DescribeAvailableResourceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetSpotStrategy(v string) *DescribeAvailableResourceRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetSpotDuration(v int32) *DescribeAvailableResourceRequest {
	s.SpotDuration = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDestinationResource(v string) *DescribeAvailableResourceRequest {
	s.DestinationResource = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetZoneId(v string) *DescribeAvailableResourceRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetIoOptimized(v string) *DescribeAvailableResourceRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDedicatedHostId(v string) *DescribeAvailableResourceRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetInstanceType(v string) *DescribeAvailableResourceRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetSystemDiskCategory(v string) *DescribeAvailableResourceRequest {
	s.SystemDiskCategory = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDataDiskCategory(v string) *DescribeAvailableResourceRequest {
	s.DataDiskCategory = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetNetworkCategory(v string) *DescribeAvailableResourceRequest {
	s.NetworkCategory = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetCores(v int32) *DescribeAvailableResourceRequest {
	s.Cores = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetMemory(v float32) *DescribeAvailableResourceRequest {
	s.Memory = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetResourceType(v string) *DescribeAvailableResourceRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetScope(v string) *DescribeAvailableResourceRequest {
	s.Scope = &v
	return s
}

type DescribeAvailableResourceResponseBody struct {
	RequestId      *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AvailableZones []*DescribeAvailableResourceResponseBodyAvailableZones `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBody) SetRequestId(v string) *DescribeAvailableResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBody) SetAvailableZones(v []*DescribeAvailableResourceResponseBodyAvailableZones) *DescribeAvailableResourceResponseBody {
	s.AvailableZones = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZones struct {
	Status             *string                                                                  `json:"Status,omitempty" xml:"Status,omitempty"`
	ZoneId             *string                                                                  `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	StatusCategory     *string                                                                  `json:"StatusCategory,omitempty" xml:"StatusCategory,omitempty"`
	RegionId           *string                                                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AvailableResources []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableResources `json:"AvailableResources,omitempty" xml:"AvailableResources,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZones) SetStatus(v string) *DescribeAvailableResourceResponseBodyAvailableZones {
	s.Status = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZones) SetZoneId(v string) *DescribeAvailableResourceResponseBodyAvailableZones {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZones) SetStatusCategory(v string) *DescribeAvailableResourceResponseBodyAvailableZones {
	s.StatusCategory = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZones) SetRegionId(v string) *DescribeAvailableResourceResponseBodyAvailableZones {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZones) SetAvailableResources(v []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableResources) *DescribeAvailableResourceResponseBodyAvailableZones {
	s.AvailableResources = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableResources struct {
	Type               *string                                                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
	SupportedResources []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources `json:"SupportedResources,omitempty" xml:"SupportedResources,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResources) SetType(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResources {
	s.Type = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResources) SetSupportedResources(v []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResources {
	s.SupportedResources = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources struct {
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Value          *string `json:"Value,omitempty" xml:"Value,omitempty"`
	Max            *int32  `json:"Max,omitempty" xml:"Max,omitempty"`
	Unit           *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	StatusCategory *string `json:"StatusCategory,omitempty" xml:"StatusCategory,omitempty"`
	Min            *int32  `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetStatus(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Status = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetValue(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Value = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetMax(v int32) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Max = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetUnit(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Unit = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetStatusCategory(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.StatusCategory = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetMin(v int32) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Min = &v
	return s
}

type DescribeAvailableResourceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAvailableResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponse) SetHeaders(v map[string]*string) *DescribeAvailableResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableResourceResponse) SetBody(v *DescribeAvailableResourceResponseBody) *DescribeAvailableResourceResponse {
	s.Body = v
	return s
}

type DescribeBandwidthLimitationRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceChargeType   *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	SpotStrategy         *string `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	ResourceId           *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	OperationType        *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
}

func (s DescribeBandwidthLimitationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthLimitationRequest) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthLimitationRequest) SetOwnerId(v int64) *DescribeBandwidthLimitationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetResourceOwnerAccount(v string) *DescribeBandwidthLimitationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetResourceOwnerId(v int64) *DescribeBandwidthLimitationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetOwnerAccount(v string) *DescribeBandwidthLimitationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetRegionId(v string) *DescribeBandwidthLimitationRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetInstanceChargeType(v string) *DescribeBandwidthLimitationRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetSpotStrategy(v string) *DescribeBandwidthLimitationRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetInstanceType(v string) *DescribeBandwidthLimitationRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetResourceId(v string) *DescribeBandwidthLimitationRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetOperationType(v string) *DescribeBandwidthLimitationRequest {
	s.OperationType = &v
	return s
}

type DescribeBandwidthLimitationResponseBody struct {
	RequestId  *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Bandwidths []*DescribeBandwidthLimitationResponseBodyBandwidths `json:"Bandwidths,omitempty" xml:"Bandwidths,omitempty" type:"Repeated"`
}

func (s DescribeBandwidthLimitationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthLimitationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthLimitationResponseBody) SetRequestId(v string) *DescribeBandwidthLimitationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBandwidthLimitationResponseBody) SetBandwidths(v []*DescribeBandwidthLimitationResponseBodyBandwidths) *DescribeBandwidthLimitationResponseBody {
	s.Bandwidths = v
	return s
}

type DescribeBandwidthLimitationResponseBodyBandwidths struct {
	Max                *int32  `json:"Max,omitempty" xml:"Max,omitempty"`
	Unit               *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	Min                *int32  `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s DescribeBandwidthLimitationResponseBodyBandwidths) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthLimitationResponseBodyBandwidths) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthLimitationResponseBodyBandwidths) SetMax(v int32) *DescribeBandwidthLimitationResponseBodyBandwidths {
	s.Max = &v
	return s
}

func (s *DescribeBandwidthLimitationResponseBodyBandwidths) SetUnit(v string) *DescribeBandwidthLimitationResponseBodyBandwidths {
	s.Unit = &v
	return s
}

func (s *DescribeBandwidthLimitationResponseBodyBandwidths) SetInternetChargeType(v string) *DescribeBandwidthLimitationResponseBodyBandwidths {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeBandwidthLimitationResponseBodyBandwidths) SetMin(v int32) *DescribeBandwidthLimitationResponseBodyBandwidths {
	s.Min = &v
	return s
}

type DescribeBandwidthLimitationResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBandwidthLimitationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBandwidthLimitationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthLimitationResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthLimitationResponse) SetHeaders(v map[string]*string) *DescribeBandwidthLimitationResponse {
	s.Headers = v
	return s
}

func (s *DescribeBandwidthLimitationResponse) SetBody(v *DescribeBandwidthLimitationResponseBody) *DescribeBandwidthLimitationResponse {
	s.Body = v
	return s
}

type DescribeBandwidthPackagesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BandwidthPackageId   *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty"`
	NatGatewayId         *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeBandwidthPackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesRequest) SetOwnerId(v int64) *DescribeBandwidthPackagesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetResourceOwnerAccount(v string) *DescribeBandwidthPackagesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetResourceOwnerId(v int64) *DescribeBandwidthPackagesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetOwnerAccount(v string) *DescribeBandwidthPackagesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetRegionId(v string) *DescribeBandwidthPackagesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetBandwidthPackageId(v string) *DescribeBandwidthPackagesRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetNatGatewayId(v string) *DescribeBandwidthPackagesRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetPageNumber(v int32) *DescribeBandwidthPackagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetPageSize(v int32) *DescribeBandwidthPackagesRequest {
	s.PageSize = &v
	return s
}

type DescribeBandwidthPackagesResponseBody struct {
	TotalCount        *int32                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize          *int32                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber        *int32                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	BandwidthPackages []*DescribeBandwidthPackagesResponseBodyBandwidthPackages `json:"BandwidthPackages,omitempty" xml:"BandwidthPackages,omitempty" type:"Repeated"`
}

func (s DescribeBandwidthPackagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBody) SetTotalCount(v int32) *DescribeBandwidthPackagesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBody) SetPageSize(v int32) *DescribeBandwidthPackagesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBody) SetRequestId(v string) *DescribeBandwidthPackagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBody) SetPageNumber(v int32) *DescribeBandwidthPackagesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBody) SetBandwidthPackages(v []*DescribeBandwidthPackagesResponseBodyBandwidthPackages) *DescribeBandwidthPackagesResponseBody {
	s.BandwidthPackages = v
	return s
}

type DescribeBandwidthPackagesResponseBodyBandwidthPackages struct {
	PublicIpAddresses  []*DescribeBandwidthPackagesResponseBodyBandwidthPackagesPublicIpAddresses `json:"PublicIpAddresses,omitempty" xml:"PublicIpAddresses,omitempty" type:"Repeated"`
	CreationTime       *string                                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status             *string                                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	IpCount            *string                                                                    `json:"IpCount,omitempty" xml:"IpCount,omitempty"`
	InstanceChargeType *string                                                                    `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	RegionId           *string                                                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BandwidthPackageId *string                                                                    `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty"`
	Bandwidth          *string                                                                    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Description        *string                                                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	NatGatewayId       *string                                                                    `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	InternetChargeType *string                                                                    `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	ZoneId             *string                                                                    `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	BusinessStatus     *string                                                                    `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	Name               *string                                                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	ISP                *string                                                                    `json:"ISP,omitempty" xml:"ISP,omitempty"`
}

func (s DescribeBandwidthPackagesResponseBodyBandwidthPackages) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBodyBandwidthPackages) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetPublicIpAddresses(v []*DescribeBandwidthPackagesResponseBodyBandwidthPackagesPublicIpAddresses) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.PublicIpAddresses = v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetCreationTime(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.CreationTime = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetStatus(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.Status = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetIpCount(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.IpCount = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetInstanceChargeType(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetRegionId(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.RegionId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetBandwidthPackageId(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.BandwidthPackageId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetBandwidth(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.Bandwidth = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetDescription(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.Description = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetNatGatewayId(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetInternetChargeType(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetZoneId(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.ZoneId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetBusinessStatus(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetName(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.Name = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackages) SetISP(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackages {
	s.ISP = &v
	return s
}

type DescribeBandwidthPackagesResponseBodyBandwidthPackagesPublicIpAddresses struct {
	IpAddress    *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
}

func (s DescribeBandwidthPackagesResponseBodyBandwidthPackagesPublicIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBodyBandwidthPackagesPublicIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackagesPublicIpAddresses) SetIpAddress(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackagesPublicIpAddresses {
	s.IpAddress = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBodyBandwidthPackagesPublicIpAddresses) SetAllocationId(v string) *DescribeBandwidthPackagesResponseBodyBandwidthPackagesPublicIpAddresses {
	s.AllocationId = &v
	return s
}

type DescribeBandwidthPackagesResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBandwidthPackagesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBandwidthPackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponse) SetHeaders(v map[string]*string) *DescribeBandwidthPackagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeBandwidthPackagesResponse) SetBody(v *DescribeBandwidthPackagesResponseBody) *DescribeBandwidthPackagesResponse {
	s.Body = v
	return s
}

type DescribeCapacityReservationInstancesRequest struct {
	PrivatePoolOptions   *DescribeCapacityReservationInstancesRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId              *int64                                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	MaxResults           *int32                                                         `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string                                                        `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PackageType          *string                                                        `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
}

func (s DescribeCapacityReservationInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationInstancesRequest) SetPrivatePoolOptions(v *DescribeCapacityReservationInstancesRequestPrivatePoolOptions) *DescribeCapacityReservationInstancesRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *DescribeCapacityReservationInstancesRequest) SetOwnerId(v int64) *DescribeCapacityReservationInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCapacityReservationInstancesRequest) SetResourceOwnerAccount(v string) *DescribeCapacityReservationInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCapacityReservationInstancesRequest) SetResourceOwnerId(v int64) *DescribeCapacityReservationInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCapacityReservationInstancesRequest) SetOwnerAccount(v string) *DescribeCapacityReservationInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeCapacityReservationInstancesRequest) SetRegionId(v string) *DescribeCapacityReservationInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCapacityReservationInstancesRequest) SetMaxResults(v int32) *DescribeCapacityReservationInstancesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeCapacityReservationInstancesRequest) SetNextToken(v string) *DescribeCapacityReservationInstancesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeCapacityReservationInstancesRequest) SetPackageType(v string) *DescribeCapacityReservationInstancesRequest {
	s.PackageType = &v
	return s
}

type DescribeCapacityReservationInstancesRequestPrivatePoolOptions struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeCapacityReservationInstancesRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationInstancesRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationInstancesRequestPrivatePoolOptions) SetId(v string) *DescribeCapacityReservationInstancesRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

type DescribeCapacityReservationInstancesResponseBody struct {
	CapacityReservationItem []*DescribeCapacityReservationInstancesResponseBodyCapacityReservationItem `json:"CapacityReservationItem,omitempty" xml:"CapacityReservationItem,omitempty" type:"Repeated"`
	TotalCount              *int32                                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken               *string                                                                    `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId               *string                                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MaxResults              *int32                                                                     `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
}

func (s DescribeCapacityReservationInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationInstancesResponseBody) SetCapacityReservationItem(v []*DescribeCapacityReservationInstancesResponseBodyCapacityReservationItem) *DescribeCapacityReservationInstancesResponseBody {
	s.CapacityReservationItem = v
	return s
}

func (s *DescribeCapacityReservationInstancesResponseBody) SetTotalCount(v int32) *DescribeCapacityReservationInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeCapacityReservationInstancesResponseBody) SetNextToken(v string) *DescribeCapacityReservationInstancesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeCapacityReservationInstancesResponseBody) SetRequestId(v string) *DescribeCapacityReservationInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCapacityReservationInstancesResponseBody) SetMaxResults(v int32) *DescribeCapacityReservationInstancesResponseBody {
	s.MaxResults = &v
	return s
}

type DescribeCapacityReservationInstancesResponseBodyCapacityReservationItem struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeCapacityReservationInstancesResponseBodyCapacityReservationItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationInstancesResponseBodyCapacityReservationItem) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationInstancesResponseBodyCapacityReservationItem) SetInstanceId(v string) *DescribeCapacityReservationInstancesResponseBodyCapacityReservationItem {
	s.InstanceId = &v
	return s
}

type DescribeCapacityReservationInstancesResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCapacityReservationInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCapacityReservationInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationInstancesResponse) SetHeaders(v map[string]*string) *DescribeCapacityReservationInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCapacityReservationInstancesResponse) SetBody(v *DescribeCapacityReservationInstancesResponseBody) *DescribeCapacityReservationInstancesResponse {
	s.Body = v
	return s
}

type DescribeCapacityReservationsRequest struct {
	PrivatePoolOptions   *DescribeCapacityReservationsRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId              *int64                                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	MaxResults           *int32                                                 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string                                                `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	Platform             *string                                                `json:"Platform,omitempty" xml:"Platform,omitempty"`
	InstanceType         *string                                                `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	ZoneId               *string                                                `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceChargeType   *string                                                `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Status               *string                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	PackageType          *string                                                `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
}

func (s DescribeCapacityReservationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsRequest) SetPrivatePoolOptions(v *DescribeCapacityReservationsRequestPrivatePoolOptions) *DescribeCapacityReservationsRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetOwnerId(v int64) *DescribeCapacityReservationsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetResourceOwnerAccount(v string) *DescribeCapacityReservationsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetResourceOwnerId(v int64) *DescribeCapacityReservationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetOwnerAccount(v string) *DescribeCapacityReservationsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetRegionId(v string) *DescribeCapacityReservationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetMaxResults(v int32) *DescribeCapacityReservationsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetNextToken(v string) *DescribeCapacityReservationsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetPlatform(v string) *DescribeCapacityReservationsRequest {
	s.Platform = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetInstanceType(v string) *DescribeCapacityReservationsRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetZoneId(v string) *DescribeCapacityReservationsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetInstanceChargeType(v string) *DescribeCapacityReservationsRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetStatus(v string) *DescribeCapacityReservationsRequest {
	s.Status = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetPackageType(v string) *DescribeCapacityReservationsRequest {
	s.PackageType = &v
	return s
}

type DescribeCapacityReservationsRequestPrivatePoolOptions struct {
	Ids *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
}

func (s DescribeCapacityReservationsRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsRequestPrivatePoolOptions) SetIds(v string) *DescribeCapacityReservationsRequestPrivatePoolOptions {
	s.Ids = &v
	return s
}

type DescribeCapacityReservationsResponseBody struct {
	TotalCount             *int32                                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken              *string                                                           `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId              *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MaxResults             *int32                                                            `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	CapacityReservationSet []*DescribeCapacityReservationsResponseBodyCapacityReservationSet `json:"CapacityReservationSet,omitempty" xml:"CapacityReservationSet,omitempty" type:"Repeated"`
}

func (s DescribeCapacityReservationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsResponseBody) SetTotalCount(v int32) *DescribeCapacityReservationsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBody) SetNextToken(v string) *DescribeCapacityReservationsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBody) SetRequestId(v string) *DescribeCapacityReservationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBody) SetMaxResults(v int32) *DescribeCapacityReservationsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBody) SetCapacityReservationSet(v []*DescribeCapacityReservationsResponseBodyCapacityReservationSet) *DescribeCapacityReservationsResponseBody {
	s.CapacityReservationSet = v
	return s
}

type DescribeCapacityReservationsResponseBodyCapacityReservationSet struct {
	Status                          *string                                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	TimeSlot                        *string                                                                             `json:"TimeSlot,omitempty" xml:"TimeSlot,omitempty"`
	PrivatePoolOptionsMatchCriteria *string                                                                             `json:"PrivatePoolOptionsMatchCriteria,omitempty" xml:"PrivatePoolOptionsMatchCriteria,omitempty"`
	PrivatePoolOptionsId            *string                                                                             `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	AllocatedResources              []*DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources `json:"AllocatedResources,omitempty" xml:"AllocatedResources,omitempty" type:"Repeated"`
	PrivatePoolOptionsName          *string                                                                             `json:"PrivatePoolOptionsName,omitempty" xml:"PrivatePoolOptionsName,omitempty"`
	InstanceChargeType              *string                                                                             `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	RegionId                        *string                                                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EndTime                         *string                                                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime                       *string                                                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Description                     *string                                                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTimeType                     *string                                                                             `json:"EndTimeType,omitempty" xml:"EndTimeType,omitempty"`
	Platform                        *string                                                                             `json:"Platform,omitempty" xml:"Platform,omitempty"`
}

func (s DescribeCapacityReservationsResponseBodyCapacityReservationSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsResponseBodyCapacityReservationSet) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetStatus(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.Status = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetTimeSlot(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.TimeSlot = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetPrivatePoolOptionsMatchCriteria(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.PrivatePoolOptionsMatchCriteria = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetPrivatePoolOptionsId(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetAllocatedResources(v []*DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.AllocatedResources = v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetPrivatePoolOptionsName(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.PrivatePoolOptionsName = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetInstanceChargeType(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetRegionId(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.RegionId = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetEndTime(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.EndTime = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetStartTime(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.StartTime = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetDescription(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.Description = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetEndTimeType(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.EndTimeType = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSet) SetPlatform(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSet {
	s.Platform = &v
	return s
}

type DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources struct {
	ZoneId       *string `json:"zoneId,omitempty" xml:"zoneId,omitempty"`
	UsedAmount   *int32  `json:"UsedAmount,omitempty" xml:"UsedAmount,omitempty"`
	TotalAmount  *int32  `json:"TotalAmount,omitempty" xml:"TotalAmount,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources) SetZoneId(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources {
	s.ZoneId = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources) SetUsedAmount(v int32) *DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources {
	s.UsedAmount = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources) SetTotalAmount(v int32) *DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources {
	s.TotalAmount = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources) SetInstanceType(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationSetAllocatedResources {
	s.InstanceType = &v
	return s
}

type DescribeCapacityReservationsResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCapacityReservationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCapacityReservationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsResponse) SetHeaders(v map[string]*string) *DescribeCapacityReservationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCapacityReservationsResponse) SetBody(v *DescribeCapacityReservationsResponseBody) *DescribeCapacityReservationsResponse {
	s.Body = v
	return s
}

type DescribeClassicLinkInstancesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber           *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeClassicLinkInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClassicLinkInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeClassicLinkInstancesRequest) SetOwnerId(v int64) *DescribeClassicLinkInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetResourceOwnerAccount(v string) *DescribeClassicLinkInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetResourceOwnerId(v int64) *DescribeClassicLinkInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetRegionId(v string) *DescribeClassicLinkInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetVpcId(v string) *DescribeClassicLinkInstancesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetInstanceId(v string) *DescribeClassicLinkInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetPageNumber(v string) *DescribeClassicLinkInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetPageSize(v string) *DescribeClassicLinkInstancesRequest {
	s.PageSize = &v
	return s
}

type DescribeClassicLinkInstancesResponseBody struct {
	TotalCount *int32                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Links      []*DescribeClassicLinkInstancesResponseBodyLinks `json:"Links,omitempty" xml:"Links,omitempty" type:"Repeated"`
}

func (s DescribeClassicLinkInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClassicLinkInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClassicLinkInstancesResponseBody) SetTotalCount(v int32) *DescribeClassicLinkInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponseBody) SetPageSize(v int32) *DescribeClassicLinkInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponseBody) SetRequestId(v string) *DescribeClassicLinkInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponseBody) SetPageNumber(v int32) *DescribeClassicLinkInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponseBody) SetLinks(v []*DescribeClassicLinkInstancesResponseBodyLinks) *DescribeClassicLinkInstancesResponseBody {
	s.Links = v
	return s
}

type DescribeClassicLinkInstancesResponseBodyLinks struct {
	VpcId      *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeClassicLinkInstancesResponseBodyLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeClassicLinkInstancesResponseBodyLinks) GoString() string {
	return s.String()
}

func (s *DescribeClassicLinkInstancesResponseBodyLinks) SetVpcId(v string) *DescribeClassicLinkInstancesResponseBodyLinks {
	s.VpcId = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponseBodyLinks) SetInstanceId(v string) *DescribeClassicLinkInstancesResponseBodyLinks {
	s.InstanceId = &v
	return s
}

type DescribeClassicLinkInstancesResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClassicLinkInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClassicLinkInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClassicLinkInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeClassicLinkInstancesResponse) SetHeaders(v map[string]*string) *DescribeClassicLinkInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeClassicLinkInstancesResponse) SetBody(v *DescribeClassicLinkInstancesResponseBody) *DescribeClassicLinkInstancesResponse {
	s.Body = v
	return s
}

type DescribeCloudAssistantStatusRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s DescribeCloudAssistantStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudAssistantStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusRequest) SetOwnerId(v int64) *DescribeCloudAssistantStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetResourceOwnerAccount(v string) *DescribeCloudAssistantStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetResourceOwnerId(v int64) *DescribeCloudAssistantStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetOwnerAccount(v string) *DescribeCloudAssistantStatusRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetRegionId(v string) *DescribeCloudAssistantStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetInstanceId(v []*string) *DescribeCloudAssistantStatusRequest {
	s.InstanceId = v
	return s
}

type DescribeCloudAssistantStatusResponseBody struct {
	RequestId                       *string                                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceCloudAssistantStatusSet []*DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet `json:"InstanceCloudAssistantStatusSet,omitempty" xml:"InstanceCloudAssistantStatusSet,omitempty" type:"Repeated"`
}

func (s DescribeCloudAssistantStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudAssistantStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusResponseBody) SetRequestId(v string) *DescribeCloudAssistantStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBody) SetInstanceCloudAssistantStatusSet(v []*DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet) *DescribeCloudAssistantStatusResponseBody {
	s.InstanceCloudAssistantStatusSet = v
	return s
}

type DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet struct {
	CloudAssistantStatus  *string `json:"CloudAssistantStatus,omitempty" xml:"CloudAssistantStatus,omitempty"`
	CloudAssistantVersion *string `json:"CloudAssistantVersion,omitempty" xml:"CloudAssistantVersion,omitempty"`
	InstanceId            *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet) SetCloudAssistantStatus(v string) *DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet {
	s.CloudAssistantStatus = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet) SetCloudAssistantVersion(v string) *DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet {
	s.CloudAssistantVersion = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet) SetInstanceId(v string) *DescribeCloudAssistantStatusResponseBodyInstanceCloudAssistantStatusSet {
	s.InstanceId = &v
	return s
}

type DescribeCloudAssistantStatusResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCloudAssistantStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCloudAssistantStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudAssistantStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusResponse) SetHeaders(v map[string]*string) *DescribeCloudAssistantStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudAssistantStatusResponse) SetBody(v *DescribeCloudAssistantStatusResponseBody) *DescribeCloudAssistantStatusResponse {
	s.Body = v
	return s
}

type DescribeClustersRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeClustersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersRequest) GoString() string {
	return s.String()
}

func (s *DescribeClustersRequest) SetOwnerId(v int64) *DescribeClustersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeClustersRequest) SetResourceOwnerAccount(v string) *DescribeClustersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeClustersRequest) SetResourceOwnerId(v int64) *DescribeClustersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClustersRequest) SetRegionId(v string) *DescribeClustersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClustersRequest) SetOwnerAccount(v string) *DescribeClustersRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeClustersResponseBody struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Clusters  []*DescribeClustersResponseBodyClusters `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Repeated"`
}

func (s DescribeClustersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponseBody) SetRequestId(v string) *DescribeClustersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClustersResponseBody) SetClusters(v []*DescribeClustersResponseBodyClusters) *DescribeClustersResponseBody {
	s.Clusters = v
	return s
}

type DescribeClustersResponseBodyClusters struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClustersResponseBodyClusters) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponseBodyClusters) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponseBodyClusters) SetClusterId(v string) *DescribeClustersResponseBodyClusters {
	s.ClusterId = &v
	return s
}

type DescribeClustersResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClustersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClustersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponse) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponse) SetHeaders(v map[string]*string) *DescribeClustersResponse {
	s.Headers = v
	return s
}

func (s *DescribeClustersResponse) SetBody(v *DescribeClustersResponseBody) *DescribeClustersResponse {
	s.Body = v
	return s
}

type DescribeCommandsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CommandId            *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
	ContentEncoding      *string `json:"ContentEncoding,omitempty" xml:"ContentEncoding,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeCommandsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommandsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCommandsRequest) SetOwnerId(v int64) *DescribeCommandsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCommandsRequest) SetResourceOwnerAccount(v string) *DescribeCommandsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCommandsRequest) SetResourceOwnerId(v int64) *DescribeCommandsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCommandsRequest) SetOwnerAccount(v string) *DescribeCommandsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeCommandsRequest) SetRegionId(v string) *DescribeCommandsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCommandsRequest) SetCommandId(v string) *DescribeCommandsRequest {
	s.CommandId = &v
	return s
}

func (s *DescribeCommandsRequest) SetName(v string) *DescribeCommandsRequest {
	s.Name = &v
	return s
}

func (s *DescribeCommandsRequest) SetDescription(v string) *DescribeCommandsRequest {
	s.Description = &v
	return s
}

func (s *DescribeCommandsRequest) SetType(v string) *DescribeCommandsRequest {
	s.Type = &v
	return s
}

func (s *DescribeCommandsRequest) SetContentEncoding(v string) *DescribeCommandsRequest {
	s.ContentEncoding = &v
	return s
}

func (s *DescribeCommandsRequest) SetPageNumber(v int64) *DescribeCommandsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommandsRequest) SetPageSize(v int64) *DescribeCommandsRequest {
	s.PageSize = &v
	return s
}

type DescribeCommandsResponseBody struct {
	TotalCount *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int64                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Commands   []*DescribeCommandsResponseBodyCommands `json:"Commands,omitempty" xml:"Commands,omitempty" type:"Repeated"`
}

func (s DescribeCommandsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommandsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponseBody) SetTotalCount(v int64) *DescribeCommandsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeCommandsResponseBody) SetPageSize(v int64) *DescribeCommandsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCommandsResponseBody) SetRequestId(v string) *DescribeCommandsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCommandsResponseBody) SetPageNumber(v int64) *DescribeCommandsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommandsResponseBody) SetCommands(v []*DescribeCommandsResponseBodyCommands) *DescribeCommandsResponseBody {
	s.Commands = v
	return s
}

type DescribeCommandsResponseBodyCommands struct {
	CreationTime    *string   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Timeout         *int64    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	Type            *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	ParameterNames  []*string `json:"ParameterNames,omitempty" xml:"ParameterNames,omitempty" type:"Repeated"`
	InvokeTimes     *int32    `json:"InvokeTimes,omitempty" xml:"InvokeTimes,omitempty"`
	WorkingDir      *string   `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
	Description     *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	CommandContent  *string   `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	CommandId       *string   `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	Name            *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	EnableParameter *bool     `json:"EnableParameter,omitempty" xml:"EnableParameter,omitempty"`
}

func (s DescribeCommandsResponseBodyCommands) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommandsResponseBodyCommands) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponseBodyCommands) SetCreationTime(v string) *DescribeCommandsResponseBodyCommands {
	s.CreationTime = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetTimeout(v int64) *DescribeCommandsResponseBodyCommands {
	s.Timeout = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetType(v string) *DescribeCommandsResponseBodyCommands {
	s.Type = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetParameterNames(v []*string) *DescribeCommandsResponseBodyCommands {
	s.ParameterNames = v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetInvokeTimes(v int32) *DescribeCommandsResponseBodyCommands {
	s.InvokeTimes = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetWorkingDir(v string) *DescribeCommandsResponseBodyCommands {
	s.WorkingDir = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetDescription(v string) *DescribeCommandsResponseBodyCommands {
	s.Description = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetCommandContent(v string) *DescribeCommandsResponseBodyCommands {
	s.CommandContent = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetCommandId(v string) *DescribeCommandsResponseBodyCommands {
	s.CommandId = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetName(v string) *DescribeCommandsResponseBodyCommands {
	s.Name = &v
	return s
}

func (s *DescribeCommandsResponseBodyCommands) SetEnableParameter(v bool) *DescribeCommandsResponseBodyCommands {
	s.EnableParameter = &v
	return s
}

type DescribeCommandsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCommandsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCommandsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommandsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponse) SetHeaders(v map[string]*string) *DescribeCommandsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCommandsResponse) SetBody(v *DescribeCommandsResponseBody) *DescribeCommandsResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostAutoRenewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DedicatedHostIds     *string `json:"DedicatedHostIds,omitempty" xml:"DedicatedHostIds,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDedicatedHostAutoRenewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetOwnerId(v int64) *DescribeDedicatedHostAutoRenewRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostAutoRenewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetOwnerAccount(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetDedicatedHostIds(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetRegionId(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.RegionId = &v
	return s
}

type DescribeDedicatedHostAutoRenewResponseBody struct {
	RequestId                    *string                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DedicatedHostRenewAttributes []*DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes `json:"DedicatedHostRenewAttributes,omitempty" xml:"DedicatedHostRenewAttributes,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostAutoRenewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponseBody) SetRequestId(v string) *DescribeDedicatedHostAutoRenewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBody) SetDedicatedHostRenewAttributes(v []*DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes) *DescribeDedicatedHostAutoRenewResponseBody {
	s.DedicatedHostRenewAttributes = v
	return s
}

type DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes struct {
	PeriodUnit       *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	Duration         *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	DedicatedHostId  *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	RenewalStatus    *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
	AutoRenewEnabled *bool   `json:"AutoRenewEnabled,omitempty" xml:"AutoRenewEnabled,omitempty"`
}

func (s DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes) SetPeriodUnit(v string) *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes) SetDuration(v int32) *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes {
	s.Duration = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes) SetDedicatedHostId(v string) *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes) SetRenewalStatus(v string) *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes {
	s.RenewalStatus = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes) SetAutoRenewEnabled(v bool) *DescribeDedicatedHostAutoRenewResponseBodyDedicatedHostRenewAttributes {
	s.AutoRenewEnabled = &v
	return s
}

type DescribeDedicatedHostAutoRenewResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDedicatedHostAutoRenewResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostAutoRenewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostAutoRenewResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponse) SetBody(v *DescribeDedicatedHostAutoRenewResponseBody) *DescribeDedicatedHostAutoRenewResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostClustersRequest struct {
	OwnerId                  *int64                                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount     *string                                    `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64                                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status                   *string                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	LockReason               *string                                    `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	OwnerAccount             *string                                    `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceGroupId          *string                                    `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                      []*DescribeDedicatedHostClustersRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	RegionId                 *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                   *string                                    `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DedicatedHostClusterIds  *string                                    `json:"DedicatedHostClusterIds,omitempty" xml:"DedicatedHostClusterIds,omitempty"`
	DedicatedHostClusterName *string                                    `json:"DedicatedHostClusterName,omitempty" xml:"DedicatedHostClusterName,omitempty"`
	PageNumber               *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                 *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDedicatedHostClustersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersRequest) SetOwnerId(v int64) *DescribeDedicatedHostClustersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostClustersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostClustersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetStatus(v string) *DescribeDedicatedHostClustersRequest {
	s.Status = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetLockReason(v string) *DescribeDedicatedHostClustersRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetOwnerAccount(v string) *DescribeDedicatedHostClustersRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetResourceGroupId(v string) *DescribeDedicatedHostClustersRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetTag(v []*DescribeDedicatedHostClustersRequestTag) *DescribeDedicatedHostClustersRequest {
	s.Tag = v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetRegionId(v string) *DescribeDedicatedHostClustersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetZoneId(v string) *DescribeDedicatedHostClustersRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetDedicatedHostClusterIds(v string) *DescribeDedicatedHostClustersRequest {
	s.DedicatedHostClusterIds = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetDedicatedHostClusterName(v string) *DescribeDedicatedHostClustersRequest {
	s.DedicatedHostClusterName = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetPageNumber(v int32) *DescribeDedicatedHostClustersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetPageSize(v int32) *DescribeDedicatedHostClustersRequest {
	s.PageSize = &v
	return s
}

type DescribeDedicatedHostClustersRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDedicatedHostClustersRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersRequestTag) SetKey(v string) *DescribeDedicatedHostClustersRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequestTag) SetValue(v string) *DescribeDedicatedHostClustersRequestTag {
	s.Value = &v
	return s
}

type DescribeDedicatedHostClustersResponseBody struct {
	DedicatedHostClusters []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters `json:"DedicatedHostClusters,omitempty" xml:"DedicatedHostClusters,omitempty" type:"Repeated"`
	TotalCount            *int32                                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize              *int32                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId             *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber            *int32                                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBody) SetDedicatedHostClusters(v []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) *DescribeDedicatedHostClustersResponseBody {
	s.DedicatedHostClusters = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBody) SetTotalCount(v int32) *DescribeDedicatedHostClustersResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBody) SetPageSize(v int32) *DescribeDedicatedHostClustersResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBody) SetRequestId(v string) *DescribeDedicatedHostClustersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBody) SetPageNumber(v int32) *DescribeDedicatedHostClustersResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters struct {
	Description                  *string                                                                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	DedicatedHostClusterId       *string                                                                                     `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	ResourceGroupId              *string                                                                                     `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId                       *string                                                                                     `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Tags                         []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersTags                       `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	DedicatedHostClusterCapacity *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity `json:"DedicatedHostClusterCapacity,omitempty" xml:"DedicatedHostClusterCapacity,omitempty" type:"Struct"`
	DedicatedHostIds             []*string                                                                                   `json:"DedicatedHostIds,omitempty" xml:"DedicatedHostIds,omitempty" type:"Repeated"`
	RegionId                     *string                                                                                     `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostClusterName     *string                                                                                     `json:"DedicatedHostClusterName,omitempty" xml:"DedicatedHostClusterName,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetDescription(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.Description = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetDedicatedHostClusterId(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetResourceGroupId(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetZoneId(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetTags(v []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersTags) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.Tags = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetDedicatedHostClusterCapacity(v *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.DedicatedHostClusterCapacity = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetDedicatedHostIds(v []*string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.DedicatedHostIds = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetRegionId(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetDedicatedHostClusterName(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.DedicatedHostClusterName = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersTags) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersTags) SetTagValue(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersTags {
	s.TagValue = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersTags) SetTagKey(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersTags {
	s.TagKey = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity struct {
	LocalStorageCapacities []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities `json:"LocalStorageCapacities,omitempty" xml:"LocalStorageCapacities,omitempty" type:"Repeated"`
	AvailableMemory        *int32                                                                                                              `json:"AvailableMemory,omitempty" xml:"AvailableMemory,omitempty"`
	TotalMemory            *int32                                                                                                              `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	TotalVcpus             *int32                                                                                                              `json:"TotalVcpus,omitempty" xml:"TotalVcpus,omitempty"`
	AvailableVcpus         *int32                                                                                                              `json:"AvailableVcpus,omitempty" xml:"AvailableVcpus,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity) SetLocalStorageCapacities(v []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity {
	s.LocalStorageCapacities = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity) SetAvailableMemory(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity {
	s.AvailableMemory = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity) SetTotalMemory(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity {
	s.TotalMemory = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity) SetTotalVcpus(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity {
	s.TotalVcpus = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity) SetAvailableVcpus(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacity {
	s.AvailableVcpus = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities struct {
	DataDiskCategory *string `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty"`
	AvailableDisk    *int32  `json:"AvailableDisk,omitempty" xml:"AvailableDisk,omitempty"`
	TotalDisk        *int32  `json:"TotalDisk,omitempty" xml:"TotalDisk,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities) SetDataDiskCategory(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities {
	s.DataDiskCategory = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities) SetAvailableDisk(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities {
	s.AvailableDisk = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities) SetTotalDisk(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterCapacityLocalStorageCapacities {
	s.TotalDisk = &v
	return s
}

type DescribeDedicatedHostClustersResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDedicatedHostClustersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostClustersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostClustersResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostClustersResponse) SetBody(v *DescribeDedicatedHostClustersResponseBody) *DescribeDedicatedHostClustersResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostsRequest struct {
	OwnerId              *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId               *string                             `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DedicatedHostIds     *string                             `json:"DedicatedHostIds,omitempty" xml:"DedicatedHostIds,omitempty"`
	DedicatedHostName    *string                             `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	Status               *string                             `json:"Status,omitempty" xml:"Status,omitempty"`
	DedicatedHostType    *string                             `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	LockReason           *string                             `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	PageNumber           *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceGroupId      *string                             `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                  []*DescribeDedicatedHostsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsRequest) SetOwnerId(v int64) *DescribeDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetRegionId(v string) *DescribeDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetZoneId(v string) *DescribeDedicatedHostsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostIds(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostName(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetStatus(v string) *DescribeDedicatedHostsRequest {
	s.Status = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostType(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetLockReason(v string) *DescribeDedicatedHostsRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetPageNumber(v int32) *DescribeDedicatedHostsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetPageSize(v int32) *DescribeDedicatedHostsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetOwnerAccount(v string) *DescribeDedicatedHostsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceGroupId(v string) *DescribeDedicatedHostsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetTag(v []*DescribeDedicatedHostsRequestTag) *DescribeDedicatedHostsRequest {
	s.Tag = v
	return s
}

type DescribeDedicatedHostsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDedicatedHostsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsRequestTag) SetKey(v string) *DescribeDedicatedHostsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDedicatedHostsRequestTag) SetValue(v string) *DescribeDedicatedHostsRequestTag {
	s.Value = &v
	return s
}

type DescribeDedicatedHostsResponseBody struct {
	TotalCount     *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	DedicatedHosts []*DescribeDedicatedHostsResponseBodyDedicatedHosts `json:"DedicatedHosts,omitempty" xml:"DedicatedHosts,omitempty" type:"Repeated"`
	PageSize       *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber     *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeDedicatedHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBody) SetTotalCount(v int32) *DescribeDedicatedHostsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetDedicatedHosts(v []*DescribeDedicatedHostsResponseBodyDedicatedHosts) *DescribeDedicatedHostsResponseBody {
	s.DedicatedHosts = v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetPageSize(v int32) *DescribeDedicatedHostsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetRequestId(v string) *DescribeDedicatedHostsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetPageNumber(v int32) *DescribeDedicatedHostsResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHosts struct {
	Status                              *string                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	CreationTime                        *string                                                            `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Capacity                            *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity          `json:"Capacity,omitempty" xml:"Capacity,omitempty" type:"Struct"`
	AutoPlacement                       *string                                                            `json:"AutoPlacement,omitempty" xml:"AutoPlacement,omitempty"`
	OperationLocks                      []*DescribeDedicatedHostsResponseBodyDedicatedHostsOperationLocks  `json:"OperationLocks,omitempty" xml:"OperationLocks,omitempty" type:"Repeated"`
	ChargeType                          *string                                                            `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Tags                                []*DescribeDedicatedHostsResponseBodyDedicatedHostsTags            `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	ActionOnMaintenance                 *string                                                            `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty"`
	PhysicalGpus                        *int32                                                             `json:"PhysicalGpus,omitempty" xml:"PhysicalGpus,omitempty"`
	SaleCycle                           *string                                                            `json:"SaleCycle,omitempty" xml:"SaleCycle,omitempty"`
	Description                         *string                                                            `json:"Description,omitempty" xml:"Description,omitempty"`
	DedicatedHostType                   *string                                                            `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	DedicatedHostId                     *string                                                            `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	Sockets                             *int32                                                             `json:"Sockets,omitempty" xml:"Sockets,omitempty"`
	Cores                               *int32                                                             `json:"Cores,omitempty" xml:"Cores,omitempty"`
	GPUSpec                             *string                                                            `json:"GPUSpec,omitempty" xml:"GPUSpec,omitempty"`
	AutoReleaseTime                     *string                                                            `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	CpuOverCommitRatio                  *float32                                                           `json:"CpuOverCommitRatio,omitempty" xml:"CpuOverCommitRatio,omitempty"`
	SupportedInstanceTypesList          []*string                                                          `json:"SupportedInstanceTypesList,omitempty" xml:"SupportedInstanceTypesList,omitempty" type:"Repeated"`
	SupportedCustomInstanceTypeFamilies []*string                                                          `json:"SupportedCustomInstanceTypeFamilies,omitempty" xml:"SupportedCustomInstanceTypeFamilies,omitempty" type:"Repeated"`
	Instances                           []*DescribeDedicatedHostsResponseBodyDedicatedHostsInstances       `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	RegionId                            *string                                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkAttributes                   *DescribeDedicatedHostsResponseBodyDedicatedHostsNetworkAttributes `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	DedicatedHostName                   *string                                                            `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	ExpiredTime                         *string                                                            `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	DedicatedHostClusterId              *string                                                            `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	ResourceGroupId                     *string                                                            `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId                              *string                                                            `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	SupportedInstanceTypeFamilies       []*string                                                          `json:"SupportedInstanceTypeFamilies,omitempty" xml:"SupportedInstanceTypeFamilies,omitempty" type:"Repeated"`
	MachineId                           *string                                                            `json:"MachineId,omitempty" xml:"MachineId,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHosts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHosts) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetStatus(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.Status = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetCreationTime(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.CreationTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetCapacity(v *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.Capacity = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetAutoPlacement(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.AutoPlacement = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetOperationLocks(v []*DescribeDedicatedHostsResponseBodyDedicatedHostsOperationLocks) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.OperationLocks = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetChargeType(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.ChargeType = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetTags(v []*DescribeDedicatedHostsResponseBodyDedicatedHostsTags) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.Tags = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetActionOnMaintenance(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.ActionOnMaintenance = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetPhysicalGpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.PhysicalGpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetSaleCycle(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.SaleCycle = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetDescription(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.Description = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetDedicatedHostType(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetDedicatedHostId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetSockets(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.Sockets = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetCores(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.Cores = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetGPUSpec(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.GPUSpec = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetAutoReleaseTime(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.AutoReleaseTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetCpuOverCommitRatio(v float32) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.CpuOverCommitRatio = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetSupportedInstanceTypesList(v []*string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.SupportedInstanceTypesList = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetSupportedCustomInstanceTypeFamilies(v []*string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.SupportedCustomInstanceTypeFamilies = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetInstances(v []*DescribeDedicatedHostsResponseBodyDedicatedHostsInstances) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.Instances = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetRegionId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetNetworkAttributes(v *DescribeDedicatedHostsResponseBodyDedicatedHostsNetworkAttributes) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.NetworkAttributes = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetDedicatedHostName(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.DedicatedHostName = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetExpiredTime(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetDedicatedHostClusterId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetResourceGroupId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetZoneId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetSupportedInstanceTypeFamilies(v []*string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.SupportedInstanceTypeFamilies = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetMachineId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.MachineId = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity struct {
	AvailableMemory       *float32 `json:"AvailableMemory,omitempty" xml:"AvailableMemory,omitempty"`
	LocalStorageCategory  *string  `json:"LocalStorageCategory,omitempty" xml:"LocalStorageCategory,omitempty"`
	TotalMemory           *float32 `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	TotalLocalStorage     *int32   `json:"TotalLocalStorage,omitempty" xml:"TotalLocalStorage,omitempty"`
	TotalVcpus            *int32   `json:"TotalVcpus,omitempty" xml:"TotalVcpus,omitempty"`
	TotalVgpus            *int32   `json:"TotalVgpus,omitempty" xml:"TotalVgpus,omitempty"`
	AvailableLocalStorage *int32   `json:"AvailableLocalStorage,omitempty" xml:"AvailableLocalStorage,omitempty"`
	AvailableVcpus        *int32   `json:"AvailableVcpus,omitempty" xml:"AvailableVcpus,omitempty"`
	AvailableVgpus        *int32   `json:"AvailableVgpus,omitempty" xml:"AvailableVgpus,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) SetAvailableMemory(v float32) *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity {
	s.AvailableMemory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) SetLocalStorageCategory(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity {
	s.LocalStorageCategory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) SetTotalMemory(v float32) *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity {
	s.TotalMemory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) SetTotalLocalStorage(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity {
	s.TotalLocalStorage = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) SetTotalVcpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity {
	s.TotalVcpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) SetTotalVgpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity {
	s.TotalVgpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) SetAvailableLocalStorage(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity {
	s.AvailableLocalStorage = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) SetAvailableVcpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity {
	s.AvailableVcpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity) SetAvailableVgpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsCapacity {
	s.AvailableVgpus = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsOperationLocks struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsOperationLocks) SetLockReason(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsOperationLocks {
	s.LockReason = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsTags) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsTags) SetTagValue(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsTags {
	s.TagValue = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsTags) SetTagKey(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsTags {
	s.TagKey = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsInstances struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsInstances) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsInstances) SetInstanceId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsInstances) SetInstanceType(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsInstances {
	s.InstanceType = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsNetworkAttributes struct {
	UdpTimeout    *int32 `json:"UdpTimeout,omitempty" xml:"UdpTimeout,omitempty"`
	SlbUdpTimeout *int32 `json:"SlbUdpTimeout,omitempty" xml:"SlbUdpTimeout,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsNetworkAttributes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsNetworkAttributes) SetUdpTimeout(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsNetworkAttributes {
	s.UdpTimeout = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsNetworkAttributes) SetSlbUdpTimeout(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsNetworkAttributes {
	s.SlbUdpTimeout = &v
	return s
}

type DescribeDedicatedHostsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDedicatedHostsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetBody(v *DescribeDedicatedHostsResponseBody) *DescribeDedicatedHostsResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostTypesRequest struct {
	OwnerId                     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount        *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostType           *string `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	SupportedInstanceTypeFamily *string `json:"SupportedInstanceTypeFamily,omitempty" xml:"SupportedInstanceTypeFamily,omitempty"`
}

func (s DescribeDedicatedHostTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesRequest) SetOwnerId(v int64) *DescribeDedicatedHostTypesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostTypesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostTypesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetOwnerAccount(v string) *DescribeDedicatedHostTypesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetRegionId(v string) *DescribeDedicatedHostTypesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetDedicatedHostType(v string) *DescribeDedicatedHostTypesRequest {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetSupportedInstanceTypeFamily(v string) *DescribeDedicatedHostTypesRequest {
	s.SupportedInstanceTypeFamily = &v
	return s
}

type DescribeDedicatedHostTypesResponseBody struct {
	RequestId          *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DedicatedHostTypes []*DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes `json:"DedicatedHostTypes,omitempty" xml:"DedicatedHostTypes,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseBody) SetRequestId(v string) *DescribeDedicatedHostTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBody) SetDedicatedHostTypes(v []*DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) *DescribeDedicatedHostTypesResponseBody {
	s.DedicatedHostTypes = v
	return s
}

type DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes struct {
	Cores                         *int32    `json:"Cores,omitempty" xml:"Cores,omitempty"`
	GPUSpec                       *string   `json:"GPUSpec,omitempty" xml:"GPUSpec,omitempty"`
	LocalStorageCategory          *string   `json:"LocalStorageCategory,omitempty" xml:"LocalStorageCategory,omitempty"`
	TotalVcpus                    *int32    `json:"TotalVcpus,omitempty" xml:"TotalVcpus,omitempty"`
	CpuOverCommitRatioRange       *string   `json:"CpuOverCommitRatioRange,omitempty" xml:"CpuOverCommitRatioRange,omitempty"`
	SupportedInstanceTypesList    []*string `json:"SupportedInstanceTypesList,omitempty" xml:"SupportedInstanceTypesList,omitempty" type:"Repeated"`
	PhysicalGpus                  *int32    `json:"PhysicalGpus,omitempty" xml:"PhysicalGpus,omitempty"`
	MemorySize                    *float32  `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
	SupportCpuOverCommitRatio     *bool     `json:"SupportCpuOverCommitRatio,omitempty" xml:"SupportCpuOverCommitRatio,omitempty"`
	LocalStorageCapacity          *int64    `json:"LocalStorageCapacity,omitempty" xml:"LocalStorageCapacity,omitempty"`
	LocalStorageAmount            *int32    `json:"LocalStorageAmount,omitempty" xml:"LocalStorageAmount,omitempty"`
	DedicatedHostType             *string   `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	TotalVgpus                    *int32    `json:"TotalVgpus,omitempty" xml:"TotalVgpus,omitempty"`
	Sockets                       *int32    `json:"Sockets,omitempty" xml:"Sockets,omitempty"`
	SupportedInstanceTypeFamilies []*string `json:"SupportedInstanceTypeFamilies,omitempty" xml:"SupportedInstanceTypeFamilies,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetCores(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.Cores = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetGPUSpec(v string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.GPUSpec = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetLocalStorageCategory(v string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.LocalStorageCategory = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetTotalVcpus(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.TotalVcpus = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetCpuOverCommitRatioRange(v string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.CpuOverCommitRatioRange = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetSupportedInstanceTypesList(v []*string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.SupportedInstanceTypesList = v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetPhysicalGpus(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.PhysicalGpus = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetMemorySize(v float32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.MemorySize = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetSupportCpuOverCommitRatio(v bool) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.SupportCpuOverCommitRatio = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetLocalStorageCapacity(v int64) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.LocalStorageCapacity = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetLocalStorageAmount(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.LocalStorageAmount = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetDedicatedHostType(v string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetTotalVgpus(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.TotalVgpus = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetSockets(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.Sockets = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetSupportedInstanceTypeFamilies(v []*string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.SupportedInstanceTypeFamilies = v
	return s
}

type DescribeDedicatedHostTypesResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDedicatedHostTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostTypesResponse) SetBody(v *DescribeDedicatedHostTypesResponseBody) *DescribeDedicatedHostTypesResponse {
	s.Body = v
	return s
}

type DescribeDemandsRequest struct {
	OwnerId              *int64                       `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                      `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                      `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber           *int32                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	DryRun               *bool                        `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	Tag                  []*DescribeDemandsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId               *string                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DemandId             *string                      `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
	InstanceTypeFamily   *string                      `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	InstanceType         *string                      `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceChargeType   *string                      `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	DemandType           *string                      `json:"DemandType,omitempty" xml:"DemandType,omitempty"`
	DemandStatus         []*string                    `json:"DemandStatus,omitempty" xml:"DemandStatus,omitempty" type:"Repeated"`
}

func (s DescribeDemandsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDemandsRequest) SetOwnerId(v int64) *DescribeDemandsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDemandsRequest) SetResourceOwnerAccount(v string) *DescribeDemandsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDemandsRequest) SetResourceOwnerId(v int64) *DescribeDemandsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDemandsRequest) SetOwnerAccount(v string) *DescribeDemandsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDemandsRequest) SetRegionId(v string) *DescribeDemandsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDemandsRequest) SetPageNumber(v int32) *DescribeDemandsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDemandsRequest) SetPageSize(v int32) *DescribeDemandsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDemandsRequest) SetDryRun(v bool) *DescribeDemandsRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeDemandsRequest) SetTag(v []*DescribeDemandsRequestTag) *DescribeDemandsRequest {
	s.Tag = v
	return s
}

func (s *DescribeDemandsRequest) SetZoneId(v string) *DescribeDemandsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDemandsRequest) SetDemandId(v string) *DescribeDemandsRequest {
	s.DemandId = &v
	return s
}

func (s *DescribeDemandsRequest) SetInstanceTypeFamily(v string) *DescribeDemandsRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeDemandsRequest) SetInstanceType(v string) *DescribeDemandsRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeDemandsRequest) SetInstanceChargeType(v string) *DescribeDemandsRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeDemandsRequest) SetDemandType(v string) *DescribeDemandsRequest {
	s.DemandType = &v
	return s
}

func (s *DescribeDemandsRequest) SetDemandStatus(v []*string) *DescribeDemandsRequest {
	s.DemandStatus = v
	return s
}

type DescribeDemandsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDemandsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDemandsRequestTag) SetKey(v string) *DescribeDemandsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDemandsRequestTag) SetValue(v string) *DescribeDemandsRequestTag {
	s.Value = &v
	return s
}

type DescribeDemandsResponseBody struct {
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Demands    []*DescribeDemandsResponseBodyDemands `json:"Demands,omitempty" xml:"Demands,omitempty" type:"Repeated"`
	RegionId   *string                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDemandsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDemandsResponseBody) SetTotalCount(v int32) *DescribeDemandsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDemandsResponseBody) SetPageSize(v int32) *DescribeDemandsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDemandsResponseBody) SetRequestId(v string) *DescribeDemandsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDemandsResponseBody) SetPageNumber(v int32) *DescribeDemandsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDemandsResponseBody) SetDemands(v []*DescribeDemandsResponseBodyDemands) *DescribeDemandsResponseBody {
	s.Demands = v
	return s
}

func (s *DescribeDemandsResponseBody) SetRegionId(v string) *DescribeDemandsResponseBody {
	s.RegionId = &v
	return s
}

type DescribeDemandsResponseBodyDemands struct {
	Comment            *string                                          `json:"Comment,omitempty" xml:"Comment,omitempty"`
	DemandId           *string                                          `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
	DemandDescription  *string                                          `json:"DemandDescription,omitempty" xml:"DemandDescription,omitempty"`
	DemandTime         *string                                          `json:"DemandTime,omitempty" xml:"DemandTime,omitempty"`
	SupplyInfos        []*DescribeDemandsResponseBodyDemandsSupplyInfos `json:"SupplyInfos,omitempty" xml:"SupplyInfos,omitempty" type:"Repeated"`
	DemandName         *string                                          `json:"DemandName,omitempty" xml:"DemandName,omitempty"`
	InstanceType       *string                                          `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceChargeType *string                                          `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Period             *int32                                           `json:"Period,omitempty" xml:"Period,omitempty"`
	EndTime            *string                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	AvailableAmount    *int32                                           `json:"AvailableAmount,omitempty" xml:"AvailableAmount,omitempty"`
	StartTime          *string                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	PeriodUnit         *string                                          `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	ZoneId             *string                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	UsedAmount         *int32                                           `json:"UsedAmount,omitempty" xml:"UsedAmount,omitempty"`
	TotalAmount        *int32                                           `json:"TotalAmount,omitempty" xml:"TotalAmount,omitempty"`
	DeliveringAmount   *int32                                           `json:"DeliveringAmount,omitempty" xml:"DeliveringAmount,omitempty"`
	InstanceTypeFamily *string                                          `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	DemandStatus       *string                                          `json:"DemandStatus,omitempty" xml:"DemandStatus,omitempty"`
}

func (s DescribeDemandsResponseBodyDemands) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsResponseBodyDemands) GoString() string {
	return s.String()
}

func (s *DescribeDemandsResponseBodyDemands) SetComment(v string) *DescribeDemandsResponseBodyDemands {
	s.Comment = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetDemandId(v string) *DescribeDemandsResponseBodyDemands {
	s.DemandId = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetDemandDescription(v string) *DescribeDemandsResponseBodyDemands {
	s.DemandDescription = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetDemandTime(v string) *DescribeDemandsResponseBodyDemands {
	s.DemandTime = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetSupplyInfos(v []*DescribeDemandsResponseBodyDemandsSupplyInfos) *DescribeDemandsResponseBodyDemands {
	s.SupplyInfos = v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetDemandName(v string) *DescribeDemandsResponseBodyDemands {
	s.DemandName = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetInstanceType(v string) *DescribeDemandsResponseBodyDemands {
	s.InstanceType = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetInstanceChargeType(v string) *DescribeDemandsResponseBodyDemands {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetPeriod(v int32) *DescribeDemandsResponseBodyDemands {
	s.Period = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetEndTime(v string) *DescribeDemandsResponseBodyDemands {
	s.EndTime = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetAvailableAmount(v int32) *DescribeDemandsResponseBodyDemands {
	s.AvailableAmount = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetStartTime(v string) *DescribeDemandsResponseBodyDemands {
	s.StartTime = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetPeriodUnit(v string) *DescribeDemandsResponseBodyDemands {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetZoneId(v string) *DescribeDemandsResponseBodyDemands {
	s.ZoneId = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetUsedAmount(v int32) *DescribeDemandsResponseBodyDemands {
	s.UsedAmount = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetTotalAmount(v int32) *DescribeDemandsResponseBodyDemands {
	s.TotalAmount = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetDeliveringAmount(v int32) *DescribeDemandsResponseBodyDemands {
	s.DeliveringAmount = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetInstanceTypeFamily(v string) *DescribeDemandsResponseBodyDemands {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemands) SetDemandStatus(v string) *DescribeDemandsResponseBodyDemands {
	s.DemandStatus = &v
	return s
}

type DescribeDemandsResponseBodyDemandsSupplyInfos struct {
	Amount          *int32  `json:"Amount,omitempty" xml:"Amount,omitempty"`
	SupplyEndTime   *string `json:"SupplyEndTime,omitempty" xml:"SupplyEndTime,omitempty"`
	SupplyStatus    *string `json:"SupplyStatus,omitempty" xml:"SupplyStatus,omitempty"`
	SupplyStartTime *string `json:"SupplyStartTime,omitempty" xml:"SupplyStartTime,omitempty"`
}

func (s DescribeDemandsResponseBodyDemandsSupplyInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsResponseBodyDemandsSupplyInfos) GoString() string {
	return s.String()
}

func (s *DescribeDemandsResponseBodyDemandsSupplyInfos) SetAmount(v int32) *DescribeDemandsResponseBodyDemandsSupplyInfos {
	s.Amount = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemandsSupplyInfos) SetSupplyEndTime(v string) *DescribeDemandsResponseBodyDemandsSupplyInfos {
	s.SupplyEndTime = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemandsSupplyInfos) SetSupplyStatus(v string) *DescribeDemandsResponseBodyDemandsSupplyInfos {
	s.SupplyStatus = &v
	return s
}

func (s *DescribeDemandsResponseBodyDemandsSupplyInfos) SetSupplyStartTime(v string) *DescribeDemandsResponseBodyDemandsSupplyInfos {
	s.SupplyStartTime = &v
	return s
}

type DescribeDemandsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDemandsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDemandsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDemandsResponse) SetHeaders(v map[string]*string) *DescribeDemandsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDemandsResponse) SetBody(v *DescribeDemandsResponseBody) *DescribeDemandsResponse {
	s.Body = v
	return s
}

type DescribeDeploymentSetsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DeploymentSetIds     *string `json:"DeploymentSetIds,omitempty" xml:"DeploymentSetIds,omitempty"`
	NetworkType          *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	Strategy             *string `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	DeploymentSetName    *string `json:"DeploymentSetName,omitempty" xml:"DeploymentSetName,omitempty"`
	Granularity          *string `json:"Granularity,omitempty" xml:"Granularity,omitempty"`
	Domain               *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
}

func (s DescribeDeploymentSetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetsRequest) SetOwnerId(v int64) *DescribeDeploymentSetsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetResourceOwnerAccount(v string) *DescribeDeploymentSetsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetResourceOwnerId(v int64) *DescribeDeploymentSetsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetRegionId(v string) *DescribeDeploymentSetsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetPageNumber(v int32) *DescribeDeploymentSetsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetPageSize(v int32) *DescribeDeploymentSetsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetOwnerAccount(v string) *DescribeDeploymentSetsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetDeploymentSetIds(v string) *DescribeDeploymentSetsRequest {
	s.DeploymentSetIds = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetNetworkType(v string) *DescribeDeploymentSetsRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetStrategy(v string) *DescribeDeploymentSetsRequest {
	s.Strategy = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetDeploymentSetName(v string) *DescribeDeploymentSetsRequest {
	s.DeploymentSetName = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetGranularity(v string) *DescribeDeploymentSetsRequest {
	s.Granularity = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetDomain(v string) *DescribeDeploymentSetsRequest {
	s.Domain = &v
	return s
}

type DescribeDeploymentSetsResponseBody struct {
	TotalCount     *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize       *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber     *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	DeploymentSets []*DescribeDeploymentSetsResponseBodyDeploymentSets `json:"DeploymentSets,omitempty" xml:"DeploymentSets,omitempty" type:"Repeated"`
	RegionId       *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDeploymentSetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetsResponseBody) SetTotalCount(v int32) *DescribeDeploymentSetsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBody) SetPageSize(v int32) *DescribeDeploymentSetsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBody) SetRequestId(v string) *DescribeDeploymentSetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBody) SetPageNumber(v int32) *DescribeDeploymentSetsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBody) SetDeploymentSets(v []*DescribeDeploymentSetsResponseBodyDeploymentSets) *DescribeDeploymentSetsResponseBody {
	s.DeploymentSets = v
	return s
}

func (s *DescribeDeploymentSetsResponseBody) SetRegionId(v string) *DescribeDeploymentSetsResponseBody {
	s.RegionId = &v
	return s
}

type DescribeDeploymentSetsResponseBodyDeploymentSets struct {
	CreationTime             *string   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Strategy                 *string   `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	DeploymentSetId          *string   `json:"DeploymentSetId,omitempty" xml:"DeploymentSetId,omitempty"`
	DeploymentStrategy       *string   `json:"DeploymentStrategy,omitempty" xml:"DeploymentStrategy,omitempty"`
	DeploymentSetDescription *string   `json:"DeploymentSetDescription,omitempty" xml:"DeploymentSetDescription,omitempty"`
	Domain                   *string   `json:"Domain,omitempty" xml:"Domain,omitempty"`
	GroupCount               *int32    `json:"GroupCount,omitempty" xml:"GroupCount,omitempty"`
	Granularity              *string   `json:"Granularity,omitempty" xml:"Granularity,omitempty"`
	InstanceIds              []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	DeploymentSetName        *string   `json:"DeploymentSetName,omitempty" xml:"DeploymentSetName,omitempty"`
	InstanceAmount           *int32    `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
}

func (s DescribeDeploymentSetsResponseBodyDeploymentSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetsResponseBodyDeploymentSets) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetCreationTime(v string) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.CreationTime = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetStrategy(v string) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.Strategy = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetDeploymentSetId(v string) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.DeploymentSetId = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetDeploymentStrategy(v string) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.DeploymentStrategy = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetDeploymentSetDescription(v string) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.DeploymentSetDescription = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetDomain(v string) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.Domain = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetGroupCount(v int32) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.GroupCount = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetGranularity(v string) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.Granularity = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetInstanceIds(v []*string) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.InstanceIds = v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetDeploymentSetName(v string) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.DeploymentSetName = &v
	return s
}

func (s *DescribeDeploymentSetsResponseBodyDeploymentSets) SetInstanceAmount(v int32) *DescribeDeploymentSetsResponseBodyDeploymentSets {
	s.InstanceAmount = &v
	return s
}

type DescribeDeploymentSetsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDeploymentSetsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDeploymentSetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetsResponse) SetHeaders(v map[string]*string) *DescribeDeploymentSetsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeploymentSetsResponse) SetBody(v *DescribeDeploymentSetsResponseBody) *DescribeDeploymentSetsResponse {
	s.Body = v
	return s
}

type DescribeDeploymentSetSupportedInstanceTypeFamilyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeDeploymentSetSupportedInstanceTypeFamilyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetSupportedInstanceTypeFamilyRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest) SetOwnerId(v int64) *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest) SetResourceOwnerAccount(v string) *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest) SetResourceOwnerId(v int64) *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest) SetRegionId(v string) *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest) SetOwnerAccount(v string) *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceTypeFamilies *string `json:"InstanceTypeFamilies,omitempty" xml:"InstanceTypeFamilies,omitempty"`
}

func (s DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody) SetRequestId(v string) *DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody) SetInstanceTypeFamilies(v string) *DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody {
	s.InstanceTypeFamilies = &v
	return s
}

type DescribeDeploymentSetSupportedInstanceTypeFamilyResponse struct {
	Headers map[string]*string                                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDeploymentSetSupportedInstanceTypeFamilyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetSupportedInstanceTypeFamilyResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyResponse) SetHeaders(v map[string]*string) *DescribeDeploymentSetSupportedInstanceTypeFamilyResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyResponse) SetBody(v *DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody) *DescribeDeploymentSetSupportedInstanceTypeFamilyResponse {
	s.Body = v
	return s
}

type DescribeDiskMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DiskId               *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeDiskMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiskMonitorDataRequest) SetOwnerId(v int64) *DescribeDiskMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeDiskMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeDiskMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetOwnerAccount(v string) *DescribeDiskMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetDiskId(v string) *DescribeDiskMonitorDataRequest {
	s.DiskId = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetStartTime(v string) *DescribeDiskMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetEndTime(v string) *DescribeDiskMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetPeriod(v int32) *DescribeDiskMonitorDataRequest {
	s.Period = &v
	return s
}

type DescribeDiskMonitorDataResponseBody struct {
	TotalCount  *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MonitorData []*DescribeDiskMonitorDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Repeated"`
}

func (s DescribeDiskMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiskMonitorDataResponseBody) SetTotalCount(v int32) *DescribeDiskMonitorDataResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBody) SetRequestId(v string) *DescribeDiskMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBody) SetMonitorData(v []*DescribeDiskMonitorDataResponseBodyMonitorData) *DescribeDiskMonitorDataResponseBody {
	s.MonitorData = v
	return s
}

type DescribeDiskMonitorDataResponseBodyMonitorData struct {
	BPSRead      *int32  `json:"BPSRead,omitempty" xml:"BPSRead,omitempty"`
	IOPSRead     *int32  `json:"IOPSRead,omitempty" xml:"IOPSRead,omitempty"`
	LatencyRead  *int32  `json:"LatencyRead,omitempty" xml:"LatencyRead,omitempty"`
	BPSTotal     *int32  `json:"BPSTotal,omitempty" xml:"BPSTotal,omitempty"`
	IOPSTotal    *int32  `json:"IOPSTotal,omitempty" xml:"IOPSTotal,omitempty"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	LatencyWrite *int32  `json:"LatencyWrite,omitempty" xml:"LatencyWrite,omitempty"`
	IOPSWrite    *int32  `json:"IOPSWrite,omitempty" xml:"IOPSWrite,omitempty"`
	DiskId       *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	BPSWrite     *int32  `json:"BPSWrite,omitempty" xml:"BPSWrite,omitempty"`
}

func (s DescribeDiskMonitorDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskMonitorDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetBPSRead(v int32) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.BPSRead = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetIOPSRead(v int32) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.IOPSRead = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetLatencyRead(v int32) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.LatencyRead = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetBPSTotal(v int32) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.BPSTotal = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetIOPSTotal(v int32) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.IOPSTotal = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetTimeStamp(v string) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetLatencyWrite(v int32) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.LatencyWrite = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetIOPSWrite(v int32) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.IOPSWrite = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetDiskId(v string) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.DiskId = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseBodyMonitorData) SetBPSWrite(v int32) *DescribeDiskMonitorDataResponseBodyMonitorData {
	s.BPSWrite = &v
	return s
}

type DescribeDiskMonitorDataResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDiskMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDiskMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiskMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeDiskMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiskMonitorDataResponse) SetBody(v *DescribeDiskMonitorDataResponseBody) *DescribeDiskMonitorDataResponse {
	s.Body = v
	return s
}

type DescribeDisksRequest struct {
	Filter                        []*DescribeDisksRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	OwnerId                       *int64                        `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount          *string                       `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId               *int64                        `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                      *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                        *string                       `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DiskIds                       *string                       `json:"DiskIds,omitempty" xml:"DiskIds,omitempty"`
	InstanceId                    *string                       `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DiskType                      *string                       `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	Category                      *string                       `json:"Category,omitempty" xml:"Category,omitempty"`
	Status                        *string                       `json:"Status,omitempty" xml:"Status,omitempty"`
	SnapshotId                    *string                       `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	Portable                      *bool                         `json:"Portable,omitempty" xml:"Portable,omitempty"`
	DeleteWithInstance            *bool                         `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	DeleteAutoSnapshot            *bool                         `json:"DeleteAutoSnapshot,omitempty" xml:"DeleteAutoSnapshot,omitempty"`
	PageNumber                    *int32                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                      *int32                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	NextToken                     *string                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	MaxResults                    *int32                        `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	OwnerAccount                  *string                       `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DiskName                      *string                       `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	AutoSnapshotPolicyId          *string                       `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	EnableAutoSnapshot            *bool                         `json:"EnableAutoSnapshot,omitempty" xml:"EnableAutoSnapshot,omitempty"`
	EnableAutomatedSnapshotPolicy *bool                         `json:"EnableAutomatedSnapshotPolicy,omitempty" xml:"EnableAutomatedSnapshotPolicy,omitempty"`
	DiskChargeType                *string                       `json:"DiskChargeType,omitempty" xml:"DiskChargeType,omitempty"`
	LockReason                    *string                       `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	ResourceGroupId               *string                       `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	EnableShared                  *bool                         `json:"EnableShared,omitempty" xml:"EnableShared,omitempty"`
	Encrypted                     *bool                         `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	DryRun                        *bool                         `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	KMSKeyId                      *string                       `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	Tag                           []*DescribeDisksRequestTag    `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	AdditionalAttributes          []*string                     `json:"AdditionalAttributes,omitempty" xml:"AdditionalAttributes,omitempty" type:"Repeated"`
}

func (s DescribeDisksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksRequest) GoString() string {
	return s.String()
}

func (s *DescribeDisksRequest) SetFilter(v []*DescribeDisksRequestFilter) *DescribeDisksRequest {
	s.Filter = v
	return s
}

func (s *DescribeDisksRequest) SetOwnerId(v int64) *DescribeDisksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDisksRequest) SetResourceOwnerAccount(v string) *DescribeDisksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDisksRequest) SetResourceOwnerId(v int64) *DescribeDisksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDisksRequest) SetRegionId(v string) *DescribeDisksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDisksRequest) SetZoneId(v string) *DescribeDisksRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskIds(v string) *DescribeDisksRequest {
	s.DiskIds = &v
	return s
}

func (s *DescribeDisksRequest) SetInstanceId(v string) *DescribeDisksRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskType(v string) *DescribeDisksRequest {
	s.DiskType = &v
	return s
}

func (s *DescribeDisksRequest) SetCategory(v string) *DescribeDisksRequest {
	s.Category = &v
	return s
}

func (s *DescribeDisksRequest) SetStatus(v string) *DescribeDisksRequest {
	s.Status = &v
	return s
}

func (s *DescribeDisksRequest) SetSnapshotId(v string) *DescribeDisksRequest {
	s.SnapshotId = &v
	return s
}

func (s *DescribeDisksRequest) SetPortable(v bool) *DescribeDisksRequest {
	s.Portable = &v
	return s
}

func (s *DescribeDisksRequest) SetDeleteWithInstance(v bool) *DescribeDisksRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *DescribeDisksRequest) SetDeleteAutoSnapshot(v bool) *DescribeDisksRequest {
	s.DeleteAutoSnapshot = &v
	return s
}

func (s *DescribeDisksRequest) SetPageNumber(v int32) *DescribeDisksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksRequest) SetPageSize(v int32) *DescribeDisksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksRequest) SetNextToken(v string) *DescribeDisksRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDisksRequest) SetMaxResults(v int32) *DescribeDisksRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDisksRequest) SetOwnerAccount(v string) *DescribeDisksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskName(v string) *DescribeDisksRequest {
	s.DiskName = &v
	return s
}

func (s *DescribeDisksRequest) SetAutoSnapshotPolicyId(v string) *DescribeDisksRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *DescribeDisksRequest) SetEnableAutoSnapshot(v bool) *DescribeDisksRequest {
	s.EnableAutoSnapshot = &v
	return s
}

func (s *DescribeDisksRequest) SetEnableAutomatedSnapshotPolicy(v bool) *DescribeDisksRequest {
	s.EnableAutomatedSnapshotPolicy = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskChargeType(v string) *DescribeDisksRequest {
	s.DiskChargeType = &v
	return s
}

func (s *DescribeDisksRequest) SetLockReason(v string) *DescribeDisksRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeDisksRequest) SetResourceGroupId(v string) *DescribeDisksRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDisksRequest) SetEnableShared(v bool) *DescribeDisksRequest {
	s.EnableShared = &v
	return s
}

func (s *DescribeDisksRequest) SetEncrypted(v bool) *DescribeDisksRequest {
	s.Encrypted = &v
	return s
}

func (s *DescribeDisksRequest) SetDryRun(v bool) *DescribeDisksRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeDisksRequest) SetKMSKeyId(v string) *DescribeDisksRequest {
	s.KMSKeyId = &v
	return s
}

func (s *DescribeDisksRequest) SetTag(v []*DescribeDisksRequestTag) *DescribeDisksRequest {
	s.Tag = v
	return s
}

func (s *DescribeDisksRequest) SetAdditionalAttributes(v []*string) *DescribeDisksRequest {
	s.AdditionalAttributes = v
	return s
}

type DescribeDisksRequestFilter struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDisksRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeDisksRequestFilter) SetKey(v string) *DescribeDisksRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeDisksRequestFilter) SetValue(v string) *DescribeDisksRequestFilter {
	s.Value = &v
	return s
}

type DescribeDisksRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDisksRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDisksRequestTag) SetKey(v string) *DescribeDisksRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDisksRequestTag) SetValue(v string) *DescribeDisksRequestTag {
	s.Value = &v
	return s
}

type DescribeDisksResponseBody struct {
	TotalCount *int32                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                           `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize   *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Disks      []*DescribeDisksResponseBodyDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Repeated"`
}

func (s DescribeDisksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBody) SetTotalCount(v int32) *DescribeDisksResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDisksResponseBody) SetNextToken(v string) *DescribeDisksResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDisksResponseBody) SetPageSize(v int32) *DescribeDisksResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksResponseBody) SetRequestId(v string) *DescribeDisksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDisksResponseBody) SetPageNumber(v int32) *DescribeDisksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksResponseBody) SetDisks(v []*DescribeDisksResponseBodyDisks) *DescribeDisksResponseBody {
	s.Disks = v
	return s
}

type DescribeDisksResponseBodyDisks struct {
	SerialNumber                  *string                                         `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	CreationTime                  *string                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status                        *string                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                          *string                                         `json:"Type,omitempty" xml:"Type,omitempty"`
	PerformanceLevel              *string                                         `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	OperationLocks                []*DescribeDisksResponseBodyDisksOperationLocks `json:"OperationLocks,omitempty" xml:"OperationLocks,omitempty" type:"Repeated"`
	BdfId                         *string                                         `json:"BdfId,omitempty" xml:"BdfId,omitempty"`
	EnableAutoSnapshot            *bool                                           `json:"EnableAutoSnapshot,omitempty" xml:"EnableAutoSnapshot,omitempty"`
	StorageSetId                  *string                                         `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	Tags                          []*DescribeDisksResponseBodyDisksTags           `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	StorageSetPartitionNumber     *int32                                          `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	DiskId                        *string                                         `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	MountInstances                []*DescribeDisksResponseBodyDisksMountInstances `json:"MountInstances,omitempty" xml:"MountInstances,omitempty" type:"Repeated"`
	DeleteAutoSnapshot            *bool                                           `json:"DeleteAutoSnapshot,omitempty" xml:"DeleteAutoSnapshot,omitempty"`
	Encrypted                     *bool                                           `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	IOPSRead                      *int32                                          `json:"IOPSRead,omitempty" xml:"IOPSRead,omitempty"`
	MountInstanceNum              *int32                                          `json:"MountInstanceNum,omitempty" xml:"MountInstanceNum,omitempty"`
	Description                   *string                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	Device                        *string                                         `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskName                      *string                                         `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Portable                      *bool                                           `json:"Portable,omitempty" xml:"Portable,omitempty"`
	ImageId                       *string                                         `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	DeleteWithInstance            *bool                                           `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	KMSKeyId                      *string                                         `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	DetachedTime                  *string                                         `json:"DetachedTime,omitempty" xml:"DetachedTime,omitempty"`
	SourceSnapshotId              *string                                         `json:"SourceSnapshotId,omitempty" xml:"SourceSnapshotId,omitempty"`
	AutoSnapshotPolicyId          *string                                         `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	EnableAutomatedSnapshotPolicy *bool                                           `json:"EnableAutomatedSnapshotPolicy,omitempty" xml:"EnableAutomatedSnapshotPolicy,omitempty"`
	IOPSWrite                     *int32                                          `json:"IOPSWrite,omitempty" xml:"IOPSWrite,omitempty"`
	InstanceId                    *string                                         `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IOPS                          *int32                                          `json:"IOPS,omitempty" xml:"IOPS,omitempty"`
	RegionId                      *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ExpiredTime                   *string                                         `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	Size                          *int32                                          `json:"Size,omitempty" xml:"Size,omitempty"`
	ResourceGroupId               *string                                         `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	DiskChargeType                *string                                         `json:"DiskChargeType,omitempty" xml:"DiskChargeType,omitempty"`
	ZoneId                        *string                                         `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	AttachedTime                  *string                                         `json:"AttachedTime,omitempty" xml:"AttachedTime,omitempty"`
	Category                      *string                                         `json:"Category,omitempty" xml:"Category,omitempty"`
	ProductCode                   *string                                         `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeDisksResponseBodyDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBodyDisks) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBodyDisks) SetSerialNumber(v string) *DescribeDisksResponseBodyDisks {
	s.SerialNumber = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetCreationTime(v string) *DescribeDisksResponseBodyDisks {
	s.CreationTime = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetStatus(v string) *DescribeDisksResponseBodyDisks {
	s.Status = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetType(v string) *DescribeDisksResponseBodyDisks {
	s.Type = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetPerformanceLevel(v string) *DescribeDisksResponseBodyDisks {
	s.PerformanceLevel = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetOperationLocks(v []*DescribeDisksResponseBodyDisksOperationLocks) *DescribeDisksResponseBodyDisks {
	s.OperationLocks = v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetBdfId(v string) *DescribeDisksResponseBodyDisks {
	s.BdfId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetEnableAutoSnapshot(v bool) *DescribeDisksResponseBodyDisks {
	s.EnableAutoSnapshot = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetStorageSetId(v string) *DescribeDisksResponseBodyDisks {
	s.StorageSetId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetTags(v []*DescribeDisksResponseBodyDisksTags) *DescribeDisksResponseBodyDisks {
	s.Tags = v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetStorageSetPartitionNumber(v int32) *DescribeDisksResponseBodyDisks {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetDiskId(v string) *DescribeDisksResponseBodyDisks {
	s.DiskId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetMountInstances(v []*DescribeDisksResponseBodyDisksMountInstances) *DescribeDisksResponseBodyDisks {
	s.MountInstances = v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetDeleteAutoSnapshot(v bool) *DescribeDisksResponseBodyDisks {
	s.DeleteAutoSnapshot = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetEncrypted(v bool) *DescribeDisksResponseBodyDisks {
	s.Encrypted = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetIOPSRead(v int32) *DescribeDisksResponseBodyDisks {
	s.IOPSRead = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetMountInstanceNum(v int32) *DescribeDisksResponseBodyDisks {
	s.MountInstanceNum = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetDescription(v string) *DescribeDisksResponseBodyDisks {
	s.Description = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetDevice(v string) *DescribeDisksResponseBodyDisks {
	s.Device = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetDiskName(v string) *DescribeDisksResponseBodyDisks {
	s.DiskName = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetPortable(v bool) *DescribeDisksResponseBodyDisks {
	s.Portable = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetImageId(v string) *DescribeDisksResponseBodyDisks {
	s.ImageId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetDeleteWithInstance(v bool) *DescribeDisksResponseBodyDisks {
	s.DeleteWithInstance = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetKMSKeyId(v string) *DescribeDisksResponseBodyDisks {
	s.KMSKeyId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetDetachedTime(v string) *DescribeDisksResponseBodyDisks {
	s.DetachedTime = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetSourceSnapshotId(v string) *DescribeDisksResponseBodyDisks {
	s.SourceSnapshotId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetAutoSnapshotPolicyId(v string) *DescribeDisksResponseBodyDisks {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetEnableAutomatedSnapshotPolicy(v bool) *DescribeDisksResponseBodyDisks {
	s.EnableAutomatedSnapshotPolicy = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetIOPSWrite(v int32) *DescribeDisksResponseBodyDisks {
	s.IOPSWrite = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetInstanceId(v string) *DescribeDisksResponseBodyDisks {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetIOPS(v int32) *DescribeDisksResponseBodyDisks {
	s.IOPS = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetRegionId(v string) *DescribeDisksResponseBodyDisks {
	s.RegionId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetExpiredTime(v string) *DescribeDisksResponseBodyDisks {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetSize(v int32) *DescribeDisksResponseBodyDisks {
	s.Size = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetResourceGroupId(v string) *DescribeDisksResponseBodyDisks {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetDiskChargeType(v string) *DescribeDisksResponseBodyDisks {
	s.DiskChargeType = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetZoneId(v string) *DescribeDisksResponseBodyDisks {
	s.ZoneId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetAttachedTime(v string) *DescribeDisksResponseBodyDisks {
	s.AttachedTime = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetCategory(v string) *DescribeDisksResponseBodyDisks {
	s.Category = &v
	return s
}

func (s *DescribeDisksResponseBodyDisks) SetProductCode(v string) *DescribeDisksResponseBodyDisks {
	s.ProductCode = &v
	return s
}

type DescribeDisksResponseBodyDisksOperationLocks struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
}

func (s DescribeDisksResponseBodyDisksOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBodyDisksOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBodyDisksOperationLocks) SetLockReason(v string) *DescribeDisksResponseBodyDisksOperationLocks {
	s.LockReason = &v
	return s
}

type DescribeDisksResponseBodyDisksTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeDisksResponseBodyDisksTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBodyDisksTags) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBodyDisksTags) SetTagValue(v string) *DescribeDisksResponseBodyDisksTags {
	s.TagValue = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksTags) SetTagKey(v string) *DescribeDisksResponseBodyDisksTags {
	s.TagKey = &v
	return s
}

type DescribeDisksResponseBodyDisksMountInstances struct {
	Device       *string `json:"Device,omitempty" xml:"Device,omitempty"`
	AttachedTime *string `json:"AttachedTime,omitempty" xml:"AttachedTime,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeDisksResponseBodyDisksMountInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBodyDisksMountInstances) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBodyDisksMountInstances) SetDevice(v string) *DescribeDisksResponseBodyDisksMountInstances {
	s.Device = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksMountInstances) SetAttachedTime(v string) *DescribeDisksResponseBodyDisksMountInstances {
	s.AttachedTime = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksMountInstances) SetInstanceId(v string) *DescribeDisksResponseBodyDisksMountInstances {
	s.InstanceId = &v
	return s
}

type DescribeDisksResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDisksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDisksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponse) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponse) SetHeaders(v map[string]*string) *DescribeDisksResponse {
	s.Headers = v
	return s
}

func (s *DescribeDisksResponse) SetBody(v *DescribeDisksResponseBody) *DescribeDisksResponse {
	s.Body = v
	return s
}

type DescribeDisksFullStatusRequest struct {
	EventTime            *DescribeDisksFullStatusRequestEventTime `json:"EventTime,omitempty" xml:"EventTime,omitempty" type:"Struct"`
	OwnerId              *int64                                   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status               *string                                  `json:"Status,omitempty" xml:"Status,omitempty"`
	HealthStatus         *string                                  `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty"`
	EventType            *string                                  `json:"EventType,omitempty" xml:"EventType,omitempty"`
	PageNumber           *int32                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	DiskId               []*string                                `json:"DiskId,omitempty" xml:"DiskId,omitempty" type:"Repeated"`
	EventId              []*string                                `json:"EventId,omitempty" xml:"EventId,omitempty" type:"Repeated"`
}

func (s DescribeDisksFullStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusRequest) SetEventTime(v *DescribeDisksFullStatusRequestEventTime) *DescribeDisksFullStatusRequest {
	s.EventTime = v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetOwnerId(v int64) *DescribeDisksFullStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetResourceOwnerAccount(v string) *DescribeDisksFullStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetResourceOwnerId(v int64) *DescribeDisksFullStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetOwnerAccount(v string) *DescribeDisksFullStatusRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetRegionId(v string) *DescribeDisksFullStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetStatus(v string) *DescribeDisksFullStatusRequest {
	s.Status = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetHealthStatus(v string) *DescribeDisksFullStatusRequest {
	s.HealthStatus = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetEventType(v string) *DescribeDisksFullStatusRequest {
	s.EventType = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetPageNumber(v int32) *DescribeDisksFullStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetPageSize(v int32) *DescribeDisksFullStatusRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetDiskId(v []*string) *DescribeDisksFullStatusRequest {
	s.DiskId = v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetEventId(v []*string) *DescribeDisksFullStatusRequest {
	s.EventId = v
	return s
}

type DescribeDisksFullStatusRequestEventTime struct {
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
	End   *string `json:"End,omitempty" xml:"End,omitempty"`
}

func (s DescribeDisksFullStatusRequestEventTime) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusRequestEventTime) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusRequestEventTime) SetStart(v string) *DescribeDisksFullStatusRequestEventTime {
	s.Start = &v
	return s
}

func (s *DescribeDisksFullStatusRequestEventTime) SetEnd(v string) *DescribeDisksFullStatusRequestEventTime {
	s.End = &v
	return s
}

type DescribeDisksFullStatusResponseBody struct {
	TotalCount        *int32                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize          *int32                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber        *int32                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	DiskFullStatusSet []*DescribeDisksFullStatusResponseBodyDiskFullStatusSet `json:"DiskFullStatusSet,omitempty" xml:"DiskFullStatusSet,omitempty" type:"Repeated"`
}

func (s DescribeDisksFullStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseBody) SetTotalCount(v int32) *DescribeDisksFullStatusResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBody) SetPageSize(v int32) *DescribeDisksFullStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBody) SetRequestId(v string) *DescribeDisksFullStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBody) SetPageNumber(v int32) *DescribeDisksFullStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBody) SetDiskFullStatusSet(v []*DescribeDisksFullStatusResponseBodyDiskFullStatusSet) *DescribeDisksFullStatusResponseBody {
	s.DiskFullStatusSet = v
	return s
}

type DescribeDisksFullStatusResponseBodyDiskFullStatusSet struct {
	Status       *DescribeDisksFullStatusResponseBodyDiskFullStatusSetStatus         `json:"Status,omitempty" xml:"Status,omitempty" type:"Struct"`
	DiskEventSet []*DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet `json:"DiskEventSet,omitempty" xml:"DiskEventSet,omitempty" type:"Repeated"`
	Device       *string                                                             `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskId       *string                                                             `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	InstanceId   *string                                                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	HealthStatus *DescribeDisksFullStatusResponseBodyDiskFullStatusSetHealthStatus   `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty" type:"Struct"`
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSet) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSet) SetStatus(v *DescribeDisksFullStatusResponseBodyDiskFullStatusSetStatus) *DescribeDisksFullStatusResponseBodyDiskFullStatusSet {
	s.Status = v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSet) SetDiskEventSet(v []*DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet) *DescribeDisksFullStatusResponseBodyDiskFullStatusSet {
	s.DiskEventSet = v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSet) SetDevice(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSet {
	s.Device = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSet) SetDiskId(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSet {
	s.DiskId = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSet) SetInstanceId(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSet {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSet) SetHealthStatus(v *DescribeDisksFullStatusResponseBodyDiskFullStatusSetHealthStatus) *DescribeDisksFullStatusResponseBodyDiskFullStatusSet {
	s.HealthStatus = v
	return s
}

type DescribeDisksFullStatusResponseBodyDiskFullStatusSetStatus struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSetStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSetStatus) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetStatus) SetCode(v int32) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetStatus {
	s.Code = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetStatus) SetName(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetStatus {
	s.Name = &v
	return s
}

type DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet struct {
	EventId      *string                                                                    `json:"EventId,omitempty" xml:"EventId,omitempty"`
	EventEndTime *string                                                                    `json:"EventEndTime,omitempty" xml:"EventEndTime,omitempty"`
	EventTime    *string                                                                    `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
	ImpactLevel  *string                                                                    `json:"ImpactLevel,omitempty" xml:"ImpactLevel,omitempty"`
	EventType    *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSetEventType `json:"EventType,omitempty" xml:"EventType,omitempty" type:"Struct"`
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet) SetEventId(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet {
	s.EventId = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet) SetEventEndTime(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet {
	s.EventEndTime = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet) SetEventTime(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet {
	s.EventTime = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet) SetImpactLevel(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet {
	s.ImpactLevel = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet) SetEventType(v *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSetEventType) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSet {
	s.EventType = v
	return s
}

type DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSetEventType struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSetEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSetEventType) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSetEventType) SetCode(v int32) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSetEventType {
	s.Code = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSetEventType) SetName(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetDiskEventSetEventType {
	s.Name = &v
	return s
}

type DescribeDisksFullStatusResponseBodyDiskFullStatusSetHealthStatus struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSetHealthStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseBodyDiskFullStatusSetHealthStatus) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetHealthStatus) SetCode(v int32) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetHealthStatus {
	s.Code = &v
	return s
}

func (s *DescribeDisksFullStatusResponseBodyDiskFullStatusSetHealthStatus) SetName(v string) *DescribeDisksFullStatusResponseBodyDiskFullStatusSetHealthStatus {
	s.Name = &v
	return s
}

type DescribeDisksFullStatusResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDisksFullStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDisksFullStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponse) SetHeaders(v map[string]*string) *DescribeDisksFullStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeDisksFullStatusResponse) SetBody(v *DescribeDisksFullStatusResponseBody) *DescribeDisksFullStatusResponse {
	s.Body = v
	return s
}

type DescribeEipAddressesRequest struct {
	Filter                 []*DescribeEipAddressesRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	OwnerId                *int64                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string                              `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64                               `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId               *string                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status                 *string                              `json:"Status,omitempty" xml:"Status,omitempty"`
	EipAddress             *string                              `json:"EipAddress,omitempty" xml:"EipAddress,omitempty"`
	AllocationId           *string                              `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	ISP                    *string                              `json:"ISP,omitempty" xml:"ISP,omitempty"`
	PageNumber             *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize               *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount           *string                              `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	LockReason             *string                              `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	AssociatedInstanceType *string                              `json:"AssociatedInstanceType,omitempty" xml:"AssociatedInstanceType,omitempty"`
	AssociatedInstanceId   *string                              `json:"AssociatedInstanceId,omitempty" xml:"AssociatedInstanceId,omitempty"`
	ChargeType             *string                              `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
}

func (s DescribeEipAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesRequest) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesRequest) SetFilter(v []*DescribeEipAddressesRequestFilter) *DescribeEipAddressesRequest {
	s.Filter = v
	return s
}

func (s *DescribeEipAddressesRequest) SetOwnerId(v int64) *DescribeEipAddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetResourceOwnerAccount(v string) *DescribeEipAddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetResourceOwnerId(v int64) *DescribeEipAddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetRegionId(v string) *DescribeEipAddressesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetStatus(v string) *DescribeEipAddressesRequest {
	s.Status = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetEipAddress(v string) *DescribeEipAddressesRequest {
	s.EipAddress = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetAllocationId(v string) *DescribeEipAddressesRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetISP(v string) *DescribeEipAddressesRequest {
	s.ISP = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetPageNumber(v int32) *DescribeEipAddressesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetPageSize(v int32) *DescribeEipAddressesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetOwnerAccount(v string) *DescribeEipAddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetLockReason(v string) *DescribeEipAddressesRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetAssociatedInstanceType(v string) *DescribeEipAddressesRequest {
	s.AssociatedInstanceType = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetAssociatedInstanceId(v string) *DescribeEipAddressesRequest {
	s.AssociatedInstanceId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetChargeType(v string) *DescribeEipAddressesRequest {
	s.ChargeType = &v
	return s
}

type DescribeEipAddressesRequestFilter struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeEipAddressesRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesRequestFilter) SetKey(v string) *DescribeEipAddressesRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeEipAddressesRequestFilter) SetValue(v string) *DescribeEipAddressesRequestFilter {
	s.Value = &v
	return s
}

type DescribeEipAddressesResponseBody struct {
	TotalCount   *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize     *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	EipAddresses []*DescribeEipAddressesResponseBodyEipAddresses `json:"EipAddresses,omitempty" xml:"EipAddresses,omitempty" type:"Repeated"`
	PageNumber   *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeEipAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseBody) SetTotalCount(v int32) *DescribeEipAddressesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeEipAddressesResponseBody) SetPageSize(v int32) *DescribeEipAddressesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEipAddressesResponseBody) SetRequestId(v string) *DescribeEipAddressesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEipAddressesResponseBody) SetEipAddresses(v []*DescribeEipAddressesResponseBodyEipAddresses) *DescribeEipAddressesResponseBody {
	s.EipAddresses = v
	return s
}

func (s *DescribeEipAddressesResponseBody) SetPageNumber(v int32) *DescribeEipAddressesResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeEipAddressesResponseBodyEipAddresses struct {
	Status             *string                                                       `json:"Status,omitempty" xml:"Status,omitempty"`
	OperationLocks     []*DescribeEipAddressesResponseBodyEipAddressesOperationLocks `json:"OperationLocks,omitempty" xml:"OperationLocks,omitempty" type:"Repeated"`
	AllocationTime     *string                                                       `json:"AllocationTime,omitempty" xml:"AllocationTime,omitempty"`
	ChargeType         *string                                                       `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	InstanceId         *string                                                       `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType       *string                                                       `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	RegionId           *string                                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	IpAddress          *string                                                       `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	Bandwidth          *string                                                       `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	ExpiredTime        *string                                                       `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	AllocationId       *string                                                       `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	InternetChargeType *string                                                       `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	EipBandwidth       *string                                                       `json:"EipBandwidth,omitempty" xml:"EipBandwidth,omitempty"`
}

func (s DescribeEipAddressesResponseBodyEipAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseBodyEipAddresses) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetStatus(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.Status = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetOperationLocks(v []*DescribeEipAddressesResponseBodyEipAddressesOperationLocks) *DescribeEipAddressesResponseBodyEipAddresses {
	s.OperationLocks = v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetAllocationTime(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.AllocationTime = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetChargeType(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.ChargeType = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetInstanceId(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.InstanceId = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetInstanceType(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.InstanceType = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetRegionId(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.RegionId = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetIpAddress(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.IpAddress = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetBandwidth(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.Bandwidth = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetExpiredTime(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetAllocationId(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.AllocationId = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetInternetChargeType(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetEipBandwidth(v string) *DescribeEipAddressesResponseBodyEipAddresses {
	s.EipBandwidth = &v
	return s
}

type DescribeEipAddressesResponseBodyEipAddressesOperationLocks struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
}

func (s DescribeEipAddressesResponseBodyEipAddressesOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseBodyEipAddressesOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseBodyEipAddressesOperationLocks) SetLockReason(v string) *DescribeEipAddressesResponseBodyEipAddressesOperationLocks {
	s.LockReason = &v
	return s
}

type DescribeEipAddressesResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeEipAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEipAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponse) SetHeaders(v map[string]*string) *DescribeEipAddressesResponse {
	s.Headers = v
	return s
}

func (s *DescribeEipAddressesResponse) SetBody(v *DescribeEipAddressesResponseBody) *DescribeEipAddressesResponse {
	s.Body = v
	return s
}

type DescribeEipMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId         *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeEipMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataRequest) SetOwnerId(v int64) *DescribeEipMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeEipMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeEipMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetRegionId(v string) *DescribeEipMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetAllocationId(v string) *DescribeEipMonitorDataRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetStartTime(v string) *DescribeEipMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetEndTime(v string) *DescribeEipMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetPeriod(v int32) *DescribeEipMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetOwnerAccount(v string) *DescribeEipMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeEipMonitorDataResponseBody struct {
	RequestId       *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	EipMonitorDatas []*DescribeEipMonitorDataResponseBodyEipMonitorDatas `json:"EipMonitorDatas,omitempty" xml:"EipMonitorDatas,omitempty" type:"Repeated"`
}

func (s DescribeEipMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataResponseBody) SetRequestId(v string) *DescribeEipMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEipMonitorDataResponseBody) SetEipMonitorDatas(v []*DescribeEipMonitorDataResponseBodyEipMonitorDatas) *DescribeEipMonitorDataResponseBody {
	s.EipMonitorDatas = v
	return s
}

type DescribeEipMonitorDataResponseBodyEipMonitorDatas struct {
	EipTX        *int32  `json:"EipTX,omitempty" xml:"EipTX,omitempty"`
	EipPackets   *int32  `json:"EipPackets,omitempty" xml:"EipPackets,omitempty"`
	EipBandwidth *int32  `json:"EipBandwidth,omitempty" xml:"EipBandwidth,omitempty"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	EipFlow      *int32  `json:"EipFlow,omitempty" xml:"EipFlow,omitempty"`
	EipRX        *int32  `json:"EipRX,omitempty" xml:"EipRX,omitempty"`
}

func (s DescribeEipMonitorDataResponseBodyEipMonitorDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataResponseBodyEipMonitorDatas) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataResponseBodyEipMonitorDatas) SetEipTX(v int32) *DescribeEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipTX = &v
	return s
}

func (s *DescribeEipMonitorDataResponseBodyEipMonitorDatas) SetEipPackets(v int32) *DescribeEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipPackets = &v
	return s
}

func (s *DescribeEipMonitorDataResponseBodyEipMonitorDatas) SetEipBandwidth(v int32) *DescribeEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipBandwidth = &v
	return s
}

func (s *DescribeEipMonitorDataResponseBodyEipMonitorDatas) SetTimeStamp(v string) *DescribeEipMonitorDataResponseBodyEipMonitorDatas {
	s.TimeStamp = &v
	return s
}

func (s *DescribeEipMonitorDataResponseBodyEipMonitorDatas) SetEipFlow(v int32) *DescribeEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipFlow = &v
	return s
}

func (s *DescribeEipMonitorDataResponseBodyEipMonitorDatas) SetEipRX(v int32) *DescribeEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipRX = &v
	return s
}

type DescribeEipMonitorDataResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeEipMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEipMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeEipMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeEipMonitorDataResponse) SetBody(v *DescribeEipMonitorDataResponseBody) *DescribeEipMonitorDataResponse {
	s.Body = v
	return s
}

type DescribeElasticityAssuranceInstancesRequest struct {
	PrivatePoolOptions   *DescribeElasticityAssuranceInstancesRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId              *int64                                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	MaxResults           *int32                                                         `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string                                                        `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PackageType          *string                                                        `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
}

func (s DescribeElasticityAssuranceInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssuranceInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssuranceInstancesRequest) SetPrivatePoolOptions(v *DescribeElasticityAssuranceInstancesRequestPrivatePoolOptions) *DescribeElasticityAssuranceInstancesRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *DescribeElasticityAssuranceInstancesRequest) SetOwnerId(v int64) *DescribeElasticityAssuranceInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesRequest) SetResourceOwnerAccount(v string) *DescribeElasticityAssuranceInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesRequest) SetResourceOwnerId(v int64) *DescribeElasticityAssuranceInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesRequest) SetOwnerAccount(v string) *DescribeElasticityAssuranceInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesRequest) SetRegionId(v string) *DescribeElasticityAssuranceInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesRequest) SetMaxResults(v int32) *DescribeElasticityAssuranceInstancesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesRequest) SetNextToken(v string) *DescribeElasticityAssuranceInstancesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesRequest) SetPackageType(v string) *DescribeElasticityAssuranceInstancesRequest {
	s.PackageType = &v
	return s
}

type DescribeElasticityAssuranceInstancesRequestPrivatePoolOptions struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeElasticityAssuranceInstancesRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssuranceInstancesRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssuranceInstancesRequestPrivatePoolOptions) SetId(v string) *DescribeElasticityAssuranceInstancesRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

type DescribeElasticityAssuranceInstancesResponseBody struct {
	TotalCount              *int32                                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken               *string                                                                    `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId               *string                                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MaxResults              *int32                                                                     `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	ElasticityAssuranceItem []*DescribeElasticityAssuranceInstancesResponseBodyElasticityAssuranceItem `json:"ElasticityAssuranceItem,omitempty" xml:"ElasticityAssuranceItem,omitempty" type:"Repeated"`
}

func (s DescribeElasticityAssuranceInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssuranceInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssuranceInstancesResponseBody) SetTotalCount(v int32) *DescribeElasticityAssuranceInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesResponseBody) SetNextToken(v string) *DescribeElasticityAssuranceInstancesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesResponseBody) SetRequestId(v string) *DescribeElasticityAssuranceInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesResponseBody) SetMaxResults(v int32) *DescribeElasticityAssuranceInstancesResponseBody {
	s.MaxResults = &v
	return s
}

func (s *DescribeElasticityAssuranceInstancesResponseBody) SetElasticityAssuranceItem(v []*DescribeElasticityAssuranceInstancesResponseBodyElasticityAssuranceItem) *DescribeElasticityAssuranceInstancesResponseBody {
	s.ElasticityAssuranceItem = v
	return s
}

type DescribeElasticityAssuranceInstancesResponseBodyElasticityAssuranceItem struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeElasticityAssuranceInstancesResponseBodyElasticityAssuranceItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssuranceInstancesResponseBodyElasticityAssuranceItem) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssuranceInstancesResponseBodyElasticityAssuranceItem) SetInstanceId(v string) *DescribeElasticityAssuranceInstancesResponseBodyElasticityAssuranceItem {
	s.InstanceId = &v
	return s
}

type DescribeElasticityAssuranceInstancesResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeElasticityAssuranceInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeElasticityAssuranceInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssuranceInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssuranceInstancesResponse) SetHeaders(v map[string]*string) *DescribeElasticityAssuranceInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeElasticityAssuranceInstancesResponse) SetBody(v *DescribeElasticityAssuranceInstancesResponseBody) *DescribeElasticityAssuranceInstancesResponse {
	s.Body = v
	return s
}

type DescribeElasticityAssurancesRequest struct {
	PrivatePoolOptions   *DescribeElasticityAssurancesRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId              *int64                                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	MaxResults           *int32                                                 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string                                                `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	Platform             *string                                                `json:"Platform,omitempty" xml:"Platform,omitempty"`
	InstanceType         *string                                                `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	ZoneId               *string                                                `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceChargeType   *string                                                `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Status               *string                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	PackageType          *string                                                `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
}

func (s DescribeElasticityAssurancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssurancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssurancesRequest) SetPrivatePoolOptions(v *DescribeElasticityAssurancesRequestPrivatePoolOptions) *DescribeElasticityAssurancesRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetOwnerId(v int64) *DescribeElasticityAssurancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetResourceOwnerAccount(v string) *DescribeElasticityAssurancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetResourceOwnerId(v int64) *DescribeElasticityAssurancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetOwnerAccount(v string) *DescribeElasticityAssurancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetRegionId(v string) *DescribeElasticityAssurancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetMaxResults(v int32) *DescribeElasticityAssurancesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetNextToken(v string) *DescribeElasticityAssurancesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetPlatform(v string) *DescribeElasticityAssurancesRequest {
	s.Platform = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetInstanceType(v string) *DescribeElasticityAssurancesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetZoneId(v string) *DescribeElasticityAssurancesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetInstanceChargeType(v string) *DescribeElasticityAssurancesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetStatus(v string) *DescribeElasticityAssurancesRequest {
	s.Status = &v
	return s
}

func (s *DescribeElasticityAssurancesRequest) SetPackageType(v string) *DescribeElasticityAssurancesRequest {
	s.PackageType = &v
	return s
}

type DescribeElasticityAssurancesRequestPrivatePoolOptions struct {
	Ids *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
}

func (s DescribeElasticityAssurancesRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssurancesRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssurancesRequestPrivatePoolOptions) SetIds(v string) *DescribeElasticityAssurancesRequestPrivatePoolOptions {
	s.Ids = &v
	return s
}

type DescribeElasticityAssurancesResponseBody struct {
	ElasticityAssuranceSet []*DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet `json:"ElasticityAssuranceSet,omitempty" xml:"ElasticityAssuranceSet,omitempty" type:"Repeated"`
	TotalCount             *int32                                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken              *string                                                           `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId              *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MaxResults             *int32                                                            `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
}

func (s DescribeElasticityAssurancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssurancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssurancesResponseBody) SetElasticityAssuranceSet(v []*DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) *DescribeElasticityAssurancesResponseBody {
	s.ElasticityAssuranceSet = v
	return s
}

func (s *DescribeElasticityAssurancesResponseBody) SetTotalCount(v int32) *DescribeElasticityAssurancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBody) SetNextToken(v string) *DescribeElasticityAssurancesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBody) SetRequestId(v string) *DescribeElasticityAssurancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBody) SetMaxResults(v int32) *DescribeElasticityAssurancesResponseBody {
	s.MaxResults = &v
	return s
}

type DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet struct {
	Status                          *string                                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	PrivatePoolOptionsMatchCriteria *string                                                                             `json:"PrivatePoolOptionsMatchCriteria,omitempty" xml:"PrivatePoolOptionsMatchCriteria,omitempty"`
	PrivatePoolOptionsId            *string                                                                             `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	UsedAssuranceTimes              *int32                                                                              `json:"UsedAssuranceTimes,omitempty" xml:"UsedAssuranceTimes,omitempty"`
	LatestStartTime                 *string                                                                             `json:"LatestStartTime,omitempty" xml:"LatestStartTime,omitempty"`
	AllocatedResources              []*DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources `json:"AllocatedResources,omitempty" xml:"AllocatedResources,omitempty" type:"Repeated"`
	PrivatePoolOptionsName          *string                                                                             `json:"PrivatePoolOptionsName,omitempty" xml:"PrivatePoolOptionsName,omitempty"`
	RegionId                        *string                                                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EndTime                         *string                                                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime                       *string                                                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Description                     *string                                                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	TotalAssuranceTimes             *string                                                                             `json:"TotalAssuranceTimes,omitempty" xml:"TotalAssuranceTimes,omitempty"`
}

func (s DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetStatus(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.Status = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetPrivatePoolOptionsMatchCriteria(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.PrivatePoolOptionsMatchCriteria = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetPrivatePoolOptionsId(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetUsedAssuranceTimes(v int32) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.UsedAssuranceTimes = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetLatestStartTime(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.LatestStartTime = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetAllocatedResources(v []*DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.AllocatedResources = v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetPrivatePoolOptionsName(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.PrivatePoolOptionsName = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetRegionId(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.RegionId = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetEndTime(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.EndTime = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetStartTime(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.StartTime = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetDescription(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.Description = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet) SetTotalAssuranceTimes(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSet {
	s.TotalAssuranceTimes = &v
	return s
}

type DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources struct {
	ZoneId       *string `json:"zoneId,omitempty" xml:"zoneId,omitempty"`
	UsedAmount   *int32  `json:"UsedAmount,omitempty" xml:"UsedAmount,omitempty"`
	TotalAmount  *int32  `json:"TotalAmount,omitempty" xml:"TotalAmount,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources) SetZoneId(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources {
	s.ZoneId = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources) SetUsedAmount(v int32) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources {
	s.UsedAmount = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources) SetTotalAmount(v int32) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources {
	s.TotalAmount = &v
	return s
}

func (s *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources) SetInstanceType(v string) *DescribeElasticityAssurancesResponseBodyElasticityAssuranceSetAllocatedResources {
	s.InstanceType = &v
	return s
}

type DescribeElasticityAssurancesResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeElasticityAssurancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeElasticityAssurancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeElasticityAssurancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeElasticityAssurancesResponse) SetHeaders(v map[string]*string) *DescribeElasticityAssurancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeElasticityAssurancesResponse) SetBody(v *DescribeElasticityAssurancesResponseBody) *DescribeElasticityAssurancesResponse {
	s.Body = v
	return s
}

type DescribeEniMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	EniId                *string `json:"EniId,omitempty" xml:"EniId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeEniMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeEniMonitorDataRequest) SetOwnerId(v int64) *DescribeEniMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeEniMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeEniMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetOwnerAccount(v string) *DescribeEniMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetEniId(v string) *DescribeEniMonitorDataRequest {
	s.EniId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetRegionId(v string) *DescribeEniMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetInstanceId(v string) *DescribeEniMonitorDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetStartTime(v string) *DescribeEniMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetEndTime(v string) *DescribeEniMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetPeriod(v int32) *DescribeEniMonitorDataRequest {
	s.Period = &v
	return s
}

type DescribeEniMonitorDataResponseBody struct {
	TotalCount  *int32                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MonitorData []*DescribeEniMonitorDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Repeated"`
}

func (s DescribeEniMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEniMonitorDataResponseBody) SetTotalCount(v int32) *DescribeEniMonitorDataResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeEniMonitorDataResponseBody) SetRequestId(v string) *DescribeEniMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEniMonitorDataResponseBody) SetMonitorData(v []*DescribeEniMonitorDataResponseBodyMonitorData) *DescribeEniMonitorDataResponseBody {
	s.MonitorData = v
	return s
}

type DescribeEniMonitorDataResponseBodyMonitorData struct {
	PacketRx     *string `json:"PacketRx,omitempty" xml:"PacketRx,omitempty"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	DropPacketRx *string `json:"DropPacketRx,omitempty" xml:"DropPacketRx,omitempty"`
	EniId        *string `json:"EniId,omitempty" xml:"EniId,omitempty"`
	DropPacketTx *string `json:"DropPacketTx,omitempty" xml:"DropPacketTx,omitempty"`
	PacketTx     *string `json:"PacketTx,omitempty" xml:"PacketTx,omitempty"`
	IntranetTx   *string `json:"IntranetTx,omitempty" xml:"IntranetTx,omitempty"`
	IntranetRx   *string `json:"IntranetRx,omitempty" xml:"IntranetRx,omitempty"`
}

func (s DescribeEniMonitorDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniMonitorDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeEniMonitorDataResponseBodyMonitorData) SetPacketRx(v string) *DescribeEniMonitorDataResponseBodyMonitorData {
	s.PacketRx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseBodyMonitorData) SetTimeStamp(v string) *DescribeEniMonitorDataResponseBodyMonitorData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeEniMonitorDataResponseBodyMonitorData) SetDropPacketRx(v string) *DescribeEniMonitorDataResponseBodyMonitorData {
	s.DropPacketRx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseBodyMonitorData) SetEniId(v string) *DescribeEniMonitorDataResponseBodyMonitorData {
	s.EniId = &v
	return s
}

func (s *DescribeEniMonitorDataResponseBodyMonitorData) SetDropPacketTx(v string) *DescribeEniMonitorDataResponseBodyMonitorData {
	s.DropPacketTx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseBodyMonitorData) SetPacketTx(v string) *DescribeEniMonitorDataResponseBodyMonitorData {
	s.PacketTx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseBodyMonitorData) SetIntranetTx(v string) *DescribeEniMonitorDataResponseBodyMonitorData {
	s.IntranetTx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseBodyMonitorData) SetIntranetRx(v string) *DescribeEniMonitorDataResponseBodyMonitorData {
	s.IntranetRx = &v
	return s
}

type DescribeEniMonitorDataResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeEniMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEniMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeEniMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeEniMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeEniMonitorDataResponse) SetBody(v *DescribeEniMonitorDataResponseBody) *DescribeEniMonitorDataResponse {
	s.Body = v
	return s
}

type DescribeForwardTableEntriesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ForwardTableId       *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty"`
	ForwardEntryId       *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeForwardTableEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesRequest) SetOwnerId(v int64) *DescribeForwardTableEntriesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetResourceOwnerAccount(v string) *DescribeForwardTableEntriesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetResourceOwnerId(v int64) *DescribeForwardTableEntriesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetOwnerAccount(v string) *DescribeForwardTableEntriesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetRegionId(v string) *DescribeForwardTableEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardTableId(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardTableId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardEntryId(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageNumber(v int32) *DescribeForwardTableEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageSize(v int32) *DescribeForwardTableEntriesRequest {
	s.PageSize = &v
	return s
}

type DescribeForwardTableEntriesResponseBody struct {
	TotalCount          *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize            *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId           *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber          *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ForwardTableEntries []*DescribeForwardTableEntriesResponseBodyForwardTableEntries `json:"ForwardTableEntries,omitempty" xml:"ForwardTableEntries,omitempty" type:"Repeated"`
}

func (s DescribeForwardTableEntriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseBody) SetTotalCount(v int32) *DescribeForwardTableEntriesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetPageSize(v int32) *DescribeForwardTableEntriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetRequestId(v string) *DescribeForwardTableEntriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetPageNumber(v int32) *DescribeForwardTableEntriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetForwardTableEntries(v []*DescribeForwardTableEntriesResponseBodyForwardTableEntries) *DescribeForwardTableEntriesResponseBody {
	s.ForwardTableEntries = v
	return s
}

type DescribeForwardTableEntriesResponseBodyForwardTableEntries struct {
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	InternalIp     *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort   *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	ForwardTableId *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty"`
	ExternalPort   *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	IpProtocol     *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	ExternalIp     *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
}

func (s DescribeForwardTableEntriesResponseBodyForwardTableEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseBodyForwardTableEntries) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetStatus(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.Status = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetForwardEntryId(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetInternalIp(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.InternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetInternalPort(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.InternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetForwardTableId(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ForwardTableId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetExternalPort(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ExternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetIpProtocol(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.IpProtocol = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetExternalIp(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ExternalIp = &v
	return s
}

type DescribeForwardTableEntriesResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeForwardTableEntriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeForwardTableEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponse) SetHeaders(v map[string]*string) *DescribeForwardTableEntriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetBody(v *DescribeForwardTableEntriesResponseBody) *DescribeForwardTableEntriesResponse {
	s.Body = v
	return s
}

type DescribeHaVipsRequest struct {
	OwnerId              *int64                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber           *int32                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter               []*DescribeHaVipsRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeHaVipsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsRequest) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsRequest) SetOwnerId(v int64) *DescribeHaVipsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetResourceOwnerAccount(v string) *DescribeHaVipsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeHaVipsRequest) SetResourceOwnerId(v int64) *DescribeHaVipsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetOwnerAccount(v string) *DescribeHaVipsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeHaVipsRequest) SetRegionId(v string) *DescribeHaVipsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetPageNumber(v int32) *DescribeHaVipsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHaVipsRequest) SetPageSize(v int32) *DescribeHaVipsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHaVipsRequest) SetFilter(v []*DescribeHaVipsRequestFilter) *DescribeHaVipsRequest {
	s.Filter = v
	return s
}

type DescribeHaVipsRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeHaVipsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsRequestFilter) SetKey(v string) *DescribeHaVipsRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeHaVipsRequestFilter) SetValue(v []*string) *DescribeHaVipsRequestFilter {
	s.Value = v
	return s
}

type DescribeHaVipsResponseBody struct {
	TotalCount *int32                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	HaVips     []*DescribeHaVipsResponseBodyHaVips `json:"HaVips,omitempty" xml:"HaVips,omitempty" type:"Repeated"`
	PageSize   *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeHaVipsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseBody) SetTotalCount(v int32) *DescribeHaVipsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeHaVipsResponseBody) SetHaVips(v []*DescribeHaVipsResponseBodyHaVips) *DescribeHaVipsResponseBody {
	s.HaVips = v
	return s
}

func (s *DescribeHaVipsResponseBody) SetPageSize(v int32) *DescribeHaVipsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeHaVipsResponseBody) SetRequestId(v string) *DescribeHaVipsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHaVipsResponseBody) SetPageNumber(v int32) *DescribeHaVipsResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeHaVipsResponseBodyHaVips struct {
	Status                 *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	VpcId                  *string   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId              *string   `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	IpAddress              *string   `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	Description            *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	HaVipId                *string   `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
	CreateTime             *string   `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	AssociatedInstances    []*string `json:"AssociatedInstances,omitempty" xml:"AssociatedInstances,omitempty" type:"Repeated"`
	MasterInstanceId       *string   `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty"`
	AssociatedEipAddresses []*string `json:"AssociatedEipAddresses,omitempty" xml:"AssociatedEipAddresses,omitempty" type:"Repeated"`
	RegionId               *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeHaVipsResponseBodyHaVips) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseBodyHaVips) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseBodyHaVips) SetStatus(v string) *DescribeHaVipsResponseBodyHaVips {
	s.Status = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetVpcId(v string) *DescribeHaVipsResponseBodyHaVips {
	s.VpcId = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetVSwitchId(v string) *DescribeHaVipsResponseBodyHaVips {
	s.VSwitchId = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetIpAddress(v string) *DescribeHaVipsResponseBodyHaVips {
	s.IpAddress = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetDescription(v string) *DescribeHaVipsResponseBodyHaVips {
	s.Description = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetHaVipId(v string) *DescribeHaVipsResponseBodyHaVips {
	s.HaVipId = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetCreateTime(v string) *DescribeHaVipsResponseBodyHaVips {
	s.CreateTime = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetAssociatedInstances(v []*string) *DescribeHaVipsResponseBodyHaVips {
	s.AssociatedInstances = v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetMasterInstanceId(v string) *DescribeHaVipsResponseBodyHaVips {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetAssociatedEipAddresses(v []*string) *DescribeHaVipsResponseBodyHaVips {
	s.AssociatedEipAddresses = v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetRegionId(v string) *DescribeHaVipsResponseBodyHaVips {
	s.RegionId = &v
	return s
}

type DescribeHaVipsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeHaVipsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHaVipsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponse) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponse) SetHeaders(v map[string]*string) *DescribeHaVipsResponse {
	s.Headers = v
	return s
}

func (s *DescribeHaVipsResponse) SetBody(v *DescribeHaVipsResponseBody) *DescribeHaVipsResponse {
	s.Body = v
	return s
}

type DescribeHpcClustersRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	HpcClusterIds        *string `json:"HpcClusterIds,omitempty" xml:"HpcClusterIds,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeHpcClustersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHpcClustersRequest) GoString() string {
	return s.String()
}

func (s *DescribeHpcClustersRequest) SetOwnerId(v int64) *DescribeHpcClustersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetResourceOwnerAccount(v string) *DescribeHpcClustersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetResourceOwnerId(v int64) *DescribeHpcClustersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetRegionId(v string) *DescribeHpcClustersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetClientToken(v string) *DescribeHpcClustersRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetOwnerAccount(v string) *DescribeHpcClustersRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetHpcClusterIds(v string) *DescribeHpcClustersRequest {
	s.HpcClusterIds = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetPageNumber(v int32) *DescribeHpcClustersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetPageSize(v int32) *DescribeHpcClustersRequest {
	s.PageSize = &v
	return s
}

type DescribeHpcClustersResponseBody struct {
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	HpcClusters []*DescribeHpcClustersResponseBodyHpcClusters `json:"HpcClusters,omitempty" xml:"HpcClusters,omitempty" type:"Repeated"`
}

func (s DescribeHpcClustersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHpcClustersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHpcClustersResponseBody) SetTotalCount(v int32) *DescribeHpcClustersResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeHpcClustersResponseBody) SetPageSize(v int32) *DescribeHpcClustersResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeHpcClustersResponseBody) SetRequestId(v string) *DescribeHpcClustersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHpcClustersResponseBody) SetPageNumber(v int32) *DescribeHpcClustersResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeHpcClustersResponseBody) SetHpcClusters(v []*DescribeHpcClustersResponseBodyHpcClusters) *DescribeHpcClustersResponseBody {
	s.HpcClusters = v
	return s
}

type DescribeHpcClustersResponseBodyHpcClusters struct {
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HpcClusterId *string `json:"HpcClusterId,omitempty" xml:"HpcClusterId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeHpcClustersResponseBodyHpcClusters) String() string {
	return tea.Prettify(s)
}

func (s DescribeHpcClustersResponseBodyHpcClusters) GoString() string {
	return s.String()
}

func (s *DescribeHpcClustersResponseBodyHpcClusters) SetDescription(v string) *DescribeHpcClustersResponseBodyHpcClusters {
	s.Description = &v
	return s
}

func (s *DescribeHpcClustersResponseBodyHpcClusters) SetHpcClusterId(v string) *DescribeHpcClustersResponseBodyHpcClusters {
	s.HpcClusterId = &v
	return s
}

func (s *DescribeHpcClustersResponseBodyHpcClusters) SetName(v string) *DescribeHpcClustersResponseBodyHpcClusters {
	s.Name = &v
	return s
}

type DescribeHpcClustersResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeHpcClustersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHpcClustersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHpcClustersResponse) GoString() string {
	return s.String()
}

func (s *DescribeHpcClustersResponse) SetHeaders(v map[string]*string) *DescribeHpcClustersResponse {
	s.Headers = v
	return s
}

func (s *DescribeHpcClustersResponse) SetBody(v *DescribeHpcClustersResponseBody) *DescribeHpcClustersResponse {
	s.Body = v
	return s
}

type DescribeImageFromFamilyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageFamily          *string `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty"`
}

func (s DescribeImageFromFamilyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyRequest) SetOwnerId(v int64) *DescribeImageFromFamilyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetResourceOwnerAccount(v string) *DescribeImageFromFamilyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetResourceOwnerId(v int64) *DescribeImageFromFamilyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetOwnerAccount(v string) *DescribeImageFromFamilyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetRegionId(v string) *DescribeImageFromFamilyRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetImageFamily(v string) *DescribeImageFromFamilyRequest {
	s.ImageFamily = &v
	return s
}

type DescribeImageFromFamilyResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Image     *DescribeImageFromFamilyResponseBodyImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Struct"`
}

func (s DescribeImageFromFamilyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponseBody) SetRequestId(v string) *DescribeImageFromFamilyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBody) SetImage(v *DescribeImageFromFamilyResponseBodyImage) *DescribeImageFromFamilyResponseBody {
	s.Image = v
	return s
}

type DescribeImageFromFamilyResponseBodyImage struct {
	ImageFamily          *string                                                       `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty"`
	Status               *string                                                       `json:"Status,omitempty" xml:"Status,omitempty"`
	CreationTime         *string                                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Progress             *string                                                       `json:"Progress,omitempty" xml:"Progress,omitempty"`
	IsCopied             *bool                                                         `json:"IsCopied,omitempty" xml:"IsCopied,omitempty"`
	ImageOwnerAlias      *string                                                       `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	IsSupportIoOptimized *bool                                                         `json:"IsSupportIoOptimized,omitempty" xml:"IsSupportIoOptimized,omitempty"`
	Tags                 []*DescribeImageFromFamilyResponseBodyImageTags               `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	IsSupportCloudinit   *bool                                                         `json:"IsSupportCloudinit,omitempty" xml:"IsSupportCloudinit,omitempty"`
	ImageVersion         *string                                                       `json:"ImageVersion,omitempty" xml:"ImageVersion,omitempty"`
	DiskDeviceMappings   []*DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings `json:"DiskDeviceMappings,omitempty" xml:"DiskDeviceMappings,omitempty" type:"Repeated"`
	Usage                *string                                                       `json:"Usage,omitempty" xml:"Usage,omitempty"`
	IsSelfShared         *string                                                       `json:"IsSelfShared,omitempty" xml:"IsSelfShared,omitempty"`
	Description          *string                                                       `json:"Description,omitempty" xml:"Description,omitempty"`
	Size                 *int32                                                        `json:"Size,omitempty" xml:"Size,omitempty"`
	Platform             *string                                                       `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ImageName            *string                                                       `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	OSName               *string                                                       `json:"OSName,omitempty" xml:"OSName,omitempty"`
	ImageId              *string                                                       `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	OSType               *string                                                       `json:"OSType,omitempty" xml:"OSType,omitempty"`
	IsSubscribed         *bool                                                         `json:"IsSubscribed,omitempty" xml:"IsSubscribed,omitempty"`
	ProductCode          *string                                                       `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	Architecture         *string                                                       `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
}

func (s DescribeImageFromFamilyResponseBodyImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponseBodyImage) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetImageFamily(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.ImageFamily = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetStatus(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.Status = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetCreationTime(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.CreationTime = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetProgress(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.Progress = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetIsCopied(v bool) *DescribeImageFromFamilyResponseBodyImage {
	s.IsCopied = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetImageOwnerAlias(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetIsSupportIoOptimized(v bool) *DescribeImageFromFamilyResponseBodyImage {
	s.IsSupportIoOptimized = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetTags(v []*DescribeImageFromFamilyResponseBodyImageTags) *DescribeImageFromFamilyResponseBodyImage {
	s.Tags = v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetIsSupportCloudinit(v bool) *DescribeImageFromFamilyResponseBodyImage {
	s.IsSupportCloudinit = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetImageVersion(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.ImageVersion = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetDiskDeviceMappings(v []*DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) *DescribeImageFromFamilyResponseBodyImage {
	s.DiskDeviceMappings = v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetUsage(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.Usage = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetIsSelfShared(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.IsSelfShared = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetDescription(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.Description = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetSize(v int32) *DescribeImageFromFamilyResponseBodyImage {
	s.Size = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetPlatform(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.Platform = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetImageName(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.ImageName = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetOSName(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.OSName = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetImageId(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.ImageId = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetOSType(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.OSType = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetIsSubscribed(v bool) *DescribeImageFromFamilyResponseBodyImage {
	s.IsSubscribed = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetProductCode(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.ProductCode = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImage) SetArchitecture(v string) *DescribeImageFromFamilyResponseBodyImage {
	s.Architecture = &v
	return s
}

type DescribeImageFromFamilyResponseBodyImageTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeImageFromFamilyResponseBodyImageTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponseBodyImageTags) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponseBodyImageTags) SetTagValue(v string) *DescribeImageFromFamilyResponseBodyImageTags {
	s.TagValue = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImageTags) SetTagKey(v string) *DescribeImageFromFamilyResponseBodyImageTags {
	s.TagKey = &v
	return s
}

type DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings struct {
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	ImportOSSBucket *string `json:"ImportOSSBucket,omitempty" xml:"ImportOSSBucket,omitempty"`
	SnapshotId      *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	ImportOSSObject *string `json:"ImportOSSObject,omitempty" xml:"ImportOSSObject,omitempty"`
	Size            *string `json:"Size,omitempty" xml:"Size,omitempty"`
	Device          *string `json:"Device,omitempty" xml:"Device,omitempty"`
	Format          *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) SetType(v string) *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings {
	s.Type = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) SetImportOSSBucket(v string) *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings {
	s.ImportOSSBucket = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) SetSnapshotId(v string) *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings {
	s.SnapshotId = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) SetImportOSSObject(v string) *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings {
	s.ImportOSSObject = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) SetSize(v string) *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings {
	s.Size = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) SetDevice(v string) *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings {
	s.Device = &v
	return s
}

func (s *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings) SetFormat(v string) *DescribeImageFromFamilyResponseBodyImageDiskDeviceMappings {
	s.Format = &v
	return s
}

type DescribeImageFromFamilyResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeImageFromFamilyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageFromFamilyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponse) SetHeaders(v map[string]*string) *DescribeImageFromFamilyResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageFromFamilyResponse) SetBody(v *DescribeImageFromFamilyResponseBody) *DescribeImageFromFamilyResponse {
	s.Body = v
	return s
}

type DescribeImagesRequest struct {
	OwnerId              *int64                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status               *string                        `json:"Status,omitempty" xml:"Status,omitempty"`
	ImageId              *string                        `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ShowExpired          *bool                          `json:"ShowExpired,omitempty" xml:"ShowExpired,omitempty"`
	SnapshotId           *string                        `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	ImageName            *string                        `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	ImageFamily          *string                        `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty"`
	ImageOwnerAlias      *string                        `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	InstanceType         *string                        `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	IsSupportIoOptimized *bool                          `json:"IsSupportIoOptimized,omitempty" xml:"IsSupportIoOptimized,omitempty"`
	IsSupportCloudinit   *bool                          `json:"IsSupportCloudinit,omitempty" xml:"IsSupportCloudinit,omitempty"`
	OSType               *string                        `json:"OSType,omitempty" xml:"OSType,omitempty"`
	Architecture         *string                        `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	PageNumber           *int32                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Usage                *string                        `json:"Usage,omitempty" xml:"Usage,omitempty"`
	DryRun               *bool                          `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	ActionType           *string                        `json:"ActionType,omitempty" xml:"ActionType,omitempty"`
	ResourceGroupId      *string                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                  []*DescribeImagesRequestTag    `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	Filter               []*DescribeImagesRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImagesRequest) SetOwnerId(v int64) *DescribeImagesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImagesRequest) SetResourceOwnerAccount(v string) *DescribeImagesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImagesRequest) SetResourceOwnerId(v int64) *DescribeImagesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImagesRequest) SetRegionId(v string) *DescribeImagesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImagesRequest) SetStatus(v string) *DescribeImagesRequest {
	s.Status = &v
	return s
}

func (s *DescribeImagesRequest) SetImageId(v string) *DescribeImagesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImagesRequest) SetShowExpired(v bool) *DescribeImagesRequest {
	s.ShowExpired = &v
	return s
}

func (s *DescribeImagesRequest) SetSnapshotId(v string) *DescribeImagesRequest {
	s.SnapshotId = &v
	return s
}

func (s *DescribeImagesRequest) SetImageName(v string) *DescribeImagesRequest {
	s.ImageName = &v
	return s
}

func (s *DescribeImagesRequest) SetImageFamily(v string) *DescribeImagesRequest {
	s.ImageFamily = &v
	return s
}

func (s *DescribeImagesRequest) SetImageOwnerAlias(v string) *DescribeImagesRequest {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeImagesRequest) SetInstanceType(v string) *DescribeImagesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeImagesRequest) SetIsSupportIoOptimized(v bool) *DescribeImagesRequest {
	s.IsSupportIoOptimized = &v
	return s
}

func (s *DescribeImagesRequest) SetIsSupportCloudinit(v bool) *DescribeImagesRequest {
	s.IsSupportCloudinit = &v
	return s
}

func (s *DescribeImagesRequest) SetOSType(v string) *DescribeImagesRequest {
	s.OSType = &v
	return s
}

func (s *DescribeImagesRequest) SetArchitecture(v string) *DescribeImagesRequest {
	s.Architecture = &v
	return s
}

func (s *DescribeImagesRequest) SetPageNumber(v int32) *DescribeImagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeImagesRequest) SetPageSize(v int32) *DescribeImagesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImagesRequest) SetOwnerAccount(v string) *DescribeImagesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeImagesRequest) SetUsage(v string) *DescribeImagesRequest {
	s.Usage = &v
	return s
}

func (s *DescribeImagesRequest) SetDryRun(v bool) *DescribeImagesRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeImagesRequest) SetActionType(v string) *DescribeImagesRequest {
	s.ActionType = &v
	return s
}

func (s *DescribeImagesRequest) SetResourceGroupId(v string) *DescribeImagesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeImagesRequest) SetTag(v []*DescribeImagesRequestTag) *DescribeImagesRequest {
	s.Tag = v
	return s
}

func (s *DescribeImagesRequest) SetFilter(v []*DescribeImagesRequestFilter) *DescribeImagesRequest {
	s.Filter = v
	return s
}

type DescribeImagesRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeImagesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeImagesRequestTag) SetKey(v string) *DescribeImagesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeImagesRequestTag) SetValue(v string) *DescribeImagesRequestTag {
	s.Value = &v
	return s
}

type DescribeImagesRequestFilter struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeImagesRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeImagesRequestFilter) SetKey(v string) *DescribeImagesRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeImagesRequestFilter) SetValue(v string) *DescribeImagesRequestFilter {
	s.Value = &v
	return s
}

type DescribeImagesResponseBody struct {
	TotalCount *int32                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Images     []*DescribeImagesResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Repeated"`
	RegionId   *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeImagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBody) SetTotalCount(v int32) *DescribeImagesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeImagesResponseBody) SetPageSize(v int32) *DescribeImagesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeImagesResponseBody) SetRequestId(v string) *DescribeImagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImagesResponseBody) SetPageNumber(v int32) *DescribeImagesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeImagesResponseBody) SetImages(v []*DescribeImagesResponseBodyImages) *DescribeImagesResponseBody {
	s.Images = v
	return s
}

func (s *DescribeImagesResponseBody) SetRegionId(v string) *DescribeImagesResponseBody {
	s.RegionId = &v
	return s
}

type DescribeImagesResponseBodyImages struct {
	Status               *string                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	CreationTime         *string                                               `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	IsSupportIoOptimized *bool                                                 `json:"IsSupportIoOptimized,omitempty" xml:"IsSupportIoOptimized,omitempty"`
	Tags                 []*DescribeImagesResponseBodyImagesTags               `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	ImageVersion         *string                                               `json:"ImageVersion,omitempty" xml:"ImageVersion,omitempty"`
	IsSelfShared         *string                                               `json:"IsSelfShared,omitempty" xml:"IsSelfShared,omitempty"`
	Description          *string                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	OSNameEn             *string                                               `json:"OSNameEn,omitempty" xml:"OSNameEn,omitempty"`
	Platform             *string                                               `json:"Platform,omitempty" xml:"Platform,omitempty"`
	OSName               *string                                               `json:"OSName,omitempty" xml:"OSName,omitempty"`
	ImageId              *string                                               `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	IsSubscribed         *bool                                                 `json:"IsSubscribed,omitempty" xml:"IsSubscribed,omitempty"`
	ImageFamily          *string                                               `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty"`
	Progress             *string                                               `json:"Progress,omitempty" xml:"Progress,omitempty"`
	IsCopied             *bool                                                 `json:"IsCopied,omitempty" xml:"IsCopied,omitempty"`
	ImageOwnerAlias      *string                                               `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	IsSupportCloudinit   *bool                                                 `json:"IsSupportCloudinit,omitempty" xml:"IsSupportCloudinit,omitempty"`
	DiskDeviceMappings   []*DescribeImagesResponseBodyImagesDiskDeviceMappings `json:"DiskDeviceMappings,omitempty" xml:"DiskDeviceMappings,omitempty" type:"Repeated"`
	Usage                *string                                               `json:"Usage,omitempty" xml:"Usage,omitempty"`
	Size                 *int32                                                `json:"Size,omitempty" xml:"Size,omitempty"`
	ResourceGroupId      *string                                               `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ImageName            *string                                               `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	OSType               *string                                               `json:"OSType,omitempty" xml:"OSType,omitempty"`
	Architecture         *string                                               `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	ProductCode          *string                                               `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeImagesResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImages) SetStatus(v string) *DescribeImagesResponseBodyImages {
	s.Status = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetCreationTime(v string) *DescribeImagesResponseBodyImages {
	s.CreationTime = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetIsSupportIoOptimized(v bool) *DescribeImagesResponseBodyImages {
	s.IsSupportIoOptimized = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetTags(v []*DescribeImagesResponseBodyImagesTags) *DescribeImagesResponseBodyImages {
	s.Tags = v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetImageVersion(v string) *DescribeImagesResponseBodyImages {
	s.ImageVersion = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetIsSelfShared(v string) *DescribeImagesResponseBodyImages {
	s.IsSelfShared = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetDescription(v string) *DescribeImagesResponseBodyImages {
	s.Description = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetOSNameEn(v string) *DescribeImagesResponseBodyImages {
	s.OSNameEn = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetPlatform(v string) *DescribeImagesResponseBodyImages {
	s.Platform = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetOSName(v string) *DescribeImagesResponseBodyImages {
	s.OSName = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetImageId(v string) *DescribeImagesResponseBodyImages {
	s.ImageId = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetIsSubscribed(v bool) *DescribeImagesResponseBodyImages {
	s.IsSubscribed = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetImageFamily(v string) *DescribeImagesResponseBodyImages {
	s.ImageFamily = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetProgress(v string) *DescribeImagesResponseBodyImages {
	s.Progress = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetIsCopied(v bool) *DescribeImagesResponseBodyImages {
	s.IsCopied = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetImageOwnerAlias(v string) *DescribeImagesResponseBodyImages {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetIsSupportCloudinit(v bool) *DescribeImagesResponseBodyImages {
	s.IsSupportCloudinit = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetDiskDeviceMappings(v []*DescribeImagesResponseBodyImagesDiskDeviceMappings) *DescribeImagesResponseBodyImages {
	s.DiskDeviceMappings = v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetUsage(v string) *DescribeImagesResponseBodyImages {
	s.Usage = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetSize(v int32) *DescribeImagesResponseBodyImages {
	s.Size = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetResourceGroupId(v string) *DescribeImagesResponseBodyImages {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetImageName(v string) *DescribeImagesResponseBodyImages {
	s.ImageName = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetOSType(v string) *DescribeImagesResponseBodyImages {
	s.OSType = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetArchitecture(v string) *DescribeImagesResponseBodyImages {
	s.Architecture = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetProductCode(v string) *DescribeImagesResponseBodyImages {
	s.ProductCode = &v
	return s
}

type DescribeImagesResponseBodyImagesTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeImagesResponseBodyImagesTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImagesTags) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImagesTags) SetTagValue(v string) *DescribeImagesResponseBodyImagesTags {
	s.TagValue = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesTags) SetTagKey(v string) *DescribeImagesResponseBodyImagesTags {
	s.TagKey = &v
	return s
}

type DescribeImagesResponseBodyImagesDiskDeviceMappings struct {
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	ImportOSSBucket *string `json:"ImportOSSBucket,omitempty" xml:"ImportOSSBucket,omitempty"`
	Progress        *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	SnapshotId      *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	ImportOSSObject *string `json:"ImportOSSObject,omitempty" xml:"ImportOSSObject,omitempty"`
	Device          *string `json:"Device,omitempty" xml:"Device,omitempty"`
	Size            *string `json:"Size,omitempty" xml:"Size,omitempty"`
	RemainTime      *int32  `json:"RemainTime,omitempty" xml:"RemainTime,omitempty"`
	Format          *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s DescribeImagesResponseBodyImagesDiskDeviceMappings) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImagesDiskDeviceMappings) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImagesDiskDeviceMappings) SetType(v string) *DescribeImagesResponseBodyImagesDiskDeviceMappings {
	s.Type = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesDiskDeviceMappings) SetImportOSSBucket(v string) *DescribeImagesResponseBodyImagesDiskDeviceMappings {
	s.ImportOSSBucket = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesDiskDeviceMappings) SetProgress(v string) *DescribeImagesResponseBodyImagesDiskDeviceMappings {
	s.Progress = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesDiskDeviceMappings) SetSnapshotId(v string) *DescribeImagesResponseBodyImagesDiskDeviceMappings {
	s.SnapshotId = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesDiskDeviceMappings) SetImportOSSObject(v string) *DescribeImagesResponseBodyImagesDiskDeviceMappings {
	s.ImportOSSObject = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesDiskDeviceMappings) SetDevice(v string) *DescribeImagesResponseBodyImagesDiskDeviceMappings {
	s.Device = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesDiskDeviceMappings) SetSize(v string) *DescribeImagesResponseBodyImagesDiskDeviceMappings {
	s.Size = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesDiskDeviceMappings) SetRemainTime(v int32) *DescribeImagesResponseBodyImagesDiskDeviceMappings {
	s.RemainTime = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesDiskDeviceMappings) SetFormat(v string) *DescribeImagesResponseBodyImagesDiskDeviceMappings {
	s.Format = &v
	return s
}

type DescribeImagesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeImagesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponse) SetHeaders(v map[string]*string) *DescribeImagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeImagesResponse) SetBody(v *DescribeImagesResponseBody) *DescribeImagesResponse {
	s.Body = v
	return s
}

type DescribeImageSharePermissionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageId              *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeImageSharePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionRequest) SetOwnerId(v int64) *DescribeImageSharePermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetResourceOwnerAccount(v string) *DescribeImageSharePermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetResourceOwnerId(v int64) *DescribeImageSharePermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetRegionId(v string) *DescribeImageSharePermissionRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetImageId(v string) *DescribeImageSharePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetPageNumber(v int32) *DescribeImageSharePermissionRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetPageSize(v int32) *DescribeImageSharePermissionRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetOwnerAccount(v string) *DescribeImageSharePermissionRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeImageSharePermissionResponseBody struct {
	TotalCount  *int32                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId   *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize    *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber  *int32                                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ImageId     *string                                                `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	RegionId    *string                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ShareGroups []*DescribeImageSharePermissionResponseBodyShareGroups `json:"ShareGroups,omitempty" xml:"ShareGroups,omitempty" type:"Repeated"`
	Accounts    []*DescribeImageSharePermissionResponseBodyAccounts    `json:"Accounts,omitempty" xml:"Accounts,omitempty" type:"Repeated"`
}

func (s DescribeImageSharePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseBody) SetTotalCount(v int32) *DescribeImageSharePermissionResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetRequestId(v string) *DescribeImageSharePermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetPageSize(v int32) *DescribeImageSharePermissionResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetPageNumber(v int32) *DescribeImageSharePermissionResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetImageId(v string) *DescribeImageSharePermissionResponseBody {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetRegionId(v string) *DescribeImageSharePermissionResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetShareGroups(v []*DescribeImageSharePermissionResponseBodyShareGroups) *DescribeImageSharePermissionResponseBody {
	s.ShareGroups = v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetAccounts(v []*DescribeImageSharePermissionResponseBodyAccounts) *DescribeImageSharePermissionResponseBody {
	s.Accounts = v
	return s
}

type DescribeImageSharePermissionResponseBodyShareGroups struct {
	Group *string `json:"Group,omitempty" xml:"Group,omitempty"`
}

func (s DescribeImageSharePermissionResponseBodyShareGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseBodyShareGroups) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseBodyShareGroups) SetGroup(v string) *DescribeImageSharePermissionResponseBodyShareGroups {
	s.Group = &v
	return s
}

type DescribeImageSharePermissionResponseBodyAccounts struct {
	AliyunId *string `json:"AliyunId,omitempty" xml:"AliyunId,omitempty"`
}

func (s DescribeImageSharePermissionResponseBodyAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseBodyAccounts) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseBodyAccounts) SetAliyunId(v string) *DescribeImageSharePermissionResponseBodyAccounts {
	s.AliyunId = &v
	return s
}

type DescribeImageSharePermissionResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeImageSharePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageSharePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponse) SetHeaders(v map[string]*string) *DescribeImageSharePermissionResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetBody(v *DescribeImageSharePermissionResponseBody) *DescribeImageSharePermissionResponse {
	s.Body = v
	return s
}

type DescribeImageSupportInstanceTypesRequest struct {
	OwnerId              *int64                                            `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                           `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                            `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageId              *string                                           `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ActionType           *string                                           `json:"ActionType,omitempty" xml:"ActionType,omitempty"`
	Filter               []*DescribeImageSupportInstanceTypesRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeImageSupportInstanceTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSupportInstanceTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSupportInstanceTypesRequest) SetOwnerId(v int64) *DescribeImageSupportInstanceTypesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetResourceOwnerAccount(v string) *DescribeImageSupportInstanceTypesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetResourceOwnerId(v int64) *DescribeImageSupportInstanceTypesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetRegionId(v string) *DescribeImageSupportInstanceTypesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetImageId(v string) *DescribeImageSupportInstanceTypesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetActionType(v string) *DescribeImageSupportInstanceTypesRequest {
	s.ActionType = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetFilter(v []*DescribeImageSupportInstanceTypesRequestFilter) *DescribeImageSupportInstanceTypesRequest {
	s.Filter = v
	return s
}

type DescribeImageSupportInstanceTypesRequestFilter struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeImageSupportInstanceTypesRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSupportInstanceTypesRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeImageSupportInstanceTypesRequestFilter) SetKey(v string) *DescribeImageSupportInstanceTypesRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequestFilter) SetValue(v string) *DescribeImageSupportInstanceTypesRequestFilter {
	s.Value = &v
	return s
}

type DescribeImageSupportInstanceTypesResponseBody struct {
	RequestId     *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ImageId       *string                                                       `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	RegionId      *string                                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceTypes []*DescribeImageSupportInstanceTypesResponseBodyInstanceTypes `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Repeated"`
}

func (s DescribeImageSupportInstanceTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSupportInstanceTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageSupportInstanceTypesResponseBody) SetRequestId(v string) *DescribeImageSupportInstanceTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponseBody) SetImageId(v string) *DescribeImageSupportInstanceTypesResponseBody {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponseBody) SetRegionId(v string) *DescribeImageSupportInstanceTypesResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponseBody) SetInstanceTypes(v []*DescribeImageSupportInstanceTypesResponseBodyInstanceTypes) *DescribeImageSupportInstanceTypesResponseBody {
	s.InstanceTypes = v
	return s
}

type DescribeImageSupportInstanceTypesResponseBodyInstanceTypes struct {
	InstanceTypeId     *string  `json:"InstanceTypeId,omitempty" xml:"InstanceTypeId,omitempty"`
	InstanceTypeFamily *string  `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	CpuCoreCount       *int32   `json:"CpuCoreCount,omitempty" xml:"CpuCoreCount,omitempty"`
	MemorySize         *float32 `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
}

func (s DescribeImageSupportInstanceTypesResponseBodyInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSupportInstanceTypesResponseBodyInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeImageSupportInstanceTypesResponseBodyInstanceTypes) SetInstanceTypeId(v string) *DescribeImageSupportInstanceTypesResponseBodyInstanceTypes {
	s.InstanceTypeId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponseBodyInstanceTypes) SetInstanceTypeFamily(v string) *DescribeImageSupportInstanceTypesResponseBodyInstanceTypes {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponseBodyInstanceTypes) SetCpuCoreCount(v int32) *DescribeImageSupportInstanceTypesResponseBodyInstanceTypes {
	s.CpuCoreCount = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponseBodyInstanceTypes) SetMemorySize(v float32) *DescribeImageSupportInstanceTypesResponseBodyInstanceTypes {
	s.MemorySize = &v
	return s
}

type DescribeImageSupportInstanceTypesResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeImageSupportInstanceTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageSupportInstanceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSupportInstanceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageSupportInstanceTypesResponse) SetHeaders(v map[string]*string) *DescribeImageSupportInstanceTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponse) SetBody(v *DescribeImageSupportInstanceTypesResponseBody) *DescribeImageSupportInstanceTypesResponse {
	s.Body = v
	return s
}

type DescribeInstanceAttachmentAttributesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeInstanceAttachmentAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttachmentAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttachmentAttributesRequest) SetOwnerId(v int64) *DescribeInstanceAttachmentAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesRequest) SetResourceOwnerAccount(v string) *DescribeInstanceAttachmentAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesRequest) SetResourceOwnerId(v int64) *DescribeInstanceAttachmentAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesRequest) SetOwnerAccount(v string) *DescribeInstanceAttachmentAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesRequest) SetRegionId(v string) *DescribeInstanceAttachmentAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesRequest) SetInstanceIds(v string) *DescribeInstanceAttachmentAttributesRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesRequest) SetPageNumber(v int32) *DescribeInstanceAttachmentAttributesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesRequest) SetPageSize(v int32) *DescribeInstanceAttachmentAttributesRequest {
	s.PageSize = &v
	return s
}

type DescribeInstanceAttachmentAttributesResponseBody struct {
	Instances  []*DescribeInstanceAttachmentAttributesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	TotalCount *int32                                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeInstanceAttachmentAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttachmentAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttachmentAttributesResponseBody) SetInstances(v []*DescribeInstanceAttachmentAttributesResponseBodyInstances) *DescribeInstanceAttachmentAttributesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeInstanceAttachmentAttributesResponseBody) SetTotalCount(v int32) *DescribeInstanceAttachmentAttributesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesResponseBody) SetPageSize(v int32) *DescribeInstanceAttachmentAttributesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesResponseBody) SetRequestId(v string) *DescribeInstanceAttachmentAttributesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesResponseBody) SetPageNumber(v int32) *DescribeInstanceAttachmentAttributesResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeInstanceAttachmentAttributesResponseBodyInstances struct {
	PrivatePoolOptionsMatchCriteria *string `json:"PrivatePoolOptionsMatchCriteria,omitempty" xml:"PrivatePoolOptionsMatchCriteria,omitempty"`
	PrivatePoolOptionsId            *string `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	InstanceId                      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceAttachmentAttributesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttachmentAttributesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttachmentAttributesResponseBodyInstances) SetPrivatePoolOptionsMatchCriteria(v string) *DescribeInstanceAttachmentAttributesResponseBodyInstances {
	s.PrivatePoolOptionsMatchCriteria = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesResponseBodyInstances) SetPrivatePoolOptionsId(v string) *DescribeInstanceAttachmentAttributesResponseBodyInstances {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *DescribeInstanceAttachmentAttributesResponseBodyInstances) SetInstanceId(v string) *DescribeInstanceAttachmentAttributesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

type DescribeInstanceAttachmentAttributesResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceAttachmentAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceAttachmentAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttachmentAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttachmentAttributesResponse) SetHeaders(v map[string]*string) *DescribeInstanceAttachmentAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAttachmentAttributesResponse) SetBody(v *DescribeInstanceAttachmentAttributesResponseBody) *DescribeInstanceAttachmentAttributesResponse {
	s.Body = v
	return s
}

type DescribeInstanceAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeRequest) SetOwnerId(v int64) *DescribeInstanceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceAttributeRequest) SetResourceOwnerAccount(v string) *DescribeInstanceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceAttributeRequest) SetResourceOwnerId(v int64) *DescribeInstanceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceAttributeRequest) SetInstanceId(v string) *DescribeInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAttributeRequest) SetOwnerAccount(v string) *DescribeInstanceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeInstanceAttributeResponseBody struct {
	Description             *string                                                      `json:"Description,omitempty" xml:"Description,omitempty"`
	Memory                  *int32                                                       `json:"Memory,omitempty" xml:"Memory,omitempty"`
	InstanceChargeType      *string                                                      `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Cpu                     *int32                                                       `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	InstanceNetworkType     *string                                                      `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	PublicIpAddress         []*string                                                    `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty" type:"Repeated"`
	InnerIpAddress          []*string                                                    `json:"InnerIpAddress,omitempty" xml:"InnerIpAddress,omitempty" type:"Repeated"`
	ExpiredTime             *string                                                      `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	ImageId                 *string                                                      `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	EipAddress              *DescribeInstanceAttributeResponseBodyEipAddress             `json:"EipAddress,omitempty" xml:"EipAddress,omitempty" type:"Struct"`
	InstanceType            *string                                                      `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	VlanId                  *string                                                      `json:"VlanId,omitempty" xml:"VlanId,omitempty"`
	HostName                *string                                                      `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Status                  *string                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	IoOptimized             *string                                                      `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	RequestId               *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ZoneId                  *string                                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ClusterId               *string                                                      `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	InstanceId              *string                                                      `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	StoppedMode             *string                                                      `json:"StoppedMode,omitempty" xml:"StoppedMode,omitempty"`
	DedicatedHostAttribute  *DescribeInstanceAttributeResponseBodyDedicatedHostAttribute `json:"DedicatedHostAttribute,omitempty" xml:"DedicatedHostAttribute,omitempty" type:"Struct"`
	SecurityGroupIds        []*string                                                    `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	VpcAttributes           *DescribeInstanceAttributeResponseBodyVpcAttributes          `json:"VpcAttributes,omitempty" xml:"VpcAttributes,omitempty" type:"Struct"`
	OperationLocks          []*DescribeInstanceAttributeResponseBodyOperationLocks       `json:"OperationLocks,omitempty" xml:"OperationLocks,omitempty" type:"Repeated"`
	InternetChargeType      *string                                                      `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InstanceName            *string                                                      `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetMaxBandwidthOut *int32                                                       `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	SerialNumber            *string                                                      `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	InternetMaxBandwidthIn  *int32                                                       `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	CreationTime            *string                                                      `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	RegionId                *string                                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CreditSpecification     *string                                                      `json:"CreditSpecification,omitempty" xml:"CreditSpecification,omitempty"`
}

func (s DescribeInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseBody) SetDescription(v string) *DescribeInstanceAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetMemory(v int32) *DescribeInstanceAttributeResponseBody {
	s.Memory = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetInstanceChargeType(v string) *DescribeInstanceAttributeResponseBody {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetCpu(v int32) *DescribeInstanceAttributeResponseBody {
	s.Cpu = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetInstanceNetworkType(v string) *DescribeInstanceAttributeResponseBody {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetPublicIpAddress(v []*string) *DescribeInstanceAttributeResponseBody {
	s.PublicIpAddress = v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetInnerIpAddress(v []*string) *DescribeInstanceAttributeResponseBody {
	s.InnerIpAddress = v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetExpiredTime(v string) *DescribeInstanceAttributeResponseBody {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetImageId(v string) *DescribeInstanceAttributeResponseBody {
	s.ImageId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetEipAddress(v *DescribeInstanceAttributeResponseBodyEipAddress) *DescribeInstanceAttributeResponseBody {
	s.EipAddress = v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetInstanceType(v string) *DescribeInstanceAttributeResponseBody {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetVlanId(v string) *DescribeInstanceAttributeResponseBody {
	s.VlanId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetHostName(v string) *DescribeInstanceAttributeResponseBody {
	s.HostName = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetStatus(v string) *DescribeInstanceAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetIoOptimized(v string) *DescribeInstanceAttributeResponseBody {
	s.IoOptimized = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetRequestId(v string) *DescribeInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetZoneId(v string) *DescribeInstanceAttributeResponseBody {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetClusterId(v string) *DescribeInstanceAttributeResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetInstanceId(v string) *DescribeInstanceAttributeResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetStoppedMode(v string) *DescribeInstanceAttributeResponseBody {
	s.StoppedMode = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetDedicatedHostAttribute(v *DescribeInstanceAttributeResponseBodyDedicatedHostAttribute) *DescribeInstanceAttributeResponseBody {
	s.DedicatedHostAttribute = v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetSecurityGroupIds(v []*string) *DescribeInstanceAttributeResponseBody {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetVpcAttributes(v *DescribeInstanceAttributeResponseBodyVpcAttributes) *DescribeInstanceAttributeResponseBody {
	s.VpcAttributes = v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetOperationLocks(v []*DescribeInstanceAttributeResponseBodyOperationLocks) *DescribeInstanceAttributeResponseBody {
	s.OperationLocks = v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetInternetChargeType(v string) *DescribeInstanceAttributeResponseBody {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetInstanceName(v string) *DescribeInstanceAttributeResponseBody {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetInternetMaxBandwidthOut(v int32) *DescribeInstanceAttributeResponseBody {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetSerialNumber(v string) *DescribeInstanceAttributeResponseBody {
	s.SerialNumber = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetInternetMaxBandwidthIn(v int32) *DescribeInstanceAttributeResponseBody {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetCreationTime(v string) *DescribeInstanceAttributeResponseBody {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetRegionId(v string) *DescribeInstanceAttributeResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBody) SetCreditSpecification(v string) *DescribeInstanceAttributeResponseBody {
	s.CreditSpecification = &v
	return s
}

type DescribeInstanceAttributeResponseBodyEipAddress struct {
	IpAddress          *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	Bandwidth          *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	AllocationId       *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
}

func (s DescribeInstanceAttributeResponseBodyEipAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseBodyEipAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseBodyEipAddress) SetIpAddress(v string) *DescribeInstanceAttributeResponseBodyEipAddress {
	s.IpAddress = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyEipAddress) SetBandwidth(v int32) *DescribeInstanceAttributeResponseBodyEipAddress {
	s.Bandwidth = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyEipAddress) SetAllocationId(v string) *DescribeInstanceAttributeResponseBodyEipAddress {
	s.AllocationId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyEipAddress) SetInternetChargeType(v string) *DescribeInstanceAttributeResponseBodyEipAddress {
	s.InternetChargeType = &v
	return s
}

type DescribeInstanceAttributeResponseBodyDedicatedHostAttribute struct {
	DedicatedHostName *string `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	DedicatedHostId   *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
}

func (s DescribeInstanceAttributeResponseBodyDedicatedHostAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseBodyDedicatedHostAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseBodyDedicatedHostAttribute) SetDedicatedHostName(v string) *DescribeInstanceAttributeResponseBodyDedicatedHostAttribute {
	s.DedicatedHostName = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyDedicatedHostAttribute) SetDedicatedHostId(v string) *DescribeInstanceAttributeResponseBodyDedicatedHostAttribute {
	s.DedicatedHostId = &v
	return s
}

type DescribeInstanceAttributeResponseBodyVpcAttributes struct {
	VpcId            *string   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	NatIpAddress     *string   `json:"NatIpAddress,omitempty" xml:"NatIpAddress,omitempty"`
	VSwitchId        *string   `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress []*string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstanceAttributeResponseBodyVpcAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseBodyVpcAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseBodyVpcAttributes) SetVpcId(v string) *DescribeInstanceAttributeResponseBodyVpcAttributes {
	s.VpcId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyVpcAttributes) SetNatIpAddress(v string) *DescribeInstanceAttributeResponseBodyVpcAttributes {
	s.NatIpAddress = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyVpcAttributes) SetVSwitchId(v string) *DescribeInstanceAttributeResponseBodyVpcAttributes {
	s.VSwitchId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseBodyVpcAttributes) SetPrivateIpAddress(v []*string) *DescribeInstanceAttributeResponseBodyVpcAttributes {
	s.PrivateIpAddress = v
	return s
}

type DescribeInstanceAttributeResponseBodyOperationLocks struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
}

func (s DescribeInstanceAttributeResponseBodyOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseBodyOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseBodyOperationLocks) SetLockReason(v string) *DescribeInstanceAttributeResponseBodyOperationLocks {
	s.LockReason = &v
	return s
}

type DescribeInstanceAttributeResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponse) SetHeaders(v map[string]*string) *DescribeInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetBody(v *DescribeInstanceAttributeResponseBody) *DescribeInstanceAttributeResponse {
	s.Body = v
	return s
}

type DescribeInstanceAutoRenewAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RenewalStatus        *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
	PageSize             *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetOwnerId(v int64) *DescribeInstanceAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetResourceOwnerAccount(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetResourceOwnerId(v int64) *DescribeInstanceAutoRenewAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetOwnerAccount(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetInstanceId(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetRegionId(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetRenewalStatus(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetPageSize(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetPageNumber(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.PageNumber = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseBody struct {
	TotalCount              *int32                                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	InstanceRenewAttributes []*DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes `json:"InstanceRenewAttributes,omitempty" xml:"InstanceRenewAttributes,omitempty" type:"Repeated"`
	RequestId               *string                                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize                *int32                                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber              *int32                                                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetTotalCount(v int32) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetInstanceRenewAttributes(v []*DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.InstanceRenewAttributes = v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetRequestId(v string) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetPageSize(v int32) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetPageNumber(v int32) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes struct {
	PeriodUnit       *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	Duration         *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	RenewalStatus    *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	AutoRenewEnabled *bool   `json:"AutoRenewEnabled,omitempty" xml:"AutoRenewEnabled,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) SetPeriodUnit(v string) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) SetDuration(v int32) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes {
	s.Duration = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) SetRenewalStatus(v string) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes {
	s.RenewalStatus = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) SetInstanceId(v string) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) SetAutoRenewEnabled(v bool) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes {
	s.AutoRenewEnabled = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceAutoRenewAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetHeaders(v map[string]*string) *DescribeInstanceAutoRenewAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetBody(v *DescribeInstanceAutoRenewAttributeResponseBody) *DescribeInstanceAutoRenewAttributeResponse {
	s.Body = v
	return s
}

type DescribeInstanceHistoryEventsRequest struct {
	NotBefore                *DescribeInstanceHistoryEventsRequestNotBefore        `json:"NotBefore,omitempty" xml:"NotBefore,omitempty" type:"Struct"`
	EventPublishTime         *DescribeInstanceHistoryEventsRequestEventPublishTime `json:"EventPublishTime,omitempty" xml:"EventPublishTime,omitempty" type:"Struct"`
	OwnerId                  *int64                                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount     *string                                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount             *string                                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                 *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId               *string                                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	EventCycleStatus         *string                                               `json:"EventCycleStatus,omitempty" xml:"EventCycleStatus,omitempty"`
	EventType                *string                                               `json:"EventType,omitempty" xml:"EventType,omitempty"`
	ImpactLevel              *string                                               `json:"ImpactLevel,omitempty" xml:"ImpactLevel,omitempty"`
	PageNumber               *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                 *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	EventId                  []*string                                             `json:"EventId,omitempty" xml:"EventId,omitempty" type:"Repeated"`
	InstanceEventCycleStatus []*string                                             `json:"InstanceEventCycleStatus,omitempty" xml:"InstanceEventCycleStatus,omitempty" type:"Repeated"`
	InstanceEventType        []*string                                             `json:"InstanceEventType,omitempty" xml:"InstanceEventType,omitempty" type:"Repeated"`
}

func (s DescribeInstanceHistoryEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsRequest) SetNotBefore(v *DescribeInstanceHistoryEventsRequestNotBefore) *DescribeInstanceHistoryEventsRequest {
	s.NotBefore = v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetEventPublishTime(v *DescribeInstanceHistoryEventsRequestEventPublishTime) *DescribeInstanceHistoryEventsRequest {
	s.EventPublishTime = v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetOwnerId(v int64) *DescribeInstanceHistoryEventsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetResourceOwnerAccount(v string) *DescribeInstanceHistoryEventsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetResourceOwnerId(v int64) *DescribeInstanceHistoryEventsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetOwnerAccount(v string) *DescribeInstanceHistoryEventsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetRegionId(v string) *DescribeInstanceHistoryEventsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetInstanceId(v string) *DescribeInstanceHistoryEventsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetEventCycleStatus(v string) *DescribeInstanceHistoryEventsRequest {
	s.EventCycleStatus = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetEventType(v string) *DescribeInstanceHistoryEventsRequest {
	s.EventType = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetImpactLevel(v string) *DescribeInstanceHistoryEventsRequest {
	s.ImpactLevel = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetPageNumber(v int32) *DescribeInstanceHistoryEventsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetPageSize(v int32) *DescribeInstanceHistoryEventsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetEventId(v []*string) *DescribeInstanceHistoryEventsRequest {
	s.EventId = v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetInstanceEventCycleStatus(v []*string) *DescribeInstanceHistoryEventsRequest {
	s.InstanceEventCycleStatus = v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetInstanceEventType(v []*string) *DescribeInstanceHistoryEventsRequest {
	s.InstanceEventType = v
	return s
}

type DescribeInstanceHistoryEventsRequestNotBefore struct {
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
	End   *string `json:"End,omitempty" xml:"End,omitempty"`
}

func (s DescribeInstanceHistoryEventsRequestNotBefore) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsRequestNotBefore) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsRequestNotBefore) SetStart(v string) *DescribeInstanceHistoryEventsRequestNotBefore {
	s.Start = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequestNotBefore) SetEnd(v string) *DescribeInstanceHistoryEventsRequestNotBefore {
	s.End = &v
	return s
}

type DescribeInstanceHistoryEventsRequestEventPublishTime struct {
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
	End   *string `json:"End,omitempty" xml:"End,omitempty"`
}

func (s DescribeInstanceHistoryEventsRequestEventPublishTime) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsRequestEventPublishTime) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsRequestEventPublishTime) SetStart(v string) *DescribeInstanceHistoryEventsRequestEventPublishTime {
	s.Start = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequestEventPublishTime) SetEnd(v string) *DescribeInstanceHistoryEventsRequestEventPublishTime {
	s.End = &v
	return s
}

type DescribeInstanceHistoryEventsResponseBody struct {
	TotalCount             *int32                                                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize               *int32                                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId              *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber             *int32                                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	InstanceSystemEventSet []*DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet `json:"InstanceSystemEventSet,omitempty" xml:"InstanceSystemEventSet,omitempty" type:"Repeated"`
}

func (s DescribeInstanceHistoryEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseBody) SetTotalCount(v int32) *DescribeInstanceHistoryEventsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBody) SetPageSize(v int32) *DescribeInstanceHistoryEventsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBody) SetRequestId(v string) *DescribeInstanceHistoryEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBody) SetPageNumber(v int32) *DescribeInstanceHistoryEventsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBody) SetInstanceSystemEventSet(v []*DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) *DescribeInstanceHistoryEventsResponseBody {
	s.InstanceSystemEventSet = v
	return s
}

type DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet struct {
	EventId           *string                                                                           `json:"EventId,omitempty" xml:"EventId,omitempty"`
	EventPublishTime  *string                                                                           `json:"EventPublishTime,omitempty" xml:"EventPublishTime,omitempty"`
	EventFinishTime   *string                                                                           `json:"EventFinishTime,omitempty" xml:"EventFinishTime,omitempty"`
	ImpactLevel       *string                                                                           `json:"ImpactLevel,omitempty" xml:"ImpactLevel,omitempty"`
	EventType         *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventType         `json:"EventType,omitempty" xml:"EventType,omitempty" type:"Struct"`
	ExtendedAttribute *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute `json:"ExtendedAttribute,omitempty" xml:"ExtendedAttribute,omitempty" type:"Struct"`
	NotBefore         *string                                                                           `json:"NotBefore,omitempty" xml:"NotBefore,omitempty"`
	InstanceId        *string                                                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Reason            *string                                                                           `json:"Reason,omitempty" xml:"Reason,omitempty"`
	EventCycleStatus  *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventCycleStatus  `json:"EventCycleStatus,omitempty" xml:"EventCycleStatus,omitempty" type:"Struct"`
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetEventId(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.EventId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetEventPublishTime(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.EventPublishTime = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetEventFinishTime(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.EventFinishTime = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetImpactLevel(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.ImpactLevel = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetEventType(v *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventType) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.EventType = v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetExtendedAttribute(v *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.ExtendedAttribute = v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetNotBefore(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.NotBefore = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetInstanceId(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetReason(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.Reason = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet) SetEventCycleStatus(v *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventCycleStatus) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSet {
	s.EventCycleStatus = v
	return s
}

type DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventType struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventType) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventType) SetCode(v int32) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventType {
	s.Code = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventType) SetName(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventType {
	s.Name = &v
	return s
}

type DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute struct {
	Device        *string                                                                                          `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskId        *string                                                                                          `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	InactiveDisks []*DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks `json:"InactiveDisks,omitempty" xml:"InactiveDisks,omitempty" type:"Repeated"`
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute) SetDevice(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute {
	s.Device = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute) SetDiskId(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute {
	s.DiskId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute) SetInactiveDisks(v []*DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttribute {
	s.InactiveDisks = v
	return s
}

type DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks struct {
	CreationTime   *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DeviceCategory *string `json:"DeviceCategory,omitempty" xml:"DeviceCategory,omitempty"`
	DeviceType     *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	ReleaseTime    *string `json:"ReleaseTime,omitempty" xml:"ReleaseTime,omitempty"`
	DeviceSize     *string `json:"DeviceSize,omitempty" xml:"DeviceSize,omitempty"`
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks) SetCreationTime(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks) SetDeviceCategory(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks {
	s.DeviceCategory = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks) SetDeviceType(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks {
	s.DeviceType = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks) SetReleaseTime(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks {
	s.ReleaseTime = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks) SetDeviceSize(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetExtendedAttributeInactiveDisks {
	s.DeviceSize = &v
	return s
}

type DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventCycleStatus struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventCycleStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventCycleStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventCycleStatus) SetCode(v int32) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventCycleStatus {
	s.Code = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventCycleStatus) SetName(v string) *DescribeInstanceHistoryEventsResponseBodyInstanceSystemEventSetEventCycleStatus {
	s.Name = &v
	return s
}

type DescribeInstanceHistoryEventsResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceHistoryEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceHistoryEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponse) SetHeaders(v map[string]*string) *DescribeInstanceHistoryEventsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceHistoryEventsResponse) SetBody(v *DescribeInstanceHistoryEventsResponseBody) *DescribeInstanceHistoryEventsResponse {
	s.Body = v
	return s
}

type DescribeInstanceMaintenanceAttributesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber           *int64    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s DescribeInstanceMaintenanceAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetOwnerId(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetResourceOwnerAccount(v string) *DescribeInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetResourceOwnerId(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetOwnerAccount(v string) *DescribeInstanceMaintenanceAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetRegionId(v string) *DescribeInstanceMaintenanceAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetPageNumber(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetPageSize(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetInstanceId(v []*string) *DescribeInstanceMaintenanceAttributesRequest {
	s.InstanceId = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBody struct {
	TotalCount            *int32                                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize              *int32                                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId             *string                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber            *int32                                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	MaintenanceAttributes []*DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes `json:"MaintenanceAttributes,omitempty" xml:"MaintenanceAttributes,omitempty" type:"Repeated"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetTotalCount(v int32) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetPageSize(v int32) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetRequestId(v string) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetPageNumber(v int32) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetMaintenanceAttributes(v []*DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.MaintenanceAttributes = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes struct {
	MaintenanceWindows  []*DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceWindows `json:"MaintenanceWindows,omitempty" xml:"MaintenanceWindows,omitempty" type:"Repeated"`
	InstanceId          *string                                                                                     `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ActionOnMaintenance *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance  `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty" type:"Struct"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) SetMaintenanceWindows(v []*DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceWindows) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes {
	s.MaintenanceWindows = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) SetInstanceId(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) SetActionOnMaintenance(v *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes {
	s.ActionOnMaintenance = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceWindows struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceWindows) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceWindows) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceWindows) SetEndTime(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceWindows {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceWindows) SetStartTime(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceWindows {
	s.StartTime = &v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance struct {
	Value           *string   `json:"Value,omitempty" xml:"Value,omitempty"`
	SupportedValues []*string `json:"SupportedValues,omitempty" xml:"SupportedValues,omitempty" type:"Repeated"`
	DefaultValue    *string   `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance) SetValue(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance {
	s.Value = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance) SetSupportedValues(v []*string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance {
	s.SupportedValues = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance) SetDefaultValue(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesActionOnMaintenance {
	s.DefaultValue = &v
	return s
}

type DescribeInstanceMaintenanceAttributesResponse struct {
	Headers map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceMaintenanceAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceMaintenanceAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetHeaders(v map[string]*string) *DescribeInstanceMaintenanceAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetBody(v *DescribeInstanceMaintenanceAttributesResponseBody) *DescribeInstanceMaintenanceAttributesResponse {
	s.Body = v
	return s
}

type DescribeInstanceMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeInstanceMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataRequest) SetOwnerId(v int64) *DescribeInstanceMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeInstanceMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeInstanceMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetOwnerAccount(v string) *DescribeInstanceMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetInstanceId(v string) *DescribeInstanceMonitorDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetStartTime(v string) *DescribeInstanceMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetEndTime(v string) *DescribeInstanceMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetPeriod(v int32) *DescribeInstanceMonitorDataRequest {
	s.Period = &v
	return s
}

type DescribeInstanceMonitorDataResponseBody struct {
	RequestId   *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MonitorData []*DescribeInstanceMonitorDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Repeated"`
}

func (s DescribeInstanceMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseBody) SetRequestId(v string) *DescribeInstanceMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBody) SetMonitorData(v []*DescribeInstanceMonitorDataResponseBodyMonitorData) *DescribeInstanceMonitorDataResponseBody {
	s.MonitorData = v
	return s
}

type DescribeInstanceMonitorDataResponseBodyMonitorData struct {
	CPUCreditBalance             *float32 `json:"CPUCreditBalance,omitempty" xml:"CPUCreditBalance,omitempty"`
	BPSRead                      *int32   `json:"BPSRead,omitempty" xml:"BPSRead,omitempty"`
	InternetTX                   *int32   `json:"InternetTX,omitempty" xml:"InternetTX,omitempty"`
	CPU                          *int32   `json:"CPU,omitempty" xml:"CPU,omitempty"`
	CPUCreditUsage               *float32 `json:"CPUCreditUsage,omitempty" xml:"CPUCreditUsage,omitempty"`
	IOPSWrite                    *int32   `json:"IOPSWrite,omitempty" xml:"IOPSWrite,omitempty"`
	InstanceId                   *string  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IntranetTX                   *int32   `json:"IntranetTX,omitempty" xml:"IntranetTX,omitempty"`
	BPSWrite                     *int32   `json:"BPSWrite,omitempty" xml:"BPSWrite,omitempty"`
	CPUNotpaidSurplusCreditUsage *float32 `json:"CPUNotpaidSurplusCreditUsage,omitempty" xml:"CPUNotpaidSurplusCreditUsage,omitempty"`
	IOPSRead                     *int32   `json:"IOPSRead,omitempty" xml:"IOPSRead,omitempty"`
	CPUAdvanceCreditBalance      *float32 `json:"CPUAdvanceCreditBalance,omitempty" xml:"CPUAdvanceCreditBalance,omitempty"`
	InternetBandwidth            *int32   `json:"InternetBandwidth,omitempty" xml:"InternetBandwidth,omitempty"`
	InternetRX                   *int32   `json:"InternetRX,omitempty" xml:"InternetRX,omitempty"`
	TimeStamp                    *string  `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	IntranetRX                   *int32   `json:"IntranetRX,omitempty" xml:"IntranetRX,omitempty"`
	IntranetBandwidth            *int32   `json:"IntranetBandwidth,omitempty" xml:"IntranetBandwidth,omitempty"`
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetCPUCreditBalance(v float32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.CPUCreditBalance = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetBPSRead(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.BPSRead = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetInternetTX(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.InternetTX = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetCPU(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.CPU = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetCPUCreditUsage(v float32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.CPUCreditUsage = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetIOPSWrite(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.IOPSWrite = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetInstanceId(v string) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetIntranetTX(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.IntranetTX = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetBPSWrite(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.BPSWrite = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetCPUNotpaidSurplusCreditUsage(v float32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.CPUNotpaidSurplusCreditUsage = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetIOPSRead(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.IOPSRead = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetCPUAdvanceCreditBalance(v float32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.CPUAdvanceCreditBalance = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetInternetBandwidth(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.InternetBandwidth = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetInternetRX(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.InternetRX = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetTimeStamp(v string) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetIntranetRX(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.IntranetRX = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetIntranetBandwidth(v int32) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.IntranetBandwidth = &v
	return s
}

type DescribeInstanceMonitorDataResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeInstanceMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceMonitorDataResponse) SetBody(v *DescribeInstanceMonitorDataResponseBody) *DescribeInstanceMonitorDataResponse {
	s.Body = v
	return s
}

type DescribeInstanceRamRoleRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	RamRoleName          *string `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
}

func (s DescribeInstanceRamRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRamRoleRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRamRoleRequest) SetOwnerId(v int64) *DescribeInstanceRamRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetResourceOwnerAccount(v string) *DescribeInstanceRamRoleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetResourceOwnerId(v int64) *DescribeInstanceRamRoleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetPageNumber(v int32) *DescribeInstanceRamRoleRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetPageSize(v int32) *DescribeInstanceRamRoleRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetRegionId(v string) *DescribeInstanceRamRoleRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetInstanceIds(v string) *DescribeInstanceRamRoleRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetRamRoleName(v string) *DescribeInstanceRamRoleRequest {
	s.RamRoleName = &v
	return s
}

type DescribeInstanceRamRoleResponseBody struct {
	TotalCount          *int32                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId           *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RegionId            *string                                                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceRamRoleSets []*DescribeInstanceRamRoleResponseBodyInstanceRamRoleSets `json:"InstanceRamRoleSets,omitempty" xml:"InstanceRamRoleSets,omitempty" type:"Repeated"`
}

func (s DescribeInstanceRamRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRamRoleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRamRoleResponseBody) SetTotalCount(v int32) *DescribeInstanceRamRoleResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceRamRoleResponseBody) SetRequestId(v string) *DescribeInstanceRamRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceRamRoleResponseBody) SetRegionId(v string) *DescribeInstanceRamRoleResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceRamRoleResponseBody) SetInstanceRamRoleSets(v []*DescribeInstanceRamRoleResponseBodyInstanceRamRoleSets) *DescribeInstanceRamRoleResponseBody {
	s.InstanceRamRoleSets = v
	return s
}

type DescribeInstanceRamRoleResponseBodyInstanceRamRoleSets struct {
	RamRoleName *string `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceRamRoleResponseBodyInstanceRamRoleSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRamRoleResponseBodyInstanceRamRoleSets) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRamRoleResponseBodyInstanceRamRoleSets) SetRamRoleName(v string) *DescribeInstanceRamRoleResponseBodyInstanceRamRoleSets {
	s.RamRoleName = &v
	return s
}

func (s *DescribeInstanceRamRoleResponseBodyInstanceRamRoleSets) SetInstanceId(v string) *DescribeInstanceRamRoleResponseBodyInstanceRamRoleSets {
	s.InstanceId = &v
	return s
}

type DescribeInstanceRamRoleResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceRamRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceRamRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRamRoleResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRamRoleResponse) SetHeaders(v map[string]*string) *DescribeInstanceRamRoleResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceRamRoleResponse) SetBody(v *DescribeInstanceRamRoleResponseBody) *DescribeInstanceRamRoleResponse {
	s.Body = v
	return s
}

type DescribeInstancesRequest struct {
	Filter                  []*DescribeInstancesRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	OwnerId                 *int64                            `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string                           `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64                            `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                *string                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VpcId                   *string                           `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId               *string                           `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId                  *string                           `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceNetworkType     *string                           `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	SecurityGroupId         *string                           `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	InstanceIds             *string                           `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	PageNumber              *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	InnerIpAddresses        *string                           `json:"InnerIpAddresses,omitempty" xml:"InnerIpAddresses,omitempty"`
	PrivateIpAddresses      *string                           `json:"PrivateIpAddresses,omitempty" xml:"PrivateIpAddresses,omitempty"`
	PublicIpAddresses       *string                           `json:"PublicIpAddresses,omitempty" xml:"PublicIpAddresses,omitempty"`
	EipAddresses            *string                           `json:"EipAddresses,omitempty" xml:"EipAddresses,omitempty"`
	OwnerAccount            *string                           `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceChargeType      *string                           `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InternetChargeType      *string                           `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InstanceName            *string                           `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	ImageId                 *string                           `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	Status                  *string                           `json:"Status,omitempty" xml:"Status,omitempty"`
	LockReason              *string                           `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	DeviceAvailable         *bool                             `json:"DeviceAvailable,omitempty" xml:"DeviceAvailable,omitempty"`
	IoOptimized             *bool                             `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	NeedSaleCycle           *bool                             `json:"NeedSaleCycle,omitempty" xml:"NeedSaleCycle,omitempty"`
	InstanceType            *string                           `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceTypeFamily      *string                           `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	KeyPairName             *string                           `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	ResourceGroupId         *string                           `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	HpcClusterId            *string                           `json:"HpcClusterId,omitempty" xml:"HpcClusterId,omitempty"`
	RdmaIpAddresses         *string                           `json:"RdmaIpAddresses,omitempty" xml:"RdmaIpAddresses,omitempty"`
	DryRun                  *bool                             `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	HttpEndpoint            *string                           `json:"HttpEndpoint,omitempty" xml:"HttpEndpoint,omitempty"`
	HttpTokens              *string                           `json:"HttpTokens,omitempty" xml:"HttpTokens,omitempty"`
	HttpPutResponseHopLimit *int32                            `json:"HttpPutResponseHopLimit,omitempty" xml:"HttpPutResponseHopLimit,omitempty"`
	Tag                     []*DescribeInstancesRequestTag    `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	AdditionalAttributes    []*string                         `json:"AdditionalAttributes,omitempty" xml:"AdditionalAttributes,omitempty" type:"Repeated"`
}

func (s DescribeInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequest) SetFilter(v []*DescribeInstancesRequestFilter) *DescribeInstancesRequest {
	s.Filter = v
	return s
}

func (s *DescribeInstancesRequest) SetOwnerId(v int64) *DescribeInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstancesRequest) SetResourceOwnerAccount(v string) *DescribeInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstancesRequest) SetResourceOwnerId(v int64) *DescribeInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstancesRequest) SetRegionId(v string) *DescribeInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesRequest) SetVpcId(v string) *DescribeInstancesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeInstancesRequest) SetVSwitchId(v string) *DescribeInstancesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeInstancesRequest) SetZoneId(v string) *DescribeInstancesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceNetworkType(v string) *DescribeInstancesRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeInstancesRequest) SetSecurityGroupId(v string) *DescribeInstancesRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceIds(v string) *DescribeInstancesRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageNumber(v int32) *DescribeInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageSize(v int32) *DescribeInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesRequest) SetInnerIpAddresses(v string) *DescribeInstancesRequest {
	s.InnerIpAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetPrivateIpAddresses(v string) *DescribeInstancesRequest {
	s.PrivateIpAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetPublicIpAddresses(v string) *DescribeInstancesRequest {
	s.PublicIpAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetEipAddresses(v string) *DescribeInstancesRequest {
	s.EipAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetOwnerAccount(v string) *DescribeInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceChargeType(v string) *DescribeInstancesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeInstancesRequest) SetInternetChargeType(v string) *DescribeInstancesRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceName(v string) *DescribeInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesRequest) SetImageId(v string) *DescribeInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeInstancesRequest) SetStatus(v string) *DescribeInstancesRequest {
	s.Status = &v
	return s
}

func (s *DescribeInstancesRequest) SetLockReason(v string) *DescribeInstancesRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeInstancesRequest) SetDeviceAvailable(v bool) *DescribeInstancesRequest {
	s.DeviceAvailable = &v
	return s
}

func (s *DescribeInstancesRequest) SetIoOptimized(v bool) *DescribeInstancesRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeInstancesRequest) SetNeedSaleCycle(v bool) *DescribeInstancesRequest {
	s.NeedSaleCycle = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceType(v string) *DescribeInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceTypeFamily(v string) *DescribeInstancesRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstancesRequest) SetKeyPairName(v string) *DescribeInstancesRequest {
	s.KeyPairName = &v
	return s
}

func (s *DescribeInstancesRequest) SetResourceGroupId(v string) *DescribeInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeInstancesRequest) SetHpcClusterId(v string) *DescribeInstancesRequest {
	s.HpcClusterId = &v
	return s
}

func (s *DescribeInstancesRequest) SetRdmaIpAddresses(v string) *DescribeInstancesRequest {
	s.RdmaIpAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetDryRun(v bool) *DescribeInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeInstancesRequest) SetHttpEndpoint(v string) *DescribeInstancesRequest {
	s.HttpEndpoint = &v
	return s
}

func (s *DescribeInstancesRequest) SetHttpTokens(v string) *DescribeInstancesRequest {
	s.HttpTokens = &v
	return s
}

func (s *DescribeInstancesRequest) SetHttpPutResponseHopLimit(v int32) *DescribeInstancesRequest {
	s.HttpPutResponseHopLimit = &v
	return s
}

func (s *DescribeInstancesRequest) SetTag(v []*DescribeInstancesRequestTag) *DescribeInstancesRequest {
	s.Tag = v
	return s
}

func (s *DescribeInstancesRequest) SetAdditionalAttributes(v []*string) *DescribeInstancesRequest {
	s.AdditionalAttributes = v
	return s
}

type DescribeInstancesRequestFilter struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstancesRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequestFilter) SetKey(v string) *DescribeInstancesRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeInstancesRequestFilter) SetValue(v string) *DescribeInstancesRequestFilter {
	s.Value = &v
	return s
}

type DescribeInstancesRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequestTag) SetKey(v string) *DescribeInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeInstancesRequestTag) SetValue(v string) *DescribeInstancesRequestTag {
	s.Value = &v
	return s
}

type DescribeInstancesResponseBody struct {
	Instances  []*DescribeInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBody) SetInstances(v []*DescribeInstancesResponseBodyInstances) *DescribeInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeInstancesResponseBody) SetTotalCount(v int32) *DescribeInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageSize(v int32) *DescribeInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetRequestId(v string) *DescribeInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageNumber(v int32) *DescribeInstancesResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeInstancesResponseBodyInstances struct {
	CreationTime               *string                                                           `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	SerialNumber               *string                                                           `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	DedicatedHostAttribute     *DescribeInstancesResponseBodyInstancesDedicatedHostAttribute     `json:"DedicatedHostAttribute,omitempty" xml:"DedicatedHostAttribute,omitempty" type:"Struct"`
	OperationLocks             []*DescribeInstancesResponseBodyInstancesOperationLocks           `json:"OperationLocks,omitempty" xml:"OperationLocks,omitempty" type:"Repeated"`
	Tags                       []*DescribeInstancesResponseBodyInstancesTags                     `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	MetadataOptions            *DescribeInstancesResponseBodyInstancesMetadataOptions            `json:"MetadataOptions,omitempty" xml:"MetadataOptions,omitempty" type:"Struct"`
	SaleCycle                  *string                                                           `json:"SaleCycle,omitempty" xml:"SaleCycle,omitempty"`
	PublicIpAddress            []*string                                                         `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty" type:"Repeated"`
	SpotStrategy               *string                                                           `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	DeviceAvailable            *bool                                                             `json:"DeviceAvailable,omitempty" xml:"DeviceAvailable,omitempty"`
	EipAddress                 *DescribeInstancesResponseBodyInstancesEipAddress                 `json:"EipAddress,omitempty" xml:"EipAddress,omitempty" type:"Struct"`
	InstanceName               *string                                                           `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceNetworkType        *string                                                           `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	SpotDuration               *int32                                                            `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	OSNameEn                   *string                                                           `json:"OSNameEn,omitempty" xml:"OSNameEn,omitempty"`
	SpotPriceLimit             *float32                                                          `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty"`
	OSName                     *string                                                           `json:"OSName,omitempty" xml:"OSName,omitempty"`
	ImageId                    *string                                                           `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	DeploymentSetGroupNo       *int32                                                            `json:"DeploymentSetGroupNo,omitempty" xml:"DeploymentSetGroupNo,omitempty"`
	ClusterId                  *string                                                           `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DedicatedInstanceAttribute *DescribeInstancesResponseBodyInstancesDedicatedInstanceAttribute `json:"DedicatedInstanceAttribute,omitempty" xml:"DedicatedInstanceAttribute,omitempty" type:"Struct"`
	GPUSpec                    *string                                                           `json:"GPUSpec,omitempty" xml:"GPUSpec,omitempty"`
	AutoReleaseTime            *string                                                           `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	InnerIpAddress             []*string                                                         `json:"InnerIpAddress,omitempty" xml:"InnerIpAddress,omitempty" type:"Repeated"`
	StoppedMode                *string                                                           `json:"StoppedMode,omitempty" xml:"StoppedMode,omitempty"`
	GPUAmount                  *int32                                                            `json:"GPUAmount,omitempty" xml:"GPUAmount,omitempty"`
	HostName                   *string                                                           `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceId                 *string                                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType               *string                                                           `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceChargeType         *string                                                           `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	StartTime                  *string                                                           `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	InternetChargeType         *string                                                           `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	ZoneId                     *string                                                           `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Recyclable                 *bool                                                             `json:"Recyclable,omitempty" xml:"Recyclable,omitempty"`
	CreditSpecification        *string                                                           `json:"CreditSpecification,omitempty" xml:"CreditSpecification,omitempty"`
	OSType                     *string                                                           `json:"OSType,omitempty" xml:"OSType,omitempty"`
	Status                     *string                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	DeploymentSetId            *string                                                           `json:"DeploymentSetId,omitempty" xml:"DeploymentSetId,omitempty"`
	KeyPairName                *string                                                           `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	CpuOptions                 *DescribeInstancesResponseBodyInstancesCpuOptions                 `json:"CpuOptions,omitempty" xml:"CpuOptions,omitempty" type:"Struct"`
	LocalStorageCapacity       *int64                                                            `json:"LocalStorageCapacity,omitempty" xml:"LocalStorageCapacity,omitempty"`
	Description                *string                                                           `json:"Description,omitempty" xml:"Description,omitempty"`
	HpcClusterId               *string                                                           `json:"HpcClusterId,omitempty" xml:"HpcClusterId,omitempty"`
	Memory                     *int32                                                            `json:"Memory,omitempty" xml:"Memory,omitempty"`
	VlanId                     *string                                                           `json:"VlanId,omitempty" xml:"VlanId,omitempty"`
	VpcAttributes              *DescribeInstancesResponseBodyInstancesVpcAttributes              `json:"VpcAttributes,omitempty" xml:"VpcAttributes,omitempty" type:"Struct"`
	DeletionProtection         *bool                                                             `json:"DeletionProtection,omitempty" xml:"DeletionProtection,omitempty"`
	EcsCapacityReservationAttr *DescribeInstancesResponseBodyInstancesEcsCapacityReservationAttr `json:"EcsCapacityReservationAttr,omitempty" xml:"EcsCapacityReservationAttr,omitempty" type:"Struct"`
	InternetMaxBandwidthIn     *int32                                                            `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InternetMaxBandwidthOut    *int32                                                            `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	SecurityGroupIds           []*string                                                         `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	RegionId                   *string                                                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	IoOptimized                *bool                                                             `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	Cpu                        *int32                                                            `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	RdmaIpAddress              []*string                                                         `json:"RdmaIpAddress,omitempty" xml:"RdmaIpAddress,omitempty" type:"Repeated"`
	ExpiredTime                *string                                                           `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	LocalStorageAmount         *int32                                                            `json:"LocalStorageAmount,omitempty" xml:"LocalStorageAmount,omitempty"`
	ResourceGroupId            *string                                                           `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	InstanceTypeFamily         *string                                                           `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	ISP                        *string                                                           `json:"ISP,omitempty" xml:"ISP,omitempty"`
	NetworkInterfaces          []*DescribeInstancesResponseBodyInstancesNetworkInterfaces        `json:"NetworkInterfaces,omitempty" xml:"NetworkInterfaces,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstances) SetCreationTime(v string) *DescribeInstancesResponseBodyInstances {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetSerialNumber(v string) *DescribeInstancesResponseBodyInstances {
	s.SerialNumber = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDedicatedHostAttribute(v *DescribeInstancesResponseBodyInstancesDedicatedHostAttribute) *DescribeInstancesResponseBodyInstances {
	s.DedicatedHostAttribute = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetOperationLocks(v []*DescribeInstancesResponseBodyInstancesOperationLocks) *DescribeInstancesResponseBodyInstances {
	s.OperationLocks = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetTags(v []*DescribeInstancesResponseBodyInstancesTags) *DescribeInstancesResponseBodyInstances {
	s.Tags = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetMetadataOptions(v *DescribeInstancesResponseBodyInstancesMetadataOptions) *DescribeInstancesResponseBodyInstances {
	s.MetadataOptions = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetSaleCycle(v string) *DescribeInstancesResponseBodyInstances {
	s.SaleCycle = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetPublicIpAddress(v []*string) *DescribeInstancesResponseBodyInstances {
	s.PublicIpAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetSpotStrategy(v string) *DescribeInstancesResponseBodyInstances {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDeviceAvailable(v bool) *DescribeInstancesResponseBodyInstances {
	s.DeviceAvailable = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetEipAddress(v *DescribeInstancesResponseBodyInstancesEipAddress) *DescribeInstancesResponseBodyInstances {
	s.EipAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceName(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceNetworkType(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetSpotDuration(v int32) *DescribeInstancesResponseBodyInstances {
	s.SpotDuration = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetOSNameEn(v string) *DescribeInstancesResponseBodyInstances {
	s.OSNameEn = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetSpotPriceLimit(v float32) *DescribeInstancesResponseBodyInstances {
	s.SpotPriceLimit = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetOSName(v string) *DescribeInstancesResponseBodyInstances {
	s.OSName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetImageId(v string) *DescribeInstancesResponseBodyInstances {
	s.ImageId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDeploymentSetGroupNo(v int32) *DescribeInstancesResponseBodyInstances {
	s.DeploymentSetGroupNo = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetClusterId(v string) *DescribeInstancesResponseBodyInstances {
	s.ClusterId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDedicatedInstanceAttribute(v *DescribeInstancesResponseBodyInstancesDedicatedInstanceAttribute) *DescribeInstancesResponseBodyInstances {
	s.DedicatedInstanceAttribute = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetGPUSpec(v string) *DescribeInstancesResponseBodyInstances {
	s.GPUSpec = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetAutoReleaseTime(v string) *DescribeInstancesResponseBodyInstances {
	s.AutoReleaseTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInnerIpAddress(v []*string) *DescribeInstancesResponseBodyInstances {
	s.InnerIpAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetStoppedMode(v string) *DescribeInstancesResponseBodyInstances {
	s.StoppedMode = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetGPUAmount(v int32) *DescribeInstancesResponseBodyInstances {
	s.GPUAmount = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetHostName(v string) *DescribeInstancesResponseBodyInstances {
	s.HostName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceId(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceType(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceChargeType(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetStartTime(v string) *DescribeInstancesResponseBodyInstances {
	s.StartTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInternetChargeType(v string) *DescribeInstancesResponseBodyInstances {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetZoneId(v string) *DescribeInstancesResponseBodyInstances {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetRecyclable(v bool) *DescribeInstancesResponseBodyInstances {
	s.Recyclable = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetCreditSpecification(v string) *DescribeInstancesResponseBodyInstances {
	s.CreditSpecification = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetOSType(v string) *DescribeInstancesResponseBodyInstances {
	s.OSType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetStatus(v string) *DescribeInstancesResponseBodyInstances {
	s.Status = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDeploymentSetId(v string) *DescribeInstancesResponseBodyInstances {
	s.DeploymentSetId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetKeyPairName(v string) *DescribeInstancesResponseBodyInstances {
	s.KeyPairName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetCpuOptions(v *DescribeInstancesResponseBodyInstancesCpuOptions) *DescribeInstancesResponseBodyInstances {
	s.CpuOptions = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetLocalStorageCapacity(v int64) *DescribeInstancesResponseBodyInstances {
	s.LocalStorageCapacity = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDescription(v string) *DescribeInstancesResponseBodyInstances {
	s.Description = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetHpcClusterId(v string) *DescribeInstancesResponseBodyInstances {
	s.HpcClusterId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetMemory(v int32) *DescribeInstancesResponseBodyInstances {
	s.Memory = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetVlanId(v string) *DescribeInstancesResponseBodyInstances {
	s.VlanId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetVpcAttributes(v *DescribeInstancesResponseBodyInstancesVpcAttributes) *DescribeInstancesResponseBodyInstances {
	s.VpcAttributes = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDeletionProtection(v bool) *DescribeInstancesResponseBodyInstances {
	s.DeletionProtection = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetEcsCapacityReservationAttr(v *DescribeInstancesResponseBodyInstancesEcsCapacityReservationAttr) *DescribeInstancesResponseBodyInstances {
	s.EcsCapacityReservationAttr = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInternetMaxBandwidthIn(v int32) *DescribeInstancesResponseBodyInstances {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInternetMaxBandwidthOut(v int32) *DescribeInstancesResponseBodyInstances {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetSecurityGroupIds(v []*string) *DescribeInstancesResponseBodyInstances {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetRegionId(v string) *DescribeInstancesResponseBodyInstances {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetIoOptimized(v bool) *DescribeInstancesResponseBodyInstances {
	s.IoOptimized = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetCpu(v int32) *DescribeInstancesResponseBodyInstances {
	s.Cpu = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetRdmaIpAddress(v []*string) *DescribeInstancesResponseBodyInstances {
	s.RdmaIpAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetExpiredTime(v string) *DescribeInstancesResponseBodyInstances {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetLocalStorageAmount(v int32) *DescribeInstancesResponseBodyInstances {
	s.LocalStorageAmount = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetResourceGroupId(v string) *DescribeInstancesResponseBodyInstances {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceTypeFamily(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetISP(v string) *DescribeInstancesResponseBodyInstances {
	s.ISP = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetNetworkInterfaces(v []*DescribeInstancesResponseBodyInstancesNetworkInterfaces) *DescribeInstancesResponseBodyInstances {
	s.NetworkInterfaces = v
	return s
}

type DescribeInstancesResponseBodyInstancesDedicatedHostAttribute struct {
	DedicatedHostName      *string `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostId        *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesDedicatedHostAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesDedicatedHostAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesDedicatedHostAttribute) SetDedicatedHostName(v string) *DescribeInstancesResponseBodyInstancesDedicatedHostAttribute {
	s.DedicatedHostName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDedicatedHostAttribute) SetDedicatedHostClusterId(v string) *DescribeInstancesResponseBodyInstancesDedicatedHostAttribute {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDedicatedHostAttribute) SetDedicatedHostId(v string) *DescribeInstancesResponseBodyInstancesDedicatedHostAttribute {
	s.DedicatedHostId = &v
	return s
}

type DescribeInstancesResponseBodyInstancesOperationLocks struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	LockMsg    *string `json:"LockMsg,omitempty" xml:"LockMsg,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesOperationLocks) SetLockReason(v string) *DescribeInstancesResponseBodyInstancesOperationLocks {
	s.LockReason = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesOperationLocks) SetLockMsg(v string) *DescribeInstancesResponseBodyInstancesOperationLocks {
	s.LockMsg = &v
	return s
}

type DescribeInstancesResponseBodyInstancesTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesTags) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesTags) SetTagValue(v string) *DescribeInstancesResponseBodyInstancesTags {
	s.TagValue = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesTags) SetTagKey(v string) *DescribeInstancesResponseBodyInstancesTags {
	s.TagKey = &v
	return s
}

type DescribeInstancesResponseBodyInstancesMetadataOptions struct {
	HttpPutResponseHopLimit *int32  `json:"HttpPutResponseHopLimit,omitempty" xml:"HttpPutResponseHopLimit,omitempty"`
	HttpEndpoint            *string `json:"HttpEndpoint,omitempty" xml:"HttpEndpoint,omitempty"`
	HttpTokens              *string `json:"HttpTokens,omitempty" xml:"HttpTokens,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesMetadataOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesMetadataOptions) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesMetadataOptions) SetHttpPutResponseHopLimit(v int32) *DescribeInstancesResponseBodyInstancesMetadataOptions {
	s.HttpPutResponseHopLimit = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesMetadataOptions) SetHttpEndpoint(v string) *DescribeInstancesResponseBodyInstancesMetadataOptions {
	s.HttpEndpoint = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesMetadataOptions) SetHttpTokens(v string) *DescribeInstancesResponseBodyInstancesMetadataOptions {
	s.HttpTokens = &v
	return s
}

type DescribeInstancesResponseBodyInstancesEipAddress struct {
	IpAddress            *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	Bandwidth            *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	AllocationId         *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	IsSupportUnassociate *bool   `json:"IsSupportUnassociate,omitempty" xml:"IsSupportUnassociate,omitempty"`
	InternetChargeType   *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesEipAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesEipAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesEipAddress) SetIpAddress(v string) *DescribeInstancesResponseBodyInstancesEipAddress {
	s.IpAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesEipAddress) SetBandwidth(v int32) *DescribeInstancesResponseBodyInstancesEipAddress {
	s.Bandwidth = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesEipAddress) SetAllocationId(v string) *DescribeInstancesResponseBodyInstancesEipAddress {
	s.AllocationId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesEipAddress) SetIsSupportUnassociate(v bool) *DescribeInstancesResponseBodyInstancesEipAddress {
	s.IsSupportUnassociate = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesEipAddress) SetInternetChargeType(v string) *DescribeInstancesResponseBodyInstancesEipAddress {
	s.InternetChargeType = &v
	return s
}

type DescribeInstancesResponseBodyInstancesDedicatedInstanceAttribute struct {
	Affinity *string `json:"Affinity,omitempty" xml:"Affinity,omitempty"`
	Tenancy  *string `json:"Tenancy,omitempty" xml:"Tenancy,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesDedicatedInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesDedicatedInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesDedicatedInstanceAttribute) SetAffinity(v string) *DescribeInstancesResponseBodyInstancesDedicatedInstanceAttribute {
	s.Affinity = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDedicatedInstanceAttribute) SetTenancy(v string) *DescribeInstancesResponseBodyInstancesDedicatedInstanceAttribute {
	s.Tenancy = &v
	return s
}

type DescribeInstancesResponseBodyInstancesCpuOptions struct {
	Numa           *string `json:"Numa,omitempty" xml:"Numa,omitempty"`
	CoreCount      *int32  `json:"CoreCount,omitempty" xml:"CoreCount,omitempty"`
	ThreadsPerCore *int32  `json:"ThreadsPerCore,omitempty" xml:"ThreadsPerCore,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesCpuOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesCpuOptions) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesCpuOptions) SetNuma(v string) *DescribeInstancesResponseBodyInstancesCpuOptions {
	s.Numa = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesCpuOptions) SetCoreCount(v int32) *DescribeInstancesResponseBodyInstancesCpuOptions {
	s.CoreCount = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesCpuOptions) SetThreadsPerCore(v int32) *DescribeInstancesResponseBodyInstancesCpuOptions {
	s.ThreadsPerCore = &v
	return s
}

type DescribeInstancesResponseBodyInstancesVpcAttributes struct {
	VpcId            *string   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	NatIpAddress     *string   `json:"NatIpAddress,omitempty" xml:"NatIpAddress,omitempty"`
	VSwitchId        *string   `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress []*string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesVpcAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesVpcAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesVpcAttributes) SetVpcId(v string) *DescribeInstancesResponseBodyInstancesVpcAttributes {
	s.VpcId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesVpcAttributes) SetNatIpAddress(v string) *DescribeInstancesResponseBodyInstancesVpcAttributes {
	s.NatIpAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesVpcAttributes) SetVSwitchId(v string) *DescribeInstancesResponseBodyInstancesVpcAttributes {
	s.VSwitchId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesVpcAttributes) SetPrivateIpAddress(v []*string) *DescribeInstancesResponseBodyInstancesVpcAttributes {
	s.PrivateIpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesEcsCapacityReservationAttr struct {
	CapacityReservationPreference *string `json:"CapacityReservationPreference,omitempty" xml:"CapacityReservationPreference,omitempty"`
	CapacityReservationId         *string `json:"CapacityReservationId,omitempty" xml:"CapacityReservationId,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesEcsCapacityReservationAttr) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesEcsCapacityReservationAttr) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesEcsCapacityReservationAttr) SetCapacityReservationPreference(v string) *DescribeInstancesResponseBodyInstancesEcsCapacityReservationAttr {
	s.CapacityReservationPreference = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesEcsCapacityReservationAttr) SetCapacityReservationId(v string) *DescribeInstancesResponseBodyInstancesEcsCapacityReservationAttr {
	s.CapacityReservationId = &v
	return s
}

type DescribeInstancesResponseBodyInstancesNetworkInterfaces struct {
	Type               *string                                                                 `json:"Type,omitempty" xml:"Type,omitempty"`
	MacAddress         *string                                                                 `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	NetworkInterfaceId *string                                                                 `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	Ipv6Sets           []*DescribeInstancesResponseBodyInstancesNetworkInterfacesIpv6Sets      `json:"Ipv6Sets,omitempty" xml:"Ipv6Sets,omitempty" type:"Repeated"`
	PrimaryIpAddress   *string                                                                 `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
	PrivateIpSets      []*DescribeInstancesResponseBodyInstancesNetworkInterfacesPrivateIpSets `json:"PrivateIpSets,omitempty" xml:"PrivateIpSets,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesNetworkInterfaces) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesNetworkInterfaces) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesNetworkInterfaces) SetType(v string) *DescribeInstancesResponseBodyInstancesNetworkInterfaces {
	s.Type = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesNetworkInterfaces) SetMacAddress(v string) *DescribeInstancesResponseBodyInstancesNetworkInterfaces {
	s.MacAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesNetworkInterfaces) SetNetworkInterfaceId(v string) *DescribeInstancesResponseBodyInstancesNetworkInterfaces {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesNetworkInterfaces) SetIpv6Sets(v []*DescribeInstancesResponseBodyInstancesNetworkInterfacesIpv6Sets) *DescribeInstancesResponseBodyInstancesNetworkInterfaces {
	s.Ipv6Sets = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesNetworkInterfaces) SetPrimaryIpAddress(v string) *DescribeInstancesResponseBodyInstancesNetworkInterfaces {
	s.PrimaryIpAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesNetworkInterfaces) SetPrivateIpSets(v []*DescribeInstancesResponseBodyInstancesNetworkInterfacesPrivateIpSets) *DescribeInstancesResponseBodyInstancesNetworkInterfaces {
	s.PrivateIpSets = v
	return s
}

type DescribeInstancesResponseBodyInstancesNetworkInterfacesIpv6Sets struct {
	Ipv6Address *string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesNetworkInterfacesIpv6Sets) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesNetworkInterfacesIpv6Sets) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesNetworkInterfacesIpv6Sets) SetIpv6Address(v string) *DescribeInstancesResponseBodyInstancesNetworkInterfacesIpv6Sets {
	s.Ipv6Address = &v
	return s
}

type DescribeInstancesResponseBodyInstancesNetworkInterfacesPrivateIpSets struct {
	Primary          *bool   `json:"Primary,omitempty" xml:"Primary,omitempty"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesNetworkInterfacesPrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesNetworkInterfacesPrivateIpSets) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesNetworkInterfacesPrivateIpSets) SetPrimary(v bool) *DescribeInstancesResponseBodyInstancesNetworkInterfacesPrivateIpSets {
	s.Primary = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesNetworkInterfacesPrivateIpSets) SetPrivateIpAddress(v string) *DescribeInstancesResponseBodyInstancesNetworkInterfacesPrivateIpSets {
	s.PrivateIpAddress = &v
	return s
}

type DescribeInstancesResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponse) SetHeaders(v map[string]*string) *DescribeInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancesResponse) SetBody(v *DescribeInstancesResponseBody) *DescribeInstancesResponse {
	s.Body = v
	return s
}

type DescribeInstancesFullStatusRequest struct {
	NotBefore            *DescribeInstancesFullStatusRequestNotBefore        `json:"NotBefore,omitempty" xml:"NotBefore,omitempty" type:"Struct"`
	EventPublishTime     *DescribeInstancesFullStatusRequestEventPublishTime `json:"EventPublishTime,omitempty" xml:"EventPublishTime,omitempty" type:"Struct"`
	OwnerId              *int64                                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status               *string                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	HealthStatus         *string                                             `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty"`
	EventType            *string                                             `json:"EventType,omitempty" xml:"EventType,omitempty"`
	PageNumber           *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	InstanceId           []*string                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	EventId              []*string                                           `json:"EventId,omitempty" xml:"EventId,omitempty" type:"Repeated"`
	InstanceEventType    []*string                                           `json:"InstanceEventType,omitempty" xml:"InstanceEventType,omitempty" type:"Repeated"`
}

func (s DescribeInstancesFullStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusRequest) SetNotBefore(v *DescribeInstancesFullStatusRequestNotBefore) *DescribeInstancesFullStatusRequest {
	s.NotBefore = v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetEventPublishTime(v *DescribeInstancesFullStatusRequestEventPublishTime) *DescribeInstancesFullStatusRequest {
	s.EventPublishTime = v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetOwnerId(v int64) *DescribeInstancesFullStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetResourceOwnerAccount(v string) *DescribeInstancesFullStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetResourceOwnerId(v int64) *DescribeInstancesFullStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetOwnerAccount(v string) *DescribeInstancesFullStatusRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetRegionId(v string) *DescribeInstancesFullStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetStatus(v string) *DescribeInstancesFullStatusRequest {
	s.Status = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetHealthStatus(v string) *DescribeInstancesFullStatusRequest {
	s.HealthStatus = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetEventType(v string) *DescribeInstancesFullStatusRequest {
	s.EventType = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetPageNumber(v int32) *DescribeInstancesFullStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetPageSize(v int32) *DescribeInstancesFullStatusRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetInstanceId(v []*string) *DescribeInstancesFullStatusRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetEventId(v []*string) *DescribeInstancesFullStatusRequest {
	s.EventId = v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetInstanceEventType(v []*string) *DescribeInstancesFullStatusRequest {
	s.InstanceEventType = v
	return s
}

type DescribeInstancesFullStatusRequestNotBefore struct {
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
	End   *string `json:"End,omitempty" xml:"End,omitempty"`
}

func (s DescribeInstancesFullStatusRequestNotBefore) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusRequestNotBefore) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusRequestNotBefore) SetStart(v string) *DescribeInstancesFullStatusRequestNotBefore {
	s.Start = &v
	return s
}

func (s *DescribeInstancesFullStatusRequestNotBefore) SetEnd(v string) *DescribeInstancesFullStatusRequestNotBefore {
	s.End = &v
	return s
}

type DescribeInstancesFullStatusRequestEventPublishTime struct {
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
	End   *string `json:"End,omitempty" xml:"End,omitempty"`
}

func (s DescribeInstancesFullStatusRequestEventPublishTime) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusRequestEventPublishTime) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusRequestEventPublishTime) SetStart(v string) *DescribeInstancesFullStatusRequestEventPublishTime {
	s.Start = &v
	return s
}

func (s *DescribeInstancesFullStatusRequestEventPublishTime) SetEnd(v string) *DescribeInstancesFullStatusRequestEventPublishTime {
	s.End = &v
	return s
}

type DescribeInstancesFullStatusResponseBody struct {
	TotalCount            *int32                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize              *int32                                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId             *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber            *int32                                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	InstanceFullStatusSet []*DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet `json:"InstanceFullStatusSet,omitempty" xml:"InstanceFullStatusSet,omitempty" type:"Repeated"`
}

func (s DescribeInstancesFullStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseBody) SetTotalCount(v int32) *DescribeInstancesFullStatusResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBody) SetPageSize(v int32) *DescribeInstancesFullStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBody) SetRequestId(v string) *DescribeInstancesFullStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBody) SetPageNumber(v int32) *DescribeInstancesFullStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBody) SetInstanceFullStatusSet(v []*DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet) *DescribeInstancesFullStatusResponseBody {
	s.InstanceFullStatusSet = v
	return s
}

type DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet struct {
	Status                  *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetStatus                    `json:"Status,omitempty" xml:"Status,omitempty" type:"Struct"`
	ScheduledSystemEventSet []*DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet `json:"ScheduledSystemEventSet,omitempty" xml:"ScheduledSystemEventSet,omitempty" type:"Repeated"`
	InstanceId              *string                                                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	HealthStatus            *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetHealthStatus              `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty" type:"Struct"`
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet) SetStatus(v *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetStatus) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet {
	s.Status = v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet) SetScheduledSystemEventSet(v []*DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet {
	s.ScheduledSystemEventSet = v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet) SetInstanceId(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet) SetHealthStatus(v *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetHealthStatus) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSet {
	s.HealthStatus = v
	return s
}

type DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetStatus struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetStatus) SetCode(v int32) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetStatus {
	s.Code = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetStatus) SetName(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetStatus {
	s.Name = &v
	return s
}

type DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet struct {
	EventPublishTime  *string                                                                                               `json:"EventPublishTime,omitempty" xml:"EventPublishTime,omitempty"`
	EventId           *string                                                                                               `json:"EventId,omitempty" xml:"EventId,omitempty"`
	ImpactLevel       *string                                                                                               `json:"ImpactLevel,omitempty" xml:"ImpactLevel,omitempty"`
	EventType         *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventType         `json:"EventType,omitempty" xml:"EventType,omitempty" type:"Struct"`
	ExtendedAttribute *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute `json:"ExtendedAttribute,omitempty" xml:"ExtendedAttribute,omitempty" type:"Struct"`
	NotBefore         *string                                                                                               `json:"NotBefore,omitempty" xml:"NotBefore,omitempty"`
	Reason            *string                                                                                               `json:"Reason,omitempty" xml:"Reason,omitempty"`
	EventCycleStatus  *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventCycleStatus  `json:"EventCycleStatus,omitempty" xml:"EventCycleStatus,omitempty" type:"Struct"`
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) SetEventPublishTime(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet {
	s.EventPublishTime = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) SetEventId(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet {
	s.EventId = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) SetImpactLevel(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet {
	s.ImpactLevel = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) SetEventType(v *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventType) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet {
	s.EventType = v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) SetExtendedAttribute(v *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet {
	s.ExtendedAttribute = v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) SetNotBefore(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet {
	s.NotBefore = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) SetReason(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet {
	s.Reason = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet) SetEventCycleStatus(v *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventCycleStatus) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSet {
	s.EventCycleStatus = v
	return s
}

type DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventType struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventType) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventType) SetCode(v int32) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventType {
	s.Code = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventType) SetName(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventType {
	s.Name = &v
	return s
}

type DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute struct {
	Device        *string                                                                                                              `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskId        *string                                                                                                              `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	InactiveDisks []*DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks `json:"InactiveDisks,omitempty" xml:"InactiveDisks,omitempty" type:"Repeated"`
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute) SetDevice(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute {
	s.Device = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute) SetDiskId(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute {
	s.DiskId = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute) SetInactiveDisks(v []*DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttribute {
	s.InactiveDisks = v
	return s
}

type DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks struct {
	CreationTime   *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DeviceCategory *string `json:"DeviceCategory,omitempty" xml:"DeviceCategory,omitempty"`
	DeviceType     *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	ReleaseTime    *string `json:"ReleaseTime,omitempty" xml:"ReleaseTime,omitempty"`
	DeviceSize     *string `json:"DeviceSize,omitempty" xml:"DeviceSize,omitempty"`
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks) SetCreationTime(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks) SetDeviceCategory(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks {
	s.DeviceCategory = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks) SetDeviceType(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks {
	s.DeviceType = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks) SetReleaseTime(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks {
	s.ReleaseTime = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks) SetDeviceSize(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetExtendedAttributeInactiveDisks {
	s.DeviceSize = &v
	return s
}

type DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventCycleStatus struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventCycleStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventCycleStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventCycleStatus) SetCode(v int32) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventCycleStatus {
	s.Code = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventCycleStatus) SetName(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetScheduledSystemEventSetEventCycleStatus {
	s.Name = &v
	return s
}

type DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetHealthStatus struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetHealthStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetHealthStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetHealthStatus) SetCode(v int32) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetHealthStatus {
	s.Code = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetHealthStatus) SetName(v string) *DescribeInstancesFullStatusResponseBodyInstanceFullStatusSetHealthStatus {
	s.Name = &v
	return s
}

type DescribeInstancesFullStatusResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstancesFullStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstancesFullStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponse) SetHeaders(v map[string]*string) *DescribeInstancesFullStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancesFullStatusResponse) SetBody(v *DescribeInstancesFullStatusResponseBody) *DescribeInstancesFullStatusResponse {
	s.Body = v
	return s
}

type DescribeInstanceStatusRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId               *string   `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ClusterId            *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	PageNumber           *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s DescribeInstanceStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatusRequest) SetOwnerId(v int64) *DescribeInstanceStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetResourceOwnerAccount(v string) *DescribeInstanceStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetResourceOwnerId(v int64) *DescribeInstanceStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetRegionId(v string) *DescribeInstanceStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetZoneId(v string) *DescribeInstanceStatusRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetClusterId(v string) *DescribeInstanceStatusRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetPageNumber(v int32) *DescribeInstanceStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetPageSize(v int32) *DescribeInstanceStatusRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetOwnerAccount(v string) *DescribeInstanceStatusRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetInstanceId(v []*string) *DescribeInstanceStatusRequest {
	s.InstanceId = v
	return s
}

type DescribeInstanceStatusResponseBody struct {
	TotalCount       *int32                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize         *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId        *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	InstanceStatuses []*DescribeInstanceStatusResponseBodyInstanceStatuses `json:"InstanceStatuses,omitempty" xml:"InstanceStatuses,omitempty" type:"Repeated"`
}

func (s DescribeInstanceStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatusResponseBody) SetTotalCount(v int32) *DescribeInstanceStatusResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceStatusResponseBody) SetPageSize(v int32) *DescribeInstanceStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceStatusResponseBody) SetRequestId(v string) *DescribeInstanceStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceStatusResponseBody) SetPageNumber(v int32) *DescribeInstanceStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceStatusResponseBody) SetInstanceStatuses(v []*DescribeInstanceStatusResponseBodyInstanceStatuses) *DescribeInstanceStatusResponseBody {
	s.InstanceStatuses = v
	return s
}

type DescribeInstanceStatusResponseBodyInstanceStatuses struct {
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceStatusResponseBodyInstanceStatuses) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatusResponseBodyInstanceStatuses) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatusResponseBodyInstanceStatuses) SetStatus(v string) *DescribeInstanceStatusResponseBodyInstanceStatuses {
	s.Status = &v
	return s
}

func (s *DescribeInstanceStatusResponseBodyInstanceStatuses) SetInstanceId(v string) *DescribeInstanceStatusResponseBodyInstanceStatuses {
	s.InstanceId = &v
	return s
}

type DescribeInstanceStatusResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatusResponse) SetHeaders(v map[string]*string) *DescribeInstanceStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceStatusResponse) SetBody(v *DescribeInstanceStatusResponseBody) *DescribeInstanceStatusResponse {
	s.Body = v
	return s
}

type DescribeInstanceTopologyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s DescribeInstanceTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyRequest) SetOwnerId(v int64) *DescribeInstanceTopologyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceTopologyRequest) SetResourceOwnerAccount(v string) *DescribeInstanceTopologyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceTopologyRequest) SetResourceOwnerId(v int64) *DescribeInstanceTopologyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceTopologyRequest) SetRegionId(v string) *DescribeInstanceTopologyRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceTopologyRequest) SetInstanceIds(v string) *DescribeInstanceTopologyRequest {
	s.InstanceIds = &v
	return s
}

type DescribeInstanceTopologyResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Topologys []*DescribeInstanceTopologyResponseBodyTopologys `json:"Topologys,omitempty" xml:"Topologys,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTopologyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBody) SetRequestId(v string) *DescribeInstanceTopologyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBody) SetTopologys(v []*DescribeInstanceTopologyResponseBodyTopologys) *DescribeInstanceTopologyResponseBody {
	s.Topologys = v
	return s
}

type DescribeInstanceTopologyResponseBodyTopologys struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	HostId     *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s DescribeInstanceTopologyResponseBodyTopologys) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyTopologys) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyTopologys) SetInstanceId(v string) *DescribeInstanceTopologyResponseBodyTopologys {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyTopologys) SetHostId(v string) *DescribeInstanceTopologyResponseBodyTopologys {
	s.HostId = &v
	return s
}

type DescribeInstanceTopologyResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceTopologyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponse) SetHeaders(v map[string]*string) *DescribeInstanceTopologyResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTopologyResponse) SetBody(v *DescribeInstanceTopologyResponseBody) *DescribeInstanceTopologyResponse {
	s.Body = v
	return s
}

type DescribeInstanceTypeFamiliesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Generation           *string `json:"Generation,omitempty" xml:"Generation,omitempty"`
}

func (s DescribeInstanceTypeFamiliesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeFamiliesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeFamiliesRequest) SetOwnerId(v int64) *DescribeInstanceTypeFamiliesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetResourceOwnerAccount(v string) *DescribeInstanceTypeFamiliesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetResourceOwnerId(v int64) *DescribeInstanceTypeFamiliesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetOwnerAccount(v string) *DescribeInstanceTypeFamiliesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetRegionId(v string) *DescribeInstanceTypeFamiliesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetGeneration(v string) *DescribeInstanceTypeFamiliesRequest {
	s.Generation = &v
	return s
}

type DescribeInstanceTypeFamiliesResponseBody struct {
	RequestId            *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceTypeFamilies []*DescribeInstanceTypeFamiliesResponseBodyInstanceTypeFamilies `json:"InstanceTypeFamilies,omitempty" xml:"InstanceTypeFamilies,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTypeFamiliesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeFamiliesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeFamiliesResponseBody) SetRequestId(v string) *DescribeInstanceTypeFamiliesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesResponseBody) SetInstanceTypeFamilies(v []*DescribeInstanceTypeFamiliesResponseBodyInstanceTypeFamilies) *DescribeInstanceTypeFamiliesResponseBody {
	s.InstanceTypeFamilies = v
	return s
}

type DescribeInstanceTypeFamiliesResponseBodyInstanceTypeFamilies struct {
	InstanceTypeFamilyId *string `json:"InstanceTypeFamilyId,omitempty" xml:"InstanceTypeFamilyId,omitempty"`
	Generation           *string `json:"Generation,omitempty" xml:"Generation,omitempty"`
}

func (s DescribeInstanceTypeFamiliesResponseBodyInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeFamiliesResponseBodyInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeFamiliesResponseBodyInstanceTypeFamilies) SetInstanceTypeFamilyId(v string) *DescribeInstanceTypeFamiliesResponseBodyInstanceTypeFamilies {
	s.InstanceTypeFamilyId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesResponseBodyInstanceTypeFamilies) SetGeneration(v string) *DescribeInstanceTypeFamiliesResponseBodyInstanceTypeFamilies {
	s.Generation = &v
	return s
}

type DescribeInstanceTypeFamiliesResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceTypeFamiliesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceTypeFamiliesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeFamiliesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeFamiliesResponse) SetHeaders(v map[string]*string) *DescribeInstanceTypeFamiliesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTypeFamiliesResponse) SetBody(v *DescribeInstanceTypeFamiliesResponseBody) *DescribeInstanceTypeFamiliesResponse {
	s.Body = v
	return s
}

type DescribeInstanceTypesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceTypeFamily   *string   `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	InstanceTypes        []*string `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesRequest) SetOwnerId(v int64) *DescribeInstanceTypesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceTypesRequest) SetResourceOwnerAccount(v string) *DescribeInstanceTypesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypesRequest) SetResourceOwnerId(v int64) *DescribeInstanceTypesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceTypesRequest) SetOwnerAccount(v string) *DescribeInstanceTypesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypesRequest) SetInstanceTypeFamily(v string) *DescribeInstanceTypesRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstanceTypesRequest) SetInstanceTypes(v []*string) *DescribeInstanceTypesRequest {
	s.InstanceTypes = v
	return s
}

type DescribeInstanceTypesResponseBody struct {
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceTypes []*DescribeInstanceTypesResponseBodyInstanceTypes `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseBody) SetRequestId(v string) *DescribeInstanceTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceTypesResponseBody) SetInstanceTypes(v []*DescribeInstanceTypesResponseBodyInstanceTypes) *DescribeInstanceTypesResponseBody {
	s.InstanceTypes = v
	return s
}

type DescribeInstanceTypesResponseBodyInstanceTypes struct {
	EniTotalQuantity            *int32   `json:"EniTotalQuantity,omitempty" xml:"EniTotalQuantity,omitempty"`
	LocalStorageCategory        *string  `json:"LocalStorageCategory,omitempty" xml:"LocalStorageCategory,omitempty"`
	PrimaryEniQueueNumber       *int32   `json:"PrimaryEniQueueNumber,omitempty" xml:"PrimaryEniQueueNumber,omitempty"`
	MemorySize                  *float32 `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
	LocalStorageCapacity        *int64   `json:"LocalStorageCapacity,omitempty" xml:"LocalStorageCapacity,omitempty"`
	InstanceFamilyLevel         *string  `json:"InstanceFamilyLevel,omitempty" xml:"InstanceFamilyLevel,omitempty"`
	InstancePpsRx               *int64   `json:"InstancePpsRx,omitempty" xml:"InstancePpsRx,omitempty"`
	EniIpv6AddressQuantity      *int32   `json:"EniIpv6AddressQuantity,omitempty" xml:"EniIpv6AddressQuantity,omitempty"`
	MaximumQueueNumberPerEni    *int32   `json:"MaximumQueueNumberPerEni,omitempty" xml:"MaximumQueueNumberPerEni,omitempty"`
	InstanceTypeId              *string  `json:"InstanceTypeId,omitempty" xml:"InstanceTypeId,omitempty"`
	InstanceBandwidthRx         *int32   `json:"InstanceBandwidthRx,omitempty" xml:"InstanceBandwidthRx,omitempty"`
	GPUSpec                     *string  `json:"GPUSpec,omitempty" xml:"GPUSpec,omitempty"`
	SecondaryEniQueueNumber     *int32   `json:"SecondaryEniQueueNumber,omitempty" xml:"SecondaryEniQueueNumber,omitempty"`
	InstanceBandwidthTx         *int32   `json:"InstanceBandwidthTx,omitempty" xml:"InstanceBandwidthTx,omitempty"`
	GPUAmount                   *int32   `json:"GPUAmount,omitempty" xml:"GPUAmount,omitempty"`
	TotalEniQueueQuantity       *int32   `json:"TotalEniQueueQuantity,omitempty" xml:"TotalEniQueueQuantity,omitempty"`
	InitialCredit               *int32   `json:"InitialCredit,omitempty" xml:"InitialCredit,omitempty"`
	LocalStorageAmount          *int32   `json:"LocalStorageAmount,omitempty" xml:"LocalStorageAmount,omitempty"`
	BaselineCredit              *int32   `json:"BaselineCredit,omitempty" xml:"BaselineCredit,omitempty"`
	InstancePpsTx               *int64   `json:"InstancePpsTx,omitempty" xml:"InstancePpsTx,omitempty"`
	EniPrivateIpAddressQuantity *int32   `json:"EniPrivateIpAddressQuantity,omitempty" xml:"EniPrivateIpAddressQuantity,omitempty"`
	InstanceTypeFamily          *string  `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	CpuCoreCount                *int32   `json:"CpuCoreCount,omitempty" xml:"CpuCoreCount,omitempty"`
	EniQuantity                 *int32   `json:"EniQuantity,omitempty" xml:"EniQuantity,omitempty"`
	EniTrunkSupported           *bool    `json:"EniTrunkSupported,omitempty" xml:"EniTrunkSupported,omitempty"`
}

func (s DescribeInstanceTypesResponseBodyInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseBodyInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetEniTotalQuantity(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.EniTotalQuantity = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetLocalStorageCategory(v string) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.LocalStorageCategory = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetPrimaryEniQueueNumber(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.PrimaryEniQueueNumber = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetMemorySize(v float32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.MemorySize = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetLocalStorageCapacity(v int64) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.LocalStorageCapacity = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInstanceFamilyLevel(v string) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InstanceFamilyLevel = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInstancePpsRx(v int64) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InstancePpsRx = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetEniIpv6AddressQuantity(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.EniIpv6AddressQuantity = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetMaximumQueueNumberPerEni(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.MaximumQueueNumberPerEni = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInstanceTypeId(v string) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InstanceTypeId = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInstanceBandwidthRx(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InstanceBandwidthRx = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetGPUSpec(v string) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.GPUSpec = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetSecondaryEniQueueNumber(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.SecondaryEniQueueNumber = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInstanceBandwidthTx(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InstanceBandwidthTx = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetGPUAmount(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.GPUAmount = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetTotalEniQueueQuantity(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.TotalEniQueueQuantity = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInitialCredit(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InitialCredit = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetLocalStorageAmount(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.LocalStorageAmount = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetBaselineCredit(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.BaselineCredit = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInstancePpsTx(v int64) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InstancePpsTx = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetEniPrivateIpAddressQuantity(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.EniPrivateIpAddressQuantity = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInstanceTypeFamily(v string) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetCpuCoreCount(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.CpuCoreCount = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetEniQuantity(v int32) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.EniQuantity = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetEniTrunkSupported(v bool) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.EniTrunkSupported = &v
	return s
}

type DescribeInstanceTypesResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponse) SetHeaders(v map[string]*string) *DescribeInstanceTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTypesResponse) SetBody(v *DescribeInstanceTypesResponseBody) *DescribeInstanceTypesResponse {
	s.Body = v
	return s
}

type DescribeInstanceVncPasswdRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeInstanceVncPasswdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncPasswdRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncPasswdRequest) SetOwnerId(v int64) *DescribeInstanceVncPasswdRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetResourceOwnerAccount(v string) *DescribeInstanceVncPasswdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetResourceOwnerId(v int64) *DescribeInstanceVncPasswdRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetRegionId(v string) *DescribeInstanceVncPasswdRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetInstanceId(v string) *DescribeInstanceVncPasswdRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetOwnerAccount(v string) *DescribeInstanceVncPasswdRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeInstanceVncPasswdResponseBody struct {
	VncPasswd *string `json:"VncPasswd,omitempty" xml:"VncPasswd,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceVncPasswdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncPasswdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncPasswdResponseBody) SetVncPasswd(v string) *DescribeInstanceVncPasswdResponseBody {
	s.VncPasswd = &v
	return s
}

func (s *DescribeInstanceVncPasswdResponseBody) SetRequestId(v string) *DescribeInstanceVncPasswdResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceVncPasswdResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceVncPasswdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceVncPasswdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncPasswdResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncPasswdResponse) SetHeaders(v map[string]*string) *DescribeInstanceVncPasswdResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceVncPasswdResponse) SetBody(v *DescribeInstanceVncPasswdResponseBody) *DescribeInstanceVncPasswdResponse {
	s.Body = v
	return s
}

type DescribeInstanceVncUrlRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeInstanceVncUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlRequest) SetOwnerId(v int64) *DescribeInstanceVncUrlRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetResourceOwnerAccount(v string) *DescribeInstanceVncUrlRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetResourceOwnerId(v int64) *DescribeInstanceVncUrlRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetRegionId(v string) *DescribeInstanceVncUrlRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetInstanceId(v string) *DescribeInstanceVncUrlRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetOwnerAccount(v string) *DescribeInstanceVncUrlRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeInstanceVncUrlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VncUrl    *string `json:"VncUrl,omitempty" xml:"VncUrl,omitempty"`
}

func (s DescribeInstanceVncUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlResponseBody) SetRequestId(v string) *DescribeInstanceVncUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceVncUrlResponseBody) SetVncUrl(v string) *DescribeInstanceVncUrlResponseBody {
	s.VncUrl = &v
	return s
}

type DescribeInstanceVncUrlResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceVncUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceVncUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlResponse) SetHeaders(v map[string]*string) *DescribeInstanceVncUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceVncUrlResponse) SetBody(v *DescribeInstanceVncUrlResponseBody) *DescribeInstanceVncUrlResponse {
	s.Body = v
	return s
}

type DescribeInvocationResultsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InvokeId             *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	CommandId            *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	InvokeRecordStatus   *string `json:"InvokeRecordStatus,omitempty" xml:"InvokeRecordStatus,omitempty"`
	IncludeHistory       *bool   `json:"IncludeHistory,omitempty" xml:"IncludeHistory,omitempty"`
	ContentEncoding      *string `json:"ContentEncoding,omitempty" xml:"ContentEncoding,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeInvocationResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsRequest) SetOwnerId(v int64) *DescribeInvocationResultsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetResourceOwnerAccount(v string) *DescribeInvocationResultsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetResourceOwnerId(v int64) *DescribeInvocationResultsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetOwnerAccount(v string) *DescribeInvocationResultsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetRegionId(v string) *DescribeInvocationResultsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetInvokeId(v string) *DescribeInvocationResultsRequest {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetInstanceId(v string) *DescribeInvocationResultsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetCommandId(v string) *DescribeInvocationResultsRequest {
	s.CommandId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetInvokeRecordStatus(v string) *DescribeInvocationResultsRequest {
	s.InvokeRecordStatus = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetIncludeHistory(v bool) *DescribeInvocationResultsRequest {
	s.IncludeHistory = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetContentEncoding(v string) *DescribeInvocationResultsRequest {
	s.ContentEncoding = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetPageNumber(v int64) *DescribeInvocationResultsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetPageSize(v int64) *DescribeInvocationResultsRequest {
	s.PageSize = &v
	return s
}

type DescribeInvocationResultsResponseBody struct {
	RequestId  *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Invocation *DescribeInvocationResultsResponseBodyInvocation `json:"Invocation,omitempty" xml:"Invocation,omitempty" type:"Struct"`
}

func (s DescribeInvocationResultsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponseBody) SetRequestId(v string) *DescribeInvocationResultsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInvocationResultsResponseBody) SetInvocation(v *DescribeInvocationResultsResponseBodyInvocation) *DescribeInvocationResultsResponseBody {
	s.Invocation = v
	return s
}

type DescribeInvocationResultsResponseBodyInvocation struct {
	PageSize          *int64                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber        *int64                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	InvocationResults []*DescribeInvocationResultsResponseBodyInvocationInvocationResults `json:"InvocationResults,omitempty" xml:"InvocationResults,omitempty" type:"Repeated"`
	TotalCount        *int64                                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInvocationResultsResponseBodyInvocation) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponseBodyInvocation) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponseBodyInvocation) SetPageSize(v int64) *DescribeInvocationResultsResponseBodyInvocation {
	s.PageSize = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocation) SetPageNumber(v int64) *DescribeInvocationResultsResponseBodyInvocation {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocation) SetInvocationResults(v []*DescribeInvocationResultsResponseBodyInvocationInvocationResults) *DescribeInvocationResultsResponseBodyInvocation {
	s.InvocationResults = v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocation) SetTotalCount(v int64) *DescribeInvocationResultsResponseBodyInvocation {
	s.TotalCount = &v
	return s
}

type DescribeInvocationResultsResponseBodyInvocationInvocationResults struct {
	InvocationStatus   *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	Repeats            *int32  `json:"Repeats,omitempty" xml:"Repeats,omitempty"`
	Output             *string `json:"Output,omitempty" xml:"Output,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	CommandId          *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	Dropped            *int32  `json:"Dropped,omitempty" xml:"Dropped,omitempty"`
	StopTime           *string `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	ExitCode           *int64  `json:"ExitCode,omitempty" xml:"ExitCode,omitempty"`
	StartTime          *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	ErrorInfo          *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
	ErrorCode          *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	FinishedTime       *string `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	InvokeId           *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	InvokeRecordStatus *string `json:"InvokeRecordStatus,omitempty" xml:"InvokeRecordStatus,omitempty"`
	Username           *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeInvocationResultsResponseBodyInvocationInvocationResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponseBodyInvocationInvocationResults) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetInvocationStatus(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetRepeats(v int32) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.Repeats = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetOutput(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.Output = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetInstanceId(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetCommandId(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.CommandId = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetDropped(v int32) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.Dropped = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetStopTime(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.StopTime = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetExitCode(v int64) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.ExitCode = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetStartTime(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.StartTime = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetErrorInfo(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.ErrorInfo = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetErrorCode(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetFinishedTime(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.FinishedTime = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetInvokeId(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetInvokeRecordStatus(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.InvokeRecordStatus = &v
	return s
}

func (s *DescribeInvocationResultsResponseBodyInvocationInvocationResults) SetUsername(v string) *DescribeInvocationResultsResponseBodyInvocationInvocationResults {
	s.Username = &v
	return s
}

type DescribeInvocationResultsResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInvocationResultsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInvocationResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponse) SetHeaders(v map[string]*string) *DescribeInvocationResultsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInvocationResultsResponse) SetBody(v *DescribeInvocationResultsResponseBody) *DescribeInvocationResultsResponse {
	s.Body = v
	return s
}

type DescribeInvocationsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InvokeId             *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	CommandId            *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	CommandName          *string `json:"CommandName,omitempty" xml:"CommandName,omitempty"`
	CommandType          *string `json:"CommandType,omitempty" xml:"CommandType,omitempty"`
	Timed                *bool   `json:"Timed,omitempty" xml:"Timed,omitempty"`
	InvokeStatus         *string `json:"InvokeStatus,omitempty" xml:"InvokeStatus,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ContentEncoding      *string `json:"ContentEncoding,omitempty" xml:"ContentEncoding,omitempty"`
	IncludeOutput        *bool   `json:"IncludeOutput,omitempty" xml:"IncludeOutput,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeInvocationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsRequest) SetOwnerId(v int64) *DescribeInvocationsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetResourceOwnerAccount(v string) *DescribeInvocationsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInvocationsRequest) SetResourceOwnerId(v int64) *DescribeInvocationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetOwnerAccount(v string) *DescribeInvocationsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInvocationsRequest) SetRegionId(v string) *DescribeInvocationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetInvokeId(v string) *DescribeInvocationsRequest {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetCommandId(v string) *DescribeInvocationsRequest {
	s.CommandId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetCommandName(v string) *DescribeInvocationsRequest {
	s.CommandName = &v
	return s
}

func (s *DescribeInvocationsRequest) SetCommandType(v string) *DescribeInvocationsRequest {
	s.CommandType = &v
	return s
}

func (s *DescribeInvocationsRequest) SetTimed(v bool) *DescribeInvocationsRequest {
	s.Timed = &v
	return s
}

func (s *DescribeInvocationsRequest) SetInvokeStatus(v string) *DescribeInvocationsRequest {
	s.InvokeStatus = &v
	return s
}

func (s *DescribeInvocationsRequest) SetInstanceId(v string) *DescribeInvocationsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetContentEncoding(v string) *DescribeInvocationsRequest {
	s.ContentEncoding = &v
	return s
}

func (s *DescribeInvocationsRequest) SetIncludeOutput(v bool) *DescribeInvocationsRequest {
	s.IncludeOutput = &v
	return s
}

func (s *DescribeInvocationsRequest) SetPageNumber(v int64) *DescribeInvocationsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationsRequest) SetPageSize(v int64) *DescribeInvocationsRequest {
	s.PageSize = &v
	return s
}

type DescribeInvocationsResponseBody struct {
	TotalCount  *int64                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize    *int64                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber  *int64                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Invocations []*DescribeInvocationsResponseBodyInvocations `json:"Invocations,omitempty" xml:"Invocations,omitempty" type:"Repeated"`
}

func (s DescribeInvocationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseBody) SetTotalCount(v int64) *DescribeInvocationsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeInvocationsResponseBody) SetPageSize(v int64) *DescribeInvocationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInvocationsResponseBody) SetRequestId(v string) *DescribeInvocationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInvocationsResponseBody) SetPageNumber(v int64) *DescribeInvocationsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationsResponseBody) SetInvocations(v []*DescribeInvocationsResponseBodyInvocations) *DescribeInvocationsResponseBody {
	s.Invocations = v
	return s
}

type DescribeInvocationsResponseBodyInvocations struct {
	Frequency        *string                                                      `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	CreationTime     *string                                                      `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	InvocationStatus *string                                                      `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	InvokeInstances  []*DescribeInvocationsResponseBodyInvocationsInvokeInstances `json:"InvokeInstances,omitempty" xml:"InvokeInstances,omitempty" type:"Repeated"`
	CommandId        *string                                                      `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	InvokeStatus     *string                                                      `json:"InvokeStatus,omitempty" xml:"InvokeStatus,omitempty"`
	CommandType      *string                                                      `json:"CommandType,omitempty" xml:"CommandType,omitempty"`
	Parameters       *string                                                      `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	Timed            *bool                                                        `json:"Timed,omitempty" xml:"Timed,omitempty"`
	CommandContent   *string                                                      `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	CommandName      *string                                                      `json:"CommandName,omitempty" xml:"CommandName,omitempty"`
	InvokeId         *string                                                      `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	Username         *string                                                      `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeInvocationsResponseBodyInvocations) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseBodyInvocations) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseBodyInvocations) SetFrequency(v string) *DescribeInvocationsResponseBodyInvocations {
	s.Frequency = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCreationTime(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CreationTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvocationStatus(v string) *DescribeInvocationsResponseBodyInvocations {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvokeInstances(v []*DescribeInvocationsResponseBodyInvocationsInvokeInstances) *DescribeInvocationsResponseBodyInvocations {
	s.InvokeInstances = v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCommandId(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CommandId = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvokeStatus(v string) *DescribeInvocationsResponseBodyInvocations {
	s.InvokeStatus = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCommandType(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CommandType = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetParameters(v string) *DescribeInvocationsResponseBodyInvocations {
	s.Parameters = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetTimed(v bool) *DescribeInvocationsResponseBodyInvocations {
	s.Timed = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCommandContent(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CommandContent = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCommandName(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CommandName = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvokeId(v string) *DescribeInvocationsResponseBodyInvocations {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetUsername(v string) *DescribeInvocationsResponseBodyInvocations {
	s.Username = &v
	return s
}

type DescribeInvocationsResponseBodyInvocationsInvokeInstances struct {
	CreationTime         *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	InvocationStatus     *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	FinishTime           *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	UpdateTime           *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Repeats              *int32  `json:"Repeats,omitempty" xml:"Repeats,omitempty"`
	Output               *string `json:"Output,omitempty" xml:"Output,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Dropped              *int32  `json:"Dropped,omitempty" xml:"Dropped,omitempty"`
	StopTime             *string `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	ExitCode             *int64  `json:"ExitCode,omitempty" xml:"ExitCode,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	ErrorInfo            *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
	ErrorCode            *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	InstanceInvokeStatus *string `json:"InstanceInvokeStatus,omitempty" xml:"InstanceInvokeStatus,omitempty"`
}

func (s DescribeInvocationsResponseBodyInvocationsInvokeInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseBodyInvocationsInvokeInstances) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetCreationTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.CreationTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetInvocationStatus(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetFinishTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.FinishTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetUpdateTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.UpdateTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetRepeats(v int32) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.Repeats = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetOutput(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.Output = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetInstanceId(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetDropped(v int32) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.Dropped = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetStopTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.StopTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetExitCode(v int64) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.ExitCode = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetStartTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.StartTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetErrorInfo(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.ErrorInfo = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetErrorCode(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeInstances) SetInstanceInvokeStatus(v string) *DescribeInvocationsResponseBodyInvocationsInvokeInstances {
	s.InstanceInvokeStatus = &v
	return s
}

type DescribeInvocationsResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInvocationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInvocationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponse) SetHeaders(v map[string]*string) *DescribeInvocationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInvocationsResponse) SetBody(v *DescribeInvocationsResponseBody) *DescribeInvocationsResponse {
	s.Body = v
	return s
}

type DescribeKeyPairsRequest struct {
	OwnerId              *int64                        `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                       `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                        `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	KeyPairName          *string                       `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	KeyPairFingerPrint   *string                       `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
	PageNumber           *int32                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceGroupId      *string                       `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                  []*DescribeKeyPairsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeKeyPairsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsRequest) SetOwnerId(v int64) *DescribeKeyPairsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetResourceOwnerAccount(v string) *DescribeKeyPairsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetResourceOwnerId(v int64) *DescribeKeyPairsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetRegionId(v string) *DescribeKeyPairsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetKeyPairName(v string) *DescribeKeyPairsRequest {
	s.KeyPairName = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetKeyPairFingerPrint(v string) *DescribeKeyPairsRequest {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetPageNumber(v int32) *DescribeKeyPairsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetPageSize(v int32) *DescribeKeyPairsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetResourceGroupId(v string) *DescribeKeyPairsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetTag(v []*DescribeKeyPairsRequestTag) *DescribeKeyPairsRequest {
	s.Tag = v
	return s
}

type DescribeKeyPairsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeKeyPairsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsRequestTag) SetKey(v string) *DescribeKeyPairsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeKeyPairsRequestTag) SetValue(v string) *DescribeKeyPairsRequestTag {
	s.Value = &v
	return s
}

type DescribeKeyPairsResponseBody struct {
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	KeyPairs   []*DescribeKeyPairsResponseBodyKeyPairs `json:"KeyPairs,omitempty" xml:"KeyPairs,omitempty" type:"Repeated"`
}

func (s DescribeKeyPairsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseBody) SetTotalCount(v int32) *DescribeKeyPairsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetPageSize(v int32) *DescribeKeyPairsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetRequestId(v string) *DescribeKeyPairsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetPageNumber(v int32) *DescribeKeyPairsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetKeyPairs(v []*DescribeKeyPairsResponseBodyKeyPairs) *DescribeKeyPairsResponseBody {
	s.KeyPairs = v
	return s
}

type DescribeKeyPairsResponseBodyKeyPairs struct {
	CreationTime       *string                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	KeyPairName        *string                                     `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	ResourceGroupId    *string                                     `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tags               []*DescribeKeyPairsResponseBodyKeyPairsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	KeyPairFingerPrint *string                                     `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
}

func (s DescribeKeyPairsResponseBodyKeyPairs) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseBodyKeyPairs) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseBodyKeyPairs) SetCreationTime(v string) *DescribeKeyPairsResponseBodyKeyPairs {
	s.CreationTime = &v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairs) SetKeyPairName(v string) *DescribeKeyPairsResponseBodyKeyPairs {
	s.KeyPairName = &v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairs) SetResourceGroupId(v string) *DescribeKeyPairsResponseBodyKeyPairs {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairs) SetTags(v []*DescribeKeyPairsResponseBodyKeyPairsTags) *DescribeKeyPairsResponseBodyKeyPairs {
	s.Tags = v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairs) SetKeyPairFingerPrint(v string) *DescribeKeyPairsResponseBodyKeyPairs {
	s.KeyPairFingerPrint = &v
	return s
}

type DescribeKeyPairsResponseBodyKeyPairsTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeKeyPairsResponseBodyKeyPairsTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseBodyKeyPairsTags) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseBodyKeyPairsTags) SetTagValue(v string) *DescribeKeyPairsResponseBodyKeyPairsTags {
	s.TagValue = &v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairsTags) SetTagKey(v string) *DescribeKeyPairsResponseBodyKeyPairsTags {
	s.TagKey = &v
	return s
}

type DescribeKeyPairsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeKeyPairsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeKeyPairsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponse) SetHeaders(v map[string]*string) *DescribeKeyPairsResponse {
	s.Headers = v
	return s
}

func (s *DescribeKeyPairsResponse) SetBody(v *DescribeKeyPairsResponseBody) *DescribeKeyPairsResponse {
	s.Body = v
	return s
}

type DescribeLaunchTemplatesRequest struct {
	OwnerId                 *int64                                       `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string                                      `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64                                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount            *string                                      `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TemplateTag             []*DescribeLaunchTemplatesRequestTemplateTag `json:"TemplateTag,omitempty" xml:"TemplateTag,omitempty" type:"Repeated"`
	PageNumber              *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TemplateResourceGroupId *string                                      `json:"TemplateResourceGroupId,omitempty" xml:"TemplateResourceGroupId,omitempty"`
	LaunchTemplateId        []*string                                    `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty" type:"Repeated"`
	LaunchTemplateName      []*string                                    `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty" type:"Repeated"`
}

func (s DescribeLaunchTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesRequest) SetOwnerId(v int64) *DescribeLaunchTemplatesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetResourceOwnerAccount(v string) *DescribeLaunchTemplatesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetResourceOwnerId(v int64) *DescribeLaunchTemplatesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetOwnerAccount(v string) *DescribeLaunchTemplatesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetRegionId(v string) *DescribeLaunchTemplatesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetTemplateTag(v []*DescribeLaunchTemplatesRequestTemplateTag) *DescribeLaunchTemplatesRequest {
	s.TemplateTag = v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetPageNumber(v int32) *DescribeLaunchTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetPageSize(v int32) *DescribeLaunchTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetTemplateResourceGroupId(v string) *DescribeLaunchTemplatesRequest {
	s.TemplateResourceGroupId = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetLaunchTemplateId(v []*string) *DescribeLaunchTemplatesRequest {
	s.LaunchTemplateId = v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetLaunchTemplateName(v []*string) *DescribeLaunchTemplatesRequest {
	s.LaunchTemplateName = v
	return s
}

type DescribeLaunchTemplatesRequestTemplateTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLaunchTemplatesRequestTemplateTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesRequestTemplateTag) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesRequestTemplateTag) SetKey(v string) *DescribeLaunchTemplatesRequestTemplateTag {
	s.Key = &v
	return s
}

func (s *DescribeLaunchTemplatesRequestTemplateTag) SetValue(v string) *DescribeLaunchTemplatesRequestTemplateTag {
	s.Value = &v
	return s
}

type DescribeLaunchTemplatesResponseBody struct {
	TotalCount         *int32                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	LaunchTemplateSets []*DescribeLaunchTemplatesResponseBodyLaunchTemplateSets `json:"LaunchTemplateSets,omitempty" xml:"LaunchTemplateSets,omitempty" type:"Repeated"`
	PageSize           *int32                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId          *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber         *int32                                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeLaunchTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesResponseBody) SetTotalCount(v int32) *DescribeLaunchTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBody) SetLaunchTemplateSets(v []*DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) *DescribeLaunchTemplatesResponseBody {
	s.LaunchTemplateSets = v
	return s
}

func (s *DescribeLaunchTemplatesResponseBody) SetPageSize(v int32) *DescribeLaunchTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBody) SetRequestId(v string) *DescribeLaunchTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBody) SetPageNumber(v int32) *DescribeLaunchTemplatesResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeLaunchTemplatesResponseBodyLaunchTemplateSets struct {
	LaunchTemplateName   *string                                                      `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty"`
	DefaultVersionNumber *int64                                                       `json:"DefaultVersionNumber,omitempty" xml:"DefaultVersionNumber,omitempty"`
	ModifiedTime         *string                                                      `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	LaunchTemplateId     *string                                                      `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	CreateTime           *string                                                      `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ResourceGroupId      *string                                                      `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	CreatedBy            *string                                                      `json:"CreatedBy,omitempty" xml:"CreatedBy,omitempty"`
	Tags                 []*DescribeLaunchTemplatesResponseBodyLaunchTemplateSetsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	LatestVersionNumber  *int64                                                       `json:"LatestVersionNumber,omitempty" xml:"LatestVersionNumber,omitempty"`
}

func (s DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) SetLaunchTemplateName(v string) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets {
	s.LaunchTemplateName = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) SetDefaultVersionNumber(v int64) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets {
	s.DefaultVersionNumber = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) SetModifiedTime(v string) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) SetLaunchTemplateId(v string) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets {
	s.LaunchTemplateId = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) SetCreateTime(v string) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets {
	s.CreateTime = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) SetResourceGroupId(v string) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) SetCreatedBy(v string) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets {
	s.CreatedBy = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) SetTags(v []*DescribeLaunchTemplatesResponseBodyLaunchTemplateSetsTags) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets {
	s.Tags = v
	return s
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets) SetLatestVersionNumber(v int64) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSets {
	s.LatestVersionNumber = &v
	return s
}

type DescribeLaunchTemplatesResponseBodyLaunchTemplateSetsTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeLaunchTemplatesResponseBodyLaunchTemplateSetsTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesResponseBodyLaunchTemplateSetsTags) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSetsTags) SetTagValue(v string) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSetsTags {
	s.TagValue = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseBodyLaunchTemplateSetsTags) SetTagKey(v string) *DescribeLaunchTemplatesResponseBodyLaunchTemplateSetsTags {
	s.TagKey = &v
	return s
}

type DescribeLaunchTemplatesResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLaunchTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLaunchTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesResponse) SetHeaders(v map[string]*string) *DescribeLaunchTemplatesResponse {
	s.Headers = v
	return s
}

func (s *DescribeLaunchTemplatesResponse) SetBody(v *DescribeLaunchTemplatesResponseBody) *DescribeLaunchTemplatesResponse {
	s.Body = v
	return s
}

type DescribeLaunchTemplateVersionsRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LaunchTemplateId      *string `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	LaunchTemplateName    *string `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty"`
	MinVersion            *int64  `json:"MinVersion,omitempty" xml:"MinVersion,omitempty"`
	MaxVersion            *int64  `json:"MaxVersion,omitempty" xml:"MaxVersion,omitempty"`
	DefaultVersion        *bool   `json:"DefaultVersion,omitempty" xml:"DefaultVersion,omitempty"`
	DetailFlag            *bool   `json:"DetailFlag,omitempty" xml:"DetailFlag,omitempty"`
	PageNumber            *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	LaunchTemplateVersion []*int  `json:"LaunchTemplateVersion,omitempty" xml:"LaunchTemplateVersion,omitempty" type:"Repeated"`
}

func (s DescribeLaunchTemplateVersionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsRequest) SetOwnerId(v int64) *DescribeLaunchTemplateVersionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetResourceOwnerAccount(v string) *DescribeLaunchTemplateVersionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetResourceOwnerId(v int64) *DescribeLaunchTemplateVersionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetOwnerAccount(v string) *DescribeLaunchTemplateVersionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetRegionId(v string) *DescribeLaunchTemplateVersionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetLaunchTemplateId(v string) *DescribeLaunchTemplateVersionsRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetLaunchTemplateName(v string) *DescribeLaunchTemplateVersionsRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetMinVersion(v int64) *DescribeLaunchTemplateVersionsRequest {
	s.MinVersion = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetMaxVersion(v int64) *DescribeLaunchTemplateVersionsRequest {
	s.MaxVersion = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetDefaultVersion(v bool) *DescribeLaunchTemplateVersionsRequest {
	s.DefaultVersion = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetDetailFlag(v bool) *DescribeLaunchTemplateVersionsRequest {
	s.DetailFlag = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetPageNumber(v int32) *DescribeLaunchTemplateVersionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetPageSize(v int32) *DescribeLaunchTemplateVersionsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetLaunchTemplateVersion(v []*int) *DescribeLaunchTemplateVersionsRequest {
	s.LaunchTemplateVersion = v
	return s
}

type DescribeLaunchTemplateVersionsResponseBody struct {
	TotalCount                *int32                                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize                  *int32                                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                 *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber                *int32                                                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	LaunchTemplateVersionSets []*DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets `json:"LaunchTemplateVersionSets,omitempty" xml:"LaunchTemplateVersionSets,omitempty" type:"Repeated"`
}

func (s DescribeLaunchTemplateVersionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseBody) SetTotalCount(v int32) *DescribeLaunchTemplateVersionsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBody) SetPageSize(v int32) *DescribeLaunchTemplateVersionsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBody) SetRequestId(v string) *DescribeLaunchTemplateVersionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBody) SetPageNumber(v int32) *DescribeLaunchTemplateVersionsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBody) SetLaunchTemplateVersionSets(v []*DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) *DescribeLaunchTemplateVersionsResponseBody {
	s.LaunchTemplateVersionSets = v
	return s
}

type DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets struct {
	LaunchTemplateName *string                                                                                `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty"`
	DefaultVersion     *bool                                                                                  `json:"DefaultVersion,omitempty" xml:"DefaultVersion,omitempty"`
	VersionNumber      *int64                                                                                 `json:"VersionNumber,omitempty" xml:"VersionNumber,omitempty"`
	ModifiedTime       *string                                                                                `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	LaunchTemplateData *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData `json:"LaunchTemplateData,omitempty" xml:"LaunchTemplateData,omitempty" type:"Struct"`
	LaunchTemplateId   *string                                                                                `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	CreateTime         *string                                                                                `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreatedBy          *string                                                                                `json:"CreatedBy,omitempty" xml:"CreatedBy,omitempty"`
	VersionDescription *string                                                                                `json:"VersionDescription,omitempty" xml:"VersionDescription,omitempty"`
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) SetLaunchTemplateName(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets {
	s.LaunchTemplateName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) SetDefaultVersion(v bool) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets {
	s.DefaultVersion = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) SetVersionNumber(v int64) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets {
	s.VersionNumber = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) SetModifiedTime(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) SetLaunchTemplateData(v *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets {
	s.LaunchTemplateData = v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) SetLaunchTemplateId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets {
	s.LaunchTemplateId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) SetCreateTime(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets {
	s.CreateTime = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) SetCreatedBy(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets {
	s.CreatedBy = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets) SetVersionDescription(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSets {
	s.VersionDescription = &v
	return s
}

type DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData struct {
	SystemDisk                  *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk          `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" require:"true" type:"Struct"`
	VpcId                       *string                                                                                                   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	KeyPairName                 *string                                                                                                   `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	SecurityGroupId             *string                                                                                                   `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	Tags                        []*DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataTags              `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	NetworkType                 *string                                                                                                   `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	DataDisks                   []*DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks         `json:"DataDisks,omitempty" xml:"DataDisks,omitempty" type:"Repeated"`
	SpotStrategy                *string                                                                                                   `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	EnableVmOsConfig            *bool                                                                                                     `json:"EnableVmOsConfig,omitempty" xml:"EnableVmOsConfig,omitempty"`
	Description                 *string                                                                                                   `json:"Description,omitempty" xml:"Description,omitempty"`
	SpotDuration                *int32                                                                                                    `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	InstanceName                *string                                                                                                   `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	UserData                    *string                                                                                                   `json:"UserData,omitempty" xml:"UserData,omitempty"`
	SecurityEnhancementStrategy *string                                                                                                   `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
	PasswordInherit             *bool                                                                                                     `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	SpotPriceLimit              *float32                                                                                                  `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty"`
	ImageId                     *string                                                                                                   `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	AutoReleaseTime             *string                                                                                                   `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	ImageOwnerAlias             *string                                                                                                   `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	HostName                    *string                                                                                                   `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InternetMaxBandwidthOut     *int32                                                                                                    `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	InternetMaxBandwidthIn      *int32                                                                                                    `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InstanceType                *string                                                                                                   `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Period                      *int32                                                                                                    `json:"Period,omitempty" xml:"Period,omitempty"`
	InstanceChargeType          *string                                                                                                   `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	IoOptimized                 *string                                                                                                   `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	RamRoleName                 *string                                                                                                   `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	VSwitchId                   *string                                                                                                   `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ResourceGroupId             *string                                                                                                   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	InternetChargeType          *string                                                                                                   `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	ZoneId                      *string                                                                                                   `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	NetworkInterfaces           []*DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces `json:"NetworkInterfaces,omitempty" xml:"NetworkInterfaces,omitempty" type:"Repeated"`
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetSystemDisk(v *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.SystemDisk = v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetVpcId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.VpcId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetKeyPairName(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.KeyPairName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetSecurityGroupId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetTags(v []*DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataTags) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.Tags = v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetNetworkType(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.NetworkType = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetDataDisks(v []*DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.DataDisks = v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetSpotStrategy(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetEnableVmOsConfig(v bool) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.EnableVmOsConfig = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetDescription(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.Description = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetSpotDuration(v int32) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.SpotDuration = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetInstanceName(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.InstanceName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetUserData(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.UserData = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetSecurityEnhancementStrategy(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetPasswordInherit(v bool) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.PasswordInherit = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetSpotPriceLimit(v float32) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.SpotPriceLimit = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetImageId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.ImageId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetAutoReleaseTime(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.AutoReleaseTime = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetImageOwnerAlias(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetHostName(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.HostName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetInternetMaxBandwidthOut(v int32) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetInternetMaxBandwidthIn(v int32) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetInstanceType(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.InstanceType = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetPeriod(v int32) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.Period = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetInstanceChargeType(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetIoOptimized(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.IoOptimized = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetRamRoleName(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.RamRoleName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetVSwitchId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.VSwitchId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetResourceGroupId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetInternetChargeType(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetZoneId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.ZoneId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData) SetNetworkInterfaces(v []*DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateData {
	s.NetworkInterfaces = v
	return s
}

type DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk struct {
	Size        *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	DiskName    *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Iops        *int32  `json:"Iops,omitempty" xml:"Iops,omitempty"`
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk) SetSize(v int32) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk {
	s.Size = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk) SetDiskName(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk) SetCategory(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk {
	s.Category = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk) SetDescription(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk {
	s.Description = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk) SetIops(v int32) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataSystemDisk {
	s.Iops = &v
	return s
}

type DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataTags) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataTags) SetKey(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataTags {
	s.Key = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataTags) SetValue(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataTags {
	s.Value = &v
	return s
}

type DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks struct {
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SnapshotId         *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	Device             *string `json:"Device,omitempty" xml:"Device,omitempty"`
	Size               *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	DiskName           *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Category           *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	Encrypted          *string `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) SetDescription(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks {
	s.Description = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) SetSnapshotId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks {
	s.SnapshotId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) SetDevice(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks {
	s.Device = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) SetSize(v int32) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks {
	s.Size = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) SetDiskName(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks {
	s.DiskName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) SetCategory(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks {
	s.Category = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) SetDeleteWithInstance(v bool) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks {
	s.DeleteWithInstance = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks) SetEncrypted(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataDataDisks {
	s.Encrypted = &v
	return s
}

type DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces struct {
	NetworkInterfaceName *string `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	PrimaryIpAddress     *string `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces) SetNetworkInterfaceName(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces) SetVSwitchId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces {
	s.VSwitchId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces) SetDescription(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces {
	s.Description = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces) SetSecurityGroupId(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces) SetPrimaryIpAddress(v string) *DescribeLaunchTemplateVersionsResponseBodyLaunchTemplateVersionSetsLaunchTemplateDataNetworkInterfaces {
	s.PrimaryIpAddress = &v
	return s
}

type DescribeLaunchTemplateVersionsResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLaunchTemplateVersionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLaunchTemplateVersionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponse) SetHeaders(v map[string]*string) *DescribeLaunchTemplateVersionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponse) SetBody(v *DescribeLaunchTemplateVersionsResponseBody) *DescribeLaunchTemplateVersionsResponse {
	s.Body = v
	return s
}

type DescribeLimitationRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Limitation           *string `json:"Limitation,omitempty" xml:"Limitation,omitempty"`
}

func (s DescribeLimitationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLimitationRequest) GoString() string {
	return s.String()
}

func (s *DescribeLimitationRequest) SetOwnerId(v int64) *DescribeLimitationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLimitationRequest) SetResourceOwnerAccount(v string) *DescribeLimitationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLimitationRequest) SetResourceOwnerId(v int64) *DescribeLimitationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLimitationRequest) SetOwnerAccount(v string) *DescribeLimitationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeLimitationRequest) SetLimitation(v string) *DescribeLimitationRequest {
	s.Limitation = &v
	return s
}

type DescribeLimitationResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Limitation *string `json:"Limitation,omitempty" xml:"Limitation,omitempty"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLimitationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLimitationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLimitationResponseBody) SetRequestId(v string) *DescribeLimitationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLimitationResponseBody) SetLimitation(v string) *DescribeLimitationResponseBody {
	s.Limitation = &v
	return s
}

func (s *DescribeLimitationResponseBody) SetValue(v string) *DescribeLimitationResponseBody {
	s.Value = &v
	return s
}

type DescribeLimitationResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLimitationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLimitationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLimitationResponse) GoString() string {
	return s.String()
}

func (s *DescribeLimitationResponse) SetHeaders(v map[string]*string) *DescribeLimitationResponse {
	s.Headers = v
	return s
}

func (s *DescribeLimitationResponse) SetBody(v *DescribeLimitationResponseBody) *DescribeLimitationResponse {
	s.Body = v
	return s
}

type DescribeNatGatewaysRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NatGatewayId         *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeNatGatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysRequest) SetOwnerId(v int64) *DescribeNatGatewaysRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetResourceOwnerAccount(v string) *DescribeNatGatewaysRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetResourceOwnerId(v int64) *DescribeNatGatewaysRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetOwnerAccount(v string) *DescribeNatGatewaysRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetRegionId(v string) *DescribeNatGatewaysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetNatGatewayId(v string) *DescribeNatGatewaysRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetVpcId(v string) *DescribeNatGatewaysRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageNumber(v int32) *DescribeNatGatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageSize(v int32) *DescribeNatGatewaysRequest {
	s.PageSize = &v
	return s
}

type DescribeNatGatewaysResponseBody struct {
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	NatGateways []*DescribeNatGatewaysResponseBodyNatGateways `json:"NatGateways,omitempty" xml:"NatGateways,omitempty" type:"Repeated"`
}

func (s DescribeNatGatewaysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseBody) SetTotalCount(v int32) *DescribeNatGatewaysResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetPageSize(v int32) *DescribeNatGatewaysResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetRequestId(v string) *DescribeNatGatewaysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetPageNumber(v int32) *DescribeNatGatewaysResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetNatGateways(v []*DescribeNatGatewaysResponseBodyNatGateways) *DescribeNatGatewaysResponseBody {
	s.NatGateways = v
	return s
}

type DescribeNatGatewaysResponseBodyNatGateways struct {
	Status              *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	CreationTime        *string   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	VpcId               *string   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	BandwidthPackageIds []*string `json:"BandwidthPackageIds,omitempty" xml:"BandwidthPackageIds,omitempty" type:"Repeated"`
	Spec                *string   `json:"Spec,omitempty" xml:"Spec,omitempty"`
	InstanceChargeType  *string   `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	RegionId            *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Description         *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	NatGatewayId        *string   `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	ForwardTableIds     []*string `json:"ForwardTableIds,omitempty" xml:"ForwardTableIds,omitempty" type:"Repeated"`
	BusinessStatus      *string   `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	Name                *string   `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeNatGatewaysResponseBodyNatGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseBodyNatGateways) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetStatus(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.Status = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetCreationTime(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.CreationTime = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetVpcId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.VpcId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetBandwidthPackageIds(v []*string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.BandwidthPackageIds = v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetSpec(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.Spec = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetInstanceChargeType(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetRegionId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.RegionId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetDescription(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.Description = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetNatGatewayId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetForwardTableIds(v []*string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.ForwardTableIds = v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetBusinessStatus(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetName(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.Name = &v
	return s
}

type DescribeNatGatewaysResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeNatGatewaysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNatGatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponse) SetHeaders(v map[string]*string) *DescribeNatGatewaysResponse {
	s.Headers = v
	return s
}

func (s *DescribeNatGatewaysResponse) SetBody(v *DescribeNatGatewaysResponseBody) *DescribeNatGatewaysResponse {
	s.Body = v
	return s
}

type DescribeNetworkInterfaceAttributeRequest struct {
	OwnerId              *int64                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Tag                  []*DescribeNetworkInterfaceAttributeRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	NetworkInterfaceId   *string                                        `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	Attribute            *string                                        `json:"Attribute,omitempty" xml:"Attribute,omitempty"`
}

func (s DescribeNetworkInterfaceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetOwnerId(v int64) *DescribeNetworkInterfaceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetResourceOwnerAccount(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetResourceOwnerId(v int64) *DescribeNetworkInterfaceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetOwnerAccount(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetRegionId(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetTag(v []*DescribeNetworkInterfaceAttributeRequestTag) *DescribeNetworkInterfaceAttributeRequest {
	s.Tag = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetNetworkInterfaceId(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetAttribute(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.Attribute = &v
	return s
}

type DescribeNetworkInterfaceAttributeRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeNetworkInterfaceAttributeRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeRequestTag) SetKey(v string) *DescribeNetworkInterfaceAttributeRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequestTag) SetValue(v string) *DescribeNetworkInterfaceAttributeRequestTag {
	s.Value = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseBody struct {
	Status               *string                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	Description          *string                                                          `json:"Description,omitempty" xml:"Description,omitempty"`
	PrivateIpAddress     *string                                                          `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	ServiceManaged       *bool                                                            `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	RequestId            *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceGroupId      *string                                                          `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId               *string                                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceId           *string                                                          `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	VSwitchId            *string                                                          `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NetworkInterfaceName *string                                                          `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	Attachment           *DescribeNetworkInterfaceAttributeResponseBodyAttachment         `json:"Attachment,omitempty" xml:"Attachment,omitempty" type:"Struct"`
	MacAddress           *string                                                          `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	NetworkInterfaceId   *string                                                          `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	SecurityGroupIds     []*string                                                        `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	ServiceID            *int64                                                           `json:"ServiceID,omitempty" xml:"ServiceID,omitempty"`
	Type                 *string                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
	QueueNumber          *int32                                                           `json:"QueueNumber,omitempty" xml:"QueueNumber,omitempty"`
	Ipv6Sets             []*DescribeNetworkInterfaceAttributeResponseBodyIpv6Sets         `json:"Ipv6Sets,omitempty" xml:"Ipv6Sets,omitempty" type:"Repeated"`
	VpcId                *string                                                          `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	OwnerId              *string                                                          `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AssociatedPublicIp   *DescribeNetworkInterfaceAttributeResponseBodyAssociatedPublicIp `json:"AssociatedPublicIp,omitempty" xml:"AssociatedPublicIp,omitempty" type:"Struct"`
	CreationTime         *string                                                          `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Tags                 []*DescribeNetworkInterfaceAttributeResponseBodyTags             `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	PrivateIpSets        []*DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets    `json:"PrivateIpSets,omitempty" xml:"PrivateIpSets,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfaceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetStatus(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetDescription(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetPrivateIpAddress(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetServiceManaged(v bool) *DescribeNetworkInterfaceAttributeResponseBody {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetRequestId(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetResourceGroupId(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetZoneId(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.ZoneId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetInstanceId(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetVSwitchId(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.VSwitchId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetNetworkInterfaceName(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetAttachment(v *DescribeNetworkInterfaceAttributeResponseBodyAttachment) *DescribeNetworkInterfaceAttributeResponseBody {
	s.Attachment = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetMacAddress(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.MacAddress = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetNetworkInterfaceId(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetSecurityGroupIds(v []*string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetServiceID(v int64) *DescribeNetworkInterfaceAttributeResponseBody {
	s.ServiceID = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetType(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetQueueNumber(v int32) *DescribeNetworkInterfaceAttributeResponseBody {
	s.QueueNumber = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetIpv6Sets(v []*DescribeNetworkInterfaceAttributeResponseBodyIpv6Sets) *DescribeNetworkInterfaceAttributeResponseBody {
	s.Ipv6Sets = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetVpcId(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.VpcId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetOwnerId(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetAssociatedPublicIp(v *DescribeNetworkInterfaceAttributeResponseBodyAssociatedPublicIp) *DescribeNetworkInterfaceAttributeResponseBody {
	s.AssociatedPublicIp = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetCreationTime(v string) *DescribeNetworkInterfaceAttributeResponseBody {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetTags(v []*DescribeNetworkInterfaceAttributeResponseBodyTags) *DescribeNetworkInterfaceAttributeResponseBody {
	s.Tags = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBody) SetPrivateIpSets(v []*DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets) *DescribeNetworkInterfaceAttributeResponseBody {
	s.PrivateIpSets = v
	return s
}

type DescribeNetworkInterfaceAttributeResponseBodyAttachment struct {
	DeviceIndex               *int32    `json:"DeviceIndex,omitempty" xml:"DeviceIndex,omitempty"`
	InstanceId                *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MemberNetworkInterfaceIds []*string `json:"MemberNetworkInterfaceIds,omitempty" xml:"MemberNetworkInterfaceIds,omitempty" type:"Repeated"`
	TrunkNetworkInterfaceId   *string   `json:"TrunkNetworkInterfaceId,omitempty" xml:"TrunkNetworkInterfaceId,omitempty"`
}

func (s DescribeNetworkInterfaceAttributeResponseBodyAttachment) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseBodyAttachment) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyAttachment) SetDeviceIndex(v int32) *DescribeNetworkInterfaceAttributeResponseBodyAttachment {
	s.DeviceIndex = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyAttachment) SetInstanceId(v string) *DescribeNetworkInterfaceAttributeResponseBodyAttachment {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyAttachment) SetMemberNetworkInterfaceIds(v []*string) *DescribeNetworkInterfaceAttributeResponseBodyAttachment {
	s.MemberNetworkInterfaceIds = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyAttachment) SetTrunkNetworkInterfaceId(v string) *DescribeNetworkInterfaceAttributeResponseBodyAttachment {
	s.TrunkNetworkInterfaceId = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseBodyIpv6Sets struct {
	Ipv6Address *string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty"`
}

func (s DescribeNetworkInterfaceAttributeResponseBodyIpv6Sets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseBodyIpv6Sets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyIpv6Sets) SetIpv6Address(v string) *DescribeNetworkInterfaceAttributeResponseBodyIpv6Sets {
	s.Ipv6Address = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseBodyAssociatedPublicIp struct {
	AllocationId    *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	PublicIpAddress *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
}

func (s DescribeNetworkInterfaceAttributeResponseBodyAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseBodyAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyAssociatedPublicIp) SetAllocationId(v string) *DescribeNetworkInterfaceAttributeResponseBodyAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyAssociatedPublicIp) SetPublicIpAddress(v string) *DescribeNetworkInterfaceAttributeResponseBodyAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseBodyTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeNetworkInterfaceAttributeResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseBodyTags) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyTags) SetTagValue(v string) *DescribeNetworkInterfaceAttributeResponseBodyTags {
	s.TagValue = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyTags) SetTagKey(v string) *DescribeNetworkInterfaceAttributeResponseBodyTags {
	s.TagKey = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets struct {
	AssociatedPublicIp *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSetsAssociatedPublicIp `json:"AssociatedPublicIp,omitempty" xml:"AssociatedPublicIp,omitempty" type:"Struct"`
	Primary            *bool                                                                         `json:"Primary,omitempty" xml:"Primary,omitempty"`
	PrivateIpAddress   *string                                                                       `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets) SetAssociatedPublicIp(v *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSetsAssociatedPublicIp) *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets {
	s.AssociatedPublicIp = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets) SetPrimary(v bool) *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets {
	s.Primary = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets) SetPrivateIpAddress(v string) *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSets {
	s.PrivateIpAddress = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSetsAssociatedPublicIp struct {
	AllocationId    *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	PublicIpAddress *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
}

func (s DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSetsAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSetsAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSetsAssociatedPublicIp) SetAllocationId(v string) *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSetsAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSetsAssociatedPublicIp) SetPublicIpAddress(v string) *DescribeNetworkInterfaceAttributeResponseBodyPrivateIpSetsAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeNetworkInterfaceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworkInterfaceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetHeaders(v map[string]*string) *DescribeNetworkInterfaceAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetBody(v *DescribeNetworkInterfaceAttributeResponseBody) *DescribeNetworkInterfaceAttributeResponse {
	s.Body = v
	return s
}

type DescribeNetworkInterfacePermissionsRequest struct {
	OwnerId                      *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount         *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId              *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                 *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfaceId           *string   `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	PageNumber                   *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                     *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	NetworkInterfacePermissionId []*string `json:"NetworkInterfacePermissionId,omitempty" xml:"NetworkInterfacePermissionId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacePermissionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacePermissionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetOwnerId(v int64) *DescribeNetworkInterfacePermissionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetResourceOwnerAccount(v string) *DescribeNetworkInterfacePermissionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetResourceOwnerId(v int64) *DescribeNetworkInterfacePermissionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetOwnerAccount(v string) *DescribeNetworkInterfacePermissionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetRegionId(v string) *DescribeNetworkInterfacePermissionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetNetworkInterfaceId(v string) *DescribeNetworkInterfacePermissionsRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetPageNumber(v int32) *DescribeNetworkInterfacePermissionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetPageSize(v int32) *DescribeNetworkInterfacePermissionsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetNetworkInterfacePermissionId(v []*string) *DescribeNetworkInterfacePermissionsRequest {
	s.NetworkInterfacePermissionId = v
	return s
}

type DescribeNetworkInterfacePermissionsResponseBody struct {
	TotalCount                  *int32                                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize                    *int32                                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                   *string                                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber                  *int32                                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	NetworkInterfacePermissions []*DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions `json:"NetworkInterfacePermissions,omitempty" xml:"NetworkInterfacePermissions,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacePermissionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacePermissionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacePermissionsResponseBody) SetTotalCount(v int32) *DescribeNetworkInterfacePermissionsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseBody) SetPageSize(v int32) *DescribeNetworkInterfacePermissionsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseBody) SetRequestId(v string) *DescribeNetworkInterfacePermissionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseBody) SetPageNumber(v int32) *DescribeNetworkInterfacePermissionsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseBody) SetNetworkInterfacePermissions(v []*DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions) *DescribeNetworkInterfacePermissionsResponseBody {
	s.NetworkInterfacePermissions = v
	return s
}

type DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions struct {
	Permission                   *string `json:"Permission,omitempty" xml:"Permission,omitempty"`
	NetworkInterfaceId           *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	AccountId                    *int64  `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	NetworkInterfacePermissionId *string `json:"NetworkInterfacePermissionId,omitempty" xml:"NetworkInterfacePermissionId,omitempty"`
	ServiceName                  *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	PermissionState              *string `json:"PermissionState,omitempty" xml:"PermissionState,omitempty"`
}

func (s DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions) SetPermission(v string) *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions {
	s.Permission = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions) SetNetworkInterfaceId(v string) *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions) SetAccountId(v int64) *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions {
	s.AccountId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions) SetNetworkInterfacePermissionId(v string) *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions {
	s.NetworkInterfacePermissionId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions) SetServiceName(v string) *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions {
	s.ServiceName = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions) SetPermissionState(v string) *DescribeNetworkInterfacePermissionsResponseBodyNetworkInterfacePermissions {
	s.PermissionState = &v
	return s
}

type DescribeNetworkInterfacePermissionsResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeNetworkInterfacePermissionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworkInterfacePermissionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacePermissionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacePermissionsResponse) SetHeaders(v map[string]*string) *DescribeNetworkInterfacePermissionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponse) SetBody(v *DescribeNetworkInterfacePermissionsResponseBody) *DescribeNetworkInterfacePermissionsResponse {
	s.Body = v
	return s
}

type DescribeNetworkInterfacesRequest struct {
	OwnerId              *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId      *string                                `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                  []*DescribeNetworkInterfacesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	VSwitchId            *string                                `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId                *string                                `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	PrimaryIpAddress     *string                                `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
	SecurityGroupId      *string                                `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	NetworkInterfaceName *string                                `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	Type                 *string                                `json:"Type,omitempty" xml:"Type,omitempty"`
	InstanceId           *string                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ServiceManaged       *bool                                  `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	Status               *string                                `json:"Status,omitempty" xml:"Status,omitempty"`
	PageNumber           *int32                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	NextToken            *string                                `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	MaxResults           *int32                                 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	PrivateIpAddress     []*string                              `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
	NetworkInterfaceId   []*string                              `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesRequest) SetOwnerId(v int64) *DescribeNetworkInterfacesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetResourceOwnerAccount(v string) *DescribeNetworkInterfacesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetResourceOwnerId(v int64) *DescribeNetworkInterfacesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetOwnerAccount(v string) *DescribeNetworkInterfacesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetRegionId(v string) *DescribeNetworkInterfacesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetResourceGroupId(v string) *DescribeNetworkInterfacesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetTag(v []*DescribeNetworkInterfacesRequestTag) *DescribeNetworkInterfacesRequest {
	s.Tag = v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetVSwitchId(v string) *DescribeNetworkInterfacesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetVpcId(v string) *DescribeNetworkInterfacesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPrimaryIpAddress(v string) *DescribeNetworkInterfacesRequest {
	s.PrimaryIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetSecurityGroupId(v string) *DescribeNetworkInterfacesRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNetworkInterfaceName(v string) *DescribeNetworkInterfacesRequest {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetType(v string) *DescribeNetworkInterfacesRequest {
	s.Type = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetInstanceId(v string) *DescribeNetworkInterfacesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetServiceManaged(v bool) *DescribeNetworkInterfacesRequest {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetStatus(v string) *DescribeNetworkInterfacesRequest {
	s.Status = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPageNumber(v int32) *DescribeNetworkInterfacesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPageSize(v int32) *DescribeNetworkInterfacesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNextToken(v string) *DescribeNetworkInterfacesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetMaxResults(v int32) *DescribeNetworkInterfacesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPrivateIpAddress(v []*string) *DescribeNetworkInterfacesRequest {
	s.PrivateIpAddress = v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNetworkInterfaceId(v []*string) *DescribeNetworkInterfacesRequest {
	s.NetworkInterfaceId = v
	return s
}

type DescribeNetworkInterfacesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeNetworkInterfacesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesRequestTag) SetKey(v string) *DescribeNetworkInterfacesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeNetworkInterfacesRequestTag) SetValue(v string) *DescribeNetworkInterfacesRequestTag {
	s.Value = &v
	return s
}

type DescribeNetworkInterfacesResponseBody struct {
	TotalCount           *int32                                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken            *string                                                      `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize             *int32                                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber           *int32                                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	NetworkInterfaceSets []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets `json:"NetworkInterfaceSets,omitempty" xml:"NetworkInterfaceSets,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBody) SetTotalCount(v int32) *DescribeNetworkInterfacesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetNextToken(v string) *DescribeNetworkInterfacesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetPageSize(v int32) *DescribeNetworkInterfacesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetRequestId(v string) *DescribeNetworkInterfacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetPageNumber(v int32) *DescribeNetworkInterfacesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetNetworkInterfaceSets(v []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) *DescribeNetworkInterfacesResponseBody {
	s.NetworkInterfaceSets = v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets struct {
	Status               *string                                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                 *string                                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
	VpcId                *string                                                                      `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	CreationTime         *string                                                                      `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	NetworkInterfaceName *string                                                                      `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	MacAddress           *string                                                                      `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	NetworkInterfaceId   *string                                                                      `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	Tags                 []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsTags             `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	Attachment           *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment         `json:"Attachment,omitempty" xml:"Attachment,omitempty" type:"Struct"`
	ServiceID            *int64                                                                       `json:"ServiceID,omitempty" xml:"ServiceID,omitempty"`
	Ipv6Sets             []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsIpv6Sets         `json:"Ipv6Sets,omitempty" xml:"Ipv6Sets,omitempty" type:"Repeated"`
	InstanceId           *string                                                                      `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId              *string                                                                      `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityGroupIds     []*string                                                                    `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	ServiceManaged       *bool                                                                        `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	VSwitchId            *string                                                                      `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Description          *string                                                                      `json:"Description,omitempty" xml:"Description,omitempty"`
	ResourceGroupId      *string                                                                      `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	AssociatedPublicIp   *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAssociatedPublicIp `json:"AssociatedPublicIp,omitempty" xml:"AssociatedPublicIp,omitempty" type:"Struct"`
	ZoneId               *string                                                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	PrivateIpAddress     *string                                                                      `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	QueueNumber          *int32                                                                       `json:"QueueNumber,omitempty" xml:"QueueNumber,omitempty"`
	PrivateIpSets        []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets    `json:"PrivateIpSets,omitempty" xml:"PrivateIpSets,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetStatus(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.Status = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetType(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.Type = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetVpcId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.VpcId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetCreationTime(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetNetworkInterfaceName(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetMacAddress(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.MacAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetNetworkInterfaceId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetTags(v []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsTags) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.Tags = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetAttachment(v *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.Attachment = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetServiceID(v int64) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.ServiceID = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetIpv6Sets(v []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsIpv6Sets) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.Ipv6Sets = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetInstanceId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetOwnerId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetSecurityGroupIds(v []*string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetServiceManaged(v bool) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetVSwitchId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.VSwitchId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetDescription(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.Description = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetResourceGroupId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetAssociatedPublicIp(v *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAssociatedPublicIp) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.AssociatedPublicIp = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetZoneId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.ZoneId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetPrivateIpAddress(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetQueueNumber(v int32) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.QueueNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetPrivateIpSets(v []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.PrivateIpSets = v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsTags) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsTags) SetTagValue(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsTags {
	s.TagValue = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsTags) SetTagKey(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsTags {
	s.TagKey = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment struct {
	DeviceIndex             *int32  `json:"DeviceIndex,omitempty" xml:"DeviceIndex,omitempty"`
	InstanceId              *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TrunkNetworkInterfaceId *string `json:"TrunkNetworkInterfaceId,omitempty" xml:"TrunkNetworkInterfaceId,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment) SetDeviceIndex(v int32) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment {
	s.DeviceIndex = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment) SetInstanceId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment) SetTrunkNetworkInterfaceId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAttachment {
	s.TrunkNetworkInterfaceId = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsIpv6Sets struct {
	Ipv6Address *string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsIpv6Sets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsIpv6Sets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsIpv6Sets) SetIpv6Address(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsIpv6Sets {
	s.Ipv6Address = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAssociatedPublicIp struct {
	AllocationId    *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	PublicIpAddress *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAssociatedPublicIp) SetAllocationId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAssociatedPublicIp) SetPublicIpAddress(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets struct {
	AssociatedPublicIp *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSetsAssociatedPublicIp `json:"AssociatedPublicIp,omitempty" xml:"AssociatedPublicIp,omitempty" type:"Struct"`
	Primary            *bool                                                                                     `json:"Primary,omitempty" xml:"Primary,omitempty"`
	PrivateIpAddress   *string                                                                                   `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets) SetAssociatedPublicIp(v *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSetsAssociatedPublicIp) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets {
	s.AssociatedPublicIp = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets) SetPrimary(v bool) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets {
	s.Primary = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets) SetPrivateIpAddress(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSets {
	s.PrivateIpAddress = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSetsAssociatedPublicIp struct {
	AllocationId    *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	PublicIpAddress *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSetsAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSetsAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSetsAssociatedPublicIp) SetAllocationId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSetsAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSetsAssociatedPublicIp) SetPublicIpAddress(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsPrivateIpSetsAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

type DescribeNetworkInterfacesResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeNetworkInterfacesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworkInterfacesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponse) SetHeaders(v map[string]*string) *DescribeNetworkInterfacesResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetBody(v *DescribeNetworkInterfacesResponseBody) *DescribeNetworkInterfacesResponse {
	s.Body = v
	return s
}

type DescribeNewProjectEipMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId         *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeNewProjectEipMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetOwnerId(v int64) *DescribeNewProjectEipMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeNewProjectEipMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetRegionId(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetAllocationId(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetStartTime(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetEndTime(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetPeriod(v int32) *DescribeNewProjectEipMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetOwnerAccount(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeNewProjectEipMonitorDataResponseBody struct {
	RequestId       *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	EipMonitorDatas []*DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas `json:"EipMonitorDatas,omitempty" xml:"EipMonitorDatas,omitempty" type:"Repeated"`
}

func (s DescribeNewProjectEipMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataResponseBody) SetRequestId(v string) *DescribeNewProjectEipMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseBody) SetEipMonitorDatas(v []*DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas) *DescribeNewProjectEipMonitorDataResponseBody {
	s.EipMonitorDatas = v
	return s
}

type DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas struct {
	EipTX        *int32  `json:"EipTX,omitempty" xml:"EipTX,omitempty"`
	EipPackets   *int32  `json:"EipPackets,omitempty" xml:"EipPackets,omitempty"`
	EipBandwidth *int32  `json:"EipBandwidth,omitempty" xml:"EipBandwidth,omitempty"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	EipFlow      *int32  `json:"EipFlow,omitempty" xml:"EipFlow,omitempty"`
	EipRX        *int32  `json:"EipRX,omitempty" xml:"EipRX,omitempty"`
}

func (s DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas) SetEipTX(v int32) *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipTX = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas) SetEipPackets(v int32) *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipPackets = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas) SetEipBandwidth(v int32) *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipBandwidth = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas) SetTimeStamp(v string) *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas {
	s.TimeStamp = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas) SetEipFlow(v int32) *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipFlow = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas) SetEipRX(v int32) *DescribeNewProjectEipMonitorDataResponseBodyEipMonitorDatas {
	s.EipRX = &v
	return s
}

type DescribeNewProjectEipMonitorDataResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeNewProjectEipMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNewProjectEipMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeNewProjectEipMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponse) SetBody(v *DescribeNewProjectEipMonitorDataResponseBody) *DescribeNewProjectEipMonitorDataResponse {
	s.Body = v
	return s
}

type DescribePhysicalConnectionsRequest struct {
	RegionId             *string                                     `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber           *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerId              *int64                                      `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                     `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                      `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string                                     `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string                                     `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string                                     `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
	Filter               []*DescribePhysicalConnectionsRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribePhysicalConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsRequest) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsRequest) SetRegionId(v string) *DescribePhysicalConnectionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetPageNumber(v int32) *DescribePhysicalConnectionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetPageSize(v int32) *DescribePhysicalConnectionsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetOwnerId(v int64) *DescribePhysicalConnectionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetResourceOwnerAccount(v string) *DescribePhysicalConnectionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetResourceOwnerId(v int64) *DescribePhysicalConnectionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetClientToken(v string) *DescribePhysicalConnectionsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetOwnerAccount(v string) *DescribePhysicalConnectionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetUserCidr(v string) *DescribePhysicalConnectionsRequest {
	s.UserCidr = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetFilter(v []*DescribePhysicalConnectionsRequestFilter) *DescribePhysicalConnectionsRequest {
	s.Filter = v
	return s
}

type DescribePhysicalConnectionsRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribePhysicalConnectionsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsRequestFilter) SetKey(v string) *DescribePhysicalConnectionsRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribePhysicalConnectionsRequestFilter) SetValue(v []*string) *DescribePhysicalConnectionsRequestFilter {
	s.Value = v
	return s
}

type DescribePhysicalConnectionsResponseBody struct {
	PhysicalConnectionSet []*DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet `json:"PhysicalConnectionSet,omitempty" xml:"PhysicalConnectionSet,omitempty" type:"Repeated"`
	TotalCount            *int32                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId             *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize              *int32                                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber            *int32                                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribePhysicalConnectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsResponseBody) SetPhysicalConnectionSet(v []*DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) *DescribePhysicalConnectionsResponseBody {
	s.PhysicalConnectionSet = v
	return s
}

func (s *DescribePhysicalConnectionsResponseBody) SetTotalCount(v int32) *DescribePhysicalConnectionsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBody) SetRequestId(v string) *DescribePhysicalConnectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBody) SetPageSize(v int32) *DescribePhysicalConnectionsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBody) SetPageNumber(v int32) *DescribePhysicalConnectionsResponseBody {
	s.PageNumber = &v
	return s
}

type DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet struct {
	Type                          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Status                        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	CreationTime                  *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	AdLocation                    *string `json:"AdLocation,omitempty" xml:"AdLocation,omitempty"`
	PortNumber                    *string `json:"PortNumber,omitempty" xml:"PortNumber,omitempty"`
	Spec                          *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	CircuitCode                   *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	Description                   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Bandwidth                     *int64  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	PortType                      *string `json:"PortType,omitempty" xml:"PortType,omitempty"`
	BusinessStatus                *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	EnabledTime                   *string `json:"EnabledTime,omitempty" xml:"EnabledTime,omitempty"`
	LineOperator                  *string `json:"LineOperator,omitempty" xml:"LineOperator,omitempty"`
	Name                          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RedundantPhysicalConnectionId *string `json:"RedundantPhysicalConnectionId,omitempty" xml:"RedundantPhysicalConnectionId,omitempty"`
	PeerLocation                  *string `json:"PeerLocation,omitempty" xml:"PeerLocation,omitempty"`
	AccessPointId                 *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	PhysicalConnectionId          *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty"`
}

func (s DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetType(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.Type = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetStatus(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.Status = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetCreationTime(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.CreationTime = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetAdLocation(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.AdLocation = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetPortNumber(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.PortNumber = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetSpec(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.Spec = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetCircuitCode(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.CircuitCode = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetDescription(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.Description = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetBandwidth(v int64) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.Bandwidth = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetPortType(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.PortType = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetBusinessStatus(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.BusinessStatus = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetEnabledTime(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.EnabledTime = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetLineOperator(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.LineOperator = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetName(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.Name = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetRedundantPhysicalConnectionId(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.RedundantPhysicalConnectionId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetPeerLocation(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.PeerLocation = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetAccessPointId(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.AccessPointId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet) SetPhysicalConnectionId(v string) *DescribePhysicalConnectionsResponseBodyPhysicalConnectionSet {
	s.PhysicalConnectionId = &v
	return s
}

type DescribePhysicalConnectionsResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribePhysicalConnectionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePhysicalConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsResponse) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsResponse) SetHeaders(v map[string]*string) *DescribePhysicalConnectionsResponse {
	s.Headers = v
	return s
}

func (s *DescribePhysicalConnectionsResponse) SetBody(v *DescribePhysicalConnectionsResponseBody) *DescribePhysicalConnectionsResponse {
	s.Body = v
	return s
}

type DescribePriceRequest struct {
	SystemDisk              *DescribePriceRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	DataDisk                []*DescribePriceRequestDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	OwnerId                 *int64                          `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	OwnerAccount            *string                         `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceOwnerAccount    *string                         `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64                          `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                *string                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType            *string                         `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ImageId                 *string                         `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceType            *string                         `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	IoOptimized             *string                         `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	InstanceNetworkType     *string                         `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	InternetChargeType      *string                         `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InternetMaxBandwidthOut *int32                          `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	Period                  *int32                          `json:"Period,omitempty" xml:"Period,omitempty"`
	PriceUnit               *string                         `json:"PriceUnit,omitempty" xml:"PriceUnit,omitempty"`
	Amount                  *int32                          `json:"Amount,omitempty" xml:"Amount,omitempty"`
	OfferingType            *string                         `json:"OfferingType,omitempty" xml:"OfferingType,omitempty"`
	InstanceAmount          *int32                          `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	Scope                   *string                         `json:"Scope,omitempty" xml:"Scope,omitempty"`
	Platform                *string                         `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Capacity                *int32                          `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	AssuranceTimes          *string                         `json:"AssuranceTimes,omitempty" xml:"AssuranceTimes,omitempty"`
	InstanceCpuCoreCount    *int32                          `json:"InstanceCpuCoreCount,omitempty" xml:"InstanceCpuCoreCount,omitempty"`
	Isp                     *string                         `json:"Isp,omitempty" xml:"Isp,omitempty"`
	InstanceTypeList        []*string                       `json:"InstanceTypeList,omitempty" xml:"InstanceTypeList,omitempty" type:"Repeated"`
}

func (s DescribePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceRequest) SetSystemDisk(v *DescribePriceRequestSystemDisk) *DescribePriceRequest {
	s.SystemDisk = v
	return s
}

func (s *DescribePriceRequest) SetDataDisk(v []*DescribePriceRequestDataDisk) *DescribePriceRequest {
	s.DataDisk = v
	return s
}

func (s *DescribePriceRequest) SetOwnerId(v int64) *DescribePriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePriceRequest) SetOwnerAccount(v string) *DescribePriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribePriceRequest) SetResourceOwnerAccount(v string) *DescribePriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribePriceRequest) SetResourceOwnerId(v int64) *DescribePriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribePriceRequest) SetRegionId(v string) *DescribePriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePriceRequest) SetResourceType(v string) *DescribePriceRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribePriceRequest) SetImageId(v string) *DescribePriceRequest {
	s.ImageId = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceType(v string) *DescribePriceRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribePriceRequest) SetIoOptimized(v string) *DescribePriceRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceNetworkType(v string) *DescribePriceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribePriceRequest) SetInternetChargeType(v string) *DescribePriceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribePriceRequest) SetInternetMaxBandwidthOut(v int32) *DescribePriceRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribePriceRequest) SetPeriod(v int32) *DescribePriceRequest {
	s.Period = &v
	return s
}

func (s *DescribePriceRequest) SetPriceUnit(v string) *DescribePriceRequest {
	s.PriceUnit = &v
	return s
}

func (s *DescribePriceRequest) SetAmount(v int32) *DescribePriceRequest {
	s.Amount = &v
	return s
}

func (s *DescribePriceRequest) SetOfferingType(v string) *DescribePriceRequest {
	s.OfferingType = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceAmount(v int32) *DescribePriceRequest {
	s.InstanceAmount = &v
	return s
}

func (s *DescribePriceRequest) SetScope(v string) *DescribePriceRequest {
	s.Scope = &v
	return s
}

func (s *DescribePriceRequest) SetPlatform(v string) *DescribePriceRequest {
	s.Platform = &v
	return s
}

func (s *DescribePriceRequest) SetCapacity(v int32) *DescribePriceRequest {
	s.Capacity = &v
	return s
}

func (s *DescribePriceRequest) SetAssuranceTimes(v string) *DescribePriceRequest {
	s.AssuranceTimes = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceCpuCoreCount(v int32) *DescribePriceRequest {
	s.InstanceCpuCoreCount = &v
	return s
}

func (s *DescribePriceRequest) SetIsp(v string) *DescribePriceRequest {
	s.Isp = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceTypeList(v []*string) *DescribePriceRequest {
	s.InstanceTypeList = v
	return s
}

type DescribePriceRequestSystemDisk struct {
	Category         *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Size             *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	PerformanceLevel *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
}

func (s DescribePriceRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestSystemDisk) SetCategory(v string) *DescribePriceRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *DescribePriceRequestSystemDisk) SetSize(v int32) *DescribePriceRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *DescribePriceRequestSystemDisk) SetPerformanceLevel(v string) *DescribePriceRequestSystemDisk {
	s.PerformanceLevel = &v
	return s
}

type DescribePriceRequestDataDisk struct {
	Size             *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Category         *string `json:"Category,omitempty" xml:"Category,omitempty"`
	PerformanceLevel *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
}

func (s DescribePriceRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestDataDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestDataDisk) SetSize(v int32) *DescribePriceRequestDataDisk {
	s.Size = &v
	return s
}

func (s *DescribePriceRequestDataDisk) SetCategory(v string) *DescribePriceRequestDataDisk {
	s.Category = &v
	return s
}

func (s *DescribePriceRequestDataDisk) SetPerformanceLevel(v string) *DescribePriceRequestDataDisk {
	s.PerformanceLevel = &v
	return s
}

type DescribePriceResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PriceInfo *DescribePriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
}

func (s DescribePriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBody) SetRequestId(v string) *DescribePriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePriceResponseBody) SetPriceInfo(v *DescribePriceResponseBodyPriceInfo) *DescribePriceResponseBody {
	s.PriceInfo = v
	return s
}

type DescribePriceResponseBodyPriceInfo struct {
	Price *DescribePriceResponseBodyPriceInfoPrice   `json:"Price,omitempty" xml:"Price,omitempty" type:"Struct"`
	Rules []*DescribePriceResponseBodyPriceInfoRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfo) SetPrice(v *DescribePriceResponseBodyPriceInfoPrice) *DescribePriceResponseBodyPriceInfo {
	s.Price = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetRules(v []*DescribePriceResponseBodyPriceInfoRules) *DescribePriceResponseBodyPriceInfo {
	s.Rules = v
	return s
}

type DescribePriceResponseBodyPriceInfoPrice struct {
	ReservedInstanceHourPrice *float32                                              `json:"ReservedInstanceHourPrice,omitempty" xml:"ReservedInstanceHourPrice,omitempty"`
	DiscountPrice             *float32                                              `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	TradePrice                *float32                                              `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
	OriginalPrice             *float32                                              `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	DetailInfos               []*DescribePriceResponseBodyPriceInfoPriceDetailInfos `json:"DetailInfos,omitempty" xml:"DetailInfos,omitempty" type:"Repeated"`
	Currency                  *string                                               `json:"Currency,omitempty" xml:"Currency,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetReservedInstanceHourPrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.ReservedInstanceHourPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetDiscountPrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetTradePrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.TradePrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetDetailInfos(v []*DescribePriceResponseBodyPriceInfoPriceDetailInfos) *DescribePriceResponseBodyPriceInfoPrice {
	s.DetailInfos = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetCurrency(v string) *DescribePriceResponseBodyPriceInfoPrice {
	s.Currency = &v
	return s
}

type DescribePriceResponseBodyPriceInfoPriceDetailInfos struct {
	Resource      *string                                                       `json:"Resource,omitempty" xml:"Resource,omitempty"`
	DiscountPrice *float32                                                      `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	TradePrice    *float32                                                      `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
	OriginalPrice *float32                                                      `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	SubRules      []*DescribePriceResponseBodyPriceInfoPriceDetailInfosSubRules `json:"SubRules,omitempty" xml:"SubRules,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoPriceDetailInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoPriceDetailInfos) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoPriceDetailInfos) SetResource(v string) *DescribePriceResponseBodyPriceInfoPriceDetailInfos {
	s.Resource = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPriceDetailInfos) SetDiscountPrice(v float32) *DescribePriceResponseBodyPriceInfoPriceDetailInfos {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPriceDetailInfos) SetTradePrice(v float32) *DescribePriceResponseBodyPriceInfoPriceDetailInfos {
	s.TradePrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPriceDetailInfos) SetOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfoPriceDetailInfos {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPriceDetailInfos) SetSubRules(v []*DescribePriceResponseBodyPriceInfoPriceDetailInfosSubRules) *DescribePriceResponseBodyPriceInfoPriceDetailInfos {
	s.SubRules = v
	return s
}

type DescribePriceResponseBodyPriceInfoPriceDetailInfosSubRules struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoPriceDetailInfosSubRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoPriceDetailInfosSubRules) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoPriceDetailInfosSubRules) SetDescription(v string) *DescribePriceResponseBodyPriceInfoPriceDetailInfosSubRules {
	s.Description = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPriceDetailInfosSubRules) SetRuleId(v int64) *DescribePriceResponseBodyPriceInfoPriceDetailInfosSubRules {
	s.RuleId = &v
	return s
}

type DescribePriceResponseBodyPriceInfoRules struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoRules) SetDescription(v string) *DescribePriceResponseBodyPriceInfoRules {
	s.Description = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoRules) SetRuleId(v int64) *DescribePriceResponseBodyPriceInfoRules {
	s.RuleId = &v
	return s
}

type DescribePriceResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribePriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceResponse) SetHeaders(v map[string]*string) *DescribePriceResponse {
	s.Headers = v
	return s
}

func (s *DescribePriceResponse) SetBody(v *DescribePriceResponseBody) *DescribePriceResponse {
	s.Body = v
	return s
}

type DescribeRecommendInstanceTypeRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Cores                *int32    `json:"Cores,omitempty" xml:"Cores,omitempty"`
	Memory               *float32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	InstanceFamilyLevel  *string   `json:"InstanceFamilyLevel,omitempty" xml:"InstanceFamilyLevel,omitempty"`
	InstanceType         *string   `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	NetworkType          *string   `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	InstanceChargeType   *string   `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	SpotStrategy         *string   `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	IoOptimized          *string   `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	PriorityStrategy     *string   `json:"PriorityStrategy,omitempty" xml:"PriorityStrategy,omitempty"`
	MaxPrice             *float32  `json:"MaxPrice,omitempty" xml:"MaxPrice,omitempty"`
	InstanceBandwidthRx  *int32    `json:"InstanceBandwidthRx,omitempty" xml:"InstanceBandwidthRx,omitempty"`
	InstanceBandwidthTx  *int32    `json:"InstanceBandwidthTx,omitempty" xml:"InstanceBandwidthTx,omitempty"`
	InstancePpsRx        *int32    `json:"InstancePpsRx,omitempty" xml:"InstancePpsRx,omitempty"`
	InstancePpsTx        *int32    `json:"InstancePpsTx,omitempty" xml:"InstancePpsTx,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId               *string   `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	SystemDiskCategory   *string   `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	Scene                *string   `json:"Scene,omitempty" xml:"Scene,omitempty"`
	InstanceTypeFamily   []*string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty" type:"Repeated"`
}

func (s DescribeRecommendInstanceTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeRequest) SetOwnerId(v int64) *DescribeRecommendInstanceTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetOwnerAccount(v string) *DescribeRecommendInstanceTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetResourceOwnerAccount(v string) *DescribeRecommendInstanceTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetResourceOwnerId(v int64) *DescribeRecommendInstanceTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetCores(v int32) *DescribeRecommendInstanceTypeRequest {
	s.Cores = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetMemory(v float32) *DescribeRecommendInstanceTypeRequest {
	s.Memory = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceFamilyLevel(v string) *DescribeRecommendInstanceTypeRequest {
	s.InstanceFamilyLevel = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceType(v string) *DescribeRecommendInstanceTypeRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetNetworkType(v string) *DescribeRecommendInstanceTypeRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceChargeType(v string) *DescribeRecommendInstanceTypeRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetSpotStrategy(v string) *DescribeRecommendInstanceTypeRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetIoOptimized(v string) *DescribeRecommendInstanceTypeRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetPriorityStrategy(v string) *DescribeRecommendInstanceTypeRequest {
	s.PriorityStrategy = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetMaxPrice(v float32) *DescribeRecommendInstanceTypeRequest {
	s.MaxPrice = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceBandwidthRx(v int32) *DescribeRecommendInstanceTypeRequest {
	s.InstanceBandwidthRx = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceBandwidthTx(v int32) *DescribeRecommendInstanceTypeRequest {
	s.InstanceBandwidthTx = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstancePpsRx(v int32) *DescribeRecommendInstanceTypeRequest {
	s.InstancePpsRx = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstancePpsTx(v int32) *DescribeRecommendInstanceTypeRequest {
	s.InstancePpsTx = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetRegionId(v string) *DescribeRecommendInstanceTypeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetZoneId(v string) *DescribeRecommendInstanceTypeRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetSystemDiskCategory(v string) *DescribeRecommendInstanceTypeRequest {
	s.SystemDiskCategory = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetScene(v string) *DescribeRecommendInstanceTypeRequest {
	s.Scene = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceTypeFamily(v []*string) *DescribeRecommendInstanceTypeRequest {
	s.InstanceTypeFamily = v
	return s
}

type DescribeRecommendInstanceTypeResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      []*DescribeRecommendInstanceTypeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
}

func (s DescribeRecommendInstanceTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseBody) SetRequestId(v string) *DescribeRecommendInstanceTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBody) SetData(v []*DescribeRecommendInstanceTypeResponseBodyData) *DescribeRecommendInstanceTypeResponseBody {
	s.Data = v
	return s
}

type DescribeRecommendInstanceTypeResponseBodyData struct {
	Zones              []*DescribeRecommendInstanceTypeResponseBodyDataZones      `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Repeated"`
	CommodityCode      *string                                                    `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	Priority           *int32                                                     `json:"Priority,omitempty" xml:"Priority,omitempty"`
	InstanceType       *DescribeRecommendInstanceTypeResponseBodyDataInstanceType `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" type:"Struct"`
	Scene              *string                                                    `json:"Scene,omitempty" xml:"Scene,omitempty"`
	SpotStrategy       *string                                                    `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	RegionId           *string                                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceChargeType *string                                                    `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
}

func (s DescribeRecommendInstanceTypeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseBodyData) SetZones(v []*DescribeRecommendInstanceTypeResponseBodyDataZones) *DescribeRecommendInstanceTypeResponseBodyData {
	s.Zones = v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyData) SetCommodityCode(v string) *DescribeRecommendInstanceTypeResponseBodyData {
	s.CommodityCode = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyData) SetPriority(v int32) *DescribeRecommendInstanceTypeResponseBodyData {
	s.Priority = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyData) SetInstanceType(v *DescribeRecommendInstanceTypeResponseBodyDataInstanceType) *DescribeRecommendInstanceTypeResponseBodyData {
	s.InstanceType = v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyData) SetScene(v string) *DescribeRecommendInstanceTypeResponseBodyData {
	s.Scene = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyData) SetSpotStrategy(v string) *DescribeRecommendInstanceTypeResponseBodyData {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyData) SetRegionId(v string) *DescribeRecommendInstanceTypeResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyData) SetInstanceChargeType(v string) *DescribeRecommendInstanceTypeResponseBodyData {
	s.InstanceChargeType = &v
	return s
}

type DescribeRecommendInstanceTypeResponseBodyDataZones struct {
	ZoneNo       *string   `json:"ZoneNo,omitempty" xml:"ZoneNo,omitempty"`
	NetworkTypes []*string `json:"NetworkTypes,omitempty" xml:"NetworkTypes,omitempty" type:"Repeated"`
}

func (s DescribeRecommendInstanceTypeResponseBodyDataZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseBodyDataZones) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseBodyDataZones) SetZoneNo(v string) *DescribeRecommendInstanceTypeResponseBodyDataZones {
	s.ZoneNo = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyDataZones) SetNetworkTypes(v []*string) *DescribeRecommendInstanceTypeResponseBodyDataZones {
	s.NetworkTypes = v
	return s
}

type DescribeRecommendInstanceTypeResponseBodyDataInstanceType struct {
	SupportIoOptimized *string `json:"SupportIoOptimized,omitempty" xml:"SupportIoOptimized,omitempty"`
	Cores              *int32  `json:"Cores,omitempty" xml:"Cores,omitempty"`
	Memory             *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceTypeFamily *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	Generation         *string `json:"Generation,omitempty" xml:"Generation,omitempty"`
}

func (s DescribeRecommendInstanceTypeResponseBodyDataInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseBodyDataInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseBodyDataInstanceType) SetSupportIoOptimized(v string) *DescribeRecommendInstanceTypeResponseBodyDataInstanceType {
	s.SupportIoOptimized = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyDataInstanceType) SetCores(v int32) *DescribeRecommendInstanceTypeResponseBodyDataInstanceType {
	s.Cores = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyDataInstanceType) SetMemory(v int32) *DescribeRecommendInstanceTypeResponseBodyDataInstanceType {
	s.Memory = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyDataInstanceType) SetInstanceType(v string) *DescribeRecommendInstanceTypeResponseBodyDataInstanceType {
	s.InstanceType = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyDataInstanceType) SetInstanceTypeFamily(v string) *DescribeRecommendInstanceTypeResponseBodyDataInstanceType {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseBodyDataInstanceType) SetGeneration(v string) *DescribeRecommendInstanceTypeResponseBodyDataInstanceType {
	s.Generation = &v
	return s
}

type DescribeRecommendInstanceTypeResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRecommendInstanceTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRecommendInstanceTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponse) SetHeaders(v map[string]*string) *DescribeRecommendInstanceTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecommendInstanceTypeResponse) SetBody(v *DescribeRecommendInstanceTypeResponseBody) *DescribeRecommendInstanceTypeResponse {
	s.Body = v
	return s
}

type DescribeRegionsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceChargeType   *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	AcceptLanguage       *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetOwnerId(v int64) *DescribeRegionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRegionsRequest) SetResourceOwnerAccount(v string) *DescribeRegionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRegionsRequest) SetResourceOwnerId(v int64) *DescribeRegionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRegionsRequest) SetOwnerAccount(v string) *DescribeRegionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRegionsRequest) SetInstanceChargeType(v string) *DescribeRegionsRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeRegionsRequest) SetResourceType(v string) *DescribeRegionsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeRegionsRequest) SetAcceptLanguage(v string) *DescribeRegionsRequest {
	s.AcceptLanguage = &v
	return s
}

type DescribeRegionsResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Regions   []*DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRegionsResponseBody) SetRegions(v []*DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

type DescribeRegionsResponseBodyRegions struct {
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	LocalName      *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) SetStatus(v string) *DescribeRegionsResponseBodyRegions {
	s.Status = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegions) SetLocalName(v string) *DescribeRegionsResponseBodyRegions {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegions) SetRegionEndpoint(v string) *DescribeRegionsResponseBodyRegions {
	s.RegionEndpoint = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegions) SetRegionId(v string) *DescribeRegionsResponseBodyRegions {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeRenewalPriceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId           *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PriceUnit            *string `json:"PriceUnit,omitempty" xml:"PriceUnit,omitempty"`
}

func (s DescribeRenewalPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceRequest) SetOwnerId(v int64) *DescribeRenewalPriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetOwnerAccount(v string) *DescribeRenewalPriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceOwnerAccount(v string) *DescribeRenewalPriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceOwnerId(v int64) *DescribeRenewalPriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetRegionId(v string) *DescribeRenewalPriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceType(v string) *DescribeRenewalPriceRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceId(v string) *DescribeRenewalPriceRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetPeriod(v int32) *DescribeRenewalPriceRequest {
	s.Period = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetPriceUnit(v string) *DescribeRenewalPriceRequest {
	s.PriceUnit = &v
	return s
}

type DescribeRenewalPriceResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PriceInfo *DescribeRenewalPriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
}

func (s DescribeRenewalPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBody) SetRequestId(v string) *DescribeRenewalPriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRenewalPriceResponseBody) SetPriceInfo(v *DescribeRenewalPriceResponseBodyPriceInfo) *DescribeRenewalPriceResponseBody {
	s.PriceInfo = v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfo struct {
	Price *DescribeRenewalPriceResponseBodyPriceInfoPrice   `json:"Price,omitempty" xml:"Price,omitempty" type:"Struct"`
	Rules []*DescribeRenewalPriceResponseBodyPriceInfoRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetPrice(v *DescribeRenewalPriceResponseBodyPriceInfoPrice) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.Price = v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetRules(v []*DescribeRenewalPriceResponseBodyPriceInfoRules) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.Rules = v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoPrice struct {
	DiscountPrice *float32                                                     `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	TradePrice    *float32                                                     `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
	OriginalPrice *float32                                                     `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	DetailInfos   []*DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos `json:"DetailInfos,omitempty" xml:"DetailInfos,omitempty" type:"Repeated"`
	Currency      *string                                                      `json:"Currency,omitempty" xml:"Currency,omitempty"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetDiscountPrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetTradePrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.TradePrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetOriginalPrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetDetailInfos(v []*DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.DetailInfos = v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetCurrency(v string) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.Currency = &v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos struct {
	Resource      *string                                                              `json:"Resource,omitempty" xml:"Resource,omitempty"`
	DiscountPrice *float32                                                             `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	TradePrice    *float32                                                             `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
	OriginalPrice *float32                                                             `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	SubRules      []*DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfosSubRules `json:"SubRules,omitempty" xml:"SubRules,omitempty" type:"Repeated"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos) SetResource(v string) *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos {
	s.Resource = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos) SetDiscountPrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos) SetTradePrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos {
	s.TradePrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos) SetOriginalPrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos) SetSubRules(v []*DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfosSubRules) *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfos {
	s.SubRules = v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfosSubRules struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfosSubRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfosSubRules) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfosSubRules) SetDescription(v string) *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfosSubRules {
	s.Description = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfosSubRules) SetRuleId(v int64) *DescribeRenewalPriceResponseBodyPriceInfoPriceDetailInfosSubRules {
	s.RuleId = &v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoRules struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoRules) SetDescription(v string) *DescribeRenewalPriceResponseBodyPriceInfoRules {
	s.Description = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoRules) SetRuleId(v int64) *DescribeRenewalPriceResponseBodyPriceInfoRules {
	s.RuleId = &v
	return s
}

type DescribeRenewalPriceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRenewalPriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRenewalPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponse) SetHeaders(v map[string]*string) *DescribeRenewalPriceResponse {
	s.Headers = v
	return s
}

func (s *DescribeRenewalPriceResponse) SetBody(v *DescribeRenewalPriceResponseBody) *DescribeRenewalPriceResponse {
	s.Body = v
	return s
}

type DescribeReservedInstancesRequest struct {
	OwnerId              *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber           *int32                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Tag                  []*DescribeReservedInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId               *string                                `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ReservedInstanceName *string                                `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	LockReason           *string                                `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	InstanceType         *string                                `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceTypeFamily   *string                                `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	Scope                *string                                `json:"Scope,omitempty" xml:"Scope,omitempty"`
	OfferingType         *string                                `json:"OfferingType,omitempty" xml:"OfferingType,omitempty"`
	AllocationType       *string                                `json:"AllocationType,omitempty" xml:"AllocationType,omitempty"`
	ReservedInstanceId   []*string                              `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty" type:"Repeated"`
	Status               []*string                              `json:"Status,omitempty" xml:"Status,omitempty" type:"Repeated"`
}

func (s DescribeReservedInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesRequest) SetOwnerId(v int64) *DescribeReservedInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetResourceOwnerAccount(v string) *DescribeReservedInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetResourceOwnerId(v int64) *DescribeReservedInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetOwnerAccount(v string) *DescribeReservedInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetRegionId(v string) *DescribeReservedInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetPageNumber(v int32) *DescribeReservedInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetPageSize(v int32) *DescribeReservedInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetTag(v []*DescribeReservedInstancesRequestTag) *DescribeReservedInstancesRequest {
	s.Tag = v
	return s
}

func (s *DescribeReservedInstancesRequest) SetZoneId(v string) *DescribeReservedInstancesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetReservedInstanceName(v string) *DescribeReservedInstancesRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetLockReason(v string) *DescribeReservedInstancesRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetInstanceType(v string) *DescribeReservedInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetInstanceTypeFamily(v string) *DescribeReservedInstancesRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetScope(v string) *DescribeReservedInstancesRequest {
	s.Scope = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetOfferingType(v string) *DescribeReservedInstancesRequest {
	s.OfferingType = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetAllocationType(v string) *DescribeReservedInstancesRequest {
	s.AllocationType = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetReservedInstanceId(v []*string) *DescribeReservedInstancesRequest {
	s.ReservedInstanceId = v
	return s
}

func (s *DescribeReservedInstancesRequest) SetStatus(v []*string) *DescribeReservedInstancesRequest {
	s.Status = v
	return s
}

type DescribeReservedInstancesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeReservedInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesRequestTag) SetKey(v string) *DescribeReservedInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeReservedInstancesRequestTag) SetValue(v string) *DescribeReservedInstancesRequestTag {
	s.Value = &v
	return s
}

type DescribeReservedInstancesResponseBody struct {
	TotalCount        *int32                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize          *int32                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber        *int32                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ReservedInstances []*DescribeReservedInstancesResponseBodyReservedInstances `json:"ReservedInstances,omitempty" xml:"ReservedInstances,omitempty" type:"Repeated"`
}

func (s DescribeReservedInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBody) SetTotalCount(v int32) *DescribeReservedInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeReservedInstancesResponseBody) SetPageSize(v int32) *DescribeReservedInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstancesResponseBody) SetRequestId(v string) *DescribeReservedInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReservedInstancesResponseBody) SetPageNumber(v int32) *DescribeReservedInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstancesResponseBody) SetReservedInstances(v []*DescribeReservedInstancesResponseBodyReservedInstances) *DescribeReservedInstancesResponseBody {
	s.ReservedInstances = v
	return s
}

type DescribeReservedInstancesResponseBodyReservedInstances struct {
	CreationTime         *string                                                                 `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status               *string                                                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	ReservedInstanceName *string                                                                 `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	OperationLocks       []*DescribeReservedInstancesResponseBodyReservedInstancesOperationLocks `json:"OperationLocks,omitempty" xml:"OperationLocks,omitempty" type:"Repeated"`
	ReservedInstanceId   *string                                                                 `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty"`
	Tags                 []*DescribeReservedInstancesResponseBodyReservedInstancesTags           `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	InstanceType         *string                                                                 `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceAmount       *int32                                                                  `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	OfferingType         *string                                                                 `json:"OfferingType,omitempty" xml:"OfferingType,omitempty"`
	RegionId             *string                                                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StartTime            *string                                                                 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Description          *string                                                                 `json:"Description,omitempty" xml:"Description,omitempty"`
	AllocationStatus     *string                                                                 `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
	ExpiredTime          *string                                                                 `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	ResourceGroupId      *string                                                                 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId               *string                                                                 `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Platform             *string                                                                 `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Scope                *string                                                                 `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s DescribeReservedInstancesResponseBodyReservedInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBodyReservedInstances) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetCreationTime(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.CreationTime = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetStatus(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.Status = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetReservedInstanceName(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.ReservedInstanceName = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetOperationLocks(v []*DescribeReservedInstancesResponseBodyReservedInstancesOperationLocks) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.OperationLocks = v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetReservedInstanceId(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.ReservedInstanceId = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetTags(v []*DescribeReservedInstancesResponseBodyReservedInstancesTags) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.Tags = v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetInstanceType(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.InstanceType = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetInstanceAmount(v int32) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.InstanceAmount = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetOfferingType(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.OfferingType = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetRegionId(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetStartTime(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.StartTime = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetDescription(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.Description = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetAllocationStatus(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetExpiredTime(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetResourceGroupId(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetZoneId(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.ZoneId = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetPlatform(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.Platform = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetScope(v string) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.Scope = &v
	return s
}

type DescribeReservedInstancesResponseBodyReservedInstancesOperationLocks struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesOperationLocks) SetLockReason(v string) *DescribeReservedInstancesResponseBodyReservedInstancesOperationLocks {
	s.LockReason = &v
	return s
}

type DescribeReservedInstancesResponseBodyReservedInstancesTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesTags) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesTags) SetTagValue(v string) *DescribeReservedInstancesResponseBodyReservedInstancesTags {
	s.TagValue = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesTags) SetTagKey(v string) *DescribeReservedInstancesResponseBodyReservedInstancesTags {
	s.TagKey = &v
	return s
}

type DescribeReservedInstancesResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeReservedInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeReservedInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponse) SetHeaders(v map[string]*string) *DescribeReservedInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeReservedInstancesResponse) SetBody(v *DescribeReservedInstancesResponseBody) *DescribeReservedInstancesResponse {
	s.Body = v
	return s
}

type DescribeResourceByTagsRequest struct {
	OwnerId              *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ResourceType         *string                             `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	RegionId             *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Tag                  []*DescribeResourceByTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeResourceByTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsRequest) SetOwnerId(v int64) *DescribeResourceByTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetResourceOwnerAccount(v string) *DescribeResourceByTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetResourceOwnerId(v int64) *DescribeResourceByTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetPageSize(v int32) *DescribeResourceByTagsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetPageNumber(v int32) *DescribeResourceByTagsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetResourceType(v string) *DescribeResourceByTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetRegionId(v string) *DescribeResourceByTagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetTag(v []*DescribeResourceByTagsRequestTag) *DescribeResourceByTagsRequest {
	s.Tag = v
	return s
}

type DescribeResourceByTagsRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeResourceByTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsRequestTag) SetKey(v string) *DescribeResourceByTagsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeResourceByTagsRequestTag) SetValue(v string) *DescribeResourceByTagsRequestTag {
	s.Value = &v
	return s
}

type DescribeResourceByTagsResponseBody struct {
	TotalCount *int32                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Resources  []*DescribeResourceByTagsResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Repeated"`
}

func (s DescribeResourceByTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsResponseBody) SetTotalCount(v int32) *DescribeResourceByTagsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeResourceByTagsResponseBody) SetRequestId(v string) *DescribeResourceByTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceByTagsResponseBody) SetPageSize(v int32) *DescribeResourceByTagsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeResourceByTagsResponseBody) SetPageNumber(v int32) *DescribeResourceByTagsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeResourceByTagsResponseBody) SetResources(v []*DescribeResourceByTagsResponseBodyResources) *DescribeResourceByTagsResponseBody {
	s.Resources = v
	return s
}

type DescribeResourceByTagsResponseBodyResources struct {
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeResourceByTagsResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsResponseBodyResources) SetResourceType(v string) *DescribeResourceByTagsResponseBodyResources {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceByTagsResponseBodyResources) SetResourceId(v string) *DescribeResourceByTagsResponseBodyResources {
	s.ResourceId = &v
	return s
}

func (s *DescribeResourceByTagsResponseBodyResources) SetRegionId(v string) *DescribeResourceByTagsResponseBodyResources {
	s.RegionId = &v
	return s
}

type DescribeResourceByTagsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeResourceByTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourceByTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsResponse) SetHeaders(v map[string]*string) *DescribeResourceByTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceByTagsResponse) SetBody(v *DescribeResourceByTagsResponseBody) *DescribeResourceByTagsResponse {
	s.Body = v
	return s
}

type DescribeResourcesModificationRequest struct {
	OwnerId              *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           *string  `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	MigrateAcrossZone    *bool    `json:"MigrateAcrossZone,omitempty" xml:"MigrateAcrossZone,omitempty"`
	DestinationResource  *string  `json:"DestinationResource,omitempty" xml:"DestinationResource,omitempty"`
	OperationType        *string  `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	InstanceType         *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Cores                *int32   `json:"Cores,omitempty" xml:"Cores,omitempty"`
	Memory               *float32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s DescribeResourcesModificationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationRequest) SetOwnerId(v int64) *DescribeResourcesModificationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetResourceOwnerAccount(v string) *DescribeResourcesModificationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetResourceOwnerId(v int64) *DescribeResourcesModificationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetOwnerAccount(v string) *DescribeResourcesModificationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetRegionId(v string) *DescribeResourcesModificationRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetResourceId(v string) *DescribeResourcesModificationRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetMigrateAcrossZone(v bool) *DescribeResourcesModificationRequest {
	s.MigrateAcrossZone = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetDestinationResource(v string) *DescribeResourcesModificationRequest {
	s.DestinationResource = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetOperationType(v string) *DescribeResourcesModificationRequest {
	s.OperationType = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetInstanceType(v string) *DescribeResourcesModificationRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetCores(v int32) *DescribeResourcesModificationRequest {
	s.Cores = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetMemory(v float32) *DescribeResourcesModificationRequest {
	s.Memory = &v
	return s
}

type DescribeResourcesModificationResponseBody struct {
	RequestId      *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AvailableZones []*DescribeResourcesModificationResponseBodyAvailableZones `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" type:"Repeated"`
}

func (s DescribeResourcesModificationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseBody) SetRequestId(v string) *DescribeResourcesModificationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourcesModificationResponseBody) SetAvailableZones(v []*DescribeResourcesModificationResponseBodyAvailableZones) *DescribeResourcesModificationResponseBody {
	s.AvailableZones = v
	return s
}

type DescribeResourcesModificationResponseBodyAvailableZones struct {
	Status             *string                                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	ZoneId             *string                                                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	StatusCategory     *string                                                                      `json:"StatusCategory,omitempty" xml:"StatusCategory,omitempty"`
	RegionId           *string                                                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AvailableResources []*DescribeResourcesModificationResponseBodyAvailableZonesAvailableResources `json:"AvailableResources,omitempty" xml:"AvailableResources,omitempty" type:"Repeated"`
}

func (s DescribeResourcesModificationResponseBodyAvailableZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseBodyAvailableZones) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseBodyAvailableZones) SetStatus(v string) *DescribeResourcesModificationResponseBodyAvailableZones {
	s.Status = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZones) SetZoneId(v string) *DescribeResourcesModificationResponseBodyAvailableZones {
	s.ZoneId = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZones) SetStatusCategory(v string) *DescribeResourcesModificationResponseBodyAvailableZones {
	s.StatusCategory = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZones) SetRegionId(v string) *DescribeResourcesModificationResponseBodyAvailableZones {
	s.RegionId = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZones) SetAvailableResources(v []*DescribeResourcesModificationResponseBodyAvailableZonesAvailableResources) *DescribeResourcesModificationResponseBodyAvailableZones {
	s.AvailableResources = v
	return s
}

type DescribeResourcesModificationResponseBodyAvailableZonesAvailableResources struct {
	Type               *string                                                                                        `json:"Type,omitempty" xml:"Type,omitempty"`
	SupportedResources []*DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources `json:"SupportedResources,omitempty" xml:"SupportedResources,omitempty" type:"Repeated"`
}

func (s DescribeResourcesModificationResponseBodyAvailableZonesAvailableResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseBodyAvailableZonesAvailableResources) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResources) SetType(v string) *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResources {
	s.Type = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResources) SetSupportedResources(v []*DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources) *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResources {
	s.SupportedResources = v
	return s
}

type DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources struct {
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Value          *string `json:"Value,omitempty" xml:"Value,omitempty"`
	Max            *int32  `json:"Max,omitempty" xml:"Max,omitempty"`
	Unit           *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	StatusCategory *string `json:"StatusCategory,omitempty" xml:"StatusCategory,omitempty"`
	Min            *int32  `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetStatus(v string) *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Status = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetValue(v string) *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Value = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetMax(v int32) *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Max = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetUnit(v string) *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Unit = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetStatusCategory(v string) *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.StatusCategory = &v
	return s
}

func (s *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources) SetMin(v int32) *DescribeResourcesModificationResponseBodyAvailableZonesAvailableResourcesSupportedResources {
	s.Min = &v
	return s
}

type DescribeResourcesModificationResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeResourcesModificationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourcesModificationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponse) SetHeaders(v map[string]*string) *DescribeResourcesModificationResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourcesModificationResponse) SetBody(v *DescribeResourcesModificationResponseBody) *DescribeResourcesModificationResponse {
	s.Body = v
	return s
}

type DescribeRouterInterfacesRequest struct {
	OwnerId              *int64                                   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber           *int32                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter               []*DescribeRouterInterfacesRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeRouterInterfacesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesRequest) SetOwnerId(v int64) *DescribeRouterInterfacesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetResourceOwnerAccount(v string) *DescribeRouterInterfacesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetResourceOwnerId(v int64) *DescribeRouterInterfacesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetRegionId(v string) *DescribeRouterInterfacesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetPageNumber(v int32) *DescribeRouterInterfacesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetPageSize(v int32) *DescribeRouterInterfacesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetFilter(v []*DescribeRouterInterfacesRequestFilter) *DescribeRouterInterfacesRequest {
	s.Filter = v
	return s
}

type DescribeRouterInterfacesRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeRouterInterfacesRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesRequestFilter) SetKey(v string) *DescribeRouterInterfacesRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeRouterInterfacesRequestFilter) SetValue(v []*string) *DescribeRouterInterfacesRequestFilter {
	s.Value = v
	return s
}

type DescribeRouterInterfacesResponseBody struct {
	TotalCount         *int32                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId          *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize           *int32                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber         *int32                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RouterInterfaceSet []*DescribeRouterInterfacesResponseBodyRouterInterfaceSet `json:"RouterInterfaceSet,omitempty" xml:"RouterInterfaceSet,omitempty" type:"Repeated"`
}

func (s DescribeRouterInterfacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesResponseBody) SetTotalCount(v int32) *DescribeRouterInterfacesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBody) SetRequestId(v string) *DescribeRouterInterfacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBody) SetPageSize(v int32) *DescribeRouterInterfacesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBody) SetPageNumber(v int32) *DescribeRouterInterfacesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBody) SetRouterInterfaceSet(v []*DescribeRouterInterfacesResponseBodyRouterInterfaceSet) *DescribeRouterInterfacesResponseBody {
	s.RouterInterfaceSet = v
	return s
}

type DescribeRouterInterfacesResponseBodyRouterInterfaceSet struct {
	HealthCheckTargetIp             *string `json:"HealthCheckTargetIp,omitempty" xml:"HealthCheckTargetIp,omitempty"`
	CreationTime                    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status                          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Spec                            *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	OppositeInterfaceId             *string `json:"OppositeInterfaceId,omitempty" xml:"OppositeInterfaceId,omitempty"`
	RouterInterfaceId               *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty"`
	ChargeType                      *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	OppositeRouterType              *string `json:"OppositeRouterType,omitempty" xml:"OppositeRouterType,omitempty"`
	OppositeInterfaceOwnerId        *string `json:"OppositeInterfaceOwnerId,omitempty" xml:"OppositeInterfaceOwnerId,omitempty"`
	Description                     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OppositeRouterId                *string `json:"OppositeRouterId,omitempty" xml:"OppositeRouterId,omitempty"`
	OppositeInterfaceSpec           *string `json:"OppositeInterfaceSpec,omitempty" xml:"OppositeInterfaceSpec,omitempty"`
	RouterId                        *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	OppositeInterfaceBusinessStatus *string `json:"OppositeInterfaceBusinessStatus,omitempty" xml:"OppositeInterfaceBusinessStatus,omitempty"`
	ConnectedTime                   *string `json:"ConnectedTime,omitempty" xml:"ConnectedTime,omitempty"`
	HealthCheckSourceIp             *string `json:"HealthCheckSourceIp,omitempty" xml:"HealthCheckSourceIp,omitempty"`
	OppositeInterfaceStatus         *string `json:"OppositeInterfaceStatus,omitempty" xml:"OppositeInterfaceStatus,omitempty"`
	EndTime                         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OppositeRegionId                *string `json:"OppositeRegionId,omitempty" xml:"OppositeRegionId,omitempty"`
	OppositeAccessPointId           *string `json:"OppositeAccessPointId,omitempty" xml:"OppositeAccessPointId,omitempty"`
	BusinessStatus                  *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	RouterType                      *string `json:"RouterType,omitempty" xml:"RouterType,omitempty"`
	Role                            *string `json:"Role,omitempty" xml:"Role,omitempty"`
	AccessPointId                   *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
}

func (s DescribeRouterInterfacesResponseBodyRouterInterfaceSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesResponseBodyRouterInterfaceSet) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetHealthCheckTargetIp(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.HealthCheckTargetIp = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetCreationTime(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetStatus(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.Status = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetSpec(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.Spec = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetOppositeInterfaceId(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.OppositeInterfaceId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetRouterInterfaceId(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.RouterInterfaceId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetChargeType(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.ChargeType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetOppositeRouterType(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.OppositeRouterType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetOppositeInterfaceOwnerId(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetDescription(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.Description = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetName(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.Name = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetOppositeRouterId(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.OppositeRouterId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetOppositeInterfaceSpec(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.OppositeInterfaceSpec = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetRouterId(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.RouterId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetOppositeInterfaceBusinessStatus(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.OppositeInterfaceBusinessStatus = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetConnectedTime(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.ConnectedTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetHealthCheckSourceIp(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetOppositeInterfaceStatus(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.OppositeInterfaceStatus = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetEndTime(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.EndTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetOppositeRegionId(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.OppositeRegionId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetOppositeAccessPointId(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.OppositeAccessPointId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetBusinessStatus(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetRouterType(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.RouterType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetRole(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.Role = &v
	return s
}

func (s *DescribeRouterInterfacesResponseBodyRouterInterfaceSet) SetAccessPointId(v string) *DescribeRouterInterfacesResponseBodyRouterInterfaceSet {
	s.AccessPointId = &v
	return s
}

type DescribeRouterInterfacesResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRouterInterfacesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRouterInterfacesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesResponse) SetHeaders(v map[string]*string) *DescribeRouterInterfacesResponse {
	s.Headers = v
	return s
}

func (s *DescribeRouterInterfacesResponse) SetBody(v *DescribeRouterInterfacesResponseBody) *DescribeRouterInterfacesResponse {
	s.Body = v
	return s
}

type DescribeRouteTablesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VRouterId            *string `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	RouteTableId         *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	RouterType           *string `json:"RouterType,omitempty" xml:"RouterType,omitempty"`
	RouterId             *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	RouteTableName       *string `json:"RouteTableName,omitempty" xml:"RouteTableName,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeRouteTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesRequest) SetOwnerId(v int64) *DescribeRouteTablesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetResourceOwnerAccount(v string) *DescribeRouteTablesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetResourceOwnerId(v int64) *DescribeRouteTablesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRegionId(v string) *DescribeRouteTablesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetVRouterId(v string) *DescribeRouteTablesRequest {
	s.VRouterId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouteTableId(v string) *DescribeRouteTablesRequest {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouterType(v string) *DescribeRouteTablesRequest {
	s.RouterType = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouterId(v string) *DescribeRouteTablesRequest {
	s.RouterId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouteTableName(v string) *DescribeRouteTablesRequest {
	s.RouteTableName = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetPageNumber(v int32) *DescribeRouteTablesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetPageSize(v int32) *DescribeRouteTablesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetOwnerAccount(v string) *DescribeRouteTablesRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeRouteTablesResponseBody struct {
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RouteTables []*DescribeRouteTablesResponseBodyRouteTables `json:"RouteTables,omitempty" xml:"RouteTables,omitempty" type:"Repeated"`
}

func (s DescribeRouteTablesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseBody) SetTotalCount(v int32) *DescribeRouteTablesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeRouteTablesResponseBody) SetPageSize(v int32) *DescribeRouteTablesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeRouteTablesResponseBody) SetRequestId(v string) *DescribeRouteTablesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRouteTablesResponseBody) SetPageNumber(v int32) *DescribeRouteTablesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteTablesResponseBody) SetRouteTables(v []*DescribeRouteTablesResponseBodyRouteTables) *DescribeRouteTablesResponseBody {
	s.RouteTables = v
	return s
}

type DescribeRouteTablesResponseBodyRouteTables struct {
	CreationTime    *string                                                  `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	VRouterId       *string                                                  `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	RouteEntrys     []*DescribeRouteTablesResponseBodyRouteTablesRouteEntrys `json:"RouteEntrys,omitempty" xml:"RouteEntrys,omitempty" type:"Repeated"`
	ResourceGroupId *string                                                  `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	RouteTableType  *string                                                  `json:"RouteTableType,omitempty" xml:"RouteTableType,omitempty"`
	RouteTableId    *string                                                  `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
}

func (s DescribeRouteTablesResponseBodyRouteTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseBodyRouteTables) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseBodyRouteTables) SetCreationTime(v string) *DescribeRouteTablesResponseBodyRouteTables {
	s.CreationTime = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTables) SetVRouterId(v string) *DescribeRouteTablesResponseBodyRouteTables {
	s.VRouterId = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTables) SetRouteEntrys(v []*DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) *DescribeRouteTablesResponseBodyRouteTables {
	s.RouteEntrys = v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTables) SetResourceGroupId(v string) *DescribeRouteTablesResponseBodyRouteTables {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTables) SetRouteTableType(v string) *DescribeRouteTablesResponseBodyRouteTables {
	s.RouteTableType = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTables) SetRouteTableId(v string) *DescribeRouteTablesResponseBodyRouteTables {
	s.RouteTableId = &v
	return s
}

type DescribeRouteTablesResponseBodyRouteTablesRouteEntrys struct {
	Type                 *string                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
	Status               *string                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	NextHopType          *string                                                          `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
	DestinationCidrBlock *string                                                          `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	NextHops             []*DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops `json:"NextHops,omitempty" xml:"NextHops,omitempty" type:"Repeated"`
	InstanceId           *string                                                          `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RouteTableId         *string                                                          `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
}

func (s DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) SetType(v string) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys {
	s.Type = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) SetStatus(v string) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys {
	s.Status = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) SetNextHopType(v string) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys {
	s.NextHopType = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) SetDestinationCidrBlock(v string) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) SetNextHops(v []*DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys {
	s.NextHops = v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) SetInstanceId(v string) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys {
	s.InstanceId = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys) SetRouteTableId(v string) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrys {
	s.RouteTableId = &v
	return s
}

type DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops struct {
	Weight      *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
	NextHopId   *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	NextHopType *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
	Enabled     *int32  `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
}

func (s DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops) SetWeight(v int32) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops {
	s.Weight = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops) SetNextHopId(v string) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops {
	s.NextHopId = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops) SetNextHopType(v string) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops {
	s.NextHopType = &v
	return s
}

func (s *DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops) SetEnabled(v int32) *DescribeRouteTablesResponseBodyRouteTablesRouteEntrysNextHops {
	s.Enabled = &v
	return s
}

type DescribeRouteTablesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRouteTablesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRouteTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponse) SetHeaders(v map[string]*string) *DescribeRouteTablesResponse {
	s.Headers = v
	return s
}

func (s *DescribeRouteTablesResponse) SetBody(v *DescribeRouteTablesResponseBody) *DescribeRouteTablesResponse {
	s.Body = v
	return s
}

type DescribeSecurityGroupAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NicType              *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Direction            *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
}

func (s DescribeSecurityGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeRequest) SetOwnerId(v int64) *DescribeSecurityGroupAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetResourceOwnerAccount(v string) *DescribeSecurityGroupAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetResourceOwnerId(v int64) *DescribeSecurityGroupAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetSecurityGroupId(v string) *DescribeSecurityGroupAttributeRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetRegionId(v string) *DescribeSecurityGroupAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetNicType(v string) *DescribeSecurityGroupAttributeRequest {
	s.NicType = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetOwnerAccount(v string) *DescribeSecurityGroupAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetDirection(v string) *DescribeSecurityGroupAttributeRequest {
	s.Direction = &v
	return s
}

type DescribeSecurityGroupAttributeResponseBody struct {
	Description       *string                                                  `json:"Description,omitempty" xml:"Description,omitempty"`
	VpcId             *string                                                  `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	RequestId         *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityGroupName *string                                                  `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	SecurityGroupId   *string                                                  `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	Permissions       []*DescribeSecurityGroupAttributeResponseBodyPermissions `json:"Permissions,omitempty" xml:"Permissions,omitempty" type:"Repeated"`
	InnerAccessPolicy *string                                                  `json:"InnerAccessPolicy,omitempty" xml:"InnerAccessPolicy,omitempty"`
	RegionId          *string                                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeSecurityGroupAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetDescription(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetVpcId(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.VpcId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetRequestId(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetSecurityGroupName(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetSecurityGroupId(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetPermissions(v []*DescribeSecurityGroupAttributeResponseBodyPermissions) *DescribeSecurityGroupAttributeResponseBody {
	s.Permissions = v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetInnerAccessPolicy(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.InnerAccessPolicy = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetRegionId(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.RegionId = &v
	return s
}

type DescribeSecurityGroupAttributeResponseBodyPermissions struct {
	Direction               *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	SourceGroupId           *string `json:"SourceGroupId,omitempty" xml:"SourceGroupId,omitempty"`
	DestGroupOwnerAccount   *string `json:"DestGroupOwnerAccount,omitempty" xml:"DestGroupOwnerAccount,omitempty"`
	SourceCidrIp            *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	Ipv6DestCidrIp          *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	Ipv6SourceCidrIp        *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	CreateTime              *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DestGroupId             *string `json:"DestGroupId,omitempty" xml:"DestGroupId,omitempty"`
	IpProtocol              *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	DestCidrIp              *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Priority                *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	DestGroupName           *string `json:"DestGroupName,omitempty" xml:"DestGroupName,omitempty"`
	NicType                 *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	Policy                  *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	PortRange               *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	SourceGroupOwnerAccount *string `json:"SourceGroupOwnerAccount,omitempty" xml:"SourceGroupOwnerAccount,omitempty"`
	SourceGroupName         *string `json:"SourceGroupName,omitempty" xml:"SourceGroupName,omitempty"`
	SourcePortRange         *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissions) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetDirection(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.Direction = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetSourceGroupId(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.SourceGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetDestGroupOwnerAccount(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.DestGroupOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetSourceCidrIp(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetIpv6DestCidrIp(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetIpv6SourceCidrIp(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetCreateTime(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.CreateTime = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetDestGroupId(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.DestGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetIpProtocol(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.IpProtocol = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetDestCidrIp(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.DestCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetPriority(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.Priority = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetDestGroupName(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.DestGroupName = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetNicType(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.NicType = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetPolicy(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.Policy = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetDescription(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetPortRange(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.PortRange = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetSourceGroupOwnerAccount(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.SourceGroupOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetSourceGroupName(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.SourceGroupName = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetSourcePortRange(v string) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.SourcePortRange = &v
	return s
}

type DescribeSecurityGroupAttributeResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSecurityGroupAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponse) SetHeaders(v map[string]*string) *DescribeSecurityGroupAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetBody(v *DescribeSecurityGroupAttributeResponseBody) *DescribeSecurityGroupAttributeResponse {
	s.Body = v
	return s
}

type DescribeSecurityGroupReferencesRequest struct {
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityGroupId      []*string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupReferencesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesRequest) SetRegionId(v string) *DescribeSecurityGroupReferencesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetResourceOwnerAccount(v string) *DescribeSecurityGroupReferencesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetResourceOwnerId(v int64) *DescribeSecurityGroupReferencesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetOwnerAccount(v string) *DescribeSecurityGroupReferencesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetOwnerId(v int64) *DescribeSecurityGroupReferencesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetSecurityGroupId(v []*string) *DescribeSecurityGroupReferencesRequest {
	s.SecurityGroupId = v
	return s
}

type DescribeSecurityGroupReferencesResponseBody struct {
	RequestId               *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityGroupReferences []*DescribeSecurityGroupReferencesResponseBodySecurityGroupReferences `json:"SecurityGroupReferences,omitempty" xml:"SecurityGroupReferences,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupReferencesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesResponseBody) SetRequestId(v string) *DescribeSecurityGroupReferencesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesResponseBody) SetSecurityGroupReferences(v []*DescribeSecurityGroupReferencesResponseBodySecurityGroupReferences) *DescribeSecurityGroupReferencesResponseBody {
	s.SecurityGroupReferences = v
	return s
}

type DescribeSecurityGroupReferencesResponseBodySecurityGroupReferences struct {
	SecurityGroupId           *string                                                                                        `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	ReferencingSecurityGroups []*DescribeSecurityGroupReferencesResponseBodySecurityGroupReferencesReferencingSecurityGroups `json:"ReferencingSecurityGroups,omitempty" xml:"ReferencingSecurityGroups,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupReferencesResponseBodySecurityGroupReferences) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesResponseBodySecurityGroupReferences) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesResponseBodySecurityGroupReferences) SetSecurityGroupId(v string) *DescribeSecurityGroupReferencesResponseBodySecurityGroupReferences {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesResponseBodySecurityGroupReferences) SetReferencingSecurityGroups(v []*DescribeSecurityGroupReferencesResponseBodySecurityGroupReferencesReferencingSecurityGroups) *DescribeSecurityGroupReferencesResponseBodySecurityGroupReferences {
	s.ReferencingSecurityGroups = v
	return s
}

type DescribeSecurityGroupReferencesResponseBodySecurityGroupReferencesReferencingSecurityGroups struct {
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	AliUid          *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
}

func (s DescribeSecurityGroupReferencesResponseBodySecurityGroupReferencesReferencingSecurityGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesResponseBodySecurityGroupReferencesReferencingSecurityGroups) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesResponseBodySecurityGroupReferencesReferencingSecurityGroups) SetSecurityGroupId(v string) *DescribeSecurityGroupReferencesResponseBodySecurityGroupReferencesReferencingSecurityGroups {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesResponseBodySecurityGroupReferencesReferencingSecurityGroups) SetAliUid(v string) *DescribeSecurityGroupReferencesResponseBodySecurityGroupReferencesReferencingSecurityGroups {
	s.AliUid = &v
	return s
}

type DescribeSecurityGroupReferencesResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSecurityGroupReferencesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityGroupReferencesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesResponse) SetHeaders(v map[string]*string) *DescribeSecurityGroupReferencesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityGroupReferencesResponse) SetBody(v *DescribeSecurityGroupReferencesResponseBody) *DescribeSecurityGroupReferencesResponse {
	s.Body = v
	return s
}

type DescribeSecurityGroupsRequest struct {
	OwnerId              *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VpcId                *string                             `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	PageNumber           *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	SecurityGroupIds     *string                             `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty"`
	ResourceGroupId      *string                             `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	NetworkType          *string                             `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	SecurityGroupId      *string                             `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName    *string                             `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	IsQueryEcsCount      *bool                               `json:"IsQueryEcsCount,omitempty" xml:"IsQueryEcsCount,omitempty"`
	FuzzyQuery           *bool                               `json:"FuzzyQuery,omitempty" xml:"FuzzyQuery,omitempty"`
	SecurityGroupType    *string                             `json:"SecurityGroupType,omitempty" xml:"SecurityGroupType,omitempty"`
	DryRun               *bool                               `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	Tag                  []*DescribeSecurityGroupsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsRequest) SetOwnerId(v int64) *DescribeSecurityGroupsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetResourceOwnerAccount(v string) *DescribeSecurityGroupsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetResourceOwnerId(v int64) *DescribeSecurityGroupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetRegionId(v string) *DescribeSecurityGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetVpcId(v string) *DescribeSecurityGroupsRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetPageNumber(v int32) *DescribeSecurityGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetPageSize(v int32) *DescribeSecurityGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetOwnerAccount(v string) *DescribeSecurityGroupsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupIds(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupIds = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetResourceGroupId(v string) *DescribeSecurityGroupsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetNetworkType(v string) *DescribeSecurityGroupsRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupId(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupName(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetIsQueryEcsCount(v bool) *DescribeSecurityGroupsRequest {
	s.IsQueryEcsCount = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetFuzzyQuery(v bool) *DescribeSecurityGroupsRequest {
	s.FuzzyQuery = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupType(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupType = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetDryRun(v bool) *DescribeSecurityGroupsRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetTag(v []*DescribeSecurityGroupsRequestTag) *DescribeSecurityGroupsRequest {
	s.Tag = v
	return s
}

type DescribeSecurityGroupsRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSecurityGroupsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsRequestTag) SetKey(v string) *DescribeSecurityGroupsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeSecurityGroupsRequestTag) SetValue(v string) *DescribeSecurityGroupsRequestTag {
	s.Value = &v
	return s
}

type DescribeSecurityGroupsResponseBody struct {
	SecurityGroups []*DescribeSecurityGroupsResponseBodySecurityGroups `json:"SecurityGroups,omitempty" xml:"SecurityGroups,omitempty" type:"Repeated"`
	TotalCount     *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize       *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber     *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RegionId       *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeSecurityGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBody) SetSecurityGroups(v []*DescribeSecurityGroupsResponseBodySecurityGroups) *DescribeSecurityGroupsResponseBody {
	s.SecurityGroups = v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetTotalCount(v int32) *DescribeSecurityGroupsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetPageSize(v int32) *DescribeSecurityGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetRequestId(v string) *DescribeSecurityGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetPageNumber(v int32) *DescribeSecurityGroupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetRegionId(v string) *DescribeSecurityGroupsResponseBody {
	s.RegionId = &v
	return s
}

type DescribeSecurityGroupsResponseBodySecurityGroups struct {
	CreationTime            *string                                                 `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	VpcId                   *string                                                 `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	SecurityGroupId         *string                                                 `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	Tags                    []*DescribeSecurityGroupsResponseBodySecurityGroupsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	ServiceID               *int64                                                  `json:"ServiceID,omitempty" xml:"ServiceID,omitempty"`
	ServiceManaged          *bool                                                   `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	Description             *string                                                 `json:"Description,omitempty" xml:"Description,omitempty"`
	ResourceGroupId         *string                                                 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SecurityGroupName       *string                                                 `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	EcsCount                *int32                                                  `json:"EcsCount,omitempty" xml:"EcsCount,omitempty"`
	SecurityGroupType       *string                                                 `json:"SecurityGroupType,omitempty" xml:"SecurityGroupType,omitempty"`
	AvailableInstanceAmount *int32                                                  `json:"AvailableInstanceAmount,omitempty" xml:"AvailableInstanceAmount,omitempty"`
}

func (s DescribeSecurityGroupsResponseBodySecurityGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBodySecurityGroups) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetCreationTime(v string) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.CreationTime = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetVpcId(v string) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.VpcId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetSecurityGroupId(v string) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetTags(v []*DescribeSecurityGroupsResponseBodySecurityGroupsTags) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.Tags = v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetServiceID(v int64) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.ServiceID = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetServiceManaged(v bool) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetDescription(v string) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetResourceGroupId(v string) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetSecurityGroupName(v string) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetEcsCount(v int32) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.EcsCount = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetSecurityGroupType(v string) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.SecurityGroupType = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetAvailableInstanceAmount(v int32) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.AvailableInstanceAmount = &v
	return s
}

type DescribeSecurityGroupsResponseBodySecurityGroupsTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsTags) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsTags) SetTagValue(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsTags {
	s.TagValue = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsTags) SetTagKey(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsTags {
	s.TagKey = &v
	return s
}

type DescribeSecurityGroupsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSecurityGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponse) SetHeaders(v map[string]*string) *DescribeSecurityGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetBody(v *DescribeSecurityGroupsResponseBody) *DescribeSecurityGroupsResponse {
	s.Body = v
	return s
}

type DescribeSendFileResultsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InvokeId             *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeSendFileResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSendFileResultsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSendFileResultsRequest) SetOwnerId(v int64) *DescribeSendFileResultsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSendFileResultsRequest) SetResourceOwnerAccount(v string) *DescribeSendFileResultsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSendFileResultsRequest) SetResourceOwnerId(v int64) *DescribeSendFileResultsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSendFileResultsRequest) SetOwnerAccount(v string) *DescribeSendFileResultsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSendFileResultsRequest) SetRegionId(v string) *DescribeSendFileResultsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSendFileResultsRequest) SetInvokeId(v string) *DescribeSendFileResultsRequest {
	s.InvokeId = &v
	return s
}

func (s *DescribeSendFileResultsRequest) SetName(v string) *DescribeSendFileResultsRequest {
	s.Name = &v
	return s
}

func (s *DescribeSendFileResultsRequest) SetInstanceId(v string) *DescribeSendFileResultsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSendFileResultsRequest) SetPageNumber(v int64) *DescribeSendFileResultsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSendFileResultsRequest) SetPageSize(v int64) *DescribeSendFileResultsRequest {
	s.PageSize = &v
	return s
}

type DescribeSendFileResultsResponseBody struct {
	TotalCount  *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize    *int64                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber  *int64                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Invocations []*DescribeSendFileResultsResponseBodyInvocations `json:"Invocations,omitempty" xml:"Invocations,omitempty" type:"Repeated"`
}

func (s DescribeSendFileResultsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSendFileResultsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSendFileResultsResponseBody) SetTotalCount(v int64) *DescribeSendFileResultsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeSendFileResultsResponseBody) SetPageSize(v int64) *DescribeSendFileResultsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSendFileResultsResponseBody) SetRequestId(v string) *DescribeSendFileResultsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSendFileResultsResponseBody) SetPageNumber(v int64) *DescribeSendFileResultsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSendFileResultsResponseBody) SetInvocations(v []*DescribeSendFileResultsResponseBodyInvocations) *DescribeSendFileResultsResponseBody {
	s.Invocations = v
	return s
}

type DescribeSendFileResultsResponseBodyInvocations struct {
	CreationTime     *string                                                          `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ContentType      *string                                                          `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	InvocationStatus *string                                                          `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	TargetDir        *string                                                          `json:"TargetDir,omitempty" xml:"TargetDir,omitempty"`
	InvokeInstances  []*DescribeSendFileResultsResponseBodyInvocationsInvokeInstances `json:"InvokeInstances,omitempty" xml:"InvokeInstances,omitempty" type:"Repeated"`
	FileOwner        *string                                                          `json:"FileOwner,omitempty" xml:"FileOwner,omitempty"`
	VmCount          *int32                                                           `json:"VmCount,omitempty" xml:"VmCount,omitempty"`
	Description      *string                                                          `json:"Description,omitempty" xml:"Description,omitempty"`
	FileMode         *string                                                          `json:"FileMode,omitempty" xml:"FileMode,omitempty"`
	FileGroup        *string                                                          `json:"FileGroup,omitempty" xml:"FileGroup,omitempty"`
	Name             *string                                                          `json:"Name,omitempty" xml:"Name,omitempty"`
	InvokeId         *string                                                          `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	Content          *string                                                          `json:"Content,omitempty" xml:"Content,omitempty"`
	Overwrite        *string                                                          `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
}

func (s DescribeSendFileResultsResponseBodyInvocations) String() string {
	return tea.Prettify(s)
}

func (s DescribeSendFileResultsResponseBodyInvocations) GoString() string {
	return s.String()
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetCreationTime(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.CreationTime = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetContentType(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.ContentType = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetInvocationStatus(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetTargetDir(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.TargetDir = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetInvokeInstances(v []*DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) *DescribeSendFileResultsResponseBodyInvocations {
	s.InvokeInstances = v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetFileOwner(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.FileOwner = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetVmCount(v int32) *DescribeSendFileResultsResponseBodyInvocations {
	s.VmCount = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetDescription(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.Description = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetFileMode(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.FileMode = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetFileGroup(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.FileGroup = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetName(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.Name = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetInvokeId(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.InvokeId = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetContent(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.Content = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocations) SetOverwrite(v string) *DescribeSendFileResultsResponseBodyInvocations {
	s.Overwrite = &v
	return s
}

type DescribeSendFileResultsResponseBodyInvocationsInvokeInstances struct {
	CreationTime     *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	StartTime        *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	InvocationStatus *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	FinishTime       *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	UpdateTime       *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	ErrorInfo        *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
	ErrorCode        *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) GoString() string {
	return s.String()
}

func (s *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) SetCreationTime(v string) *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances {
	s.CreationTime = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) SetStartTime(v string) *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances {
	s.StartTime = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) SetInvocationStatus(v string) *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) SetFinishTime(v string) *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances {
	s.FinishTime = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) SetUpdateTime(v string) *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances {
	s.UpdateTime = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) SetErrorInfo(v string) *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances {
	s.ErrorInfo = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) SetErrorCode(v string) *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances) SetInstanceId(v string) *DescribeSendFileResultsResponseBodyInvocationsInvokeInstances {
	s.InstanceId = &v
	return s
}

type DescribeSendFileResultsResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSendFileResultsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSendFileResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSendFileResultsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSendFileResultsResponse) SetHeaders(v map[string]*string) *DescribeSendFileResultsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSendFileResultsResponse) SetBody(v *DescribeSendFileResultsResponseBody) *DescribeSendFileResultsResponse {
	s.Body = v
	return s
}

type DescribeSnapshotLinksRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DiskIds              *string `json:"DiskIds,omitempty" xml:"DiskIds,omitempty"`
	SnapshotLinkIds      *string `json:"SnapshotLinkIds,omitempty" xml:"SnapshotLinkIds,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeSnapshotLinksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotLinksRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotLinksRequest) SetOwnerId(v int64) *DescribeSnapshotLinksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotLinksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetResourceOwnerId(v int64) *DescribeSnapshotLinksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetOwnerAccount(v string) *DescribeSnapshotLinksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetRegionId(v string) *DescribeSnapshotLinksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetInstanceId(v string) *DescribeSnapshotLinksRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetDiskIds(v string) *DescribeSnapshotLinksRequest {
	s.DiskIds = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetSnapshotLinkIds(v string) *DescribeSnapshotLinksRequest {
	s.SnapshotLinkIds = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetPageNumber(v int32) *DescribeSnapshotLinksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetPageSize(v int32) *DescribeSnapshotLinksRequest {
	s.PageSize = &v
	return s
}

type DescribeSnapshotLinksResponseBody struct {
	TotalCount    *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	SnapshotLinks []*DescribeSnapshotLinksResponseBodySnapshotLinks `json:"SnapshotLinks,omitempty" xml:"SnapshotLinks,omitempty" type:"Repeated"`
	PageSize      *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber    *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeSnapshotLinksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotLinksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotLinksResponseBody) SetTotalCount(v int32) *DescribeSnapshotLinksResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBody) SetSnapshotLinks(v []*DescribeSnapshotLinksResponseBodySnapshotLinks) *DescribeSnapshotLinksResponseBody {
	s.SnapshotLinks = v
	return s
}

func (s *DescribeSnapshotLinksResponseBody) SetPageSize(v int32) *DescribeSnapshotLinksResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBody) SetRequestId(v string) *DescribeSnapshotLinksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBody) SetPageNumber(v int32) *DescribeSnapshotLinksResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeSnapshotLinksResponseBodySnapshotLinks struct {
	InstantAccess  *bool   `json:"InstantAccess,omitempty" xml:"InstantAccess,omitempty"`
	TotalSize      *int64  `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
	SourceDiskName *string `json:"SourceDiskName,omitempty" xml:"SourceDiskName,omitempty"`
	SourceDiskSize *int32  `json:"SourceDiskSize,omitempty" xml:"SourceDiskSize,omitempty"`
	SourceDiskType *string `json:"SourceDiskType,omitempty" xml:"SourceDiskType,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TotalCount     *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	SnapshotLinkId *string `json:"SnapshotLinkId,omitempty" xml:"SnapshotLinkId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SourceDiskId   *string `json:"SourceDiskId,omitempty" xml:"SourceDiskId,omitempty"`
	InstanceName   *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Category       *string `json:"Category,omitempty" xml:"Category,omitempty"`
}

func (s DescribeSnapshotLinksResponseBodySnapshotLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotLinksResponseBodySnapshotLinks) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetInstantAccess(v bool) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.InstantAccess = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetTotalSize(v int64) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.TotalSize = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetSourceDiskName(v string) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.SourceDiskName = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetSourceDiskSize(v int32) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.SourceDiskSize = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetSourceDiskType(v string) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.SourceDiskType = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetInstanceId(v string) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.InstanceId = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetTotalCount(v int32) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.TotalCount = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetSnapshotLinkId(v string) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.SnapshotLinkId = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetRegionId(v string) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetSourceDiskId(v string) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.SourceDiskId = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetInstanceName(v string) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.InstanceName = &v
	return s
}

func (s *DescribeSnapshotLinksResponseBodySnapshotLinks) SetCategory(v string) *DescribeSnapshotLinksResponseBodySnapshotLinks {
	s.Category = &v
	return s
}

type DescribeSnapshotLinksResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSnapshotLinksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSnapshotLinksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotLinksResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotLinksResponse) SetHeaders(v map[string]*string) *DescribeSnapshotLinksResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnapshotLinksResponse) SetBody(v *DescribeSnapshotLinksResponseBody) *DescribeSnapshotLinksResponse {
	s.Body = v
	return s
}

type DescribeSnapshotMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeSnapshotMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotMonitorDataRequest) SetOwnerId(v int64) *DescribeSnapshotMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeSnapshotMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetRegionId(v string) *DescribeSnapshotMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetStartTime(v string) *DescribeSnapshotMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetEndTime(v string) *DescribeSnapshotMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetPeriod(v int32) *DescribeSnapshotMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetCategory(v string) *DescribeSnapshotMonitorDataRequest {
	s.Category = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetOwnerAccount(v string) *DescribeSnapshotMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSnapshotMonitorDataResponseBody struct {
	RequestId   *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MonitorData []*DescribeSnapshotMonitorDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Repeated"`
}

func (s DescribeSnapshotMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotMonitorDataResponseBody) SetRequestId(v string) *DescribeSnapshotMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotMonitorDataResponseBody) SetMonitorData(v []*DescribeSnapshotMonitorDataResponseBodyMonitorData) *DescribeSnapshotMonitorDataResponseBody {
	s.MonitorData = v
	return s
}

type DescribeSnapshotMonitorDataResponseBodyMonitorData struct {
	Size      *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeSnapshotMonitorDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotMonitorDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotMonitorDataResponseBodyMonitorData) SetSize(v int64) *DescribeSnapshotMonitorDataResponseBodyMonitorData {
	s.Size = &v
	return s
}

func (s *DescribeSnapshotMonitorDataResponseBodyMonitorData) SetTimeStamp(v string) *DescribeSnapshotMonitorDataResponseBodyMonitorData {
	s.TimeStamp = &v
	return s
}

type DescribeSnapshotMonitorDataResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSnapshotMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSnapshotMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeSnapshotMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnapshotMonitorDataResponse) SetBody(v *DescribeSnapshotMonitorDataResponseBody) *DescribeSnapshotMonitorDataResponse {
	s.Body = v
	return s
}

type DescribeSnapshotPackageRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeSnapshotPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotPackageRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotPackageRequest) SetOwnerId(v int64) *DescribeSnapshotPackageRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotPackageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetResourceOwnerId(v int64) *DescribeSnapshotPackageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetPageNumber(v int32) *DescribeSnapshotPackageRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetPageSize(v int32) *DescribeSnapshotPackageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetRegionId(v string) *DescribeSnapshotPackageRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetOwnerAccount(v string) *DescribeSnapshotPackageRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSnapshotPackageResponseBody struct {
	TotalCount       *int32                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize         *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId        *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	SnapshotPackages []*DescribeSnapshotPackageResponseBodySnapshotPackages `json:"SnapshotPackages,omitempty" xml:"SnapshotPackages,omitempty" type:"Repeated"`
}

func (s DescribeSnapshotPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotPackageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotPackageResponseBody) SetTotalCount(v int32) *DescribeSnapshotPackageResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeSnapshotPackageResponseBody) SetPageSize(v int32) *DescribeSnapshotPackageResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotPackageResponseBody) SetRequestId(v string) *DescribeSnapshotPackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotPackageResponseBody) SetPageNumber(v int32) *DescribeSnapshotPackageResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotPackageResponseBody) SetSnapshotPackages(v []*DescribeSnapshotPackageResponseBodySnapshotPackages) *DescribeSnapshotPackageResponseBody {
	s.SnapshotPackages = v
	return s
}

type DescribeSnapshotPackageResponseBodySnapshotPackages struct {
	DisplayName  *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	InitCapacity *int64  `json:"InitCapacity,omitempty" xml:"InitCapacity,omitempty"`
}

func (s DescribeSnapshotPackageResponseBodySnapshotPackages) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotPackageResponseBodySnapshotPackages) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotPackageResponseBodySnapshotPackages) SetDisplayName(v string) *DescribeSnapshotPackageResponseBodySnapshotPackages {
	s.DisplayName = &v
	return s
}

func (s *DescribeSnapshotPackageResponseBodySnapshotPackages) SetEndTime(v string) *DescribeSnapshotPackageResponseBodySnapshotPackages {
	s.EndTime = &v
	return s
}

func (s *DescribeSnapshotPackageResponseBodySnapshotPackages) SetStartTime(v string) *DescribeSnapshotPackageResponseBodySnapshotPackages {
	s.StartTime = &v
	return s
}

func (s *DescribeSnapshotPackageResponseBodySnapshotPackages) SetInitCapacity(v int64) *DescribeSnapshotPackageResponseBodySnapshotPackages {
	s.InitCapacity = &v
	return s
}

type DescribeSnapshotPackageResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSnapshotPackageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSnapshotPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotPackageResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotPackageResponse) SetHeaders(v map[string]*string) *DescribeSnapshotPackageResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnapshotPackageResponse) SetBody(v *DescribeSnapshotPackageResponseBody) *DescribeSnapshotPackageResponse {
	s.Body = v
	return s
}

type DescribeSnapshotsRequest struct {
	Filter               []*DescribeSnapshotsRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	OwnerId              *int64                            `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                           `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                            `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DiskId               *string                           `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	SnapshotLinkId       *string                           `json:"SnapshotLinkId,omitempty" xml:"SnapshotLinkId,omitempty"`
	RegionId             *string                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SnapshotIds          *string                           `json:"SnapshotIds,omitempty" xml:"SnapshotIds,omitempty"`
	PageNumber           *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	NextToken            *string                           `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	MaxResults           *int32                            `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	OwnerAccount         *string                           `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	SnapshotName         *string                           `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	Status               *string                           `json:"Status,omitempty" xml:"Status,omitempty"`
	SnapshotType         *string                           `json:"SnapshotType,omitempty" xml:"SnapshotType,omitempty"`
	Usage                *string                           `json:"Usage,omitempty" xml:"Usage,omitempty"`
	SourceDiskType       *string                           `json:"SourceDiskType,omitempty" xml:"SourceDiskType,omitempty"`
	Encrypted            *bool                             `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	ResourceGroupId      *string                           `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	DryRun               *bool                             `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	KMSKeyId             *string                           `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	Category             *string                           `json:"Category,omitempty" xml:"Category,omitempty"`
	Tag                  []*DescribeSnapshotsRequestTag    `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeSnapshotsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsRequest) SetFilter(v []*DescribeSnapshotsRequestFilter) *DescribeSnapshotsRequest {
	s.Filter = v
	return s
}

func (s *DescribeSnapshotsRequest) SetOwnerId(v int64) *DescribeSnapshotsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetResourceOwnerId(v int64) *DescribeSnapshotsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetInstanceId(v string) *DescribeSnapshotsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetDiskId(v string) *DescribeSnapshotsRequest {
	s.DiskId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotLinkId(v string) *DescribeSnapshotsRequest {
	s.SnapshotLinkId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetRegionId(v string) *DescribeSnapshotsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotIds(v string) *DescribeSnapshotsRequest {
	s.SnapshotIds = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetPageNumber(v int32) *DescribeSnapshotsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetPageSize(v int32) *DescribeSnapshotsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetNextToken(v string) *DescribeSnapshotsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetMaxResults(v int32) *DescribeSnapshotsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetOwnerAccount(v string) *DescribeSnapshotsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotName(v string) *DescribeSnapshotsRequest {
	s.SnapshotName = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetStatus(v string) *DescribeSnapshotsRequest {
	s.Status = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotType(v string) *DescribeSnapshotsRequest {
	s.SnapshotType = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetUsage(v string) *DescribeSnapshotsRequest {
	s.Usage = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSourceDiskType(v string) *DescribeSnapshotsRequest {
	s.SourceDiskType = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetEncrypted(v bool) *DescribeSnapshotsRequest {
	s.Encrypted = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetResourceGroupId(v string) *DescribeSnapshotsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetDryRun(v bool) *DescribeSnapshotsRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetKMSKeyId(v string) *DescribeSnapshotsRequest {
	s.KMSKeyId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetCategory(v string) *DescribeSnapshotsRequest {
	s.Category = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetTag(v []*DescribeSnapshotsRequestTag) *DescribeSnapshotsRequest {
	s.Tag = v
	return s
}

type DescribeSnapshotsRequestFilter struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSnapshotsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsRequestFilter) SetKey(v string) *DescribeSnapshotsRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeSnapshotsRequestFilter) SetValue(v string) *DescribeSnapshotsRequestFilter {
	s.Value = &v
	return s
}

type DescribeSnapshotsRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSnapshotsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsRequestTag) SetKey(v string) *DescribeSnapshotsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeSnapshotsRequestTag) SetValue(v string) *DescribeSnapshotsRequestTag {
	s.Value = &v
	return s
}

type DescribeSnapshotsResponseBody struct {
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Snapshots  []*DescribeSnapshotsResponseBodySnapshots `json:"Snapshots,omitempty" xml:"Snapshots,omitempty" type:"Repeated"`
}

func (s DescribeSnapshotsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBody) SetTotalCount(v int32) *DescribeSnapshotsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetNextToken(v string) *DescribeSnapshotsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetPageSize(v int32) *DescribeSnapshotsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetRequestId(v string) *DescribeSnapshotsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetPageNumber(v int32) *DescribeSnapshotsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetSnapshots(v []*DescribeSnapshotsResponseBodySnapshots) *DescribeSnapshotsResponseBody {
	s.Snapshots = v
	return s
}

type DescribeSnapshotsResponseBodySnapshots struct {
	CreationTime               *string                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status                     *string                                       `json:"Status,omitempty" xml:"Status,omitempty"`
	InstantAccess              *bool                                         `json:"InstantAccess,omitempty" xml:"InstantAccess,omitempty"`
	RetentionDays              *int32                                        `json:"RetentionDays,omitempty" xml:"RetentionDays,omitempty"`
	SourceDiskSize             *string                                       `json:"SourceDiskSize,omitempty" xml:"SourceDiskSize,omitempty"`
	Tags                       []*DescribeSnapshotsResponseBodySnapshotsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	LastModifiedTime           *string                                       `json:"LastModifiedTime,omitempty" xml:"LastModifiedTime,omitempty"`
	Encrypted                  *bool                                         `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	SourceDiskId               *string                                       `json:"SourceDiskId,omitempty" xml:"SourceDiskId,omitempty"`
	Description                *string                                       `json:"Description,omitempty" xml:"Description,omitempty"`
	InstantAccessRetentionDays *int32                                        `json:"InstantAccessRetentionDays,omitempty" xml:"InstantAccessRetentionDays,omitempty"`
	KMSKeyId                   *string                                       `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	Progress                   *string                                       `json:"Progress,omitempty" xml:"Progress,omitempty"`
	RemainTime                 *int32                                        `json:"RemainTime,omitempty" xml:"RemainTime,omitempty"`
	SourceDiskType             *string                                       `json:"SourceDiskType,omitempty" xml:"SourceDiskType,omitempty"`
	SourceStorageType          *string                                       `json:"SourceStorageType,omitempty" xml:"SourceStorageType,omitempty"`
	Usage                      *string                                       `json:"Usage,omitempty" xml:"Usage,omitempty"`
	SnapshotType               *string                                       `json:"SnapshotType,omitempty" xml:"SnapshotType,omitempty"`
	SnapshotName               *string                                       `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	SnapshotId                 *string                                       `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	ResourceGroupId            *string                                       `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Category                   *string                                       `json:"Category,omitempty" xml:"Category,omitempty"`
	SnapshotSN                 *string                                       `json:"SnapshotSN,omitempty" xml:"SnapshotSN,omitempty"`
	ProductCode                *string                                       `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeSnapshotsResponseBodySnapshots) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBodySnapshots) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetCreationTime(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.CreationTime = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetStatus(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Status = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetInstantAccess(v bool) *DescribeSnapshotsResponseBodySnapshots {
	s.InstantAccess = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetRetentionDays(v int32) *DescribeSnapshotsResponseBodySnapshots {
	s.RetentionDays = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceDiskSize(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceDiskSize = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetTags(v []*DescribeSnapshotsResponseBodySnapshotsTags) *DescribeSnapshotsResponseBodySnapshots {
	s.Tags = v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetLastModifiedTime(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.LastModifiedTime = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetEncrypted(v bool) *DescribeSnapshotsResponseBodySnapshots {
	s.Encrypted = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceDiskId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceDiskId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetDescription(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Description = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetInstantAccessRetentionDays(v int32) *DescribeSnapshotsResponseBodySnapshots {
	s.InstantAccessRetentionDays = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetKMSKeyId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.KMSKeyId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetProgress(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Progress = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetRemainTime(v int32) *DescribeSnapshotsResponseBodySnapshots {
	s.RemainTime = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceDiskType(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceDiskType = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceStorageType(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceStorageType = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetUsage(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Usage = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotType(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotType = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotName(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotName = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetResourceGroupId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetCategory(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Category = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotSN(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotSN = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetProductCode(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.ProductCode = &v
	return s
}

type DescribeSnapshotsResponseBodySnapshotsTags struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeSnapshotsResponseBodySnapshotsTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBodySnapshotsTags) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBodySnapshotsTags) SetTagValue(v string) *DescribeSnapshotsResponseBodySnapshotsTags {
	s.TagValue = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshotsTags) SetTagKey(v string) *DescribeSnapshotsResponseBodySnapshotsTags {
	s.TagKey = &v
	return s
}

type DescribeSnapshotsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSnapshotsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSnapshotsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponse) SetHeaders(v map[string]*string) *DescribeSnapshotsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnapshotsResponse) SetBody(v *DescribeSnapshotsResponseBody) *DescribeSnapshotsResponse {
	s.Body = v
	return s
}

type DescribeSnapshotsUsageRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeSnapshotsUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsUsageRequest) SetOwnerId(v int64) *DescribeSnapshotsUsageRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotsUsageRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotsUsageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotsUsageRequest) SetResourceOwnerId(v int64) *DescribeSnapshotsUsageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotsUsageRequest) SetOwnerAccount(v string) *DescribeSnapshotsUsageRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSnapshotsUsageRequest) SetRegionId(v string) *DescribeSnapshotsUsageRequest {
	s.RegionId = &v
	return s
}

type DescribeSnapshotsUsageResponseBody struct {
	SnapshotCount *int32  `json:"SnapshotCount,omitempty" xml:"SnapshotCount,omitempty"`
	SnapshotSize  *int64  `json:"SnapshotSize,omitempty" xml:"SnapshotSize,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSnapshotsUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsUsageResponseBody) SetSnapshotCount(v int32) *DescribeSnapshotsUsageResponseBody {
	s.SnapshotCount = &v
	return s
}

func (s *DescribeSnapshotsUsageResponseBody) SetSnapshotSize(v int64) *DescribeSnapshotsUsageResponseBody {
	s.SnapshotSize = &v
	return s
}

func (s *DescribeSnapshotsUsageResponseBody) SetRequestId(v string) *DescribeSnapshotsUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSnapshotsUsageResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSnapshotsUsageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSnapshotsUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsUsageResponse) SetHeaders(v map[string]*string) *DescribeSnapshotsUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnapshotsUsageResponse) SetBody(v *DescribeSnapshotsUsageResponseBody) *DescribeSnapshotsUsageResponse {
	s.Body = v
	return s
}

type DescribeSpotAdviceRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Cores                *int32    `json:"Cores,omitempty" xml:"Cores,omitempty"`
	Memory               *float32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	MinCores             *int32    `json:"MinCores,omitempty" xml:"MinCores,omitempty"`
	MinMemory            *float32  `json:"MinMemory,omitempty" xml:"MinMemory,omitempty"`
	ZoneId               *string   `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceTypeFamily   *string   `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	InstanceFamilyLevel  *string   `json:"InstanceFamilyLevel,omitempty" xml:"InstanceFamilyLevel,omitempty"`
	GpuSpec              *string   `json:"GpuSpec,omitempty" xml:"GpuSpec,omitempty"`
	GpuAmount            *int32    `json:"GpuAmount,omitempty" xml:"GpuAmount,omitempty"`
	NetworkType          *string   `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	IoOptimized          *string   `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	InstanceTypes        []*string `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Repeated"`
}

func (s DescribeSpotAdviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotAdviceRequest) GoString() string {
	return s.String()
}

func (s *DescribeSpotAdviceRequest) SetOwnerId(v int64) *DescribeSpotAdviceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetResourceOwnerAccount(v string) *DescribeSpotAdviceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetResourceOwnerId(v int64) *DescribeSpotAdviceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetOwnerAccount(v string) *DescribeSpotAdviceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetRegionId(v string) *DescribeSpotAdviceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetCores(v int32) *DescribeSpotAdviceRequest {
	s.Cores = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetMemory(v float32) *DescribeSpotAdviceRequest {
	s.Memory = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetMinCores(v int32) *DescribeSpotAdviceRequest {
	s.MinCores = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetMinMemory(v float32) *DescribeSpotAdviceRequest {
	s.MinMemory = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetZoneId(v string) *DescribeSpotAdviceRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetInstanceTypeFamily(v string) *DescribeSpotAdviceRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetInstanceFamilyLevel(v string) *DescribeSpotAdviceRequest {
	s.InstanceFamilyLevel = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetGpuSpec(v string) *DescribeSpotAdviceRequest {
	s.GpuSpec = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetGpuAmount(v int32) *DescribeSpotAdviceRequest {
	s.GpuAmount = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetNetworkType(v string) *DescribeSpotAdviceRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetIoOptimized(v string) *DescribeSpotAdviceRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeSpotAdviceRequest) SetInstanceTypes(v []*string) *DescribeSpotAdviceRequest {
	s.InstanceTypes = v
	return s
}

type DescribeSpotAdviceResponseBody struct {
	RequestId          *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AvailableSpotZones []*DescribeSpotAdviceResponseBodyAvailableSpotZones `json:"AvailableSpotZones,omitempty" xml:"AvailableSpotZones,omitempty" type:"Repeated"`
	RegionId           *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeSpotAdviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotAdviceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSpotAdviceResponseBody) SetRequestId(v string) *DescribeSpotAdviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSpotAdviceResponseBody) SetAvailableSpotZones(v []*DescribeSpotAdviceResponseBodyAvailableSpotZones) *DescribeSpotAdviceResponseBody {
	s.AvailableSpotZones = v
	return s
}

func (s *DescribeSpotAdviceResponseBody) SetRegionId(v string) *DescribeSpotAdviceResponseBody {
	s.RegionId = &v
	return s
}

type DescribeSpotAdviceResponseBodyAvailableSpotZones struct {
	AvailableSpotResources []*DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources `json:"AvailableSpotResources,omitempty" xml:"AvailableSpotResources,omitempty" type:"Repeated"`
	ZoneId                 *string                                                                   `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeSpotAdviceResponseBodyAvailableSpotZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotAdviceResponseBodyAvailableSpotZones) GoString() string {
	return s.String()
}

func (s *DescribeSpotAdviceResponseBodyAvailableSpotZones) SetAvailableSpotResources(v []*DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources) *DescribeSpotAdviceResponseBodyAvailableSpotZones {
	s.AvailableSpotResources = v
	return s
}

func (s *DescribeSpotAdviceResponseBodyAvailableSpotZones) SetZoneId(v string) *DescribeSpotAdviceResponseBodyAvailableSpotZones {
	s.ZoneId = &v
	return s
}

type DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources struct {
	InterruptRateDesc   *string  `json:"InterruptRateDesc,omitempty" xml:"InterruptRateDesc,omitempty"`
	AverageSpotDiscount *int32   `json:"AverageSpotDiscount,omitempty" xml:"AverageSpotDiscount,omitempty"`
	InstanceType        *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InterruptionRate    *float32 `json:"InterruptionRate,omitempty" xml:"InterruptionRate,omitempty"`
}

func (s DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources) GoString() string {
	return s.String()
}

func (s *DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources) SetInterruptRateDesc(v string) *DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources {
	s.InterruptRateDesc = &v
	return s
}

func (s *DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources) SetAverageSpotDiscount(v int32) *DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources {
	s.AverageSpotDiscount = &v
	return s
}

func (s *DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources) SetInstanceType(v string) *DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources {
	s.InstanceType = &v
	return s
}

func (s *DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources) SetInterruptionRate(v float32) *DescribeSpotAdviceResponseBodyAvailableSpotZonesAvailableSpotResources {
	s.InterruptionRate = &v
	return s
}

type DescribeSpotAdviceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSpotAdviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSpotAdviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotAdviceResponse) GoString() string {
	return s.String()
}

func (s *DescribeSpotAdviceResponse) SetHeaders(v map[string]*string) *DescribeSpotAdviceResponse {
	s.Headers = v
	return s
}

func (s *DescribeSpotAdviceResponse) SetBody(v *DescribeSpotAdviceResponseBody) *DescribeSpotAdviceResponse {
	s.Body = v
	return s
}

type DescribeSpotPriceHistoryRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	NetworkType          *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	SpotDuration         *int32  `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	IoOptimized          *string `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OSType               *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	Offset               *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
}

func (s DescribeSpotPriceHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotPriceHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeSpotPriceHistoryRequest) SetOwnerId(v int64) *DescribeSpotPriceHistoryRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetResourceOwnerAccount(v string) *DescribeSpotPriceHistoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetResourceOwnerId(v int64) *DescribeSpotPriceHistoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetOwnerAccount(v string) *DescribeSpotPriceHistoryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetRegionId(v string) *DescribeSpotPriceHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetZoneId(v string) *DescribeSpotPriceHistoryRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetNetworkType(v string) *DescribeSpotPriceHistoryRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetInstanceType(v string) *DescribeSpotPriceHistoryRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetSpotDuration(v int32) *DescribeSpotPriceHistoryRequest {
	s.SpotDuration = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetIoOptimized(v string) *DescribeSpotPriceHistoryRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetStartTime(v string) *DescribeSpotPriceHistoryRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetEndTime(v string) *DescribeSpotPriceHistoryRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetOSType(v string) *DescribeSpotPriceHistoryRequest {
	s.OSType = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetOffset(v int32) *DescribeSpotPriceHistoryRequest {
	s.Offset = &v
	return s
}

type DescribeSpotPriceHistoryResponseBody struct {
	RequestId  *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Currency   *string                                           `json:"Currency,omitempty" xml:"Currency,omitempty"`
	NextOffset *int32                                            `json:"NextOffset,omitempty" xml:"NextOffset,omitempty"`
	SpotPrices []*DescribeSpotPriceHistoryResponseBodySpotPrices `json:"SpotPrices,omitempty" xml:"SpotPrices,omitempty" type:"Repeated"`
}

func (s DescribeSpotPriceHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotPriceHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSpotPriceHistoryResponseBody) SetRequestId(v string) *DescribeSpotPriceHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseBody) SetCurrency(v string) *DescribeSpotPriceHistoryResponseBody {
	s.Currency = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseBody) SetNextOffset(v int32) *DescribeSpotPriceHistoryResponseBody {
	s.NextOffset = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseBody) SetSpotPrices(v []*DescribeSpotPriceHistoryResponseBodySpotPrices) *DescribeSpotPriceHistoryResponseBody {
	s.SpotPrices = v
	return s
}

type DescribeSpotPriceHistoryResponseBodySpotPrices struct {
	IoOptimized  *string  `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	ZoneId       *string  `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	SpotPrice    *float32 `json:"SpotPrice,omitempty" xml:"SpotPrice,omitempty"`
	Timestamp    *string  `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	NetworkType  *string  `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	InstanceType *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OriginPrice  *float32 `json:"OriginPrice,omitempty" xml:"OriginPrice,omitempty"`
}

func (s DescribeSpotPriceHistoryResponseBodySpotPrices) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotPriceHistoryResponseBodySpotPrices) GoString() string {
	return s.String()
}

func (s *DescribeSpotPriceHistoryResponseBodySpotPrices) SetIoOptimized(v string) *DescribeSpotPriceHistoryResponseBodySpotPrices {
	s.IoOptimized = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseBodySpotPrices) SetZoneId(v string) *DescribeSpotPriceHistoryResponseBodySpotPrices {
	s.ZoneId = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseBodySpotPrices) SetSpotPrice(v float32) *DescribeSpotPriceHistoryResponseBodySpotPrices {
	s.SpotPrice = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseBodySpotPrices) SetTimestamp(v string) *DescribeSpotPriceHistoryResponseBodySpotPrices {
	s.Timestamp = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseBodySpotPrices) SetNetworkType(v string) *DescribeSpotPriceHistoryResponseBodySpotPrices {
	s.NetworkType = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseBodySpotPrices) SetInstanceType(v string) *DescribeSpotPriceHistoryResponseBodySpotPrices {
	s.InstanceType = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseBodySpotPrices) SetOriginPrice(v float32) *DescribeSpotPriceHistoryResponseBodySpotPrices {
	s.OriginPrice = &v
	return s
}

type DescribeSpotPriceHistoryResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSpotPriceHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSpotPriceHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotPriceHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeSpotPriceHistoryResponse) SetHeaders(v map[string]*string) *DescribeSpotPriceHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeSpotPriceHistoryResponse) SetBody(v *DescribeSpotPriceHistoryResponseBody) *DescribeSpotPriceHistoryResponse {
	s.Body = v
	return s
}

type DescribeStorageCapacityUnitsRequest struct {
	OwnerId               *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount          *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId              *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber            *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Name                  *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Capacity              *int32    `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	AllocationType        *string   `json:"AllocationType,omitempty" xml:"AllocationType,omitempty"`
	StorageCapacityUnitId []*string `json:"StorageCapacityUnitId,omitempty" xml:"StorageCapacityUnitId,omitempty" type:"Repeated"`
	Status                []*string `json:"Status,omitempty" xml:"Status,omitempty" type:"Repeated"`
}

func (s DescribeStorageCapacityUnitsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitsRequest) SetOwnerId(v int64) *DescribeStorageCapacityUnitsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetResourceOwnerAccount(v string) *DescribeStorageCapacityUnitsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetResourceOwnerId(v int64) *DescribeStorageCapacityUnitsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetOwnerAccount(v string) *DescribeStorageCapacityUnitsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetRegionId(v string) *DescribeStorageCapacityUnitsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetPageNumber(v int32) *DescribeStorageCapacityUnitsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetPageSize(v int32) *DescribeStorageCapacityUnitsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetName(v string) *DescribeStorageCapacityUnitsRequest {
	s.Name = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetCapacity(v int32) *DescribeStorageCapacityUnitsRequest {
	s.Capacity = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetAllocationType(v string) *DescribeStorageCapacityUnitsRequest {
	s.AllocationType = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetStorageCapacityUnitId(v []*string) *DescribeStorageCapacityUnitsRequest {
	s.StorageCapacityUnitId = v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetStatus(v []*string) *DescribeStorageCapacityUnitsRequest {
	s.Status = v
	return s
}

type DescribeStorageCapacityUnitsResponseBody struct {
	TotalCount           *int32                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize             *int32                                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber           *int32                                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	StorageCapacityUnits []*DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits `json:"StorageCapacityUnits,omitempty" xml:"StorageCapacityUnits,omitempty" type:"Repeated"`
}

func (s DescribeStorageCapacityUnitsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitsResponseBody) SetTotalCount(v int32) *DescribeStorageCapacityUnitsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBody) SetPageSize(v int32) *DescribeStorageCapacityUnitsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBody) SetRequestId(v string) *DescribeStorageCapacityUnitsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBody) SetPageNumber(v int32) *DescribeStorageCapacityUnitsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBody) SetStorageCapacityUnits(v []*DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) *DescribeStorageCapacityUnitsResponseBody {
	s.StorageCapacityUnits = v
	return s
}

type DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits struct {
	CreationTime          *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status                *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StartTime             *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Capacity              *int32  `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
	AllocationStatus      *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
	ExpiredTime           *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	StorageCapacityUnitId *string `json:"StorageCapacityUnitId,omitempty" xml:"StorageCapacityUnitId,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetCreationTime(v string) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetStatus(v string) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.Status = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetStartTime(v string) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.StartTime = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetCapacity(v int32) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.Capacity = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetDescription(v string) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.Description = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetAllocationStatus(v string) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetExpiredTime(v string) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetStorageCapacityUnitId(v string) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.StorageCapacityUnitId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetName(v string) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.Name = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits) SetRegionId(v string) *DescribeStorageCapacityUnitsResponseBodyStorageCapacityUnits {
	s.RegionId = &v
	return s
}

type DescribeStorageCapacityUnitsResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeStorageCapacityUnitsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStorageCapacityUnitsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitsResponse) SetHeaders(v map[string]*string) *DescribeStorageCapacityUnitsResponse {
	s.Headers = v
	return s
}

func (s *DescribeStorageCapacityUnitsResponse) SetBody(v *DescribeStorageCapacityUnitsResponseBody) *DescribeStorageCapacityUnitsResponse {
	s.Body = v
	return s
}

type DescribeStorageSetDetailsRequest struct {
	OwnerId                   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount      *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId           *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount              *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken               *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StorageSetId              *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetPartitionNumber *int32  `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	DiskIds                   *string `json:"DiskIds,omitempty" xml:"DiskIds,omitempty"`
	PageNumber                *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeStorageSetDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsRequest) SetOwnerId(v int64) *DescribeStorageSetDetailsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetResourceOwnerAccount(v string) *DescribeStorageSetDetailsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetResourceOwnerId(v int64) *DescribeStorageSetDetailsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetOwnerAccount(v string) *DescribeStorageSetDetailsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetClientToken(v string) *DescribeStorageSetDetailsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetRegionId(v string) *DescribeStorageSetDetailsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetStorageSetId(v string) *DescribeStorageSetDetailsRequest {
	s.StorageSetId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetStorageSetPartitionNumber(v int32) *DescribeStorageSetDetailsRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetDiskIds(v string) *DescribeStorageSetDetailsRequest {
	s.DiskIds = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetPageNumber(v int32) *DescribeStorageSetDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetPageSize(v int32) *DescribeStorageSetDetailsRequest {
	s.PageSize = &v
	return s
}

type DescribeStorageSetDetailsResponseBody struct {
	TotalCount *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Disks      []*DescribeStorageSetDetailsResponseBodyDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Repeated"`
}

func (s DescribeStorageSetDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponseBody) SetTotalCount(v int32) *DescribeStorageSetDetailsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBody) SetPageSize(v int32) *DescribeStorageSetDetailsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBody) SetRequestId(v string) *DescribeStorageSetDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBody) SetPageNumber(v int32) *DescribeStorageSetDetailsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBody) SetDisks(v []*DescribeStorageSetDetailsResponseBodyDisks) *DescribeStorageSetDetailsResponseBody {
	s.Disks = v
	return s
}

type DescribeStorageSetDetailsResponseBodyDisks struct {
	CreationTime              *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DiskName                  *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	ZoneId                    *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	StorageSetId              *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	DiskId                    *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	Category                  *string `json:"Category,omitempty" xml:"Category,omitempty"`
	StorageSetPartitionNumber *int32  `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeStorageSetDetailsResponseBodyDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponseBodyDisks) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponseBodyDisks) SetCreationTime(v string) *DescribeStorageSetDetailsResponseBodyDisks {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisks) SetDiskName(v string) *DescribeStorageSetDetailsResponseBodyDisks {
	s.DiskName = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisks) SetZoneId(v string) *DescribeStorageSetDetailsResponseBodyDisks {
	s.ZoneId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisks) SetStorageSetId(v string) *DescribeStorageSetDetailsResponseBodyDisks {
	s.StorageSetId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisks) SetDiskId(v string) *DescribeStorageSetDetailsResponseBodyDisks {
	s.DiskId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisks) SetCategory(v string) *DescribeStorageSetDetailsResponseBodyDisks {
	s.Category = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisks) SetStorageSetPartitionNumber(v int32) *DescribeStorageSetDetailsResponseBodyDisks {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisks) SetRegionId(v string) *DescribeStorageSetDetailsResponseBodyDisks {
	s.RegionId = &v
	return s
}

type DescribeStorageSetDetailsResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeStorageSetDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStorageSetDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponse) SetHeaders(v map[string]*string) *DescribeStorageSetDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeStorageSetDetailsResponse) SetBody(v *DescribeStorageSetDetailsResponseBody) *DescribeStorageSetDetailsResponse {
	s.Body = v
	return s
}

type DescribeStorageSetsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StorageSetIds        *string `json:"StorageSetIds,omitempty" xml:"StorageSetIds,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	StorageSetName       *string `json:"StorageSetName,omitempty" xml:"StorageSetName,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeStorageSetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsRequest) SetOwnerId(v int64) *DescribeStorageSetsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetResourceOwnerAccount(v string) *DescribeStorageSetsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetResourceOwnerId(v int64) *DescribeStorageSetsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetOwnerAccount(v string) *DescribeStorageSetsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetClientToken(v string) *DescribeStorageSetsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetRegionId(v string) *DescribeStorageSetsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetStorageSetIds(v string) *DescribeStorageSetsRequest {
	s.StorageSetIds = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetZoneId(v string) *DescribeStorageSetsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetStorageSetName(v string) *DescribeStorageSetsRequest {
	s.StorageSetName = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetPageNumber(v int32) *DescribeStorageSetsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetPageSize(v int32) *DescribeStorageSetsRequest {
	s.PageSize = &v
	return s
}

type DescribeStorageSetsResponseBody struct {
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	StorageSets []*DescribeStorageSetsResponseBodyStorageSets `json:"StorageSets,omitempty" xml:"StorageSets,omitempty" type:"Repeated"`
}

func (s DescribeStorageSetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponseBody) SetTotalCount(v int32) *DescribeStorageSetsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeStorageSetsResponseBody) SetPageSize(v int32) *DescribeStorageSetsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageSetsResponseBody) SetRequestId(v string) *DescribeStorageSetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageSetsResponseBody) SetPageNumber(v int32) *DescribeStorageSetsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetsResponseBody) SetStorageSets(v []*DescribeStorageSetsResponseBodyStorageSets) *DescribeStorageSetsResponseBody {
	s.StorageSets = v
	return s
}

type DescribeStorageSetsResponseBodyStorageSets struct {
	CreationTime              *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description               *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ZoneId                    *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	StorageSetId              *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetPartitionNumber *int32  `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	StorageSetName            *string `json:"StorageSetName,omitempty" xml:"StorageSetName,omitempty"`
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeStorageSetsResponseBodyStorageSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponseBodyStorageSets) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponseBodyStorageSets) SetCreationTime(v string) *DescribeStorageSetsResponseBodyStorageSets {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSets) SetDescription(v string) *DescribeStorageSetsResponseBodyStorageSets {
	s.Description = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSets) SetZoneId(v string) *DescribeStorageSetsResponseBodyStorageSets {
	s.ZoneId = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSets) SetStorageSetId(v string) *DescribeStorageSetsResponseBodyStorageSets {
	s.StorageSetId = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSets) SetStorageSetPartitionNumber(v int32) *DescribeStorageSetsResponseBodyStorageSets {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSets) SetStorageSetName(v string) *DescribeStorageSetsResponseBodyStorageSets {
	s.StorageSetName = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSets) SetRegionId(v string) *DescribeStorageSetsResponseBodyStorageSets {
	s.RegionId = &v
	return s
}

type DescribeStorageSetsResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeStorageSetsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStorageSetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponse) SetHeaders(v map[string]*string) *DescribeStorageSetsResponse {
	s.Headers = v
	return s
}

func (s *DescribeStorageSetsResponse) SetBody(v *DescribeStorageSetsResponseBody) *DescribeStorageSetsResponse {
	s.Body = v
	return s
}

type DescribeTagsRequest struct {
	OwnerId              *int64                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int32                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ResourceType         *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId           *string                   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	RegionId             *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Category             *string                   `json:"Category,omitempty" xml:"Category,omitempty"`
	Tag                  []*DescribeTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsRequest) SetOwnerId(v int64) *DescribeTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerAccount(v string) *DescribeTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerId(v int64) *DescribeTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetPageSize(v int32) *DescribeTagsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTagsRequest) SetPageNumber(v int32) *DescribeTagsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceType(v string) *DescribeTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceId(v string) *DescribeTagsRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeTagsRequest) SetRegionId(v string) *DescribeTagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTagsRequest) SetCategory(v string) *DescribeTagsRequest {
	s.Category = &v
	return s
}

func (s *DescribeTagsRequest) SetTag(v []*DescribeTagsRequestTag) *DescribeTagsRequest {
	s.Tag = v
	return s
}

type DescribeTagsRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeTagsRequestTag) SetKey(v string) *DescribeTagsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeTagsRequestTag) SetValue(v string) *DescribeTagsRequestTag {
	s.Value = &v
	return s
}

type DescribeTagsResponseBody struct {
	TotalCount *int32                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Tags       []*DescribeTagsResponseBodyTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBody) SetTotalCount(v int32) *DescribeTagsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeTagsResponseBody) SetRequestId(v string) *DescribeTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsResponseBody) SetPageSize(v int32) *DescribeTagsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTagsResponseBody) SetPageNumber(v int32) *DescribeTagsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagsResponseBody) SetTags(v []*DescribeTagsResponseBodyTags) *DescribeTagsResponseBody {
	s.Tags = v
	return s
}

type DescribeTagsResponseBodyTags struct {
	ResourceTypeCount *DescribeTagsResponseBodyTagsResourceTypeCount `json:"ResourceTypeCount,omitempty" xml:"ResourceTypeCount,omitempty" type:"Struct"`
	TagValue          *string                                        `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey            *string                                        `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeTagsResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseBodyTags) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBodyTags) SetResourceTypeCount(v *DescribeTagsResponseBodyTagsResourceTypeCount) *DescribeTagsResponseBodyTags {
	s.ResourceTypeCount = v
	return s
}

func (s *DescribeTagsResponseBodyTags) SetTagValue(v string) *DescribeTagsResponseBodyTags {
	s.TagValue = &v
	return s
}

func (s *DescribeTagsResponseBodyTags) SetTagKey(v string) *DescribeTagsResponseBodyTags {
	s.TagKey = &v
	return s
}

type DescribeTagsResponseBodyTagsResourceTypeCount struct {
	Instance         *int32 `json:"Instance,omitempty" xml:"Instance,omitempty"`
	Image            *int32 `json:"Image,omitempty" xml:"Image,omitempty"`
	SnapshotPolicy   *int32 `json:"SnapshotPolicy,omitempty" xml:"SnapshotPolicy,omitempty"`
	Ddh              *int32 `json:"Ddh,omitempty" xml:"Ddh,omitempty"`
	Securitygroup    *int32 `json:"Securitygroup,omitempty" xml:"Securitygroup,omitempty"`
	Snapshot         *int32 `json:"Snapshot,omitempty" xml:"Snapshot,omitempty"`
	ReservedInstance *int32 `json:"ReservedInstance,omitempty" xml:"ReservedInstance,omitempty"`
	Eni              *int32 `json:"Eni,omitempty" xml:"Eni,omitempty"`
	LaunchTemplate   *int32 `json:"LaunchTemplate,omitempty" xml:"LaunchTemplate,omitempty"`
	KeyPair          *int32 `json:"KeyPair,omitempty" xml:"KeyPair,omitempty"`
	Disk             *int32 `json:"Disk,omitempty" xml:"Disk,omitempty"`
	Volume           *int32 `json:"Volume,omitempty" xml:"Volume,omitempty"`
}

func (s DescribeTagsResponseBodyTagsResourceTypeCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseBodyTagsResourceTypeCount) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetInstance(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.Instance = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetImage(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.Image = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetSnapshotPolicy(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.SnapshotPolicy = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetDdh(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.Ddh = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetSecuritygroup(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.Securitygroup = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetSnapshot(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.Snapshot = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetReservedInstance(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.ReservedInstance = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetEni(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.Eni = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetLaunchTemplate(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.LaunchTemplate = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetKeyPair(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.KeyPair = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetDisk(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.Disk = &v
	return s
}

func (s *DescribeTagsResponseBodyTagsResourceTypeCount) SetVolume(v int32) *DescribeTagsResponseBodyTagsResourceTypeCount {
	s.Volume = &v
	return s
}

type DescribeTagsResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponse) SetHeaders(v map[string]*string) *DescribeTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsResponse) SetBody(v *DescribeTagsResponseBody) *DescribeTagsResponse {
	s.Body = v
	return s
}

type DescribeTaskAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TaskId               *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeTaskAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeRequest) SetOwnerId(v int64) *DescribeTaskAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTaskAttributeRequest) SetResourceOwnerAccount(v string) *DescribeTaskAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTaskAttributeRequest) SetResourceOwnerId(v int64) *DescribeTaskAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTaskAttributeRequest) SetRegionId(v string) *DescribeTaskAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTaskAttributeRequest) SetTaskId(v string) *DescribeTaskAttributeRequest {
	s.TaskId = &v
	return s
}

type DescribeTaskAttributeResponseBody struct {
	TaskId               *string                                                  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId            *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskAction           *string                                                  `json:"TaskAction,omitempty" xml:"TaskAction,omitempty"`
	SuccessCount         *int32                                                   `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
	TaskStatus           *string                                                  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	FinishedTime         *string                                                  `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	TotalCount           *int32                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TaskProcess          *string                                                  `json:"TaskProcess,omitempty" xml:"TaskProcess,omitempty"`
	SupportCancel        *string                                                  `json:"SupportCancel,omitempty" xml:"SupportCancel,omitempty"`
	OperationProgressSet []*DescribeTaskAttributeResponseBodyOperationProgressSet `json:"OperationProgressSet,omitempty" xml:"OperationProgressSet,omitempty" type:"Repeated"`
	CreationTime         *string                                                  `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FailedCount          *int32                                                   `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	RegionId             *string                                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeTaskAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeResponseBody) SetTaskId(v string) *DescribeTaskAttributeResponseBody {
	s.TaskId = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetRequestId(v string) *DescribeTaskAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetTaskAction(v string) *DescribeTaskAttributeResponseBody {
	s.TaskAction = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetSuccessCount(v int32) *DescribeTaskAttributeResponseBody {
	s.SuccessCount = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetTaskStatus(v string) *DescribeTaskAttributeResponseBody {
	s.TaskStatus = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetFinishedTime(v string) *DescribeTaskAttributeResponseBody {
	s.FinishedTime = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetTotalCount(v int32) *DescribeTaskAttributeResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetTaskProcess(v string) *DescribeTaskAttributeResponseBody {
	s.TaskProcess = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetSupportCancel(v string) *DescribeTaskAttributeResponseBody {
	s.SupportCancel = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetOperationProgressSet(v []*DescribeTaskAttributeResponseBodyOperationProgressSet) *DescribeTaskAttributeResponseBody {
	s.OperationProgressSet = v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetCreationTime(v string) *DescribeTaskAttributeResponseBody {
	s.CreationTime = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetFailedCount(v int32) *DescribeTaskAttributeResponseBody {
	s.FailedCount = &v
	return s
}

func (s *DescribeTaskAttributeResponseBody) SetRegionId(v string) *DescribeTaskAttributeResponseBody {
	s.RegionId = &v
	return s
}

type DescribeTaskAttributeResponseBodyOperationProgressSet struct {
	ErrorCode       *string                                                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg        *string                                                                `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RelatedItemSet  []*DescribeTaskAttributeResponseBodyOperationProgressSetRelatedItemSet `json:"RelatedItemSet,omitempty" xml:"RelatedItemSet,omitempty" type:"Repeated"`
	OperationStatus *string                                                                `json:"OperationStatus,omitempty" xml:"OperationStatus,omitempty"`
}

func (s DescribeTaskAttributeResponseBodyOperationProgressSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeResponseBodyOperationProgressSet) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeResponseBodyOperationProgressSet) SetErrorCode(v string) *DescribeTaskAttributeResponseBodyOperationProgressSet {
	s.ErrorCode = &v
	return s
}

func (s *DescribeTaskAttributeResponseBodyOperationProgressSet) SetErrorMsg(v string) *DescribeTaskAttributeResponseBodyOperationProgressSet {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeTaskAttributeResponseBodyOperationProgressSet) SetRelatedItemSet(v []*DescribeTaskAttributeResponseBodyOperationProgressSetRelatedItemSet) *DescribeTaskAttributeResponseBodyOperationProgressSet {
	s.RelatedItemSet = v
	return s
}

func (s *DescribeTaskAttributeResponseBodyOperationProgressSet) SetOperationStatus(v string) *DescribeTaskAttributeResponseBodyOperationProgressSet {
	s.OperationStatus = &v
	return s
}

type DescribeTaskAttributeResponseBodyOperationProgressSetRelatedItemSet struct {
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeTaskAttributeResponseBodyOperationProgressSetRelatedItemSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeResponseBodyOperationProgressSetRelatedItemSet) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeResponseBodyOperationProgressSetRelatedItemSet) SetValue(v string) *DescribeTaskAttributeResponseBodyOperationProgressSetRelatedItemSet {
	s.Value = &v
	return s
}

func (s *DescribeTaskAttributeResponseBodyOperationProgressSetRelatedItemSet) SetName(v string) *DescribeTaskAttributeResponseBodyOperationProgressSetRelatedItemSet {
	s.Name = &v
	return s
}

type DescribeTaskAttributeResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeTaskAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTaskAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeResponse) SetHeaders(v map[string]*string) *DescribeTaskAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeTaskAttributeResponse) SetBody(v *DescribeTaskAttributeResponseBody) *DescribeTaskAttributeResponse {
	s.Body = v
	return s
}

type DescribeTasksRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TaskIds              *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
	TaskAction           *string `json:"TaskAction,omitempty" xml:"TaskAction,omitempty"`
	TaskStatus           *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeTasksRequest) SetOwnerId(v int64) *DescribeTasksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTasksRequest) SetResourceOwnerAccount(v string) *DescribeTasksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTasksRequest) SetResourceOwnerId(v int64) *DescribeTasksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTasksRequest) SetPageNumber(v int32) *DescribeTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTasksRequest) SetPageSize(v int32) *DescribeTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTasksRequest) SetOwnerAccount(v string) *DescribeTasksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeTasksRequest) SetRegionId(v string) *DescribeTasksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTasksRequest) SetTaskIds(v string) *DescribeTasksRequest {
	s.TaskIds = &v
	return s
}

func (s *DescribeTasksRequest) SetTaskAction(v string) *DescribeTasksRequest {
	s.TaskAction = &v
	return s
}

func (s *DescribeTasksRequest) SetTaskStatus(v string) *DescribeTasksRequest {
	s.TaskStatus = &v
	return s
}

func (s *DescribeTasksRequest) SetStartTime(v string) *DescribeTasksRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeTasksRequest) SetEndTime(v string) *DescribeTasksRequest {
	s.EndTime = &v
	return s
}

type DescribeTasksResponseBody struct {
	TotalCount *int32                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	TaskSet    []*DescribeTasksResponseBodyTaskSet `json:"TaskSet,omitempty" xml:"TaskSet,omitempty" type:"Repeated"`
	RegionId   *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseBody) SetTotalCount(v int32) *DescribeTasksResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeTasksResponseBody) SetPageSize(v int32) *DescribeTasksResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTasksResponseBody) SetRequestId(v string) *DescribeTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTasksResponseBody) SetPageNumber(v int32) *DescribeTasksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeTasksResponseBody) SetTaskSet(v []*DescribeTasksResponseBodyTaskSet) *DescribeTasksResponseBody {
	s.TaskSet = v
	return s
}

func (s *DescribeTasksResponseBody) SetRegionId(v string) *DescribeTasksResponseBody {
	s.RegionId = &v
	return s
}

type DescribeTasksResponseBodyTaskSet struct {
	CreationTime  *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	TaskStatus    *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	FinishedTime  *string `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	SupportCancel *string `json:"SupportCancel,omitempty" xml:"SupportCancel,omitempty"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskAction    *string `json:"TaskAction,omitempty" xml:"TaskAction,omitempty"`
}

func (s DescribeTasksResponseBodyTaskSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseBodyTaskSet) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseBodyTaskSet) SetCreationTime(v string) *DescribeTasksResponseBodyTaskSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeTasksResponseBodyTaskSet) SetTaskStatus(v string) *DescribeTasksResponseBodyTaskSet {
	s.TaskStatus = &v
	return s
}

func (s *DescribeTasksResponseBodyTaskSet) SetFinishedTime(v string) *DescribeTasksResponseBodyTaskSet {
	s.FinishedTime = &v
	return s
}

func (s *DescribeTasksResponseBodyTaskSet) SetSupportCancel(v string) *DescribeTasksResponseBodyTaskSet {
	s.SupportCancel = &v
	return s
}

func (s *DescribeTasksResponseBodyTaskSet) SetTaskId(v string) *DescribeTasksResponseBodyTaskSet {
	s.TaskId = &v
	return s
}

func (s *DescribeTasksResponseBodyTaskSet) SetTaskAction(v string) *DescribeTasksResponseBodyTaskSet {
	s.TaskAction = &v
	return s
}

type DescribeTasksResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponse) SetHeaders(v map[string]*string) *DescribeTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeTasksResponse) SetBody(v *DescribeTasksResponseBody) *DescribeTasksResponse {
	s.Body = v
	return s
}

type DescribeUserBusinessBehaviorRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StatusKey            *string `json:"statusKey,omitempty" xml:"statusKey,omitempty"`
}

func (s DescribeUserBusinessBehaviorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBusinessBehaviorRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserBusinessBehaviorRequest) SetOwnerId(v int64) *DescribeUserBusinessBehaviorRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetResourceOwnerAccount(v string) *DescribeUserBusinessBehaviorRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetResourceOwnerId(v int64) *DescribeUserBusinessBehaviorRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetOwnerAccount(v string) *DescribeUserBusinessBehaviorRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetRegionId(v string) *DescribeUserBusinessBehaviorRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetStatusKey(v string) *DescribeUserBusinessBehaviorRequest {
	s.StatusKey = &v
	return s
}

type DescribeUserBusinessBehaviorResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StatusValue *string `json:"StatusValue,omitempty" xml:"StatusValue,omitempty"`
}

func (s DescribeUserBusinessBehaviorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBusinessBehaviorResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserBusinessBehaviorResponseBody) SetRequestId(v string) *DescribeUserBusinessBehaviorResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUserBusinessBehaviorResponseBody) SetStatusValue(v string) *DescribeUserBusinessBehaviorResponseBody {
	s.StatusValue = &v
	return s
}

type DescribeUserBusinessBehaviorResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeUserBusinessBehaviorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserBusinessBehaviorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBusinessBehaviorResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserBusinessBehaviorResponse) SetHeaders(v map[string]*string) *DescribeUserBusinessBehaviorResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserBusinessBehaviorResponse) SetBody(v *DescribeUserBusinessBehaviorResponseBody) *DescribeUserBusinessBehaviorResponse {
	s.Body = v
	return s
}

type DescribeUserDataRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeUserDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserDataRequest) SetOwnerId(v int64) *DescribeUserDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserDataRequest) SetResourceOwnerAccount(v string) *DescribeUserDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUserDataRequest) SetResourceOwnerId(v int64) *DescribeUserDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserDataRequest) SetRegionId(v string) *DescribeUserDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserDataRequest) SetInstanceId(v string) *DescribeUserDataRequest {
	s.InstanceId = &v
	return s
}

type DescribeUserDataResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	UserData   *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeUserDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserDataResponseBody) SetRequestId(v string) *DescribeUserDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUserDataResponseBody) SetInstanceId(v string) *DescribeUserDataResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeUserDataResponseBody) SetUserData(v string) *DescribeUserDataResponseBody {
	s.UserData = &v
	return s
}

func (s *DescribeUserDataResponseBody) SetRegionId(v string) *DescribeUserDataResponseBody {
	s.RegionId = &v
	return s
}

type DescribeUserDataResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeUserDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserDataResponse) SetHeaders(v map[string]*string) *DescribeUserDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserDataResponse) SetBody(v *DescribeUserDataResponseBody) *DescribeUserDataResponse {
	s.Body = v
	return s
}

type DescribeVirtualBorderRoutersRequest struct {
	OwnerId              *int64                                       `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                      `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber           *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter               []*DescribeVirtualBorderRoutersRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersRequest) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersRequest) SetOwnerId(v int64) *DescribeVirtualBorderRoutersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetResourceOwnerAccount(v string) *DescribeVirtualBorderRoutersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetResourceOwnerId(v int64) *DescribeVirtualBorderRoutersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetRegionId(v string) *DescribeVirtualBorderRoutersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetPageNumber(v int32) *DescribeVirtualBorderRoutersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetPageSize(v int32) *DescribeVirtualBorderRoutersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetFilter(v []*DescribeVirtualBorderRoutersRequestFilter) *DescribeVirtualBorderRoutersRequest {
	s.Filter = v
	return s
}

type DescribeVirtualBorderRoutersRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersRequestFilter) SetKey(v string) *DescribeVirtualBorderRoutersRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequestFilter) SetValue(v []*string) *DescribeVirtualBorderRoutersRequestFilter {
	s.Value = v
	return s
}

type DescribeVirtualBorderRoutersResponseBody struct {
	TotalCount             *int32                                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId              *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize               *int32                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber             *int32                                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	VirtualBorderRouterSet []*DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet `json:"VirtualBorderRouterSet,omitempty" xml:"VirtualBorderRouterSet,omitempty" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseBody) SetTotalCount(v int32) *DescribeVirtualBorderRoutersResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBody) SetRequestId(v string) *DescribeVirtualBorderRoutersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBody) SetPageSize(v int32) *DescribeVirtualBorderRoutersResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBody) SetPageNumber(v int32) *DescribeVirtualBorderRoutersResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBody) SetVirtualBorderRouterSet(v []*DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) *DescribeVirtualBorderRoutersResponseBody {
	s.VirtualBorderRouterSet = v
	return s
}

type DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet struct {
	CreationTime                     *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status                           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VlanInterfaceId                  *string `json:"VlanInterfaceId,omitempty" xml:"VlanInterfaceId,omitempty"`
	CircuitCode                      *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	PhysicalConnectionOwnerUid       *string `json:"PhysicalConnectionOwnerUid,omitempty" xml:"PhysicalConnectionOwnerUid,omitempty"`
	LocalGatewayIp                   *string `json:"LocalGatewayIp,omitempty" xml:"LocalGatewayIp,omitempty"`
	ActivationTime                   *string `json:"ActivationTime,omitempty" xml:"ActivationTime,omitempty"`
	PhysicalConnectionBusinessStatus *string `json:"PhysicalConnectionBusinessStatus,omitempty" xml:"PhysicalConnectionBusinessStatus,omitempty"`
	PeeringSubnetMask                *string `json:"PeeringSubnetMask,omitempty" xml:"PeeringSubnetMask,omitempty"`
	RouteTableId                     *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	Description                      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	PhysicalConnectionStatus         *string `json:"PhysicalConnectionStatus,omitempty" xml:"PhysicalConnectionStatus,omitempty"`
	RecoveryTime                     *string `json:"RecoveryTime,omitempty" xml:"RecoveryTime,omitempty"`
	TerminationTime                  *string `json:"TerminationTime,omitempty" xml:"TerminationTime,omitempty"`
	PeerGatewayIp                    *string `json:"PeerGatewayIp,omitempty" xml:"PeerGatewayIp,omitempty"`
	Name                             *string `json:"Name,omitempty" xml:"Name,omitempty"`
	AccessPointId                    *string `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	VbrId                            *string `json:"VbrId,omitempty" xml:"VbrId,omitempty"`
	PhysicalConnectionId             *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty"`
	VlanId                           *int32  `json:"VlanId,omitempty" xml:"VlanId,omitempty"`
}

func (s DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetCreationTime(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetStatus(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.Status = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetVlanInterfaceId(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.VlanInterfaceId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetCircuitCode(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.CircuitCode = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetPhysicalConnectionOwnerUid(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.PhysicalConnectionOwnerUid = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetLocalGatewayIp(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.LocalGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetActivationTime(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.ActivationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetPhysicalConnectionBusinessStatus(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.PhysicalConnectionBusinessStatus = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetPeeringSubnetMask(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.PeeringSubnetMask = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetRouteTableId(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.RouteTableId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetDescription(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.Description = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetPhysicalConnectionStatus(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.PhysicalConnectionStatus = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetRecoveryTime(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.RecoveryTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetTerminationTime(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.TerminationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetPeerGatewayIp(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.PeerGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetName(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.Name = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetAccessPointId(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.AccessPointId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetVbrId(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.VbrId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetPhysicalConnectionId(v string) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet) SetVlanId(v int32) *DescribeVirtualBorderRoutersResponseBodyVirtualBorderRouterSet {
	s.VlanId = &v
	return s
}

type DescribeVirtualBorderRoutersResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeVirtualBorderRoutersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVirtualBorderRoutersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponse) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponse) SetHeaders(v map[string]*string) *DescribeVirtualBorderRoutersResponse {
	s.Headers = v
	return s
}

func (s *DescribeVirtualBorderRoutersResponse) SetBody(v *DescribeVirtualBorderRoutersResponseBody) *DescribeVirtualBorderRoutersResponse {
	s.Body = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionRequest struct {
	OwnerId              *int64                                                            `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                                           `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                            `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PhysicalConnectionId *string                                                           `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty"`
	PageNumber           *int32                                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Filter               []*DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetOwnerId(v int64) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetResourceOwnerAccount(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetResourceOwnerId(v int64) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetRegionId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetPhysicalConnectionId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetPageNumber(v int32) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetPageSize(v int32) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetFilter(v []*DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.Filter = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) SetKey(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter) SetValue(v []*string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequestFilter {
	s.Value = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody struct {
	TotalCount                                  *int32                                                                                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId                                   *string                                                                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize                                    *int32                                                                                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber                                  *int32                                                                                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	VirtualBorderRouterForPhysicalConnectionSet []*DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet `json:"VirtualBorderRouterForPhysicalConnectionSet,omitempty" xml:"VirtualBorderRouterForPhysicalConnectionSet,omitempty" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody) SetTotalCount(v int32) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody) SetRequestId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody) SetPageSize(v int32) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody) SetPageNumber(v int32) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody) SetVirtualBorderRouterForPhysicalConnectionSet(v []*DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody {
	s.VirtualBorderRouterForPhysicalConnectionSet = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CircuitCode     *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	RecoveryTime    *string `json:"RecoveryTime,omitempty" xml:"RecoveryTime,omitempty"`
	TerminationTime *string `json:"TerminationTime,omitempty" xml:"TerminationTime,omitempty"`
	ActivationTime  *string `json:"ActivationTime,omitempty" xml:"ActivationTime,omitempty"`
	VbrOwnerUid     *int64  `json:"VbrOwnerUid,omitempty" xml:"VbrOwnerUid,omitempty"`
	VbrId           *string `json:"VbrId,omitempty" xml:"VbrId,omitempty"`
	VlanId          *int32  `json:"VlanId,omitempty" xml:"VlanId,omitempty"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) SetCreationTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) SetCircuitCode(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet {
	s.CircuitCode = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) SetRecoveryTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet {
	s.RecoveryTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) SetTerminationTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet {
	s.TerminationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) SetActivationTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet {
	s.ActivationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) SetVbrOwnerUid(v int64) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet {
	s.VbrOwnerUid = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) SetVbrId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet {
	s.VbrId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet) SetVlanId(v int32) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBodyVirtualBorderRouterForPhysicalConnectionSet {
	s.VlanId = &v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionResponse struct {
	Headers map[string]*string                                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetHeaders(v map[string]*string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.Headers = v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetBody(v *DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.Body = v
	return s
}

type DescribeVpcsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	IsDefault            *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeVpcsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpcsRequest) SetOwnerId(v int64) *DescribeVpcsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVpcsRequest) SetResourceOwnerAccount(v string) *DescribeVpcsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVpcsRequest) SetResourceOwnerId(v int64) *DescribeVpcsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVpcsRequest) SetVpcId(v string) *DescribeVpcsRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcsRequest) SetRegionId(v string) *DescribeVpcsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcsRequest) SetIsDefault(v bool) *DescribeVpcsRequest {
	s.IsDefault = &v
	return s
}

func (s *DescribeVpcsRequest) SetPageNumber(v int32) *DescribeVpcsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpcsRequest) SetPageSize(v int32) *DescribeVpcsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcsRequest) SetOwnerAccount(v string) *DescribeVpcsRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeVpcsResponseBody struct {
	TotalCount *int32                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	Vpcs       []*DescribeVpcsResponseBodyVpcs `json:"Vpcs,omitempty" xml:"Vpcs,omitempty" type:"Repeated"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeVpcsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseBody) SetTotalCount(v int32) *DescribeVpcsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVpcsResponseBody) SetVpcs(v []*DescribeVpcsResponseBodyVpcs) *DescribeVpcsResponseBody {
	s.Vpcs = v
	return s
}

func (s *DescribeVpcsResponseBody) SetPageSize(v int32) *DescribeVpcsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcsResponseBody) SetRequestId(v string) *DescribeVpcsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVpcsResponseBody) SetPageNumber(v int32) *DescribeVpcsResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeVpcsResponseBodyVpcs struct {
	CreationTime *string   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	VpcName      *string   `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	Status       *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	VpcId        *string   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VRouterId    *string   `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	IsDefault    *bool     `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	CidrBlock    *string   `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description  *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	VSwitchIds   []*string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Repeated"`
	UserCidrs    []*string `json:"UserCidrs,omitempty" xml:"UserCidrs,omitempty" type:"Repeated"`
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeVpcsResponseBodyVpcs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseBodyVpcs) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseBodyVpcs) SetCreationTime(v string) *DescribeVpcsResponseBodyVpcs {
	s.CreationTime = &v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetVpcName(v string) *DescribeVpcsResponseBodyVpcs {
	s.VpcName = &v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetStatus(v string) *DescribeVpcsResponseBodyVpcs {
	s.Status = &v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetVpcId(v string) *DescribeVpcsResponseBodyVpcs {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetVRouterId(v string) *DescribeVpcsResponseBodyVpcs {
	s.VRouterId = &v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetIsDefault(v bool) *DescribeVpcsResponseBodyVpcs {
	s.IsDefault = &v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetCidrBlock(v string) *DescribeVpcsResponseBodyVpcs {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetDescription(v string) *DescribeVpcsResponseBodyVpcs {
	s.Description = &v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetVSwitchIds(v []*string) *DescribeVpcsResponseBodyVpcs {
	s.VSwitchIds = v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetUserCidrs(v []*string) *DescribeVpcsResponseBodyVpcs {
	s.UserCidrs = v
	return s
}

func (s *DescribeVpcsResponseBodyVpcs) SetRegionId(v string) *DescribeVpcsResponseBodyVpcs {
	s.RegionId = &v
	return s
}

type DescribeVpcsResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeVpcsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVpcsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponse) SetHeaders(v map[string]*string) *DescribeVpcsResponse {
	s.Headers = v
	return s
}

func (s *DescribeVpcsResponse) SetBody(v *DescribeVpcsResponseBody) *DescribeVpcsResponse {
	s.Body = v
	return s
}

type DescribeVRoutersRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VRouterId            *string `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeVRoutersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersRequest) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersRequest) SetOwnerId(v int64) *DescribeVRoutersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetResourceOwnerAccount(v string) *DescribeVRoutersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVRoutersRequest) SetResourceOwnerId(v int64) *DescribeVRoutersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetVRouterId(v string) *DescribeVRoutersRequest {
	s.VRouterId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetRegionId(v string) *DescribeVRoutersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetPageNumber(v int32) *DescribeVRoutersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVRoutersRequest) SetPageSize(v int32) *DescribeVRoutersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVRoutersRequest) SetOwnerAccount(v string) *DescribeVRoutersRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeVRoutersResponseBody struct {
	VRouters   []*DescribeVRoutersResponseBodyVRouters `json:"VRouters,omitempty" xml:"VRouters,omitempty" type:"Repeated"`
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeVRoutersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponseBody) SetVRouters(v []*DescribeVRoutersResponseBodyVRouters) *DescribeVRoutersResponseBody {
	s.VRouters = v
	return s
}

func (s *DescribeVRoutersResponseBody) SetTotalCount(v int32) *DescribeVRoutersResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVRoutersResponseBody) SetPageSize(v int32) *DescribeVRoutersResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVRoutersResponseBody) SetRequestId(v string) *DescribeVRoutersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVRoutersResponseBody) SetPageNumber(v int32) *DescribeVRoutersResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeVRoutersResponseBodyVRouters struct {
	VpcId         *string   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	CreationTime  *string   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	VRouterId     *string   `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	Description   *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	VRouterName   *string   `json:"VRouterName,omitempty" xml:"VRouterName,omitempty"`
	RouteTableIds []*string `json:"RouteTableIds,omitempty" xml:"RouteTableIds,omitempty" type:"Repeated"`
	RegionId      *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeVRoutersResponseBodyVRouters) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponseBodyVRouters) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponseBodyVRouters) SetVpcId(v string) *DescribeVRoutersResponseBodyVRouters {
	s.VpcId = &v
	return s
}

func (s *DescribeVRoutersResponseBodyVRouters) SetCreationTime(v string) *DescribeVRoutersResponseBodyVRouters {
	s.CreationTime = &v
	return s
}

func (s *DescribeVRoutersResponseBodyVRouters) SetVRouterId(v string) *DescribeVRoutersResponseBodyVRouters {
	s.VRouterId = &v
	return s
}

func (s *DescribeVRoutersResponseBodyVRouters) SetDescription(v string) *DescribeVRoutersResponseBodyVRouters {
	s.Description = &v
	return s
}

func (s *DescribeVRoutersResponseBodyVRouters) SetVRouterName(v string) *DescribeVRoutersResponseBodyVRouters {
	s.VRouterName = &v
	return s
}

func (s *DescribeVRoutersResponseBodyVRouters) SetRouteTableIds(v []*string) *DescribeVRoutersResponseBodyVRouters {
	s.RouteTableIds = v
	return s
}

func (s *DescribeVRoutersResponseBodyVRouters) SetRegionId(v string) *DescribeVRoutersResponseBodyVRouters {
	s.RegionId = &v
	return s
}

type DescribeVRoutersResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeVRoutersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVRoutersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponse) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponse) SetHeaders(v map[string]*string) *DescribeVRoutersResponse {
	s.Headers = v
	return s
}

func (s *DescribeVRoutersResponse) SetBody(v *DescribeVRoutersResponseBody) *DescribeVRoutersResponse {
	s.Body = v
	return s
}

type DescribeVSwitchesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	IsDefault            *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeVSwitchesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesRequest) SetOwnerId(v int64) *DescribeVSwitchesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetResourceOwnerAccount(v string) *DescribeVSwitchesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetResourceOwnerId(v int64) *DescribeVSwitchesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVpcId(v string) *DescribeVSwitchesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchId(v string) *DescribeVSwitchesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetZoneId(v string) *DescribeVSwitchesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetRegionId(v string) *DescribeVSwitchesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetIsDefault(v bool) *DescribeVSwitchesRequest {
	s.IsDefault = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageNumber(v int32) *DescribeVSwitchesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageSize(v int32) *DescribeVSwitchesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetOwnerAccount(v string) *DescribeVSwitchesRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeVSwitchesResponseBody struct {
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	VSwitches  []*DescribeVSwitchesResponseBodyVSwitches `json:"VSwitches,omitempty" xml:"VSwitches,omitempty" type:"Repeated"`
}

func (s DescribeVSwitchesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseBody) SetTotalCount(v int32) *DescribeVSwitchesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetPageSize(v int32) *DescribeVSwitchesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetRequestId(v string) *DescribeVSwitchesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetPageNumber(v int32) *DescribeVSwitchesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetVSwitches(v []*DescribeVSwitchesResponseBodyVSwitches) *DescribeVSwitchesResponseBody {
	s.VSwitches = v
	return s
}

type DescribeVSwitchesResponseBodyVSwitches struct {
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VpcId                   *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	IsDefault               *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	VSwitchId               *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	CidrBlock               *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	AvailableIpAddressCount *int64  `json:"AvailableIpAddressCount,omitempty" xml:"AvailableIpAddressCount,omitempty"`
	ResourceGroupId         *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId                  *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	VSwitchName             *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeVSwitchesResponseBodyVSwitches) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseBodyVSwitches) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetCreationTime(v string) *DescribeVSwitchesResponseBodyVSwitches {
	s.CreationTime = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetStatus(v string) *DescribeVSwitchesResponseBodyVSwitches {
	s.Status = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetVpcId(v string) *DescribeVSwitchesResponseBodyVSwitches {
	s.VpcId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetIsDefault(v bool) *DescribeVSwitchesResponseBodyVSwitches {
	s.IsDefault = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetVSwitchId(v string) *DescribeVSwitchesResponseBodyVSwitches {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetCidrBlock(v string) *DescribeVSwitchesResponseBodyVSwitches {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetDescription(v string) *DescribeVSwitchesResponseBodyVSwitches {
	s.Description = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetAvailableIpAddressCount(v int64) *DescribeVSwitchesResponseBodyVSwitches {
	s.AvailableIpAddressCount = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetResourceGroupId(v string) *DescribeVSwitchesResponseBodyVSwitches {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetZoneId(v string) *DescribeVSwitchesResponseBodyVSwitches {
	s.ZoneId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetVSwitchName(v string) *DescribeVSwitchesResponseBodyVSwitches {
	s.VSwitchName = &v
	return s
}

type DescribeVSwitchesResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeVSwitchesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVSwitchesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponse) SetHeaders(v map[string]*string) *DescribeVSwitchesResponse {
	s.Headers = v
	return s
}

func (s *DescribeVSwitchesResponse) SetBody(v *DescribeVSwitchesResponseBody) *DescribeVSwitchesResponse {
	s.Body = v
	return s
}

type DescribeZonesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Verbose              *bool   `json:"Verbose,omitempty" xml:"Verbose,omitempty"`
	InstanceChargeType   *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	SpotStrategy         *string `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	AcceptLanguage       *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
}

func (s DescribeZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeZonesRequest) SetOwnerId(v int64) *DescribeZonesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeZonesRequest) SetResourceOwnerAccount(v string) *DescribeZonesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeZonesRequest) SetResourceOwnerId(v int64) *DescribeZonesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeZonesRequest) SetRegionId(v string) *DescribeZonesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeZonesRequest) SetOwnerAccount(v string) *DescribeZonesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeZonesRequest) SetVerbose(v bool) *DescribeZonesRequest {
	s.Verbose = &v
	return s
}

func (s *DescribeZonesRequest) SetInstanceChargeType(v string) *DescribeZonesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeZonesRequest) SetSpotStrategy(v string) *DescribeZonesRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeZonesRequest) SetAcceptLanguage(v string) *DescribeZonesRequest {
	s.AcceptLanguage = &v
	return s
}

type DescribeZonesResponseBody struct {
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Zones     []*DescribeZonesResponseBodyZones `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Repeated"`
}

func (s DescribeZonesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBody) SetRequestId(v string) *DescribeZonesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeZonesResponseBody) SetZones(v []*DescribeZonesResponseBodyZones) *DescribeZonesResponseBody {
	s.Zones = v
	return s
}

type DescribeZonesResponseBodyZones struct {
	AvailableResourceCreation   []*string                                           `json:"AvailableResourceCreation,omitempty" xml:"AvailableResourceCreation,omitempty" type:"Repeated"`
	DedicatedHostGenerations    []*string                                           `json:"DedicatedHostGenerations,omitempty" xml:"DedicatedHostGenerations,omitempty" type:"Repeated"`
	LocalName                   *string                                             `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	AvailableInstanceTypes      []*string                                           `json:"AvailableInstanceTypes,omitempty" xml:"AvailableInstanceTypes,omitempty" type:"Repeated"`
	ZoneId                      *string                                             `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	AvailableDiskCategories     []*string                                           `json:"AvailableDiskCategories,omitempty" xml:"AvailableDiskCategories,omitempty" type:"Repeated"`
	AvailableDedicatedHostTypes []*string                                           `json:"AvailableDedicatedHostTypes,omitempty" xml:"AvailableDedicatedHostTypes,omitempty" type:"Repeated"`
	AvailableVolumeCategories   []*string                                           `json:"AvailableVolumeCategories,omitempty" xml:"AvailableVolumeCategories,omitempty" type:"Repeated"`
	AvailableResources          []*DescribeZonesResponseBodyZonesAvailableResources `json:"AvailableResources,omitempty" xml:"AvailableResources,omitempty" type:"Repeated"`
}

func (s DescribeZonesResponseBodyZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBodyZones) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBodyZones) SetAvailableResourceCreation(v []*string) *DescribeZonesResponseBodyZones {
	s.AvailableResourceCreation = v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetDedicatedHostGenerations(v []*string) *DescribeZonesResponseBodyZones {
	s.DedicatedHostGenerations = v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetLocalName(v string) *DescribeZonesResponseBodyZones {
	s.LocalName = &v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetAvailableInstanceTypes(v []*string) *DescribeZonesResponseBodyZones {
	s.AvailableInstanceTypes = v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetZoneId(v string) *DescribeZonesResponseBodyZones {
	s.ZoneId = &v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetAvailableDiskCategories(v []*string) *DescribeZonesResponseBodyZones {
	s.AvailableDiskCategories = v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetAvailableDedicatedHostTypes(v []*string) *DescribeZonesResponseBodyZones {
	s.AvailableDedicatedHostTypes = v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetAvailableVolumeCategories(v []*string) *DescribeZonesResponseBodyZones {
	s.AvailableVolumeCategories = v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetAvailableResources(v []*DescribeZonesResponseBodyZonesAvailableResources) *DescribeZonesResponseBodyZones {
	s.AvailableResources = v
	return s
}

type DescribeZonesResponseBodyZonesAvailableResources struct {
	IoOptimized          *bool     `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	SystemDiskCategories []*string `json:"SystemDiskCategories,omitempty" xml:"SystemDiskCategories,omitempty" type:"Repeated"`
	InstanceGenerations  []*string `json:"InstanceGenerations,omitempty" xml:"InstanceGenerations,omitempty" type:"Repeated"`
	DataDiskCategories   []*string `json:"DataDiskCategories,omitempty" xml:"DataDiskCategories,omitempty" type:"Repeated"`
	InstanceTypes        []*string `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Repeated"`
	InstanceTypeFamilies []*string `json:"InstanceTypeFamilies,omitempty" xml:"InstanceTypeFamilies,omitempty" type:"Repeated"`
	NetworkTypes         []*string `json:"NetworkTypes,omitempty" xml:"NetworkTypes,omitempty" type:"Repeated"`
}

func (s DescribeZonesResponseBodyZonesAvailableResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBodyZonesAvailableResources) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBodyZonesAvailableResources) SetIoOptimized(v bool) *DescribeZonesResponseBodyZonesAvailableResources {
	s.IoOptimized = &v
	return s
}

func (s *DescribeZonesResponseBodyZonesAvailableResources) SetSystemDiskCategories(v []*string) *DescribeZonesResponseBodyZonesAvailableResources {
	s.SystemDiskCategories = v
	return s
}

func (s *DescribeZonesResponseBodyZonesAvailableResources) SetInstanceGenerations(v []*string) *DescribeZonesResponseBodyZonesAvailableResources {
	s.InstanceGenerations = v
	return s
}

func (s *DescribeZonesResponseBodyZonesAvailableResources) SetDataDiskCategories(v []*string) *DescribeZonesResponseBodyZonesAvailableResources {
	s.DataDiskCategories = v
	return s
}

func (s *DescribeZonesResponseBodyZonesAvailableResources) SetInstanceTypes(v []*string) *DescribeZonesResponseBodyZonesAvailableResources {
	s.InstanceTypes = v
	return s
}

func (s *DescribeZonesResponseBodyZonesAvailableResources) SetInstanceTypeFamilies(v []*string) *DescribeZonesResponseBodyZonesAvailableResources {
	s.InstanceTypeFamilies = v
	return s
}

func (s *DescribeZonesResponseBodyZonesAvailableResources) SetNetworkTypes(v []*string) *DescribeZonesResponseBodyZonesAvailableResources {
	s.NetworkTypes = v
	return s
}

type DescribeZonesResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeZonesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponse) SetHeaders(v map[string]*string) *DescribeZonesResponse {
	s.Headers = v
	return s
}

func (s *DescribeZonesResponse) SetBody(v *DescribeZonesResponseBody) *DescribeZonesResponse {
	s.Body = v
	return s
}

type DetachClassicLinkVpcRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DetachClassicLinkVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachClassicLinkVpcRequest) GoString() string {
	return s.String()
}

func (s *DetachClassicLinkVpcRequest) SetOwnerId(v int64) *DetachClassicLinkVpcRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetResourceOwnerAccount(v string) *DetachClassicLinkVpcRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetResourceOwnerId(v int64) *DetachClassicLinkVpcRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetRegionId(v string) *DetachClassicLinkVpcRequest {
	s.RegionId = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetInstanceId(v string) *DetachClassicLinkVpcRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetVpcId(v string) *DetachClassicLinkVpcRequest {
	s.VpcId = &v
	return s
}

type DetachClassicLinkVpcResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachClassicLinkVpcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachClassicLinkVpcResponseBody) GoString() string {
	return s.String()
}

func (s *DetachClassicLinkVpcResponseBody) SetRequestId(v string) *DetachClassicLinkVpcResponseBody {
	s.RequestId = &v
	return s
}

type DetachClassicLinkVpcResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DetachClassicLinkVpcResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DetachClassicLinkVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachClassicLinkVpcResponse) GoString() string {
	return s.String()
}

func (s *DetachClassicLinkVpcResponse) SetHeaders(v map[string]*string) *DetachClassicLinkVpcResponse {
	s.Headers = v
	return s
}

func (s *DetachClassicLinkVpcResponse) SetBody(v *DetachClassicLinkVpcResponseBody) *DetachClassicLinkVpcResponse {
	s.Body = v
	return s
}

type DetachDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DiskId               *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	DeleteWithInstance   *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DetachDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskRequest) GoString() string {
	return s.String()
}

func (s *DetachDiskRequest) SetOwnerId(v int64) *DetachDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachDiskRequest) SetResourceOwnerAccount(v string) *DetachDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachDiskRequest) SetResourceOwnerId(v int64) *DetachDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachDiskRequest) SetInstanceId(v string) *DetachDiskRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachDiskRequest) SetDiskId(v string) *DetachDiskRequest {
	s.DiskId = &v
	return s
}

func (s *DetachDiskRequest) SetDeleteWithInstance(v bool) *DetachDiskRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *DetachDiskRequest) SetOwnerAccount(v string) *DetachDiskRequest {
	s.OwnerAccount = &v
	return s
}

type DetachDiskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskResponseBody) GoString() string {
	return s.String()
}

func (s *DetachDiskResponseBody) SetRequestId(v string) *DetachDiskResponseBody {
	s.RequestId = &v
	return s
}

type DetachDiskResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DetachDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DetachDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskResponse) GoString() string {
	return s.String()
}

func (s *DetachDiskResponse) SetHeaders(v map[string]*string) *DetachDiskResponse {
	s.Headers = v
	return s
}

func (s *DetachDiskResponse) SetBody(v *DetachDiskResponseBody) *DetachDiskResponse {
	s.Body = v
	return s
}

type DetachInstanceRamRoleRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RamRoleName          *string `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s DetachInstanceRamRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleRequest) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleRequest) SetOwnerId(v int64) *DetachInstanceRamRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetResourceOwnerAccount(v string) *DetachInstanceRamRoleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetResourceOwnerId(v int64) *DetachInstanceRamRoleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetRegionId(v string) *DetachInstanceRamRoleRequest {
	s.RegionId = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetRamRoleName(v string) *DetachInstanceRamRoleRequest {
	s.RamRoleName = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetInstanceIds(v string) *DetachInstanceRamRoleRequest {
	s.InstanceIds = &v
	return s
}

type DetachInstanceRamRoleResponseBody struct {
	TotalCount                   *int32                                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RamRoleName                  *string                                                          `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	RequestId                    *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	FailCount                    *int32                                                           `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	DetachInstanceRamRoleResults []*DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults `json:"DetachInstanceRamRoleResults,omitempty" xml:"DetachInstanceRamRoleResults,omitempty" type:"Repeated"`
}

func (s DetachInstanceRamRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleResponseBody) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleResponseBody) SetTotalCount(v int32) *DetachInstanceRamRoleResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DetachInstanceRamRoleResponseBody) SetRamRoleName(v string) *DetachInstanceRamRoleResponseBody {
	s.RamRoleName = &v
	return s
}

func (s *DetachInstanceRamRoleResponseBody) SetRequestId(v string) *DetachInstanceRamRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachInstanceRamRoleResponseBody) SetFailCount(v int32) *DetachInstanceRamRoleResponseBody {
	s.FailCount = &v
	return s
}

func (s *DetachInstanceRamRoleResponseBody) SetDetachInstanceRamRoleResults(v []*DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults) *DetachInstanceRamRoleResponseBody {
	s.DetachInstanceRamRoleResults = v
	return s
}

type DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults struct {
	InstanceRamRoleSets []*DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResultsInstanceRamRoleSets `json:"InstanceRamRoleSets,omitempty" xml:"InstanceRamRoleSets,omitempty" type:"Repeated"`
	Success             *bool                                                                               `json:"Success,omitempty" xml:"Success,omitempty"`
	Code                *string                                                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Message             *string                                                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	InstanceId          *string                                                                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults) SetInstanceRamRoleSets(v []*DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResultsInstanceRamRoleSets) *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults {
	s.InstanceRamRoleSets = v
	return s
}

func (s *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults) SetSuccess(v bool) *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults {
	s.Success = &v
	return s
}

func (s *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults) SetCode(v string) *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults {
	s.Code = &v
	return s
}

func (s *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults) SetMessage(v string) *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults {
	s.Message = &v
	return s
}

func (s *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults) SetInstanceId(v string) *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResults {
	s.InstanceId = &v
	return s
}

type DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResultsInstanceRamRoleSets struct {
	RamRoleName *string `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResultsInstanceRamRoleSets) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResultsInstanceRamRoleSets) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResultsInstanceRamRoleSets) SetRamRoleName(v string) *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResultsInstanceRamRoleSets {
	s.RamRoleName = &v
	return s
}

func (s *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResultsInstanceRamRoleSets) SetInstanceId(v string) *DetachInstanceRamRoleResponseBodyDetachInstanceRamRoleResultsInstanceRamRoleSets {
	s.InstanceId = &v
	return s
}

type DetachInstanceRamRoleResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DetachInstanceRamRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DetachInstanceRamRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleResponse) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleResponse) SetHeaders(v map[string]*string) *DetachInstanceRamRoleResponse {
	s.Headers = v
	return s
}

func (s *DetachInstanceRamRoleResponse) SetBody(v *DetachInstanceRamRoleResponseBody) *DetachInstanceRamRoleResponse {
	s.Body = v
	return s
}

type DetachKeyPairRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	KeyPairName          *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s DetachKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachKeyPairRequest) GoString() string {
	return s.String()
}

func (s *DetachKeyPairRequest) SetOwnerId(v int64) *DetachKeyPairRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachKeyPairRequest) SetResourceOwnerAccount(v string) *DetachKeyPairRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachKeyPairRequest) SetResourceOwnerId(v int64) *DetachKeyPairRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachKeyPairRequest) SetRegionId(v string) *DetachKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *DetachKeyPairRequest) SetKeyPairName(v string) *DetachKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *DetachKeyPairRequest) SetInstanceIds(v string) *DetachKeyPairRequest {
	s.InstanceIds = &v
	return s
}

type DetachKeyPairResponseBody struct {
	KeyPairName *string                             `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	TotalCount  *string                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId   *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results     []*DetachKeyPairResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
	FailCount   *string                             `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
}

func (s DetachKeyPairResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *DetachKeyPairResponseBody) SetKeyPairName(v string) *DetachKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *DetachKeyPairResponseBody) SetTotalCount(v string) *DetachKeyPairResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DetachKeyPairResponseBody) SetRequestId(v string) *DetachKeyPairResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachKeyPairResponseBody) SetResults(v []*DetachKeyPairResponseBodyResults) *DetachKeyPairResponseBody {
	s.Results = v
	return s
}

func (s *DetachKeyPairResponseBody) SetFailCount(v string) *DetachKeyPairResponseBody {
	s.FailCount = &v
	return s
}

type DetachKeyPairResponseBodyResults struct {
	Success    *string `json:"Success,omitempty" xml:"Success,omitempty"`
	Code       *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DetachKeyPairResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s DetachKeyPairResponseBodyResults) GoString() string {
	return s.String()
}

func (s *DetachKeyPairResponseBodyResults) SetSuccess(v string) *DetachKeyPairResponseBodyResults {
	s.Success = &v
	return s
}

func (s *DetachKeyPairResponseBodyResults) SetCode(v string) *DetachKeyPairResponseBodyResults {
	s.Code = &v
	return s
}

func (s *DetachKeyPairResponseBodyResults) SetMessage(v string) *DetachKeyPairResponseBodyResults {
	s.Message = &v
	return s
}

func (s *DetachKeyPairResponseBodyResults) SetInstanceId(v string) *DetachKeyPairResponseBodyResults {
	s.InstanceId = &v
	return s
}

type DetachKeyPairResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DetachKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DetachKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachKeyPairResponse) GoString() string {
	return s.String()
}

func (s *DetachKeyPairResponse) SetHeaders(v map[string]*string) *DetachKeyPairResponse {
	s.Headers = v
	return s
}

func (s *DetachKeyPairResponse) SetBody(v *DetachKeyPairResponseBody) *DetachKeyPairResponse {
	s.Body = v
	return s
}

type DetachNetworkInterfaceRequest struct {
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfaceId     *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TrunkNetworkInstanceId *string `json:"TrunkNetworkInstanceId,omitempty" xml:"TrunkNetworkInstanceId,omitempty"`
}

func (s DetachNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DetachNetworkInterfaceRequest) SetOwnerId(v int64) *DetachNetworkInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetResourceOwnerAccount(v string) *DetachNetworkInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetResourceOwnerId(v int64) *DetachNetworkInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetOwnerAccount(v string) *DetachNetworkInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetRegionId(v string) *DetachNetworkInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetNetworkInterfaceId(v string) *DetachNetworkInterfaceRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetInstanceId(v string) *DetachNetworkInterfaceRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetTrunkNetworkInstanceId(v string) *DetachNetworkInterfaceRequest {
	s.TrunkNetworkInstanceId = &v
	return s
}

type DetachNetworkInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachNetworkInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachNetworkInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *DetachNetworkInterfaceResponseBody) SetRequestId(v string) *DetachNetworkInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type DetachNetworkInterfaceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DetachNetworkInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DetachNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DetachNetworkInterfaceResponse) SetHeaders(v map[string]*string) *DetachNetworkInterfaceResponse {
	s.Headers = v
	return s
}

func (s *DetachNetworkInterfaceResponse) SetBody(v *DetachNetworkInterfaceResponseBody) *DetachNetworkInterfaceResponse {
	s.Body = v
	return s
}

type EipFillParamsRequest struct {
	Data                 *string `json:"data,omitempty" xml:"data,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s EipFillParamsRequest) String() string {
	return tea.Prettify(s)
}

func (s EipFillParamsRequest) GoString() string {
	return s.String()
}

func (s *EipFillParamsRequest) SetData(v string) *EipFillParamsRequest {
	s.Data = &v
	return s
}

func (s *EipFillParamsRequest) SetOwnerId(v int64) *EipFillParamsRequest {
	s.OwnerId = &v
	return s
}

func (s *EipFillParamsRequest) SetResourceOwnerAccount(v string) *EipFillParamsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EipFillParamsRequest) SetResourceOwnerId(v int64) *EipFillParamsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EipFillParamsRequest) SetClientToken(v string) *EipFillParamsRequest {
	s.ClientToken = &v
	return s
}

func (s *EipFillParamsRequest) SetOwnerAccount(v string) *EipFillParamsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EipFillParamsRequest) SetUserCidr(v string) *EipFillParamsRequest {
	s.UserCidr = &v
	return s
}

type EipFillParamsResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s EipFillParamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EipFillParamsResponseBody) GoString() string {
	return s.String()
}

func (s *EipFillParamsResponseBody) SetCode(v string) *EipFillParamsResponseBody {
	s.Code = &v
	return s
}

func (s *EipFillParamsResponseBody) SetData(v string) *EipFillParamsResponseBody {
	s.Data = &v
	return s
}

func (s *EipFillParamsResponseBody) SetSuccess(v bool) *EipFillParamsResponseBody {
	s.Success = &v
	return s
}

func (s *EipFillParamsResponseBody) SetRequestId(v string) *EipFillParamsResponseBody {
	s.RequestId = &v
	return s
}

func (s *EipFillParamsResponseBody) SetMessage(v string) *EipFillParamsResponseBody {
	s.Message = &v
	return s
}

type EipFillParamsResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EipFillParamsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EipFillParamsResponse) String() string {
	return tea.Prettify(s)
}

func (s EipFillParamsResponse) GoString() string {
	return s.String()
}

func (s *EipFillParamsResponse) SetHeaders(v map[string]*string) *EipFillParamsResponse {
	s.Headers = v
	return s
}

func (s *EipFillParamsResponse) SetBody(v *EipFillParamsResponseBody) *EipFillParamsResponse {
	s.Body = v
	return s
}

type EipFillProductRequest struct {
	Data                 *string `json:"data,omitempty" xml:"data,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s EipFillProductRequest) String() string {
	return tea.Prettify(s)
}

func (s EipFillProductRequest) GoString() string {
	return s.String()
}

func (s *EipFillProductRequest) SetData(v string) *EipFillProductRequest {
	s.Data = &v
	return s
}

func (s *EipFillProductRequest) SetOwnerId(v int64) *EipFillProductRequest {
	s.OwnerId = &v
	return s
}

func (s *EipFillProductRequest) SetResourceOwnerAccount(v string) *EipFillProductRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EipFillProductRequest) SetResourceOwnerId(v int64) *EipFillProductRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EipFillProductRequest) SetClientToken(v string) *EipFillProductRequest {
	s.ClientToken = &v
	return s
}

func (s *EipFillProductRequest) SetOwnerAccount(v string) *EipFillProductRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EipFillProductRequest) SetUserCidr(v string) *EipFillProductRequest {
	s.UserCidr = &v
	return s
}

type EipFillProductResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s EipFillProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EipFillProductResponseBody) GoString() string {
	return s.String()
}

func (s *EipFillProductResponseBody) SetCode(v string) *EipFillProductResponseBody {
	s.Code = &v
	return s
}

func (s *EipFillProductResponseBody) SetData(v string) *EipFillProductResponseBody {
	s.Data = &v
	return s
}

func (s *EipFillProductResponseBody) SetSuccess(v bool) *EipFillProductResponseBody {
	s.Success = &v
	return s
}

func (s *EipFillProductResponseBody) SetRequestId(v string) *EipFillProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *EipFillProductResponseBody) SetMessage(v string) *EipFillProductResponseBody {
	s.Message = &v
	return s
}

type EipFillProductResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EipFillProductResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EipFillProductResponse) String() string {
	return tea.Prettify(s)
}

func (s EipFillProductResponse) GoString() string {
	return s.String()
}

func (s *EipFillProductResponse) SetHeaders(v map[string]*string) *EipFillProductResponse {
	s.Headers = v
	return s
}

func (s *EipFillProductResponse) SetBody(v *EipFillProductResponseBody) *EipFillProductResponse {
	s.Body = v
	return s
}

type EipNotifyPaidRequest struct {
	Data                 *string `json:"data,omitempty" xml:"data,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s EipNotifyPaidRequest) String() string {
	return tea.Prettify(s)
}

func (s EipNotifyPaidRequest) GoString() string {
	return s.String()
}

func (s *EipNotifyPaidRequest) SetData(v string) *EipNotifyPaidRequest {
	s.Data = &v
	return s
}

func (s *EipNotifyPaidRequest) SetOwnerId(v int64) *EipNotifyPaidRequest {
	s.OwnerId = &v
	return s
}

func (s *EipNotifyPaidRequest) SetResourceOwnerAccount(v string) *EipNotifyPaidRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EipNotifyPaidRequest) SetResourceOwnerId(v int64) *EipNotifyPaidRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EipNotifyPaidRequest) SetClientToken(v string) *EipNotifyPaidRequest {
	s.ClientToken = &v
	return s
}

func (s *EipNotifyPaidRequest) SetOwnerAccount(v string) *EipNotifyPaidRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EipNotifyPaidRequest) SetUserCidr(v string) *EipNotifyPaidRequest {
	s.UserCidr = &v
	return s
}

type EipNotifyPaidResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s EipNotifyPaidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EipNotifyPaidResponseBody) GoString() string {
	return s.String()
}

func (s *EipNotifyPaidResponseBody) SetCode(v string) *EipNotifyPaidResponseBody {
	s.Code = &v
	return s
}

func (s *EipNotifyPaidResponseBody) SetData(v string) *EipNotifyPaidResponseBody {
	s.Data = &v
	return s
}

func (s *EipNotifyPaidResponseBody) SetSuccess(v bool) *EipNotifyPaidResponseBody {
	s.Success = &v
	return s
}

func (s *EipNotifyPaidResponseBody) SetRequestId(v string) *EipNotifyPaidResponseBody {
	s.RequestId = &v
	return s
}

func (s *EipNotifyPaidResponseBody) SetMessage(v string) *EipNotifyPaidResponseBody {
	s.Message = &v
	return s
}

type EipNotifyPaidResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EipNotifyPaidResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EipNotifyPaidResponse) String() string {
	return tea.Prettify(s)
}

func (s EipNotifyPaidResponse) GoString() string {
	return s.String()
}

func (s *EipNotifyPaidResponse) SetHeaders(v map[string]*string) *EipNotifyPaidResponse {
	s.Headers = v
	return s
}

func (s *EipNotifyPaidResponse) SetBody(v *EipNotifyPaidResponseBody) *EipNotifyPaidResponse {
	s.Body = v
	return s
}

type EnablePhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s EnablePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s EnablePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *EnablePhysicalConnectionRequest) SetRegionId(v string) *EnablePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetPhysicalConnectionId(v string) *EnablePhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetOwnerId(v int64) *EnablePhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetResourceOwnerAccount(v string) *EnablePhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetResourceOwnerId(v int64) *EnablePhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetClientToken(v string) *EnablePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetOwnerAccount(v string) *EnablePhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetUserCidr(v string) *EnablePhysicalConnectionRequest {
	s.UserCidr = &v
	return s
}

type EnablePhysicalConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnablePhysicalConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnablePhysicalConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *EnablePhysicalConnectionResponseBody) SetRequestId(v string) *EnablePhysicalConnectionResponseBody {
	s.RequestId = &v
	return s
}

type EnablePhysicalConnectionResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnablePhysicalConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnablePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s EnablePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *EnablePhysicalConnectionResponse) SetHeaders(v map[string]*string) *EnablePhysicalConnectionResponse {
	s.Headers = v
	return s
}

func (s *EnablePhysicalConnectionResponse) SetBody(v *EnablePhysicalConnectionResponseBody) *EnablePhysicalConnectionResponse {
	s.Body = v
	return s
}

type ExportImageRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageId              *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	OSSBucket            *string `json:"OSSBucket,omitempty" xml:"OSSBucket,omitempty"`
	OSSPrefix            *string `json:"OSSPrefix,omitempty" xml:"OSSPrefix,omitempty"`
	ImageFormat          *string `json:"ImageFormat,omitempty" xml:"ImageFormat,omitempty"`
	RoleName             *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s ExportImageRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportImageRequest) GoString() string {
	return s.String()
}

func (s *ExportImageRequest) SetOwnerId(v int64) *ExportImageRequest {
	s.OwnerId = &v
	return s
}

func (s *ExportImageRequest) SetResourceOwnerAccount(v string) *ExportImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ExportImageRequest) SetResourceOwnerId(v int64) *ExportImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ExportImageRequest) SetRegionId(v string) *ExportImageRequest {
	s.RegionId = &v
	return s
}

func (s *ExportImageRequest) SetImageId(v string) *ExportImageRequest {
	s.ImageId = &v
	return s
}

func (s *ExportImageRequest) SetOSSBucket(v string) *ExportImageRequest {
	s.OSSBucket = &v
	return s
}

func (s *ExportImageRequest) SetOSSPrefix(v string) *ExportImageRequest {
	s.OSSPrefix = &v
	return s
}

func (s *ExportImageRequest) SetImageFormat(v string) *ExportImageRequest {
	s.ImageFormat = &v
	return s
}

func (s *ExportImageRequest) SetRoleName(v string) *ExportImageRequest {
	s.RoleName = &v
	return s
}

type ExportImageResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ExportImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportImageResponseBody) GoString() string {
	return s.String()
}

func (s *ExportImageResponseBody) SetTaskId(v string) *ExportImageResponseBody {
	s.TaskId = &v
	return s
}

func (s *ExportImageResponseBody) SetRequestId(v string) *ExportImageResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportImageResponseBody) SetRegionId(v string) *ExportImageResponseBody {
	s.RegionId = &v
	return s
}

type ExportImageResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ExportImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportImageResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportImageResponse) GoString() string {
	return s.String()
}

func (s *ExportImageResponse) SetHeaders(v map[string]*string) *ExportImageResponse {
	s.Headers = v
	return s
}

func (s *ExportImageResponse) SetBody(v *ExportImageResponseBody) *ExportImageResponse {
	s.Body = v
	return s
}

type ExportSnapshotRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SnapshotId           *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OssBucket            *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	RoleName             *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s ExportSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportSnapshotRequest) GoString() string {
	return s.String()
}

func (s *ExportSnapshotRequest) SetOwnerId(v int64) *ExportSnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *ExportSnapshotRequest) SetResourceOwnerAccount(v string) *ExportSnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ExportSnapshotRequest) SetResourceOwnerId(v int64) *ExportSnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ExportSnapshotRequest) SetSnapshotId(v string) *ExportSnapshotRequest {
	s.SnapshotId = &v
	return s
}

func (s *ExportSnapshotRequest) SetRegionId(v string) *ExportSnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *ExportSnapshotRequest) SetOssBucket(v string) *ExportSnapshotRequest {
	s.OssBucket = &v
	return s
}

func (s *ExportSnapshotRequest) SetRoleName(v string) *ExportSnapshotRequest {
	s.RoleName = &v
	return s
}

type ExportSnapshotResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *ExportSnapshotResponseBody) SetTaskId(v string) *ExportSnapshotResponseBody {
	s.TaskId = &v
	return s
}

func (s *ExportSnapshotResponseBody) SetRequestId(v string) *ExportSnapshotResponseBody {
	s.RequestId = &v
	return s
}

type ExportSnapshotResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ExportSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportSnapshotResponse) GoString() string {
	return s.String()
}

func (s *ExportSnapshotResponse) SetHeaders(v map[string]*string) *ExportSnapshotResponse {
	s.Headers = v
	return s
}

func (s *ExportSnapshotResponse) SetBody(v *ExportSnapshotResponseBody) *ExportSnapshotResponse {
	s.Body = v
	return s
}

type GetInstanceConsoleOutputRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RemoveSymbols        *bool   `json:"RemoveSymbols,omitempty" xml:"RemoveSymbols,omitempty"`
}

func (s GetInstanceConsoleOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsoleOutputRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceConsoleOutputRequest) SetOwnerId(v int64) *GetInstanceConsoleOutputRequest {
	s.OwnerId = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetResourceOwnerAccount(v string) *GetInstanceConsoleOutputRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetResourceOwnerId(v int64) *GetInstanceConsoleOutputRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetOwnerAccount(v string) *GetInstanceConsoleOutputRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetRegionId(v string) *GetInstanceConsoleOutputRequest {
	s.RegionId = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetInstanceId(v string) *GetInstanceConsoleOutputRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetRemoveSymbols(v bool) *GetInstanceConsoleOutputRequest {
	s.RemoveSymbols = &v
	return s
}

type GetInstanceConsoleOutputResponseBody struct {
	ConsoleOutput  *string `json:"ConsoleOutput,omitempty" xml:"ConsoleOutput,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LastUpdateTime *string `json:"LastUpdateTime,omitempty" xml:"LastUpdateTime,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetInstanceConsoleOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsoleOutputResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceConsoleOutputResponseBody) SetConsoleOutput(v string) *GetInstanceConsoleOutputResponseBody {
	s.ConsoleOutput = &v
	return s
}

func (s *GetInstanceConsoleOutputResponseBody) SetRequestId(v string) *GetInstanceConsoleOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceConsoleOutputResponseBody) SetLastUpdateTime(v string) *GetInstanceConsoleOutputResponseBody {
	s.LastUpdateTime = &v
	return s
}

func (s *GetInstanceConsoleOutputResponseBody) SetInstanceId(v string) *GetInstanceConsoleOutputResponseBody {
	s.InstanceId = &v
	return s
}

type GetInstanceConsoleOutputResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInstanceConsoleOutputResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceConsoleOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsoleOutputResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceConsoleOutputResponse) SetHeaders(v map[string]*string) *GetInstanceConsoleOutputResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceConsoleOutputResponse) SetBody(v *GetInstanceConsoleOutputResponseBody) *GetInstanceConsoleOutputResponse {
	s.Body = v
	return s
}

type GetInstanceScreenshotRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	WakeUp               *bool   `json:"WakeUp,omitempty" xml:"WakeUp,omitempty"`
}

func (s GetInstanceScreenshotRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceScreenshotRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceScreenshotRequest) SetOwnerId(v int64) *GetInstanceScreenshotRequest {
	s.OwnerId = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetResourceOwnerAccount(v string) *GetInstanceScreenshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetResourceOwnerId(v int64) *GetInstanceScreenshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetOwnerAccount(v string) *GetInstanceScreenshotRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetRegionId(v string) *GetInstanceScreenshotRequest {
	s.RegionId = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetInstanceId(v string) *GetInstanceScreenshotRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetWakeUp(v bool) *GetInstanceScreenshotRequest {
	s.WakeUp = &v
	return s
}

type GetInstanceScreenshotResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Screenshot *string `json:"Screenshot,omitempty" xml:"Screenshot,omitempty"`
}

func (s GetInstanceScreenshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceScreenshotResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceScreenshotResponseBody) SetRequestId(v string) *GetInstanceScreenshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceScreenshotResponseBody) SetInstanceId(v string) *GetInstanceScreenshotResponseBody {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceScreenshotResponseBody) SetScreenshot(v string) *GetInstanceScreenshotResponseBody {
	s.Screenshot = &v
	return s
}

type GetInstanceScreenshotResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInstanceScreenshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceScreenshotResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceScreenshotResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceScreenshotResponse) SetHeaders(v map[string]*string) *GetInstanceScreenshotResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceScreenshotResponse) SetBody(v *GetInstanceScreenshotResponseBody) *GetInstanceScreenshotResponse {
	s.Body = v
	return s
}

type ImportImageRequest struct {
	OwnerId              *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageName            *string                                `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	Description          *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	Architecture         *string                                `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	OSType               *string                                `json:"OSType,omitempty" xml:"OSType,omitempty"`
	Platform             *string                                `json:"Platform,omitempty" xml:"Platform,omitempty"`
	BootMode             *string                                `json:"BootMode,omitempty" xml:"BootMode,omitempty"`
	RoleName             *string                                `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	LicenseType          *string                                `json:"LicenseType,omitempty" xml:"LicenseType,omitempty"`
	ResourceGroupId      *string                                `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	DiskDeviceMapping    []*ImportImageRequestDiskDeviceMapping `json:"DiskDeviceMapping,omitempty" xml:"DiskDeviceMapping,omitempty" type:"Repeated"`
	Tag                  []*ImportImageRequestTag               `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ImportImageRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportImageRequest) GoString() string {
	return s.String()
}

func (s *ImportImageRequest) SetOwnerId(v int64) *ImportImageRequest {
	s.OwnerId = &v
	return s
}

func (s *ImportImageRequest) SetResourceOwnerAccount(v string) *ImportImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ImportImageRequest) SetResourceOwnerId(v int64) *ImportImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ImportImageRequest) SetRegionId(v string) *ImportImageRequest {
	s.RegionId = &v
	return s
}

func (s *ImportImageRequest) SetImageName(v string) *ImportImageRequest {
	s.ImageName = &v
	return s
}

func (s *ImportImageRequest) SetDescription(v string) *ImportImageRequest {
	s.Description = &v
	return s
}

func (s *ImportImageRequest) SetArchitecture(v string) *ImportImageRequest {
	s.Architecture = &v
	return s
}

func (s *ImportImageRequest) SetOSType(v string) *ImportImageRequest {
	s.OSType = &v
	return s
}

func (s *ImportImageRequest) SetPlatform(v string) *ImportImageRequest {
	s.Platform = &v
	return s
}

func (s *ImportImageRequest) SetBootMode(v string) *ImportImageRequest {
	s.BootMode = &v
	return s
}

func (s *ImportImageRequest) SetRoleName(v string) *ImportImageRequest {
	s.RoleName = &v
	return s
}

func (s *ImportImageRequest) SetLicenseType(v string) *ImportImageRequest {
	s.LicenseType = &v
	return s
}

func (s *ImportImageRequest) SetResourceGroupId(v string) *ImportImageRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ImportImageRequest) SetDiskDeviceMapping(v []*ImportImageRequestDiskDeviceMapping) *ImportImageRequest {
	s.DiskDeviceMapping = v
	return s
}

func (s *ImportImageRequest) SetTag(v []*ImportImageRequestTag) *ImportImageRequest {
	s.Tag = v
	return s
}

type ImportImageRequestDiskDeviceMapping struct {
	DiskImSize    *int32  `json:"DiskImSize,omitempty" xml:"DiskImSize,omitempty"`
	Device        *string `json:"Device,omitempty" xml:"Device,omitempty"`
	OSSBucket     *string `json:"OSSBucket,omitempty" xml:"OSSBucket,omitempty"`
	Format        *string `json:"Format,omitempty" xml:"Format,omitempty"`
	OSSObject     *string `json:"OSSObject,omitempty" xml:"OSSObject,omitempty"`
	DiskImageSize *int32  `json:"DiskImageSize,omitempty" xml:"DiskImageSize,omitempty"`
}

func (s ImportImageRequestDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s ImportImageRequestDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *ImportImageRequestDiskDeviceMapping) SetDiskImSize(v int32) *ImportImageRequestDiskDeviceMapping {
	s.DiskImSize = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetDevice(v string) *ImportImageRequestDiskDeviceMapping {
	s.Device = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetOSSBucket(v string) *ImportImageRequestDiskDeviceMapping {
	s.OSSBucket = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetFormat(v string) *ImportImageRequestDiskDeviceMapping {
	s.Format = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetOSSObject(v string) *ImportImageRequestDiskDeviceMapping {
	s.OSSObject = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetDiskImageSize(v int32) *ImportImageRequestDiskDeviceMapping {
	s.DiskImageSize = &v
	return s
}

type ImportImageRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ImportImageRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ImportImageRequestTag) GoString() string {
	return s.String()
}

func (s *ImportImageRequestTag) SetKey(v string) *ImportImageRequestTag {
	s.Key = &v
	return s
}

func (s *ImportImageRequestTag) SetValue(v string) *ImportImageRequestTag {
	s.Value = &v
	return s
}

type ImportImageResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ImageId   *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ImportImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportImageResponseBody) GoString() string {
	return s.String()
}

func (s *ImportImageResponseBody) SetTaskId(v string) *ImportImageResponseBody {
	s.TaskId = &v
	return s
}

func (s *ImportImageResponseBody) SetRequestId(v string) *ImportImageResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportImageResponseBody) SetImageId(v string) *ImportImageResponseBody {
	s.ImageId = &v
	return s
}

func (s *ImportImageResponseBody) SetRegionId(v string) *ImportImageResponseBody {
	s.RegionId = &v
	return s
}

type ImportImageResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ImportImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportImageResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportImageResponse) GoString() string {
	return s.String()
}

func (s *ImportImageResponse) SetHeaders(v map[string]*string) *ImportImageResponse {
	s.Headers = v
	return s
}

func (s *ImportImageResponse) SetBody(v *ImportImageResponseBody) *ImportImageResponse {
	s.Body = v
	return s
}

type ImportKeyPairRequest struct {
	OwnerId              *int64                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                    `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	KeyPairName          *string                    `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	PublicKeyBody        *string                    `json:"PublicKeyBody,omitempty" xml:"PublicKeyBody,omitempty"`
	ResourceGroupId      *string                    `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag                  []*ImportKeyPairRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ImportKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairRequest) GoString() string {
	return s.String()
}

func (s *ImportKeyPairRequest) SetOwnerId(v int64) *ImportKeyPairRequest {
	s.OwnerId = &v
	return s
}

func (s *ImportKeyPairRequest) SetResourceOwnerAccount(v string) *ImportKeyPairRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ImportKeyPairRequest) SetResourceOwnerId(v int64) *ImportKeyPairRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ImportKeyPairRequest) SetRegionId(v string) *ImportKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *ImportKeyPairRequest) SetKeyPairName(v string) *ImportKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairRequest) SetPublicKeyBody(v string) *ImportKeyPairRequest {
	s.PublicKeyBody = &v
	return s
}

func (s *ImportKeyPairRequest) SetResourceGroupId(v string) *ImportKeyPairRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ImportKeyPairRequest) SetTag(v []*ImportKeyPairRequestTag) *ImportKeyPairRequest {
	s.Tag = v
	return s
}

type ImportKeyPairRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ImportKeyPairRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairRequestTag) GoString() string {
	return s.String()
}

func (s *ImportKeyPairRequestTag) SetKey(v string) *ImportKeyPairRequestTag {
	s.Key = &v
	return s
}

func (s *ImportKeyPairRequestTag) SetValue(v string) *ImportKeyPairRequestTag {
	s.Value = &v
	return s
}

type ImportKeyPairResponseBody struct {
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
	KeyPairName        *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportKeyPairResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *ImportKeyPairResponseBody) SetKeyPairFingerPrint(v string) *ImportKeyPairResponseBody {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *ImportKeyPairResponseBody) SetKeyPairName(v string) *ImportKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairResponseBody) SetRequestId(v string) *ImportKeyPairResponseBody {
	s.RequestId = &v
	return s
}

type ImportKeyPairResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ImportKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairResponse) GoString() string {
	return s.String()
}

func (s *ImportKeyPairResponse) SetHeaders(v map[string]*string) *ImportKeyPairResponse {
	s.Headers = v
	return s
}

func (s *ImportKeyPairResponse) SetBody(v *ImportKeyPairResponseBody) *ImportKeyPairResponse {
	s.Body = v
	return s
}

type ImportSnapshotRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SnapshotName         *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OssBucket            *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssObject            *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	RoleName             *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s ImportSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportSnapshotRequest) GoString() string {
	return s.String()
}

func (s *ImportSnapshotRequest) SetOwnerId(v int64) *ImportSnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *ImportSnapshotRequest) SetResourceOwnerAccount(v string) *ImportSnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ImportSnapshotRequest) SetResourceOwnerId(v int64) *ImportSnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ImportSnapshotRequest) SetSnapshotName(v string) *ImportSnapshotRequest {
	s.SnapshotName = &v
	return s
}

func (s *ImportSnapshotRequest) SetRegionId(v string) *ImportSnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *ImportSnapshotRequest) SetOssBucket(v string) *ImportSnapshotRequest {
	s.OssBucket = &v
	return s
}

func (s *ImportSnapshotRequest) SetOssObject(v string) *ImportSnapshotRequest {
	s.OssObject = &v
	return s
}

func (s *ImportSnapshotRequest) SetRoleName(v string) *ImportSnapshotRequest {
	s.RoleName = &v
	return s
}

type ImportSnapshotResponseBody struct {
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *ImportSnapshotResponseBody) SetSnapshotId(v string) *ImportSnapshotResponseBody {
	s.SnapshotId = &v
	return s
}

func (s *ImportSnapshotResponseBody) SetTaskId(v string) *ImportSnapshotResponseBody {
	s.TaskId = &v
	return s
}

func (s *ImportSnapshotResponseBody) SetRequestId(v string) *ImportSnapshotResponseBody {
	s.RequestId = &v
	return s
}

type ImportSnapshotResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ImportSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportSnapshotResponse) GoString() string {
	return s.String()
}

func (s *ImportSnapshotResponse) SetHeaders(v map[string]*string) *ImportSnapshotResponse {
	s.Headers = v
	return s
}

func (s *ImportSnapshotResponse) SetBody(v *ImportSnapshotResponseBody) *ImportSnapshotResponse {
	s.Body = v
	return s
}

type InstallCloudAssistantRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s InstallCloudAssistantRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudAssistantRequest) GoString() string {
	return s.String()
}

func (s *InstallCloudAssistantRequest) SetOwnerId(v int64) *InstallCloudAssistantRequest {
	s.OwnerId = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetResourceOwnerAccount(v string) *InstallCloudAssistantRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetResourceOwnerId(v int64) *InstallCloudAssistantRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetOwnerAccount(v string) *InstallCloudAssistantRequest {
	s.OwnerAccount = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetRegionId(v string) *InstallCloudAssistantRequest {
	s.RegionId = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetInstanceId(v []*string) *InstallCloudAssistantRequest {
	s.InstanceId = v
	return s
}

type InstallCloudAssistantResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InstallCloudAssistantResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudAssistantResponseBody) GoString() string {
	return s.String()
}

func (s *InstallCloudAssistantResponseBody) SetRequestId(v string) *InstallCloudAssistantResponseBody {
	s.RequestId = &v
	return s
}

type InstallCloudAssistantResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InstallCloudAssistantResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InstallCloudAssistantResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudAssistantResponse) GoString() string {
	return s.String()
}

func (s *InstallCloudAssistantResponse) SetHeaders(v map[string]*string) *InstallCloudAssistantResponse {
	s.Headers = v
	return s
}

func (s *InstallCloudAssistantResponse) SetBody(v *InstallCloudAssistantResponseBody) *InstallCloudAssistantResponse {
	s.Body = v
	return s
}

type InvokeCommandRequest struct {
	OwnerId              *int64                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CommandId            *string                `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	Timed                *bool                  `json:"Timed,omitempty" xml:"Timed,omitempty"`
	Frequency            *string                `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	Parameters           map[string]interface{} `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	Username             *string                `json:"Username,omitempty" xml:"Username,omitempty"`
	InstanceId           []*string              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s InvokeCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeCommandRequest) GoString() string {
	return s.String()
}

func (s *InvokeCommandRequest) SetOwnerId(v int64) *InvokeCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *InvokeCommandRequest) SetResourceOwnerAccount(v string) *InvokeCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *InvokeCommandRequest) SetResourceOwnerId(v int64) *InvokeCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *InvokeCommandRequest) SetOwnerAccount(v string) *InvokeCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *InvokeCommandRequest) SetRegionId(v string) *InvokeCommandRequest {
	s.RegionId = &v
	return s
}

func (s *InvokeCommandRequest) SetCommandId(v string) *InvokeCommandRequest {
	s.CommandId = &v
	return s
}

func (s *InvokeCommandRequest) SetTimed(v bool) *InvokeCommandRequest {
	s.Timed = &v
	return s
}

func (s *InvokeCommandRequest) SetFrequency(v string) *InvokeCommandRequest {
	s.Frequency = &v
	return s
}

func (s *InvokeCommandRequest) SetParameters(v map[string]interface{}) *InvokeCommandRequest {
	s.Parameters = v
	return s
}

func (s *InvokeCommandRequest) SetUsername(v string) *InvokeCommandRequest {
	s.Username = &v
	return s
}

func (s *InvokeCommandRequest) SetInstanceId(v []*string) *InvokeCommandRequest {
	s.InstanceId = v
	return s
}

type InvokeCommandShrinkRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CommandId            *string   `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	Timed                *bool     `json:"Timed,omitempty" xml:"Timed,omitempty"`
	Frequency            *string   `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	ParametersShrink     *string   `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	Username             *string   `json:"Username,omitempty" xml:"Username,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s InvokeCommandShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeCommandShrinkRequest) GoString() string {
	return s.String()
}

func (s *InvokeCommandShrinkRequest) SetOwnerId(v int64) *InvokeCommandShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetResourceOwnerAccount(v string) *InvokeCommandShrinkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetResourceOwnerId(v int64) *InvokeCommandShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetOwnerAccount(v string) *InvokeCommandShrinkRequest {
	s.OwnerAccount = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetRegionId(v string) *InvokeCommandShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetCommandId(v string) *InvokeCommandShrinkRequest {
	s.CommandId = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetTimed(v bool) *InvokeCommandShrinkRequest {
	s.Timed = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetFrequency(v string) *InvokeCommandShrinkRequest {
	s.Frequency = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetParametersShrink(v string) *InvokeCommandShrinkRequest {
	s.ParametersShrink = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetUsername(v string) *InvokeCommandShrinkRequest {
	s.Username = &v
	return s
}

func (s *InvokeCommandShrinkRequest) SetInstanceId(v []*string) *InvokeCommandShrinkRequest {
	s.InstanceId = v
	return s
}

type InvokeCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InvokeId  *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
}

func (s InvokeCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvokeCommandResponseBody) GoString() string {
	return s.String()
}

func (s *InvokeCommandResponseBody) SetRequestId(v string) *InvokeCommandResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvokeCommandResponseBody) SetInvokeId(v string) *InvokeCommandResponseBody {
	s.InvokeId = &v
	return s
}

type InvokeCommandResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InvokeCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvokeCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s InvokeCommandResponse) GoString() string {
	return s.String()
}

func (s *InvokeCommandResponse) SetHeaders(v map[string]*string) *InvokeCommandResponse {
	s.Headers = v
	return s
}

func (s *InvokeCommandResponse) SetBody(v *InvokeCommandResponseBody) *InvokeCommandResponse {
	s.Body = v
	return s
}

type JoinResourceGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId           *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s JoinResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupRequest) SetOwnerId(v int64) *JoinResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceOwnerAccount(v string) *JoinResourceGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceOwnerId(v int64) *JoinResourceGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetOwnerAccount(v string) *JoinResourceGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceType(v string) *JoinResourceGroupRequest {
	s.ResourceType = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceId(v string) *JoinResourceGroupRequest {
	s.ResourceId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetRegionId(v string) *JoinResourceGroupRequest {
	s.RegionId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceGroupId(v string) *JoinResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

type JoinResourceGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupResponseBody) SetRequestId(v string) *JoinResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type JoinResourceGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *JoinResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupResponse) SetHeaders(v map[string]*string) *JoinResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *JoinResourceGroupResponse) SetBody(v *JoinResourceGroupResponseBody) *JoinResourceGroupResponse {
	s.Body = v
	return s
}

type JoinSecurityGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NetworkInterfaceId   *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s JoinSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupRequest) SetOwnerId(v int64) *JoinSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetResourceOwnerAccount(v string) *JoinSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetResourceOwnerId(v int64) *JoinSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetSecurityGroupId(v string) *JoinSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetInstanceId(v string) *JoinSecurityGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetNetworkInterfaceId(v string) *JoinSecurityGroupRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetRegionId(v string) *JoinSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetOwnerAccount(v string) *JoinSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

type JoinSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupResponseBody) SetRequestId(v string) *JoinSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type JoinSecurityGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *JoinSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupResponse) SetHeaders(v map[string]*string) *JoinSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *JoinSecurityGroupResponse) SetBody(v *JoinSecurityGroupResponseBody) *JoinSecurityGroupResponse {
	s.Body = v
	return s
}

type LeaveSecurityGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NetworkInterfaceId   *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s LeaveSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupRequest) SetOwnerId(v int64) *LeaveSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetResourceOwnerAccount(v string) *LeaveSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetResourceOwnerId(v int64) *LeaveSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetSecurityGroupId(v string) *LeaveSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetInstanceId(v string) *LeaveSecurityGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetNetworkInterfaceId(v string) *LeaveSecurityGroupRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetRegionId(v string) *LeaveSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetOwnerAccount(v string) *LeaveSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

type LeaveSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s LeaveSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupResponseBody) SetRequestId(v string) *LeaveSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type LeaveSecurityGroupResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *LeaveSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s LeaveSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupResponse) SetHeaders(v map[string]*string) *LeaveSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *LeaveSecurityGroupResponse) SetBody(v *LeaveSecurityGroupResponseBody) *LeaveSecurityGroupResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	OwnerId              *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NextToken            *string                             `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ResourceType         *string                             `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId           []*string                           `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag                  []*ListTagResourcesRequestTag       `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	TagFilter            []*ListTagResourcesRequestTagFilter `json:"TagFilter,omitempty" xml:"TagFilter,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetOwnerId(v int64) *ListTagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerAccount(v string) *ListTagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerId(v int64) *ListTagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetOwnerAccount(v string) *ListTagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

func (s *ListTagResourcesRequest) SetTagFilter(v []*ListTagResourcesRequestTagFilter) *ListTagResourcesRequest {
	s.TagFilter = v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesRequestTagFilter struct {
	TagValues []*string `json:"TagValues,omitempty" xml:"TagValues,omitempty" type:"Repeated"`
	TagKey    *string   `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s ListTagResourcesRequestTagFilter) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTagFilter) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTagFilter) SetTagValues(v []*string) *ListTagResourcesRequestTagFilter {
	s.TagValues = v
	return s
}

func (s *ListTagResourcesRequestTagFilter) SetTagKey(v string) *ListTagResourcesRequestTagFilter {
	s.TagKey = &v
	return s
}

type ListTagResourcesResponseBody struct {
	NextToken    *string                                     `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources []*ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v []*ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceType(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagValue(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagValue = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceId(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagKey(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagKey = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ModifyAutoProvisioningGroupRequest struct {
	OwnerId                          *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount             *string  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                  *int64   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount                     *string  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                         *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AutoProvisioningGroupId          *string  `json:"AutoProvisioningGroupId,omitempty" xml:"AutoProvisioningGroupId,omitempty"`
	ExcessCapacityTerminationPolicy  *string  `json:"ExcessCapacityTerminationPolicy,omitempty" xml:"ExcessCapacityTerminationPolicy,omitempty"`
	DefaultTargetCapacityType        *string  `json:"DefaultTargetCapacityType,omitempty" xml:"DefaultTargetCapacityType,omitempty"`
	TerminateInstancesWithExpiration *bool    `json:"TerminateInstancesWithExpiration,omitempty" xml:"TerminateInstancesWithExpiration,omitempty"`
	MaxSpotPrice                     *float32 `json:"MaxSpotPrice,omitempty" xml:"MaxSpotPrice,omitempty"`
	TotalTargetCapacity              *string  `json:"TotalTargetCapacity,omitempty" xml:"TotalTargetCapacity,omitempty"`
	PayAsYouGoTargetCapacity         *string  `json:"PayAsYouGoTargetCapacity,omitempty" xml:"PayAsYouGoTargetCapacity,omitempty"`
	SpotTargetCapacity               *string  `json:"SpotTargetCapacity,omitempty" xml:"SpotTargetCapacity,omitempty"`
	AutoProvisioningGroupName        *string  `json:"AutoProvisioningGroupName,omitempty" xml:"AutoProvisioningGroupName,omitempty"`
}

func (s ModifyAutoProvisioningGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoProvisioningGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoProvisioningGroupRequest) SetOwnerId(v int64) *ModifyAutoProvisioningGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetResourceOwnerAccount(v string) *ModifyAutoProvisioningGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetResourceOwnerId(v int64) *ModifyAutoProvisioningGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetOwnerAccount(v string) *ModifyAutoProvisioningGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetRegionId(v string) *ModifyAutoProvisioningGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetAutoProvisioningGroupId(v string) *ModifyAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupId = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetExcessCapacityTerminationPolicy(v string) *ModifyAutoProvisioningGroupRequest {
	s.ExcessCapacityTerminationPolicy = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetDefaultTargetCapacityType(v string) *ModifyAutoProvisioningGroupRequest {
	s.DefaultTargetCapacityType = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetTerminateInstancesWithExpiration(v bool) *ModifyAutoProvisioningGroupRequest {
	s.TerminateInstancesWithExpiration = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetMaxSpotPrice(v float32) *ModifyAutoProvisioningGroupRequest {
	s.MaxSpotPrice = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetTotalTargetCapacity(v string) *ModifyAutoProvisioningGroupRequest {
	s.TotalTargetCapacity = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetPayAsYouGoTargetCapacity(v string) *ModifyAutoProvisioningGroupRequest {
	s.PayAsYouGoTargetCapacity = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetSpotTargetCapacity(v string) *ModifyAutoProvisioningGroupRequest {
	s.SpotTargetCapacity = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetAutoProvisioningGroupName(v string) *ModifyAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupName = &v
	return s
}

type ModifyAutoProvisioningGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAutoProvisioningGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoProvisioningGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAutoProvisioningGroupResponseBody) SetRequestId(v string) *ModifyAutoProvisioningGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAutoProvisioningGroupResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyAutoProvisioningGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAutoProvisioningGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoProvisioningGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoProvisioningGroupResponse) SetHeaders(v map[string]*string) *ModifyAutoProvisioningGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyAutoProvisioningGroupResponse) SetBody(v *ModifyAutoProvisioningGroupResponseBody) *ModifyAutoProvisioningGroupResponse {
	s.Body = v
	return s
}

type ModifyAutoSnapshotPolicyRequest struct {
	OwnerId                           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount              *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SystemDiskPolicyEnabled           *bool   `json:"SystemDiskPolicyEnabled,omitempty" xml:"SystemDiskPolicyEnabled,omitempty"`
	SystemDiskPolicyTimePeriod        *int32  `json:"SystemDiskPolicyTimePeriod,omitempty" xml:"SystemDiskPolicyTimePeriod,omitempty"`
	SystemDiskPolicyRetentionDays     *int32  `json:"SystemDiskPolicyRetentionDays,omitempty" xml:"SystemDiskPolicyRetentionDays,omitempty"`
	SystemDiskPolicyRetentionLastWeek *bool   `json:"SystemDiskPolicyRetentionLastWeek,omitempty" xml:"SystemDiskPolicyRetentionLastWeek,omitempty"`
	DataDiskPolicyEnabled             *bool   `json:"DataDiskPolicyEnabled,omitempty" xml:"DataDiskPolicyEnabled,omitempty"`
	DataDiskPolicyTimePeriod          *int32  `json:"DataDiskPolicyTimePeriod,omitempty" xml:"DataDiskPolicyTimePeriod,omitempty"`
	DataDiskPolicyRetentionDays       *int32  `json:"DataDiskPolicyRetentionDays,omitempty" xml:"DataDiskPolicyRetentionDays,omitempty"`
	DataDiskPolicyRetentionLastWeek   *bool   `json:"DataDiskPolicyRetentionLastWeek,omitempty" xml:"DataDiskPolicyRetentionLastWeek,omitempty"`
	OwnerAccount                      *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyRequest) SetOwnerId(v int64) *ModifyAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *ModifyAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *ModifyAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetSystemDiskPolicyEnabled(v bool) *ModifyAutoSnapshotPolicyRequest {
	s.SystemDiskPolicyEnabled = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetSystemDiskPolicyTimePeriod(v int32) *ModifyAutoSnapshotPolicyRequest {
	s.SystemDiskPolicyTimePeriod = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetSystemDiskPolicyRetentionDays(v int32) *ModifyAutoSnapshotPolicyRequest {
	s.SystemDiskPolicyRetentionDays = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetSystemDiskPolicyRetentionLastWeek(v bool) *ModifyAutoSnapshotPolicyRequest {
	s.SystemDiskPolicyRetentionLastWeek = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetDataDiskPolicyEnabled(v bool) *ModifyAutoSnapshotPolicyRequest {
	s.DataDiskPolicyEnabled = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetDataDiskPolicyTimePeriod(v int32) *ModifyAutoSnapshotPolicyRequest {
	s.DataDiskPolicyTimePeriod = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetDataDiskPolicyRetentionDays(v int32) *ModifyAutoSnapshotPolicyRequest {
	s.DataDiskPolicyRetentionDays = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetDataDiskPolicyRetentionLastWeek(v bool) *ModifyAutoSnapshotPolicyRequest {
	s.DataDiskPolicyRetentionLastWeek = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetOwnerAccount(v string) *ModifyAutoSnapshotPolicyRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyAutoSnapshotPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyResponseBody) SetRequestId(v string) *ModifyAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAutoSnapshotPolicyResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *ModifyAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyAutoSnapshotPolicyResponse) SetBody(v *ModifyAutoSnapshotPolicyResponseBody) *ModifyAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type ModifyAutoSnapshotPolicyExRequest struct {
	OwnerId                      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount         *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId              *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                     *string `json:"regionId,omitempty" xml:"regionId,omitempty"`
	AutoSnapshotPolicyId         *string `json:"autoSnapshotPolicyId,omitempty" xml:"autoSnapshotPolicyId,omitempty"`
	AutoSnapshotPolicyName       *string `json:"autoSnapshotPolicyName,omitempty" xml:"autoSnapshotPolicyName,omitempty"`
	TimePoints                   *string `json:"timePoints,omitempty" xml:"timePoints,omitempty"`
	RepeatWeekdays               *string `json:"repeatWeekdays,omitempty" xml:"repeatWeekdays,omitempty"`
	RetentionDays                *int32  `json:"retentionDays,omitempty" xml:"retentionDays,omitempty"`
	EnableCrossRegionCopy        *bool   `json:"EnableCrossRegionCopy,omitempty" xml:"EnableCrossRegionCopy,omitempty"`
	TargetCopyRegions            *string `json:"TargetCopyRegions,omitempty" xml:"TargetCopyRegions,omitempty"`
	CopiedSnapshotsRetentionDays *int32  `json:"CopiedSnapshotsRetentionDays,omitempty" xml:"CopiedSnapshotsRetentionDays,omitempty"`
}

func (s ModifyAutoSnapshotPolicyExRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyExRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetOwnerId(v int64) *ModifyAutoSnapshotPolicyExRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetResourceOwnerAccount(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetResourceOwnerId(v int64) *ModifyAutoSnapshotPolicyExRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetRegionId(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetAutoSnapshotPolicyId(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetAutoSnapshotPolicyName(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.AutoSnapshotPolicyName = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetTimePoints(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.TimePoints = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetRepeatWeekdays(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.RepeatWeekdays = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetRetentionDays(v int32) *ModifyAutoSnapshotPolicyExRequest {
	s.RetentionDays = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetEnableCrossRegionCopy(v bool) *ModifyAutoSnapshotPolicyExRequest {
	s.EnableCrossRegionCopy = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetTargetCopyRegions(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.TargetCopyRegions = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetCopiedSnapshotsRetentionDays(v int32) *ModifyAutoSnapshotPolicyExRequest {
	s.CopiedSnapshotsRetentionDays = &v
	return s
}

type ModifyAutoSnapshotPolicyExResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAutoSnapshotPolicyExResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyExResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyExResponseBody) SetRequestId(v string) *ModifyAutoSnapshotPolicyExResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAutoSnapshotPolicyExResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyAutoSnapshotPolicyExResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAutoSnapshotPolicyExResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyExResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyExResponse) SetHeaders(v map[string]*string) *ModifyAutoSnapshotPolicyExResponse {
	s.Headers = v
	return s
}

func (s *ModifyAutoSnapshotPolicyExResponse) SetBody(v *ModifyAutoSnapshotPolicyExResponseBody) *ModifyAutoSnapshotPolicyExResponse {
	s.Body = v
	return s
}

type ModifyBandwidthPackageSpecRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BandwidthPackageId   *string `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty"`
	Bandwidth            *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
}

func (s ModifyBandwidthPackageSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBandwidthPackageSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyBandwidthPackageSpecRequest) SetOwnerId(v int64) *ModifyBandwidthPackageSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetResourceOwnerAccount(v string) *ModifyBandwidthPackageSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetResourceOwnerId(v int64) *ModifyBandwidthPackageSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetOwnerAccount(v string) *ModifyBandwidthPackageSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetRegionId(v string) *ModifyBandwidthPackageSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetBandwidthPackageId(v string) *ModifyBandwidthPackageSpecRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetBandwidth(v string) *ModifyBandwidthPackageSpecRequest {
	s.Bandwidth = &v
	return s
}

type ModifyBandwidthPackageSpecResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBandwidthPackageSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBandwidthPackageSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBandwidthPackageSpecResponseBody) SetRequestId(v string) *ModifyBandwidthPackageSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyBandwidthPackageSpecResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyBandwidthPackageSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyBandwidthPackageSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBandwidthPackageSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyBandwidthPackageSpecResponse) SetHeaders(v map[string]*string) *ModifyBandwidthPackageSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyBandwidthPackageSpecResponse) SetBody(v *ModifyBandwidthPackageSpecResponseBody) *ModifyBandwidthPackageSpecResponse {
	s.Body = v
	return s
}

type ModifyCommandRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CommandId            *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	CommandContent       *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	WorkingDir           *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
	Timeout              *int64  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s ModifyCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommandRequest) GoString() string {
	return s.String()
}

func (s *ModifyCommandRequest) SetOwnerId(v int64) *ModifyCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCommandRequest) SetResourceOwnerAccount(v string) *ModifyCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyCommandRequest) SetResourceOwnerId(v int64) *ModifyCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyCommandRequest) SetOwnerAccount(v string) *ModifyCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyCommandRequest) SetRegionId(v string) *ModifyCommandRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCommandRequest) SetCommandId(v string) *ModifyCommandRequest {
	s.CommandId = &v
	return s
}

func (s *ModifyCommandRequest) SetName(v string) *ModifyCommandRequest {
	s.Name = &v
	return s
}

func (s *ModifyCommandRequest) SetDescription(v string) *ModifyCommandRequest {
	s.Description = &v
	return s
}

func (s *ModifyCommandRequest) SetCommandContent(v string) *ModifyCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *ModifyCommandRequest) SetWorkingDir(v string) *ModifyCommandRequest {
	s.WorkingDir = &v
	return s
}

func (s *ModifyCommandRequest) SetTimeout(v int64) *ModifyCommandRequest {
	s.Timeout = &v
	return s
}

type ModifyCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommandResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCommandResponseBody) SetRequestId(v string) *ModifyCommandResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCommandResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommandResponse) GoString() string {
	return s.String()
}

func (s *ModifyCommandResponse) SetHeaders(v map[string]*string) *ModifyCommandResponse {
	s.Headers = v
	return s
}

func (s *ModifyCommandResponse) SetBody(v *ModifyCommandResponseBody) *ModifyCommandResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostAttributeRequest struct {
	NetworkAttributes      *ModifyDedicatedHostAttributeRequestNetworkAttributes `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	OwnerId                *int64                                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string                                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount           *string                                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId               *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId        *string                                               `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	DedicatedHostName      *string                                               `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	Description            *string                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	ActionOnMaintenance    *string                                               `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty"`
	AutoPlacement          *string                                               `json:"AutoPlacement,omitempty" xml:"AutoPlacement,omitempty"`
	DedicatedHostClusterId *string                                               `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	CpuOverCommitRatio     *float32                                              `json:"CpuOverCommitRatio,omitempty" xml:"CpuOverCommitRatio,omitempty"`
}

func (s ModifyDedicatedHostAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeRequest) SetNetworkAttributes(v *ModifyDedicatedHostAttributeRequestNetworkAttributes) *ModifyDedicatedHostAttributeRequest {
	s.NetworkAttributes = v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostId(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostName(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDescription(v string) *ModifyDedicatedHostAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetActionOnMaintenance(v string) *ModifyDedicatedHostAttributeRequest {
	s.ActionOnMaintenance = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetAutoPlacement(v string) *ModifyDedicatedHostAttributeRequest {
	s.AutoPlacement = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostClusterId(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetCpuOverCommitRatio(v float32) *ModifyDedicatedHostAttributeRequest {
	s.CpuOverCommitRatio = &v
	return s
}

type ModifyDedicatedHostAttributeRequestNetworkAttributes struct {
	SlbUdpTimeout *int32 `json:"SlbUdpTimeout,omitempty" xml:"SlbUdpTimeout,omitempty"`
	UdpTimeout    *int32 `json:"UdpTimeout,omitempty" xml:"UdpTimeout,omitempty"`
}

func (s ModifyDedicatedHostAttributeRequestNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeRequestNetworkAttributes) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeRequestNetworkAttributes) SetSlbUdpTimeout(v int32) *ModifyDedicatedHostAttributeRequestNetworkAttributes {
	s.SlbUdpTimeout = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequestNetworkAttributes) SetUdpTimeout(v int32) *ModifyDedicatedHostAttributeRequestNetworkAttributes {
	s.UdpTimeout = &v
	return s
}

type ModifyDedicatedHostAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeResponseBody) SetRequestId(v string) *ModifyDedicatedHostAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAttributeResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDedicatedHostAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostAttributeResponse) SetBody(v *ModifyDedicatedHostAttributeResponseBody) *ModifyDedicatedHostAttributeResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostAutoReleaseTimeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	AutoReleaseTime      *string `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDedicatedHostAutoReleaseTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoReleaseTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetRegionId(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetDedicatedHostId(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetAutoReleaseTime(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDedicatedHostAutoReleaseTimeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostAutoReleaseTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoReleaseTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoReleaseTimeResponseBody) SetRequestId(v string) *ModifyDedicatedHostAutoReleaseTimeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAutoReleaseTimeResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDedicatedHostAutoReleaseTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAutoReleaseTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoReleaseTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoReleaseTimeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostAutoReleaseTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeResponse) SetBody(v *ModifyDedicatedHostAutoReleaseTimeResponseBody) *ModifyDedicatedHostAutoReleaseTimeResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostAutoRenewAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DedicatedHostIds     *string `json:"DedicatedHostIds,omitempty" xml:"DedicatedHostIds,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Duration             *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	AutoRenew            *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	RenewalStatus        *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
}

func (s ModifyDedicatedHostAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetDedicatedHostIds(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetDuration(v int32) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetPeriodUnit(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetAutoRenew(v bool) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetRenewalStatus(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

type ModifyDedicatedHostAutoRenewAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostAutoRenewAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoRenewAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoRenewAttributeResponseBody) SetRequestId(v string) *ModifyDedicatedHostAutoRenewAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAutoRenewAttributeResponse struct {
	Headers map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDedicatedHostAutoRenewAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoRenewAttributeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostAutoRenewAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeResponse) SetBody(v *ModifyDedicatedHostAutoRenewAttributeResponseBody) *ModifyDedicatedHostAutoRenewAttributeResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostClusterAttributeRequest struct {
	OwnerId                  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount             *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                 *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostClusterId   *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostClusterName *string `json:"DedicatedHostClusterName,omitempty" xml:"DedicatedHostClusterName,omitempty"`
	Description              *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyDedicatedHostClusterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostClusterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostClusterAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostClusterAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetDedicatedHostClusterId(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetDedicatedHostClusterName(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.DedicatedHostClusterName = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetDescription(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.Description = &v
	return s
}

type ModifyDedicatedHostClusterAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostClusterAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostClusterAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostClusterAttributeResponseBody) SetRequestId(v string) *ModifyDedicatedHostClusterAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostClusterAttributeResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDedicatedHostClusterAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostClusterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostClusterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostClusterAttributeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostClusterAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeResponse) SetBody(v *ModifyDedicatedHostClusterAttributeResponseBody) *ModifyDedicatedHostClusterAttributeResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostsChargeTypeRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DedicatedHostIds        *string `json:"DedicatedHostIds,omitempty" xml:"DedicatedHostIds,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Period                  *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit              *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	DryRun                  *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	AutoPay                 *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	DedicatedHostChargeType *string `json:"DedicatedHostChargeType,omitempty" xml:"DedicatedHostChargeType,omitempty"`
	ClientToken             *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DetailFee               *bool   `json:"DetailFee,omitempty" xml:"DetailFee,omitempty"`
}

func (s ModifyDedicatedHostsChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostsChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetOwnerId(v int64) *ModifyDedicatedHostsChargeTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostsChargeTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetDedicatedHostIds(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetRegionId(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetPeriod(v int32) *ModifyDedicatedHostsChargeTypeRequest {
	s.Period = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetPeriodUnit(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetDryRun(v bool) *ModifyDedicatedHostsChargeTypeRequest {
	s.DryRun = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetAutoPay(v bool) *ModifyDedicatedHostsChargeTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetDedicatedHostChargeType(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.DedicatedHostChargeType = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetClientToken(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetDetailFee(v bool) *ModifyDedicatedHostsChargeTypeRequest {
	s.DetailFee = &v
	return s
}

type ModifyDedicatedHostsChargeTypeResponseBody struct {
	FeeOfInstances []*ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances `json:"FeeOfInstances,omitempty" xml:"FeeOfInstances,omitempty" type:"Repeated"`
	RequestId      *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId        *string                                                     `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyDedicatedHostsChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostsChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostsChargeTypeResponseBody) SetFeeOfInstances(v []*ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances) *ModifyDedicatedHostsChargeTypeResponseBody {
	s.FeeOfInstances = v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeResponseBody) SetRequestId(v string) *ModifyDedicatedHostsChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeResponseBody) SetOrderId(v string) *ModifyDedicatedHostsChargeTypeResponseBody {
	s.OrderId = &v
	return s
}

type ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Currency   *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	Fee        *string `json:"Fee,omitempty" xml:"Fee,omitempty"`
}

func (s ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances) SetInstanceId(v string) *ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances {
	s.InstanceId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances) SetCurrency(v string) *ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances {
	s.Currency = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances) SetFee(v string) *ModifyDedicatedHostsChargeTypeResponseBodyFeeOfInstances {
	s.Fee = &v
	return s
}

type ModifyDedicatedHostsChargeTypeResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDedicatedHostsChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostsChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostsChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostsChargeTypeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostsChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeResponse) SetBody(v *ModifyDedicatedHostsChargeTypeResponseBody) *ModifyDedicatedHostsChargeTypeResponse {
	s.Body = v
	return s
}

type ModifyDemandRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DemandId             *string `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
	DemandName           *string `json:"DemandName,omitempty" xml:"DemandName,omitempty"`
	DemandDescription    *string `json:"DemandDescription,omitempty" xml:"DemandDescription,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Amount               *int32  `json:"Amount,omitempty" xml:"Amount,omitempty"`
	InstanceChargeType   *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s ModifyDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDemandRequest) GoString() string {
	return s.String()
}

func (s *ModifyDemandRequest) SetOwnerId(v int64) *ModifyDemandRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDemandRequest) SetResourceOwnerAccount(v string) *ModifyDemandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDemandRequest) SetResourceOwnerId(v int64) *ModifyDemandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDemandRequest) SetOwnerAccount(v string) *ModifyDemandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDemandRequest) SetClientToken(v string) *ModifyDemandRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDemandRequest) SetRegionId(v string) *ModifyDemandRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDemandRequest) SetZoneId(v string) *ModifyDemandRequest {
	s.ZoneId = &v
	return s
}

func (s *ModifyDemandRequest) SetDemandId(v string) *ModifyDemandRequest {
	s.DemandId = &v
	return s
}

func (s *ModifyDemandRequest) SetDemandName(v string) *ModifyDemandRequest {
	s.DemandName = &v
	return s
}

func (s *ModifyDemandRequest) SetDemandDescription(v string) *ModifyDemandRequest {
	s.DemandDescription = &v
	return s
}

func (s *ModifyDemandRequest) SetInstanceType(v string) *ModifyDemandRequest {
	s.InstanceType = &v
	return s
}

func (s *ModifyDemandRequest) SetAmount(v int32) *ModifyDemandRequest {
	s.Amount = &v
	return s
}

func (s *ModifyDemandRequest) SetInstanceChargeType(v string) *ModifyDemandRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ModifyDemandRequest) SetPeriod(v int32) *ModifyDemandRequest {
	s.Period = &v
	return s
}

func (s *ModifyDemandRequest) SetPeriodUnit(v string) *ModifyDemandRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyDemandRequest) SetStartTime(v string) *ModifyDemandRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyDemandRequest) SetEndTime(v string) *ModifyDemandRequest {
	s.EndTime = &v
	return s
}

type ModifyDemandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDemandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDemandResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDemandResponseBody) SetRequestId(v string) *ModifyDemandResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDemandResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDemandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDemandResponse) GoString() string {
	return s.String()
}

func (s *ModifyDemandResponse) SetHeaders(v map[string]*string) *ModifyDemandResponse {
	s.Headers = v
	return s
}

func (s *ModifyDemandResponse) SetBody(v *ModifyDemandResponseBody) *ModifyDemandResponse {
	s.Body = v
	return s
}

type ModifyDeploymentSetAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DeploymentSetId      *string `json:"DeploymentSetId,omitempty" xml:"DeploymentSetId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeploymentSetName    *string `json:"DeploymentSetName,omitempty" xml:"DeploymentSetName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDeploymentSetAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeploymentSetAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDeploymentSetAttributeRequest) SetOwnerId(v int64) *ModifyDeploymentSetAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDeploymentSetAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetResourceOwnerId(v int64) *ModifyDeploymentSetAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetDeploymentSetId(v string) *ModifyDeploymentSetAttributeRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetDescription(v string) *ModifyDeploymentSetAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetDeploymentSetName(v string) *ModifyDeploymentSetAttributeRequest {
	s.DeploymentSetName = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetRegionId(v string) *ModifyDeploymentSetAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetOwnerAccount(v string) *ModifyDeploymentSetAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDeploymentSetAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDeploymentSetAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeploymentSetAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDeploymentSetAttributeResponseBody) SetRequestId(v string) *ModifyDeploymentSetAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDeploymentSetAttributeResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDeploymentSetAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDeploymentSetAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeploymentSetAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDeploymentSetAttributeResponse) SetHeaders(v map[string]*string) *ModifyDeploymentSetAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDeploymentSetAttributeResponse) SetBody(v *ModifyDeploymentSetAttributeResponseBody) *ModifyDeploymentSetAttributeResponse {
	s.Body = v
	return s
}

type ModifyDiskAttributeRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DiskId               *string   `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	DiskName             *string   `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	DeleteWithInstance   *bool     `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	DeleteAutoSnapshot   *bool     `json:"DeleteAutoSnapshot,omitempty" xml:"DeleteAutoSnapshot,omitempty"`
	EnableAutoSnapshot   *bool     `json:"EnableAutoSnapshot,omitempty" xml:"EnableAutoSnapshot,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DiskIds              []*string `json:"DiskIds,omitempty" xml:"DiskIds,omitempty" type:"Repeated"`
}

func (s ModifyDiskAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDiskAttributeRequest) SetOwnerId(v int64) *ModifyDiskAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDiskAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetResourceOwnerId(v int64) *ModifyDiskAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDiskId(v string) *ModifyDiskAttributeRequest {
	s.DiskId = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDiskName(v string) *ModifyDiskAttributeRequest {
	s.DiskName = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDescription(v string) *ModifyDiskAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDeleteWithInstance(v bool) *ModifyDiskAttributeRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDeleteAutoSnapshot(v bool) *ModifyDiskAttributeRequest {
	s.DeleteAutoSnapshot = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetEnableAutoSnapshot(v bool) *ModifyDiskAttributeRequest {
	s.EnableAutoSnapshot = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetOwnerAccount(v string) *ModifyDiskAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDiskIds(v []*string) *ModifyDiskAttributeRequest {
	s.DiskIds = v
	return s
}

type ModifyDiskAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDiskAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDiskAttributeResponseBody) SetRequestId(v string) *ModifyDiskAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDiskAttributeResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDiskAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDiskAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDiskAttributeResponse) SetHeaders(v map[string]*string) *ModifyDiskAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDiskAttributeResponse) SetBody(v *ModifyDiskAttributeResponseBody) *ModifyDiskAttributeResponse {
	s.Body = v
	return s
}

type ModifyDiskChargeTypeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DiskIds              *string `json:"DiskIds,omitempty" xml:"DiskIds,omitempty"`
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DiskChargeType       *string `json:"DiskChargeType,omitempty" xml:"DiskChargeType,omitempty"`
}

func (s ModifyDiskChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDiskChargeTypeRequest) SetOwnerId(v int64) *ModifyDiskChargeTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetResourceOwnerAccount(v string) *ModifyDiskChargeTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetResourceOwnerId(v int64) *ModifyDiskChargeTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetInstanceId(v string) *ModifyDiskChargeTypeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetRegionId(v string) *ModifyDiskChargeTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetDiskIds(v string) *ModifyDiskChargeTypeRequest {
	s.DiskIds = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetAutoPay(v bool) *ModifyDiskChargeTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetClientToken(v string) *ModifyDiskChargeTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetOwnerAccount(v string) *ModifyDiskChargeTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetDiskChargeType(v string) *ModifyDiskChargeTypeRequest {
	s.DiskChargeType = &v
	return s
}

type ModifyDiskChargeTypeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyDiskChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDiskChargeTypeResponseBody) SetRequestId(v string) *ModifyDiskChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDiskChargeTypeResponseBody) SetOrderId(v string) *ModifyDiskChargeTypeResponseBody {
	s.OrderId = &v
	return s
}

type ModifyDiskChargeTypeResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDiskChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDiskChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDiskChargeTypeResponse) SetHeaders(v map[string]*string) *ModifyDiskChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDiskChargeTypeResponse) SetBody(v *ModifyDiskChargeTypeResponseBody) *ModifyDiskChargeTypeResponse {
	s.Body = v
	return s
}

type ModifyDiskSpecRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DiskId               *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	PerformanceLevel     *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	DiskCategory         *string `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
	DryRun               *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s ModifyDiskSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecRequest) SetOwnerId(v int64) *ModifyDiskSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetResourceOwnerAccount(v string) *ModifyDiskSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetResourceOwnerId(v int64) *ModifyDiskSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetOwnerAccount(v string) *ModifyDiskSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetDiskId(v string) *ModifyDiskSpecRequest {
	s.DiskId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetPerformanceLevel(v string) *ModifyDiskSpecRequest {
	s.PerformanceLevel = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetDiskCategory(v string) *ModifyDiskSpecRequest {
	s.DiskCategory = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetDryRun(v bool) *ModifyDiskSpecRequest {
	s.DryRun = &v
	return s
}

type ModifyDiskSpecResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDiskSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecResponseBody) SetTaskId(v string) *ModifyDiskSpecResponseBody {
	s.TaskId = &v
	return s
}

func (s *ModifyDiskSpecResponseBody) SetRequestId(v string) *ModifyDiskSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDiskSpecResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDiskSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDiskSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecResponse) SetHeaders(v map[string]*string) *ModifyDiskSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyDiskSpecResponse) SetBody(v *ModifyDiskSpecResponseBody) *ModifyDiskSpecResponse {
	s.Body = v
	return s
}

type ModifyEipAddressAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId         *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	Bandwidth            *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyEipAddressAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEipAddressAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyEipAddressAttributeRequest) SetOwnerId(v int64) *ModifyEipAddressAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetResourceOwnerAccount(v string) *ModifyEipAddressAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetResourceOwnerId(v int64) *ModifyEipAddressAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetRegionId(v string) *ModifyEipAddressAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetAllocationId(v string) *ModifyEipAddressAttributeRequest {
	s.AllocationId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetBandwidth(v string) *ModifyEipAddressAttributeRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetOwnerAccount(v string) *ModifyEipAddressAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyEipAddressAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyEipAddressAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEipAddressAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEipAddressAttributeResponseBody) SetRequestId(v string) *ModifyEipAddressAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyEipAddressAttributeResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyEipAddressAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyEipAddressAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEipAddressAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyEipAddressAttributeResponse) SetHeaders(v map[string]*string) *ModifyEipAddressAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyEipAddressAttributeResponse) SetBody(v *ModifyEipAddressAttributeResponseBody) *ModifyEipAddressAttributeResponse {
	s.Body = v
	return s
}

type ModifyForwardEntryRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ForwardTableId       *string `json:"ForwardTableId,omitempty" xml:"ForwardTableId,omitempty"`
	ForwardEntryId       *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	ExternalIp           *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort         *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	InternalIp           *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort         *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	IpProtocol           *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryRequest) SetOwnerId(v int64) *ModifyForwardEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetResourceOwnerAccount(v string) *ModifyForwardEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetResourceOwnerId(v int64) *ModifyForwardEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetOwnerAccount(v string) *ModifyForwardEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetForwardTableId(v string) *ModifyForwardEntryRequest {
	s.ForwardTableId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetForwardEntryId(v string) *ModifyForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetExternalIp(v string) *ModifyForwardEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetExternalPort(v string) *ModifyForwardEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetInternalIp(v string) *ModifyForwardEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetInternalPort(v string) *ModifyForwardEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetIpProtocol(v string) *ModifyForwardEntryRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetRegionId(v string) *ModifyForwardEntryRequest {
	s.RegionId = &v
	return s
}

type ModifyForwardEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyForwardEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryResponseBody) SetRequestId(v string) *ModifyForwardEntryResponseBody {
	s.RequestId = &v
	return s
}

type ModifyForwardEntryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyForwardEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryResponse) SetHeaders(v map[string]*string) *ModifyForwardEntryResponse {
	s.Headers = v
	return s
}

func (s *ModifyForwardEntryResponse) SetBody(v *ModifyForwardEntryResponseBody) *ModifyForwardEntryResponse {
	s.Body = v
	return s
}

type ModifyHaVipAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	HaVipId              *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyHaVipAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeRequest) SetOwnerId(v int64) *ModifyHaVipAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetResourceOwnerAccount(v string) *ModifyHaVipAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetResourceOwnerId(v int64) *ModifyHaVipAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetOwnerAccount(v string) *ModifyHaVipAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetClientToken(v string) *ModifyHaVipAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetRegionId(v string) *ModifyHaVipAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetHaVipId(v string) *ModifyHaVipAttributeRequest {
	s.HaVipId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetDescription(v string) *ModifyHaVipAttributeRequest {
	s.Description = &v
	return s
}

type ModifyHaVipAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHaVipAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeResponseBody) SetRequestId(v string) *ModifyHaVipAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHaVipAttributeResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyHaVipAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyHaVipAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeResponse) SetHeaders(v map[string]*string) *ModifyHaVipAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyHaVipAttributeResponse) SetBody(v *ModifyHaVipAttributeResponseBody) *ModifyHaVipAttributeResponse {
	s.Body = v
	return s
}

type ModifyHpcClusterAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	HpcClusterId         *string `json:"HpcClusterId,omitempty" xml:"HpcClusterId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyHpcClusterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHpcClusterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyHpcClusterAttributeRequest) SetOwnerId(v int64) *ModifyHpcClusterAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetResourceOwnerAccount(v string) *ModifyHpcClusterAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetResourceOwnerId(v int64) *ModifyHpcClusterAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetRegionId(v string) *ModifyHpcClusterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetClientToken(v string) *ModifyHpcClusterAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetOwnerAccount(v string) *ModifyHpcClusterAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetHpcClusterId(v string) *ModifyHpcClusterAttributeRequest {
	s.HpcClusterId = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetDescription(v string) *ModifyHpcClusterAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetName(v string) *ModifyHpcClusterAttributeRequest {
	s.Name = &v
	return s
}

type ModifyHpcClusterAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHpcClusterAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHpcClusterAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHpcClusterAttributeResponseBody) SetRequestId(v string) *ModifyHpcClusterAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHpcClusterAttributeResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyHpcClusterAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyHpcClusterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHpcClusterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyHpcClusterAttributeResponse) SetHeaders(v map[string]*string) *ModifyHpcClusterAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyHpcClusterAttributeResponse) SetBody(v *ModifyHpcClusterAttributeResponseBody) *ModifyHpcClusterAttributeResponse {
	s.Body = v
	return s
}

type ModifyImageAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageId              *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName            *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ImageFamily          *string `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty"`
	BootMode             *string `json:"BootMode,omitempty" xml:"BootMode,omitempty"`
	LicenseType          *string `json:"LicenseType,omitempty" xml:"LicenseType,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyImageAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeRequest) SetOwnerId(v int64) *ModifyImageAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetResourceOwnerAccount(v string) *ModifyImageAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetResourceOwnerId(v int64) *ModifyImageAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetRegionId(v string) *ModifyImageAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetImageId(v string) *ModifyImageAttributeRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetImageName(v string) *ModifyImageAttributeRequest {
	s.ImageName = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetStatus(v string) *ModifyImageAttributeRequest {
	s.Status = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetImageFamily(v string) *ModifyImageAttributeRequest {
	s.ImageFamily = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetBootMode(v string) *ModifyImageAttributeRequest {
	s.BootMode = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetLicenseType(v string) *ModifyImageAttributeRequest {
	s.LicenseType = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetDescription(v string) *ModifyImageAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetOwnerAccount(v string) *ModifyImageAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyImageAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeResponseBody) SetRequestId(v string) *ModifyImageAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImageAttributeResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyImageAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyImageAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeResponse) SetHeaders(v map[string]*string) *ModifyImageAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageAttributeResponse) SetBody(v *ModifyImageAttributeResponseBody) *ModifyImageAttributeResponse {
	s.Body = v
	return s
}

type ModifyImageShareGroupPermissionRequest struct {
	AddGroup             []*string `json:"AddGroup,omitempty" xml:"AddGroup,omitempty" type:"Repeated"`
	RemoveGroup          []*string `json:"RemoveGroup,omitempty" xml:"RemoveGroup,omitempty" type:"Repeated"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageId              *string   `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyImageShareGroupPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageShareGroupPermissionRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageShareGroupPermissionRequest) SetAddGroup(v []*string) *ModifyImageShareGroupPermissionRequest {
	s.AddGroup = v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetRemoveGroup(v []*string) *ModifyImageShareGroupPermissionRequest {
	s.RemoveGroup = v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetOwnerId(v int64) *ModifyImageShareGroupPermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetResourceOwnerAccount(v string) *ModifyImageShareGroupPermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetResourceOwnerId(v int64) *ModifyImageShareGroupPermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetRegionId(v string) *ModifyImageShareGroupPermissionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetImageId(v string) *ModifyImageShareGroupPermissionRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetOwnerAccount(v string) *ModifyImageShareGroupPermissionRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyImageShareGroupPermissionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageShareGroupPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageShareGroupPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageShareGroupPermissionResponseBody) SetRequestId(v string) *ModifyImageShareGroupPermissionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImageShareGroupPermissionResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyImageShareGroupPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyImageShareGroupPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageShareGroupPermissionResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageShareGroupPermissionResponse) SetHeaders(v map[string]*string) *ModifyImageShareGroupPermissionResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageShareGroupPermissionResponse) SetBody(v *ModifyImageShareGroupPermissionResponseBody) *ModifyImageShareGroupPermissionResponse {
	s.Body = v
	return s
}

type ModifyImageSharePermissionRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ImageId              *string   `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	LaunchPermission     *string   `json:"LaunchPermission,omitempty" xml:"LaunchPermission,omitempty"`
	AddAccount           []*string `json:"AddAccount,omitempty" xml:"AddAccount,omitempty" type:"Repeated"`
	RemoveAccount        []*string `json:"RemoveAccount,omitempty" xml:"RemoveAccount,omitempty" type:"Repeated"`
}

func (s ModifyImageSharePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionRequest) SetOwnerId(v int64) *ModifyImageSharePermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetResourceOwnerAccount(v string) *ModifyImageSharePermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetResourceOwnerId(v int64) *ModifyImageSharePermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetRegionId(v string) *ModifyImageSharePermissionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetImageId(v string) *ModifyImageSharePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetOwnerAccount(v string) *ModifyImageSharePermissionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetLaunchPermission(v string) *ModifyImageSharePermissionRequest {
	s.LaunchPermission = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetAddAccount(v []*string) *ModifyImageSharePermissionRequest {
	s.AddAccount = v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetRemoveAccount(v []*string) *ModifyImageSharePermissionRequest {
	s.RemoveAccount = v
	return s
}

type ModifyImageSharePermissionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageSharePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionResponseBody) SetRequestId(v string) *ModifyImageSharePermissionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImageSharePermissionResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyImageSharePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyImageSharePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionResponse) SetHeaders(v map[string]*string) *ModifyImageSharePermissionResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageSharePermissionResponse) SetBody(v *ModifyImageSharePermissionResponseBody) *ModifyImageSharePermissionResponse {
	s.Body = v
	return s
}

type ModifyInstanceAttachmentAttributesRequest struct {
	PrivatePoolOptions   *ModifyInstanceAttachmentAttributesRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId              *int64                                                       `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                                      `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                                      `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string                                                      `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ModifyInstanceAttachmentAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttachmentAttributesRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttachmentAttributesRequest) SetPrivatePoolOptions(v *ModifyInstanceAttachmentAttributesRequestPrivatePoolOptions) *ModifyInstanceAttachmentAttributesRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *ModifyInstanceAttachmentAttributesRequest) SetOwnerId(v int64) *ModifyInstanceAttachmentAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAttachmentAttributesRequest) SetResourceOwnerAccount(v string) *ModifyInstanceAttachmentAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceAttachmentAttributesRequest) SetResourceOwnerId(v int64) *ModifyInstanceAttachmentAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceAttachmentAttributesRequest) SetOwnerAccount(v string) *ModifyInstanceAttachmentAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceAttachmentAttributesRequest) SetRegionId(v string) *ModifyInstanceAttachmentAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceAttachmentAttributesRequest) SetInstanceId(v string) *ModifyInstanceAttachmentAttributesRequest {
	s.InstanceId = &v
	return s
}

type ModifyInstanceAttachmentAttributesRequestPrivatePoolOptions struct {
	MatchCriteria *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ModifyInstanceAttachmentAttributesRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttachmentAttributesRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttachmentAttributesRequestPrivatePoolOptions) SetMatchCriteria(v string) *ModifyInstanceAttachmentAttributesRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

func (s *ModifyInstanceAttachmentAttributesRequestPrivatePoolOptions) SetId(v string) *ModifyInstanceAttachmentAttributesRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

type ModifyInstanceAttachmentAttributesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAttachmentAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttachmentAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttachmentAttributesResponseBody) SetRequestId(v string) *ModifyInstanceAttachmentAttributesResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAttachmentAttributesResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceAttachmentAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceAttachmentAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttachmentAttributesResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttachmentAttributesResponse) SetHeaders(v map[string]*string) *ModifyInstanceAttachmentAttributesResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAttachmentAttributesResponse) SetBody(v *ModifyInstanceAttachmentAttributesResponseBody) *ModifyInstanceAttachmentAttributesResponse {
	s.Body = v
	return s
}

type ModifyInstanceAttributeRequest struct {
	OwnerId                     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount        *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId                  *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Password                    *string   `json:"Password,omitempty" xml:"Password,omitempty"`
	HostName                    *string   `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceName                *string   `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Description                 *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount                *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserData                    *string   `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Recyclable                  *bool     `json:"Recyclable,omitempty" xml:"Recyclable,omitempty"`
	CreditSpecification         *string   `json:"CreditSpecification,omitempty" xml:"CreditSpecification,omitempty"`
	DeletionProtection          *bool     `json:"DeletionProtection,omitempty" xml:"DeletionProtection,omitempty"`
	NetworkInterfaceQueueNumber *int32    `json:"NetworkInterfaceQueueNumber,omitempty" xml:"NetworkInterfaceQueueNumber,omitempty"`
	SecurityGroupIds            []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
}

func (s ModifyInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeRequest) SetOwnerId(v int64) *ModifyInstanceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetResourceOwnerId(v int64) *ModifyInstanceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceId(v string) *ModifyInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetPassword(v string) *ModifyInstanceAttributeRequest {
	s.Password = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetHostName(v string) *ModifyInstanceAttributeRequest {
	s.HostName = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceName(v string) *ModifyInstanceAttributeRequest {
	s.InstanceName = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetDescription(v string) *ModifyInstanceAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetOwnerAccount(v string) *ModifyInstanceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetUserData(v string) *ModifyInstanceAttributeRequest {
	s.UserData = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetRecyclable(v bool) *ModifyInstanceAttributeRequest {
	s.Recyclable = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetCreditSpecification(v string) *ModifyInstanceAttributeRequest {
	s.CreditSpecification = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetDeletionProtection(v bool) *ModifyInstanceAttributeRequest {
	s.DeletionProtection = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetNetworkInterfaceQueueNumber(v int32) *ModifyInstanceAttributeRequest {
	s.NetworkInterfaceQueueNumber = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetSecurityGroupIds(v []*string) *ModifyInstanceAttributeRequest {
	s.SecurityGroupIds = v
	return s
}

type ModifyInstanceAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponseBody) SetRequestId(v string) *ModifyInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAttributeResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAttributeResponse) SetBody(v *ModifyInstanceAttributeResponseBody) *ModifyInstanceAttributeResponse {
	s.Body = v
	return s
}

type ModifyInstanceAutoReleaseTimeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	AutoReleaseTime      *string `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyInstanceAutoReleaseTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoReleaseTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetOwnerId(v int64) *ModifyInstanceAutoReleaseTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetResourceOwnerId(v int64) *ModifyInstanceAutoReleaseTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetRegionId(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetInstanceId(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetAutoReleaseTime(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetOwnerAccount(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyInstanceAutoReleaseTimeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAutoReleaseTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoReleaseTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoReleaseTimeResponseBody) SetRequestId(v string) *ModifyInstanceAutoReleaseTimeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAutoReleaseTimeResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceAutoReleaseTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceAutoReleaseTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoReleaseTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoReleaseTimeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAutoReleaseTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeResponse) SetBody(v *ModifyInstanceAutoReleaseTimeResponseBody) *ModifyInstanceAutoReleaseTimeResponse {
	s.Body = v
	return s
}

type ModifyInstanceAutoRenewAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Duration             *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AutoRenew            *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	RenewalStatus        *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
}

func (s ModifyInstanceAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetOwnerId(v int64) *ModifyInstanceAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetResourceOwnerId(v int64) *ModifyInstanceAutoRenewAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetOwnerAccount(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetInstanceId(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetRegionId(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetDuration(v int32) *ModifyInstanceAutoRenewAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetAutoRenew(v bool) *ModifyInstanceAutoRenewAttributeRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetRenewalStatus(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetPeriodUnit(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.PeriodUnit = &v
	return s
}

type ModifyInstanceAutoRenewAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAutoRenewAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeResponseBody) SetRequestId(v string) *ModifyInstanceAutoRenewAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAutoRenewAttributeResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceAutoRenewAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAutoRenewAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeResponse) SetBody(v *ModifyInstanceAutoRenewAttributeResponseBody) *ModifyInstanceAutoRenewAttributeResponse {
	s.Body = v
	return s
}

type ModifyInstanceChargeTypeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	IncludeDataDisks     *bool   `json:"IncludeDataDisks,omitempty" xml:"IncludeDataDisks,omitempty"`
	DryRun               *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	InstanceChargeType   *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	IsDetailFee          *bool   `json:"IsDetailFee,omitempty" xml:"IsDetailFee,omitempty"`
}

func (s ModifyInstanceChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeRequest) SetOwnerId(v int64) *ModifyInstanceChargeTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceChargeTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetResourceOwnerId(v int64) *ModifyInstanceChargeTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetInstanceIds(v string) *ModifyInstanceChargeTypeRequest {
	s.InstanceIds = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetRegionId(v string) *ModifyInstanceChargeTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetPeriod(v int32) *ModifyInstanceChargeTypeRequest {
	s.Period = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetPeriodUnit(v string) *ModifyInstanceChargeTypeRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetIncludeDataDisks(v bool) *ModifyInstanceChargeTypeRequest {
	s.IncludeDataDisks = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetDryRun(v bool) *ModifyInstanceChargeTypeRequest {
	s.DryRun = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetAutoPay(v bool) *ModifyInstanceChargeTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetInstanceChargeType(v string) *ModifyInstanceChargeTypeRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetClientToken(v string) *ModifyInstanceChargeTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetOwnerAccount(v string) *ModifyInstanceChargeTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetIsDetailFee(v bool) *ModifyInstanceChargeTypeRequest {
	s.IsDetailFee = &v
	return s
}

type ModifyInstanceChargeTypeResponseBody struct {
	FeeOfInstances []*ModifyInstanceChargeTypeResponseBodyFeeOfInstances `json:"FeeOfInstances,omitempty" xml:"FeeOfInstances,omitempty" type:"Repeated"`
	RequestId      *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId        *string                                               `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyInstanceChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponseBody) SetFeeOfInstances(v []*ModifyInstanceChargeTypeResponseBodyFeeOfInstances) *ModifyInstanceChargeTypeResponseBody {
	s.FeeOfInstances = v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBody) SetRequestId(v string) *ModifyInstanceChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBody) SetOrderId(v string) *ModifyInstanceChargeTypeResponseBody {
	s.OrderId = &v
	return s
}

type ModifyInstanceChargeTypeResponseBodyFeeOfInstances struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Currency   *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	Fee        *string `json:"Fee,omitempty" xml:"Fee,omitempty"`
}

func (s ModifyInstanceChargeTypeResponseBodyFeeOfInstances) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponseBodyFeeOfInstances) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponseBodyFeeOfInstances) SetInstanceId(v string) *ModifyInstanceChargeTypeResponseBodyFeeOfInstances {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBodyFeeOfInstances) SetCurrency(v string) *ModifyInstanceChargeTypeResponseBodyFeeOfInstances {
	s.Currency = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBodyFeeOfInstances) SetFee(v string) *ModifyInstanceChargeTypeResponseBodyFeeOfInstances {
	s.Fee = &v
	return s
}

type ModifyInstanceChargeTypeResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponse) SetHeaders(v map[string]*string) *ModifyInstanceChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceChargeTypeResponse) SetBody(v *ModifyInstanceChargeTypeResponseBody) *ModifyInstanceChargeTypeResponse {
	s.Body = v
	return s
}

type ModifyInstanceDeploymentRequest struct {
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DedicatedHostId        *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	DeploymentSetId        *string `json:"DeploymentSetId,omitempty" xml:"DeploymentSetId,omitempty"`
	DeploymentSetGroupNo   *int32  `json:"DeploymentSetGroupNo,omitempty" xml:"DeploymentSetGroupNo,omitempty"`
	Force                  *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
	Affinity               *string `json:"Affinity,omitempty" xml:"Affinity,omitempty"`
	Tenancy                *string `json:"Tenancy,omitempty" xml:"Tenancy,omitempty"`
	MigrationType          *string `json:"MigrationType,omitempty" xml:"MigrationType,omitempty"`
	InstanceType           *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
}

func (s ModifyInstanceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceDeploymentRequest) SetOwnerId(v int64) *ModifyInstanceDeploymentRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetResourceOwnerAccount(v string) *ModifyInstanceDeploymentRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetResourceOwnerId(v int64) *ModifyInstanceDeploymentRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetOwnerAccount(v string) *ModifyInstanceDeploymentRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetRegionId(v string) *ModifyInstanceDeploymentRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetInstanceId(v string) *ModifyInstanceDeploymentRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetDedicatedHostId(v string) *ModifyInstanceDeploymentRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetDeploymentSetId(v string) *ModifyInstanceDeploymentRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetDeploymentSetGroupNo(v int32) *ModifyInstanceDeploymentRequest {
	s.DeploymentSetGroupNo = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetForce(v bool) *ModifyInstanceDeploymentRequest {
	s.Force = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetAffinity(v string) *ModifyInstanceDeploymentRequest {
	s.Affinity = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetTenancy(v string) *ModifyInstanceDeploymentRequest {
	s.Tenancy = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetMigrationType(v string) *ModifyInstanceDeploymentRequest {
	s.MigrationType = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetInstanceType(v string) *ModifyInstanceDeploymentRequest {
	s.InstanceType = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetDedicatedHostClusterId(v string) *ModifyInstanceDeploymentRequest {
	s.DedicatedHostClusterId = &v
	return s
}

type ModifyInstanceDeploymentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceDeploymentResponseBody) SetRequestId(v string) *ModifyInstanceDeploymentResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceDeploymentResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceDeploymentResponse) SetHeaders(v map[string]*string) *ModifyInstanceDeploymentResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceDeploymentResponse) SetBody(v *ModifyInstanceDeploymentResponseBody) *ModifyInstanceDeploymentResponse {
	s.Body = v
	return s
}

type ModifyInstanceMaintenanceAttributesRequest struct {
	OwnerId              *int64                                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ActionOnMaintenance  *string                                                        `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty"`
	InstanceId           []*string                                                      `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	MaintenanceWindow    []*ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow `json:"MaintenanceWindow,omitempty" xml:"MaintenanceWindow,omitempty" type:"Repeated"`
}

func (s ModifyInstanceMaintenanceAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetOwnerId(v int64) *ModifyInstanceMaintenanceAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetResourceOwnerAccount(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetResourceOwnerId(v int64) *ModifyInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetOwnerAccount(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetRegionId(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetActionOnMaintenance(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.ActionOnMaintenance = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetInstanceId(v []*string) *ModifyInstanceMaintenanceAttributesRequest {
	s.InstanceId = v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetMaintenanceWindow(v []*ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) *ModifyInstanceMaintenanceAttributesRequest {
	s.MaintenanceWindow = v
	return s
}

type ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) SetEndTime(v string) *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow {
	s.EndTime = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) SetStartTime(v string) *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow {
	s.StartTime = &v
	return s
}

type ModifyInstanceMaintenanceAttributesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceMaintenanceAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesResponseBody) SetRequestId(v string) *ModifyInstanceMaintenanceAttributesResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceMaintenanceAttributesResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceMaintenanceAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceMaintenanceAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesResponse) SetHeaders(v map[string]*string) *ModifyInstanceMaintenanceAttributesResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesResponse) SetBody(v *ModifyInstanceMaintenanceAttributesResponseBody) *ModifyInstanceMaintenanceAttributesResponse {
	s.Body = v
	return s
}

type ModifyInstanceMetadataOptionsRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId              *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	HttpEndpoint            *string `json:"HttpEndpoint,omitempty" xml:"HttpEndpoint,omitempty"`
	HttpTokens              *string `json:"HttpTokens,omitempty" xml:"HttpTokens,omitempty"`
	HttpPutResponseHopLimit *int32  `json:"HttpPutResponseHopLimit,omitempty" xml:"HttpPutResponseHopLimit,omitempty"`
}

func (s ModifyInstanceMetadataOptionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMetadataOptionsRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMetadataOptionsRequest) SetOwnerId(v int64) *ModifyInstanceMetadataOptionsRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetResourceOwnerAccount(v string) *ModifyInstanceMetadataOptionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetResourceOwnerId(v int64) *ModifyInstanceMetadataOptionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetRegionId(v string) *ModifyInstanceMetadataOptionsRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetInstanceId(v string) *ModifyInstanceMetadataOptionsRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetHttpEndpoint(v string) *ModifyInstanceMetadataOptionsRequest {
	s.HttpEndpoint = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetHttpTokens(v string) *ModifyInstanceMetadataOptionsRequest {
	s.HttpTokens = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetHttpPutResponseHopLimit(v int32) *ModifyInstanceMetadataOptionsRequest {
	s.HttpPutResponseHopLimit = &v
	return s
}

type ModifyInstanceMetadataOptionsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceMetadataOptionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMetadataOptionsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMetadataOptionsResponseBody) SetRequestId(v string) *ModifyInstanceMetadataOptionsResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceMetadataOptionsResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceMetadataOptionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceMetadataOptionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMetadataOptionsResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMetadataOptionsResponse) SetHeaders(v map[string]*string) *ModifyInstanceMetadataOptionsResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceMetadataOptionsResponse) SetBody(v *ModifyInstanceMetadataOptionsResponseBody) *ModifyInstanceMetadataOptionsResponse {
	s.Body = v
	return s
}

type ModifyInstanceNetworkSpecRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId              *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InternetMaxBandwidthOut *int32  `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	InternetMaxBandwidthIn  *int32  `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	ISP                     *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	NetworkChargeType       *string `json:"NetworkChargeType,omitempty" xml:"NetworkChargeType,omitempty"`
	AllocatePublicIp        *bool   `json:"AllocatePublicIp,omitempty" xml:"AllocatePublicIp,omitempty"`
	StartTime               *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime                 *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	AutoPay                 *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	ClientToken             *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyInstanceNetworkSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNetworkSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNetworkSpecRequest) SetOwnerId(v int64) *ModifyInstanceNetworkSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetResourceOwnerAccount(v string) *ModifyInstanceNetworkSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetResourceOwnerId(v int64) *ModifyInstanceNetworkSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetInstanceId(v string) *ModifyInstanceNetworkSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetInternetMaxBandwidthOut(v int32) *ModifyInstanceNetworkSpecRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetInternetMaxBandwidthIn(v int32) *ModifyInstanceNetworkSpecRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetISP(v string) *ModifyInstanceNetworkSpecRequest {
	s.ISP = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetNetworkChargeType(v string) *ModifyInstanceNetworkSpecRequest {
	s.NetworkChargeType = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetAllocatePublicIp(v bool) *ModifyInstanceNetworkSpecRequest {
	s.AllocatePublicIp = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetStartTime(v string) *ModifyInstanceNetworkSpecRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetEndTime(v string) *ModifyInstanceNetworkSpecRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetAutoPay(v bool) *ModifyInstanceNetworkSpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetClientToken(v string) *ModifyInstanceNetworkSpecRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetOwnerAccount(v string) *ModifyInstanceNetworkSpecRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyInstanceNetworkSpecResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyInstanceNetworkSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNetworkSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNetworkSpecResponseBody) SetRequestId(v string) *ModifyInstanceNetworkSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyInstanceNetworkSpecResponseBody) SetOrderId(v string) *ModifyInstanceNetworkSpecResponseBody {
	s.OrderId = &v
	return s
}

type ModifyInstanceNetworkSpecResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceNetworkSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceNetworkSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNetworkSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNetworkSpecResponse) SetHeaders(v map[string]*string) *ModifyInstanceNetworkSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceNetworkSpecResponse) SetBody(v *ModifyInstanceNetworkSpecResponseBody) *ModifyInstanceNetworkSpecResponse {
	s.Body = v
	return s
}

type ModifyInstanceSpecRequest struct {
	Temporary               *ModifyInstanceSpecRequestTemporary  `json:"Temporary,omitempty" xml:"Temporary,omitempty" type:"Struct"`
	SystemDisk              *ModifyInstanceSpecRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	OwnerId                 *int64                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string                              `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64                               `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId              *string                              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType            *string                              `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetMaxBandwidthOut *int32                               `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	InternetMaxBandwidthIn  *int32                               `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	OwnerAccount            *string                              `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Async                   *bool                                `json:"Async,omitempty" xml:"Async,omitempty"`
	AllowMigrateAcrossZone  *bool                                `json:"AllowMigrateAcrossZone,omitempty" xml:"AllowMigrateAcrossZone,omitempty"`
	ClientToken             *string                              `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s ModifyInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecRequest) SetTemporary(v *ModifyInstanceSpecRequestTemporary) *ModifyInstanceSpecRequest {
	s.Temporary = v
	return s
}

func (s *ModifyInstanceSpecRequest) SetSystemDisk(v *ModifyInstanceSpecRequestSystemDisk) *ModifyInstanceSpecRequest {
	s.SystemDisk = v
	return s
}

func (s *ModifyInstanceSpecRequest) SetOwnerId(v int64) *ModifyInstanceSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetResourceOwnerAccount(v string) *ModifyInstanceSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetResourceOwnerId(v int64) *ModifyInstanceSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceId(v string) *ModifyInstanceSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceType(v string) *ModifyInstanceSpecRequest {
	s.InstanceType = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInternetMaxBandwidthOut(v int32) *ModifyInstanceSpecRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInternetMaxBandwidthIn(v int32) *ModifyInstanceSpecRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetOwnerAccount(v string) *ModifyInstanceSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetAsync(v bool) *ModifyInstanceSpecRequest {
	s.Async = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetAllowMigrateAcrossZone(v bool) *ModifyInstanceSpecRequest {
	s.AllowMigrateAcrossZone = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetClientToken(v string) *ModifyInstanceSpecRequest {
	s.ClientToken = &v
	return s
}

type ModifyInstanceSpecRequestTemporary struct {
	StartTime               *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime                 *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InternetMaxBandwidthOut *int32  `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
}

func (s ModifyInstanceSpecRequestTemporary) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecRequestTemporary) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecRequestTemporary) SetStartTime(v string) *ModifyInstanceSpecRequestTemporary {
	s.StartTime = &v
	return s
}

func (s *ModifyInstanceSpecRequestTemporary) SetEndTime(v string) *ModifyInstanceSpecRequestTemporary {
	s.EndTime = &v
	return s
}

func (s *ModifyInstanceSpecRequestTemporary) SetInternetMaxBandwidthOut(v int32) *ModifyInstanceSpecRequestTemporary {
	s.InternetMaxBandwidthOut = &v
	return s
}

type ModifyInstanceSpecRequestSystemDisk struct {
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
}

func (s ModifyInstanceSpecRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecRequestSystemDisk) SetCategory(v string) *ModifyInstanceSpecRequestSystemDisk {
	s.Category = &v
	return s
}

type ModifyInstanceSpecResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponseBody) SetRequestId(v string) *ModifyInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceSpecResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponse) SetHeaders(v map[string]*string) *ModifyInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceSpecResponse) SetBody(v *ModifyInstanceSpecResponseBody) *ModifyInstanceSpecResponse {
	s.Body = v
	return s
}

type ModifyInstanceVncPasswdRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VncPassword          *string `json:"VncPassword,omitempty" xml:"VncPassword,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyInstanceVncPasswdRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVncPasswdRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVncPasswdRequest) SetOwnerId(v int64) *ModifyInstanceVncPasswdRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetResourceOwnerAccount(v string) *ModifyInstanceVncPasswdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetResourceOwnerId(v int64) *ModifyInstanceVncPasswdRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetInstanceId(v string) *ModifyInstanceVncPasswdRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetRegionId(v string) *ModifyInstanceVncPasswdRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetVncPassword(v string) *ModifyInstanceVncPasswdRequest {
	s.VncPassword = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetOwnerAccount(v string) *ModifyInstanceVncPasswdRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyInstanceVncPasswdResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceVncPasswdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVncPasswdResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVncPasswdResponseBody) SetRequestId(v string) *ModifyInstanceVncPasswdResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceVncPasswdResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceVncPasswdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceVncPasswdResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVncPasswdResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVncPasswdResponse) SetHeaders(v map[string]*string) *ModifyInstanceVncPasswdResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceVncPasswdResponse) SetBody(v *ModifyInstanceVncPasswdResponseBody) *ModifyInstanceVncPasswdResponse {
	s.Body = v
	return s
}

type ModifyInstanceVpcAttributeRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	VSwitchId            *string   `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress     *string   `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	VpcId                *string   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	SecurityGroupId      []*string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" type:"Repeated"`
}

func (s ModifyInstanceVpcAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVpcAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVpcAttributeRequest) SetOwnerId(v int64) *ModifyInstanceVpcAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceVpcAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetResourceOwnerId(v int64) *ModifyInstanceVpcAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetInstanceId(v string) *ModifyInstanceVpcAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetVSwitchId(v string) *ModifyInstanceVpcAttributeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetPrivateIpAddress(v string) *ModifyInstanceVpcAttributeRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetVpcId(v string) *ModifyInstanceVpcAttributeRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetOwnerAccount(v string) *ModifyInstanceVpcAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetSecurityGroupId(v []*string) *ModifyInstanceVpcAttributeRequest {
	s.SecurityGroupId = v
	return s
}

type ModifyInstanceVpcAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceVpcAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVpcAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVpcAttributeResponseBody) SetRequestId(v string) *ModifyInstanceVpcAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceVpcAttributeResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceVpcAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceVpcAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVpcAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVpcAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceVpcAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceVpcAttributeResponse) SetBody(v *ModifyInstanceVpcAttributeResponseBody) *ModifyInstanceVpcAttributeResponse {
	s.Body = v
	return s
}

type ModifyLaunchTemplateDefaultVersionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LaunchTemplateId     *string `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	LaunchTemplateName   *string `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty"`
	DefaultVersionNumber *int64  `json:"DefaultVersionNumber,omitempty" xml:"DefaultVersionNumber,omitempty"`
}

func (s ModifyLaunchTemplateDefaultVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLaunchTemplateDefaultVersionRequest) GoString() string {
	return s.String()
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetOwnerId(v int64) *ModifyLaunchTemplateDefaultVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetResourceOwnerAccount(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetResourceOwnerId(v int64) *ModifyLaunchTemplateDefaultVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetOwnerAccount(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetRegionId(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetLaunchTemplateId(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetLaunchTemplateName(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetDefaultVersionNumber(v int64) *ModifyLaunchTemplateDefaultVersionRequest {
	s.DefaultVersionNumber = &v
	return s
}

type ModifyLaunchTemplateDefaultVersionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLaunchTemplateDefaultVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLaunchTemplateDefaultVersionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLaunchTemplateDefaultVersionResponseBody) SetRequestId(v string) *ModifyLaunchTemplateDefaultVersionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLaunchTemplateDefaultVersionResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyLaunchTemplateDefaultVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLaunchTemplateDefaultVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLaunchTemplateDefaultVersionResponse) GoString() string {
	return s.String()
}

func (s *ModifyLaunchTemplateDefaultVersionResponse) SetHeaders(v map[string]*string) *ModifyLaunchTemplateDefaultVersionResponse {
	s.Headers = v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionResponse) SetBody(v *ModifyLaunchTemplateDefaultVersionResponseBody) *ModifyLaunchTemplateDefaultVersionResponse {
	s.Body = v
	return s
}

type ModifyNetworkInterfaceAttributeRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfaceName *string   `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	NetworkInterfaceId   *string   `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	QueueNumber          *int32    `json:"QueueNumber,omitempty" xml:"QueueNumber,omitempty"`
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupId      []*string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" type:"Repeated"`
}

func (s ModifyNetworkInterfaceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkInterfaceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetOwnerId(v int64) *ModifyNetworkInterfaceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetResourceOwnerAccount(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetResourceOwnerId(v int64) *ModifyNetworkInterfaceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetOwnerAccount(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetRegionId(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetNetworkInterfaceName(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.NetworkInterfaceName = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetNetworkInterfaceId(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetQueueNumber(v int32) *ModifyNetworkInterfaceAttributeRequest {
	s.QueueNumber = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetDescription(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetSecurityGroupId(v []*string) *ModifyNetworkInterfaceAttributeRequest {
	s.SecurityGroupId = v
	return s
}

type ModifyNetworkInterfaceAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyNetworkInterfaceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkInterfaceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyNetworkInterfaceAttributeResponseBody) SetRequestId(v string) *ModifyNetworkInterfaceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyNetworkInterfaceAttributeResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyNetworkInterfaceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyNetworkInterfaceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkInterfaceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyNetworkInterfaceAttributeResponse) SetHeaders(v map[string]*string) *ModifyNetworkInterfaceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyNetworkInterfaceAttributeResponse) SetBody(v *ModifyNetworkInterfaceAttributeResponseBody) *ModifyNetworkInterfaceAttributeResponse {
	s.Body = v
	return s
}

type ModifyPrepayInstanceSpecRequest struct {
	SystemDisk           *ModifyPrepayInstanceSpecRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	OwnerId              *int64                                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                    `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId             *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceType         *string                                    `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OperatorType         *string                                    `json:"OperatorType,omitempty" xml:"OperatorType,omitempty"`
	ClientToken          *string                                    `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	AutoPay              *bool                                      `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	MigrateAcrossZone    *bool                                      `json:"MigrateAcrossZone,omitempty" xml:"MigrateAcrossZone,omitempty"`
	OwnerAccount         *string                                    `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RebootTime           *string                                    `json:"RebootTime,omitempty" xml:"RebootTime,omitempty"`
	EndTime              *string                                    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RebootWhenFinished   *bool                                      `json:"RebootWhenFinished,omitempty" xml:"RebootWhenFinished,omitempty"`
}

func (s ModifyPrepayInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecRequest) SetSystemDisk(v *ModifyPrepayInstanceSpecRequestSystemDisk) *ModifyPrepayInstanceSpecRequest {
	s.SystemDisk = v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetOwnerId(v int64) *ModifyPrepayInstanceSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetResourceOwnerAccount(v string) *ModifyPrepayInstanceSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetResourceOwnerId(v int64) *ModifyPrepayInstanceSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetInstanceId(v string) *ModifyPrepayInstanceSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetRegionId(v string) *ModifyPrepayInstanceSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetInstanceType(v string) *ModifyPrepayInstanceSpecRequest {
	s.InstanceType = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetOperatorType(v string) *ModifyPrepayInstanceSpecRequest {
	s.OperatorType = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetClientToken(v string) *ModifyPrepayInstanceSpecRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetAutoPay(v bool) *ModifyPrepayInstanceSpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetMigrateAcrossZone(v bool) *ModifyPrepayInstanceSpecRequest {
	s.MigrateAcrossZone = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetOwnerAccount(v string) *ModifyPrepayInstanceSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetRebootTime(v string) *ModifyPrepayInstanceSpecRequest {
	s.RebootTime = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetEndTime(v string) *ModifyPrepayInstanceSpecRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetRebootWhenFinished(v bool) *ModifyPrepayInstanceSpecRequest {
	s.RebootWhenFinished = &v
	return s
}

type ModifyPrepayInstanceSpecRequestSystemDisk struct {
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
}

func (s ModifyPrepayInstanceSpecRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecRequestSystemDisk) SetCategory(v string) *ModifyPrepayInstanceSpecRequestSystemDisk {
	s.Category = &v
	return s
}

type ModifyPrepayInstanceSpecResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyPrepayInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecResponseBody) SetRequestId(v string) *ModifyPrepayInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecResponseBody) SetOrderId(v string) *ModifyPrepayInstanceSpecResponseBody {
	s.OrderId = &v
	return s
}

type ModifyPrepayInstanceSpecResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyPrepayInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPrepayInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecResponse) SetHeaders(v map[string]*string) *ModifyPrepayInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyPrepayInstanceSpecResponse) SetBody(v *ModifyPrepayInstanceSpecResponseBody) *ModifyPrepayInstanceSpecResponse {
	s.Body = v
	return s
}

type ModifyReservedInstanceAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceId   *string `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty"`
	ReservedInstanceName *string `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyReservedInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstanceAttributeRequest) SetOwnerId(v int64) *ModifyReservedInstanceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetResourceOwnerAccount(v string) *ModifyReservedInstanceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetResourceOwnerId(v int64) *ModifyReservedInstanceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetOwnerAccount(v string) *ModifyReservedInstanceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetRegionId(v string) *ModifyReservedInstanceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetReservedInstanceId(v string) *ModifyReservedInstanceAttributeRequest {
	s.ReservedInstanceId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetReservedInstanceName(v string) *ModifyReservedInstanceAttributeRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetDescription(v string) *ModifyReservedInstanceAttributeRequest {
	s.Description = &v
	return s
}

type ModifyReservedInstanceAttributeResponseBody struct {
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s ModifyReservedInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstanceAttributeResponseBody) SetMessage(v string) *ModifyReservedInstanceAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponseBody) SetRequestId(v string) *ModifyReservedInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponseBody) SetHttpStatusCode(v int32) *ModifyReservedInstanceAttributeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponseBody) SetCode(v string) *ModifyReservedInstanceAttributeResponseBody {
	s.Code = &v
	return s
}

type ModifyReservedInstanceAttributeResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyReservedInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyReservedInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstanceAttributeResponse) SetHeaders(v map[string]*string) *ModifyReservedInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyReservedInstanceAttributeResponse) SetBody(v *ModifyReservedInstanceAttributeResponseBody) *ModifyReservedInstanceAttributeResponse {
	s.Body = v
	return s
}

type ModifyReservedInstancesRequest struct {
	OwnerId              *int64                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceId   []*string                                      `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty" type:"Repeated"`
	Configuration        []*ModifyReservedInstancesRequestConfiguration `json:"Configuration,omitempty" xml:"Configuration,omitempty" type:"Repeated"`
}

func (s ModifyReservedInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesRequest) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesRequest) SetOwnerId(v int64) *ModifyReservedInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetResourceOwnerAccount(v string) *ModifyReservedInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetResourceOwnerId(v int64) *ModifyReservedInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetOwnerAccount(v string) *ModifyReservedInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetRegionId(v string) *ModifyReservedInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetReservedInstanceId(v []*string) *ModifyReservedInstancesRequest {
	s.ReservedInstanceId = v
	return s
}

func (s *ModifyReservedInstancesRequest) SetConfiguration(v []*ModifyReservedInstancesRequestConfiguration) *ModifyReservedInstancesRequest {
	s.Configuration = v
	return s
}

type ModifyReservedInstancesRequestConfiguration struct {
	ReservedInstanceName *string `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Scope                *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceAmount       *int32  `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
}

func (s ModifyReservedInstancesRequestConfiguration) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesRequestConfiguration) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesRequestConfiguration) SetReservedInstanceName(v string) *ModifyReservedInstancesRequestConfiguration {
	s.ReservedInstanceName = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetZoneId(v string) *ModifyReservedInstancesRequestConfiguration {
	s.ZoneId = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetScope(v string) *ModifyReservedInstancesRequestConfiguration {
	s.Scope = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetInstanceType(v string) *ModifyReservedInstancesRequestConfiguration {
	s.InstanceType = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetInstanceAmount(v int32) *ModifyReservedInstancesRequestConfiguration {
	s.InstanceAmount = &v
	return s
}

type ModifyReservedInstancesResponseBody struct {
	ReservedInstanceIdSets []*string `json:"ReservedInstanceIdSets,omitempty" xml:"ReservedInstanceIdSets,omitempty" type:"Repeated"`
	RequestId              *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyReservedInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesResponseBody) SetReservedInstanceIdSets(v []*string) *ModifyReservedInstancesResponseBody {
	s.ReservedInstanceIdSets = v
	return s
}

func (s *ModifyReservedInstancesResponseBody) SetRequestId(v string) *ModifyReservedInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ModifyReservedInstancesResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyReservedInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyReservedInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesResponse) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesResponse) SetHeaders(v map[string]*string) *ModifyReservedInstancesResponse {
	s.Headers = v
	return s
}

func (s *ModifyReservedInstancesResponse) SetBody(v *ModifyReservedInstancesResponseBody) *ModifyReservedInstancesResponse {
	s.Body = v
	return s
}

type ModifyRouterInterfaceAttributeRequest struct {
	OwnerId                  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                 *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouterInterfaceId        *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty"`
	Name                     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description              *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OppositeInterfaceId      *string `json:"OppositeInterfaceId,omitempty" xml:"OppositeInterfaceId,omitempty"`
	OppositeRouterId         *string `json:"OppositeRouterId,omitempty" xml:"OppositeRouterId,omitempty"`
	OppositeRouterType       *string `json:"OppositeRouterType,omitempty" xml:"OppositeRouterType,omitempty"`
	OppositeInterfaceOwnerId *int64  `json:"OppositeInterfaceOwnerId,omitempty" xml:"OppositeInterfaceOwnerId,omitempty"`
	HealthCheckSourceIp      *string `json:"HealthCheckSourceIp,omitempty" xml:"HealthCheckSourceIp,omitempty"`
	HealthCheckTargetIp      *string `json:"HealthCheckTargetIp,omitempty" xml:"HealthCheckTargetIp,omitempty"`
}

func (s ModifyRouterInterfaceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOwnerId(v int64) *ModifyRouterInterfaceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetResourceOwnerAccount(v string) *ModifyRouterInterfaceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetResourceOwnerId(v int64) *ModifyRouterInterfaceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetRegionId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetRouterInterfaceId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetName(v string) *ModifyRouterInterfaceAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetDescription(v string) *ModifyRouterInterfaceAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeInterfaceId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeInterfaceId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeRouterId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeRouterId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeRouterType(v string) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeRouterType = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeInterfaceOwnerId(v int64) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetHealthCheckSourceIp(v string) *ModifyRouterInterfaceAttributeRequest {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetHealthCheckTargetIp(v string) *ModifyRouterInterfaceAttributeRequest {
	s.HealthCheckTargetIp = &v
	return s
}

type ModifyRouterInterfaceAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyRouterInterfaceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceAttributeResponseBody) SetRequestId(v string) *ModifyRouterInterfaceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyRouterInterfaceAttributeResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyRouterInterfaceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyRouterInterfaceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceAttributeResponse) SetHeaders(v map[string]*string) *ModifyRouterInterfaceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyRouterInterfaceAttributeResponse) SetBody(v *ModifyRouterInterfaceAttributeResponseBody) *ModifyRouterInterfaceAttributeResponse {
	s.Body = v
	return s
}

type ModifyRouterInterfaceSpecRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RouterInterfaceId    *string `json:"RouterInterfaceId,omitempty" xml:"RouterInterfaceId,omitempty"`
	Spec                 *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s ModifyRouterInterfaceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceSpecRequest) SetRegionId(v string) *ModifyRouterInterfaceSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetRouterInterfaceId(v string) *ModifyRouterInterfaceSpecRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetSpec(v string) *ModifyRouterInterfaceSpecRequest {
	s.Spec = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetOwnerId(v int64) *ModifyRouterInterfaceSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetResourceOwnerAccount(v string) *ModifyRouterInterfaceSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetResourceOwnerId(v int64) *ModifyRouterInterfaceSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetClientToken(v string) *ModifyRouterInterfaceSpecRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetOwnerAccount(v string) *ModifyRouterInterfaceSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetUserCidr(v string) *ModifyRouterInterfaceSpecRequest {
	s.UserCidr = &v
	return s
}

type ModifyRouterInterfaceSpecResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Spec      *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s ModifyRouterInterfaceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceSpecResponseBody) SetRequestId(v string) *ModifyRouterInterfaceSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecResponseBody) SetSpec(v string) *ModifyRouterInterfaceSpecResponseBody {
	s.Spec = &v
	return s
}

type ModifyRouterInterfaceSpecResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyRouterInterfaceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyRouterInterfaceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceSpecResponse) SetHeaders(v map[string]*string) *ModifyRouterInterfaceSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyRouterInterfaceSpecResponse) SetBody(v *ModifyRouterInterfaceSpecResponseBody) *ModifyRouterInterfaceSpecResponse {
	s.Body = v
	return s
}

type ModifySecurityGroupAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupName    *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifySecurityGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeRequest) SetOwnerId(v int64) *ModifySecurityGroupAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetResourceOwnerAccount(v string) *ModifySecurityGroupAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetResourceOwnerId(v int64) *ModifySecurityGroupAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetSecurityGroupId(v string) *ModifySecurityGroupAttributeRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetDescription(v string) *ModifySecurityGroupAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetSecurityGroupName(v string) *ModifySecurityGroupAttributeRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetRegionId(v string) *ModifySecurityGroupAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetOwnerAccount(v string) *ModifySecurityGroupAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifySecurityGroupAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityGroupAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeResponseBody) SetRequestId(v string) *ModifySecurityGroupAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifySecurityGroupAttributeResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifySecurityGroupAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySecurityGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeResponse) SetHeaders(v map[string]*string) *ModifySecurityGroupAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityGroupAttributeResponse) SetBody(v *ModifySecurityGroupAttributeResponseBody) *ModifySecurityGroupAttributeResponse {
	s.Body = v
	return s
}

type ModifySecurityGroupEgressRuleRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecurityGroupId       *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IpProtocol            *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	PortRange             *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	DestGroupId           *string `json:"DestGroupId,omitempty" xml:"DestGroupId,omitempty"`
	DestGroupOwnerId      *int64  `json:"DestGroupOwnerId,omitempty" xml:"DestGroupOwnerId,omitempty"`
	DestGroupOwnerAccount *string `json:"DestGroupOwnerAccount,omitempty" xml:"DestGroupOwnerAccount,omitempty"`
	DestCidrIp            *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Ipv6DestCidrIp        *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	SourceCidrIp          *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	Ipv6SourceCidrIp      *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	SourcePortRange       *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Policy                *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority              *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NicType               *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifySecurityGroupEgressRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupEgressRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupEgressRuleRequest) SetOwnerId(v int64) *ModifySecurityGroupEgressRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetResourceOwnerAccount(v string) *ModifySecurityGroupEgressRuleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetResourceOwnerId(v int64) *ModifySecurityGroupEgressRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetOwnerAccount(v string) *ModifySecurityGroupEgressRuleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetRegionId(v string) *ModifySecurityGroupEgressRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetSecurityGroupId(v string) *ModifySecurityGroupEgressRuleRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetIpProtocol(v string) *ModifySecurityGroupEgressRuleRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetPortRange(v string) *ModifySecurityGroupEgressRuleRequest {
	s.PortRange = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDestGroupId(v string) *ModifySecurityGroupEgressRuleRequest {
	s.DestGroupId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDestGroupOwnerId(v int64) *ModifySecurityGroupEgressRuleRequest {
	s.DestGroupOwnerId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDestGroupOwnerAccount(v string) *ModifySecurityGroupEgressRuleRequest {
	s.DestGroupOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDestCidrIp(v string) *ModifySecurityGroupEgressRuleRequest {
	s.DestCidrIp = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetIpv6DestCidrIp(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetSourceCidrIp(v string) *ModifySecurityGroupEgressRuleRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetIpv6SourceCidrIp(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetSourcePortRange(v string) *ModifySecurityGroupEgressRuleRequest {
	s.SourcePortRange = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetPolicy(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Policy = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetPriority(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Priority = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetNicType(v string) *ModifySecurityGroupEgressRuleRequest {
	s.NicType = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetClientToken(v string) *ModifySecurityGroupEgressRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDescription(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Description = &v
	return s
}

type ModifySecurityGroupEgressRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityGroupEgressRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupEgressRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupEgressRuleResponseBody) SetRequestId(v string) *ModifySecurityGroupEgressRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifySecurityGroupEgressRuleResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifySecurityGroupEgressRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySecurityGroupEgressRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupEgressRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupEgressRuleResponse) SetHeaders(v map[string]*string) *ModifySecurityGroupEgressRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityGroupEgressRuleResponse) SetBody(v *ModifySecurityGroupEgressRuleResponseBody) *ModifySecurityGroupEgressRuleResponse {
	s.Body = v
	return s
}

type ModifySecurityGroupPolicyRequest struct {
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InnerAccessPolicy    *string `json:"InnerAccessPolicy,omitempty" xml:"InnerAccessPolicy,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ModifySecurityGroupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupPolicyRequest) SetSecurityGroupId(v string) *ModifySecurityGroupPolicyRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetRegionId(v string) *ModifySecurityGroupPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetInnerAccessPolicy(v string) *ModifySecurityGroupPolicyRequest {
	s.InnerAccessPolicy = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetClientToken(v string) *ModifySecurityGroupPolicyRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetResourceOwnerAccount(v string) *ModifySecurityGroupPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetResourceOwnerId(v int64) *ModifySecurityGroupPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetOwnerAccount(v string) *ModifySecurityGroupPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetOwnerId(v int64) *ModifySecurityGroupPolicyRequest {
	s.OwnerId = &v
	return s
}

type ModifySecurityGroupPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityGroupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupPolicyResponseBody) SetRequestId(v string) *ModifySecurityGroupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifySecurityGroupPolicyResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifySecurityGroupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySecurityGroupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupPolicyResponse) SetHeaders(v map[string]*string) *ModifySecurityGroupPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityGroupPolicyResponse) SetBody(v *ModifySecurityGroupPolicyResponseBody) *ModifySecurityGroupPolicyResponse {
	s.Body = v
	return s
}

type ModifySecurityGroupRuleRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecurityGroupId         *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IpProtocol              *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	PortRange               *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	SourceGroupId           *string `json:"SourceGroupId,omitempty" xml:"SourceGroupId,omitempty"`
	SourceGroupOwnerId      *int64  `json:"SourceGroupOwnerId,omitempty" xml:"SourceGroupOwnerId,omitempty"`
	SourceGroupOwnerAccount *string `json:"SourceGroupOwnerAccount,omitempty" xml:"SourceGroupOwnerAccount,omitempty"`
	SourceCidrIp            *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	Ipv6SourceCidrIp        *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	SourcePortRange         *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	DestCidrIp              *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Ipv6DestCidrIp          *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	Policy                  *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority                *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NicType                 *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	ClientToken             *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifySecurityGroupRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupRuleRequest) SetOwnerId(v int64) *ModifySecurityGroupRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetResourceOwnerAccount(v string) *ModifySecurityGroupRuleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetResourceOwnerId(v int64) *ModifySecurityGroupRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetOwnerAccount(v string) *ModifySecurityGroupRuleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetRegionId(v string) *ModifySecurityGroupRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSecurityGroupId(v string) *ModifySecurityGroupRuleRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetIpProtocol(v string) *ModifySecurityGroupRuleRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetPortRange(v string) *ModifySecurityGroupRuleRequest {
	s.PortRange = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourceGroupId(v string) *ModifySecurityGroupRuleRequest {
	s.SourceGroupId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourceGroupOwnerId(v int64) *ModifySecurityGroupRuleRequest {
	s.SourceGroupOwnerId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourceGroupOwnerAccount(v string) *ModifySecurityGroupRuleRequest {
	s.SourceGroupOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourceCidrIp(v string) *ModifySecurityGroupRuleRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetIpv6SourceCidrIp(v string) *ModifySecurityGroupRuleRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourcePortRange(v string) *ModifySecurityGroupRuleRequest {
	s.SourcePortRange = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetDestCidrIp(v string) *ModifySecurityGroupRuleRequest {
	s.DestCidrIp = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetIpv6DestCidrIp(v string) *ModifySecurityGroupRuleRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetPolicy(v string) *ModifySecurityGroupRuleRequest {
	s.Policy = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetPriority(v string) *ModifySecurityGroupRuleRequest {
	s.Priority = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetNicType(v string) *ModifySecurityGroupRuleRequest {
	s.NicType = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetClientToken(v string) *ModifySecurityGroupRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetDescription(v string) *ModifySecurityGroupRuleRequest {
	s.Description = &v
	return s
}

type ModifySecurityGroupRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityGroupRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupRuleResponseBody) SetRequestId(v string) *ModifySecurityGroupRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifySecurityGroupRuleResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifySecurityGroupRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySecurityGroupRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupRuleResponse) SetHeaders(v map[string]*string) *ModifySecurityGroupRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityGroupRuleResponse) SetBody(v *ModifySecurityGroupRuleResponseBody) *ModifySecurityGroupRuleResponse {
	s.Body = v
	return s
}

type ModifySnapshotAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	SnapshotId           *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	SnapshotName         *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DisableInstantAccess *bool   `json:"DisableInstantAccess,omitempty" xml:"DisableInstantAccess,omitempty"`
}

func (s ModifySnapshotAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySnapshotAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifySnapshotAttributeRequest) SetOwnerId(v int64) *ModifySnapshotAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetResourceOwnerAccount(v string) *ModifySnapshotAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetResourceOwnerId(v int64) *ModifySnapshotAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetOwnerAccount(v string) *ModifySnapshotAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetSnapshotId(v string) *ModifySnapshotAttributeRequest {
	s.SnapshotId = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetSnapshotName(v string) *ModifySnapshotAttributeRequest {
	s.SnapshotName = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetDescription(v string) *ModifySnapshotAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetDisableInstantAccess(v bool) *ModifySnapshotAttributeRequest {
	s.DisableInstantAccess = &v
	return s
}

type ModifySnapshotAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySnapshotAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySnapshotAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySnapshotAttributeResponseBody) SetRequestId(v string) *ModifySnapshotAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifySnapshotAttributeResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifySnapshotAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySnapshotAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySnapshotAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifySnapshotAttributeResponse) SetHeaders(v map[string]*string) *ModifySnapshotAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifySnapshotAttributeResponse) SetBody(v *ModifySnapshotAttributeResponseBody) *ModifySnapshotAttributeResponse {
	s.Body = v
	return s
}

type ModifyStorageCapacityUnitAttributeRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StorageCapacityUnitId *string `json:"StorageCapacityUnitId,omitempty" xml:"StorageCapacityUnitId,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyStorageCapacityUnitAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageCapacityUnitAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetOwnerId(v int64) *ModifyStorageCapacityUnitAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetResourceOwnerAccount(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetResourceOwnerId(v int64) *ModifyStorageCapacityUnitAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetOwnerAccount(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetRegionId(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetStorageCapacityUnitId(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.StorageCapacityUnitId = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetName(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetDescription(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.Description = &v
	return s
}

type ModifyStorageCapacityUnitAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStorageCapacityUnitAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageCapacityUnitAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStorageCapacityUnitAttributeResponseBody) SetRequestId(v string) *ModifyStorageCapacityUnitAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStorageCapacityUnitAttributeResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyStorageCapacityUnitAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyStorageCapacityUnitAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageCapacityUnitAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyStorageCapacityUnitAttributeResponse) SetHeaders(v map[string]*string) *ModifyStorageCapacityUnitAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeResponse) SetBody(v *ModifyStorageCapacityUnitAttributeResponseBody) *ModifyStorageCapacityUnitAttributeResponse {
	s.Body = v
	return s
}

type ModifyStorageSetAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StorageSetId         *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetName       *string `json:"StorageSetName,omitempty" xml:"StorageSetName,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyStorageSetAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageSetAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyStorageSetAttributeRequest) SetOwnerId(v int64) *ModifyStorageSetAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetResourceOwnerAccount(v string) *ModifyStorageSetAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetResourceOwnerId(v int64) *ModifyStorageSetAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetOwnerAccount(v string) *ModifyStorageSetAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetClientToken(v string) *ModifyStorageSetAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetRegionId(v string) *ModifyStorageSetAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetStorageSetId(v string) *ModifyStorageSetAttributeRequest {
	s.StorageSetId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetStorageSetName(v string) *ModifyStorageSetAttributeRequest {
	s.StorageSetName = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetDescription(v string) *ModifyStorageSetAttributeRequest {
	s.Description = &v
	return s
}

type ModifyStorageSetAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStorageSetAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageSetAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStorageSetAttributeResponseBody) SetRequestId(v string) *ModifyStorageSetAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStorageSetAttributeResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyStorageSetAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyStorageSetAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageSetAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyStorageSetAttributeResponse) SetHeaders(v map[string]*string) *ModifyStorageSetAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyStorageSetAttributeResponse) SetBody(v *ModifyStorageSetAttributeResponseBody) *ModifyStorageSetAttributeResponse {
	s.Body = v
	return s
}

type ModifyUserBusinessBehaviorRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StatusKey            *string `json:"statusKey,omitempty" xml:"statusKey,omitempty"`
	StatusValue          *string `json:"statusValue,omitempty" xml:"statusValue,omitempty"`
}

func (s ModifyUserBusinessBehaviorRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserBusinessBehaviorRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserBusinessBehaviorRequest) SetOwnerId(v int64) *ModifyUserBusinessBehaviorRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetResourceOwnerAccount(v string) *ModifyUserBusinessBehaviorRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetResourceOwnerId(v int64) *ModifyUserBusinessBehaviorRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetOwnerAccount(v string) *ModifyUserBusinessBehaviorRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetRegionId(v string) *ModifyUserBusinessBehaviorRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetStatusKey(v string) *ModifyUserBusinessBehaviorRequest {
	s.StatusKey = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetStatusValue(v string) *ModifyUserBusinessBehaviorRequest {
	s.StatusValue = &v
	return s
}

type ModifyUserBusinessBehaviorResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyUserBusinessBehaviorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserBusinessBehaviorResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUserBusinessBehaviorResponseBody) SetRequestId(v string) *ModifyUserBusinessBehaviorResponseBody {
	s.RequestId = &v
	return s
}

type ModifyUserBusinessBehaviorResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyUserBusinessBehaviorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyUserBusinessBehaviorResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserBusinessBehaviorResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserBusinessBehaviorResponse) SetHeaders(v map[string]*string) *ModifyUserBusinessBehaviorResponse {
	s.Headers = v
	return s
}

func (s *ModifyUserBusinessBehaviorResponse) SetBody(v *ModifyUserBusinessBehaviorResponseBody) *ModifyUserBusinessBehaviorResponse {
	s.Body = v
	return s
}

type ModifyVirtualBorderRouterAttributeRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VbrId                *string `json:"VbrId,omitempty" xml:"VbrId,omitempty"`
	VlanId               *int32  `json:"VlanId,omitempty" xml:"VlanId,omitempty"`
	CircuitCode          *string `json:"CircuitCode,omitempty" xml:"CircuitCode,omitempty"`
	LocalGatewayIp       *string `json:"LocalGatewayIp,omitempty" xml:"LocalGatewayIp,omitempty"`
	PeerGatewayIp        *string `json:"PeerGatewayIp,omitempty" xml:"PeerGatewayIp,omitempty"`
	PeeringSubnetMask    *string `json:"PeeringSubnetMask,omitempty" xml:"PeeringSubnetMask,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s ModifyVirtualBorderRouterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVirtualBorderRouterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetRegionId(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetVbrId(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.VbrId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetVlanId(v int32) *ModifyVirtualBorderRouterAttributeRequest {
	s.VlanId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetCircuitCode(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.CircuitCode = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetLocalGatewayIp(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.LocalGatewayIp = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetPeerGatewayIp(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.PeerGatewayIp = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetPeeringSubnetMask(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.PeeringSubnetMask = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetDescription(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetName(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetOwnerId(v int64) *ModifyVirtualBorderRouterAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetResourceOwnerAccount(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetResourceOwnerId(v int64) *ModifyVirtualBorderRouterAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetClientToken(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetOwnerAccount(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetUserCidr(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.UserCidr = &v
	return s
}

type ModifyVirtualBorderRouterAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVirtualBorderRouterAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVirtualBorderRouterAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVirtualBorderRouterAttributeResponseBody) SetRequestId(v string) *ModifyVirtualBorderRouterAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVirtualBorderRouterAttributeResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyVirtualBorderRouterAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVirtualBorderRouterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVirtualBorderRouterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVirtualBorderRouterAttributeResponse) SetHeaders(v map[string]*string) *ModifyVirtualBorderRouterAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeResponse) SetBody(v *ModifyVirtualBorderRouterAttributeResponseBody) *ModifyVirtualBorderRouterAttributeResponse {
	s.Body = v
	return s
}

type ModifyVpcAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	VpcName              *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	CidrBlock            *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s ModifyVpcAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpcAttributeRequest) SetOwnerId(v int64) *ModifyVpcAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetResourceOwnerAccount(v string) *ModifyVpcAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetResourceOwnerId(v int64) *ModifyVpcAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetVpcId(v string) *ModifyVpcAttributeRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetDescription(v string) *ModifyVpcAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetVpcName(v string) *ModifyVpcAttributeRequest {
	s.VpcName = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetCidrBlock(v string) *ModifyVpcAttributeRequest {
	s.CidrBlock = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetRegionId(v string) *ModifyVpcAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetOwnerAccount(v string) *ModifyVpcAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetUserCidr(v string) *ModifyVpcAttributeRequest {
	s.UserCidr = &v
	return s
}

type ModifyVpcAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVpcAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVpcAttributeResponseBody) SetRequestId(v string) *ModifyVpcAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVpcAttributeResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyVpcAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVpcAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpcAttributeResponse) SetHeaders(v map[string]*string) *ModifyVpcAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyVpcAttributeResponse) SetBody(v *ModifyVpcAttributeResponseBody) *ModifyVpcAttributeResponse {
	s.Body = v
	return s
}

type ModifyVRouterAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VRouterId            *string `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	VRouterName          *string `json:"VRouterName,omitempty" xml:"VRouterName,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyVRouterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVRouterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVRouterAttributeRequest) SetOwnerId(v int64) *ModifyVRouterAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetResourceOwnerAccount(v string) *ModifyVRouterAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetResourceOwnerId(v int64) *ModifyVRouterAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetRegionId(v string) *ModifyVRouterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetVRouterId(v string) *ModifyVRouterAttributeRequest {
	s.VRouterId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetVRouterName(v string) *ModifyVRouterAttributeRequest {
	s.VRouterName = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetDescription(v string) *ModifyVRouterAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetOwnerAccount(v string) *ModifyVRouterAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyVRouterAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVRouterAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVRouterAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVRouterAttributeResponseBody) SetRequestId(v string) *ModifyVRouterAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVRouterAttributeResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyVRouterAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVRouterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVRouterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVRouterAttributeResponse) SetHeaders(v map[string]*string) *ModifyVRouterAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyVRouterAttributeResponse) SetBody(v *ModifyVRouterAttributeResponseBody) *ModifyVRouterAttributeResponse {
	s.Body = v
	return s
}

type ModifyVSwitchAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VSwitchName          *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyVSwitchAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeRequest) SetOwnerId(v int64) *ModifyVSwitchAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetResourceOwnerAccount(v string) *ModifyVSwitchAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetResourceOwnerId(v int64) *ModifyVSwitchAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchId(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchName(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchName = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetRegionId(v string) *ModifyVSwitchAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetDescription(v string) *ModifyVSwitchAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetOwnerAccount(v string) *ModifyVSwitchAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyVSwitchAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVSwitchAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeResponseBody) SetRequestId(v string) *ModifyVSwitchAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVSwitchAttributeResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyVSwitchAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVSwitchAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeResponse) SetHeaders(v map[string]*string) *ModifyVSwitchAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyVSwitchAttributeResponse) SetBody(v *ModifyVSwitchAttributeResponseBody) *ModifyVSwitchAttributeResponse {
	s.Body = v
	return s
}

type PurchaseReservedInstancesOfferingRequest struct {
	OwnerId              *int64                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Tag                  []*PurchaseReservedInstancesOfferingRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ResourceGroupId      *string                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId               *string                                        `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ReservedInstanceName *string                                        `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	InstanceType         *string                                        `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Scope                *string                                        `json:"Scope,omitempty" xml:"Scope,omitempty"`
	InstanceAmount       *int32                                         `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	OfferingType         *string                                        `json:"OfferingType,omitempty" xml:"OfferingType,omitempty"`
	Description          *string                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	Platform             *string                                        `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Period               *int32                                         `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string                                        `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	ClientToken          *string                                        `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s PurchaseReservedInstancesOfferingRequest) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingRequest) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingRequest) SetOwnerId(v int64) *PurchaseReservedInstancesOfferingRequest {
	s.OwnerId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetResourceOwnerAccount(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetResourceOwnerId(v int64) *PurchaseReservedInstancesOfferingRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetOwnerAccount(v string) *PurchaseReservedInstancesOfferingRequest {
	s.OwnerAccount = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetRegionId(v string) *PurchaseReservedInstancesOfferingRequest {
	s.RegionId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetTag(v []*PurchaseReservedInstancesOfferingRequestTag) *PurchaseReservedInstancesOfferingRequest {
	s.Tag = v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetResourceGroupId(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetZoneId(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ZoneId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetReservedInstanceName(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetInstanceType(v string) *PurchaseReservedInstancesOfferingRequest {
	s.InstanceType = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetScope(v string) *PurchaseReservedInstancesOfferingRequest {
	s.Scope = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetInstanceAmount(v int32) *PurchaseReservedInstancesOfferingRequest {
	s.InstanceAmount = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetOfferingType(v string) *PurchaseReservedInstancesOfferingRequest {
	s.OfferingType = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetDescription(v string) *PurchaseReservedInstancesOfferingRequest {
	s.Description = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetPlatform(v string) *PurchaseReservedInstancesOfferingRequest {
	s.Platform = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetPeriod(v int32) *PurchaseReservedInstancesOfferingRequest {
	s.Period = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetPeriodUnit(v string) *PurchaseReservedInstancesOfferingRequest {
	s.PeriodUnit = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetClientToken(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ClientToken = &v
	return s
}

type PurchaseReservedInstancesOfferingRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PurchaseReservedInstancesOfferingRequestTag) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingRequestTag) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingRequestTag) SetKey(v string) *PurchaseReservedInstancesOfferingRequestTag {
	s.Key = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequestTag) SetValue(v string) *PurchaseReservedInstancesOfferingRequestTag {
	s.Value = &v
	return s
}

type PurchaseReservedInstancesOfferingResponseBody struct {
	ReservedInstanceIdSets []*string `json:"ReservedInstanceIdSets,omitempty" xml:"ReservedInstanceIdSets,omitempty" type:"Repeated"`
	RequestId              *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PurchaseReservedInstancesOfferingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingResponseBody) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingResponseBody) SetReservedInstanceIdSets(v []*string) *PurchaseReservedInstancesOfferingResponseBody {
	s.ReservedInstanceIdSets = v
	return s
}

func (s *PurchaseReservedInstancesOfferingResponseBody) SetRequestId(v string) *PurchaseReservedInstancesOfferingResponseBody {
	s.RequestId = &v
	return s
}

type PurchaseReservedInstancesOfferingResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PurchaseReservedInstancesOfferingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PurchaseReservedInstancesOfferingResponse) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingResponse) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingResponse) SetHeaders(v map[string]*string) *PurchaseReservedInstancesOfferingResponse {
	s.Headers = v
	return s
}

func (s *PurchaseReservedInstancesOfferingResponse) SetBody(v *PurchaseReservedInstancesOfferingResponseBody) *PurchaseReservedInstancesOfferingResponse {
	s.Body = v
	return s
}

type PurchaseStorageCapacityUnitRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Capacity             *int32  `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	FromApp              *string `json:"FromApp,omitempty" xml:"FromApp,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Amount               *int32  `json:"Amount,omitempty" xml:"Amount,omitempty"`
}

func (s PurchaseStorageCapacityUnitRequest) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitRequest) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitRequest) SetOwnerId(v int64) *PurchaseStorageCapacityUnitRequest {
	s.OwnerId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetResourceOwnerAccount(v string) *PurchaseStorageCapacityUnitRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetResourceOwnerId(v int64) *PurchaseStorageCapacityUnitRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetOwnerAccount(v string) *PurchaseStorageCapacityUnitRequest {
	s.OwnerAccount = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetRegionId(v string) *PurchaseStorageCapacityUnitRequest {
	s.RegionId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetName(v string) *PurchaseStorageCapacityUnitRequest {
	s.Name = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetCapacity(v int32) *PurchaseStorageCapacityUnitRequest {
	s.Capacity = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetDescription(v string) *PurchaseStorageCapacityUnitRequest {
	s.Description = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetStartTime(v string) *PurchaseStorageCapacityUnitRequest {
	s.StartTime = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetPeriod(v int32) *PurchaseStorageCapacityUnitRequest {
	s.Period = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetPeriodUnit(v string) *PurchaseStorageCapacityUnitRequest {
	s.PeriodUnit = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetFromApp(v string) *PurchaseStorageCapacityUnitRequest {
	s.FromApp = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetClientToken(v string) *PurchaseStorageCapacityUnitRequest {
	s.ClientToken = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetAmount(v int32) *PurchaseStorageCapacityUnitRequest {
	s.Amount = &v
	return s
}

type PurchaseStorageCapacityUnitResponseBody struct {
	StorageCapacityUnitIds []*string `json:"StorageCapacityUnitIds,omitempty" xml:"StorageCapacityUnitIds,omitempty" type:"Repeated"`
	RequestId              *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId                *string   `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s PurchaseStorageCapacityUnitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitResponseBody) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitResponseBody) SetStorageCapacityUnitIds(v []*string) *PurchaseStorageCapacityUnitResponseBody {
	s.StorageCapacityUnitIds = v
	return s
}

func (s *PurchaseStorageCapacityUnitResponseBody) SetRequestId(v string) *PurchaseStorageCapacityUnitResponseBody {
	s.RequestId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitResponseBody) SetOrderId(v string) *PurchaseStorageCapacityUnitResponseBody {
	s.OrderId = &v
	return s
}

type PurchaseStorageCapacityUnitResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PurchaseStorageCapacityUnitResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PurchaseStorageCapacityUnitResponse) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitResponse) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitResponse) SetHeaders(v map[string]*string) *PurchaseStorageCapacityUnitResponse {
	s.Headers = v
	return s
}

func (s *PurchaseStorageCapacityUnitResponse) SetBody(v *PurchaseStorageCapacityUnitResponseBody) *PurchaseStorageCapacityUnitResponse {
	s.Body = v
	return s
}

type ReActivateInstancesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReActivateInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ReActivateInstancesRequest) GoString() string {
	return s.String()
}

func (s *ReActivateInstancesRequest) SetOwnerId(v int64) *ReActivateInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *ReActivateInstancesRequest) SetResourceOwnerAccount(v string) *ReActivateInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReActivateInstancesRequest) SetResourceOwnerId(v int64) *ReActivateInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReActivateInstancesRequest) SetRegionId(v string) *ReActivateInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ReActivateInstancesRequest) SetInstanceId(v string) *ReActivateInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *ReActivateInstancesRequest) SetOwnerAccount(v string) *ReActivateInstancesRequest {
	s.OwnerAccount = &v
	return s
}

type ReActivateInstancesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReActivateInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReActivateInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ReActivateInstancesResponseBody) SetRequestId(v string) *ReActivateInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ReActivateInstancesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReActivateInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReActivateInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ReActivateInstancesResponse) GoString() string {
	return s.String()
}

func (s *ReActivateInstancesResponse) SetHeaders(v map[string]*string) *ReActivateInstancesResponse {
	s.Headers = v
	return s
}

func (s *ReActivateInstancesResponse) SetBody(v *ReActivateInstancesResponseBody) *ReActivateInstancesResponse {
	s.Body = v
	return s
}

type RebootInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ForceStop            *bool   `json:"ForceStop,omitempty" xml:"ForceStop,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DryRun               *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s RebootInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootInstanceRequest) SetOwnerId(v int64) *RebootInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RebootInstanceRequest) SetResourceOwnerAccount(v string) *RebootInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RebootInstanceRequest) SetResourceOwnerId(v int64) *RebootInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RebootInstanceRequest) SetInstanceId(v string) *RebootInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RebootInstanceRequest) SetForceStop(v bool) *RebootInstanceRequest {
	s.ForceStop = &v
	return s
}

func (s *RebootInstanceRequest) SetOwnerAccount(v string) *RebootInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RebootInstanceRequest) SetDryRun(v bool) *RebootInstanceRequest {
	s.DryRun = &v
	return s
}

type RebootInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebootInstanceResponseBody) SetRequestId(v string) *RebootInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RebootInstanceResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RebootInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RebootInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootInstanceResponse) SetHeaders(v map[string]*string) *RebootInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebootInstanceResponse) SetBody(v *RebootInstanceResponseBody) *RebootInstanceResponse {
	s.Body = v
	return s
}

type RebootInstancesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DryRun               *bool     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ForceReboot          *bool     `json:"ForceReboot,omitempty" xml:"ForceReboot,omitempty"`
	BatchOptimization    *string   `json:"BatchOptimization,omitempty" xml:"BatchOptimization,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s RebootInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesRequest) GoString() string {
	return s.String()
}

func (s *RebootInstancesRequest) SetOwnerId(v int64) *RebootInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *RebootInstancesRequest) SetResourceOwnerAccount(v string) *RebootInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RebootInstancesRequest) SetResourceOwnerId(v int64) *RebootInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RebootInstancesRequest) SetOwnerAccount(v string) *RebootInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RebootInstancesRequest) SetDryRun(v bool) *RebootInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *RebootInstancesRequest) SetRegionId(v string) *RebootInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *RebootInstancesRequest) SetForceReboot(v bool) *RebootInstancesRequest {
	s.ForceReboot = &v
	return s
}

func (s *RebootInstancesRequest) SetBatchOptimization(v string) *RebootInstancesRequest {
	s.BatchOptimization = &v
	return s
}

func (s *RebootInstancesRequest) SetInstanceId(v []*string) *RebootInstancesRequest {
	s.InstanceId = v
	return s
}

type RebootInstancesResponseBody struct {
	RequestId         *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceResponses []*RebootInstancesResponseBodyInstanceResponses `json:"InstanceResponses,omitempty" xml:"InstanceResponses,omitempty" type:"Repeated"`
}

func (s RebootInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponseBody) SetRequestId(v string) *RebootInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *RebootInstancesResponseBody) SetInstanceResponses(v []*RebootInstancesResponseBodyInstanceResponses) *RebootInstancesResponseBody {
	s.InstanceResponses = v
	return s
}

type RebootInstancesResponseBodyInstanceResponses struct {
	CurrentStatus  *string `json:"CurrentStatus,omitempty" xml:"CurrentStatus,omitempty"`
	PreviousStatus *string `json:"PreviousStatus,omitempty" xml:"PreviousStatus,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s RebootInstancesResponseBodyInstanceResponses) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesResponseBodyInstanceResponses) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponseBodyInstanceResponses) SetCurrentStatus(v string) *RebootInstancesResponseBodyInstanceResponses {
	s.CurrentStatus = &v
	return s
}

func (s *RebootInstancesResponseBodyInstanceResponses) SetPreviousStatus(v string) *RebootInstancesResponseBodyInstanceResponses {
	s.PreviousStatus = &v
	return s
}

func (s *RebootInstancesResponseBodyInstanceResponses) SetCode(v string) *RebootInstancesResponseBodyInstanceResponses {
	s.Code = &v
	return s
}

func (s *RebootInstancesResponseBodyInstanceResponses) SetMessage(v string) *RebootInstancesResponseBodyInstanceResponses {
	s.Message = &v
	return s
}

func (s *RebootInstancesResponseBodyInstanceResponses) SetInstanceId(v string) *RebootInstancesResponseBodyInstanceResponses {
	s.InstanceId = &v
	return s
}

type RebootInstancesResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RebootInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RebootInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesResponse) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponse) SetHeaders(v map[string]*string) *RebootInstancesResponse {
	s.Headers = v
	return s
}

func (s *RebootInstancesResponse) SetBody(v *RebootInstancesResponseBody) *RebootInstancesResponse {
	s.Body = v
	return s
}

type RecoverVirtualBorderRouterRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VbrId                *string `json:"VbrId,omitempty" xml:"VbrId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s RecoverVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s RecoverVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *RecoverVirtualBorderRouterRequest) SetRegionId(v string) *RecoverVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetVbrId(v string) *RecoverVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetOwnerId(v int64) *RecoverVirtualBorderRouterRequest {
	s.OwnerId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetResourceOwnerAccount(v string) *RecoverVirtualBorderRouterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetResourceOwnerId(v int64) *RecoverVirtualBorderRouterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetClientToken(v string) *RecoverVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetOwnerAccount(v string) *RecoverVirtualBorderRouterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetUserCidr(v string) *RecoverVirtualBorderRouterRequest {
	s.UserCidr = &v
	return s
}

type RecoverVirtualBorderRouterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RecoverVirtualBorderRouterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RecoverVirtualBorderRouterResponseBody) GoString() string {
	return s.String()
}

func (s *RecoverVirtualBorderRouterResponseBody) SetRequestId(v string) *RecoverVirtualBorderRouterResponseBody {
	s.RequestId = &v
	return s
}

type RecoverVirtualBorderRouterResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RecoverVirtualBorderRouterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RecoverVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s RecoverVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *RecoverVirtualBorderRouterResponse) SetHeaders(v map[string]*string) *RecoverVirtualBorderRouterResponse {
	s.Headers = v
	return s
}

func (s *RecoverVirtualBorderRouterResponse) SetBody(v *RecoverVirtualBorderRouterResponseBody) *RecoverVirtualBorderRouterResponse {
	s.Body = v
	return s
}

type RedeployDedicatedHostRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
}

func (s RedeployDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s RedeployDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *RedeployDedicatedHostRequest) SetOwnerId(v int64) *RedeployDedicatedHostRequest {
	s.OwnerId = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetResourceOwnerAccount(v string) *RedeployDedicatedHostRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetResourceOwnerId(v int64) *RedeployDedicatedHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetOwnerAccount(v string) *RedeployDedicatedHostRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetRegionId(v string) *RedeployDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetDedicatedHostId(v string) *RedeployDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

type RedeployDedicatedHostResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RedeployDedicatedHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RedeployDedicatedHostResponseBody) GoString() string {
	return s.String()
}

func (s *RedeployDedicatedHostResponseBody) SetRequestId(v string) *RedeployDedicatedHostResponseBody {
	s.RequestId = &v
	return s
}

type RedeployDedicatedHostResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RedeployDedicatedHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RedeployDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s RedeployDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *RedeployDedicatedHostResponse) SetHeaders(v map[string]*string) *RedeployDedicatedHostResponse {
	s.Headers = v
	return s
}

func (s *RedeployDedicatedHostResponse) SetBody(v *RedeployDedicatedHostResponseBody) *RedeployDedicatedHostResponse {
	s.Body = v
	return s
}

type RedeployInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ForceStop            *bool   `json:"ForceStop,omitempty" xml:"ForceStop,omitempty"`
}

func (s RedeployInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RedeployInstanceRequest) GoString() string {
	return s.String()
}

func (s *RedeployInstanceRequest) SetOwnerId(v int64) *RedeployInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RedeployInstanceRequest) SetResourceOwnerAccount(v string) *RedeployInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RedeployInstanceRequest) SetResourceOwnerId(v int64) *RedeployInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RedeployInstanceRequest) SetOwnerAccount(v string) *RedeployInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RedeployInstanceRequest) SetInstanceId(v string) *RedeployInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RedeployInstanceRequest) SetForceStop(v bool) *RedeployInstanceRequest {
	s.ForceStop = &v
	return s
}

type RedeployInstanceResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RedeployInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RedeployInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RedeployInstanceResponseBody) SetTaskId(v string) *RedeployInstanceResponseBody {
	s.TaskId = &v
	return s
}

func (s *RedeployInstanceResponseBody) SetRequestId(v string) *RedeployInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RedeployInstanceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RedeployInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RedeployInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RedeployInstanceResponse) GoString() string {
	return s.String()
}

func (s *RedeployInstanceResponse) SetHeaders(v map[string]*string) *RedeployInstanceResponse {
	s.Headers = v
	return s
}

func (s *RedeployInstanceResponse) SetBody(v *RedeployInstanceResponseBody) *RedeployInstanceResponse {
	s.Body = v
	return s
}

type ReInitDiskRequest struct {
	OwnerId                     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount        *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DiskId                      *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	OwnerAccount                *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Password                    *string `json:"Password,omitempty" xml:"Password,omitempty"`
	KeyPairName                 *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	AutoStartInstance           *bool   `json:"AutoStartInstance,omitempty" xml:"AutoStartInstance,omitempty"`
	SecurityEnhancementStrategy *string `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
}

func (s ReInitDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskRequest) GoString() string {
	return s.String()
}

func (s *ReInitDiskRequest) SetOwnerId(v int64) *ReInitDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *ReInitDiskRequest) SetResourceOwnerAccount(v string) *ReInitDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReInitDiskRequest) SetResourceOwnerId(v int64) *ReInitDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReInitDiskRequest) SetDiskId(v string) *ReInitDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ReInitDiskRequest) SetOwnerAccount(v string) *ReInitDiskRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReInitDiskRequest) SetPassword(v string) *ReInitDiskRequest {
	s.Password = &v
	return s
}

func (s *ReInitDiskRequest) SetKeyPairName(v string) *ReInitDiskRequest {
	s.KeyPairName = &v
	return s
}

func (s *ReInitDiskRequest) SetAutoStartInstance(v bool) *ReInitDiskRequest {
	s.AutoStartInstance = &v
	return s
}

func (s *ReInitDiskRequest) SetSecurityEnhancementStrategy(v string) *ReInitDiskRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

type ReInitDiskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReInitDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ReInitDiskResponseBody) SetRequestId(v string) *ReInitDiskResponseBody {
	s.RequestId = &v
	return s
}

type ReInitDiskResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReInitDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReInitDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskResponse) GoString() string {
	return s.String()
}

func (s *ReInitDiskResponse) SetHeaders(v map[string]*string) *ReInitDiskResponse {
	s.Headers = v
	return s
}

func (s *ReInitDiskResponse) SetBody(v *ReInitDiskResponseBody) *ReInitDiskResponse {
	s.Body = v
	return s
}

type ReleaseCapacityReservationRequest struct {
	PrivatePoolOptions   *ReleaseCapacityReservationRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId              *int64                                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                              `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                               `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                              `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DryRun               *bool                                                `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s ReleaseCapacityReservationRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCapacityReservationRequest) GoString() string {
	return s.String()
}

func (s *ReleaseCapacityReservationRequest) SetPrivatePoolOptions(v *ReleaseCapacityReservationRequestPrivatePoolOptions) *ReleaseCapacityReservationRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetOwnerId(v int64) *ReleaseCapacityReservationRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetResourceOwnerAccount(v string) *ReleaseCapacityReservationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetResourceOwnerId(v int64) *ReleaseCapacityReservationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetOwnerAccount(v string) *ReleaseCapacityReservationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetRegionId(v string) *ReleaseCapacityReservationRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetDryRun(v bool) *ReleaseCapacityReservationRequest {
	s.DryRun = &v
	return s
}

type ReleaseCapacityReservationRequestPrivatePoolOptions struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ReleaseCapacityReservationRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCapacityReservationRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *ReleaseCapacityReservationRequestPrivatePoolOptions) SetId(v string) *ReleaseCapacityReservationRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

type ReleaseCapacityReservationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseCapacityReservationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCapacityReservationResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseCapacityReservationResponseBody) SetRequestId(v string) *ReleaseCapacityReservationResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseCapacityReservationResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseCapacityReservationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseCapacityReservationResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCapacityReservationResponse) GoString() string {
	return s.String()
}

func (s *ReleaseCapacityReservationResponse) SetHeaders(v map[string]*string) *ReleaseCapacityReservationResponse {
	s.Headers = v
	return s
}

func (s *ReleaseCapacityReservationResponse) SetBody(v *ReleaseCapacityReservationResponseBody) *ReleaseCapacityReservationResponse {
	s.Body = v
	return s
}

type ReleaseDedicatedHostRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
}

func (s ReleaseDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *ReleaseDedicatedHostRequest) SetOwnerId(v int64) *ReleaseDedicatedHostRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetResourceOwnerAccount(v string) *ReleaseDedicatedHostRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetResourceOwnerId(v int64) *ReleaseDedicatedHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetOwnerAccount(v string) *ReleaseDedicatedHostRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetRegionId(v string) *ReleaseDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetDedicatedHostId(v string) *ReleaseDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

type ReleaseDedicatedHostResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseDedicatedHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDedicatedHostResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseDedicatedHostResponseBody) SetRequestId(v string) *ReleaseDedicatedHostResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseDedicatedHostResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseDedicatedHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *ReleaseDedicatedHostResponse) SetHeaders(v map[string]*string) *ReleaseDedicatedHostResponse {
	s.Headers = v
	return s
}

func (s *ReleaseDedicatedHostResponse) SetBody(v *ReleaseDedicatedHostResponseBody) *ReleaseDedicatedHostResponse {
	s.Body = v
	return s
}

type ReleaseEipAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId         *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReleaseEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEipAddressRequest) GoString() string {
	return s.String()
}

func (s *ReleaseEipAddressRequest) SetOwnerId(v int64) *ReleaseEipAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetResourceOwnerAccount(v string) *ReleaseEipAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetResourceOwnerId(v int64) *ReleaseEipAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetRegionId(v string) *ReleaseEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetAllocationId(v string) *ReleaseEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetOwnerAccount(v string) *ReleaseEipAddressRequest {
	s.OwnerAccount = &v
	return s
}

type ReleaseEipAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseEipAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEipAddressResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseEipAddressResponseBody) SetRequestId(v string) *ReleaseEipAddressResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseEipAddressResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseEipAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEipAddressResponse) GoString() string {
	return s.String()
}

func (s *ReleaseEipAddressResponse) SetHeaders(v map[string]*string) *ReleaseEipAddressResponse {
	s.Headers = v
	return s
}

func (s *ReleaseEipAddressResponse) SetBody(v *ReleaseEipAddressResponseBody) *ReleaseEipAddressResponse {
	s.Body = v
	return s
}

type ReleasePublicIpAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PublicIpAddress      *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReleasePublicIpAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleasePublicIpAddressRequest) GoString() string {
	return s.String()
}

func (s *ReleasePublicIpAddressRequest) SetOwnerId(v int64) *ReleasePublicIpAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetResourceOwnerAccount(v string) *ReleasePublicIpAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetResourceOwnerId(v int64) *ReleasePublicIpAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetInstanceId(v string) *ReleasePublicIpAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetPublicIpAddress(v string) *ReleasePublicIpAddressRequest {
	s.PublicIpAddress = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetOwnerAccount(v string) *ReleasePublicIpAddressRequest {
	s.OwnerAccount = &v
	return s
}

type ReleasePublicIpAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleasePublicIpAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleasePublicIpAddressResponseBody) GoString() string {
	return s.String()
}

func (s *ReleasePublicIpAddressResponseBody) SetRequestId(v string) *ReleasePublicIpAddressResponseBody {
	s.RequestId = &v
	return s
}

type ReleasePublicIpAddressResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleasePublicIpAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleasePublicIpAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleasePublicIpAddressResponse) GoString() string {
	return s.String()
}

func (s *ReleasePublicIpAddressResponse) SetHeaders(v map[string]*string) *ReleasePublicIpAddressResponse {
	s.Headers = v
	return s
}

func (s *ReleasePublicIpAddressResponse) SetBody(v *ReleasePublicIpAddressResponseBody) *ReleasePublicIpAddressResponse {
	s.Body = v
	return s
}

type RemoveBandwidthPackageIpsRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BandwidthPackageId   *string   `json:"BandwidthPackageId,omitempty" xml:"BandwidthPackageId,omitempty"`
	ClientToken          *string   `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RemovedIpAddresses   []*string `json:"RemovedIpAddresses,omitempty" xml:"RemovedIpAddresses,omitempty" type:"Repeated"`
}

func (s RemoveBandwidthPackageIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveBandwidthPackageIpsRequest) GoString() string {
	return s.String()
}

func (s *RemoveBandwidthPackageIpsRequest) SetOwnerId(v int64) *RemoveBandwidthPackageIpsRequest {
	s.OwnerId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetResourceOwnerAccount(v string) *RemoveBandwidthPackageIpsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetResourceOwnerId(v int64) *RemoveBandwidthPackageIpsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetOwnerAccount(v string) *RemoveBandwidthPackageIpsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetRegionId(v string) *RemoveBandwidthPackageIpsRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetBandwidthPackageId(v string) *RemoveBandwidthPackageIpsRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetClientToken(v string) *RemoveBandwidthPackageIpsRequest {
	s.ClientToken = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetRemovedIpAddresses(v []*string) *RemoveBandwidthPackageIpsRequest {
	s.RemovedIpAddresses = v
	return s
}

type RemoveBandwidthPackageIpsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveBandwidthPackageIpsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveBandwidthPackageIpsResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveBandwidthPackageIpsResponseBody) SetRequestId(v string) *RemoveBandwidthPackageIpsResponseBody {
	s.RequestId = &v
	return s
}

type RemoveBandwidthPackageIpsResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveBandwidthPackageIpsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveBandwidthPackageIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveBandwidthPackageIpsResponse) GoString() string {
	return s.String()
}

func (s *RemoveBandwidthPackageIpsResponse) SetHeaders(v map[string]*string) *RemoveBandwidthPackageIpsResponse {
	s.Headers = v
	return s
}

func (s *RemoveBandwidthPackageIpsResponse) SetBody(v *RemoveBandwidthPackageIpsResponseBody) *RemoveBandwidthPackageIpsResponse {
	s.Body = v
	return s
}

type RemoveTagsRequest struct {
	OwnerId              *int64                  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                 `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType         *string                 `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId           *string                 `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	Tag                  []*RemoveTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s RemoveTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsRequest) GoString() string {
	return s.String()
}

func (s *RemoveTagsRequest) SetOwnerId(v int64) *RemoveTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *RemoveTagsRequest) SetResourceOwnerAccount(v string) *RemoveTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RemoveTagsRequest) SetResourceOwnerId(v int64) *RemoveTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RemoveTagsRequest) SetRegionId(v string) *RemoveTagsRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveTagsRequest) SetResourceType(v string) *RemoveTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *RemoveTagsRequest) SetResourceId(v string) *RemoveTagsRequest {
	s.ResourceId = &v
	return s
}

func (s *RemoveTagsRequest) SetTag(v []*RemoveTagsRequestTag) *RemoveTagsRequest {
	s.Tag = v
	return s
}

type RemoveTagsRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s RemoveTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsRequestTag) GoString() string {
	return s.String()
}

func (s *RemoveTagsRequestTag) SetKey(v string) *RemoveTagsRequestTag {
	s.Key = &v
	return s
}

func (s *RemoveTagsRequestTag) SetValue(v string) *RemoveTagsRequestTag {
	s.Value = &v
	return s
}

type RemoveTagsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveTagsResponseBody) SetRequestId(v string) *RemoveTagsResponseBody {
	s.RequestId = &v
	return s
}

type RemoveTagsResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsResponse) GoString() string {
	return s.String()
}

func (s *RemoveTagsResponse) SetHeaders(v map[string]*string) *RemoveTagsResponse {
	s.Headers = v
	return s
}

func (s *RemoveTagsResponse) SetBody(v *RemoveTagsResponseBody) *RemoveTagsResponse {
	s.Body = v
	return s
}

type RenewDedicatedHostsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DedicatedHostIds     *string `json:"DedicatedHostIds,omitempty" xml:"DedicatedHostIds,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s RenewDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *RenewDedicatedHostsRequest) SetOwnerId(v int64) *RenewDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetResourceOwnerAccount(v string) *RenewDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetResourceOwnerId(v int64) *RenewDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetOwnerAccount(v string) *RenewDedicatedHostsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetDedicatedHostIds(v string) *RenewDedicatedHostsRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetRegionId(v string) *RenewDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetPeriod(v int32) *RenewDedicatedHostsRequest {
	s.Period = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetPeriodUnit(v string) *RenewDedicatedHostsRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetClientToken(v string) *RenewDedicatedHostsRequest {
	s.ClientToken = &v
	return s
}

type RenewDedicatedHostsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewDedicatedHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewDedicatedHostsResponseBody) GoString() string {
	return s.String()
}

func (s *RenewDedicatedHostsResponseBody) SetRequestId(v string) *RenewDedicatedHostsResponseBody {
	s.RequestId = &v
	return s
}

type RenewDedicatedHostsResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RenewDedicatedHostsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RenewDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *RenewDedicatedHostsResponse) SetHeaders(v map[string]*string) *RenewDedicatedHostsResponse {
	s.Headers = v
	return s
}

func (s *RenewDedicatedHostsResponse) SetBody(v *RenewDedicatedHostsResponseBody) *RenewDedicatedHostsResponse {
	s.Body = v
	return s
}

type RenewInstanceRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
}

func (s RenewInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) SetClientToken(v string) *RenewInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RenewInstanceRequest) SetOwnerId(v int64) *RenewInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RenewInstanceRequest) SetResourceOwnerAccount(v string) *RenewInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RenewInstanceRequest) SetResourceOwnerId(v int64) *RenewInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RenewInstanceRequest) SetOwnerAccount(v string) *RenewInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RenewInstanceRequest) SetInstanceId(v string) *RenewInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriod(v int32) *RenewInstanceRequest {
	s.Period = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriodUnit(v string) *RenewInstanceRequest {
	s.PeriodUnit = &v
	return s
}

type RenewInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s RenewInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponseBody) SetRequestId(v string) *RenewInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenewInstanceResponseBody) SetOrderId(v string) *RenewInstanceResponseBody {
	s.OrderId = &v
	return s
}

type RenewInstanceResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RenewInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RenewInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) SetHeaders(v map[string]*string) *RenewInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewInstanceResponse) SetBody(v *RenewInstanceResponseBody) *RenewInstanceResponse {
	s.Body = v
	return s
}

type ReplaceSystemDiskRequest struct {
	SystemDisk                  *ReplaceSystemDiskRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	OwnerId                     *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount        *string                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId                  *string                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ImageId                     *string                             `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ClientToken                 *string                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount                *string                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UseAdditionalService        *bool                               `json:"UseAdditionalService,omitempty" xml:"UseAdditionalService,omitempty"`
	Password                    *string                             `json:"Password,omitempty" xml:"Password,omitempty"`
	PasswordInherit             *bool                               `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	KeyPairName                 *string                             `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	DiskId                      *string                             `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	Platform                    *string                             `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Architecture                *string                             `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	SecurityEnhancementStrategy *string                             `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
}

func (s ReplaceSystemDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ReplaceSystemDiskRequest) GoString() string {
	return s.String()
}

func (s *ReplaceSystemDiskRequest) SetSystemDisk(v *ReplaceSystemDiskRequestSystemDisk) *ReplaceSystemDiskRequest {
	s.SystemDisk = v
	return s
}

func (s *ReplaceSystemDiskRequest) SetOwnerId(v int64) *ReplaceSystemDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetResourceOwnerAccount(v string) *ReplaceSystemDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetResourceOwnerId(v int64) *ReplaceSystemDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetInstanceId(v string) *ReplaceSystemDiskRequest {
	s.InstanceId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetImageId(v string) *ReplaceSystemDiskRequest {
	s.ImageId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetClientToken(v string) *ReplaceSystemDiskRequest {
	s.ClientToken = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetOwnerAccount(v string) *ReplaceSystemDiskRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetUseAdditionalService(v bool) *ReplaceSystemDiskRequest {
	s.UseAdditionalService = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetPassword(v string) *ReplaceSystemDiskRequest {
	s.Password = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetPasswordInherit(v bool) *ReplaceSystemDiskRequest {
	s.PasswordInherit = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetKeyPairName(v string) *ReplaceSystemDiskRequest {
	s.KeyPairName = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetDiskId(v string) *ReplaceSystemDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetPlatform(v string) *ReplaceSystemDiskRequest {
	s.Platform = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetArchitecture(v string) *ReplaceSystemDiskRequest {
	s.Architecture = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetSecurityEnhancementStrategy(v string) *ReplaceSystemDiskRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

type ReplaceSystemDiskRequestSystemDisk struct {
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ReplaceSystemDiskRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s ReplaceSystemDiskRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *ReplaceSystemDiskRequestSystemDisk) SetSize(v int32) *ReplaceSystemDiskRequestSystemDisk {
	s.Size = &v
	return s
}

type ReplaceSystemDiskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DiskId    *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
}

func (s ReplaceSystemDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReplaceSystemDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ReplaceSystemDiskResponseBody) SetRequestId(v string) *ReplaceSystemDiskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReplaceSystemDiskResponseBody) SetDiskId(v string) *ReplaceSystemDiskResponseBody {
	s.DiskId = &v
	return s
}

type ReplaceSystemDiskResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReplaceSystemDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReplaceSystemDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ReplaceSystemDiskResponse) GoString() string {
	return s.String()
}

func (s *ReplaceSystemDiskResponse) SetHeaders(v map[string]*string) *ReplaceSystemDiskResponse {
	s.Headers = v
	return s
}

func (s *ReplaceSystemDiskResponse) SetBody(v *ReplaceSystemDiskResponseBody) *ReplaceSystemDiskResponse {
	s.Body = v
	return s
}

type ReportInstancesStatusRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Reason               *string   `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	StartTime            *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IssueCategory        *string   `json:"IssueCategory,omitempty" xml:"IssueCategory,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	DiskId               []*string `json:"DiskId,omitempty" xml:"DiskId,omitempty" type:"Repeated"`
	Device               []*string `json:"Device,omitempty" xml:"Device,omitempty" type:"Repeated"`
}

func (s ReportInstancesStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportInstancesStatusRequest) GoString() string {
	return s.String()
}

func (s *ReportInstancesStatusRequest) SetOwnerId(v int64) *ReportInstancesStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetResourceOwnerAccount(v string) *ReportInstancesStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetResourceOwnerId(v int64) *ReportInstancesStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetOwnerAccount(v string) *ReportInstancesStatusRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetRegionId(v string) *ReportInstancesStatusRequest {
	s.RegionId = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetReason(v string) *ReportInstancesStatusRequest {
	s.Reason = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetDescription(v string) *ReportInstancesStatusRequest {
	s.Description = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetStartTime(v string) *ReportInstancesStatusRequest {
	s.StartTime = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetEndTime(v string) *ReportInstancesStatusRequest {
	s.EndTime = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetIssueCategory(v string) *ReportInstancesStatusRequest {
	s.IssueCategory = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetInstanceId(v []*string) *ReportInstancesStatusRequest {
	s.InstanceId = v
	return s
}

func (s *ReportInstancesStatusRequest) SetDiskId(v []*string) *ReportInstancesStatusRequest {
	s.DiskId = v
	return s
}

func (s *ReportInstancesStatusRequest) SetDevice(v []*string) *ReportInstancesStatusRequest {
	s.Device = v
	return s
}

type ReportInstancesStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReportInstancesStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportInstancesStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ReportInstancesStatusResponseBody) SetRequestId(v string) *ReportInstancesStatusResponseBody {
	s.RequestId = &v
	return s
}

type ReportInstancesStatusResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportInstancesStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportInstancesStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportInstancesStatusResponse) GoString() string {
	return s.String()
}

func (s *ReportInstancesStatusResponse) SetHeaders(v map[string]*string) *ReportInstancesStatusResponse {
	s.Headers = v
	return s
}

func (s *ReportInstancesStatusResponse) SetBody(v *ReportInstancesStatusResponseBody) *ReportInstancesStatusResponse {
	s.Body = v
	return s
}

type ResetDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DiskId               *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	SnapshotId           *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ResetDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetDiskRequest) GoString() string {
	return s.String()
}

func (s *ResetDiskRequest) SetOwnerId(v int64) *ResetDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *ResetDiskRequest) SetResourceOwnerAccount(v string) *ResetDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ResetDiskRequest) SetResourceOwnerId(v int64) *ResetDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ResetDiskRequest) SetDiskId(v string) *ResetDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ResetDiskRequest) SetSnapshotId(v string) *ResetDiskRequest {
	s.SnapshotId = &v
	return s
}

func (s *ResetDiskRequest) SetOwnerAccount(v string) *ResetDiskRequest {
	s.OwnerAccount = &v
	return s
}

type ResetDiskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ResetDiskResponseBody) SetRequestId(v string) *ResetDiskResponseBody {
	s.RequestId = &v
	return s
}

type ResetDiskResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResetDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetDiskResponse) GoString() string {
	return s.String()
}

func (s *ResetDiskResponse) SetHeaders(v map[string]*string) *ResetDiskResponse {
	s.Headers = v
	return s
}

func (s *ResetDiskResponse) SetBody(v *ResetDiskResponseBody) *ResetDiskResponse {
	s.Body = v
	return s
}

type ResizeDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DiskId               *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
	NewSize              *int32  `json:"NewSize,omitempty" xml:"NewSize,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ResizeDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskRequest) GoString() string {
	return s.String()
}

func (s *ResizeDiskRequest) SetOwnerId(v int64) *ResizeDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *ResizeDiskRequest) SetResourceOwnerAccount(v string) *ResizeDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ResizeDiskRequest) SetResourceOwnerId(v int64) *ResizeDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ResizeDiskRequest) SetDiskId(v string) *ResizeDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ResizeDiskRequest) SetType(v string) *ResizeDiskRequest {
	s.Type = &v
	return s
}

func (s *ResizeDiskRequest) SetNewSize(v int32) *ResizeDiskRequest {
	s.NewSize = &v
	return s
}

func (s *ResizeDiskRequest) SetClientToken(v string) *ResizeDiskRequest {
	s.ClientToken = &v
	return s
}

func (s *ResizeDiskRequest) SetOwnerAccount(v string) *ResizeDiskRequest {
	s.OwnerAccount = &v
	return s
}

type ResizeDiskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResizeDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ResizeDiskResponseBody) SetRequestId(v string) *ResizeDiskResponseBody {
	s.RequestId = &v
	return s
}

type ResizeDiskResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResizeDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResizeDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskResponse) GoString() string {
	return s.String()
}

func (s *ResizeDiskResponse) SetHeaders(v map[string]*string) *ResizeDiskResponse {
	s.Headers = v
	return s
}

func (s *ResizeDiskResponse) SetBody(v *ResizeDiskResponseBody) *ResizeDiskResponse {
	s.Body = v
	return s
}

type RevokeSecurityGroupRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecurityGroupId         *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	DestCidrIp              *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Ipv6DestCidrIp          *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	PortRange               *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	IpProtocol              *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	SourceGroupId           *string `json:"SourceGroupId,omitempty" xml:"SourceGroupId,omitempty"`
	SourceGroupOwnerId      *int64  `json:"SourceGroupOwnerId,omitempty" xml:"SourceGroupOwnerId,omitempty"`
	SourceGroupOwnerAccount *string `json:"SourceGroupOwnerAccount,omitempty" xml:"SourceGroupOwnerAccount,omitempty"`
	SourceCidrIp            *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	Ipv6SourceCidrIp        *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	SourcePortRange         *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Policy                  *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority                *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NicType                 *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	ClientToken             *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s RevokeSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupRequest) SetOwnerId(v int64) *RevokeSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetResourceOwnerAccount(v string) *RevokeSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetResourceOwnerId(v int64) *RevokeSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetOwnerAccount(v string) *RevokeSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetRegionId(v string) *RevokeSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSecurityGroupId(v string) *RevokeSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetDestCidrIp(v string) *RevokeSecurityGroupRequest {
	s.DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetIpv6DestCidrIp(v string) *RevokeSecurityGroupRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPortRange(v string) *RevokeSecurityGroupRequest {
	s.PortRange = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetIpProtocol(v string) *RevokeSecurityGroupRequest {
	s.IpProtocol = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceGroupId(v string) *RevokeSecurityGroupRequest {
	s.SourceGroupId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceGroupOwnerId(v int64) *RevokeSecurityGroupRequest {
	s.SourceGroupOwnerId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceGroupOwnerAccount(v string) *RevokeSecurityGroupRequest {
	s.SourceGroupOwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceCidrIp(v string) *RevokeSecurityGroupRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetIpv6SourceCidrIp(v string) *RevokeSecurityGroupRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourcePortRange(v string) *RevokeSecurityGroupRequest {
	s.SourcePortRange = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPolicy(v string) *RevokeSecurityGroupRequest {
	s.Policy = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPriority(v string) *RevokeSecurityGroupRequest {
	s.Priority = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetNicType(v string) *RevokeSecurityGroupRequest {
	s.NicType = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetClientToken(v string) *RevokeSecurityGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetDescription(v string) *RevokeSecurityGroupRequest {
	s.Description = &v
	return s
}

type RevokeSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupResponseBody) SetRequestId(v string) *RevokeSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type RevokeSecurityGroupResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RevokeSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupResponse) SetHeaders(v map[string]*string) *RevokeSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *RevokeSecurityGroupResponse) SetBody(v *RevokeSecurityGroupResponseBody) *RevokeSecurityGroupResponse {
	s.Body = v
	return s
}

type RevokeSecurityGroupEgressRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecurityGroupId       *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IpProtocol            *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	PortRange             *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	DestGroupId           *string `json:"DestGroupId,omitempty" xml:"DestGroupId,omitempty"`
	DestGroupOwnerId      *int64  `json:"DestGroupOwnerId,omitempty" xml:"DestGroupOwnerId,omitempty"`
	DestGroupOwnerAccount *string `json:"DestGroupOwnerAccount,omitempty" xml:"DestGroupOwnerAccount,omitempty"`
	DestCidrIp            *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Ipv6DestCidrIp        *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	SourceCidrIp          *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	Ipv6SourceCidrIp      *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	SourcePortRange       *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Policy                *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority              *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NicType               *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s RevokeSecurityGroupEgressRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressRequest) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressRequest) SetOwnerId(v int64) *RevokeSecurityGroupEgressRequest {
	s.OwnerId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetResourceOwnerAccount(v string) *RevokeSecurityGroupEgressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetResourceOwnerId(v int64) *RevokeSecurityGroupEgressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetOwnerAccount(v string) *RevokeSecurityGroupEgressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetRegionId(v string) *RevokeSecurityGroupEgressRequest {
	s.RegionId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSecurityGroupId(v string) *RevokeSecurityGroupEgressRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetIpProtocol(v string) *RevokeSecurityGroupEgressRequest {
	s.IpProtocol = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPortRange(v string) *RevokeSecurityGroupEgressRequest {
	s.PortRange = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDestGroupId(v string) *RevokeSecurityGroupEgressRequest {
	s.DestGroupId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDestGroupOwnerId(v int64) *RevokeSecurityGroupEgressRequest {
	s.DestGroupOwnerId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDestGroupOwnerAccount(v string) *RevokeSecurityGroupEgressRequest {
	s.DestGroupOwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDestCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetIpv6DestCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSourceCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetIpv6SourceCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSourcePortRange(v string) *RevokeSecurityGroupEgressRequest {
	s.SourcePortRange = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPolicy(v string) *RevokeSecurityGroupEgressRequest {
	s.Policy = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPriority(v string) *RevokeSecurityGroupEgressRequest {
	s.Priority = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetNicType(v string) *RevokeSecurityGroupEgressRequest {
	s.NicType = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetClientToken(v string) *RevokeSecurityGroupEgressRequest {
	s.ClientToken = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDescription(v string) *RevokeSecurityGroupEgressRequest {
	s.Description = &v
	return s
}

type RevokeSecurityGroupEgressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeSecurityGroupEgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressResponseBody) SetRequestId(v string) *RevokeSecurityGroupEgressResponseBody {
	s.RequestId = &v
	return s
}

type RevokeSecurityGroupEgressResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RevokeSecurityGroupEgressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeSecurityGroupEgressResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressResponse) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressResponse) SetHeaders(v map[string]*string) *RevokeSecurityGroupEgressResponse {
	s.Headers = v
	return s
}

func (s *RevokeSecurityGroupEgressResponse) SetBody(v *RevokeSecurityGroupEgressResponseBody) *RevokeSecurityGroupEgressResponse {
	s.Body = v
	return s
}

type RunCommandRequest struct {
	OwnerId              *int64                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name                 *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	Description          *string                `json:"Description,omitempty" xml:"Description,omitempty"`
	Type                 *string                `json:"Type,omitempty" xml:"Type,omitempty"`
	CommandContent       *string                `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	WorkingDir           *string                `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
	Timeout              *int64                 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	EnableParameter      *bool                  `json:"EnableParameter,omitempty" xml:"EnableParameter,omitempty"`
	Timed                *bool                  `json:"Timed,omitempty" xml:"Timed,omitempty"`
	Frequency            *string                `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	Parameters           map[string]interface{} `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	KeepCommand          *bool                  `json:"KeepCommand,omitempty" xml:"KeepCommand,omitempty"`
	ContentEncoding      *string                `json:"ContentEncoding,omitempty" xml:"ContentEncoding,omitempty"`
	Username             *string                `json:"Username,omitempty" xml:"Username,omitempty"`
	InstanceId           []*string              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s RunCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCommandRequest) GoString() string {
	return s.String()
}

func (s *RunCommandRequest) SetOwnerId(v int64) *RunCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *RunCommandRequest) SetResourceOwnerAccount(v string) *RunCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RunCommandRequest) SetResourceOwnerId(v int64) *RunCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunCommandRequest) SetOwnerAccount(v string) *RunCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RunCommandRequest) SetRegionId(v string) *RunCommandRequest {
	s.RegionId = &v
	return s
}

func (s *RunCommandRequest) SetName(v string) *RunCommandRequest {
	s.Name = &v
	return s
}

func (s *RunCommandRequest) SetDescription(v string) *RunCommandRequest {
	s.Description = &v
	return s
}

func (s *RunCommandRequest) SetType(v string) *RunCommandRequest {
	s.Type = &v
	return s
}

func (s *RunCommandRequest) SetCommandContent(v string) *RunCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *RunCommandRequest) SetWorkingDir(v string) *RunCommandRequest {
	s.WorkingDir = &v
	return s
}

func (s *RunCommandRequest) SetTimeout(v int64) *RunCommandRequest {
	s.Timeout = &v
	return s
}

func (s *RunCommandRequest) SetEnableParameter(v bool) *RunCommandRequest {
	s.EnableParameter = &v
	return s
}

func (s *RunCommandRequest) SetTimed(v bool) *RunCommandRequest {
	s.Timed = &v
	return s
}

func (s *RunCommandRequest) SetFrequency(v string) *RunCommandRequest {
	s.Frequency = &v
	return s
}

func (s *RunCommandRequest) SetParameters(v map[string]interface{}) *RunCommandRequest {
	s.Parameters = v
	return s
}

func (s *RunCommandRequest) SetKeepCommand(v bool) *RunCommandRequest {
	s.KeepCommand = &v
	return s
}

func (s *RunCommandRequest) SetContentEncoding(v string) *RunCommandRequest {
	s.ContentEncoding = &v
	return s
}

func (s *RunCommandRequest) SetUsername(v string) *RunCommandRequest {
	s.Username = &v
	return s
}

func (s *RunCommandRequest) SetInstanceId(v []*string) *RunCommandRequest {
	s.InstanceId = v
	return s
}

type RunCommandShrinkRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name                 *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	Type                 *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	CommandContent       *string   `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	WorkingDir           *string   `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
	Timeout              *int64    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	EnableParameter      *bool     `json:"EnableParameter,omitempty" xml:"EnableParameter,omitempty"`
	Timed                *bool     `json:"Timed,omitempty" xml:"Timed,omitempty"`
	Frequency            *string   `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	ParametersShrink     *string   `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	KeepCommand          *bool     `json:"KeepCommand,omitempty" xml:"KeepCommand,omitempty"`
	ContentEncoding      *string   `json:"ContentEncoding,omitempty" xml:"ContentEncoding,omitempty"`
	Username             *string   `json:"Username,omitempty" xml:"Username,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s RunCommandShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCommandShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunCommandShrinkRequest) SetOwnerId(v int64) *RunCommandShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *RunCommandShrinkRequest) SetResourceOwnerAccount(v string) *RunCommandShrinkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RunCommandShrinkRequest) SetResourceOwnerId(v int64) *RunCommandShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunCommandShrinkRequest) SetOwnerAccount(v string) *RunCommandShrinkRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RunCommandShrinkRequest) SetRegionId(v string) *RunCommandShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *RunCommandShrinkRequest) SetName(v string) *RunCommandShrinkRequest {
	s.Name = &v
	return s
}

func (s *RunCommandShrinkRequest) SetDescription(v string) *RunCommandShrinkRequest {
	s.Description = &v
	return s
}

func (s *RunCommandShrinkRequest) SetType(v string) *RunCommandShrinkRequest {
	s.Type = &v
	return s
}

func (s *RunCommandShrinkRequest) SetCommandContent(v string) *RunCommandShrinkRequest {
	s.CommandContent = &v
	return s
}

func (s *RunCommandShrinkRequest) SetWorkingDir(v string) *RunCommandShrinkRequest {
	s.WorkingDir = &v
	return s
}

func (s *RunCommandShrinkRequest) SetTimeout(v int64) *RunCommandShrinkRequest {
	s.Timeout = &v
	return s
}

func (s *RunCommandShrinkRequest) SetEnableParameter(v bool) *RunCommandShrinkRequest {
	s.EnableParameter = &v
	return s
}

func (s *RunCommandShrinkRequest) SetTimed(v bool) *RunCommandShrinkRequest {
	s.Timed = &v
	return s
}

func (s *RunCommandShrinkRequest) SetFrequency(v string) *RunCommandShrinkRequest {
	s.Frequency = &v
	return s
}

func (s *RunCommandShrinkRequest) SetParametersShrink(v string) *RunCommandShrinkRequest {
	s.ParametersShrink = &v
	return s
}

func (s *RunCommandShrinkRequest) SetKeepCommand(v bool) *RunCommandShrinkRequest {
	s.KeepCommand = &v
	return s
}

func (s *RunCommandShrinkRequest) SetContentEncoding(v string) *RunCommandShrinkRequest {
	s.ContentEncoding = &v
	return s
}

func (s *RunCommandShrinkRequest) SetUsername(v string) *RunCommandShrinkRequest {
	s.Username = &v
	return s
}

func (s *RunCommandShrinkRequest) SetInstanceId(v []*string) *RunCommandShrinkRequest {
	s.InstanceId = v
	return s
}

type RunCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CommandId *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	InvokeId  *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
}

func (s RunCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunCommandResponseBody) GoString() string {
	return s.String()
}

func (s *RunCommandResponseBody) SetRequestId(v string) *RunCommandResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunCommandResponseBody) SetCommandId(v string) *RunCommandResponseBody {
	s.CommandId = &v
	return s
}

func (s *RunCommandResponseBody) SetInvokeId(v string) *RunCommandResponseBody {
	s.InvokeId = &v
	return s
}

type RunCommandResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RunCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCommandResponse) GoString() string {
	return s.String()
}

func (s *RunCommandResponse) SetHeaders(v map[string]*string) *RunCommandResponse {
	s.Headers = v
	return s
}

func (s *RunCommandResponse) SetBody(v *RunCommandResponseBody) *RunCommandResponse {
	s.Body = v
	return s
}

type SendFileRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name                 *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	Timeout              *int64    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	TargetDir            *string   `json:"TargetDir,omitempty" xml:"TargetDir,omitempty"`
	ContentType          *string   `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	Content              *string   `json:"Content,omitempty" xml:"Content,omitempty"`
	FileOwner            *string   `json:"FileOwner,omitempty" xml:"FileOwner,omitempty"`
	FileGroup            *string   `json:"FileGroup,omitempty" xml:"FileGroup,omitempty"`
	FileMode             *string   `json:"FileMode,omitempty" xml:"FileMode,omitempty"`
	Overwrite            *bool     `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s SendFileRequest) String() string {
	return tea.Prettify(s)
}

func (s SendFileRequest) GoString() string {
	return s.String()
}

func (s *SendFileRequest) SetOwnerId(v int64) *SendFileRequest {
	s.OwnerId = &v
	return s
}

func (s *SendFileRequest) SetResourceOwnerAccount(v string) *SendFileRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SendFileRequest) SetResourceOwnerId(v int64) *SendFileRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SendFileRequest) SetOwnerAccount(v string) *SendFileRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SendFileRequest) SetRegionId(v string) *SendFileRequest {
	s.RegionId = &v
	return s
}

func (s *SendFileRequest) SetName(v string) *SendFileRequest {
	s.Name = &v
	return s
}

func (s *SendFileRequest) SetDescription(v string) *SendFileRequest {
	s.Description = &v
	return s
}

func (s *SendFileRequest) SetTimeout(v int64) *SendFileRequest {
	s.Timeout = &v
	return s
}

func (s *SendFileRequest) SetTargetDir(v string) *SendFileRequest {
	s.TargetDir = &v
	return s
}

func (s *SendFileRequest) SetContentType(v string) *SendFileRequest {
	s.ContentType = &v
	return s
}

func (s *SendFileRequest) SetContent(v string) *SendFileRequest {
	s.Content = &v
	return s
}

func (s *SendFileRequest) SetFileOwner(v string) *SendFileRequest {
	s.FileOwner = &v
	return s
}

func (s *SendFileRequest) SetFileGroup(v string) *SendFileRequest {
	s.FileGroup = &v
	return s
}

func (s *SendFileRequest) SetFileMode(v string) *SendFileRequest {
	s.FileMode = &v
	return s
}

func (s *SendFileRequest) SetOverwrite(v bool) *SendFileRequest {
	s.Overwrite = &v
	return s
}

func (s *SendFileRequest) SetInstanceId(v []*string) *SendFileRequest {
	s.InstanceId = v
	return s
}

type SendFileResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InvokeId  *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
}

func (s SendFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendFileResponseBody) GoString() string {
	return s.String()
}

func (s *SendFileResponseBody) SetRequestId(v string) *SendFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendFileResponseBody) SetInvokeId(v string) *SendFileResponseBody {
	s.InvokeId = &v
	return s
}

type SendFileResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SendFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendFileResponse) String() string {
	return tea.Prettify(s)
}

func (s SendFileResponse) GoString() string {
	return s.String()
}

func (s *SendFileResponse) SetHeaders(v map[string]*string) *SendFileResponse {
	s.Headers = v
	return s
}

func (s *SendFileResponse) SetBody(v *SendFileResponseBody) *SendFileResponse {
	s.Body = v
	return s
}

type StartElasticityAssuranceRequest struct {
	PrivatePoolOptions   *StartElasticityAssuranceRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	OwnerId              *int64                                             `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                            `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string                                            `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartElasticityAssuranceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartElasticityAssuranceRequest) GoString() string {
	return s.String()
}

func (s *StartElasticityAssuranceRequest) SetPrivatePoolOptions(v *StartElasticityAssuranceRequestPrivatePoolOptions) *StartElasticityAssuranceRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *StartElasticityAssuranceRequest) SetOwnerId(v int64) *StartElasticityAssuranceRequest {
	s.OwnerId = &v
	return s
}

func (s *StartElasticityAssuranceRequest) SetResourceOwnerAccount(v string) *StartElasticityAssuranceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StartElasticityAssuranceRequest) SetResourceOwnerId(v int64) *StartElasticityAssuranceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StartElasticityAssuranceRequest) SetOwnerAccount(v string) *StartElasticityAssuranceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StartElasticityAssuranceRequest) SetRegionId(v string) *StartElasticityAssuranceRequest {
	s.RegionId = &v
	return s
}

type StartElasticityAssuranceRequestPrivatePoolOptions struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s StartElasticityAssuranceRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s StartElasticityAssuranceRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *StartElasticityAssuranceRequestPrivatePoolOptions) SetId(v string) *StartElasticityAssuranceRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

type StartElasticityAssuranceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartElasticityAssuranceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartElasticityAssuranceResponseBody) GoString() string {
	return s.String()
}

func (s *StartElasticityAssuranceResponseBody) SetRequestId(v string) *StartElasticityAssuranceResponseBody {
	s.RequestId = &v
	return s
}

type StartElasticityAssuranceResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartElasticityAssuranceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartElasticityAssuranceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartElasticityAssuranceResponse) GoString() string {
	return s.String()
}

func (s *StartElasticityAssuranceResponse) SetHeaders(v map[string]*string) *StartElasticityAssuranceResponse {
	s.Headers = v
	return s
}

func (s *StartElasticityAssuranceResponse) SetBody(v *StartElasticityAssuranceResponseBody) *StartElasticityAssuranceResponse {
	s.Body = v
	return s
}

type StartInstanceRequest struct {
	SourceRegionId       *string `json:"SourceRegionId,omitempty" xml:"SourceRegionId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InitLocalDisk        *bool   `json:"InitLocalDisk,omitempty" xml:"InitLocalDisk,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DryRun               *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
}

func (s StartInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartInstanceRequest) SetSourceRegionId(v string) *StartInstanceRequest {
	s.SourceRegionId = &v
	return s
}

func (s *StartInstanceRequest) SetOwnerId(v int64) *StartInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *StartInstanceRequest) SetResourceOwnerAccount(v string) *StartInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StartInstanceRequest) SetResourceOwnerId(v int64) *StartInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StartInstanceRequest) SetInstanceId(v string) *StartInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *StartInstanceRequest) SetInitLocalDisk(v bool) *StartInstanceRequest {
	s.InitLocalDisk = &v
	return s
}

func (s *StartInstanceRequest) SetOwnerAccount(v string) *StartInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StartInstanceRequest) SetDryRun(v bool) *StartInstanceRequest {
	s.DryRun = &v
	return s
}

type StartInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartInstanceResponseBody) SetRequestId(v string) *StartInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StartInstanceResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartInstanceResponse) SetHeaders(v map[string]*string) *StartInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartInstanceResponse) SetBody(v *StartInstanceResponseBody) *StartInstanceResponse {
	s.Body = v
	return s
}

type StartInstancesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DryRun               *bool     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BatchOptimization    *string   `json:"BatchOptimization,omitempty" xml:"BatchOptimization,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s StartInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesRequest) GoString() string {
	return s.String()
}

func (s *StartInstancesRequest) SetOwnerId(v int64) *StartInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *StartInstancesRequest) SetResourceOwnerAccount(v string) *StartInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StartInstancesRequest) SetResourceOwnerId(v int64) *StartInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StartInstancesRequest) SetOwnerAccount(v string) *StartInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StartInstancesRequest) SetDryRun(v bool) *StartInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *StartInstancesRequest) SetRegionId(v string) *StartInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *StartInstancesRequest) SetBatchOptimization(v string) *StartInstancesRequest {
	s.BatchOptimization = &v
	return s
}

func (s *StartInstancesRequest) SetInstanceId(v []*string) *StartInstancesRequest {
	s.InstanceId = v
	return s
}

type StartInstancesResponseBody struct {
	RequestId         *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceResponses []*StartInstancesResponseBodyInstanceResponses `json:"InstanceResponses,omitempty" xml:"InstanceResponses,omitempty" type:"Repeated"`
}

func (s StartInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *StartInstancesResponseBody) SetRequestId(v string) *StartInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartInstancesResponseBody) SetInstanceResponses(v []*StartInstancesResponseBodyInstanceResponses) *StartInstancesResponseBody {
	s.InstanceResponses = v
	return s
}

type StartInstancesResponseBodyInstanceResponses struct {
	CurrentStatus  *string `json:"CurrentStatus,omitempty" xml:"CurrentStatus,omitempty"`
	PreviousStatus *string `json:"PreviousStatus,omitempty" xml:"PreviousStatus,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StartInstancesResponseBodyInstanceResponses) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesResponseBodyInstanceResponses) GoString() string {
	return s.String()
}

func (s *StartInstancesResponseBodyInstanceResponses) SetCurrentStatus(v string) *StartInstancesResponseBodyInstanceResponses {
	s.CurrentStatus = &v
	return s
}

func (s *StartInstancesResponseBodyInstanceResponses) SetPreviousStatus(v string) *StartInstancesResponseBodyInstanceResponses {
	s.PreviousStatus = &v
	return s
}

func (s *StartInstancesResponseBodyInstanceResponses) SetCode(v string) *StartInstancesResponseBodyInstanceResponses {
	s.Code = &v
	return s
}

func (s *StartInstancesResponseBodyInstanceResponses) SetMessage(v string) *StartInstancesResponseBodyInstanceResponses {
	s.Message = &v
	return s
}

func (s *StartInstancesResponseBodyInstanceResponses) SetInstanceId(v string) *StartInstancesResponseBodyInstanceResponses {
	s.InstanceId = &v
	return s
}

type StartInstancesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesResponse) GoString() string {
	return s.String()
}

func (s *StartInstancesResponse) SetHeaders(v map[string]*string) *StartInstancesResponse {
	s.Headers = v
	return s
}

func (s *StartInstancesResponse) SetBody(v *StartInstancesResponseBody) *StartInstancesResponse {
	s.Body = v
	return s
}

type StopInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ConfirmStop          *bool   `json:"ConfirmStop,omitempty" xml:"ConfirmStop,omitempty"`
	ForceStop            *bool   `json:"ForceStop,omitempty" xml:"ForceStop,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	StoppedMode          *string `json:"StoppedMode,omitempty" xml:"StoppedMode,omitempty"`
	DryRun               *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	Hibernate            *bool   `json:"Hibernate,omitempty" xml:"Hibernate,omitempty"`
}

func (s StopInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopInstanceRequest) SetOwnerId(v int64) *StopInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *StopInstanceRequest) SetResourceOwnerAccount(v string) *StopInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StopInstanceRequest) SetResourceOwnerId(v int64) *StopInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StopInstanceRequest) SetInstanceId(v string) *StopInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *StopInstanceRequest) SetConfirmStop(v bool) *StopInstanceRequest {
	s.ConfirmStop = &v
	return s
}

func (s *StopInstanceRequest) SetForceStop(v bool) *StopInstanceRequest {
	s.ForceStop = &v
	return s
}

func (s *StopInstanceRequest) SetOwnerAccount(v string) *StopInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StopInstanceRequest) SetStoppedMode(v string) *StopInstanceRequest {
	s.StoppedMode = &v
	return s
}

func (s *StopInstanceRequest) SetDryRun(v bool) *StopInstanceRequest {
	s.DryRun = &v
	return s
}

func (s *StopInstanceRequest) SetHibernate(v bool) *StopInstanceRequest {
	s.Hibernate = &v
	return s
}

type StopInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopInstanceResponseBody) SetRequestId(v string) *StopInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StopInstanceResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopInstanceResponse) SetHeaders(v map[string]*string) *StopInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopInstanceResponse) SetBody(v *StopInstanceResponseBody) *StopInstanceResponse {
	s.Body = v
	return s
}

type StopInstancesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DryRun               *bool     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ForceStop            *bool     `json:"ForceStop,omitempty" xml:"ForceStop,omitempty"`
	StoppedMode          *string   `json:"StoppedMode,omitempty" xml:"StoppedMode,omitempty"`
	BatchOptimization    *string   `json:"BatchOptimization,omitempty" xml:"BatchOptimization,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s StopInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesRequest) GoString() string {
	return s.String()
}

func (s *StopInstancesRequest) SetOwnerId(v int64) *StopInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *StopInstancesRequest) SetResourceOwnerAccount(v string) *StopInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StopInstancesRequest) SetResourceOwnerId(v int64) *StopInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StopInstancesRequest) SetOwnerAccount(v string) *StopInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StopInstancesRequest) SetDryRun(v bool) *StopInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *StopInstancesRequest) SetRegionId(v string) *StopInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *StopInstancesRequest) SetForceStop(v bool) *StopInstancesRequest {
	s.ForceStop = &v
	return s
}

func (s *StopInstancesRequest) SetStoppedMode(v string) *StopInstancesRequest {
	s.StoppedMode = &v
	return s
}

func (s *StopInstancesRequest) SetBatchOptimization(v string) *StopInstancesRequest {
	s.BatchOptimization = &v
	return s
}

func (s *StopInstancesRequest) SetInstanceId(v []*string) *StopInstancesRequest {
	s.InstanceId = v
	return s
}

type StopInstancesResponseBody struct {
	RequestId         *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceResponses []*StopInstancesResponseBodyInstanceResponses `json:"InstanceResponses,omitempty" xml:"InstanceResponses,omitempty" type:"Repeated"`
}

func (s StopInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *StopInstancesResponseBody) SetRequestId(v string) *StopInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopInstancesResponseBody) SetInstanceResponses(v []*StopInstancesResponseBodyInstanceResponses) *StopInstancesResponseBody {
	s.InstanceResponses = v
	return s
}

type StopInstancesResponseBodyInstanceResponses struct {
	CurrentStatus  *string `json:"CurrentStatus,omitempty" xml:"CurrentStatus,omitempty"`
	PreviousStatus *string `json:"PreviousStatus,omitempty" xml:"PreviousStatus,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StopInstancesResponseBodyInstanceResponses) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesResponseBodyInstanceResponses) GoString() string {
	return s.String()
}

func (s *StopInstancesResponseBodyInstanceResponses) SetCurrentStatus(v string) *StopInstancesResponseBodyInstanceResponses {
	s.CurrentStatus = &v
	return s
}

func (s *StopInstancesResponseBodyInstanceResponses) SetPreviousStatus(v string) *StopInstancesResponseBodyInstanceResponses {
	s.PreviousStatus = &v
	return s
}

func (s *StopInstancesResponseBodyInstanceResponses) SetCode(v string) *StopInstancesResponseBodyInstanceResponses {
	s.Code = &v
	return s
}

func (s *StopInstancesResponseBodyInstanceResponses) SetMessage(v string) *StopInstancesResponseBodyInstanceResponses {
	s.Message = &v
	return s
}

func (s *StopInstancesResponseBodyInstanceResponses) SetInstanceId(v string) *StopInstancesResponseBodyInstanceResponses {
	s.InstanceId = &v
	return s
}

type StopInstancesResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesResponse) GoString() string {
	return s.String()
}

func (s *StopInstancesResponse) SetHeaders(v map[string]*string) *StopInstancesResponse {
	s.Headers = v
	return s
}

func (s *StopInstancesResponse) SetBody(v *StopInstancesResponseBody) *StopInstancesResponse {
	s.Body = v
	return s
}

type StopInvocationRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InvokeId             *string   `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s StopInvocationRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInvocationRequest) GoString() string {
	return s.String()
}

func (s *StopInvocationRequest) SetOwnerId(v int64) *StopInvocationRequest {
	s.OwnerId = &v
	return s
}

func (s *StopInvocationRequest) SetResourceOwnerAccount(v string) *StopInvocationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StopInvocationRequest) SetResourceOwnerId(v int64) *StopInvocationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StopInvocationRequest) SetOwnerAccount(v string) *StopInvocationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StopInvocationRequest) SetRegionId(v string) *StopInvocationRequest {
	s.RegionId = &v
	return s
}

func (s *StopInvocationRequest) SetInvokeId(v string) *StopInvocationRequest {
	s.InvokeId = &v
	return s
}

func (s *StopInvocationRequest) SetInstanceId(v []*string) *StopInvocationRequest {
	s.InstanceId = v
	return s
}

type StopInvocationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopInvocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopInvocationResponseBody) GoString() string {
	return s.String()
}

func (s *StopInvocationResponseBody) SetRequestId(v string) *StopInvocationResponseBody {
	s.RequestId = &v
	return s
}

type StopInvocationResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopInvocationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopInvocationResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInvocationResponse) GoString() string {
	return s.String()
}

func (s *StopInvocationResponse) SetHeaders(v map[string]*string) *StopInvocationResponse {
	s.Headers = v
	return s
}

func (s *StopInvocationResponse) SetBody(v *StopInvocationResponseBody) *StopInvocationResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	OwnerId              *int64                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string                   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType         *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId           []*string                 `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag                  []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetOwnerId(v int64) *TagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerAccount(v string) *TagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetOwnerAccount(v string) *TagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type TerminatePhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId,omitempty" xml:"PhysicalConnectionId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s TerminatePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminatePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *TerminatePhysicalConnectionRequest) SetRegionId(v string) *TerminatePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetPhysicalConnectionId(v string) *TerminatePhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetOwnerId(v int64) *TerminatePhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetResourceOwnerAccount(v string) *TerminatePhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetResourceOwnerId(v int64) *TerminatePhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetClientToken(v string) *TerminatePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetOwnerAccount(v string) *TerminatePhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetUserCidr(v string) *TerminatePhysicalConnectionRequest {
	s.UserCidr = &v
	return s
}

type TerminatePhysicalConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TerminatePhysicalConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TerminatePhysicalConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *TerminatePhysicalConnectionResponseBody) SetRequestId(v string) *TerminatePhysicalConnectionResponseBody {
	s.RequestId = &v
	return s
}

type TerminatePhysicalConnectionResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TerminatePhysicalConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TerminatePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminatePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *TerminatePhysicalConnectionResponse) SetHeaders(v map[string]*string) *TerminatePhysicalConnectionResponse {
	s.Headers = v
	return s
}

func (s *TerminatePhysicalConnectionResponse) SetBody(v *TerminatePhysicalConnectionResponseBody) *TerminatePhysicalConnectionResponse {
	s.Body = v
	return s
}

type TerminateVirtualBorderRouterRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VbrId                *string `json:"VbrId,omitempty" xml:"VbrId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UserCidr             *string `json:"UserCidr,omitempty" xml:"UserCidr,omitempty"`
}

func (s TerminateVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminateVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *TerminateVirtualBorderRouterRequest) SetRegionId(v string) *TerminateVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetVbrId(v string) *TerminateVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetOwnerId(v int64) *TerminateVirtualBorderRouterRequest {
	s.OwnerId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetResourceOwnerAccount(v string) *TerminateVirtualBorderRouterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetResourceOwnerId(v int64) *TerminateVirtualBorderRouterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetClientToken(v string) *TerminateVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetOwnerAccount(v string) *TerminateVirtualBorderRouterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetUserCidr(v string) *TerminateVirtualBorderRouterRequest {
	s.UserCidr = &v
	return s
}

type TerminateVirtualBorderRouterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TerminateVirtualBorderRouterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TerminateVirtualBorderRouterResponseBody) GoString() string {
	return s.String()
}

func (s *TerminateVirtualBorderRouterResponseBody) SetRequestId(v string) *TerminateVirtualBorderRouterResponseBody {
	s.RequestId = &v
	return s
}

type TerminateVirtualBorderRouterResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TerminateVirtualBorderRouterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TerminateVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminateVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *TerminateVirtualBorderRouterResponse) SetHeaders(v map[string]*string) *TerminateVirtualBorderRouterResponse {
	s.Headers = v
	return s
}

func (s *TerminateVirtualBorderRouterResponse) SetBody(v *TerminateVirtualBorderRouterResponseBody) *TerminateVirtualBorderRouterResponse {
	s.Body = v
	return s
}

type UnassignIpv6AddressesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfaceId   *string   `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	Ipv6Address          []*string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty" type:"Repeated"`
}

func (s UnassignIpv6AddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassignIpv6AddressesRequest) GoString() string {
	return s.String()
}

func (s *UnassignIpv6AddressesRequest) SetOwnerId(v int64) *UnassignIpv6AddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetResourceOwnerAccount(v string) *UnassignIpv6AddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetResourceOwnerId(v int64) *UnassignIpv6AddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetOwnerAccount(v string) *UnassignIpv6AddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetRegionId(v string) *UnassignIpv6AddressesRequest {
	s.RegionId = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetNetworkInterfaceId(v string) *UnassignIpv6AddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetIpv6Address(v []*string) *UnassignIpv6AddressesRequest {
	s.Ipv6Address = v
	return s
}

type UnassignIpv6AddressesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnassignIpv6AddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnassignIpv6AddressesResponseBody) GoString() string {
	return s.String()
}

func (s *UnassignIpv6AddressesResponseBody) SetRequestId(v string) *UnassignIpv6AddressesResponseBody {
	s.RequestId = &v
	return s
}

type UnassignIpv6AddressesResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnassignIpv6AddressesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnassignIpv6AddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassignIpv6AddressesResponse) GoString() string {
	return s.String()
}

func (s *UnassignIpv6AddressesResponse) SetHeaders(v map[string]*string) *UnassignIpv6AddressesResponse {
	s.Headers = v
	return s
}

func (s *UnassignIpv6AddressesResponse) SetBody(v *UnassignIpv6AddressesResponseBody) *UnassignIpv6AddressesResponse {
	s.Body = v
	return s
}

type UnassignPrivateIpAddressesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetworkInterfaceId   *string   `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	PrivateIpAddress     []*string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
}

func (s UnassignPrivateIpAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesRequest) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesRequest) SetOwnerId(v int64) *UnassignPrivateIpAddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetResourceOwnerAccount(v string) *UnassignPrivateIpAddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetResourceOwnerId(v int64) *UnassignPrivateIpAddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetOwnerAccount(v string) *UnassignPrivateIpAddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetRegionId(v string) *UnassignPrivateIpAddressesRequest {
	s.RegionId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetNetworkInterfaceId(v string) *UnassignPrivateIpAddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetPrivateIpAddress(v []*string) *UnassignPrivateIpAddressesRequest {
	s.PrivateIpAddress = v
	return s
}

type UnassignPrivateIpAddressesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnassignPrivateIpAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesResponseBody) SetRequestId(v string) *UnassignPrivateIpAddressesResponseBody {
	s.RequestId = &v
	return s
}

type UnassignPrivateIpAddressesResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnassignPrivateIpAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnassignPrivateIpAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesResponse) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesResponse) SetHeaders(v map[string]*string) *UnassignPrivateIpAddressesResponse {
	s.Headers = v
	return s
}

func (s *UnassignPrivateIpAddressesResponse) SetBody(v *UnassignPrivateIpAddressesResponseBody) *UnassignPrivateIpAddressesResponse {
	s.Body = v
	return s
}

type UnassociateEipAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AllocationId         *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s UnassociateEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateEipAddressRequest) GoString() string {
	return s.String()
}

func (s *UnassociateEipAddressRequest) SetOwnerId(v int64) *UnassociateEipAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetResourceOwnerAccount(v string) *UnassociateEipAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetResourceOwnerId(v int64) *UnassociateEipAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetRegionId(v string) *UnassociateEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetAllocationId(v string) *UnassociateEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetInstanceId(v string) *UnassociateEipAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetOwnerAccount(v string) *UnassociateEipAddressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetInstanceType(v string) *UnassociateEipAddressRequest {
	s.InstanceType = &v
	return s
}

type UnassociateEipAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnassociateEipAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnassociateEipAddressResponseBody) GoString() string {
	return s.String()
}

func (s *UnassociateEipAddressResponseBody) SetRequestId(v string) *UnassociateEipAddressResponseBody {
	s.RequestId = &v
	return s
}

type UnassociateEipAddressResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnassociateEipAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnassociateEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateEipAddressResponse) GoString() string {
	return s.String()
}

func (s *UnassociateEipAddressResponse) SetHeaders(v map[string]*string) *UnassociateEipAddressResponse {
	s.Headers = v
	return s
}

func (s *UnassociateEipAddressResponse) SetBody(v *UnassociateEipAddressResponseBody) *UnassociateEipAddressResponse {
	s.Body = v
	return s
}

type UnassociateHaVipRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	HaVipId              *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Force                *string `json:"Force,omitempty" xml:"Force,omitempty"`
}

func (s UnassociateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipRequest) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipRequest) SetOwnerId(v int64) *UnassociateHaVipRequest {
	s.OwnerId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetResourceOwnerAccount(v string) *UnassociateHaVipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnassociateHaVipRequest) SetResourceOwnerId(v int64) *UnassociateHaVipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetOwnerAccount(v string) *UnassociateHaVipRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnassociateHaVipRequest) SetClientToken(v string) *UnassociateHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *UnassociateHaVipRequest) SetRegionId(v string) *UnassociateHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetHaVipId(v string) *UnassociateHaVipRequest {
	s.HaVipId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetInstanceId(v string) *UnassociateHaVipRequest {
	s.InstanceId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetForce(v string) *UnassociateHaVipRequest {
	s.Force = &v
	return s
}

type UnassociateHaVipResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnassociateHaVipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipResponseBody) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipResponseBody) SetRequestId(v string) *UnassociateHaVipResponseBody {
	s.RequestId = &v
	return s
}

type UnassociateHaVipResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnassociateHaVipResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnassociateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipResponse) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipResponse) SetHeaders(v map[string]*string) *UnassociateHaVipResponse {
	s.Headers = v
	return s
}

func (s *UnassociateHaVipResponse) SetBody(v *UnassociateHaVipResponseBody) *UnassociateHaVipResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType         *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	All                  *bool     `json:"All,omitempty" xml:"All,omitempty"`
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	TagKey               []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetOwnerId(v int64) *UntagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerAccount(v string) *UntagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerId(v int64) *UntagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetOwnerAccount(v string) *UntagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-beijing":                  tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai":                 tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hongkong":                 tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"ap-southeast-1":              tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"us-west-1":                   tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"us-east-1":                   tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("ecs.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("ecs.ap-northeast-1.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("ecs.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("ecs.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("ecs.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-edge-1":                   tea.String("ecs.cn-qingdao-nebula.aliyuncs.com"),
		"cn-fujian":                   tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("ecs.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("ecs.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("ecs.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("ecs.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-wuhan":                    tea.String("ecs.aliyuncs.com"),
		"cn-yushanfang":               tea.String("ecs.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("ecs.cn-zhangjiakou.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("ecs.cn-qingdao-nebula.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("ecs.cn-shenzhen-cloudstone.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("ecs.ap-northeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ecs"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AcceptInquiredSystemEventWithOptions(request *AcceptInquiredSystemEventRequest, runtime *util.RuntimeOptions) (_result *AcceptInquiredSystemEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AcceptInquiredSystemEventResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AcceptInquiredSystemEvent"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AcceptInquiredSystemEvent(request *AcceptInquiredSystemEventRequest) (_result *AcceptInquiredSystemEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AcceptInquiredSystemEventResponse{}
	_body, _err := client.AcceptInquiredSystemEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ActivateRouterInterfaceWithOptions(request *ActivateRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *ActivateRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ActivateRouterInterfaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ActivateRouterInterface"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ActivateRouterInterface(request *ActivateRouterInterfaceRequest) (_result *ActivateRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ActivateRouterInterfaceResponse{}
	_body, _err := client.ActivateRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddBandwidthPackageIpsWithOptions(request *AddBandwidthPackageIpsRequest, runtime *util.RuntimeOptions) (_result *AddBandwidthPackageIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddBandwidthPackageIpsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddBandwidthPackageIps"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddBandwidthPackageIps(request *AddBandwidthPackageIpsRequest) (_result *AddBandwidthPackageIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBandwidthPackageIpsResponse{}
	_body, _err := client.AddBandwidthPackageIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTagsWithOptions(request *AddTagsRequest, runtime *util.RuntimeOptions) (_result *AddTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddTags"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTags(request *AddTagsRequest) (_result *AddTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTagsResponse{}
	_body, _err := client.AddTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateDedicatedHostsWithOptions(request *AllocateDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *AllocateDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AllocateDedicatedHostsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AllocateDedicatedHosts"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateDedicatedHosts(request *AllocateDedicatedHostsRequest) (_result *AllocateDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateDedicatedHostsResponse{}
	_body, _err := client.AllocateDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateEipAddressWithOptions(request *AllocateEipAddressRequest, runtime *util.RuntimeOptions) (_result *AllocateEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AllocateEipAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AllocateEipAddress"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateEipAddress(request *AllocateEipAddressRequest) (_result *AllocateEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateEipAddressResponse{}
	_body, _err := client.AllocateEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocatePublicIpAddressWithOptions(request *AllocatePublicIpAddressRequest, runtime *util.RuntimeOptions) (_result *AllocatePublicIpAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AllocatePublicIpAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AllocatePublicIpAddress"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocatePublicIpAddress(request *AllocatePublicIpAddressRequest) (_result *AllocatePublicIpAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocatePublicIpAddressResponse{}
	_body, _err := client.AllocatePublicIpAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyAutoSnapshotPolicyWithOptions(request *ApplyAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *ApplyAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ApplyAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ApplyAutoSnapshotPolicy"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyAutoSnapshotPolicy(request *ApplyAutoSnapshotPolicyRequest) (_result *ApplyAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyAutoSnapshotPolicyResponse{}
	_body, _err := client.ApplyAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssignIpv6AddressesWithOptions(request *AssignIpv6AddressesRequest, runtime *util.RuntimeOptions) (_result *AssignIpv6AddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AssignIpv6AddressesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AssignIpv6Addresses"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssignIpv6Addresses(request *AssignIpv6AddressesRequest) (_result *AssignIpv6AddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssignIpv6AddressesResponse{}
	_body, _err := client.AssignIpv6AddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssignPrivateIpAddressesWithOptions(request *AssignPrivateIpAddressesRequest, runtime *util.RuntimeOptions) (_result *AssignPrivateIpAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AssignPrivateIpAddressesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AssignPrivateIpAddresses"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssignPrivateIpAddresses(request *AssignPrivateIpAddressesRequest) (_result *AssignPrivateIpAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssignPrivateIpAddressesResponse{}
	_body, _err := client.AssignPrivateIpAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateEipAddressWithOptions(request *AssociateEipAddressRequest, runtime *util.RuntimeOptions) (_result *AssociateEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AssociateEipAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AssociateEipAddress"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateEipAddress(request *AssociateEipAddressRequest) (_result *AssociateEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateEipAddressResponse{}
	_body, _err := client.AssociateEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateHaVipWithOptions(request *AssociateHaVipRequest, runtime *util.RuntimeOptions) (_result *AssociateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AssociateHaVipResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AssociateHaVip"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateHaVip(request *AssociateHaVipRequest) (_result *AssociateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateHaVipResponse{}
	_body, _err := client.AssociateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachClassicLinkVpcWithOptions(request *AttachClassicLinkVpcRequest, runtime *util.RuntimeOptions) (_result *AttachClassicLinkVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AttachClassicLinkVpcResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AttachClassicLinkVpc"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachClassicLinkVpc(request *AttachClassicLinkVpcRequest) (_result *AttachClassicLinkVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachClassicLinkVpcResponse{}
	_body, _err := client.AttachClassicLinkVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachDiskWithOptions(request *AttachDiskRequest, runtime *util.RuntimeOptions) (_result *AttachDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AttachDiskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AttachDisk"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachDisk(request *AttachDiskRequest) (_result *AttachDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachDiskResponse{}
	_body, _err := client.AttachDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachInstanceRamRoleWithOptions(request *AttachInstanceRamRoleRequest, runtime *util.RuntimeOptions) (_result *AttachInstanceRamRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AttachInstanceRamRoleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AttachInstanceRamRole"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachInstanceRamRole(request *AttachInstanceRamRoleRequest) (_result *AttachInstanceRamRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachInstanceRamRoleResponse{}
	_body, _err := client.AttachInstanceRamRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachKeyPairWithOptions(request *AttachKeyPairRequest, runtime *util.RuntimeOptions) (_result *AttachKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AttachKeyPairResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AttachKeyPair"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachKeyPair(request *AttachKeyPairRequest) (_result *AttachKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachKeyPairResponse{}
	_body, _err := client.AttachKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachNetworkInterfaceWithOptions(request *AttachNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *AttachNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AttachNetworkInterfaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AttachNetworkInterface"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachNetworkInterface(request *AttachNetworkInterfaceRequest) (_result *AttachNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachNetworkInterfaceResponse{}
	_body, _err := client.AttachNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupWithOptions(request *AuthorizeSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *AuthorizeSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AuthorizeSecurityGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AuthorizeSecurityGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroup(request *AuthorizeSecurityGroupRequest) (_result *AuthorizeSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeSecurityGroupResponse{}
	_body, _err := client.AuthorizeSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupEgressWithOptions(request *AuthorizeSecurityGroupEgressRequest, runtime *util.RuntimeOptions) (_result *AuthorizeSecurityGroupEgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AuthorizeSecurityGroupEgressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AuthorizeSecurityGroupEgress"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupEgress(request *AuthorizeSecurityGroupEgressRequest) (_result *AuthorizeSecurityGroupEgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeSecurityGroupEgressResponse{}
	_body, _err := client.AuthorizeSecurityGroupEgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelAutoSnapshotPolicyWithOptions(request *CancelAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *CancelAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelAutoSnapshotPolicy"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelAutoSnapshotPolicy(request *CancelAutoSnapshotPolicyRequest) (_result *CancelAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelAutoSnapshotPolicyResponse{}
	_body, _err := client.CancelAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelCopyImageWithOptions(request *CancelCopyImageRequest, runtime *util.RuntimeOptions) (_result *CancelCopyImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelCopyImageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelCopyImage"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelCopyImage(request *CancelCopyImageRequest) (_result *CancelCopyImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelCopyImageResponse{}
	_body, _err := client.CancelCopyImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelPhysicalConnectionWithOptions(request *CancelPhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *CancelPhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelPhysicalConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelPhysicalConnection"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelPhysicalConnection(request *CancelPhysicalConnectionRequest) (_result *CancelPhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelPhysicalConnectionResponse{}
	_body, _err := client.CancelPhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelSimulatedSystemEventsWithOptions(request *CancelSimulatedSystemEventsRequest, runtime *util.RuntimeOptions) (_result *CancelSimulatedSystemEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelSimulatedSystemEventsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelSimulatedSystemEvents"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelSimulatedSystemEvents(request *CancelSimulatedSystemEventsRequest) (_result *CancelSimulatedSystemEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelSimulatedSystemEventsResponse{}
	_body, _err := client.CancelSimulatedSystemEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelTaskWithOptions(request *CancelTaskRequest, runtime *util.RuntimeOptions) (_result *CancelTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelTask"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelTask(request *CancelTaskRequest) (_result *CancelTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelTaskResponse{}
	_body, _err := client.CancelTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConnectRouterInterfaceWithOptions(request *ConnectRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *ConnectRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ConnectRouterInterfaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ConnectRouterInterface"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConnectRouterInterface(request *ConnectRouterInterfaceRequest) (_result *ConnectRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConnectRouterInterfaceResponse{}
	_body, _err := client.ConnectRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConvertNatPublicIpToEipWithOptions(request *ConvertNatPublicIpToEipRequest, runtime *util.RuntimeOptions) (_result *ConvertNatPublicIpToEipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ConvertNatPublicIpToEipResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ConvertNatPublicIpToEip"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConvertNatPublicIpToEip(request *ConvertNatPublicIpToEipRequest) (_result *ConvertNatPublicIpToEipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConvertNatPublicIpToEipResponse{}
	_body, _err := client.ConvertNatPublicIpToEipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyImageWithOptions(request *CopyImageRequest, runtime *util.RuntimeOptions) (_result *CopyImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CopyImageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CopyImage"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyImage(request *CopyImageRequest) (_result *CopyImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyImageResponse{}
	_body, _err := client.CopyImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopySnapshotWithOptions(request *CopySnapshotRequest, runtime *util.RuntimeOptions) (_result *CopySnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CopySnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CopySnapshot"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopySnapshot(request *CopySnapshotRequest) (_result *CopySnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopySnapshotResponse{}
	_body, _err := client.CopySnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAutoProvisioningGroupWithOptions(request *CreateAutoProvisioningGroupRequest, runtime *util.RuntimeOptions) (_result *CreateAutoProvisioningGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateAutoProvisioningGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateAutoProvisioningGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAutoProvisioningGroup(request *CreateAutoProvisioningGroupRequest) (_result *CreateAutoProvisioningGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAutoProvisioningGroupResponse{}
	_body, _err := client.CreateAutoProvisioningGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAutoSnapshotPolicyWithOptions(request *CreateAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateAutoSnapshotPolicy"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAutoSnapshotPolicy(request *CreateAutoSnapshotPolicyRequest) (_result *CreateAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAutoSnapshotPolicyResponse{}
	_body, _err := client.CreateAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCapacityReservationWithOptions(request *CreateCapacityReservationRequest, runtime *util.RuntimeOptions) (_result *CreateCapacityReservationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateCapacityReservationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateCapacityReservation"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCapacityReservation(request *CreateCapacityReservationRequest) (_result *CreateCapacityReservationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCapacityReservationResponse{}
	_body, _err := client.CreateCapacityReservationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCommandWithOptions(request *CreateCommandRequest, runtime *util.RuntimeOptions) (_result *CreateCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateCommandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateCommand"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCommand(request *CreateCommandRequest) (_result *CreateCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCommandResponse{}
	_body, _err := client.CreateCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostClusterWithOptions(request *CreateDedicatedHostClusterRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDedicatedHostClusterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDedicatedHostCluster"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHostCluster(request *CreateDedicatedHostClusterRequest) (_result *CreateDedicatedHostClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostClusterResponse{}
	_body, _err := client.CreateDedicatedHostClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDemandWithOptions(request *CreateDemandRequest, runtime *util.RuntimeOptions) (_result *CreateDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDemandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDemand"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDemand(request *CreateDemandRequest) (_result *CreateDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDemandResponse{}
	_body, _err := client.CreateDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDeploymentSetWithOptions(request *CreateDeploymentSetRequest, runtime *util.RuntimeOptions) (_result *CreateDeploymentSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDeploymentSetResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDeploymentSet"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDeploymentSet(request *CreateDeploymentSetRequest) (_result *CreateDeploymentSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDeploymentSetResponse{}
	_body, _err := client.CreateDeploymentSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDiskWithOptions(request *CreateDiskRequest, runtime *util.RuntimeOptions) (_result *CreateDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDiskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDisk"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDisk(request *CreateDiskRequest) (_result *CreateDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiskResponse{}
	_body, _err := client.CreateDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateElasticityAssuranceWithOptions(request *CreateElasticityAssuranceRequest, runtime *util.RuntimeOptions) (_result *CreateElasticityAssuranceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateElasticityAssuranceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateElasticityAssurance"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateElasticityAssurance(request *CreateElasticityAssuranceRequest) (_result *CreateElasticityAssuranceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateElasticityAssuranceResponse{}
	_body, _err := client.CreateElasticityAssuranceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateForwardEntryWithOptions(request *CreateForwardEntryRequest, runtime *util.RuntimeOptions) (_result *CreateForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateForwardEntryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateForwardEntry"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateForwardEntry(request *CreateForwardEntryRequest) (_result *CreateForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateForwardEntryResponse{}
	_body, _err := client.CreateForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHaVipWithOptions(request *CreateHaVipRequest, runtime *util.RuntimeOptions) (_result *CreateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateHaVipResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateHaVip"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHaVip(request *CreateHaVipRequest) (_result *CreateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHaVipResponse{}
	_body, _err := client.CreateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHpcClusterWithOptions(request *CreateHpcClusterRequest, runtime *util.RuntimeOptions) (_result *CreateHpcClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateHpcClusterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateHpcCluster"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHpcCluster(request *CreateHpcClusterRequest) (_result *CreateHpcClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHpcClusterResponse{}
	_body, _err := client.CreateHpcClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateImageWithOptions(request *CreateImageRequest, runtime *util.RuntimeOptions) (_result *CreateImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateImageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateImage"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateImage(request *CreateImageRequest) (_result *CreateImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateImageResponse{}
	_body, _err := client.CreateImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateInstance"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateKeyPairWithOptions(request *CreateKeyPairRequest, runtime *util.RuntimeOptions) (_result *CreateKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateKeyPairResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateKeyPair"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateKeyPair(request *CreateKeyPairRequest) (_result *CreateKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateKeyPairResponse{}
	_body, _err := client.CreateKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLaunchTemplateWithOptions(request *CreateLaunchTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLaunchTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateLaunchTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateLaunchTemplate"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLaunchTemplate(request *CreateLaunchTemplateRequest) (_result *CreateLaunchTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLaunchTemplateResponse{}
	_body, _err := client.CreateLaunchTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLaunchTemplateVersionWithOptions(request *CreateLaunchTemplateVersionRequest, runtime *util.RuntimeOptions) (_result *CreateLaunchTemplateVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateLaunchTemplateVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateLaunchTemplateVersion"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLaunchTemplateVersion(request *CreateLaunchTemplateVersionRequest) (_result *CreateLaunchTemplateVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLaunchTemplateVersionResponse{}
	_body, _err := client.CreateLaunchTemplateVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNatGatewayWithOptions(request *CreateNatGatewayRequest, runtime *util.RuntimeOptions) (_result *CreateNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateNatGatewayResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateNatGateway"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNatGateway(request *CreateNatGatewayRequest) (_result *CreateNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNatGatewayResponse{}
	_body, _err := client.CreateNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNetworkInterfaceWithOptions(request *CreateNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateNetworkInterfaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateNetworkInterface"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNetworkInterface(request *CreateNetworkInterfaceRequest) (_result *CreateNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkInterfaceResponse{}
	_body, _err := client.CreateNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNetworkInterfacePermissionWithOptions(request *CreateNetworkInterfacePermissionRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkInterfacePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateNetworkInterfacePermissionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateNetworkInterfacePermission"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNetworkInterfacePermission(request *CreateNetworkInterfacePermissionRequest) (_result *CreateNetworkInterfacePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkInterfacePermissionResponse{}
	_body, _err := client.CreateNetworkInterfacePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreatePhysicalConnectionWithOptions(request *CreatePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *CreatePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreatePhysicalConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreatePhysicalConnection"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreatePhysicalConnection(request *CreatePhysicalConnectionRequest) (_result *CreatePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePhysicalConnectionResponse{}
	_body, _err := client.CreatePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateResource02WithOptions(request *CreateResource02Request, runtime *util.RuntimeOptions) (_result *CreateResource02Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateResource02Response{}
	_body, _err := client.DoRPCRequest(tea.String("CreateResource02"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateResource02(request *CreateResource02Request) (_result *CreateResource02Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResource02Response{}
	_body, _err := client.CreateResource02WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRouteEntryWithOptions(request *CreateRouteEntryRequest, runtime *util.RuntimeOptions) (_result *CreateRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateRouteEntryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateRouteEntry"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRouteEntry(request *CreateRouteEntryRequest) (_result *CreateRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRouteEntryResponse{}
	_body, _err := client.CreateRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRouterInterfaceWithOptions(request *CreateRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *CreateRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateRouterInterfaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateRouterInterface"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRouterInterface(request *CreateRouterInterfaceRequest) (_result *CreateRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRouterInterfaceResponse{}
	_body, _err := client.CreateRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSecurityGroupWithOptions(request *CreateSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *CreateSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateSecurityGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateSecurityGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSecurityGroup(request *CreateSecurityGroupRequest) (_result *CreateSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSecurityGroupResponse{}
	_body, _err := client.CreateSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSimulatedSystemEventsWithOptions(request *CreateSimulatedSystemEventsRequest, runtime *util.RuntimeOptions) (_result *CreateSimulatedSystemEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateSimulatedSystemEventsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateSimulatedSystemEvents"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSimulatedSystemEvents(request *CreateSimulatedSystemEventsRequest) (_result *CreateSimulatedSystemEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSimulatedSystemEventsResponse{}
	_body, _err := client.CreateSimulatedSystemEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSnapshotWithOptions(request *CreateSnapshotRequest, runtime *util.RuntimeOptions) (_result *CreateSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateSnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateSnapshot"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSnapshot(request *CreateSnapshotRequest) (_result *CreateSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSnapshotResponse{}
	_body, _err := client.CreateSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateStorageSetWithOptions(request *CreateStorageSetRequest, runtime *util.RuntimeOptions) (_result *CreateStorageSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateStorageSetResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateStorageSet"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateStorageSet(request *CreateStorageSetRequest) (_result *CreateStorageSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStorageSetResponse{}
	_body, _err := client.CreateStorageSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVirtualBorderRouterWithOptions(request *CreateVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *CreateVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateVirtualBorderRouterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateVirtualBorderRouter"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVirtualBorderRouter(request *CreateVirtualBorderRouterRequest) (_result *CreateVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVirtualBorderRouterResponse{}
	_body, _err := client.CreateVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVpcWithOptions(request *CreateVpcRequest, runtime *util.RuntimeOptions) (_result *CreateVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateVpcResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateVpc"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVpc(request *CreateVpcRequest) (_result *CreateVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVpcResponse{}
	_body, _err := client.CreateVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVSwitchWithOptions(request *CreateVSwitchRequest, runtime *util.RuntimeOptions) (_result *CreateVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateVSwitchResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateVSwitch"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVSwitch(request *CreateVSwitchRequest) (_result *CreateVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVSwitchResponse{}
	_body, _err := client.CreateVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeactivateRouterInterfaceWithOptions(request *DeactivateRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *DeactivateRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeactivateRouterInterfaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeactivateRouterInterface"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeactivateRouterInterface(request *DeactivateRouterInterfaceRequest) (_result *DeactivateRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeactivateRouterInterfaceResponse{}
	_body, _err := client.DeactivateRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAutoProvisioningGroupWithOptions(request *DeleteAutoProvisioningGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteAutoProvisioningGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteAutoProvisioningGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteAutoProvisioningGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAutoProvisioningGroup(request *DeleteAutoProvisioningGroupRequest) (_result *DeleteAutoProvisioningGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAutoProvisioningGroupResponse{}
	_body, _err := client.DeleteAutoProvisioningGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAutoSnapshotPolicyWithOptions(request *DeleteAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *DeleteAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteAutoSnapshotPolicy"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAutoSnapshotPolicy(request *DeleteAutoSnapshotPolicyRequest) (_result *DeleteAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAutoSnapshotPolicyResponse{}
	_body, _err := client.DeleteAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBandwidthPackageWithOptions(request *DeleteBandwidthPackageRequest, runtime *util.RuntimeOptions) (_result *DeleteBandwidthPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteBandwidthPackageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteBandwidthPackage"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBandwidthPackage(request *DeleteBandwidthPackageRequest) (_result *DeleteBandwidthPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBandwidthPackageResponse{}
	_body, _err := client.DeleteBandwidthPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCommandWithOptions(request *DeleteCommandRequest, runtime *util.RuntimeOptions) (_result *DeleteCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCommandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCommand"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCommand(request *DeleteCommandRequest) (_result *DeleteCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCommandResponse{}
	_body, _err := client.DeleteCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDedicatedHostClusterWithOptions(request *DeleteDedicatedHostClusterRequest, runtime *util.RuntimeOptions) (_result *DeleteDedicatedHostClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDedicatedHostClusterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDedicatedHostCluster"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDedicatedHostCluster(request *DeleteDedicatedHostClusterRequest) (_result *DeleteDedicatedHostClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDedicatedHostClusterResponse{}
	_body, _err := client.DeleteDedicatedHostClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDemandWithOptions(request *DeleteDemandRequest, runtime *util.RuntimeOptions) (_result *DeleteDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDemandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDemand"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDemand(request *DeleteDemandRequest) (_result *DeleteDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDemandResponse{}
	_body, _err := client.DeleteDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeploymentSetWithOptions(request *DeleteDeploymentSetRequest, runtime *util.RuntimeOptions) (_result *DeleteDeploymentSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDeploymentSetResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDeploymentSet"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeploymentSet(request *DeleteDeploymentSetRequest) (_result *DeleteDeploymentSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeploymentSetResponse{}
	_body, _err := client.DeleteDeploymentSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDiskWithOptions(request *DeleteDiskRequest, runtime *util.RuntimeOptions) (_result *DeleteDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDiskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDisk"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDisk(request *DeleteDiskRequest) (_result *DeleteDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDiskResponse{}
	_body, _err := client.DeleteDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteForwardEntryWithOptions(request *DeleteForwardEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteForwardEntryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteForwardEntry"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteForwardEntry(request *DeleteForwardEntryRequest) (_result *DeleteForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteForwardEntryResponse{}
	_body, _err := client.DeleteForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHaVipWithOptions(request *DeleteHaVipRequest, runtime *util.RuntimeOptions) (_result *DeleteHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteHaVipResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteHaVip"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHaVip(request *DeleteHaVipRequest) (_result *DeleteHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHaVipResponse{}
	_body, _err := client.DeleteHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHpcClusterWithOptions(request *DeleteHpcClusterRequest, runtime *util.RuntimeOptions) (_result *DeleteHpcClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteHpcClusterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteHpcCluster"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHpcCluster(request *DeleteHpcClusterRequest) (_result *DeleteHpcClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHpcClusterResponse{}
	_body, _err := client.DeleteHpcClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteImageWithOptions(request *DeleteImageRequest, runtime *util.RuntimeOptions) (_result *DeleteImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteImageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteImage"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteImage(request *DeleteImageRequest) (_result *DeleteImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteImageResponse{}
	_body, _err := client.DeleteImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInstanceWithOptions(request *DeleteInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteInstance"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInstance(request *DeleteInstanceRequest) (_result *DeleteInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.DeleteInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInstancesWithOptions(request *DeleteInstancesRequest, runtime *util.RuntimeOptions) (_result *DeleteInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInstances(request *DeleteInstancesRequest) (_result *DeleteInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstancesResponse{}
	_body, _err := client.DeleteInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteKeyPairsWithOptions(request *DeleteKeyPairsRequest, runtime *util.RuntimeOptions) (_result *DeleteKeyPairsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteKeyPairsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteKeyPairs"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteKeyPairs(request *DeleteKeyPairsRequest) (_result *DeleteKeyPairsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteKeyPairsResponse{}
	_body, _err := client.DeleteKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLaunchTemplateWithOptions(request *DeleteLaunchTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteLaunchTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLaunchTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLaunchTemplate"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLaunchTemplate(request *DeleteLaunchTemplateRequest) (_result *DeleteLaunchTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLaunchTemplateResponse{}
	_body, _err := client.DeleteLaunchTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLaunchTemplateVersionWithOptions(request *DeleteLaunchTemplateVersionRequest, runtime *util.RuntimeOptions) (_result *DeleteLaunchTemplateVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLaunchTemplateVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLaunchTemplateVersion"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLaunchTemplateVersion(request *DeleteLaunchTemplateVersionRequest) (_result *DeleteLaunchTemplateVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLaunchTemplateVersionResponse{}
	_body, _err := client.DeleteLaunchTemplateVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNatGatewayWithOptions(request *DeleteNatGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteNatGatewayResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteNatGateway"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNatGateway(request *DeleteNatGatewayRequest) (_result *DeleteNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNatGatewayResponse{}
	_body, _err := client.DeleteNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkInterfaceWithOptions(request *DeleteNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteNetworkInterfaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteNetworkInterface"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetworkInterface(request *DeleteNetworkInterfaceRequest) (_result *DeleteNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkInterfaceResponse{}
	_body, _err := client.DeleteNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkInterfacePermissionWithOptions(request *DeleteNetworkInterfacePermissionRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkInterfacePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteNetworkInterfacePermissionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteNetworkInterfacePermission"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetworkInterfacePermission(request *DeleteNetworkInterfacePermissionRequest) (_result *DeleteNetworkInterfacePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkInterfacePermissionResponse{}
	_body, _err := client.DeleteNetworkInterfacePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePhysicalConnectionWithOptions(request *DeletePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *DeletePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeletePhysicalConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeletePhysicalConnection"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePhysicalConnection(request *DeletePhysicalConnectionRequest) (_result *DeletePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePhysicalConnectionResponse{}
	_body, _err := client.DeletePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRouteEntryWithOptions(request *DeleteRouteEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteRouteEntryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteRouteEntry"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRouteEntry(request *DeleteRouteEntryRequest) (_result *DeleteRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRouteEntryResponse{}
	_body, _err := client.DeleteRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRouterInterfaceWithOptions(request *DeleteRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *DeleteRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteRouterInterfaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteRouterInterface"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRouterInterface(request *DeleteRouterInterfaceRequest) (_result *DeleteRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRouterInterfaceResponse{}
	_body, _err := client.DeleteRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSecurityGroupWithOptions(request *DeleteSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteSecurityGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteSecurityGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSecurityGroup(request *DeleteSecurityGroupRequest) (_result *DeleteSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSecurityGroupResponse{}
	_body, _err := client.DeleteSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSnapshotWithOptions(request *DeleteSnapshotRequest, runtime *util.RuntimeOptions) (_result *DeleteSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteSnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteSnapshot"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSnapshot(request *DeleteSnapshotRequest) (_result *DeleteSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnapshotResponse{}
	_body, _err := client.DeleteSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteStorageSetWithOptions(request *DeleteStorageSetRequest, runtime *util.RuntimeOptions) (_result *DeleteStorageSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteStorageSetResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteStorageSet"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteStorageSet(request *DeleteStorageSetRequest) (_result *DeleteStorageSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStorageSetResponse{}
	_body, _err := client.DeleteStorageSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVirtualBorderRouterWithOptions(request *DeleteVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *DeleteVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteVirtualBorderRouterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteVirtualBorderRouter"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVirtualBorderRouter(request *DeleteVirtualBorderRouterRequest) (_result *DeleteVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVirtualBorderRouterResponse{}
	_body, _err := client.DeleteVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVpcWithOptions(request *DeleteVpcRequest, runtime *util.RuntimeOptions) (_result *DeleteVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteVpcResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteVpc"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVpc(request *DeleteVpcRequest) (_result *DeleteVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVpcResponse{}
	_body, _err := client.DeleteVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVSwitchWithOptions(request *DeleteVSwitchRequest, runtime *util.RuntimeOptions) (_result *DeleteVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteVSwitchResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteVSwitch"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVSwitch(request *DeleteVSwitchRequest) (_result *DeleteVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVSwitchResponse{}
	_body, _err := client.DeleteVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccessPointsWithOptions(request *DescribeAccessPointsRequest, runtime *util.RuntimeOptions) (_result *DescribeAccessPointsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAccessPointsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAccessPoints"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccessPoints(request *DescribeAccessPointsRequest) (_result *DescribeAccessPointsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccessPointsResponse{}
	_body, _err := client.DescribeAccessPointsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccountAttributesWithOptions(request *DescribeAccountAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAccountAttributesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAccountAttributes"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccountAttributes(request *DescribeAccountAttributesRequest) (_result *DescribeAccountAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountAttributesResponse{}
	_body, _err := client.DescribeAccountAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupHistoryWithOptions(request *DescribeAutoProvisioningGroupHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoProvisioningGroupHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAutoProvisioningGroupHistoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAutoProvisioningGroupHistory"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupHistory(request *DescribeAutoProvisioningGroupHistoryRequest) (_result *DescribeAutoProvisioningGroupHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoProvisioningGroupHistoryResponse{}
	_body, _err := client.DescribeAutoProvisioningGroupHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupInstancesWithOptions(request *DescribeAutoProvisioningGroupInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoProvisioningGroupInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAutoProvisioningGroupInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAutoProvisioningGroupInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupInstances(request *DescribeAutoProvisioningGroupInstancesRequest) (_result *DescribeAutoProvisioningGroupInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoProvisioningGroupInstancesResponse{}
	_body, _err := client.DescribeAutoProvisioningGroupInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupsWithOptions(request *DescribeAutoProvisioningGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoProvisioningGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAutoProvisioningGroupsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAutoProvisioningGroups"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroups(request *DescribeAutoProvisioningGroupsRequest) (_result *DescribeAutoProvisioningGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoProvisioningGroupsResponse{}
	_body, _err := client.DescribeAutoProvisioningGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoSnapshotPolicyExWithOptions(request *DescribeAutoSnapshotPolicyExRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoSnapshotPolicyExResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAutoSnapshotPolicyExResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAutoSnapshotPolicyEx"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoSnapshotPolicyEx(request *DescribeAutoSnapshotPolicyExRequest) (_result *DescribeAutoSnapshotPolicyExResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoSnapshotPolicyExResponse{}
	_body, _err := client.DescribeAutoSnapshotPolicyExWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableResourceWithOptions(request *DescribeAvailableResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAvailableResource"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableResource(request *DescribeAvailableResourceRequest) (_result *DescribeAvailableResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DescribeAvailableResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBandwidthLimitationWithOptions(request *DescribeBandwidthLimitationRequest, runtime *util.RuntimeOptions) (_result *DescribeBandwidthLimitationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBandwidthLimitationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBandwidthLimitation"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBandwidthLimitation(request *DescribeBandwidthLimitationRequest) (_result *DescribeBandwidthLimitationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandwidthLimitationResponse{}
	_body, _err := client.DescribeBandwidthLimitationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBandwidthPackagesWithOptions(request *DescribeBandwidthPackagesRequest, runtime *util.RuntimeOptions) (_result *DescribeBandwidthPackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBandwidthPackagesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBandwidthPackages"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBandwidthPackages(request *DescribeBandwidthPackagesRequest) (_result *DescribeBandwidthPackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandwidthPackagesResponse{}
	_body, _err := client.DescribeBandwidthPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCapacityReservationInstancesWithOptions(request *DescribeCapacityReservationInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeCapacityReservationInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCapacityReservationInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCapacityReservationInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCapacityReservationInstances(request *DescribeCapacityReservationInstancesRequest) (_result *DescribeCapacityReservationInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCapacityReservationInstancesResponse{}
	_body, _err := client.DescribeCapacityReservationInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCapacityReservationsWithOptions(request *DescribeCapacityReservationsRequest, runtime *util.RuntimeOptions) (_result *DescribeCapacityReservationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCapacityReservationsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCapacityReservations"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCapacityReservations(request *DescribeCapacityReservationsRequest) (_result *DescribeCapacityReservationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCapacityReservationsResponse{}
	_body, _err := client.DescribeCapacityReservationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClassicLinkInstancesWithOptions(request *DescribeClassicLinkInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeClassicLinkInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClassicLinkInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClassicLinkInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClassicLinkInstances(request *DescribeClassicLinkInstancesRequest) (_result *DescribeClassicLinkInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClassicLinkInstancesResponse{}
	_body, _err := client.DescribeClassicLinkInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCloudAssistantStatusWithOptions(request *DescribeCloudAssistantStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudAssistantStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCloudAssistantStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCloudAssistantStatus"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCloudAssistantStatus(request *DescribeCloudAssistantStatusRequest) (_result *DescribeCloudAssistantStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudAssistantStatusResponse{}
	_body, _err := client.DescribeCloudAssistantStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClustersWithOptions(request *DescribeClustersRequest, runtime *util.RuntimeOptions) (_result *DescribeClustersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClustersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusters"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusters(request *DescribeClustersRequest) (_result *DescribeClustersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClustersResponse{}
	_body, _err := client.DescribeClustersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCommandsWithOptions(request *DescribeCommandsRequest, runtime *util.RuntimeOptions) (_result *DescribeCommandsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCommandsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCommands"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCommands(request *DescribeCommandsRequest) (_result *DescribeCommandsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCommandsResponse{}
	_body, _err := client.DescribeCommandsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAutoRenewWithOptions(request *DescribeDedicatedHostAutoRenewRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostAutoRenewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDedicatedHostAutoRenewResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDedicatedHostAutoRenew"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAutoRenew(request *DescribeDedicatedHostAutoRenewRequest) (_result *DescribeDedicatedHostAutoRenewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostAutoRenewResponse{}
	_body, _err := client.DescribeDedicatedHostAutoRenewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostClustersWithOptions(request *DescribeDedicatedHostClustersRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostClustersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDedicatedHostClustersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDedicatedHostClusters"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostClusters(request *DescribeDedicatedHostClustersRequest) (_result *DescribeDedicatedHostClustersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostClustersResponse{}
	_body, _err := client.DescribeDedicatedHostClustersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostsWithOptions(request *DescribeDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDedicatedHosts"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHosts(request *DescribeDedicatedHostsRequest) (_result *DescribeDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.DescribeDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostTypesWithOptions(request *DescribeDedicatedHostTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDedicatedHostTypesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDedicatedHostTypes"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostTypes(request *DescribeDedicatedHostTypesRequest) (_result *DescribeDedicatedHostTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostTypesResponse{}
	_body, _err := client.DescribeDedicatedHostTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDemandsWithOptions(request *DescribeDemandsRequest, runtime *util.RuntimeOptions) (_result *DescribeDemandsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDemandsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDemands"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDemands(request *DescribeDemandsRequest) (_result *DescribeDemandsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDemandsResponse{}
	_body, _err := client.DescribeDemandsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDeploymentSetsWithOptions(request *DescribeDeploymentSetsRequest, runtime *util.RuntimeOptions) (_result *DescribeDeploymentSetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDeploymentSetsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDeploymentSets"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDeploymentSets(request *DescribeDeploymentSetsRequest) (_result *DescribeDeploymentSetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeploymentSetsResponse{}
	_body, _err := client.DescribeDeploymentSetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDeploymentSetSupportedInstanceTypeFamilyWithOptions(request *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest, runtime *util.RuntimeOptions) (_result *DescribeDeploymentSetSupportedInstanceTypeFamilyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDeploymentSetSupportedInstanceTypeFamilyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDeploymentSetSupportedInstanceTypeFamily"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDeploymentSetSupportedInstanceTypeFamily(request *DescribeDeploymentSetSupportedInstanceTypeFamilyRequest) (_result *DescribeDeploymentSetSupportedInstanceTypeFamilyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeploymentSetSupportedInstanceTypeFamilyResponse{}
	_body, _err := client.DescribeDeploymentSetSupportedInstanceTypeFamilyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiskMonitorDataWithOptions(request *DescribeDiskMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeDiskMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDiskMonitorDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDiskMonitorData"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiskMonitorData(request *DescribeDiskMonitorDataRequest) (_result *DescribeDiskMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiskMonitorDataResponse{}
	_body, _err := client.DescribeDiskMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDisksWithOptions(request *DescribeDisksRequest, runtime *util.RuntimeOptions) (_result *DescribeDisksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDisksResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDisks"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDisks(request *DescribeDisksRequest) (_result *DescribeDisksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDisksResponse{}
	_body, _err := client.DescribeDisksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDisksFullStatusWithOptions(request *DescribeDisksFullStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeDisksFullStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDisksFullStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDisksFullStatus"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDisksFullStatus(request *DescribeDisksFullStatusRequest) (_result *DescribeDisksFullStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDisksFullStatusResponse{}
	_body, _err := client.DescribeDisksFullStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEipAddressesWithOptions(request *DescribeEipAddressesRequest, runtime *util.RuntimeOptions) (_result *DescribeEipAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeEipAddressesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeEipAddresses"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEipAddresses(request *DescribeEipAddressesRequest) (_result *DescribeEipAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEipAddressesResponse{}
	_body, _err := client.DescribeEipAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEipMonitorDataWithOptions(request *DescribeEipMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeEipMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeEipMonitorDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeEipMonitorData"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEipMonitorData(request *DescribeEipMonitorDataRequest) (_result *DescribeEipMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEipMonitorDataResponse{}
	_body, _err := client.DescribeEipMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeElasticityAssuranceInstancesWithOptions(request *DescribeElasticityAssuranceInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeElasticityAssuranceInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeElasticityAssuranceInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeElasticityAssuranceInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeElasticityAssuranceInstances(request *DescribeElasticityAssuranceInstancesRequest) (_result *DescribeElasticityAssuranceInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeElasticityAssuranceInstancesResponse{}
	_body, _err := client.DescribeElasticityAssuranceInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeElasticityAssurancesWithOptions(request *DescribeElasticityAssurancesRequest, runtime *util.RuntimeOptions) (_result *DescribeElasticityAssurancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeElasticityAssurancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeElasticityAssurances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeElasticityAssurances(request *DescribeElasticityAssurancesRequest) (_result *DescribeElasticityAssurancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeElasticityAssurancesResponse{}
	_body, _err := client.DescribeElasticityAssurancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEniMonitorDataWithOptions(request *DescribeEniMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeEniMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeEniMonitorDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeEniMonitorData"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEniMonitorData(request *DescribeEniMonitorDataRequest) (_result *DescribeEniMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEniMonitorDataResponse{}
	_body, _err := client.DescribeEniMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeForwardTableEntriesWithOptions(request *DescribeForwardTableEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeForwardTableEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeForwardTableEntriesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeForwardTableEntries"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeForwardTableEntries(request *DescribeForwardTableEntriesRequest) (_result *DescribeForwardTableEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeForwardTableEntriesResponse{}
	_body, _err := client.DescribeForwardTableEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHaVipsWithOptions(request *DescribeHaVipsRequest, runtime *util.RuntimeOptions) (_result *DescribeHaVipsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeHaVipsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeHaVips"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHaVips(request *DescribeHaVipsRequest) (_result *DescribeHaVipsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHaVipsResponse{}
	_body, _err := client.DescribeHaVipsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHpcClustersWithOptions(request *DescribeHpcClustersRequest, runtime *util.RuntimeOptions) (_result *DescribeHpcClustersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeHpcClustersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeHpcClusters"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHpcClusters(request *DescribeHpcClustersRequest) (_result *DescribeHpcClustersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHpcClustersResponse{}
	_body, _err := client.DescribeHpcClustersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageFromFamilyWithOptions(request *DescribeImageFromFamilyRequest, runtime *util.RuntimeOptions) (_result *DescribeImageFromFamilyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeImageFromFamilyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeImageFromFamily"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageFromFamily(request *DescribeImageFromFamilyRequest) (_result *DescribeImageFromFamilyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageFromFamilyResponse{}
	_body, _err := client.DescribeImageFromFamilyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImagesWithOptions(request *DescribeImagesRequest, runtime *util.RuntimeOptions) (_result *DescribeImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeImagesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeImages"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImages(request *DescribeImagesRequest) (_result *DescribeImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImagesResponse{}
	_body, _err := client.DescribeImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageSharePermissionWithOptions(request *DescribeImageSharePermissionRequest, runtime *util.RuntimeOptions) (_result *DescribeImageSharePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeImageSharePermissionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeImageSharePermission"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageSharePermission(request *DescribeImageSharePermissionRequest) (_result *DescribeImageSharePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageSharePermissionResponse{}
	_body, _err := client.DescribeImageSharePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageSupportInstanceTypesWithOptions(request *DescribeImageSupportInstanceTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeImageSupportInstanceTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeImageSupportInstanceTypesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeImageSupportInstanceTypes"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageSupportInstanceTypes(request *DescribeImageSupportInstanceTypesRequest) (_result *DescribeImageSupportInstanceTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageSupportInstanceTypesResponse{}
	_body, _err := client.DescribeImageSupportInstanceTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAttachmentAttributesWithOptions(request *DescribeInstanceAttachmentAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAttachmentAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceAttachmentAttributesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceAttachmentAttributes"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAttachmentAttributes(request *DescribeInstanceAttachmentAttributesRequest) (_result *DescribeInstanceAttachmentAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAttachmentAttributesResponse{}
	_body, _err := client.DescribeInstanceAttachmentAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAttributeWithOptions(request *DescribeInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAttribute(request *DescribeInstanceAttributeRequest) (_result *DescribeInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAttributeResponse{}
	_body, _err := client.DescribeInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewAttributeWithOptions(request *DescribeInstanceAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceAutoRenewAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewAttribute(request *DescribeInstanceAutoRenewAttributeRequest) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DescribeInstanceAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceHistoryEventsWithOptions(request *DescribeInstanceHistoryEventsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceHistoryEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceHistoryEventsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceHistoryEvents"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceHistoryEvents(request *DescribeInstanceHistoryEventsRequest) (_result *DescribeInstanceHistoryEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceHistoryEventsResponse{}
	_body, _err := client.DescribeInstanceHistoryEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceMaintenanceAttributesWithOptions(request *DescribeInstanceMaintenanceAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceMaintenanceAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceMaintenanceAttributesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceMaintenanceAttributes"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceMaintenanceAttributes(request *DescribeInstanceMaintenanceAttributesRequest) (_result *DescribeInstanceMaintenanceAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceMaintenanceAttributesResponse{}
	_body, _err := client.DescribeInstanceMaintenanceAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceMonitorDataWithOptions(request *DescribeInstanceMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceMonitorDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceMonitorData"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceMonitorData(request *DescribeInstanceMonitorDataRequest) (_result *DescribeInstanceMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceMonitorDataResponse{}
	_body, _err := client.DescribeInstanceMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceRamRoleWithOptions(request *DescribeInstanceRamRoleRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceRamRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceRamRoleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceRamRole"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceRamRole(request *DescribeInstanceRamRoleRequest) (_result *DescribeInstanceRamRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceRamRoleResponse{}
	_body, _err := client.DescribeInstanceRamRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstancesWithOptions(request *DescribeInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstances(request *DescribeInstancesRequest) (_result *DescribeInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DescribeInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstancesFullStatusWithOptions(request *DescribeInstancesFullStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesFullStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstancesFullStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstancesFullStatus"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstancesFullStatus(request *DescribeInstancesFullStatusRequest) (_result *DescribeInstancesFullStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesFullStatusResponse{}
	_body, _err := client.DescribeInstancesFullStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceStatusWithOptions(request *DescribeInstanceStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceStatus"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceStatus(request *DescribeInstanceStatusRequest) (_result *DescribeInstanceStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceStatusResponse{}
	_body, _err := client.DescribeInstanceStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTopologyWithOptions(request *DescribeInstanceTopologyRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceTopologyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceTopology"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTopology(request *DescribeInstanceTopologyRequest) (_result *DescribeInstanceTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTopologyResponse{}
	_body, _err := client.DescribeInstanceTopologyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTypeFamiliesWithOptions(request *DescribeInstanceTypeFamiliesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTypeFamiliesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceTypeFamiliesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceTypeFamilies"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTypeFamilies(request *DescribeInstanceTypeFamiliesRequest) (_result *DescribeInstanceTypeFamiliesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTypeFamiliesResponse{}
	_body, _err := client.DescribeInstanceTypeFamiliesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTypesWithOptions(request *DescribeInstanceTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceTypesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceTypes"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTypes(request *DescribeInstanceTypesRequest) (_result *DescribeInstanceTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTypesResponse{}
	_body, _err := client.DescribeInstanceTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceVncPasswdWithOptions(request *DescribeInstanceVncPasswdRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceVncPasswdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceVncPasswdResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceVncPasswd"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceVncPasswd(request *DescribeInstanceVncPasswdRequest) (_result *DescribeInstanceVncPasswdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceVncPasswdResponse{}
	_body, _err := client.DescribeInstanceVncPasswdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceVncUrlWithOptions(request *DescribeInstanceVncUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceVncUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceVncUrlResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceVncUrl"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceVncUrl(request *DescribeInstanceVncUrlRequest) (_result *DescribeInstanceVncUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceVncUrlResponse{}
	_body, _err := client.DescribeInstanceVncUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInvocationResultsWithOptions(request *DescribeInvocationResultsRequest, runtime *util.RuntimeOptions) (_result *DescribeInvocationResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInvocationResultsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInvocationResults"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInvocationResults(request *DescribeInvocationResultsRequest) (_result *DescribeInvocationResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInvocationResultsResponse{}
	_body, _err := client.DescribeInvocationResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInvocationsWithOptions(request *DescribeInvocationsRequest, runtime *util.RuntimeOptions) (_result *DescribeInvocationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInvocationsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInvocations"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInvocations(request *DescribeInvocationsRequest) (_result *DescribeInvocationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInvocationsResponse{}
	_body, _err := client.DescribeInvocationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeKeyPairsWithOptions(request *DescribeKeyPairsRequest, runtime *util.RuntimeOptions) (_result *DescribeKeyPairsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeKeyPairsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeKeyPairs"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeKeyPairs(request *DescribeKeyPairsRequest) (_result *DescribeKeyPairsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeKeyPairsResponse{}
	_body, _err := client.DescribeKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLaunchTemplatesWithOptions(request *DescribeLaunchTemplatesRequest, runtime *util.RuntimeOptions) (_result *DescribeLaunchTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLaunchTemplatesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLaunchTemplates"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLaunchTemplates(request *DescribeLaunchTemplatesRequest) (_result *DescribeLaunchTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLaunchTemplatesResponse{}
	_body, _err := client.DescribeLaunchTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLaunchTemplateVersionsWithOptions(request *DescribeLaunchTemplateVersionsRequest, runtime *util.RuntimeOptions) (_result *DescribeLaunchTemplateVersionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLaunchTemplateVersionsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLaunchTemplateVersions"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLaunchTemplateVersions(request *DescribeLaunchTemplateVersionsRequest) (_result *DescribeLaunchTemplateVersionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLaunchTemplateVersionsResponse{}
	_body, _err := client.DescribeLaunchTemplateVersionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLimitationWithOptions(request *DescribeLimitationRequest, runtime *util.RuntimeOptions) (_result *DescribeLimitationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLimitationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLimitation"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLimitation(request *DescribeLimitationRequest) (_result *DescribeLimitationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLimitationResponse{}
	_body, _err := client.DescribeLimitationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNatGatewaysWithOptions(request *DescribeNatGatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeNatGatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeNatGatewaysResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeNatGateways"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNatGateways(request *DescribeNatGatewaysRequest) (_result *DescribeNatGatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNatGatewaysResponse{}
	_body, _err := client.DescribeNatGatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkInterfaceAttributeWithOptions(request *DescribeNetworkInterfaceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInterfaceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeNetworkInterfaceAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeNetworkInterfaceAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInterfaceAttribute(request *DescribeNetworkInterfaceAttributeRequest) (_result *DescribeNetworkInterfaceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInterfaceAttributeResponse{}
	_body, _err := client.DescribeNetworkInterfaceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkInterfacePermissionsWithOptions(request *DescribeNetworkInterfacePermissionsRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInterfacePermissionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeNetworkInterfacePermissionsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeNetworkInterfacePermissions"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInterfacePermissions(request *DescribeNetworkInterfacePermissionsRequest) (_result *DescribeNetworkInterfacePermissionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInterfacePermissionsResponse{}
	_body, _err := client.DescribeNetworkInterfacePermissionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkInterfacesWithOptions(request *DescribeNetworkInterfacesRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInterfacesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeNetworkInterfacesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeNetworkInterfaces"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInterfaces(request *DescribeNetworkInterfacesRequest) (_result *DescribeNetworkInterfacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInterfacesResponse{}
	_body, _err := client.DescribeNetworkInterfacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNewProjectEipMonitorDataWithOptions(request *DescribeNewProjectEipMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeNewProjectEipMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeNewProjectEipMonitorDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeNewProjectEipMonitorData"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNewProjectEipMonitorData(request *DescribeNewProjectEipMonitorDataRequest) (_result *DescribeNewProjectEipMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNewProjectEipMonitorDataResponse{}
	_body, _err := client.DescribeNewProjectEipMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePhysicalConnectionsWithOptions(request *DescribePhysicalConnectionsRequest, runtime *util.RuntimeOptions) (_result *DescribePhysicalConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribePhysicalConnectionsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribePhysicalConnections"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePhysicalConnections(request *DescribePhysicalConnectionsRequest) (_result *DescribePhysicalConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePhysicalConnectionsResponse{}
	_body, _err := client.DescribePhysicalConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePriceWithOptions(request *DescribePriceRequest, runtime *util.RuntimeOptions) (_result *DescribePriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribePriceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribePrice"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePrice(request *DescribePriceRequest) (_result *DescribePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceResponse{}
	_body, _err := client.DescribePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRecommendInstanceTypeWithOptions(request *DescribeRecommendInstanceTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeRecommendInstanceTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRecommendInstanceTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRecommendInstanceType"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRecommendInstanceType(request *DescribeRecommendInstanceTypeRequest) (_result *DescribeRecommendInstanceTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecommendInstanceTypeResponse{}
	_body, _err := client.DescribeRecommendInstanceTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRegions"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRenewalPriceWithOptions(request *DescribeRenewalPriceRequest, runtime *util.RuntimeOptions) (_result *DescribeRenewalPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRenewalPrice"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRenewalPrice(request *DescribeRenewalPriceRequest) (_result *DescribeRenewalPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.DescribeRenewalPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReservedInstancesWithOptions(request *DescribeReservedInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeReservedInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeReservedInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeReservedInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReservedInstances(request *DescribeReservedInstancesRequest) (_result *DescribeReservedInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservedInstancesResponse{}
	_body, _err := client.DescribeReservedInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceByTagsWithOptions(request *DescribeResourceByTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceByTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeResourceByTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeResourceByTags"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceByTags(request *DescribeResourceByTagsRequest) (_result *DescribeResourceByTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceByTagsResponse{}
	_body, _err := client.DescribeResourceByTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourcesModificationWithOptions(request *DescribeResourcesModificationRequest, runtime *util.RuntimeOptions) (_result *DescribeResourcesModificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeResourcesModificationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeResourcesModification"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourcesModification(request *DescribeResourcesModificationRequest) (_result *DescribeResourcesModificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourcesModificationResponse{}
	_body, _err := client.DescribeResourcesModificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouterInterfacesWithOptions(request *DescribeRouterInterfacesRequest, runtime *util.RuntimeOptions) (_result *DescribeRouterInterfacesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRouterInterfacesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRouterInterfaces"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouterInterfaces(request *DescribeRouterInterfacesRequest) (_result *DescribeRouterInterfacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouterInterfacesResponse{}
	_body, _err := client.DescribeRouterInterfacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouteTablesWithOptions(request *DescribeRouteTablesRequest, runtime *util.RuntimeOptions) (_result *DescribeRouteTablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRouteTablesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRouteTables"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouteTables(request *DescribeRouteTablesRequest) (_result *DescribeRouteTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouteTablesResponse{}
	_body, _err := client.DescribeRouteTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupAttributeWithOptions(request *DescribeSecurityGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSecurityGroupAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSecurityGroupAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroupAttribute(request *DescribeSecurityGroupAttributeRequest) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupAttributeResponse{}
	_body, _err := client.DescribeSecurityGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupReferencesWithOptions(request *DescribeSecurityGroupReferencesRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupReferencesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSecurityGroupReferencesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSecurityGroupReferences"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroupReferences(request *DescribeSecurityGroupReferencesRequest) (_result *DescribeSecurityGroupReferencesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupReferencesResponse{}
	_body, _err := client.DescribeSecurityGroupReferencesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupsWithOptions(request *DescribeSecurityGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSecurityGroupsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSecurityGroups"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroups(request *DescribeSecurityGroupsRequest) (_result *DescribeSecurityGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupsResponse{}
	_body, _err := client.DescribeSecurityGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSendFileResultsWithOptions(request *DescribeSendFileResultsRequest, runtime *util.RuntimeOptions) (_result *DescribeSendFileResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSendFileResultsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSendFileResults"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSendFileResults(request *DescribeSendFileResultsRequest) (_result *DescribeSendFileResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSendFileResultsResponse{}
	_body, _err := client.DescribeSendFileResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotLinksWithOptions(request *DescribeSnapshotLinksRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotLinksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSnapshotLinksResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSnapshotLinks"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshotLinks(request *DescribeSnapshotLinksRequest) (_result *DescribeSnapshotLinksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotLinksResponse{}
	_body, _err := client.DescribeSnapshotLinksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotMonitorDataWithOptions(request *DescribeSnapshotMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSnapshotMonitorDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSnapshotMonitorData"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshotMonitorData(request *DescribeSnapshotMonitorDataRequest) (_result *DescribeSnapshotMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotMonitorDataResponse{}
	_body, _err := client.DescribeSnapshotMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotPackageWithOptions(request *DescribeSnapshotPackageRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSnapshotPackageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSnapshotPackage"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshotPackage(request *DescribeSnapshotPackageRequest) (_result *DescribeSnapshotPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotPackageResponse{}
	_body, _err := client.DescribeSnapshotPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotsWithOptions(request *DescribeSnapshotsRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSnapshots"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshots(request *DescribeSnapshotsRequest) (_result *DescribeSnapshotsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.DescribeSnapshotsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotsUsageWithOptions(request *DescribeSnapshotsUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotsUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSnapshotsUsageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSnapshotsUsage"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshotsUsage(request *DescribeSnapshotsUsageRequest) (_result *DescribeSnapshotsUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotsUsageResponse{}
	_body, _err := client.DescribeSnapshotsUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSpotAdviceWithOptions(request *DescribeSpotAdviceRequest, runtime *util.RuntimeOptions) (_result *DescribeSpotAdviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSpotAdviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSpotAdvice"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSpotAdvice(request *DescribeSpotAdviceRequest) (_result *DescribeSpotAdviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSpotAdviceResponse{}
	_body, _err := client.DescribeSpotAdviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSpotPriceHistoryWithOptions(request *DescribeSpotPriceHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeSpotPriceHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSpotPriceHistoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSpotPriceHistory"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSpotPriceHistory(request *DescribeSpotPriceHistoryRequest) (_result *DescribeSpotPriceHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSpotPriceHistoryResponse{}
	_body, _err := client.DescribeSpotPriceHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageCapacityUnitsWithOptions(request *DescribeStorageCapacityUnitsRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageCapacityUnitsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeStorageCapacityUnitsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeStorageCapacityUnits"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageCapacityUnits(request *DescribeStorageCapacityUnitsRequest) (_result *DescribeStorageCapacityUnitsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageCapacityUnitsResponse{}
	_body, _err := client.DescribeStorageCapacityUnitsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageSetDetailsWithOptions(request *DescribeStorageSetDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageSetDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeStorageSetDetailsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeStorageSetDetails"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageSetDetails(request *DescribeStorageSetDetailsRequest) (_result *DescribeStorageSetDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageSetDetailsResponse{}
	_body, _err := client.DescribeStorageSetDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageSetsWithOptions(request *DescribeStorageSetsRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageSetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeStorageSetsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeStorageSets"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageSets(request *DescribeStorageSetsRequest) (_result *DescribeStorageSetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageSetsResponse{}
	_body, _err := client.DescribeStorageSetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTagsWithOptions(request *DescribeTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeTags"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTags(request *DescribeTagsRequest) (_result *DescribeTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsResponse{}
	_body, _err := client.DescribeTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTaskAttributeWithOptions(request *DescribeTaskAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeTaskAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeTaskAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeTaskAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTaskAttribute(request *DescribeTaskAttributeRequest) (_result *DescribeTaskAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTaskAttributeResponse{}
	_body, _err := client.DescribeTaskAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTasksWithOptions(request *DescribeTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeTasksResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeTasks"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTasks(request *DescribeTasksRequest) (_result *DescribeTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTasksResponse{}
	_body, _err := client.DescribeTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserBusinessBehaviorWithOptions(request *DescribeUserBusinessBehaviorRequest, runtime *util.RuntimeOptions) (_result *DescribeUserBusinessBehaviorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeUserBusinessBehaviorResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeUserBusinessBehavior"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserBusinessBehavior(request *DescribeUserBusinessBehaviorRequest) (_result *DescribeUserBusinessBehaviorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserBusinessBehaviorResponse{}
	_body, _err := client.DescribeUserBusinessBehaviorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserDataWithOptions(request *DescribeUserDataRequest, runtime *util.RuntimeOptions) (_result *DescribeUserDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeUserDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeUserData"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserData(request *DescribeUserDataRequest) (_result *DescribeUserDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserDataResponse{}
	_body, _err := client.DescribeUserDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRoutersWithOptions(request *DescribeVirtualBorderRoutersRequest, runtime *util.RuntimeOptions) (_result *DescribeVirtualBorderRoutersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeVirtualBorderRoutersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeVirtualBorderRouters"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRouters(request *DescribeVirtualBorderRoutersRequest) (_result *DescribeVirtualBorderRoutersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVirtualBorderRoutersResponse{}
	_body, _err := client.DescribeVirtualBorderRoutersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRoutersForPhysicalConnectionWithOptions(request *DescribeVirtualBorderRoutersForPhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *DescribeVirtualBorderRoutersForPhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeVirtualBorderRoutersForPhysicalConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeVirtualBorderRoutersForPhysicalConnection"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRoutersForPhysicalConnection(request *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) (_result *DescribeVirtualBorderRoutersForPhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVirtualBorderRoutersForPhysicalConnectionResponse{}
	_body, _err := client.DescribeVirtualBorderRoutersForPhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpcsWithOptions(request *DescribeVpcsRequest, runtime *util.RuntimeOptions) (_result *DescribeVpcsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeVpcsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeVpcs"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpcs(request *DescribeVpcsRequest) (_result *DescribeVpcsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcsResponse{}
	_body, _err := client.DescribeVpcsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVRoutersWithOptions(request *DescribeVRoutersRequest, runtime *util.RuntimeOptions) (_result *DescribeVRoutersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeVRoutersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeVRouters"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVRouters(request *DescribeVRoutersRequest) (_result *DescribeVRoutersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVRoutersResponse{}
	_body, _err := client.DescribeVRoutersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVSwitchesWithOptions(request *DescribeVSwitchesRequest, runtime *util.RuntimeOptions) (_result *DescribeVSwitchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeVSwitchesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeVSwitches"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVSwitches(request *DescribeVSwitchesRequest) (_result *DescribeVSwitchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVSwitchesResponse{}
	_body, _err := client.DescribeVSwitchesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeZonesWithOptions(request *DescribeZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeZones"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeZones(request *DescribeZonesRequest) (_result *DescribeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DescribeZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachClassicLinkVpcWithOptions(request *DetachClassicLinkVpcRequest, runtime *util.RuntimeOptions) (_result *DetachClassicLinkVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DetachClassicLinkVpcResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DetachClassicLinkVpc"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachClassicLinkVpc(request *DetachClassicLinkVpcRequest) (_result *DetachClassicLinkVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachClassicLinkVpcResponse{}
	_body, _err := client.DetachClassicLinkVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachDiskWithOptions(request *DetachDiskRequest, runtime *util.RuntimeOptions) (_result *DetachDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DetachDiskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DetachDisk"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachDisk(request *DetachDiskRequest) (_result *DetachDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachDiskResponse{}
	_body, _err := client.DetachDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachInstanceRamRoleWithOptions(request *DetachInstanceRamRoleRequest, runtime *util.RuntimeOptions) (_result *DetachInstanceRamRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DetachInstanceRamRoleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DetachInstanceRamRole"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachInstanceRamRole(request *DetachInstanceRamRoleRequest) (_result *DetachInstanceRamRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachInstanceRamRoleResponse{}
	_body, _err := client.DetachInstanceRamRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachKeyPairWithOptions(request *DetachKeyPairRequest, runtime *util.RuntimeOptions) (_result *DetachKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DetachKeyPairResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DetachKeyPair"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachKeyPair(request *DetachKeyPairRequest) (_result *DetachKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachKeyPairResponse{}
	_body, _err := client.DetachKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachNetworkInterfaceWithOptions(request *DetachNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *DetachNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DetachNetworkInterfaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DetachNetworkInterface"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachNetworkInterface(request *DetachNetworkInterfaceRequest) (_result *DetachNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachNetworkInterfaceResponse{}
	_body, _err := client.DetachNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EipFillParamsWithOptions(request *EipFillParamsRequest, runtime *util.RuntimeOptions) (_result *EipFillParamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EipFillParamsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EipFillParams"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EipFillParams(request *EipFillParamsRequest) (_result *EipFillParamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EipFillParamsResponse{}
	_body, _err := client.EipFillParamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EipFillProductWithOptions(request *EipFillProductRequest, runtime *util.RuntimeOptions) (_result *EipFillProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EipFillProductResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EipFillProduct"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EipFillProduct(request *EipFillProductRequest) (_result *EipFillProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EipFillProductResponse{}
	_body, _err := client.EipFillProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EipNotifyPaidWithOptions(request *EipNotifyPaidRequest, runtime *util.RuntimeOptions) (_result *EipNotifyPaidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EipNotifyPaidResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EipNotifyPaid"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EipNotifyPaid(request *EipNotifyPaidRequest) (_result *EipNotifyPaidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EipNotifyPaidResponse{}
	_body, _err := client.EipNotifyPaidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnablePhysicalConnectionWithOptions(request *EnablePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *EnablePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EnablePhysicalConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EnablePhysicalConnection"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnablePhysicalConnection(request *EnablePhysicalConnectionRequest) (_result *EnablePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnablePhysicalConnectionResponse{}
	_body, _err := client.EnablePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportImageWithOptions(request *ExportImageRequest, runtime *util.RuntimeOptions) (_result *ExportImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ExportImageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ExportImage"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportImage(request *ExportImageRequest) (_result *ExportImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportImageResponse{}
	_body, _err := client.ExportImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportSnapshotWithOptions(request *ExportSnapshotRequest, runtime *util.RuntimeOptions) (_result *ExportSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ExportSnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ExportSnapshot"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportSnapshot(request *ExportSnapshotRequest) (_result *ExportSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportSnapshotResponse{}
	_body, _err := client.ExportSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceConsoleOutputWithOptions(request *GetInstanceConsoleOutputRequest, runtime *util.RuntimeOptions) (_result *GetInstanceConsoleOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetInstanceConsoleOutputResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetInstanceConsoleOutput"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceConsoleOutput(request *GetInstanceConsoleOutputRequest) (_result *GetInstanceConsoleOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceConsoleOutputResponse{}
	_body, _err := client.GetInstanceConsoleOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceScreenshotWithOptions(request *GetInstanceScreenshotRequest, runtime *util.RuntimeOptions) (_result *GetInstanceScreenshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetInstanceScreenshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetInstanceScreenshot"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceScreenshot(request *GetInstanceScreenshotRequest) (_result *GetInstanceScreenshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceScreenshotResponse{}
	_body, _err := client.GetInstanceScreenshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportImageWithOptions(request *ImportImageRequest, runtime *util.RuntimeOptions) (_result *ImportImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ImportImageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ImportImage"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportImage(request *ImportImageRequest) (_result *ImportImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportImageResponse{}
	_body, _err := client.ImportImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportKeyPairWithOptions(request *ImportKeyPairRequest, runtime *util.RuntimeOptions) (_result *ImportKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ImportKeyPairResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ImportKeyPair"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportKeyPair(request *ImportKeyPairRequest) (_result *ImportKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportKeyPairResponse{}
	_body, _err := client.ImportKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportSnapshotWithOptions(request *ImportSnapshotRequest, runtime *util.RuntimeOptions) (_result *ImportSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ImportSnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ImportSnapshot"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportSnapshot(request *ImportSnapshotRequest) (_result *ImportSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportSnapshotResponse{}
	_body, _err := client.ImportSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InstallCloudAssistantWithOptions(request *InstallCloudAssistantRequest, runtime *util.RuntimeOptions) (_result *InstallCloudAssistantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &InstallCloudAssistantResponse{}
	_body, _err := client.DoRPCRequest(tea.String("InstallCloudAssistant"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InstallCloudAssistant(request *InstallCloudAssistantRequest) (_result *InstallCloudAssistantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallCloudAssistantResponse{}
	_body, _err := client.InstallCloudAssistantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvokeCommandWithOptions(tmpReq *InvokeCommandRequest, runtime *util.RuntimeOptions) (_result *InvokeCommandResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InvokeCommandShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Parameters)) {
		request.ParametersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Parameters, tea.String("Parameters"), tea.String("json"))
	}

	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &InvokeCommandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("InvokeCommand"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvokeCommand(request *InvokeCommandRequest) (_result *InvokeCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InvokeCommandResponse{}
	_body, _err := client.InvokeCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinResourceGroupWithOptions(request *JoinResourceGroupRequest, runtime *util.RuntimeOptions) (_result *JoinResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &JoinResourceGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("JoinResourceGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinResourceGroup(request *JoinResourceGroupRequest) (_result *JoinResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinResourceGroupResponse{}
	_body, _err := client.JoinResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinSecurityGroupWithOptions(request *JoinSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *JoinSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &JoinSecurityGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("JoinSecurityGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinSecurityGroup(request *JoinSecurityGroupRequest) (_result *JoinSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinSecurityGroupResponse{}
	_body, _err := client.JoinSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LeaveSecurityGroupWithOptions(request *LeaveSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *LeaveSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &LeaveSecurityGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("LeaveSecurityGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LeaveSecurityGroup(request *LeaveSecurityGroupRequest) (_result *LeaveSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LeaveSecurityGroupResponse{}
	_body, _err := client.LeaveSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListTagResources"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAutoProvisioningGroupWithOptions(request *ModifyAutoProvisioningGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoProvisioningGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyAutoProvisioningGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyAutoProvisioningGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAutoProvisioningGroup(request *ModifyAutoProvisioningGroupRequest) (_result *ModifyAutoProvisioningGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoProvisioningGroupResponse{}
	_body, _err := client.ModifyAutoProvisioningGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAutoSnapshotPolicyWithOptions(request *ModifyAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyAutoSnapshotPolicy"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAutoSnapshotPolicy(request *ModifyAutoSnapshotPolicyRequest) (_result *ModifyAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoSnapshotPolicyResponse{}
	_body, _err := client.ModifyAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAutoSnapshotPolicyExWithOptions(request *ModifyAutoSnapshotPolicyExRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoSnapshotPolicyExResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyAutoSnapshotPolicyExResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyAutoSnapshotPolicyEx"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAutoSnapshotPolicyEx(request *ModifyAutoSnapshotPolicyExRequest) (_result *ModifyAutoSnapshotPolicyExResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoSnapshotPolicyExResponse{}
	_body, _err := client.ModifyAutoSnapshotPolicyExWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBandwidthPackageSpecWithOptions(request *ModifyBandwidthPackageSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyBandwidthPackageSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyBandwidthPackageSpecResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyBandwidthPackageSpec"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBandwidthPackageSpec(request *ModifyBandwidthPackageSpecRequest) (_result *ModifyBandwidthPackageSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBandwidthPackageSpecResponse{}
	_body, _err := client.ModifyBandwidthPackageSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCommandWithOptions(request *ModifyCommandRequest, runtime *util.RuntimeOptions) (_result *ModifyCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyCommandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyCommand"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCommand(request *ModifyCommandRequest) (_result *ModifyCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCommandResponse{}
	_body, _err := client.ModifyCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttributeWithOptions(request *ModifyDedicatedHostAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDedicatedHostAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttribute(request *ModifyDedicatedHostAttributeRequest) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoReleaseTimeWithOptions(request *ModifyDedicatedHostAutoReleaseTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAutoReleaseTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDedicatedHostAutoReleaseTimeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDedicatedHostAutoReleaseTime"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoReleaseTime(request *ModifyDedicatedHostAutoReleaseTimeRequest) (_result *ModifyDedicatedHostAutoReleaseTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAutoReleaseTimeResponse{}
	_body, _err := client.ModifyDedicatedHostAutoReleaseTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoRenewAttributeWithOptions(request *ModifyDedicatedHostAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDedicatedHostAutoRenewAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDedicatedHostAutoRenewAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoRenewAttribute(request *ModifyDedicatedHostAutoRenewAttributeRequest) (_result *ModifyDedicatedHostAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAutoRenewAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostClusterAttributeWithOptions(request *ModifyDedicatedHostClusterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostClusterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDedicatedHostClusterAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDedicatedHostClusterAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostClusterAttribute(request *ModifyDedicatedHostClusterAttributeRequest) (_result *ModifyDedicatedHostClusterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostClusterAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostClusterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostsChargeTypeWithOptions(request *ModifyDedicatedHostsChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostsChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDedicatedHostsChargeTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDedicatedHostsChargeType"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostsChargeType(request *ModifyDedicatedHostsChargeTypeRequest) (_result *ModifyDedicatedHostsChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostsChargeTypeResponse{}
	_body, _err := client.ModifyDedicatedHostsChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDemandWithOptions(request *ModifyDemandRequest, runtime *util.RuntimeOptions) (_result *ModifyDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDemandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDemand"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDemand(request *ModifyDemandRequest) (_result *ModifyDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDemandResponse{}
	_body, _err := client.ModifyDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDeploymentSetAttributeWithOptions(request *ModifyDeploymentSetAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDeploymentSetAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDeploymentSetAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDeploymentSetAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDeploymentSetAttribute(request *ModifyDeploymentSetAttributeRequest) (_result *ModifyDeploymentSetAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDeploymentSetAttributeResponse{}
	_body, _err := client.ModifyDeploymentSetAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDiskAttributeWithOptions(request *ModifyDiskAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDiskAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDiskAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDiskAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDiskAttribute(request *ModifyDiskAttributeRequest) (_result *ModifyDiskAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDiskAttributeResponse{}
	_body, _err := client.ModifyDiskAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDiskChargeTypeWithOptions(request *ModifyDiskChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDiskChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDiskChargeTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDiskChargeType"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDiskChargeType(request *ModifyDiskChargeTypeRequest) (_result *ModifyDiskChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDiskChargeTypeResponse{}
	_body, _err := client.ModifyDiskChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDiskSpecWithOptions(request *ModifyDiskSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyDiskSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDiskSpecResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDiskSpec"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDiskSpec(request *ModifyDiskSpecRequest) (_result *ModifyDiskSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDiskSpecResponse{}
	_body, _err := client.ModifyDiskSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyEipAddressAttributeWithOptions(request *ModifyEipAddressAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyEipAddressAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyEipAddressAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyEipAddressAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyEipAddressAttribute(request *ModifyEipAddressAttributeRequest) (_result *ModifyEipAddressAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEipAddressAttributeResponse{}
	_body, _err := client.ModifyEipAddressAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyForwardEntryWithOptions(request *ModifyForwardEntryRequest, runtime *util.RuntimeOptions) (_result *ModifyForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyForwardEntryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyForwardEntry"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyForwardEntry(request *ModifyForwardEntryRequest) (_result *ModifyForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyForwardEntryResponse{}
	_body, _err := client.ModifyForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyHaVipAttributeWithOptions(request *ModifyHaVipAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyHaVipAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyHaVipAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyHaVipAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyHaVipAttribute(request *ModifyHaVipAttributeRequest) (_result *ModifyHaVipAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHaVipAttributeResponse{}
	_body, _err := client.ModifyHaVipAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyHpcClusterAttributeWithOptions(request *ModifyHpcClusterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyHpcClusterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyHpcClusterAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyHpcClusterAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyHpcClusterAttribute(request *ModifyHpcClusterAttributeRequest) (_result *ModifyHpcClusterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHpcClusterAttributeResponse{}
	_body, _err := client.ModifyHpcClusterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyImageAttributeWithOptions(request *ModifyImageAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyImageAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyImageAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyImageAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyImageAttribute(request *ModifyImageAttributeRequest) (_result *ModifyImageAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageAttributeResponse{}
	_body, _err := client.ModifyImageAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyImageShareGroupPermissionWithOptions(request *ModifyImageShareGroupPermissionRequest, runtime *util.RuntimeOptions) (_result *ModifyImageShareGroupPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyImageShareGroupPermissionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyImageShareGroupPermission"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyImageShareGroupPermission(request *ModifyImageShareGroupPermissionRequest) (_result *ModifyImageShareGroupPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageShareGroupPermissionResponse{}
	_body, _err := client.ModifyImageShareGroupPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyImageSharePermissionWithOptions(request *ModifyImageSharePermissionRequest, runtime *util.RuntimeOptions) (_result *ModifyImageSharePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyImageSharePermissionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyImageSharePermission"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyImageSharePermission(request *ModifyImageSharePermissionRequest) (_result *ModifyImageSharePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageSharePermissionResponse{}
	_body, _err := client.ModifyImageSharePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAttachmentAttributesWithOptions(request *ModifyInstanceAttachmentAttributesRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAttachmentAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceAttachmentAttributesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceAttachmentAttributes"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAttachmentAttributes(request *ModifyInstanceAttachmentAttributesRequest) (_result *ModifyInstanceAttachmentAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAttachmentAttributesResponse{}
	_body, _err := client.ModifyInstanceAttachmentAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAttributeWithOptions(request *ModifyInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAttribute(request *ModifyInstanceAttributeRequest) (_result *ModifyInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.ModifyInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAutoReleaseTimeWithOptions(request *ModifyInstanceAutoReleaseTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoReleaseTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceAutoReleaseTimeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceAutoReleaseTime"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAutoReleaseTime(request *ModifyInstanceAutoReleaseTimeRequest) (_result *ModifyInstanceAutoReleaseTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoReleaseTimeResponse{}
	_body, _err := client.ModifyInstanceAutoReleaseTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewAttributeWithOptions(request *ModifyInstanceAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceAutoRenewAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewAttribute(request *ModifyInstanceAutoRenewAttributeRequest) (_result *ModifyInstanceAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoRenewAttributeResponse{}
	_body, _err := client.ModifyInstanceAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceChargeTypeWithOptions(request *ModifyInstanceChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceChargeTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceChargeType"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceChargeType(request *ModifyInstanceChargeTypeRequest) (_result *ModifyInstanceChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceChargeTypeResponse{}
	_body, _err := client.ModifyInstanceChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceDeploymentWithOptions(request *ModifyInstanceDeploymentRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceDeploymentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceDeployment"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceDeployment(request *ModifyInstanceDeploymentRequest) (_result *ModifyInstanceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceDeploymentResponse{}
	_body, _err := client.ModifyInstanceDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceMaintenanceAttributesWithOptions(request *ModifyInstanceMaintenanceAttributesRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceMaintenanceAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceMaintenanceAttributesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceMaintenanceAttributes"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceMaintenanceAttributes(request *ModifyInstanceMaintenanceAttributesRequest) (_result *ModifyInstanceMaintenanceAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceMaintenanceAttributesResponse{}
	_body, _err := client.ModifyInstanceMaintenanceAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceMetadataOptionsWithOptions(request *ModifyInstanceMetadataOptionsRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceMetadataOptionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceMetadataOptionsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceMetadataOptions"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceMetadataOptions(request *ModifyInstanceMetadataOptionsRequest) (_result *ModifyInstanceMetadataOptionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceMetadataOptionsResponse{}
	_body, _err := client.ModifyInstanceMetadataOptionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceNetworkSpecWithOptions(request *ModifyInstanceNetworkSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceNetworkSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceNetworkSpecResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceNetworkSpec"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceNetworkSpec(request *ModifyInstanceNetworkSpecRequest) (_result *ModifyInstanceNetworkSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceNetworkSpecResponse{}
	_body, _err := client.ModifyInstanceNetworkSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceSpecWithOptions(request *ModifyInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceSpec"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceSpec(request *ModifyInstanceSpecRequest) (_result *ModifyInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.ModifyInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceVncPasswdWithOptions(request *ModifyInstanceVncPasswdRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceVncPasswdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceVncPasswdResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceVncPasswd"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceVncPasswd(request *ModifyInstanceVncPasswdRequest) (_result *ModifyInstanceVncPasswdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceVncPasswdResponse{}
	_body, _err := client.ModifyInstanceVncPasswdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceVpcAttributeWithOptions(request *ModifyInstanceVpcAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceVpcAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceVpcAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceVpcAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceVpcAttribute(request *ModifyInstanceVpcAttributeRequest) (_result *ModifyInstanceVpcAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceVpcAttributeResponse{}
	_body, _err := client.ModifyInstanceVpcAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLaunchTemplateDefaultVersionWithOptions(request *ModifyLaunchTemplateDefaultVersionRequest, runtime *util.RuntimeOptions) (_result *ModifyLaunchTemplateDefaultVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyLaunchTemplateDefaultVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyLaunchTemplateDefaultVersion"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLaunchTemplateDefaultVersion(request *ModifyLaunchTemplateDefaultVersionRequest) (_result *ModifyLaunchTemplateDefaultVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLaunchTemplateDefaultVersionResponse{}
	_body, _err := client.ModifyLaunchTemplateDefaultVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyNetworkInterfaceAttributeWithOptions(request *ModifyNetworkInterfaceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyNetworkInterfaceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyNetworkInterfaceAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyNetworkInterfaceAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyNetworkInterfaceAttribute(request *ModifyNetworkInterfaceAttributeRequest) (_result *ModifyNetworkInterfaceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNetworkInterfaceAttributeResponse{}
	_body, _err := client.ModifyNetworkInterfaceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPrepayInstanceSpecWithOptions(request *ModifyPrepayInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyPrepayInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyPrepayInstanceSpecResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyPrepayInstanceSpec"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPrepayInstanceSpec(request *ModifyPrepayInstanceSpecRequest) (_result *ModifyPrepayInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPrepayInstanceSpecResponse{}
	_body, _err := client.ModifyPrepayInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReservedInstanceAttributeWithOptions(request *ModifyReservedInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyReservedInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyReservedInstanceAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyReservedInstanceAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReservedInstanceAttribute(request *ModifyReservedInstanceAttributeRequest) (_result *ModifyReservedInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReservedInstanceAttributeResponse{}
	_body, _err := client.ModifyReservedInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReservedInstancesWithOptions(request *ModifyReservedInstancesRequest, runtime *util.RuntimeOptions) (_result *ModifyReservedInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyReservedInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyReservedInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReservedInstances(request *ModifyReservedInstancesRequest) (_result *ModifyReservedInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReservedInstancesResponse{}
	_body, _err := client.ModifyReservedInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceAttributeWithOptions(request *ModifyRouterInterfaceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyRouterInterfaceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyRouterInterfaceAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyRouterInterfaceAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceAttribute(request *ModifyRouterInterfaceAttributeRequest) (_result *ModifyRouterInterfaceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRouterInterfaceAttributeResponse{}
	_body, _err := client.ModifyRouterInterfaceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceSpecWithOptions(request *ModifyRouterInterfaceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyRouterInterfaceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyRouterInterfaceSpecResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyRouterInterfaceSpec"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceSpec(request *ModifyRouterInterfaceSpecRequest) (_result *ModifyRouterInterfaceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRouterInterfaceSpecResponse{}
	_body, _err := client.ModifyRouterInterfaceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupAttributeWithOptions(request *ModifySecurityGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifySecurityGroupAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifySecurityGroupAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupAttribute(request *ModifySecurityGroupAttributeRequest) (_result *ModifySecurityGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupAttributeResponse{}
	_body, _err := client.ModifySecurityGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupEgressRuleWithOptions(request *ModifySecurityGroupEgressRuleRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupEgressRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifySecurityGroupEgressRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifySecurityGroupEgressRule"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupEgressRule(request *ModifySecurityGroupEgressRuleRequest) (_result *ModifySecurityGroupEgressRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupEgressRuleResponse{}
	_body, _err := client.ModifySecurityGroupEgressRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupPolicyWithOptions(request *ModifySecurityGroupPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifySecurityGroupPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifySecurityGroupPolicy"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupPolicy(request *ModifySecurityGroupPolicyRequest) (_result *ModifySecurityGroupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupPolicyResponse{}
	_body, _err := client.ModifySecurityGroupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupRuleWithOptions(request *ModifySecurityGroupRuleRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifySecurityGroupRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifySecurityGroupRule"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupRule(request *ModifySecurityGroupRuleRequest) (_result *ModifySecurityGroupRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupRuleResponse{}
	_body, _err := client.ModifySecurityGroupRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySnapshotAttributeWithOptions(request *ModifySnapshotAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifySnapshotAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifySnapshotAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifySnapshotAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySnapshotAttribute(request *ModifySnapshotAttributeRequest) (_result *ModifySnapshotAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySnapshotAttributeResponse{}
	_body, _err := client.ModifySnapshotAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStorageCapacityUnitAttributeWithOptions(request *ModifyStorageCapacityUnitAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyStorageCapacityUnitAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyStorageCapacityUnitAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyStorageCapacityUnitAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStorageCapacityUnitAttribute(request *ModifyStorageCapacityUnitAttributeRequest) (_result *ModifyStorageCapacityUnitAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStorageCapacityUnitAttributeResponse{}
	_body, _err := client.ModifyStorageCapacityUnitAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStorageSetAttributeWithOptions(request *ModifyStorageSetAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyStorageSetAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyStorageSetAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyStorageSetAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStorageSetAttribute(request *ModifyStorageSetAttributeRequest) (_result *ModifyStorageSetAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStorageSetAttributeResponse{}
	_body, _err := client.ModifyStorageSetAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyUserBusinessBehaviorWithOptions(request *ModifyUserBusinessBehaviorRequest, runtime *util.RuntimeOptions) (_result *ModifyUserBusinessBehaviorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyUserBusinessBehaviorResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyUserBusinessBehavior"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyUserBusinessBehavior(request *ModifyUserBusinessBehaviorRequest) (_result *ModifyUserBusinessBehaviorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserBusinessBehaviorResponse{}
	_body, _err := client.ModifyUserBusinessBehaviorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVirtualBorderRouterAttributeWithOptions(request *ModifyVirtualBorderRouterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVirtualBorderRouterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyVirtualBorderRouterAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyVirtualBorderRouterAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVirtualBorderRouterAttribute(request *ModifyVirtualBorderRouterAttributeRequest) (_result *ModifyVirtualBorderRouterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVirtualBorderRouterAttributeResponse{}
	_body, _err := client.ModifyVirtualBorderRouterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVpcAttributeWithOptions(request *ModifyVpcAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVpcAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyVpcAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyVpcAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVpcAttribute(request *ModifyVpcAttributeRequest) (_result *ModifyVpcAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpcAttributeResponse{}
	_body, _err := client.ModifyVpcAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVRouterAttributeWithOptions(request *ModifyVRouterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVRouterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyVRouterAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyVRouterAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVRouterAttribute(request *ModifyVRouterAttributeRequest) (_result *ModifyVRouterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVRouterAttributeResponse{}
	_body, _err := client.ModifyVRouterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVSwitchAttributeWithOptions(request *ModifyVSwitchAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVSwitchAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyVSwitchAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyVSwitchAttribute"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVSwitchAttribute(request *ModifyVSwitchAttributeRequest) (_result *ModifyVSwitchAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVSwitchAttributeResponse{}
	_body, _err := client.ModifyVSwitchAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PurchaseReservedInstancesOfferingWithOptions(request *PurchaseReservedInstancesOfferingRequest, runtime *util.RuntimeOptions) (_result *PurchaseReservedInstancesOfferingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &PurchaseReservedInstancesOfferingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("PurchaseReservedInstancesOffering"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PurchaseReservedInstancesOffering(request *PurchaseReservedInstancesOfferingRequest) (_result *PurchaseReservedInstancesOfferingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PurchaseReservedInstancesOfferingResponse{}
	_body, _err := client.PurchaseReservedInstancesOfferingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PurchaseStorageCapacityUnitWithOptions(request *PurchaseStorageCapacityUnitRequest, runtime *util.RuntimeOptions) (_result *PurchaseStorageCapacityUnitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &PurchaseStorageCapacityUnitResponse{}
	_body, _err := client.DoRPCRequest(tea.String("PurchaseStorageCapacityUnit"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PurchaseStorageCapacityUnit(request *PurchaseStorageCapacityUnitRequest) (_result *PurchaseStorageCapacityUnitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PurchaseStorageCapacityUnitResponse{}
	_body, _err := client.PurchaseStorageCapacityUnitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReActivateInstancesWithOptions(request *ReActivateInstancesRequest, runtime *util.RuntimeOptions) (_result *ReActivateInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReActivateInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReActivateInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReActivateInstances(request *ReActivateInstancesRequest) (_result *ReActivateInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReActivateInstancesResponse{}
	_body, _err := client.ReActivateInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebootInstanceWithOptions(request *RebootInstanceRequest, runtime *util.RuntimeOptions) (_result *RebootInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RebootInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RebootInstance"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebootInstance(request *RebootInstanceRequest) (_result *RebootInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootInstanceResponse{}
	_body, _err := client.RebootInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebootInstancesWithOptions(request *RebootInstancesRequest, runtime *util.RuntimeOptions) (_result *RebootInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RebootInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RebootInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebootInstances(request *RebootInstancesRequest) (_result *RebootInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootInstancesResponse{}
	_body, _err := client.RebootInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RecoverVirtualBorderRouterWithOptions(request *RecoverVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *RecoverVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RecoverVirtualBorderRouterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RecoverVirtualBorderRouter"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RecoverVirtualBorderRouter(request *RecoverVirtualBorderRouterRequest) (_result *RecoverVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecoverVirtualBorderRouterResponse{}
	_body, _err := client.RecoverVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RedeployDedicatedHostWithOptions(request *RedeployDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *RedeployDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RedeployDedicatedHostResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RedeployDedicatedHost"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RedeployDedicatedHost(request *RedeployDedicatedHostRequest) (_result *RedeployDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RedeployDedicatedHostResponse{}
	_body, _err := client.RedeployDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RedeployInstanceWithOptions(request *RedeployInstanceRequest, runtime *util.RuntimeOptions) (_result *RedeployInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RedeployInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RedeployInstance"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RedeployInstance(request *RedeployInstanceRequest) (_result *RedeployInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RedeployInstanceResponse{}
	_body, _err := client.RedeployInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReInitDiskWithOptions(request *ReInitDiskRequest, runtime *util.RuntimeOptions) (_result *ReInitDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReInitDiskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReInitDisk"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReInitDisk(request *ReInitDiskRequest) (_result *ReInitDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReInitDiskResponse{}
	_body, _err := client.ReInitDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseCapacityReservationWithOptions(request *ReleaseCapacityReservationRequest, runtime *util.RuntimeOptions) (_result *ReleaseCapacityReservationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseCapacityReservationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseCapacityReservation"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseCapacityReservation(request *ReleaseCapacityReservationRequest) (_result *ReleaseCapacityReservationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseCapacityReservationResponse{}
	_body, _err := client.ReleaseCapacityReservationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseDedicatedHostWithOptions(request *ReleaseDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *ReleaseDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseDedicatedHostResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseDedicatedHost"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseDedicatedHost(request *ReleaseDedicatedHostRequest) (_result *ReleaseDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseDedicatedHostResponse{}
	_body, _err := client.ReleaseDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseEipAddressWithOptions(request *ReleaseEipAddressRequest, runtime *util.RuntimeOptions) (_result *ReleaseEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseEipAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseEipAddress"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseEipAddress(request *ReleaseEipAddressRequest) (_result *ReleaseEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseEipAddressResponse{}
	_body, _err := client.ReleaseEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleasePublicIpAddressWithOptions(request *ReleasePublicIpAddressRequest, runtime *util.RuntimeOptions) (_result *ReleasePublicIpAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleasePublicIpAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleasePublicIpAddress"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleasePublicIpAddress(request *ReleasePublicIpAddressRequest) (_result *ReleasePublicIpAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleasePublicIpAddressResponse{}
	_body, _err := client.ReleasePublicIpAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveBandwidthPackageIpsWithOptions(request *RemoveBandwidthPackageIpsRequest, runtime *util.RuntimeOptions) (_result *RemoveBandwidthPackageIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RemoveBandwidthPackageIpsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RemoveBandwidthPackageIps"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveBandwidthPackageIps(request *RemoveBandwidthPackageIpsRequest) (_result *RemoveBandwidthPackageIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveBandwidthPackageIpsResponse{}
	_body, _err := client.RemoveBandwidthPackageIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveTagsWithOptions(request *RemoveTagsRequest, runtime *util.RuntimeOptions) (_result *RemoveTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RemoveTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RemoveTags"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveTags(request *RemoveTagsRequest) (_result *RemoveTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveTagsResponse{}
	_body, _err := client.RemoveTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewDedicatedHostsWithOptions(request *RenewDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *RenewDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RenewDedicatedHostsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RenewDedicatedHosts"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewDedicatedHosts(request *RenewDedicatedHostsRequest) (_result *RenewDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewDedicatedHostsResponse{}
	_body, _err := client.RenewDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RenewInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RenewInstance"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewInstanceResponse{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReplaceSystemDiskWithOptions(request *ReplaceSystemDiskRequest, runtime *util.RuntimeOptions) (_result *ReplaceSystemDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReplaceSystemDiskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReplaceSystemDisk"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReplaceSystemDisk(request *ReplaceSystemDiskRequest) (_result *ReplaceSystemDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReplaceSystemDiskResponse{}
	_body, _err := client.ReplaceSystemDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportInstancesStatusWithOptions(request *ReportInstancesStatusRequest, runtime *util.RuntimeOptions) (_result *ReportInstancesStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportInstancesStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportInstancesStatus"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportInstancesStatus(request *ReportInstancesStatusRequest) (_result *ReportInstancesStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportInstancesStatusResponse{}
	_body, _err := client.ReportInstancesStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetDiskWithOptions(request *ResetDiskRequest, runtime *util.RuntimeOptions) (_result *ResetDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResetDiskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ResetDisk"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetDisk(request *ResetDiskRequest) (_result *ResetDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetDiskResponse{}
	_body, _err := client.ResetDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResizeDiskWithOptions(request *ResizeDiskRequest, runtime *util.RuntimeOptions) (_result *ResizeDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResizeDiskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ResizeDisk"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResizeDisk(request *ResizeDiskRequest) (_result *ResizeDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResizeDiskResponse{}
	_body, _err := client.ResizeDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeSecurityGroupWithOptions(request *RevokeSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *RevokeSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RevokeSecurityGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RevokeSecurityGroup"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeSecurityGroup(request *RevokeSecurityGroupRequest) (_result *RevokeSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSecurityGroupResponse{}
	_body, _err := client.RevokeSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeSecurityGroupEgressWithOptions(request *RevokeSecurityGroupEgressRequest, runtime *util.RuntimeOptions) (_result *RevokeSecurityGroupEgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RevokeSecurityGroupEgressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RevokeSecurityGroupEgress"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeSecurityGroupEgress(request *RevokeSecurityGroupEgressRequest) (_result *RevokeSecurityGroupEgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSecurityGroupEgressResponse{}
	_body, _err := client.RevokeSecurityGroupEgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunCommandWithOptions(tmpReq *RunCommandRequest, runtime *util.RuntimeOptions) (_result *RunCommandResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunCommandShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Parameters)) {
		request.ParametersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Parameters, tea.String("Parameters"), tea.String("json"))
	}

	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RunCommandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RunCommand"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunCommand(request *RunCommandRequest) (_result *RunCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCommandResponse{}
	_body, _err := client.RunCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendFileWithOptions(request *SendFileRequest, runtime *util.RuntimeOptions) (_result *SendFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SendFileResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SendFile"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendFile(request *SendFileRequest) (_result *SendFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendFileResponse{}
	_body, _err := client.SendFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartElasticityAssuranceWithOptions(request *StartElasticityAssuranceRequest, runtime *util.RuntimeOptions) (_result *StartElasticityAssuranceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartElasticityAssuranceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartElasticityAssurance"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartElasticityAssurance(request *StartElasticityAssuranceRequest) (_result *StartElasticityAssuranceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartElasticityAssuranceResponse{}
	_body, _err := client.StartElasticityAssuranceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartInstanceWithOptions(request *StartInstanceRequest, runtime *util.RuntimeOptions) (_result *StartInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartInstance"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartInstance(request *StartInstanceRequest) (_result *StartInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartInstanceResponse{}
	_body, _err := client.StartInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartInstancesWithOptions(request *StartInstancesRequest, runtime *util.RuntimeOptions) (_result *StartInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartInstances(request *StartInstancesRequest) (_result *StartInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartInstancesResponse{}
	_body, _err := client.StartInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopInstanceWithOptions(request *StopInstanceRequest, runtime *util.RuntimeOptions) (_result *StopInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopInstance"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopInstance(request *StopInstanceRequest) (_result *StopInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInstanceResponse{}
	_body, _err := client.StopInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopInstancesWithOptions(request *StopInstancesRequest, runtime *util.RuntimeOptions) (_result *StopInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopInstances"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopInstances(request *StopInstancesRequest) (_result *StopInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInstancesResponse{}
	_body, _err := client.StopInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopInvocationWithOptions(request *StopInvocationRequest, runtime *util.RuntimeOptions) (_result *StopInvocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopInvocationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopInvocation"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopInvocation(request *StopInvocationRequest) (_result *StopInvocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInvocationResponse{}
	_body, _err := client.StopInvocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TagResources"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminatePhysicalConnectionWithOptions(request *TerminatePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *TerminatePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TerminatePhysicalConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TerminatePhysicalConnection"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminatePhysicalConnection(request *TerminatePhysicalConnectionRequest) (_result *TerminatePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminatePhysicalConnectionResponse{}
	_body, _err := client.TerminatePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminateVirtualBorderRouterWithOptions(request *TerminateVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *TerminateVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TerminateVirtualBorderRouterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TerminateVirtualBorderRouter"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminateVirtualBorderRouter(request *TerminateVirtualBorderRouterRequest) (_result *TerminateVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminateVirtualBorderRouterResponse{}
	_body, _err := client.TerminateVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassignIpv6AddressesWithOptions(request *UnassignIpv6AddressesRequest, runtime *util.RuntimeOptions) (_result *UnassignIpv6AddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnassignIpv6AddressesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnassignIpv6Addresses"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassignIpv6Addresses(request *UnassignIpv6AddressesRequest) (_result *UnassignIpv6AddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassignIpv6AddressesResponse{}
	_body, _err := client.UnassignIpv6AddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassignPrivateIpAddressesWithOptions(request *UnassignPrivateIpAddressesRequest, runtime *util.RuntimeOptions) (_result *UnassignPrivateIpAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnassignPrivateIpAddressesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnassignPrivateIpAddresses"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassignPrivateIpAddresses(request *UnassignPrivateIpAddressesRequest) (_result *UnassignPrivateIpAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassignPrivateIpAddressesResponse{}
	_body, _err := client.UnassignPrivateIpAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateEipAddressWithOptions(request *UnassociateEipAddressRequest, runtime *util.RuntimeOptions) (_result *UnassociateEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnassociateEipAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnassociateEipAddress"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateEipAddress(request *UnassociateEipAddressRequest) (_result *UnassociateEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateEipAddressResponse{}
	_body, _err := client.UnassociateEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateHaVipWithOptions(request *UnassociateHaVipRequest, runtime *util.RuntimeOptions) (_result *UnassociateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnassociateHaVipResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnassociateHaVip"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateHaVip(request *UnassociateHaVipRequest) (_result *UnassociateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateHaVipResponse{}
	_body, _err := client.UnassociateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UntagResources"), tea.String("2014-05-26"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
