// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iDescribeTrFirewallsV2ListResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetRequestId(v string) *DescribeTrFirewallsV2ListResponseBody
	GetRequestId() *string
	SetTotalCount(v string) *DescribeTrFirewallsV2ListResponseBody
	GetTotalCount() *string
	SetVpcTrFirewalls(v []*DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) *DescribeTrFirewallsV2ListResponseBody
	GetVpcTrFirewalls() []*DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls
}

type DescribeTrFirewallsV2ListResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1471E2EC-F706-5F11-A79B-BD583ACB8297
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 6
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The VPC firewalls.
	VpcTrFirewalls []*DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls `json:"VpcTrFirewalls,omitempty" xml:"VpcTrFirewalls,omitempty" type:"Repeated"`
}

func (s DescribeTrFirewallsV2ListResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeTrFirewallsV2ListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTrFirewallsV2ListResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeTrFirewallsV2ListResponseBody) GetTotalCount() *string {
	return s.TotalCount
}

func (s *DescribeTrFirewallsV2ListResponseBody) GetVpcTrFirewalls() []*DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	return s.VpcTrFirewalls
}

func (s *DescribeTrFirewallsV2ListResponseBody) SetRequestId(v string) *DescribeTrFirewallsV2ListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBody) SetTotalCount(v string) *DescribeTrFirewallsV2ListResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBody) SetVpcTrFirewalls(v []*DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) *DescribeTrFirewallsV2ListResponseBody {
	s.VpcTrFirewalls = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBody) Validate() error {
	if s.VpcTrFirewalls != nil {
		for _, item := range s.VpcTrFirewalls {
			if item != nil {
				if err := item.Validate(); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

type DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls struct {
	// ACL engine mode.
	AclConfig *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig `json:"AclConfig,omitempty" xml:"AclConfig,omitempty" type:"Struct"`
	// The ID of the CEN instance.
	//
	// example:
	//
	// cen-03f8s0z052ka3v****
	CenId *string `json:"CenId,omitempty" xml:"CenId,omitempty"`
	// The name of the CEN instance.
	//
	// example:
	//
	// cen_swas
	CenName *string `json:"CenName,omitempty" xml:"CenName,omitempty"`
	// The party responsible for the TR fees generated by the VPC firewall. Values:
	//
	// - **PayByCloudFirewall**: Fees are borne by the Cloud Firewall.
	//
	// - **PayByCenOwner**: Fees are borne by the account to which the CEN instance belongs.
	//
	// example:
	//
	// PayByCenOwner
	CloudFirewallVpcOrderType *string `json:"CloudFirewallVpcOrderType,omitempty" xml:"CloudFirewallVpcOrderType,omitempty"`
	// The instance ID of the VPC firewall.
	//
	// example:
	//
	// vfw-tr-99bc4f0fc88b4d00****
	FirewallId *string `json:"FirewallId,omitempty" xml:"FirewallId,omitempty"`
	// The status of the VPC firewall. Valid values:
	//
	// 	- **opened**: The VPC firewall is enabled.
	//
	// 	- **closed**: The VPC firewall is disabled.
	//
	// 	- **notconfigured**: The VPC firewall is not created.
	//
	// 	- **configured**: The VPC firewall is created but is not enabled.
	//
	// 	- **creating**: The VPC firewall is being created.
	//
	// 	- **opening**: The VPC firewall is being enabled.
	//
	// 	- **deleting**: The VPC firewall is being deleted.
	//
	// >  If you do not specify this parameter, VPC firewalls in all states are queried.
	//
	// example:
	//
	// opened
	FirewallSwitchStatus *string `json:"FirewallSwitchStatus,omitempty" xml:"FirewallSwitchStatus,omitempty"`
	// The intrusion prevention system (IPS) configurations.
	IpsConfig *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig `json:"IpsConfig,omitempty" xml:"IpsConfig,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account to which the VPC belongs.
	//
	// example:
	//
	// 171761785151****
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Indicates whether the VPC firewall can be automatically enabled. Valid values:
	//
	// 	- **passed**: yes
	//
	// 	- **failed**: no
	//
	// 	- **unknown**
	//
	// example:
	//
	// passed
	PrecheckStatus *string `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty"`
	// The protected resources.
	ProtectedResource *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource `json:"ProtectedResource,omitempty" xml:"ProtectedResource,omitempty" type:"Struct"`
	// The region ID of the transit router.
	//
	// example:
	//
	// cn-hangzhou
	RegionNo *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	// Indicates whether you can create a VPC firewall in a specified region. Valid values:
	//
	// 	- **enable**: yes
	//
	// 	- **disable**: no
	//
	// example:
	//
	// enable
	RegionStatus *string `json:"RegionStatus,omitempty" xml:"RegionStatus,omitempty"`
	// The result code of the operation that creates the VPC firewall. Valid values:
	//
	// 	- **RegionDisable**: VPC Firewall is not supported in the region of the network instance. You cannot create a VPC firewall for the network instance.
	//
	// 	- **Empty string**: You can create a VPC firewall for the network instance.
	//
	// example:
	//
	// RegionDisable
	ResultCode *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	// The routing mode of the VPC firewall. Valid values:
	//
	// 	- **managed**: automatic mode
	//
	// 	- **manual**: manual mode
	//
	// example:
	//
	// managed
	RouteMode *string `json:"RouteMode,omitempty" xml:"RouteMode,omitempty"`
	// The ID of the transit router.
	//
	// example:
	//
	// tr-2vcmhjs88nil55fvu****
	TransitRouterId *string `json:"TransitRouterId,omitempty" xml:"TransitRouterId,omitempty"`
	// The unprotected resources.
	UnprotectedResource *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource `json:"UnprotectedResource,omitempty" xml:"UnprotectedResource,omitempty" type:"Struct"`
	// The instance name of the VPC firewall.
	//
	// example:
	//
	// test
	VpcFirewallName *string `json:"VpcFirewallName,omitempty" xml:"VpcFirewallName,omitempty"`
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) String() string {
	return dara.Prettify(s)
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GoString() string {
	return s.String()
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetAclConfig() *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig {
	return s.AclConfig
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetCenId() *string {
	return s.CenId
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetCenName() *string {
	return s.CenName
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetCloudFirewallVpcOrderType() *string {
	return s.CloudFirewallVpcOrderType
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetFirewallId() *string {
	return s.FirewallId
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetFirewallSwitchStatus() *string {
	return s.FirewallSwitchStatus
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetIpsConfig() *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig {
	return s.IpsConfig
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetOwnerId() *int64 {
	return s.OwnerId
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetPrecheckStatus() *string {
	return s.PrecheckStatus
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetProtectedResource() *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource {
	return s.ProtectedResource
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetRegionNo() *string {
	return s.RegionNo
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetRegionStatus() *string {
	return s.RegionStatus
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetResultCode() *string {
	return s.ResultCode
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetRouteMode() *string {
	return s.RouteMode
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetTransitRouterId() *string {
	return s.TransitRouterId
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetUnprotectedResource() *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource {
	return s.UnprotectedResource
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) GetVpcFirewallName() *string {
	return s.VpcFirewallName
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetAclConfig(v *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.AclConfig = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetCenId(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.CenId = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetCenName(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.CenName = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetCloudFirewallVpcOrderType(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.CloudFirewallVpcOrderType = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetFirewallId(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.FirewallId = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetFirewallSwitchStatus(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.FirewallSwitchStatus = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetIpsConfig(v *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.IpsConfig = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetOwnerId(v int64) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.OwnerId = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetPrecheckStatus(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.PrecheckStatus = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetProtectedResource(v *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.ProtectedResource = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetRegionNo(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.RegionNo = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetRegionStatus(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.RegionStatus = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetResultCode(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.ResultCode = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetRouteMode(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.RouteMode = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetTransitRouterId(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.TransitRouterId = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetUnprotectedResource(v *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.UnprotectedResource = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) SetVpcFirewallName(v string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls {
	s.VpcFirewallName = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewalls) Validate() error {
	if s.AclConfig != nil {
		if err := s.AclConfig.Validate(); err != nil {
			return err
		}
	}
	if s.IpsConfig != nil {
		if err := s.IpsConfig.Validate(); err != nil {
			return err
		}
	}
	if s.ProtectedResource != nil {
		if err := s.ProtectedResource.Validate(); err != nil {
			return err
		}
	}
	if s.UnprotectedResource != nil {
		if err := s.UnprotectedResource.Validate(); err != nil {
			return err
		}
	}
	return nil
}

type DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig struct {
	// Whether to enable strict mode
	//
	// - 1: Enable strict mode
	//
	// - 0: Disable strict mode
	//
	// example:
	//
	// 1
	StrictMode *int32 `json:"StrictMode,omitempty" xml:"StrictMode,omitempty"`
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig) String() string {
	return dara.Prettify(s)
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig) GoString() string {
	return s.String()
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig) GetStrictMode() *int32 {
	return s.StrictMode
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig) SetStrictMode(v int32) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig {
	s.StrictMode = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsAclConfig) Validate() error {
	return dara.Validate(s)
}

type DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig struct {
	// Indicates whether basic protection is enabled. Valid values:
	//
	// 	- **1**: yes
	//
	// 	- **0**: no
	//
	// example:
	//
	// 1
	BasicRules *int32 `json:"BasicRules,omitempty" xml:"BasicRules,omitempty"`
	// Indicates whether virtual patching is enabled. Valid values:
	//
	// 	- **1**: yes
	//
	// 	- **0**: no
	//
	// example:
	//
	// 1
	EnableAllPatch *int32 `json:"EnableAllPatch,omitempty" xml:"EnableAllPatch,omitempty"`
	// The level of the rule group for the IPS. Valid values:
	//
	// 	- **1**: loose.
	//
	// 	- **2**: medium.
	//
	// 	- **3**: strict.
	//
	// example:
	//
	// 3
	RuleClass *int32 `json:"RuleClass,omitempty" xml:"RuleClass,omitempty"`
	// The mode of the IPS. Valid values:
	//
	// 	- **1**: block mode
	//
	// 	- **0**: monitor mode
	//
	// example:
	//
	// 1
	RunMode *int32 `json:"RunMode,omitempty" xml:"RunMode,omitempty"`
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) String() string {
	return dara.Prettify(s)
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) GoString() string {
	return s.String()
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) GetBasicRules() *int32 {
	return s.BasicRules
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) GetEnableAllPatch() *int32 {
	return s.EnableAllPatch
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) GetRuleClass() *int32 {
	return s.RuleClass
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) GetRunMode() *int32 {
	return s.RunMode
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) SetBasicRules(v int32) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig {
	s.BasicRules = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) SetEnableAllPatch(v int32) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig {
	s.EnableAllPatch = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) SetRuleClass(v int32) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig {
	s.RuleClass = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) SetRunMode(v int32) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig {
	s.RunMode = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsIpsConfig) Validate() error {
	return dara.Validate(s)
}

type DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource struct {
	// The number of protected resources.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The protected express connect routers.
	EcrList []*string `json:"EcrList,omitempty" xml:"EcrList,omitempty" type:"Repeated"`
	// The protected peer transit routers.
	PeerTrList []*string `json:"PeerTrList,omitempty" xml:"PeerTrList,omitempty" type:"Repeated"`
	// The protected virtual border routers (VBRs).
	VbrList []*string `json:"VbrList,omitempty" xml:"VbrList,omitempty" type:"Repeated"`
	// The protected VPCs.
	VpcList []*string `json:"VpcList,omitempty" xml:"VpcList,omitempty" type:"Repeated"`
	// The protected VPN gateways.
	VpnList []*string `json:"VpnList,omitempty" xml:"VpnList,omitempty" type:"Repeated"`
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) String() string {
	return dara.Prettify(s)
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) GoString() string {
	return s.String()
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) GetCount() *int32 {
	return s.Count
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) GetEcrList() []*string {
	return s.EcrList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) GetPeerTrList() []*string {
	return s.PeerTrList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) GetVbrList() []*string {
	return s.VbrList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) GetVpcList() []*string {
	return s.VpcList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) GetVpnList() []*string {
	return s.VpnList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) SetCount(v int32) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource {
	s.Count = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) SetEcrList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource {
	s.EcrList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) SetPeerTrList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource {
	s.PeerTrList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) SetVbrList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource {
	s.VbrList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) SetVpcList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource {
	s.VpcList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) SetVpnList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource {
	s.VpnList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsProtectedResource) Validate() error {
	return dara.Validate(s)
}

type DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource struct {
	// The number of unprotected resources.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The unprotected express connect routers.
	EcrList []*string `json:"EcrList,omitempty" xml:"EcrList,omitempty" type:"Repeated"`
	// The unprotected peer transit routers.
	PeerTrList []*string `json:"PeerTrList,omitempty" xml:"PeerTrList,omitempty" type:"Repeated"`
	// The unprotected VBRs.
	VbrList []*string `json:"VbrList,omitempty" xml:"VbrList,omitempty" type:"Repeated"`
	// The unprotected VPCs.
	VpcList []*string `json:"VpcList,omitempty" xml:"VpcList,omitempty" type:"Repeated"`
	// The unprotected VPN gateways.
	VpnList []*string `json:"VpnList,omitempty" xml:"VpnList,omitempty" type:"Repeated"`
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) String() string {
	return dara.Prettify(s)
}

func (s DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) GoString() string {
	return s.String()
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) GetCount() *int32 {
	return s.Count
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) GetEcrList() []*string {
	return s.EcrList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) GetPeerTrList() []*string {
	return s.PeerTrList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) GetVbrList() []*string {
	return s.VbrList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) GetVpcList() []*string {
	return s.VpcList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) GetVpnList() []*string {
	return s.VpnList
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) SetCount(v int32) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource {
	s.Count = &v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) SetEcrList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource {
	s.EcrList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) SetPeerTrList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource {
	s.PeerTrList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) SetVbrList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource {
	s.VbrList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) SetVpcList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource {
	s.VpcList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) SetVpnList(v []*string) *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource {
	s.VpnList = v
	return s
}

func (s *DescribeTrFirewallsV2ListResponseBodyVpcTrFirewallsUnprotectedResource) Validate() error {
	return dara.Validate(s)
}
