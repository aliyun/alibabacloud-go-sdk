// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AclConfig struct {
	// This parameter is required.
	//
	// if can be null:
	// true
	AclEntries []*AclEntryConfig `json:"aclEntries,omitempty" xml:"aclEntries,omitempty" type:"Repeated"`
}

func (s AclConfig) String() string {
	return tea.Prettify(s)
}

func (s AclConfig) GoString() string {
	return s.String()
}

func (s *AclConfig) SetAclEntries(v []*AclEntryConfig) *AclConfig {
	s.AclEntries = v
	return s
}

type AclEntryConfig struct {
	// This parameter is required.
	//
	// example:
	//
	// 1.2.3.4/32
	Entry *string `json:"entry,omitempty" xml:"entry,omitempty"`
}

func (s AclEntryConfig) String() string {
	return tea.Prettify(s)
}

func (s AclEntryConfig) GoString() string {
	return s.String()
}

func (s *AclEntryConfig) SetEntry(v string) *AclEntryConfig {
	s.Entry = &v
	return s
}

type AppStackInstance struct {
	// example:
	//
	// 1706518652
	CreateTime *int64                       `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Endpoints  []*AppStackInstanceEndpoints `json:"Endpoints,omitempty" xml:"Endpoints,omitempty" type:"Repeated"`
	// example:
	//
	// i-789y
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// palworld
	InstanceName *string                       `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Parameters   []*AppStackInstanceParameters `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Repeated"`
	// example:
	//
	// palworld
	StackId *string `json:"StackId,omitempty" xml:"StackId,omitempty"`
	// example:
	//
	// WAIT
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1706518652
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s AppStackInstance) String() string {
	return tea.Prettify(s)
}

func (s AppStackInstance) GoString() string {
	return s.String()
}

func (s *AppStackInstance) SetCreateTime(v int64) *AppStackInstance {
	s.CreateTime = &v
	return s
}

func (s *AppStackInstance) SetEndpoints(v []*AppStackInstanceEndpoints) *AppStackInstance {
	s.Endpoints = v
	return s
}

func (s *AppStackInstance) SetInstanceId(v string) *AppStackInstance {
	s.InstanceId = &v
	return s
}

func (s *AppStackInstance) SetInstanceName(v string) *AppStackInstance {
	s.InstanceName = &v
	return s
}

func (s *AppStackInstance) SetParameters(v []*AppStackInstanceParameters) *AppStackInstance {
	s.Parameters = v
	return s
}

func (s *AppStackInstance) SetStackId(v string) *AppStackInstance {
	s.StackId = &v
	return s
}

func (s *AppStackInstance) SetStatus(v string) *AppStackInstance {
	s.Status = &v
	return s
}

func (s *AppStackInstance) SetUpdateTime(v int64) *AppStackInstance {
	s.UpdateTime = &v
	return s
}

type AppStackInstanceEndpoints struct {
	// example:
	//
	// 127.0.0.1:8211
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// example:
	//
	// game
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// UDP
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s AppStackInstanceEndpoints) String() string {
	return tea.Prettify(s)
}

func (s AppStackInstanceEndpoints) GoString() string {
	return s.String()
}

func (s *AppStackInstanceEndpoints) SetAddress(v string) *AppStackInstanceEndpoints {
	s.Address = &v
	return s
}

func (s *AppStackInstanceEndpoints) SetName(v string) *AppStackInstanceEndpoints {
	s.Name = &v
	return s
}

func (s *AppStackInstanceEndpoints) SetProtocol(v string) *AppStackInstanceEndpoints {
	s.Protocol = &v
	return s
}

type AppStackInstanceParameters struct {
	// example:
	//
	// regionId
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// cn-hangzhou
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s AppStackInstanceParameters) String() string {
	return tea.Prettify(s)
}

func (s AppStackInstanceParameters) GoString() string {
	return s.String()
}

func (s *AppStackInstanceParameters) SetName(v string) *AppStackInstanceParameters {
	s.Name = &v
	return s
}

func (s *AppStackInstanceParameters) SetValue(v string) *AppStackInstanceParameters {
	s.Value = &v
	return s
}

type AppStackResource struct {
	// example:
	//
	// 1706518652000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// i-78yt
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// VPC
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// example:
	//
	// vsw-qwe112233
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// example:
	//
	// vsw-palworld-a
	ResourceName *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	// example:
	//
	// VSWITCH
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// example:
	//
	// palworld
	StackId *string `json:"StackId,omitempty" xml:"StackId,omitempty"`
	// example:
	//
	// NORMAL
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AppStackResource) String() string {
	return tea.Prettify(s)
}

func (s AppStackResource) GoString() string {
	return s.String()
}

func (s *AppStackResource) SetCreateTime(v int64) *AppStackResource {
	s.CreateTime = &v
	return s
}

func (s *AppStackResource) SetInstanceId(v string) *AppStackResource {
	s.InstanceId = &v
	return s
}

func (s *AppStackResource) SetProductCode(v string) *AppStackResource {
	s.ProductCode = &v
	return s
}

func (s *AppStackResource) SetResourceId(v string) *AppStackResource {
	s.ResourceId = &v
	return s
}

func (s *AppStackResource) SetResourceName(v string) *AppStackResource {
	s.ResourceName = &v
	return s
}

func (s *AppStackResource) SetResourceType(v string) *AppStackResource {
	s.ResourceType = &v
	return s
}

func (s *AppStackResource) SetStackId(v string) *AppStackResource {
	s.StackId = &v
	return s
}

func (s *AppStackResource) SetStatus(v string) *AppStackResource {
	s.Status = &v
	return s
}

type AppStackTask struct {
	// example:
	//
	// 1706518652
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1706518652
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// i-789y
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// palworld
	StackId *string `json:"StackId,omitempty" xml:"StackId,omitempty"`
	// example:
	//
	// 1706518652
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// WAIT
	Status *string              `json:"Status,omitempty" xml:"Status,omitempty"`
	Steps  []*AppStackTaskSteps `json:"Steps,omitempty" xml:"Steps,omitempty" type:"Repeated"`
	// example:
	//
	// t-789y-deploy
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s AppStackTask) String() string {
	return tea.Prettify(s)
}

func (s AppStackTask) GoString() string {
	return s.String()
}

func (s *AppStackTask) SetCreateTime(v int64) *AppStackTask {
	s.CreateTime = &v
	return s
}

func (s *AppStackTask) SetEndTime(v int64) *AppStackTask {
	s.EndTime = &v
	return s
}

func (s *AppStackTask) SetInstanceId(v string) *AppStackTask {
	s.InstanceId = &v
	return s
}

func (s *AppStackTask) SetStackId(v string) *AppStackTask {
	s.StackId = &v
	return s
}

func (s *AppStackTask) SetStartTime(v int64) *AppStackTask {
	s.StartTime = &v
	return s
}

func (s *AppStackTask) SetStatus(v string) *AppStackTask {
	s.Status = &v
	return s
}

func (s *AppStackTask) SetSteps(v []*AppStackTaskSteps) *AppStackTask {
	s.Steps = v
	return s
}

func (s *AppStackTask) SetTaskId(v string) *AppStackTask {
	s.TaskId = &v
	return s
}

type AppStackTaskSteps struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 0
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1706518652
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// VPC_CREATE_NETWORK
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// OK
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 初始化 VPC 网络
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1706518652
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// WAIT
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AppStackTaskSteps) String() string {
	return tea.Prettify(s)
}

func (s AppStackTaskSteps) GoString() string {
	return s.String()
}

func (s *AppStackTaskSteps) SetCode(v string) *AppStackTaskSteps {
	s.Code = &v
	return s
}

func (s *AppStackTaskSteps) SetDuration(v int64) *AppStackTaskSteps {
	s.Duration = &v
	return s
}

func (s *AppStackTaskSteps) SetEndTime(v int64) *AppStackTaskSteps {
	s.EndTime = &v
	return s
}

func (s *AppStackTaskSteps) SetId(v string) *AppStackTaskSteps {
	s.Id = &v
	return s
}

func (s *AppStackTaskSteps) SetMessage(v string) *AppStackTaskSteps {
	s.Message = &v
	return s
}

func (s *AppStackTaskSteps) SetName(v string) *AppStackTaskSteps {
	s.Name = &v
	return s
}

func (s *AppStackTaskSteps) SetStartTime(v int64) *AppStackTaskSteps {
	s.StartTime = &v
	return s
}

func (s *AppStackTaskSteps) SetStatus(v string) *AppStackTaskSteps {
	s.Status = &v
	return s
}

type Application struct {
	RequestId               *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ApplicationId           *string                  `json:"applicationId,omitempty" xml:"applicationId,omitempty"`
	ApplicationName         *string                  `json:"applicationName,omitempty" xml:"applicationName,omitempty"`
	Args                    *string                  `json:"args,omitempty" xml:"args,omitempty"`
	CaPort                  *int32                   `json:"caPort,omitempty" xml:"caPort,omitempty"`
	CodeChecksum            *string                  `json:"codeChecksum,omitempty" xml:"codeChecksum,omitempty"`
	CodeSize                *int64                   `json:"codeSize,omitempty" xml:"codeSize,omitempty"`
	Command                 *string                  `json:"command,omitempty" xml:"command,omitempty"`
	Cpu                     *float32                 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	CreatedTime             *string                  `json:"createdTime,omitempty" xml:"createdTime,omitempty"`
	CustomDNS               *CustomDNS               `json:"customDNS,omitempty" xml:"customDNS,omitempty"`
	CustomDomainName        *string                  `json:"customDomainName,omitempty" xml:"customDomainName,omitempty"`
	CustomHealthCheckConfig *CustomHealthCheckConfig `json:"customHealthCheckConfig,omitempty" xml:"customHealthCheckConfig,omitempty"`
	CustomHostAlias         *CustomHostAlias         `json:"customHostAlias,omitempty" xml:"customHostAlias,omitempty"`
	CustomRuntimeConfig     *CustomRuntimeConfig     `json:"customRuntimeConfig,omitempty" xml:"customRuntimeConfig,omitempty"`
	Description             *string                  `json:"description,omitempty" xml:"description,omitempty"`
	DiskSize                *int32                   `json:"diskSize,omitempty" xml:"diskSize,omitempty"`
	EnableAppMetric         *bool                    `json:"enableAppMetric,omitempty" xml:"enableAppMetric,omitempty"`
	EnableArmsAdvanced      *bool                    `json:"enableArmsAdvanced,omitempty" xml:"enableArmsAdvanced,omitempty"`
	EnvironmentVariables    map[string]*string       `json:"environmentVariables,omitempty" xml:"environmentVariables,omitempty"`
	GpuMemorySize           *int32                   `json:"gpuMemorySize,omitempty" xml:"gpuMemorySize,omitempty"`
	Handler                 *string                  `json:"handler,omitempty" xml:"handler,omitempty"`
	HttpTriggerConfig       *HTTPTriggerConfig       `json:"httpTriggerConfig,omitempty" xml:"httpTriggerConfig,omitempty"`
	ImageConfig             *ImageConfig             `json:"imageConfig,omitempty" xml:"imageConfig,omitempty"`
	InitializationTimeout   *int32                   `json:"initializationTimeout,omitempty" xml:"initializationTimeout,omitempty"`
	Initializer             *string                  `json:"initializer,omitempty" xml:"initializer,omitempty"`
	InstanceConcurrency     *int32                   `json:"instanceConcurrency,omitempty" xml:"instanceConcurrency,omitempty"`
	InstanceLifecycleConfig *InstanceLifecycleConfig `json:"instanceLifecycleConfig,omitempty" xml:"instanceLifecycleConfig,omitempty"`
	InstanceSoftConcurrency *int32                   `json:"instanceSoftConcurrency,omitempty" xml:"instanceSoftConcurrency,omitempty"`
	InstanceType            *string                  `json:"instanceType,omitempty" xml:"instanceType,omitempty"`
	InternetAccess          *bool                    `json:"internetAccess,omitempty" xml:"internetAccess,omitempty"`
	LastModifiedTime        *string                  `json:"lastModifiedTime,omitempty" xml:"lastModifiedTime,omitempty"`
	Layers                  []*string                `json:"layers,omitempty" xml:"layers,omitempty" type:"Repeated"`
	LayersArnV2             []*string                `json:"layersArnV2,omitempty" xml:"layersArnV2,omitempty" type:"Repeated"`
	LivenessProbe           *Probe                   `json:"livenessProbe,omitempty" xml:"livenessProbe,omitempty"`
	LogConfig               *LogConfig               `json:"logConfig,omitempty" xml:"logConfig,omitempty"`
	MemorySize              *int32                   `json:"memorySize,omitempty" xml:"memorySize,omitempty"`
	Namespace               *string                  `json:"namespace,omitempty" xml:"namespace,omitempty"`
	NamespaceID             *string                  `json:"namespaceID,omitempty" xml:"namespaceID,omitempty"`
	NamespaceName           *string                  `json:"namespaceName,omitempty" xml:"namespaceName,omitempty"`
	NasConfig               *NASConfig               `json:"nasConfig,omitempty" xml:"nasConfig,omitempty"`
	OssMountConfig          *OSSMountConfig          `json:"ossMountConfig,omitempty" xml:"ossMountConfig,omitempty"`
	ProgrammingLanguage     *string                  `json:"programmingLanguage,omitempty" xml:"programmingLanguage,omitempty"`
	Runtime                 *string                  `json:"runtime,omitempty" xml:"runtime,omitempty"`
	ScaleConfig             *ScaleConfig             `json:"scaleConfig,omitempty" xml:"scaleConfig,omitempty"`
	SlsConfig               *SLSConfig               `json:"slsConfig,omitempty" xml:"slsConfig,omitempty"`
	StartupProbe            *Probe                   `json:"startupProbe,omitempty" xml:"startupProbe,omitempty"`
	Timeout                 *int32                   `json:"timeout,omitempty" xml:"timeout,omitempty"`
	TracingConfig           *TracingConfig           `json:"tracingConfig,omitempty" xml:"tracingConfig,omitempty"`
	UrlInternet             *string                  `json:"urlInternet,omitempty" xml:"urlInternet,omitempty"`
	UrlIntranet             *string                  `json:"urlIntranet,omitempty" xml:"urlIntranet,omitempty"`
	Version                 *Version                 `json:"version,omitempty" xml:"version,omitempty"`
	VpcConfig               *VPCConfig               `json:"vpcConfig,omitempty" xml:"vpcConfig,omitempty"`
}

func (s Application) String() string {
	return tea.Prettify(s)
}

func (s Application) GoString() string {
	return s.String()
}

func (s *Application) SetRequestId(v string) *Application {
	s.RequestId = &v
	return s
}

func (s *Application) SetApplicationId(v string) *Application {
	s.ApplicationId = &v
	return s
}

func (s *Application) SetApplicationName(v string) *Application {
	s.ApplicationName = &v
	return s
}

func (s *Application) SetArgs(v string) *Application {
	s.Args = &v
	return s
}

func (s *Application) SetCaPort(v int32) *Application {
	s.CaPort = &v
	return s
}

func (s *Application) SetCodeChecksum(v string) *Application {
	s.CodeChecksum = &v
	return s
}

func (s *Application) SetCodeSize(v int64) *Application {
	s.CodeSize = &v
	return s
}

func (s *Application) SetCommand(v string) *Application {
	s.Command = &v
	return s
}

func (s *Application) SetCpu(v float32) *Application {
	s.Cpu = &v
	return s
}

func (s *Application) SetCreatedTime(v string) *Application {
	s.CreatedTime = &v
	return s
}

func (s *Application) SetCustomDNS(v *CustomDNS) *Application {
	s.CustomDNS = v
	return s
}

func (s *Application) SetCustomDomainName(v string) *Application {
	s.CustomDomainName = &v
	return s
}

func (s *Application) SetCustomHealthCheckConfig(v *CustomHealthCheckConfig) *Application {
	s.CustomHealthCheckConfig = v
	return s
}

func (s *Application) SetCustomHostAlias(v *CustomHostAlias) *Application {
	s.CustomHostAlias = v
	return s
}

func (s *Application) SetCustomRuntimeConfig(v *CustomRuntimeConfig) *Application {
	s.CustomRuntimeConfig = v
	return s
}

func (s *Application) SetDescription(v string) *Application {
	s.Description = &v
	return s
}

func (s *Application) SetDiskSize(v int32) *Application {
	s.DiskSize = &v
	return s
}

func (s *Application) SetEnableAppMetric(v bool) *Application {
	s.EnableAppMetric = &v
	return s
}

func (s *Application) SetEnableArmsAdvanced(v bool) *Application {
	s.EnableArmsAdvanced = &v
	return s
}

func (s *Application) SetEnvironmentVariables(v map[string]*string) *Application {
	s.EnvironmentVariables = v
	return s
}

func (s *Application) SetGpuMemorySize(v int32) *Application {
	s.GpuMemorySize = &v
	return s
}

func (s *Application) SetHandler(v string) *Application {
	s.Handler = &v
	return s
}

func (s *Application) SetHttpTriggerConfig(v *HTTPTriggerConfig) *Application {
	s.HttpTriggerConfig = v
	return s
}

func (s *Application) SetImageConfig(v *ImageConfig) *Application {
	s.ImageConfig = v
	return s
}

func (s *Application) SetInitializationTimeout(v int32) *Application {
	s.InitializationTimeout = &v
	return s
}

func (s *Application) SetInitializer(v string) *Application {
	s.Initializer = &v
	return s
}

func (s *Application) SetInstanceConcurrency(v int32) *Application {
	s.InstanceConcurrency = &v
	return s
}

func (s *Application) SetInstanceLifecycleConfig(v *InstanceLifecycleConfig) *Application {
	s.InstanceLifecycleConfig = v
	return s
}

func (s *Application) SetInstanceSoftConcurrency(v int32) *Application {
	s.InstanceSoftConcurrency = &v
	return s
}

func (s *Application) SetInstanceType(v string) *Application {
	s.InstanceType = &v
	return s
}

func (s *Application) SetInternetAccess(v bool) *Application {
	s.InternetAccess = &v
	return s
}

func (s *Application) SetLastModifiedTime(v string) *Application {
	s.LastModifiedTime = &v
	return s
}

func (s *Application) SetLayers(v []*string) *Application {
	s.Layers = v
	return s
}

func (s *Application) SetLayersArnV2(v []*string) *Application {
	s.LayersArnV2 = v
	return s
}

func (s *Application) SetLivenessProbe(v *Probe) *Application {
	s.LivenessProbe = v
	return s
}

func (s *Application) SetLogConfig(v *LogConfig) *Application {
	s.LogConfig = v
	return s
}

func (s *Application) SetMemorySize(v int32) *Application {
	s.MemorySize = &v
	return s
}

func (s *Application) SetNamespace(v string) *Application {
	s.Namespace = &v
	return s
}

func (s *Application) SetNamespaceID(v string) *Application {
	s.NamespaceID = &v
	return s
}

func (s *Application) SetNamespaceName(v string) *Application {
	s.NamespaceName = &v
	return s
}

func (s *Application) SetNasConfig(v *NASConfig) *Application {
	s.NasConfig = v
	return s
}

func (s *Application) SetOssMountConfig(v *OSSMountConfig) *Application {
	s.OssMountConfig = v
	return s
}

func (s *Application) SetProgrammingLanguage(v string) *Application {
	s.ProgrammingLanguage = &v
	return s
}

func (s *Application) SetRuntime(v string) *Application {
	s.Runtime = &v
	return s
}

func (s *Application) SetScaleConfig(v *ScaleConfig) *Application {
	s.ScaleConfig = v
	return s
}

func (s *Application) SetSlsConfig(v *SLSConfig) *Application {
	s.SlsConfig = v
	return s
}

func (s *Application) SetStartupProbe(v *Probe) *Application {
	s.StartupProbe = v
	return s
}

func (s *Application) SetTimeout(v int32) *Application {
	s.Timeout = &v
	return s
}

func (s *Application) SetTracingConfig(v *TracingConfig) *Application {
	s.TracingConfig = v
	return s
}

func (s *Application) SetUrlInternet(v string) *Application {
	s.UrlInternet = &v
	return s
}

func (s *Application) SetUrlIntranet(v string) *Application {
	s.UrlIntranet = &v
	return s
}

func (s *Application) SetVersion(v *Version) *Application {
	s.Version = v
	return s
}

func (s *Application) SetVpcConfig(v *VPCConfig) *Application {
	s.VpcConfig = v
	return s
}

type ApplicationStatus struct {
	InstanceCount *int64       `json:"instanceCount,omitempty" xml:"instanceCount,omitempty"`
	ScaleConfig   *ScaleConfig `json:"scaleConfig,omitempty" xml:"scaleConfig,omitempty"`
}

func (s ApplicationStatus) String() string {
	return tea.Prettify(s)
}

func (s ApplicationStatus) GoString() string {
	return s.String()
}

func (s *ApplicationStatus) SetInstanceCount(v int64) *ApplicationStatus {
	s.InstanceCount = &v
	return s
}

func (s *ApplicationStatus) SetScaleConfig(v *ScaleConfig) *ApplicationStatus {
	s.ScaleConfig = v
	return s
}

type ApplicationWithStatus struct {
	Application *Application       `json:"application,omitempty" xml:"application,omitempty"`
	Status      *ApplicationStatus `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ApplicationWithStatus) String() string {
	return tea.Prettify(s)
}

func (s ApplicationWithStatus) GoString() string {
	return s.String()
}

func (s *ApplicationWithStatus) SetApplication(v *Application) *ApplicationWithStatus {
	s.Application = v
	return s
}

func (s *ApplicationWithStatus) SetStatus(v *ApplicationStatus) *ApplicationWithStatus {
	s.Status = v
	return s
}

type ArmsConfig struct {
	AgentVersion *string `json:"agentVersion,omitempty" xml:"agentVersion,omitempty"`
	AppId        *string `json:"appId,omitempty" xml:"appId,omitempty"`
	LicenseKey   *string `json:"licenseKey,omitempty" xml:"licenseKey,omitempty"`
}

func (s ArmsConfig) String() string {
	return tea.Prettify(s)
}

func (s ArmsConfig) GoString() string {
	return s.String()
}

func (s *ArmsConfig) SetAgentVersion(v string) *ArmsConfig {
	s.AgentVersion = &v
	return s
}

func (s *ArmsConfig) SetAppId(v string) *ArmsConfig {
	s.AppId = &v
	return s
}

func (s *ArmsConfig) SetLicenseKey(v string) *ArmsConfig {
	s.LicenseKey = &v
	return s
}

type BuildPipeline struct {
	// This parameter is required.
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	// This parameter is required.
	ApplicationName *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	// This parameter is required.
	BuildConfig *BuildPipelineBuildConfig `json:"BuildConfig,omitempty" xml:"BuildConfig,omitempty" type:"Struct"`
	// This parameter is required.
	CodeConfig    *BuildPipelineCodeConfig    `json:"CodeConfig,omitempty" xml:"CodeConfig,omitempty" type:"Struct"`
	DeployConfig  *BuildPipelineDeployConfig  `json:"DeployConfig,omitempty" xml:"DeployConfig,omitempty" type:"Struct"`
	Enabled       *bool                       `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	ImageConfig   *BuildPipelineImageConfig   `json:"ImageConfig,omitempty" xml:"ImageConfig,omitempty" type:"Struct"`
	PackageConfig *BuildPipelinePackageConfig `json:"PackageConfig,omitempty" xml:"PackageConfig,omitempty" type:"Struct"`
	// This parameter is required.
	TriggerConfig *BuildPipelineTriggerConfig `json:"TriggerConfig,omitempty" xml:"TriggerConfig,omitempty" type:"Struct"`
}

func (s BuildPipeline) String() string {
	return tea.Prettify(s)
}

func (s BuildPipeline) GoString() string {
	return s.String()
}

func (s *BuildPipeline) SetApplicationId(v string) *BuildPipeline {
	s.ApplicationId = &v
	return s
}

func (s *BuildPipeline) SetApplicationName(v string) *BuildPipeline {
	s.ApplicationName = &v
	return s
}

func (s *BuildPipeline) SetBuildConfig(v *BuildPipelineBuildConfig) *BuildPipeline {
	s.BuildConfig = v
	return s
}

func (s *BuildPipeline) SetCodeConfig(v *BuildPipelineCodeConfig) *BuildPipeline {
	s.CodeConfig = v
	return s
}

func (s *BuildPipeline) SetDeployConfig(v *BuildPipelineDeployConfig) *BuildPipeline {
	s.DeployConfig = v
	return s
}

func (s *BuildPipeline) SetEnabled(v bool) *BuildPipeline {
	s.Enabled = &v
	return s
}

func (s *BuildPipeline) SetImageConfig(v *BuildPipelineImageConfig) *BuildPipeline {
	s.ImageConfig = v
	return s
}

func (s *BuildPipeline) SetPackageConfig(v *BuildPipelinePackageConfig) *BuildPipeline {
	s.PackageConfig = v
	return s
}

func (s *BuildPipeline) SetTriggerConfig(v *BuildPipelineTriggerConfig) *BuildPipeline {
	s.TriggerConfig = v
	return s
}

type BuildPipelineBuildConfig struct {
	// example:
	//
	// mvn clean package
	BeforeBuildCommand *string `json:"BeforeBuildCommand,omitempty" xml:"BeforeBuildCommand,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// buildpacks/dockerfile
	BuildType *string `json:"BuildType,omitempty" xml:"BuildType,omitempty"`
	// example:
	//
	// code/Dockerfile
	DockerfilePath *string `json:"DockerfilePath,omitempty" xml:"DockerfilePath,omitempty"`
	// example:
	//
	// java -jar target/app.jar
	RunCommand     *string       `json:"RunCommand,omitempty" xml:"RunCommand,omitempty"`
	RuntimeType    *string       `json:"RuntimeType,omitempty" xml:"RuntimeType,omitempty"`
	RuntimeVersion *string       `json:"RuntimeVersion,omitempty" xml:"RuntimeVersion,omitempty"`
	TomcatConfig   *TomcatConfig `json:"TomcatConfig,omitempty" xml:"TomcatConfig,omitempty"`
	// example:
	//
	// code
	WorkingDir *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
}

func (s BuildPipelineBuildConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineBuildConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineBuildConfig) SetBeforeBuildCommand(v string) *BuildPipelineBuildConfig {
	s.BeforeBuildCommand = &v
	return s
}

func (s *BuildPipelineBuildConfig) SetBuildType(v string) *BuildPipelineBuildConfig {
	s.BuildType = &v
	return s
}

func (s *BuildPipelineBuildConfig) SetDockerfilePath(v string) *BuildPipelineBuildConfig {
	s.DockerfilePath = &v
	return s
}

func (s *BuildPipelineBuildConfig) SetRunCommand(v string) *BuildPipelineBuildConfig {
	s.RunCommand = &v
	return s
}

func (s *BuildPipelineBuildConfig) SetRuntimeType(v string) *BuildPipelineBuildConfig {
	s.RuntimeType = &v
	return s
}

func (s *BuildPipelineBuildConfig) SetRuntimeVersion(v string) *BuildPipelineBuildConfig {
	s.RuntimeVersion = &v
	return s
}

func (s *BuildPipelineBuildConfig) SetTomcatConfig(v *TomcatConfig) *BuildPipelineBuildConfig {
	s.TomcatConfig = v
	return s
}

func (s *BuildPipelineBuildConfig) SetWorkingDir(v string) *BuildPipelineBuildConfig {
	s.WorkingDir = &v
	return s
}

type BuildPipelineCodeConfig struct {
	// This parameter is required.
	//
	// example:
	//
	// 10000
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	BranchName     *string `json:"BranchName,omitempty" xml:"BranchName,omitempty"`
	CommitId       *string `json:"CommitId,omitempty" xml:"CommitId,omitempty"`
	CommitUrl      *string `json:"CommitUrl,omitempty" xml:"CommitUrl,omitempty"`
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// github/gitee/gitlab等
	Provider *string `json:"Provider,omitempty" xml:"Provider,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// sae-samples/java-maven-demo
	RepoFullName *string `json:"RepoFullName,omitempty" xml:"RepoFullName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3001
	RepoId *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
}

func (s BuildPipelineCodeConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineCodeConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineCodeConfig) SetAccountId(v string) *BuildPipelineCodeConfig {
	s.AccountId = &v
	return s
}

func (s *BuildPipelineCodeConfig) SetBranchName(v string) *BuildPipelineCodeConfig {
	s.BranchName = &v
	return s
}

func (s *BuildPipelineCodeConfig) SetCommitId(v string) *BuildPipelineCodeConfig {
	s.CommitId = &v
	return s
}

func (s *BuildPipelineCodeConfig) SetCommitUrl(v string) *BuildPipelineCodeConfig {
	s.CommitUrl = &v
	return s
}

func (s *BuildPipelineCodeConfig) SetOrganizationId(v string) *BuildPipelineCodeConfig {
	s.OrganizationId = &v
	return s
}

func (s *BuildPipelineCodeConfig) SetProvider(v string) *BuildPipelineCodeConfig {
	s.Provider = &v
	return s
}

func (s *BuildPipelineCodeConfig) SetRepoFullName(v string) *BuildPipelineCodeConfig {
	s.RepoFullName = &v
	return s
}

func (s *BuildPipelineCodeConfig) SetRepoId(v string) *BuildPipelineCodeConfig {
	s.RepoId = &v
	return s
}

type BuildPipelineDeployConfig struct {
	AlwaysAllocateCPU      *bool   `json:"AlwaysAllocateCPU,omitempty" xml:"AlwaysAllocateCPU,omitempty"`
	MaximumInstanceCount   *int32  `json:"MaximumInstanceCount,omitempty" xml:"MaximumInstanceCount,omitempty"`
	MinimumInstanceCount   *int32  `json:"MinimumInstanceCount,omitempty" xml:"MinimumInstanceCount,omitempty"`
	UpdateApplicationInput *string `json:"UpdateApplicationInput,omitempty" xml:"UpdateApplicationInput,omitempty"`
	UpdateTraffic          *bool   `json:"UpdateTraffic,omitempty" xml:"UpdateTraffic,omitempty"`
}

func (s BuildPipelineDeployConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineDeployConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineDeployConfig) SetAlwaysAllocateCPU(v bool) *BuildPipelineDeployConfig {
	s.AlwaysAllocateCPU = &v
	return s
}

func (s *BuildPipelineDeployConfig) SetMaximumInstanceCount(v int32) *BuildPipelineDeployConfig {
	s.MaximumInstanceCount = &v
	return s
}

func (s *BuildPipelineDeployConfig) SetMinimumInstanceCount(v int32) *BuildPipelineDeployConfig {
	s.MinimumInstanceCount = &v
	return s
}

func (s *BuildPipelineDeployConfig) SetUpdateApplicationInput(v string) *BuildPipelineDeployConfig {
	s.UpdateApplicationInput = &v
	return s
}

func (s *BuildPipelineDeployConfig) SetUpdateTraffic(v bool) *BuildPipelineDeployConfig {
	s.UpdateTraffic = &v
	return s
}

type BuildPipelineImageConfig struct {
	// example:
	//
	// ACR/ACREE
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Namespace    *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Repository   *string `json:"Repository,omitempty" xml:"Repository,omitempty"`
}

func (s BuildPipelineImageConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineImageConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineImageConfig) SetInstanceType(v string) *BuildPipelineImageConfig {
	s.InstanceType = &v
	return s
}

func (s *BuildPipelineImageConfig) SetNamespace(v string) *BuildPipelineImageConfig {
	s.Namespace = &v
	return s
}

func (s *BuildPipelineImageConfig) SetRepository(v string) *BuildPipelineImageConfig {
	s.Repository = &v
	return s
}

type BuildPipelinePackageConfig struct {
	PackageName *string `json:"PackageName,omitempty" xml:"PackageName,omitempty"`
	// example:
	//
	// war/jar/zip
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// example:
	//
	// http://myoss.oss-cn-****.aliyuncs.com/my-buc/2019-06-30/****.jar
	PackageUrl *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	// example:
	//
	// 1.0.0
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
}

func (s BuildPipelinePackageConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelinePackageConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelinePackageConfig) SetPackageName(v string) *BuildPipelinePackageConfig {
	s.PackageName = &v
	return s
}

func (s *BuildPipelinePackageConfig) SetPackageType(v string) *BuildPipelinePackageConfig {
	s.PackageType = &v
	return s
}

func (s *BuildPipelinePackageConfig) SetPackageUrl(v string) *BuildPipelinePackageConfig {
	s.PackageUrl = &v
	return s
}

func (s *BuildPipelinePackageConfig) SetPackageVersion(v string) *BuildPipelinePackageConfig {
	s.PackageVersion = &v
	return s
}

type BuildPipelineTriggerConfig struct {
	// example:
	//
	// master
	BranchName *string `json:"BranchName,omitempty" xml:"BranchName,omitempty"`
	// example:
	//
	// v1
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// PUSH
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s BuildPipelineTriggerConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineTriggerConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineTriggerConfig) SetBranchName(v string) *BuildPipelineTriggerConfig {
	s.BranchName = &v
	return s
}

func (s *BuildPipelineTriggerConfig) SetTagName(v string) *BuildPipelineTriggerConfig {
	s.TagName = &v
	return s
}

func (s *BuildPipelineTriggerConfig) SetType(v string) *BuildPipelineTriggerConfig {
	s.Type = &v
	return s
}

type BuildPipelineRun struct {
	BuildConfig    *BuildPipelineRunBuildConfig   `json:"BuildConfig,omitempty" xml:"BuildConfig,omitempty" type:"Struct"`
	BuildDuration  *int64                         `json:"BuildDuration,omitempty" xml:"BuildDuration,omitempty"`
	CodeConfig     *BuildPipelineRunCodeConfig    `json:"CodeConfig,omitempty" xml:"CodeConfig,omitempty" type:"Struct"`
	CreateTime     *int64                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DeployConfig   *BuildPipelineRunDeployConfig  `json:"DeployConfig,omitempty" xml:"DeployConfig,omitempty" type:"Struct"`
	DeployDuration *int64                         `json:"DeployDuration,omitempty" xml:"DeployDuration,omitempty"`
	EndTime        *int64                         `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ImageConfig    *BuildPipelineRunImageConfig   `json:"ImageConfig,omitempty" xml:"ImageConfig,omitempty" type:"Struct"`
	PackageConfig  *BuildPipelineRunPackageConfig `json:"PackageConfig,omitempty" xml:"PackageConfig,omitempty" type:"Struct"`
	PipelineId     *string                        `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	PipelineRunId  *string                        `json:"PipelineRunId,omitempty" xml:"PipelineRunId,omitempty"`
	StartTime      *int64                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status         *string                        `json:"Status,omitempty" xml:"Status,omitempty"`
	Steps          []*BuildPipelineRunSteps       `json:"Steps,omitempty" xml:"Steps,omitempty" type:"Repeated"`
	TriggerConfig  *BuildPipelineRunTriggerConfig `json:"TriggerConfig,omitempty" xml:"TriggerConfig,omitempty" type:"Struct"`
	VersionId      *string                        `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
	WaitDuration   *int64                         `json:"WaitDuration,omitempty" xml:"WaitDuration,omitempty"`
}

func (s BuildPipelineRun) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRun) GoString() string {
	return s.String()
}

func (s *BuildPipelineRun) SetBuildConfig(v *BuildPipelineRunBuildConfig) *BuildPipelineRun {
	s.BuildConfig = v
	return s
}

func (s *BuildPipelineRun) SetBuildDuration(v int64) *BuildPipelineRun {
	s.BuildDuration = &v
	return s
}

func (s *BuildPipelineRun) SetCodeConfig(v *BuildPipelineRunCodeConfig) *BuildPipelineRun {
	s.CodeConfig = v
	return s
}

func (s *BuildPipelineRun) SetCreateTime(v int64) *BuildPipelineRun {
	s.CreateTime = &v
	return s
}

func (s *BuildPipelineRun) SetDeployConfig(v *BuildPipelineRunDeployConfig) *BuildPipelineRun {
	s.DeployConfig = v
	return s
}

func (s *BuildPipelineRun) SetDeployDuration(v int64) *BuildPipelineRun {
	s.DeployDuration = &v
	return s
}

func (s *BuildPipelineRun) SetEndTime(v int64) *BuildPipelineRun {
	s.EndTime = &v
	return s
}

func (s *BuildPipelineRun) SetImageConfig(v *BuildPipelineRunImageConfig) *BuildPipelineRun {
	s.ImageConfig = v
	return s
}

func (s *BuildPipelineRun) SetPackageConfig(v *BuildPipelineRunPackageConfig) *BuildPipelineRun {
	s.PackageConfig = v
	return s
}

func (s *BuildPipelineRun) SetPipelineId(v string) *BuildPipelineRun {
	s.PipelineId = &v
	return s
}

func (s *BuildPipelineRun) SetPipelineRunId(v string) *BuildPipelineRun {
	s.PipelineRunId = &v
	return s
}

func (s *BuildPipelineRun) SetStartTime(v int64) *BuildPipelineRun {
	s.StartTime = &v
	return s
}

func (s *BuildPipelineRun) SetStatus(v string) *BuildPipelineRun {
	s.Status = &v
	return s
}

func (s *BuildPipelineRun) SetSteps(v []*BuildPipelineRunSteps) *BuildPipelineRun {
	s.Steps = v
	return s
}

func (s *BuildPipelineRun) SetTriggerConfig(v *BuildPipelineRunTriggerConfig) *BuildPipelineRun {
	s.TriggerConfig = v
	return s
}

func (s *BuildPipelineRun) SetVersionId(v string) *BuildPipelineRun {
	s.VersionId = &v
	return s
}

func (s *BuildPipelineRun) SetWaitDuration(v int64) *BuildPipelineRun {
	s.WaitDuration = &v
	return s
}

type BuildPipelineRunBuildConfig struct {
	// example:
	//
	// mvn clean package
	BeforeBuildCommand *string `json:"BeforeBuildCommand,omitempty" xml:"BeforeBuildCommand,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// buildpacks/dockerfile
	BuildType *string `json:"BuildType,omitempty" xml:"BuildType,omitempty"`
	// example:
	//
	// code/Dockerfile
	DockerfilePath *string `json:"DockerfilePath,omitempty" xml:"DockerfilePath,omitempty"`
	// example:
	//
	// java -jar target/app.jar
	RunCommand     *string       `json:"RunCommand,omitempty" xml:"RunCommand,omitempty"`
	RuntimeType    *string       `json:"RuntimeType,omitempty" xml:"RuntimeType,omitempty"`
	RuntimeVersion *string       `json:"RuntimeVersion,omitempty" xml:"RuntimeVersion,omitempty"`
	TomcatConfig   *TomcatConfig `json:"TomcatConfig,omitempty" xml:"TomcatConfig,omitempty"`
	// This parameter is required.
	Trigger *BuildPipelineRunBuildConfigTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	// example:
	//
	// code
	WorkingDir *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
}

func (s BuildPipelineRunBuildConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRunBuildConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineRunBuildConfig) SetBeforeBuildCommand(v string) *BuildPipelineRunBuildConfig {
	s.BeforeBuildCommand = &v
	return s
}

func (s *BuildPipelineRunBuildConfig) SetBuildType(v string) *BuildPipelineRunBuildConfig {
	s.BuildType = &v
	return s
}

func (s *BuildPipelineRunBuildConfig) SetDockerfilePath(v string) *BuildPipelineRunBuildConfig {
	s.DockerfilePath = &v
	return s
}

func (s *BuildPipelineRunBuildConfig) SetRunCommand(v string) *BuildPipelineRunBuildConfig {
	s.RunCommand = &v
	return s
}

func (s *BuildPipelineRunBuildConfig) SetRuntimeType(v string) *BuildPipelineRunBuildConfig {
	s.RuntimeType = &v
	return s
}

func (s *BuildPipelineRunBuildConfig) SetRuntimeVersion(v string) *BuildPipelineRunBuildConfig {
	s.RuntimeVersion = &v
	return s
}

func (s *BuildPipelineRunBuildConfig) SetTomcatConfig(v *TomcatConfig) *BuildPipelineRunBuildConfig {
	s.TomcatConfig = v
	return s
}

func (s *BuildPipelineRunBuildConfig) SetTrigger(v *BuildPipelineRunBuildConfigTrigger) *BuildPipelineRunBuildConfig {
	s.Trigger = v
	return s
}

func (s *BuildPipelineRunBuildConfig) SetWorkingDir(v string) *BuildPipelineRunBuildConfig {
	s.WorkingDir = &v
	return s
}

type BuildPipelineRunBuildConfigTrigger struct {
	// example:
	//
	// master
	BranchName *string `json:"BranchName,omitempty" xml:"BranchName,omitempty"`
	// example:
	//
	// v1
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// PUSH
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s BuildPipelineRunBuildConfigTrigger) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRunBuildConfigTrigger) GoString() string {
	return s.String()
}

func (s *BuildPipelineRunBuildConfigTrigger) SetBranchName(v string) *BuildPipelineRunBuildConfigTrigger {
	s.BranchName = &v
	return s
}

func (s *BuildPipelineRunBuildConfigTrigger) SetTagName(v string) *BuildPipelineRunBuildConfigTrigger {
	s.TagName = &v
	return s
}

func (s *BuildPipelineRunBuildConfigTrigger) SetType(v string) *BuildPipelineRunBuildConfigTrigger {
	s.Type = &v
	return s
}

type BuildPipelineRunCodeConfig struct {
	// This parameter is required.
	//
	// example:
	//
	// 10000
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	BranchName     *string `json:"BranchName,omitempty" xml:"BranchName,omitempty"`
	CommitId       *string `json:"CommitId,omitempty" xml:"CommitId,omitempty"`
	CommitUrl      *string `json:"CommitUrl,omitempty" xml:"CommitUrl,omitempty"`
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// github/gitee/gitlab等
	Provider *string `json:"Provider,omitempty" xml:"Provider,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// sae-samples/java-maven-demo
	RepoFullName *string `json:"RepoFullName,omitempty" xml:"RepoFullName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3001
	RepoId *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
}

func (s BuildPipelineRunCodeConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRunCodeConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineRunCodeConfig) SetAccountId(v string) *BuildPipelineRunCodeConfig {
	s.AccountId = &v
	return s
}

func (s *BuildPipelineRunCodeConfig) SetBranchName(v string) *BuildPipelineRunCodeConfig {
	s.BranchName = &v
	return s
}

func (s *BuildPipelineRunCodeConfig) SetCommitId(v string) *BuildPipelineRunCodeConfig {
	s.CommitId = &v
	return s
}

func (s *BuildPipelineRunCodeConfig) SetCommitUrl(v string) *BuildPipelineRunCodeConfig {
	s.CommitUrl = &v
	return s
}

func (s *BuildPipelineRunCodeConfig) SetOrganizationId(v string) *BuildPipelineRunCodeConfig {
	s.OrganizationId = &v
	return s
}

func (s *BuildPipelineRunCodeConfig) SetProvider(v string) *BuildPipelineRunCodeConfig {
	s.Provider = &v
	return s
}

func (s *BuildPipelineRunCodeConfig) SetRepoFullName(v string) *BuildPipelineRunCodeConfig {
	s.RepoFullName = &v
	return s
}

func (s *BuildPipelineRunCodeConfig) SetRepoId(v string) *BuildPipelineRunCodeConfig {
	s.RepoId = &v
	return s
}

type BuildPipelineRunDeployConfig struct {
	AlwaysAllocateCPU      *bool   `json:"AlwaysAllocateCPU,omitempty" xml:"AlwaysAllocateCPU,omitempty"`
	MaximumInstanceCount   *int32  `json:"MaximumInstanceCount,omitempty" xml:"MaximumInstanceCount,omitempty"`
	MinimumInstanceCount   *int32  `json:"MinimumInstanceCount,omitempty" xml:"MinimumInstanceCount,omitempty"`
	UpdateApplicationInput *string `json:"UpdateApplicationInput,omitempty" xml:"UpdateApplicationInput,omitempty"`
	UpdateTraffic          *bool   `json:"UpdateTraffic,omitempty" xml:"UpdateTraffic,omitempty"`
}

func (s BuildPipelineRunDeployConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRunDeployConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineRunDeployConfig) SetAlwaysAllocateCPU(v bool) *BuildPipelineRunDeployConfig {
	s.AlwaysAllocateCPU = &v
	return s
}

func (s *BuildPipelineRunDeployConfig) SetMaximumInstanceCount(v int32) *BuildPipelineRunDeployConfig {
	s.MaximumInstanceCount = &v
	return s
}

func (s *BuildPipelineRunDeployConfig) SetMinimumInstanceCount(v int32) *BuildPipelineRunDeployConfig {
	s.MinimumInstanceCount = &v
	return s
}

func (s *BuildPipelineRunDeployConfig) SetUpdateApplicationInput(v string) *BuildPipelineRunDeployConfig {
	s.UpdateApplicationInput = &v
	return s
}

func (s *BuildPipelineRunDeployConfig) SetUpdateTraffic(v bool) *BuildPipelineRunDeployConfig {
	s.UpdateTraffic = &v
	return s
}

type BuildPipelineRunImageConfig struct {
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Namespace    *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Repository   *string `json:"Repository,omitempty" xml:"Repository,omitempty"`
}

func (s BuildPipelineRunImageConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRunImageConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineRunImageConfig) SetInstanceType(v string) *BuildPipelineRunImageConfig {
	s.InstanceType = &v
	return s
}

func (s *BuildPipelineRunImageConfig) SetNamespace(v string) *BuildPipelineRunImageConfig {
	s.Namespace = &v
	return s
}

func (s *BuildPipelineRunImageConfig) SetRepository(v string) *BuildPipelineRunImageConfig {
	s.Repository = &v
	return s
}

type BuildPipelineRunPackageConfig struct {
	PackageName    *string `json:"PackageName,omitempty" xml:"PackageName,omitempty"`
	PackageType    *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	PackageUrl     *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
}

func (s BuildPipelineRunPackageConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRunPackageConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineRunPackageConfig) SetPackageName(v string) *BuildPipelineRunPackageConfig {
	s.PackageName = &v
	return s
}

func (s *BuildPipelineRunPackageConfig) SetPackageType(v string) *BuildPipelineRunPackageConfig {
	s.PackageType = &v
	return s
}

func (s *BuildPipelineRunPackageConfig) SetPackageUrl(v string) *BuildPipelineRunPackageConfig {
	s.PackageUrl = &v
	return s
}

func (s *BuildPipelineRunPackageConfig) SetPackageVersion(v string) *BuildPipelineRunPackageConfig {
	s.PackageVersion = &v
	return s
}

type BuildPipelineRunSteps struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Duration    *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime     *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Result      *string `json:"Result,omitempty" xml:"Result,omitempty"`
	StartTime   *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s BuildPipelineRunSteps) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRunSteps) GoString() string {
	return s.String()
}

func (s *BuildPipelineRunSteps) SetDescription(v string) *BuildPipelineRunSteps {
	s.Description = &v
	return s
}

func (s *BuildPipelineRunSteps) SetDuration(v int64) *BuildPipelineRunSteps {
	s.Duration = &v
	return s
}

func (s *BuildPipelineRunSteps) SetEndTime(v int64) *BuildPipelineRunSteps {
	s.EndTime = &v
	return s
}

func (s *BuildPipelineRunSteps) SetId(v string) *BuildPipelineRunSteps {
	s.Id = &v
	return s
}

func (s *BuildPipelineRunSteps) SetName(v string) *BuildPipelineRunSteps {
	s.Name = &v
	return s
}

func (s *BuildPipelineRunSteps) SetResult(v string) *BuildPipelineRunSteps {
	s.Result = &v
	return s
}

func (s *BuildPipelineRunSteps) SetStartTime(v int64) *BuildPipelineRunSteps {
	s.StartTime = &v
	return s
}

func (s *BuildPipelineRunSteps) SetStatus(v string) *BuildPipelineRunSteps {
	s.Status = &v
	return s
}

type BuildPipelineRunTriggerConfig struct {
	BranchName *string `json:"BranchName,omitempty" xml:"BranchName,omitempty"`
	TagName    *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s BuildPipelineRunTriggerConfig) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRunTriggerConfig) GoString() string {
	return s.String()
}

func (s *BuildPipelineRunTriggerConfig) SetBranchName(v string) *BuildPipelineRunTriggerConfig {
	s.BranchName = &v
	return s
}

func (s *BuildPipelineRunTriggerConfig) SetTagName(v string) *BuildPipelineRunTriggerConfig {
	s.TagName = &v
	return s
}

func (s *BuildPipelineRunTriggerConfig) SetType(v string) *BuildPipelineRunTriggerConfig {
	s.Type = &v
	return s
}

type BuildPipelineRunLogLine struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Offset  *int64  `json:"Offset,omitempty" xml:"Offset,omitempty"`
}

func (s BuildPipelineRunLogLine) String() string {
	return tea.Prettify(s)
}

func (s BuildPipelineRunLogLine) GoString() string {
	return s.String()
}

func (s *BuildPipelineRunLogLine) SetContent(v string) *BuildPipelineRunLogLine {
	s.Content = &v
	return s
}

func (s *BuildPipelineRunLogLine) SetOffset(v int64) *BuildPipelineRunLogLine {
	s.Offset = &v
	return s
}

type CertConfig struct {
	CertName    *string `json:"certName,omitempty" xml:"certName,omitempty"`
	Certificate *string `json:"certificate,omitempty" xml:"certificate,omitempty"`
	PrivateKey  *string `json:"privateKey,omitempty" xml:"privateKey,omitempty"`
}

func (s CertConfig) String() string {
	return tea.Prettify(s)
}

func (s CertConfig) GoString() string {
	return s.String()
}

func (s *CertConfig) SetCertName(v string) *CertConfig {
	s.CertName = &v
	return s
}

func (s *CertConfig) SetCertificate(v string) *CertConfig {
	s.Certificate = &v
	return s
}

func (s *CertConfig) SetPrivateKey(v string) *CertConfig {
	s.PrivateKey = &v
	return s
}

type Container struct {
	// example:
	//
	// ["abc", ">", "file0"]
	Args *string `json:"Args,omitempty" xml:"Args,omitempty"`
	// example:
	//
	// ["/bin/sh"]
	Command              *string            `json:"Command,omitempty" xml:"Command,omitempty"`
	EnvironmentVariables map[string]*string `json:"EnvironmentVariables,omitempty" xml:"EnvironmentVariables,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// registry.cn-shanghai.aliyuncs.com/serverless_devsxxxxx
	Image                *string               `json:"Image,omitempty" xml:"Image,omitempty"`
	MetricsCollectConfig *MetricsCollectConfig `json:"MetricsCollectConfig,omitempty" xml:"MetricsCollectConfig,omitempty"`
	// example:
	//
	// 8080
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// 100
	RequestConcurrency *int32 `json:"RequestConcurrency,omitempty" xml:"RequestConcurrency,omitempty"`
	// example:
	//
	// 60
	RequestTimeout *int32 `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// This parameter is required.
	Resources         *ContainerResources `json:"Resources,omitempty" xml:"Resources,omitempty"`
	SLSCollectConfigs *SLSCollectConfigs  `json:"SLSCollectConfigs,omitempty" xml:"SLSCollectConfigs,omitempty"`
	StartupProbe      *StartupProbe       `json:"StartupProbe,omitempty" xml:"StartupProbe,omitempty"`
	WebNASConfig      *WebNASConfig       `json:"WebNASConfig,omitempty" xml:"WebNASConfig,omitempty"`
	WebOSSConfig      *WebOSSConfig       `json:"WebOSSConfig,omitempty" xml:"WebOSSConfig,omitempty"`
}

func (s Container) String() string {
	return tea.Prettify(s)
}

func (s Container) GoString() string {
	return s.String()
}

func (s *Container) SetArgs(v string) *Container {
	s.Args = &v
	return s
}

func (s *Container) SetCommand(v string) *Container {
	s.Command = &v
	return s
}

func (s *Container) SetEnvironmentVariables(v map[string]*string) *Container {
	s.EnvironmentVariables = v
	return s
}

func (s *Container) SetImage(v string) *Container {
	s.Image = &v
	return s
}

func (s *Container) SetMetricsCollectConfig(v *MetricsCollectConfig) *Container {
	s.MetricsCollectConfig = v
	return s
}

func (s *Container) SetPort(v int32) *Container {
	s.Port = &v
	return s
}

func (s *Container) SetRequestConcurrency(v int32) *Container {
	s.RequestConcurrency = &v
	return s
}

func (s *Container) SetRequestTimeout(v int32) *Container {
	s.RequestTimeout = &v
	return s
}

func (s *Container) SetResources(v *ContainerResources) *Container {
	s.Resources = v
	return s
}

func (s *Container) SetSLSCollectConfigs(v *SLSCollectConfigs) *Container {
	s.SLSCollectConfigs = v
	return s
}

func (s *Container) SetStartupProbe(v *StartupProbe) *Container {
	s.StartupProbe = v
	return s
}

func (s *Container) SetWebNASConfig(v *WebNASConfig) *Container {
	s.WebNASConfig = v
	return s
}

func (s *Container) SetWebOSSConfig(v *WebOSSConfig) *Container {
	s.WebOSSConfig = v
	return s
}

type ContainerResources struct {
	// This parameter is required.
	//
	// example:
	//
	// 2000
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2048
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s ContainerResources) String() string {
	return tea.Prettify(s)
}

func (s ContainerResources) GoString() string {
	return s.String()
}

func (s *ContainerResources) SetCpu(v int32) *ContainerResources {
	s.Cpu = &v
	return s
}

func (s *ContainerResources) SetMemory(v int32) *ContainerResources {
	s.Memory = &v
	return s
}

type CreateApplicationInput struct {
	ApplicationName         *string                  `json:"applicationName,omitempty" xml:"applicationName,omitempty"`
	Args                    *string                  `json:"args,omitempty" xml:"args,omitempty"`
	CaPort                  *int32                   `json:"caPort,omitempty" xml:"caPort,omitempty"`
	Code                    *InputCodeLocation       `json:"code,omitempty" xml:"code,omitempty"`
	Command                 *string                  `json:"command,omitempty" xml:"command,omitempty"`
	Cpu                     *float32                 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	CustomDNS               *CustomDNS               `json:"customDNS,omitempty" xml:"customDNS,omitempty"`
	CustomHealthCheckConfig *CustomHealthCheckConfig `json:"customHealthCheckConfig,omitempty" xml:"customHealthCheckConfig,omitempty"`
	CustomHostAlias         *CustomHostAlias         `json:"customHostAlias,omitempty" xml:"customHostAlias,omitempty"`
	CustomRuntimeConfig     *CustomRuntimeConfig     `json:"customRuntimeConfig,omitempty" xml:"customRuntimeConfig,omitempty"`
	Description             *string                  `json:"description,omitempty" xml:"description,omitempty"`
	DiskSize                *int32                   `json:"diskSize,omitempty" xml:"diskSize,omitempty"`
	EnableAppMetric         *bool                    `json:"enableAppMetric,omitempty" xml:"enableAppMetric,omitempty"`
	EnvironmentVariables    map[string]*string       `json:"environmentVariables,omitempty" xml:"environmentVariables,omitempty"`
	GpuMemorySize           *int32                   `json:"gpuMemorySize,omitempty" xml:"gpuMemorySize,omitempty"`
	Handler                 *string                  `json:"handler,omitempty" xml:"handler,omitempty"`
	HttpTriggerConfig       *HTTPTriggerConfig       `json:"httpTriggerConfig,omitempty" xml:"httpTriggerConfig,omitempty"`
	ImageConfig             *ImageConfig             `json:"imageConfig,omitempty" xml:"imageConfig,omitempty"`
	InitializationTimeout   *int32                   `json:"initializationTimeout,omitempty" xml:"initializationTimeout,omitempty"`
	Initializer             *string                  `json:"initializer,omitempty" xml:"initializer,omitempty"`
	InstanceConcurrency     *int32                   `json:"instanceConcurrency,omitempty" xml:"instanceConcurrency,omitempty"`
	InstanceLifecycleConfig *InstanceLifecycleConfig `json:"instanceLifecycleConfig,omitempty" xml:"instanceLifecycleConfig,omitempty"`
	InstanceSoftConcurrency *int32                   `json:"instanceSoftConcurrency,omitempty" xml:"instanceSoftConcurrency,omitempty"`
	InstanceType            *string                  `json:"instanceType,omitempty" xml:"instanceType,omitempty"`
	InternetAccess          *bool                    `json:"internetAccess,omitempty" xml:"internetAccess,omitempty"`
	Layers                  []*string                `json:"layers,omitempty" xml:"layers,omitempty" type:"Repeated"`
	LivenessProbe           *Probe                   `json:"livenessProbe,omitempty" xml:"livenessProbe,omitempty"`
	LogConfig               *LogConfig               `json:"logConfig,omitempty" xml:"logConfig,omitempty"`
	MemorySize              *int32                   `json:"memorySize,omitempty" xml:"memorySize,omitempty"`
	NamespaceID             *string                  `json:"namespaceID,omitempty" xml:"namespaceID,omitempty"`
	NasConfig               *NASConfig               `json:"nasConfig,omitempty" xml:"nasConfig,omitempty"`
	OssMountConfig          *OSSMountConfig          `json:"ossMountConfig,omitempty" xml:"ossMountConfig,omitempty"`
	ProgrammingLanguage     *string                  `json:"programmingLanguage,omitempty" xml:"programmingLanguage,omitempty"`
	Runtime                 *string                  `json:"runtime,omitempty" xml:"runtime,omitempty"`
	ScaleConfig             *ScaleConfig             `json:"scaleConfig,omitempty" xml:"scaleConfig,omitempty"`
	SlsConfig               *SLSConfig               `json:"slsConfig,omitempty" xml:"slsConfig,omitempty"`
	StartupProbe            *Probe                   `json:"startupProbe,omitempty" xml:"startupProbe,omitempty"`
	Timeout                 *int32                   `json:"timeout,omitempty" xml:"timeout,omitempty"`
	TracingConfig           *TracingConfig           `json:"tracingConfig,omitempty" xml:"tracingConfig,omitempty"`
	VpcConfig               *VPCConfig               `json:"vpcConfig,omitempty" xml:"vpcConfig,omitempty"`
}

func (s CreateApplicationInput) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationInput) GoString() string {
	return s.String()
}

func (s *CreateApplicationInput) SetApplicationName(v string) *CreateApplicationInput {
	s.ApplicationName = &v
	return s
}

func (s *CreateApplicationInput) SetArgs(v string) *CreateApplicationInput {
	s.Args = &v
	return s
}

func (s *CreateApplicationInput) SetCaPort(v int32) *CreateApplicationInput {
	s.CaPort = &v
	return s
}

func (s *CreateApplicationInput) SetCode(v *InputCodeLocation) *CreateApplicationInput {
	s.Code = v
	return s
}

func (s *CreateApplicationInput) SetCommand(v string) *CreateApplicationInput {
	s.Command = &v
	return s
}

func (s *CreateApplicationInput) SetCpu(v float32) *CreateApplicationInput {
	s.Cpu = &v
	return s
}

func (s *CreateApplicationInput) SetCustomDNS(v *CustomDNS) *CreateApplicationInput {
	s.CustomDNS = v
	return s
}

func (s *CreateApplicationInput) SetCustomHealthCheckConfig(v *CustomHealthCheckConfig) *CreateApplicationInput {
	s.CustomHealthCheckConfig = v
	return s
}

func (s *CreateApplicationInput) SetCustomHostAlias(v *CustomHostAlias) *CreateApplicationInput {
	s.CustomHostAlias = v
	return s
}

func (s *CreateApplicationInput) SetCustomRuntimeConfig(v *CustomRuntimeConfig) *CreateApplicationInput {
	s.CustomRuntimeConfig = v
	return s
}

func (s *CreateApplicationInput) SetDescription(v string) *CreateApplicationInput {
	s.Description = &v
	return s
}

func (s *CreateApplicationInput) SetDiskSize(v int32) *CreateApplicationInput {
	s.DiskSize = &v
	return s
}

func (s *CreateApplicationInput) SetEnableAppMetric(v bool) *CreateApplicationInput {
	s.EnableAppMetric = &v
	return s
}

func (s *CreateApplicationInput) SetEnvironmentVariables(v map[string]*string) *CreateApplicationInput {
	s.EnvironmentVariables = v
	return s
}

func (s *CreateApplicationInput) SetGpuMemorySize(v int32) *CreateApplicationInput {
	s.GpuMemorySize = &v
	return s
}

func (s *CreateApplicationInput) SetHandler(v string) *CreateApplicationInput {
	s.Handler = &v
	return s
}

func (s *CreateApplicationInput) SetHttpTriggerConfig(v *HTTPTriggerConfig) *CreateApplicationInput {
	s.HttpTriggerConfig = v
	return s
}

func (s *CreateApplicationInput) SetImageConfig(v *ImageConfig) *CreateApplicationInput {
	s.ImageConfig = v
	return s
}

func (s *CreateApplicationInput) SetInitializationTimeout(v int32) *CreateApplicationInput {
	s.InitializationTimeout = &v
	return s
}

func (s *CreateApplicationInput) SetInitializer(v string) *CreateApplicationInput {
	s.Initializer = &v
	return s
}

func (s *CreateApplicationInput) SetInstanceConcurrency(v int32) *CreateApplicationInput {
	s.InstanceConcurrency = &v
	return s
}

func (s *CreateApplicationInput) SetInstanceLifecycleConfig(v *InstanceLifecycleConfig) *CreateApplicationInput {
	s.InstanceLifecycleConfig = v
	return s
}

func (s *CreateApplicationInput) SetInstanceSoftConcurrency(v int32) *CreateApplicationInput {
	s.InstanceSoftConcurrency = &v
	return s
}

func (s *CreateApplicationInput) SetInstanceType(v string) *CreateApplicationInput {
	s.InstanceType = &v
	return s
}

func (s *CreateApplicationInput) SetInternetAccess(v bool) *CreateApplicationInput {
	s.InternetAccess = &v
	return s
}

func (s *CreateApplicationInput) SetLayers(v []*string) *CreateApplicationInput {
	s.Layers = v
	return s
}

func (s *CreateApplicationInput) SetLivenessProbe(v *Probe) *CreateApplicationInput {
	s.LivenessProbe = v
	return s
}

func (s *CreateApplicationInput) SetLogConfig(v *LogConfig) *CreateApplicationInput {
	s.LogConfig = v
	return s
}

func (s *CreateApplicationInput) SetMemorySize(v int32) *CreateApplicationInput {
	s.MemorySize = &v
	return s
}

func (s *CreateApplicationInput) SetNamespaceID(v string) *CreateApplicationInput {
	s.NamespaceID = &v
	return s
}

func (s *CreateApplicationInput) SetNasConfig(v *NASConfig) *CreateApplicationInput {
	s.NasConfig = v
	return s
}

func (s *CreateApplicationInput) SetOssMountConfig(v *OSSMountConfig) *CreateApplicationInput {
	s.OssMountConfig = v
	return s
}

func (s *CreateApplicationInput) SetProgrammingLanguage(v string) *CreateApplicationInput {
	s.ProgrammingLanguage = &v
	return s
}

func (s *CreateApplicationInput) SetRuntime(v string) *CreateApplicationInput {
	s.Runtime = &v
	return s
}

func (s *CreateApplicationInput) SetScaleConfig(v *ScaleConfig) *CreateApplicationInput {
	s.ScaleConfig = v
	return s
}

func (s *CreateApplicationInput) SetSlsConfig(v *SLSConfig) *CreateApplicationInput {
	s.SlsConfig = v
	return s
}

func (s *CreateApplicationInput) SetStartupProbe(v *Probe) *CreateApplicationInput {
	s.StartupProbe = v
	return s
}

func (s *CreateApplicationInput) SetTimeout(v int32) *CreateApplicationInput {
	s.Timeout = &v
	return s
}

func (s *CreateApplicationInput) SetTracingConfig(v *TracingConfig) *CreateApplicationInput {
	s.TracingConfig = v
	return s
}

func (s *CreateApplicationInput) SetVpcConfig(v *VPCConfig) *CreateApplicationInput {
	s.VpcConfig = v
	return s
}

type CreateCustomDomainInput struct {
	ApplicationName *string     `json:"applicationName,omitempty" xml:"applicationName,omitempty"`
	CertConfig      *CertConfig `json:"certConfig,omitempty" xml:"certConfig,omitempty"`
	DomainName      *string     `json:"domainName,omitempty" xml:"domainName,omitempty"`
	KeepFullPath    *bool       `json:"keepFullPath,omitempty" xml:"keepFullPath,omitempty"`
	NamespaceID     *string     `json:"namespaceID,omitempty" xml:"namespaceID,omitempty"`
	Protocol        *string     `json:"protocol,omitempty" xml:"protocol,omitempty"`
	TlsConfig       *TLSConfig  `json:"tlsConfig,omitempty" xml:"tlsConfig,omitempty"`
	WafConfig       *WAFConfig  `json:"wafConfig,omitempty" xml:"wafConfig,omitempty"`
}

func (s CreateCustomDomainInput) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomDomainInput) GoString() string {
	return s.String()
}

func (s *CreateCustomDomainInput) SetApplicationName(v string) *CreateCustomDomainInput {
	s.ApplicationName = &v
	return s
}

func (s *CreateCustomDomainInput) SetCertConfig(v *CertConfig) *CreateCustomDomainInput {
	s.CertConfig = v
	return s
}

func (s *CreateCustomDomainInput) SetDomainName(v string) *CreateCustomDomainInput {
	s.DomainName = &v
	return s
}

func (s *CreateCustomDomainInput) SetKeepFullPath(v bool) *CreateCustomDomainInput {
	s.KeepFullPath = &v
	return s
}

func (s *CreateCustomDomainInput) SetNamespaceID(v string) *CreateCustomDomainInput {
	s.NamespaceID = &v
	return s
}

func (s *CreateCustomDomainInput) SetProtocol(v string) *CreateCustomDomainInput {
	s.Protocol = &v
	return s
}

func (s *CreateCustomDomainInput) SetTlsConfig(v *TLSConfig) *CreateCustomDomainInput {
	s.TlsConfig = v
	return s
}

func (s *CreateCustomDomainInput) SetWafConfig(v *WAFConfig) *CreateCustomDomainInput {
	s.WafConfig = v
	return s
}

type CreateSlsIndexRequest struct {
	Logstore *string `json:"logstore,omitempty" xml:"logstore,omitempty"`
	Project  *string `json:"project,omitempty" xml:"project,omitempty"`
}

func (s CreateSlsIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSlsIndexRequest) GoString() string {
	return s.String()
}

func (s *CreateSlsIndexRequest) SetLogstore(v string) *CreateSlsIndexRequest {
	s.Logstore = &v
	return s
}

func (s *CreateSlsIndexRequest) SetProject(v string) *CreateSlsIndexRequest {
	s.Project = &v
	return s
}

type CreateSlsIndexResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LogStore  *string `json:"logStore,omitempty" xml:"logStore,omitempty"`
	Project   *string `json:"project,omitempty" xml:"project,omitempty"`
}

func (s CreateSlsIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSlsIndexResponse) GoString() string {
	return s.String()
}

func (s *CreateSlsIndexResponse) SetRequestId(v string) *CreateSlsIndexResponse {
	s.RequestId = &v
	return s
}

func (s *CreateSlsIndexResponse) SetLogStore(v string) *CreateSlsIndexResponse {
	s.LogStore = &v
	return s
}

func (s *CreateSlsIndexResponse) SetProject(v string) *CreateSlsIndexResponse {
	s.Project = &v
	return s
}

type CreateSlsResourceResponse struct {
	LogStore  *string `json:"logStore,omitempty" xml:"logStore,omitempty"`
	Project   *string `json:"project,omitempty" xml:"project,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s CreateSlsResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSlsResourceResponse) GoString() string {
	return s.String()
}

func (s *CreateSlsResourceResponse) SetLogStore(v string) *CreateSlsResourceResponse {
	s.LogStore = &v
	return s
}

func (s *CreateSlsResourceResponse) SetProject(v string) *CreateSlsResourceResponse {
	s.Project = &v
	return s
}

func (s *CreateSlsResourceResponse) SetRequestId(v string) *CreateSlsResourceResponse {
	s.RequestId = &v
	return s
}

type CreateWebApplicationInput struct {
	// This parameter is required.
	//
	// example:
	//
	// sae-app
	ApplicationName *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	// example:
	//
	// my sae app
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	RevisionConfig   *RevisionConfig   `json:"RevisionConfig,omitempty" xml:"RevisionConfig,omitempty"`
	WebNetworkConfig *WebNetworkConfig `json:"WebNetworkConfig,omitempty" xml:"WebNetworkConfig,omitempty"`
	WebScalingConfig *WebScalingConfig `json:"WebScalingConfig,omitempty" xml:"WebScalingConfig,omitempty"`
	WebTrafficConfig *WebTrafficConfig `json:"WebTrafficConfig,omitempty" xml:"WebTrafficConfig,omitempty"`
}

func (s CreateWebApplicationInput) String() string {
	return tea.Prettify(s)
}

func (s CreateWebApplicationInput) GoString() string {
	return s.String()
}

func (s *CreateWebApplicationInput) SetApplicationName(v string) *CreateWebApplicationInput {
	s.ApplicationName = &v
	return s
}

func (s *CreateWebApplicationInput) SetDescription(v string) *CreateWebApplicationInput {
	s.Description = &v
	return s
}

func (s *CreateWebApplicationInput) SetRevisionConfig(v *RevisionConfig) *CreateWebApplicationInput {
	s.RevisionConfig = v
	return s
}

func (s *CreateWebApplicationInput) SetWebNetworkConfig(v *WebNetworkConfig) *CreateWebApplicationInput {
	s.WebNetworkConfig = v
	return s
}

func (s *CreateWebApplicationInput) SetWebScalingConfig(v *WebScalingConfig) *CreateWebApplicationInput {
	s.WebScalingConfig = v
	return s
}

func (s *CreateWebApplicationInput) SetWebTrafficConfig(v *WebTrafficConfig) *CreateWebApplicationInput {
	s.WebTrafficConfig = v
	return s
}

type CreateWebCustomDomainInput struct {
	DefaultForwardingAppName *string `json:"DefaultForwardingAppName,omitempty" xml:"DefaultForwardingAppName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// HTTP
	Protocol      *string        `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	RouteConfig   *RouteConfig   `json:"RouteConfig,omitempty" xml:"RouteConfig,omitempty"`
	WebCertConfig *WebCertConfig `json:"WebCertConfig,omitempty" xml:"WebCertConfig,omitempty"`
	WebTLSConfig  *WebTLSConfig  `json:"WebTLSConfig,omitempty" xml:"WebTLSConfig,omitempty"`
	WebWAFConfig  *WebWAFConfig  `json:"WebWAFConfig,omitempty" xml:"WebWAFConfig,omitempty"`
}

func (s CreateWebCustomDomainInput) String() string {
	return tea.Prettify(s)
}

func (s CreateWebCustomDomainInput) GoString() string {
	return s.String()
}

func (s *CreateWebCustomDomainInput) SetDefaultForwardingAppName(v string) *CreateWebCustomDomainInput {
	s.DefaultForwardingAppName = &v
	return s
}

func (s *CreateWebCustomDomainInput) SetDomainName(v string) *CreateWebCustomDomainInput {
	s.DomainName = &v
	return s
}

func (s *CreateWebCustomDomainInput) SetProtocol(v string) *CreateWebCustomDomainInput {
	s.Protocol = &v
	return s
}

func (s *CreateWebCustomDomainInput) SetRouteConfig(v *RouteConfig) *CreateWebCustomDomainInput {
	s.RouteConfig = v
	return s
}

func (s *CreateWebCustomDomainInput) SetWebCertConfig(v *WebCertConfig) *CreateWebCustomDomainInput {
	s.WebCertConfig = v
	return s
}

func (s *CreateWebCustomDomainInput) SetWebTLSConfig(v *WebTLSConfig) *CreateWebCustomDomainInput {
	s.WebTLSConfig = v
	return s
}

func (s *CreateWebCustomDomainInput) SetWebWAFConfig(v *WebWAFConfig) *CreateWebCustomDomainInput {
	s.WebWAFConfig = v
	return s
}

type CustomDNS struct {
	DnsOptions  []*DNSOption `json:"dnsOptions,omitempty" xml:"dnsOptions,omitempty" type:"Repeated"`
	NameServers []*string    `json:"nameServers,omitempty" xml:"nameServers,omitempty" type:"Repeated"`
	Searches    []*string    `json:"searches,omitempty" xml:"searches,omitempty" type:"Repeated"`
}

func (s CustomDNS) String() string {
	return tea.Prettify(s)
}

func (s CustomDNS) GoString() string {
	return s.String()
}

func (s *CustomDNS) SetDnsOptions(v []*DNSOption) *CustomDNS {
	s.DnsOptions = v
	return s
}

func (s *CustomDNS) SetNameServers(v []*string) *CustomDNS {
	s.NameServers = v
	return s
}

func (s *CustomDNS) SetSearches(v []*string) *CustomDNS {
	s.Searches = v
	return s
}

type CustomDomain struct {
	AccountId        *string      `json:"accountId,omitempty" xml:"accountId,omitempty"`
	ApiVersion       *string      `json:"apiVersion,omitempty" xml:"apiVersion,omitempty"`
	CertConfig       *CertConfig  `json:"certConfig,omitempty" xml:"certConfig,omitempty"`
	CreatedTime      *string      `json:"createdTime,omitempty" xml:"createdTime,omitempty"`
	DomainName       *string      `json:"domainName,omitempty" xml:"domainName,omitempty"`
	KeepFullPath     *bool        `json:"keepFullPath,omitempty" xml:"keepFullPath,omitempty"`
	LastModifiedTime *string      `json:"lastModifiedTime,omitempty" xml:"lastModifiedTime,omitempty"`
	NamespaceID      *string      `json:"namespaceID,omitempty" xml:"namespaceID,omitempty"`
	Protocol         *string      `json:"protocol,omitempty" xml:"protocol,omitempty"`
	RequestId        *string      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	RouteConfig      *RouteConfig `json:"routeConfig,omitempty" xml:"routeConfig,omitempty"`
	SubdomainCount   *string      `json:"subdomainCount,omitempty" xml:"subdomainCount,omitempty"`
	TlsConfig        *TLSConfig   `json:"tlsConfig,omitempty" xml:"tlsConfig,omitempty"`
	WafConfig        *WAFConfig   `json:"wafConfig,omitempty" xml:"wafConfig,omitempty"`
}

func (s CustomDomain) String() string {
	return tea.Prettify(s)
}

func (s CustomDomain) GoString() string {
	return s.String()
}

func (s *CustomDomain) SetAccountId(v string) *CustomDomain {
	s.AccountId = &v
	return s
}

func (s *CustomDomain) SetApiVersion(v string) *CustomDomain {
	s.ApiVersion = &v
	return s
}

func (s *CustomDomain) SetCertConfig(v *CertConfig) *CustomDomain {
	s.CertConfig = v
	return s
}

func (s *CustomDomain) SetCreatedTime(v string) *CustomDomain {
	s.CreatedTime = &v
	return s
}

func (s *CustomDomain) SetDomainName(v string) *CustomDomain {
	s.DomainName = &v
	return s
}

func (s *CustomDomain) SetKeepFullPath(v bool) *CustomDomain {
	s.KeepFullPath = &v
	return s
}

func (s *CustomDomain) SetLastModifiedTime(v string) *CustomDomain {
	s.LastModifiedTime = &v
	return s
}

func (s *CustomDomain) SetNamespaceID(v string) *CustomDomain {
	s.NamespaceID = &v
	return s
}

func (s *CustomDomain) SetProtocol(v string) *CustomDomain {
	s.Protocol = &v
	return s
}

func (s *CustomDomain) SetRequestId(v string) *CustomDomain {
	s.RequestId = &v
	return s
}

func (s *CustomDomain) SetRouteConfig(v *RouteConfig) *CustomDomain {
	s.RouteConfig = v
	return s
}

func (s *CustomDomain) SetSubdomainCount(v string) *CustomDomain {
	s.SubdomainCount = &v
	return s
}

func (s *CustomDomain) SetTlsConfig(v *TLSConfig) *CustomDomain {
	s.TlsConfig = v
	return s
}

func (s *CustomDomain) SetWafConfig(v *WAFConfig) *CustomDomain {
	s.WafConfig = v
	return s
}

type CustomHealthCheckConfig struct {
	FailureThreshold    *int32  `json:"failureThreshold,omitempty" xml:"failureThreshold,omitempty"`
	HttpGetUrl          *string `json:"httpGetUrl,omitempty" xml:"httpGetUrl,omitempty"`
	InitialDelaySeconds *int32  `json:"initialDelaySeconds,omitempty" xml:"initialDelaySeconds,omitempty"`
	PeriodSeconds       *int32  `json:"periodSeconds,omitempty" xml:"periodSeconds,omitempty"`
	SuccessThreshold    *int32  `json:"successThreshold,omitempty" xml:"successThreshold,omitempty"`
	TimeoutSeconds      *int32  `json:"timeoutSeconds,omitempty" xml:"timeoutSeconds,omitempty"`
}

func (s CustomHealthCheckConfig) String() string {
	return tea.Prettify(s)
}

func (s CustomHealthCheckConfig) GoString() string {
	return s.String()
}

func (s *CustomHealthCheckConfig) SetFailureThreshold(v int32) *CustomHealthCheckConfig {
	s.FailureThreshold = &v
	return s
}

func (s *CustomHealthCheckConfig) SetHttpGetUrl(v string) *CustomHealthCheckConfig {
	s.HttpGetUrl = &v
	return s
}

func (s *CustomHealthCheckConfig) SetInitialDelaySeconds(v int32) *CustomHealthCheckConfig {
	s.InitialDelaySeconds = &v
	return s
}

func (s *CustomHealthCheckConfig) SetPeriodSeconds(v int32) *CustomHealthCheckConfig {
	s.PeriodSeconds = &v
	return s
}

func (s *CustomHealthCheckConfig) SetSuccessThreshold(v int32) *CustomHealthCheckConfig {
	s.SuccessThreshold = &v
	return s
}

func (s *CustomHealthCheckConfig) SetTimeoutSeconds(v int32) *CustomHealthCheckConfig {
	s.TimeoutSeconds = &v
	return s
}

type CustomHostAlias struct {
	HostAliases []*HostAlias `json:"hostAliases,omitempty" xml:"hostAliases,omitempty" type:"Repeated"`
}

func (s CustomHostAlias) String() string {
	return tea.Prettify(s)
}

func (s CustomHostAlias) GoString() string {
	return s.String()
}

func (s *CustomHostAlias) SetHostAliases(v []*HostAlias) *CustomHostAlias {
	s.HostAliases = v
	return s
}

type CustomRuntimeConfig struct {
	Args    []*string `json:"args,omitempty" xml:"args,omitempty" type:"Repeated"`
	Command []*string `json:"command,omitempty" xml:"command,omitempty" type:"Repeated"`
}

func (s CustomRuntimeConfig) String() string {
	return tea.Prettify(s)
}

func (s CustomRuntimeConfig) GoString() string {
	return s.String()
}

func (s *CustomRuntimeConfig) SetArgs(v []*string) *CustomRuntimeConfig {
	s.Args = v
	return s
}

func (s *CustomRuntimeConfig) SetCommand(v []*string) *CustomRuntimeConfig {
	s.Command = v
	return s
}

type DNSOption struct {
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DNSOption) String() string {
	return tea.Prettify(s)
}

func (s DNSOption) GoString() string {
	return s.String()
}

func (s *DNSOption) SetName(v string) *DNSOption {
	s.Name = &v
	return s
}

func (s *DNSOption) SetValue(v string) *DNSOption {
	s.Value = &v
	return s
}

type DescribeInstanceLogsOutput struct {
	WebLogEntrys []*WebLogEntry `json:"WebLogEntrys,omitempty" xml:"WebLogEntrys,omitempty" type:"Repeated"`
}

func (s DescribeInstanceLogsOutput) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLogsOutput) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLogsOutput) SetWebLogEntrys(v []*WebLogEntry) *DescribeInstanceLogsOutput {
	s.WebLogEntrys = v
	return s
}

type DescribeWebAppStaticsOutput struct {
	Length        *int32            `json:"Length,omitempty" xml:"Length,omitempty"`
	WebAppStatics []*WebStaticsInfo `json:"WebAppStatics,omitempty" xml:"WebAppStatics,omitempty" type:"Repeated"`
}

func (s DescribeWebAppStaticsOutput) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebAppStaticsOutput) GoString() string {
	return s.String()
}

func (s *DescribeWebAppStaticsOutput) SetLength(v int32) *DescribeWebAppStaticsOutput {
	s.Length = &v
	return s
}

func (s *DescribeWebAppStaticsOutput) SetWebAppStatics(v []*WebStaticsInfo) *DescribeWebAppStaticsOutput {
	s.WebAppStatics = v
	return s
}

type DescribeWebStaticsQueryOutput struct {
	Length     *int32            `json:"Length,omitempty" xml:"Length,omitempty"`
	WebStatics []*WebStaticsInfo `json:"WebStatics,omitempty" xml:"WebStatics,omitempty" type:"Repeated"`
}

func (s DescribeWebStaticsQueryOutput) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebStaticsQueryOutput) GoString() string {
	return s.String()
}

func (s *DescribeWebStaticsQueryOutput) SetLength(v int32) *DescribeWebStaticsQueryOutput {
	s.Length = &v
	return s
}

func (s *DescribeWebStaticsQueryOutput) SetWebStatics(v []*WebStaticsInfo) *DescribeWebStaticsQueryOutput {
	s.WebStatics = v
	return s
}

type ExecAction struct {
	Command []*string `json:"command,omitempty" xml:"command,omitempty" type:"Repeated"`
}

func (s ExecAction) String() string {
	return tea.Prettify(s)
}

func (s ExecAction) GoString() string {
	return s.String()
}

func (s *ExecAction) SetCommand(v []*string) *ExecAction {
	s.Command = v
	return s
}

type ExternalErrorSAEWeb struct {
	Code      *int32  `json:"code,omitempty" xml:"code,omitempty"`
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ExternalErrorSAEWeb) String() string {
	return tea.Prettify(s)
}

func (s ExternalErrorSAEWeb) GoString() string {
	return s.String()
}

func (s *ExternalErrorSAEWeb) SetCode(v int32) *ExternalErrorSAEWeb {
	s.Code = &v
	return s
}

func (s *ExternalErrorSAEWeb) SetErrorCode(v string) *ExternalErrorSAEWeb {
	s.ErrorCode = &v
	return s
}

func (s *ExternalErrorSAEWeb) SetMessage(v string) *ExternalErrorSAEWeb {
	s.Message = &v
	return s
}

func (s *ExternalErrorSAEWeb) SetRequestId(v string) *ExternalErrorSAEWeb {
	s.RequestId = &v
	return s
}

func (s *ExternalErrorSAEWeb) SetSuccess(v bool) *ExternalErrorSAEWeb {
	s.Success = &v
	return s
}

type GRPCAction struct {
	Port    *int32  `json:"port,omitempty" xml:"port,omitempty"`
	Service *string `json:"service,omitempty" xml:"service,omitempty"`
}

func (s GRPCAction) String() string {
	return tea.Prettify(s)
}

func (s GRPCAction) GoString() string {
	return s.String()
}

func (s *GRPCAction) SetPort(v int32) *GRPCAction {
	s.Port = &v
	return s
}

func (s *GRPCAction) SetService(v string) *GRPCAction {
	s.Service = &v
	return s
}

type GetApplicationLogsInput struct {
	BackwardLine *int64 `json:"backwardLine,omitempty" xml:"backwardLine,omitempty"`
	// This parameter is required.
	EndTime     *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	ForwardLine *int64  `json:"forwardLine,omitempty" xml:"forwardLine,omitempty"`
	InstanceID  *string `json:"instanceID,omitempty" xml:"instanceID,omitempty"`
	IsTail      *bool   `json:"isTail,omitempty" xml:"isTail,omitempty"`
	Match       *string `json:"match,omitempty" xml:"match,omitempty"`
	Message     *string `json:"message,omitempty" xml:"message,omitempty"`
	Offset      *int64  `json:"offset,omitempty" xml:"offset,omitempty"`
	PackID      *string `json:"packID,omitempty" xml:"packID,omitempty"`
	PackMeta    *string `json:"packMeta,omitempty" xml:"packMeta,omitempty"`
	// This parameter is required.
	StartTime *int64  `json:"startTime,omitempty" xml:"startTime,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	VersionID *string `json:"versionID,omitempty" xml:"versionID,omitempty"`
}

func (s GetApplicationLogsInput) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationLogsInput) GoString() string {
	return s.String()
}

func (s *GetApplicationLogsInput) SetBackwardLine(v int64) *GetApplicationLogsInput {
	s.BackwardLine = &v
	return s
}

func (s *GetApplicationLogsInput) SetEndTime(v int64) *GetApplicationLogsInput {
	s.EndTime = &v
	return s
}

func (s *GetApplicationLogsInput) SetForwardLine(v int64) *GetApplicationLogsInput {
	s.ForwardLine = &v
	return s
}

func (s *GetApplicationLogsInput) SetInstanceID(v string) *GetApplicationLogsInput {
	s.InstanceID = &v
	return s
}

func (s *GetApplicationLogsInput) SetIsTail(v bool) *GetApplicationLogsInput {
	s.IsTail = &v
	return s
}

func (s *GetApplicationLogsInput) SetMatch(v string) *GetApplicationLogsInput {
	s.Match = &v
	return s
}

func (s *GetApplicationLogsInput) SetMessage(v string) *GetApplicationLogsInput {
	s.Message = &v
	return s
}

func (s *GetApplicationLogsInput) SetOffset(v int64) *GetApplicationLogsInput {
	s.Offset = &v
	return s
}

func (s *GetApplicationLogsInput) SetPackID(v string) *GetApplicationLogsInput {
	s.PackID = &v
	return s
}

func (s *GetApplicationLogsInput) SetPackMeta(v string) *GetApplicationLogsInput {
	s.PackMeta = &v
	return s
}

func (s *GetApplicationLogsInput) SetStartTime(v int64) *GetApplicationLogsInput {
	s.StartTime = &v
	return s
}

func (s *GetApplicationLogsInput) SetTimestamp(v string) *GetApplicationLogsInput {
	s.Timestamp = &v
	return s
}

func (s *GetApplicationLogsInput) SetVersionID(v string) *GetApplicationLogsInput {
	s.VersionID = &v
	return s
}

type GetApplicationLogsOutput struct {
	LogEntrys  []*LogEntry `json:"logEntrys,omitempty" xml:"logEntrys,omitempty" type:"Repeated"`
	NextOffset *int64      `json:"nextOffset,omitempty" xml:"nextOffset,omitempty"`
	RequestId  *string     `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s GetApplicationLogsOutput) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationLogsOutput) GoString() string {
	return s.String()
}

func (s *GetApplicationLogsOutput) SetLogEntrys(v []*LogEntry) *GetApplicationLogsOutput {
	s.LogEntrys = v
	return s
}

func (s *GetApplicationLogsOutput) SetNextOffset(v int64) *GetApplicationLogsOutput {
	s.NextOffset = &v
	return s
}

func (s *GetApplicationLogsOutput) SetRequestId(v string) *GetApplicationLogsOutput {
	s.RequestId = &v
	return s
}

type GetInstanceLogsInput struct {
	BackwardLine *int64 `json:"backwardLine,omitempty" xml:"backwardLine,omitempty"`
	// This parameter is required.
	EndTime     *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	ForwardLine *int64  `json:"forwardLine,omitempty" xml:"forwardLine,omitempty"`
	IsTail      *bool   `json:"isTail,omitempty" xml:"isTail,omitempty"`
	Match       *string `json:"match,omitempty" xml:"match,omitempty"`
	Message     *string `json:"message,omitempty" xml:"message,omitempty"`
	Offset      *int64  `json:"offset,omitempty" xml:"offset,omitempty"`
	PackID      *string `json:"packID,omitempty" xml:"packID,omitempty"`
	PackMeta    *string `json:"packMeta,omitempty" xml:"packMeta,omitempty"`
	// This parameter is required.
	StartTime *int64  `json:"startTime,omitempty" xml:"startTime,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	VersionID *string `json:"versionID,omitempty" xml:"versionID,omitempty"`
}

func (s GetInstanceLogsInput) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceLogsInput) GoString() string {
	return s.String()
}

func (s *GetInstanceLogsInput) SetBackwardLine(v int64) *GetInstanceLogsInput {
	s.BackwardLine = &v
	return s
}

func (s *GetInstanceLogsInput) SetEndTime(v int64) *GetInstanceLogsInput {
	s.EndTime = &v
	return s
}

func (s *GetInstanceLogsInput) SetForwardLine(v int64) *GetInstanceLogsInput {
	s.ForwardLine = &v
	return s
}

func (s *GetInstanceLogsInput) SetIsTail(v bool) *GetInstanceLogsInput {
	s.IsTail = &v
	return s
}

func (s *GetInstanceLogsInput) SetMatch(v string) *GetInstanceLogsInput {
	s.Match = &v
	return s
}

func (s *GetInstanceLogsInput) SetMessage(v string) *GetInstanceLogsInput {
	s.Message = &v
	return s
}

func (s *GetInstanceLogsInput) SetOffset(v int64) *GetInstanceLogsInput {
	s.Offset = &v
	return s
}

func (s *GetInstanceLogsInput) SetPackID(v string) *GetInstanceLogsInput {
	s.PackID = &v
	return s
}

func (s *GetInstanceLogsInput) SetPackMeta(v string) *GetInstanceLogsInput {
	s.PackMeta = &v
	return s
}

func (s *GetInstanceLogsInput) SetStartTime(v int64) *GetInstanceLogsInput {
	s.StartTime = &v
	return s
}

func (s *GetInstanceLogsInput) SetTimestamp(v string) *GetInstanceLogsInput {
	s.Timestamp = &v
	return s
}

func (s *GetInstanceLogsInput) SetVersionID(v string) *GetInstanceLogsInput {
	s.VersionID = &v
	return s
}

type GetInstanceLogsOutput struct {
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s GetInstanceLogsOutput) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceLogsOutput) GoString() string {
	return s.String()
}

func (s *GetInstanceLogsOutput) SetData(v string) *GetInstanceLogsOutput {
	s.Data = &v
	return s
}

func (s *GetInstanceLogsOutput) SetRequestId(v string) *GetInstanceLogsOutput {
	s.RequestId = &v
	return s
}

type GetPerRequestLogsInput struct {
	// This parameter is required.
	EndTime     *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	ErrorType   *string `json:"errorType,omitempty" xml:"errorType,omitempty"`
	ForwardLine *int64  `json:"forwardLine,omitempty" xml:"forwardLine,omitempty"`
	InstanceID  *string `json:"instanceID,omitempty" xml:"instanceID,omitempty"`
	IsColdStart *bool   `json:"isColdStart,omitempty" xml:"isColdStart,omitempty"`
	// This parameter is required.
	RequestID *string `json:"requestID,omitempty" xml:"requestID,omitempty"`
	// This parameter is required.
	StartTime *int64  `json:"startTime,omitempty" xml:"startTime,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetPerRequestLogsInput) String() string {
	return tea.Prettify(s)
}

func (s GetPerRequestLogsInput) GoString() string {
	return s.String()
}

func (s *GetPerRequestLogsInput) SetEndTime(v int64) *GetPerRequestLogsInput {
	s.EndTime = &v
	return s
}

func (s *GetPerRequestLogsInput) SetErrorType(v string) *GetPerRequestLogsInput {
	s.ErrorType = &v
	return s
}

func (s *GetPerRequestLogsInput) SetForwardLine(v int64) *GetPerRequestLogsInput {
	s.ForwardLine = &v
	return s
}

func (s *GetPerRequestLogsInput) SetInstanceID(v string) *GetPerRequestLogsInput {
	s.InstanceID = &v
	return s
}

func (s *GetPerRequestLogsInput) SetIsColdStart(v bool) *GetPerRequestLogsInput {
	s.IsColdStart = &v
	return s
}

func (s *GetPerRequestLogsInput) SetRequestID(v string) *GetPerRequestLogsInput {
	s.RequestID = &v
	return s
}

func (s *GetPerRequestLogsInput) SetStartTime(v int64) *GetPerRequestLogsInput {
	s.StartTime = &v
	return s
}

func (s *GetPerRequestLogsInput) SetTimestamp(v string) *GetPerRequestLogsInput {
	s.Timestamp = &v
	return s
}

type GetPerRequestLogsOutput struct {
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s GetPerRequestLogsOutput) String() string {
	return tea.Prettify(s)
}

func (s GetPerRequestLogsOutput) GoString() string {
	return s.String()
}

func (s *GetPerRequestLogsOutput) SetData(v string) *GetPerRequestLogsOutput {
	s.Data = &v
	return s
}

func (s *GetPerRequestLogsOutput) SetRequestId(v string) *GetPerRequestLogsOutput {
	s.RequestId = &v
	return s
}

type GetQuotaOutput struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceLimit *int64  `json:"instanceLimit,omitempty" xml:"instanceLimit,omitempty"`
	InstanceUsed  *int64  `json:"instanceUsed,omitempty" xml:"instanceUsed,omitempty"`
}

func (s GetQuotaOutput) String() string {
	return tea.Prettify(s)
}

func (s GetQuotaOutput) GoString() string {
	return s.String()
}

func (s *GetQuotaOutput) SetRequestId(v string) *GetQuotaOutput {
	s.RequestId = &v
	return s
}

func (s *GetQuotaOutput) SetInstanceLimit(v int64) *GetQuotaOutput {
	s.InstanceLimit = &v
	return s
}

func (s *GetQuotaOutput) SetInstanceUsed(v int64) *GetQuotaOutput {
	s.InstanceUsed = &v
	return s
}

type HTTPGetAction struct {
	Host        *string       `json:"Host,omitempty" xml:"Host,omitempty"`
	HttpHeaders []*HTTPHeader `json:"HttpHeaders,omitempty" xml:"HttpHeaders,omitempty" type:"Repeated"`
	Path        *string       `json:"Path,omitempty" xml:"Path,omitempty"`
	Port        *int32        `json:"Port,omitempty" xml:"Port,omitempty"`
	Scheme      *string       `json:"Scheme,omitempty" xml:"Scheme,omitempty"`
}

func (s HTTPGetAction) String() string {
	return tea.Prettify(s)
}

func (s HTTPGetAction) GoString() string {
	return s.String()
}

func (s *HTTPGetAction) SetHost(v string) *HTTPGetAction {
	s.Host = &v
	return s
}

func (s *HTTPGetAction) SetHttpHeaders(v []*HTTPHeader) *HTTPGetAction {
	s.HttpHeaders = v
	return s
}

func (s *HTTPGetAction) SetPath(v string) *HTTPGetAction {
	s.Path = &v
	return s
}

func (s *HTTPGetAction) SetPort(v int32) *HTTPGetAction {
	s.Port = &v
	return s
}

func (s *HTTPGetAction) SetScheme(v string) *HTTPGetAction {
	s.Scheme = &v
	return s
}

type HTTPHeader struct {
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s HTTPHeader) String() string {
	return tea.Prettify(s)
}

func (s HTTPHeader) GoString() string {
	return s.String()
}

func (s *HTTPHeader) SetName(v string) *HTTPHeader {
	s.Name = &v
	return s
}

func (s *HTTPHeader) SetValue(v string) *HTTPHeader {
	s.Value = &v
	return s
}

type HTTPTriggerConfig struct {
	AclConfig          *AclConfig  `json:"aclConfig,omitempty" xml:"aclConfig,omitempty"`
	AuthConfig         interface{} `json:"authConfig,omitempty" xml:"authConfig,omitempty"`
	AuthType           *string     `json:"authType,omitempty" xml:"authType,omitempty"`
	DisableURLInternet *bool       `json:"disableURLInternet,omitempty" xml:"disableURLInternet,omitempty"`
	SafeMode           *bool       `json:"safeMode,omitempty" xml:"safeMode,omitempty"`
}

func (s HTTPTriggerConfig) String() string {
	return tea.Prettify(s)
}

func (s HTTPTriggerConfig) GoString() string {
	return s.String()
}

func (s *HTTPTriggerConfig) SetAclConfig(v *AclConfig) *HTTPTriggerConfig {
	s.AclConfig = v
	return s
}

func (s *HTTPTriggerConfig) SetAuthConfig(v interface{}) *HTTPTriggerConfig {
	s.AuthConfig = v
	return s
}

func (s *HTTPTriggerConfig) SetAuthType(v string) *HTTPTriggerConfig {
	s.AuthType = &v
	return s
}

func (s *HTTPTriggerConfig) SetDisableURLInternet(v bool) *HTTPTriggerConfig {
	s.DisableURLInternet = &v
	return s
}

func (s *HTTPTriggerConfig) SetSafeMode(v bool) *HTTPTriggerConfig {
	s.SafeMode = &v
	return s
}

type HostAlias struct {
	Hostnames []*string `json:"hostnames,omitempty" xml:"hostnames,omitempty" type:"Repeated"`
	Ip        *string   `json:"ip,omitempty" xml:"ip,omitempty"`
}

func (s HostAlias) String() string {
	return tea.Prettify(s)
}

func (s HostAlias) GoString() string {
	return s.String()
}

func (s *HostAlias) SetHostnames(v []*string) *HostAlias {
	s.Hostnames = v
	return s
}

func (s *HostAlias) SetIp(v string) *HostAlias {
	s.Ip = &v
	return s
}

type ImageConfig struct {
	AccelerationType *string `json:"accelerationType,omitempty" xml:"accelerationType,omitempty"`
	Image            *string `json:"image,omitempty" xml:"image,omitempty"`
	InstanceID       *string `json:"instanceID,omitempty" xml:"instanceID,omitempty"`
}

func (s ImageConfig) String() string {
	return tea.Prettify(s)
}

func (s ImageConfig) GoString() string {
	return s.String()
}

func (s *ImageConfig) SetAccelerationType(v string) *ImageConfig {
	s.AccelerationType = &v
	return s
}

func (s *ImageConfig) SetImage(v string) *ImageConfig {
	s.Image = &v
	return s
}

func (s *ImageConfig) SetInstanceID(v string) *ImageConfig {
	s.InstanceID = &v
	return s
}

type InputCodeLocation struct {
	OssBucketName *string `json:"ossBucketName,omitempty" xml:"ossBucketName,omitempty"`
	OssObjectName *string `json:"ossObjectName,omitempty" xml:"ossObjectName,omitempty"`
	ZipFile       *string `json:"zipFile,omitempty" xml:"zipFile,omitempty"`
}

func (s InputCodeLocation) String() string {
	return tea.Prettify(s)
}

func (s InputCodeLocation) GoString() string {
	return s.String()
}

func (s *InputCodeLocation) SetOssBucketName(v string) *InputCodeLocation {
	s.OssBucketName = &v
	return s
}

func (s *InputCodeLocation) SetOssObjectName(v string) *InputCodeLocation {
	s.OssObjectName = &v
	return s
}

func (s *InputCodeLocation) SetZipFile(v string) *InputCodeLocation {
	s.ZipFile = &v
	return s
}

type InstanceExecAuthorizationInput struct {
	Options *InstanceExecAuthorizationInputOptions `json:"options,omitempty" xml:"options,omitempty"`
}

func (s InstanceExecAuthorizationInput) String() string {
	return tea.Prettify(s)
}

func (s InstanceExecAuthorizationInput) GoString() string {
	return s.String()
}

func (s *InstanceExecAuthorizationInput) SetOptions(v *InstanceExecAuthorizationInputOptions) *InstanceExecAuthorizationInput {
	s.Options = v
	return s
}

type InstanceExecAuthorizationInputOptions struct {
	Command []*string `json:"command,omitempty" xml:"command,omitempty" type:"Repeated"`
	Stderr  *bool     `json:"stderr,omitempty" xml:"stderr,omitempty"`
	Stdin   *bool     `json:"stdin,omitempty" xml:"stdin,omitempty"`
	Stdout  *bool     `json:"stdout,omitempty" xml:"stdout,omitempty"`
	Tty     *bool     `json:"tty,omitempty" xml:"tty,omitempty"`
}

func (s InstanceExecAuthorizationInputOptions) String() string {
	return tea.Prettify(s)
}

func (s InstanceExecAuthorizationInputOptions) GoString() string {
	return s.String()
}

func (s *InstanceExecAuthorizationInputOptions) SetCommand(v []*string) *InstanceExecAuthorizationInputOptions {
	s.Command = v
	return s
}

func (s *InstanceExecAuthorizationInputOptions) SetStderr(v bool) *InstanceExecAuthorizationInputOptions {
	s.Stderr = &v
	return s
}

func (s *InstanceExecAuthorizationInputOptions) SetStdin(v bool) *InstanceExecAuthorizationInputOptions {
	s.Stdin = &v
	return s
}

func (s *InstanceExecAuthorizationInputOptions) SetStdout(v bool) *InstanceExecAuthorizationInputOptions {
	s.Stdout = &v
	return s
}

func (s *InstanceExecAuthorizationInputOptions) SetTty(v bool) *InstanceExecAuthorizationInputOptions {
	s.Tty = &v
	return s
}

type InstanceExecAuthorizationOutput struct {
	AccessKeyId   *string `json:"accessKeyId,omitempty" xml:"accessKeyId,omitempty"`
	AccountId     *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	Authorization *string `json:"authorization,omitempty" xml:"authorization,omitempty"`
	Date          *string `json:"date,omitempty" xml:"date,omitempty"`
	Endpoint      *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	RequestId     *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s InstanceExecAuthorizationOutput) String() string {
	return tea.Prettify(s)
}

func (s InstanceExecAuthorizationOutput) GoString() string {
	return s.String()
}

func (s *InstanceExecAuthorizationOutput) SetAccessKeyId(v string) *InstanceExecAuthorizationOutput {
	s.AccessKeyId = &v
	return s
}

func (s *InstanceExecAuthorizationOutput) SetAccountId(v string) *InstanceExecAuthorizationOutput {
	s.AccountId = &v
	return s
}

func (s *InstanceExecAuthorizationOutput) SetAuthorization(v string) *InstanceExecAuthorizationOutput {
	s.Authorization = &v
	return s
}

func (s *InstanceExecAuthorizationOutput) SetDate(v string) *InstanceExecAuthorizationOutput {
	s.Date = &v
	return s
}

func (s *InstanceExecAuthorizationOutput) SetEndpoint(v string) *InstanceExecAuthorizationOutput {
	s.Endpoint = &v
	return s
}

func (s *InstanceExecAuthorizationOutput) SetRequestId(v string) *InstanceExecAuthorizationOutput {
	s.RequestId = &v
	return s
}

type InstanceInfo struct {
	ImageUrl   *string `json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	Status     *string `json:"status,omitempty" xml:"status,omitempty"`
	VersionId  *string `json:"versionId,omitempty" xml:"versionId,omitempty"`
}

func (s InstanceInfo) String() string {
	return tea.Prettify(s)
}

func (s InstanceInfo) GoString() string {
	return s.String()
}

func (s *InstanceInfo) SetImageUrl(v string) *InstanceInfo {
	s.ImageUrl = &v
	return s
}

func (s *InstanceInfo) SetInstanceId(v string) *InstanceInfo {
	s.InstanceId = &v
	return s
}

func (s *InstanceInfo) SetStatus(v string) *InstanceInfo {
	s.Status = &v
	return s
}

func (s *InstanceInfo) SetVersionId(v string) *InstanceInfo {
	s.VersionId = &v
	return s
}

type InstanceLifecycleConfig struct {
	PreFreeze *LifecycleHook `json:"preFreeze,omitempty" xml:"preFreeze,omitempty"`
	PreStop   *LifecycleHook `json:"preStop,omitempty" xml:"preStop,omitempty"`
}

func (s InstanceLifecycleConfig) String() string {
	return tea.Prettify(s)
}

func (s InstanceLifecycleConfig) GoString() string {
	return s.String()
}

func (s *InstanceLifecycleConfig) SetPreFreeze(v *LifecycleHook) *InstanceLifecycleConfig {
	s.PreFreeze = v
	return s
}

func (s *InstanceLifecycleConfig) SetPreStop(v *LifecycleHook) *InstanceLifecycleConfig {
	s.PreStop = v
	return s
}

type InstanceMetricInfo struct {
	// example:
	//
	// a03aa9f9-3d32-4655-8394-05fd10dcbd8a
	ApplicationID *string `json:"applicationID,omitempty" xml:"applicationID,omitempty"`
	// example:
	//
	// 1.98
	CpuPercent *float32 `json:"cpuPercent,omitempty" xml:"cpuPercent,omitempty"`
	// example:
	//
	// 35.0
	CpuQuotaPercent *float32 `json:"cpuQuotaPercent,omitempty" xml:"cpuQuotaPercent,omitempty"`
	// example:
	//
	// c-6498f0fe-33bb4f9249b54789a023
	InstanceID *string `json:"instanceID,omitempty" xml:"instanceID,omitempty"`
	// example:
	//
	// 512.0
	MemoryLimitMB *float32 `json:"memoryLimitMB,omitempty" xml:"memoryLimitMB,omitempty"`
	// example:
	//
	// 8.81
	MemoryUsageMB *float32 `json:"memoryUsageMB,omitempty" xml:"memoryUsageMB,omitempty"`
	// example:
	//
	// 1686568800000
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s InstanceMetricInfo) String() string {
	return tea.Prettify(s)
}

func (s InstanceMetricInfo) GoString() string {
	return s.String()
}

func (s *InstanceMetricInfo) SetApplicationID(v string) *InstanceMetricInfo {
	s.ApplicationID = &v
	return s
}

func (s *InstanceMetricInfo) SetCpuPercent(v float32) *InstanceMetricInfo {
	s.CpuPercent = &v
	return s
}

func (s *InstanceMetricInfo) SetCpuQuotaPercent(v float32) *InstanceMetricInfo {
	s.CpuQuotaPercent = &v
	return s
}

func (s *InstanceMetricInfo) SetInstanceID(v string) *InstanceMetricInfo {
	s.InstanceID = &v
	return s
}

func (s *InstanceMetricInfo) SetMemoryLimitMB(v float32) *InstanceMetricInfo {
	s.MemoryLimitMB = &v
	return s
}

func (s *InstanceMetricInfo) SetMemoryUsageMB(v float32) *InstanceMetricInfo {
	s.MemoryUsageMB = &v
	return s
}

func (s *InstanceMetricInfo) SetTimestamp(v int64) *InstanceMetricInfo {
	s.Timestamp = &v
	return s
}

type JaegerConfig struct {
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
}

func (s JaegerConfig) String() string {
	return tea.Prettify(s)
}

func (s JaegerConfig) GoString() string {
	return s.String()
}

func (s *JaegerConfig) SetEndpoint(v string) *JaegerConfig {
	s.Endpoint = &v
	return s
}

type LifecycleHook struct {
	Handler *string `json:"handler,omitempty" xml:"handler,omitempty"`
	Timeout *int32  `json:"timeout,omitempty" xml:"timeout,omitempty"`
}

func (s LifecycleHook) String() string {
	return tea.Prettify(s)
}

func (s LifecycleHook) GoString() string {
	return s.String()
}

func (s *LifecycleHook) SetHandler(v string) *LifecycleHook {
	s.Handler = &v
	return s
}

func (s *LifecycleHook) SetTimeout(v int32) *LifecycleHook {
	s.Timeout = &v
	return s
}

type ListApplicationVersionsOutput struct {
	Direction *string    `json:"direction,omitempty" xml:"direction,omitempty"`
	NextToken *string    `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	RequestId *string    `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Versions  []*Version `json:"versions,omitempty" xml:"versions,omitempty" type:"Repeated"`
}

func (s ListApplicationVersionsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationVersionsOutput) GoString() string {
	return s.String()
}

func (s *ListApplicationVersionsOutput) SetDirection(v string) *ListApplicationVersionsOutput {
	s.Direction = &v
	return s
}

func (s *ListApplicationVersionsOutput) SetNextToken(v string) *ListApplicationVersionsOutput {
	s.NextToken = &v
	return s
}

func (s *ListApplicationVersionsOutput) SetRequestId(v string) *ListApplicationVersionsOutput {
	s.RequestId = &v
	return s
}

func (s *ListApplicationVersionsOutput) SetVersions(v []*Version) *ListApplicationVersionsOutput {
	s.Versions = v
	return s
}

type ListApplicationsOutput struct {
	Applications []*Application `json:"applications,omitempty" xml:"applications,omitempty" type:"Repeated"`
	NextToken    *string        `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	RequestId    *string        `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s ListApplicationsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsOutput) GoString() string {
	return s.String()
}

func (s *ListApplicationsOutput) SetApplications(v []*Application) *ListApplicationsOutput {
	s.Applications = v
	return s
}

func (s *ListApplicationsOutput) SetNextToken(v string) *ListApplicationsOutput {
	s.NextToken = &v
	return s
}

func (s *ListApplicationsOutput) SetRequestId(v string) *ListApplicationsOutput {
	s.RequestId = &v
	return s
}

type ListApplicationsWithStatusOutput struct {
	Applications []*ApplicationWithStatus `json:"applications,omitempty" xml:"applications,omitempty" type:"Repeated"`
	NextToken    *string                  `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	RequestId    *string                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s ListApplicationsWithStatusOutput) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsWithStatusOutput) GoString() string {
	return s.String()
}

func (s *ListApplicationsWithStatusOutput) SetApplications(v []*ApplicationWithStatus) *ListApplicationsWithStatusOutput {
	s.Applications = v
	return s
}

func (s *ListApplicationsWithStatusOutput) SetNextToken(v string) *ListApplicationsWithStatusOutput {
	s.NextToken = &v
	return s
}

func (s *ListApplicationsWithStatusOutput) SetRequestId(v string) *ListApplicationsWithStatusOutput {
	s.RequestId = &v
	return s
}

type ListCustomDomainOutput struct {
	CustomDomains []*CustomDomain `json:"customDomains,omitempty" xml:"customDomains,omitempty" type:"Repeated"`
	NextToken     *string         `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	RequestId     *string         `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s ListCustomDomainOutput) String() string {
	return tea.Prettify(s)
}

func (s ListCustomDomainOutput) GoString() string {
	return s.String()
}

func (s *ListCustomDomainOutput) SetCustomDomains(v []*CustomDomain) *ListCustomDomainOutput {
	s.CustomDomains = v
	return s
}

func (s *ListCustomDomainOutput) SetNextToken(v string) *ListCustomDomainOutput {
	s.NextToken = &v
	return s
}

func (s *ListCustomDomainOutput) SetRequestId(v string) *ListCustomDomainOutput {
	s.RequestId = &v
	return s
}

type ListInstancesMetricsOutput struct {
	RequestId   *string               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MetricsList []*InstanceMetricInfo `json:"metricsList,omitempty" xml:"metricsList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// 1234
	TotalCount *int32 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListInstancesMetricsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesMetricsOutput) GoString() string {
	return s.String()
}

func (s *ListInstancesMetricsOutput) SetRequestId(v string) *ListInstancesMetricsOutput {
	s.RequestId = &v
	return s
}

func (s *ListInstancesMetricsOutput) SetMetricsList(v []*InstanceMetricInfo) *ListInstancesMetricsOutput {
	s.MetricsList = v
	return s
}

func (s *ListInstancesMetricsOutput) SetPageNumber(v int32) *ListInstancesMetricsOutput {
	s.PageNumber = &v
	return s
}

func (s *ListInstancesMetricsOutput) SetPageSize(v int32) *ListInstancesMetricsOutput {
	s.PageSize = &v
	return s
}

func (s *ListInstancesMetricsOutput) SetTotalCount(v int32) *ListInstancesMetricsOutput {
	s.TotalCount = &v
	return s
}

type ListInstancesOutput struct {
	CurrentError  *string                   `json:"currentError,omitempty" xml:"currentError,omitempty"`
	Instances     []*InstanceInfo           `json:"instances,omitempty" xml:"instances,omitempty" type:"Repeated"`
	RequestId     *string                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	VersionStatus map[string]*VersionStatus `json:"versionStatus,omitempty" xml:"versionStatus,omitempty"`
}

func (s ListInstancesOutput) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOutput) GoString() string {
	return s.String()
}

func (s *ListInstancesOutput) SetCurrentError(v string) *ListInstancesOutput {
	s.CurrentError = &v
	return s
}

func (s *ListInstancesOutput) SetInstances(v []*InstanceInfo) *ListInstancesOutput {
	s.Instances = v
	return s
}

func (s *ListInstancesOutput) SetRequestId(v string) *ListInstancesOutput {
	s.RequestId = &v
	return s
}

func (s *ListInstancesOutput) SetVersionStatus(v map[string]*VersionStatus) *ListInstancesOutput {
	s.VersionStatus = v
	return s
}

type ListMetricsOutput struct {
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Metrics   map[string][]*MetricInfo `json:"metrics,omitempty" xml:"metrics,omitempty"`
}

func (s ListMetricsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListMetricsOutput) GoString() string {
	return s.String()
}

func (s *ListMetricsOutput) SetRequestId(v string) *ListMetricsOutput {
	s.RequestId = &v
	return s
}

func (s *ListMetricsOutput) SetMetrics(v map[string][]*MetricInfo) *ListMetricsOutput {
	s.Metrics = v
	return s
}

type ListStaticsQueryResponse struct {
	Length  *int64         `json:"length,omitempty" xml:"length,omitempty"`
	Sort    *string        `json:"sort,omitempty" xml:"sort,omitempty"`
	Statics []*StaticsInfo `json:"statics,omitempty" xml:"statics,omitempty" type:"Repeated"`
}

func (s ListStaticsQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListStaticsQueryResponse) GoString() string {
	return s.String()
}

func (s *ListStaticsQueryResponse) SetLength(v int64) *ListStaticsQueryResponse {
	s.Length = &v
	return s
}

func (s *ListStaticsQueryResponse) SetSort(v string) *ListStaticsQueryResponse {
	s.Sort = &v
	return s
}

func (s *ListStaticsQueryResponse) SetStatics(v []*StaticsInfo) *ListStaticsQueryResponse {
	s.Statics = v
	return s
}

type ListWebApplicationInstancesBody struct {
	Code      *int32                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListWebInstancesOutput `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListWebApplicationInstancesBody) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationInstancesBody) GoString() string {
	return s.String()
}

func (s *ListWebApplicationInstancesBody) SetCode(v int32) *ListWebApplicationInstancesBody {
	s.Code = &v
	return s
}

func (s *ListWebApplicationInstancesBody) SetData(v *ListWebInstancesOutput) *ListWebApplicationInstancesBody {
	s.Data = v
	return s
}

func (s *ListWebApplicationInstancesBody) SetMessage(v string) *ListWebApplicationInstancesBody {
	s.Message = &v
	return s
}

func (s *ListWebApplicationInstancesBody) SetRequestId(v string) *ListWebApplicationInstancesBody {
	s.RequestId = &v
	return s
}

func (s *ListWebApplicationInstancesBody) SetSuccess(v bool) *ListWebApplicationInstancesBody {
	s.Success = &v
	return s
}

type ListWebApplicationRevisionsBody struct {
	Code      *int32                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListWebApplicationRevisionsOutput `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListWebApplicationRevisionsBody) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationRevisionsBody) GoString() string {
	return s.String()
}

func (s *ListWebApplicationRevisionsBody) SetCode(v int32) *ListWebApplicationRevisionsBody {
	s.Code = &v
	return s
}

func (s *ListWebApplicationRevisionsBody) SetData(v *ListWebApplicationRevisionsOutput) *ListWebApplicationRevisionsBody {
	s.Data = v
	return s
}

func (s *ListWebApplicationRevisionsBody) SetMessage(v string) *ListWebApplicationRevisionsBody {
	s.Message = &v
	return s
}

func (s *ListWebApplicationRevisionsBody) SetRequestId(v string) *ListWebApplicationRevisionsBody {
	s.RequestId = &v
	return s
}

func (s *ListWebApplicationRevisionsBody) SetSuccess(v bool) *ListWebApplicationRevisionsBody {
	s.Success = &v
	return s
}

type ListWebApplicationRevisionsOutput struct {
	NextToken *string     `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	Revisions []*Revision `json:"Revisions,omitempty" xml:"Revisions,omitempty" type:"Repeated"`
}

func (s ListWebApplicationRevisionsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationRevisionsOutput) GoString() string {
	return s.String()
}

func (s *ListWebApplicationRevisionsOutput) SetNextToken(v string) *ListWebApplicationRevisionsOutput {
	s.NextToken = &v
	return s
}

func (s *ListWebApplicationRevisionsOutput) SetRevisions(v []*Revision) *ListWebApplicationRevisionsOutput {
	s.Revisions = v
	return s
}

type ListWebApplicationsBody struct {
	Code      *int32                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListWebApplicationsOutput `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListWebApplicationsBody) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationsBody) GoString() string {
	return s.String()
}

func (s *ListWebApplicationsBody) SetCode(v int32) *ListWebApplicationsBody {
	s.Code = &v
	return s
}

func (s *ListWebApplicationsBody) SetData(v *ListWebApplicationsOutput) *ListWebApplicationsBody {
	s.Data = v
	return s
}

func (s *ListWebApplicationsBody) SetMessage(v string) *ListWebApplicationsBody {
	s.Message = &v
	return s
}

func (s *ListWebApplicationsBody) SetRequestId(v string) *ListWebApplicationsBody {
	s.RequestId = &v
	return s
}

func (s *ListWebApplicationsBody) SetSuccess(v bool) *ListWebApplicationsBody {
	s.Success = &v
	return s
}

type ListWebApplicationsOutput struct {
	NextToken                       *string                            `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	WebApplicationWithInstanceCount []*WebApplicationWithInstanceCount `json:"WebApplicationWithInstanceCount,omitempty" xml:"WebApplicationWithInstanceCount,omitempty" type:"Repeated"`
}

func (s ListWebApplicationsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationsOutput) GoString() string {
	return s.String()
}

func (s *ListWebApplicationsOutput) SetNextToken(v string) *ListWebApplicationsOutput {
	s.NextToken = &v
	return s
}

func (s *ListWebApplicationsOutput) SetWebApplicationWithInstanceCount(v []*WebApplicationWithInstanceCount) *ListWebApplicationsOutput {
	s.WebApplicationWithInstanceCount = v
	return s
}

type ListWebCustomDomainBody struct {
	Code      *int32                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListWebCustomDomainOutput `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListWebCustomDomainBody) String() string {
	return tea.Prettify(s)
}

func (s ListWebCustomDomainBody) GoString() string {
	return s.String()
}

func (s *ListWebCustomDomainBody) SetCode(v int32) *ListWebCustomDomainBody {
	s.Code = &v
	return s
}

func (s *ListWebCustomDomainBody) SetData(v *ListWebCustomDomainOutput) *ListWebCustomDomainBody {
	s.Data = v
	return s
}

func (s *ListWebCustomDomainBody) SetMessage(v string) *ListWebCustomDomainBody {
	s.Message = &v
	return s
}

func (s *ListWebCustomDomainBody) SetRequestId(v string) *ListWebCustomDomainBody {
	s.RequestId = &v
	return s
}

func (s *ListWebCustomDomainBody) SetSuccess(v bool) *ListWebCustomDomainBody {
	s.Success = &v
	return s
}

type ListWebCustomDomainOutput struct {
	NextToken        *string            `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	WebCustomDomains []*WebCustomDomain `json:"WebCustomDomains,omitempty" xml:"WebCustomDomains,omitempty" type:"Repeated"`
}

func (s ListWebCustomDomainOutput) String() string {
	return tea.Prettify(s)
}

func (s ListWebCustomDomainOutput) GoString() string {
	return s.String()
}

func (s *ListWebCustomDomainOutput) SetNextToken(v string) *ListWebCustomDomainOutput {
	s.NextToken = &v
	return s
}

func (s *ListWebCustomDomainOutput) SetWebCustomDomains(v []*WebCustomDomain) *ListWebCustomDomainOutput {
	s.WebCustomDomains = v
	return s
}

type ListWebInstancesOutput struct {
	CurrentError     *string                      `json:"CurrentError,omitempty" xml:"CurrentError,omitempty"`
	WebInstances     []*WebInstanceInfo           `json:"WebInstances,omitempty" xml:"WebInstances,omitempty" type:"Repeated"`
	WebVersionStatus map[string]*WebVersionStatus `json:"WebVersionStatus,omitempty" xml:"WebVersionStatus,omitempty"`
}

func (s ListWebInstancesOutput) String() string {
	return tea.Prettify(s)
}

func (s ListWebInstancesOutput) GoString() string {
	return s.String()
}

func (s *ListWebInstancesOutput) SetCurrentError(v string) *ListWebInstancesOutput {
	s.CurrentError = &v
	return s
}

func (s *ListWebInstancesOutput) SetWebInstances(v []*WebInstanceInfo) *ListWebInstancesOutput {
	s.WebInstances = v
	return s
}

func (s *ListWebInstancesOutput) SetWebVersionStatus(v map[string]*WebVersionStatus) *ListWebInstancesOutput {
	s.WebVersionStatus = v
	return s
}

type LogConfig struct {
	EnableInstanceMetrics *bool   `json:"enableInstanceMetrics,omitempty" xml:"enableInstanceMetrics,omitempty"`
	EnableRequestMetrics  *bool   `json:"enableRequestMetrics,omitempty" xml:"enableRequestMetrics,omitempty"`
	LogBeginRule          *string `json:"logBeginRule,omitempty" xml:"logBeginRule,omitempty"`
	Logstore              *string `json:"logstore,omitempty" xml:"logstore,omitempty"`
	Project               *string `json:"project,omitempty" xml:"project,omitempty"`
	PushToUserSLS         *bool   `json:"pushToUserSLS,omitempty" xml:"pushToUserSLS,omitempty"`
}

func (s LogConfig) String() string {
	return tea.Prettify(s)
}

func (s LogConfig) GoString() string {
	return s.String()
}

func (s *LogConfig) SetEnableInstanceMetrics(v bool) *LogConfig {
	s.EnableInstanceMetrics = &v
	return s
}

func (s *LogConfig) SetEnableRequestMetrics(v bool) *LogConfig {
	s.EnableRequestMetrics = &v
	return s
}

func (s *LogConfig) SetLogBeginRule(v string) *LogConfig {
	s.LogBeginRule = &v
	return s
}

func (s *LogConfig) SetLogstore(v string) *LogConfig {
	s.Logstore = &v
	return s
}

func (s *LogConfig) SetProject(v string) *LogConfig {
	s.Project = &v
	return s
}

func (s *LogConfig) SetPushToUserSLS(v bool) *LogConfig {
	s.PushToUserSLS = &v
	return s
}

type LogEntry struct {
	InstanceID *string `json:"instanceID,omitempty" xml:"instanceID,omitempty"`
	Message    *string `json:"message,omitempty" xml:"message,omitempty"`
	Offset     *int64  `json:"offset,omitempty" xml:"offset,omitempty"`
	PackID     *string `json:"packID,omitempty" xml:"packID,omitempty"`
	PackMeta   *string `json:"packMeta,omitempty" xml:"packMeta,omitempty"`
	Qualifier  *string `json:"qualifier,omitempty" xml:"qualifier,omitempty"`
	Timestamp  *int32  `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	VersionID  *string `json:"versionID,omitempty" xml:"versionID,omitempty"`
}

func (s LogEntry) String() string {
	return tea.Prettify(s)
}

func (s LogEntry) GoString() string {
	return s.String()
}

func (s *LogEntry) SetInstanceID(v string) *LogEntry {
	s.InstanceID = &v
	return s
}

func (s *LogEntry) SetMessage(v string) *LogEntry {
	s.Message = &v
	return s
}

func (s *LogEntry) SetOffset(v int64) *LogEntry {
	s.Offset = &v
	return s
}

func (s *LogEntry) SetPackID(v string) *LogEntry {
	s.PackID = &v
	return s
}

func (s *LogEntry) SetPackMeta(v string) *LogEntry {
	s.PackMeta = &v
	return s
}

func (s *LogEntry) SetQualifier(v string) *LogEntry {
	s.Qualifier = &v
	return s
}

func (s *LogEntry) SetTimestamp(v int32) *LogEntry {
	s.Timestamp = &v
	return s
}

func (s *LogEntry) SetVersionID(v string) *LogEntry {
	s.VersionID = &v
	return s
}

type MetricInfo struct {
	// example:
	//
	// 1234.5
	Average *float32 `json:"Average,omitempty" xml:"Average,omitempty"`
	// example:
	//
	// 1234.5
	Count *float32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// 1234.5
	Maximum *float32 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// example:
	//
	// 1234.5
	Minimum *float32 `json:"Minimum,omitempty" xml:"Minimum,omitempty"`
	// example:
	//
	// 1234.5
	Sum *float32 `json:"Sum,omitempty" xml:"Sum,omitempty"`
	// example:
	//
	// 1686568800000
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// example:
	//
	// 1234.5
	Value *float32 `json:"value,omitempty" xml:"value,omitempty"`
}

func (s MetricInfo) String() string {
	return tea.Prettify(s)
}

func (s MetricInfo) GoString() string {
	return s.String()
}

func (s *MetricInfo) SetAverage(v float32) *MetricInfo {
	s.Average = &v
	return s
}

func (s *MetricInfo) SetCount(v float32) *MetricInfo {
	s.Count = &v
	return s
}

func (s *MetricInfo) SetMaximum(v float32) *MetricInfo {
	s.Maximum = &v
	return s
}

func (s *MetricInfo) SetMinimum(v float32) *MetricInfo {
	s.Minimum = &v
	return s
}

func (s *MetricInfo) SetSum(v float32) *MetricInfo {
	s.Sum = &v
	return s
}

func (s *MetricInfo) SetTimestamp(v int64) *MetricInfo {
	s.Timestamp = &v
	return s
}

func (s *MetricInfo) SetValue(v float32) *MetricInfo {
	s.Value = &v
	return s
}

type MetricsCollectConfig struct {
	EnablePushToUserSLS *bool `json:"EnablePushToUserSLS,omitempty" xml:"EnablePushToUserSLS,omitempty"`
	// example:
	//
	// my-sls-logstorename
	LogstoreName *string `json:"LogstoreName,omitempty" xml:"LogstoreName,omitempty"`
	// example:
	//
	// my-sls-project
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s MetricsCollectConfig) String() string {
	return tea.Prettify(s)
}

func (s MetricsCollectConfig) GoString() string {
	return s.String()
}

func (s *MetricsCollectConfig) SetEnablePushToUserSLS(v bool) *MetricsCollectConfig {
	s.EnablePushToUserSLS = &v
	return s
}

func (s *MetricsCollectConfig) SetLogstoreName(v string) *MetricsCollectConfig {
	s.LogstoreName = &v
	return s
}

func (s *MetricsCollectConfig) SetProjectName(v string) *MetricsCollectConfig {
	s.ProjectName = &v
	return s
}

type NASConfig struct {
	MountPoints []*NASMountConfig `json:"mountPoints,omitempty" xml:"mountPoints,omitempty" type:"Repeated"`
}

func (s NASConfig) String() string {
	return tea.Prettify(s)
}

func (s NASConfig) GoString() string {
	return s.String()
}

func (s *NASConfig) SetMountPoints(v []*NASMountConfig) *NASConfig {
	s.MountPoints = v
	return s
}

type NASMountConfig struct {
	EnableTLS  *bool   `json:"enableTLS,omitempty" xml:"enableTLS,omitempty"`
	MountDir   *string `json:"mountDir,omitempty" xml:"mountDir,omitempty"`
	ServerAddr *string `json:"serverAddr,omitempty" xml:"serverAddr,omitempty"`
}

func (s NASMountConfig) String() string {
	return tea.Prettify(s)
}

func (s NASMountConfig) GoString() string {
	return s.String()
}

func (s *NASMountConfig) SetEnableTLS(v bool) *NASMountConfig {
	s.EnableTLS = &v
	return s
}

func (s *NASMountConfig) SetMountDir(v string) *NASMountConfig {
	s.MountDir = &v
	return s
}

func (s *NASMountConfig) SetServerAddr(v string) *NASMountConfig {
	s.ServerAddr = &v
	return s
}

type OSSMountConfig struct {
	MountPoints []*OSSMountPoint `json:"mountPoints,omitempty" xml:"mountPoints,omitempty" type:"Repeated"`
}

func (s OSSMountConfig) String() string {
	return tea.Prettify(s)
}

func (s OSSMountConfig) GoString() string {
	return s.String()
}

func (s *OSSMountConfig) SetMountPoints(v []*OSSMountPoint) *OSSMountConfig {
	s.MountPoints = v
	return s
}

type OSSMountPoint struct {
	BucketName *string `json:"bucketName,omitempty" xml:"bucketName,omitempty"`
	BucketPath *string `json:"bucketPath,omitempty" xml:"bucketPath,omitempty"`
	MountDir   *string `json:"mountDir,omitempty" xml:"mountDir,omitempty"`
	ReadOnly   *bool   `json:"readOnly,omitempty" xml:"readOnly,omitempty"`
}

func (s OSSMountPoint) String() string {
	return tea.Prettify(s)
}

func (s OSSMountPoint) GoString() string {
	return s.String()
}

func (s *OSSMountPoint) SetBucketName(v string) *OSSMountPoint {
	s.BucketName = &v
	return s
}

func (s *OSSMountPoint) SetBucketPath(v string) *OSSMountPoint {
	s.BucketPath = &v
	return s
}

func (s *OSSMountPoint) SetMountDir(v string) *OSSMountPoint {
	s.MountDir = &v
	return s
}

func (s *OSSMountPoint) SetReadOnly(v bool) *OSSMountPoint {
	s.ReadOnly = &v
	return s
}

type PathConfig struct {
	ApplicationName *string `json:"applicationName,omitempty" xml:"applicationName,omitempty"`
	Path            *string `json:"path,omitempty" xml:"path,omitempty"`
}

func (s PathConfig) String() string {
	return tea.Prettify(s)
}

func (s PathConfig) GoString() string {
	return s.String()
}

func (s *PathConfig) SetApplicationName(v string) *PathConfig {
	s.ApplicationName = &v
	return s
}

func (s *PathConfig) SetPath(v string) *PathConfig {
	s.Path = &v
	return s
}

type PermissionAssistantApi struct {
	CreateTime   *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	Id           *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name         *string `json:"name,omitempty" xml:"name,omitempty"`
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
	UpdateTime   *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s PermissionAssistantApi) String() string {
	return tea.Prettify(s)
}

func (s PermissionAssistantApi) GoString() string {
	return s.String()
}

func (s *PermissionAssistantApi) SetCreateTime(v string) *PermissionAssistantApi {
	s.CreateTime = &v
	return s
}

func (s *PermissionAssistantApi) SetId(v int64) *PermissionAssistantApi {
	s.Id = &v
	return s
}

func (s *PermissionAssistantApi) SetName(v string) *PermissionAssistantApi {
	s.Name = &v
	return s
}

func (s *PermissionAssistantApi) SetResourceType(v string) *PermissionAssistantApi {
	s.ResourceType = &v
	return s
}

func (s *PermissionAssistantApi) SetUpdateTime(v string) *PermissionAssistantApi {
	s.UpdateTime = &v
	return s
}

type PolicyItem struct {
	Key      *string `json:"key,omitempty" xml:"key,omitempty"`
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	Type     *string `json:"type,omitempty" xml:"type,omitempty"`
	Value    *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s PolicyItem) String() string {
	return tea.Prettify(s)
}

func (s PolicyItem) GoString() string {
	return s.String()
}

func (s *PolicyItem) SetKey(v string) *PolicyItem {
	s.Key = &v
	return s
}

func (s *PolicyItem) SetOperator(v string) *PolicyItem {
	s.Operator = &v
	return s
}

func (s *PolicyItem) SetType(v string) *PolicyItem {
	s.Type = &v
	return s
}

func (s *PolicyItem) SetValue(v string) *PolicyItem {
	s.Value = &v
	return s
}

type PriceEstimateFeature struct {
	// This parameter is required.
	//
	// example:
	//
	// Web/MicroService
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	CpuCore *float32 `json:"CpuCore,omitempty" xml:"CpuCore,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Request/Always
	CpuStrategy *string `json:"CpuStrategy,omitempty" xml:"CpuStrategy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Test/Production
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// example:
	//
	// 3
	HighLoadInstanceCount *int64 `json:"HighLoadInstanceCount,omitempty" xml:"HighLoadInstanceCount,omitempty"`
	// example:
	//
	// 5
	HighLoadQps *float32 `json:"HighLoadQps,omitempty" xml:"HighLoadQps,omitempty"`
	// example:
	//
	// 3600
	HighLoadSeconds *int64 `json:"HighLoadSeconds,omitempty" xml:"HighLoadSeconds,omitempty"`
	// example:
	//
	// 2
	InstanceQps *float32 `json:"InstanceQps,omitempty" xml:"InstanceQps,omitempty"`
	// example:
	//
	// 24
	InternetOutboundGiB *float32 `json:"InternetOutboundGiB,omitempty" xml:"InternetOutboundGiB,omitempty"`
	// example:
	//
	// 1
	LowLoadInstanceCount *int64 `json:"LowLoadInstanceCount,omitempty" xml:"LowLoadInstanceCount,omitempty"`
	// example:
	//
	// 2
	LowLoadQps *float32 `json:"LowLoadQps,omitempty" xml:"LowLoadQps,omitempty"`
	// example:
	//
	// 3600
	LowLoadSeconds *int64 `json:"LowLoadSeconds,omitempty" xml:"LowLoadSeconds,omitempty"`
	// example:
	//
	// 10
	MaxInstanceCount *int64 `json:"MaxInstanceCount,omitempty" xml:"MaxInstanceCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	MemoryGiB *float32 `json:"MemoryGiB,omitempty" xml:"MemoryGiB,omitempty"`
	// example:
	//
	// 1
	MinInstanceCount *int64 `json:"MinInstanceCount,omitempty" xml:"MinInstanceCount,omitempty"`
	// example:
	//
	// 0
	NoneLoadInstanceCount *int64 `json:"NoneLoadInstanceCount,omitempty" xml:"NoneLoadInstanceCount,omitempty"`
	// example:
	//
	// 79200
	NoneLoadSeconds *int64 `json:"NoneLoadSeconds,omitempty" xml:"NoneLoadSeconds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s PriceEstimateFeature) String() string {
	return tea.Prettify(s)
}

func (s PriceEstimateFeature) GoString() string {
	return s.String()
}

func (s *PriceEstimateFeature) SetAppType(v string) *PriceEstimateFeature {
	s.AppType = &v
	return s
}

func (s *PriceEstimateFeature) SetCpuCore(v float32) *PriceEstimateFeature {
	s.CpuCore = &v
	return s
}

func (s *PriceEstimateFeature) SetCpuStrategy(v string) *PriceEstimateFeature {
	s.CpuStrategy = &v
	return s
}

func (s *PriceEstimateFeature) SetEnvType(v string) *PriceEstimateFeature {
	s.EnvType = &v
	return s
}

func (s *PriceEstimateFeature) SetHighLoadInstanceCount(v int64) *PriceEstimateFeature {
	s.HighLoadInstanceCount = &v
	return s
}

func (s *PriceEstimateFeature) SetHighLoadQps(v float32) *PriceEstimateFeature {
	s.HighLoadQps = &v
	return s
}

func (s *PriceEstimateFeature) SetHighLoadSeconds(v int64) *PriceEstimateFeature {
	s.HighLoadSeconds = &v
	return s
}

func (s *PriceEstimateFeature) SetInstanceQps(v float32) *PriceEstimateFeature {
	s.InstanceQps = &v
	return s
}

func (s *PriceEstimateFeature) SetInternetOutboundGiB(v float32) *PriceEstimateFeature {
	s.InternetOutboundGiB = &v
	return s
}

func (s *PriceEstimateFeature) SetLowLoadInstanceCount(v int64) *PriceEstimateFeature {
	s.LowLoadInstanceCount = &v
	return s
}

func (s *PriceEstimateFeature) SetLowLoadQps(v float32) *PriceEstimateFeature {
	s.LowLoadQps = &v
	return s
}

func (s *PriceEstimateFeature) SetLowLoadSeconds(v int64) *PriceEstimateFeature {
	s.LowLoadSeconds = &v
	return s
}

func (s *PriceEstimateFeature) SetMaxInstanceCount(v int64) *PriceEstimateFeature {
	s.MaxInstanceCount = &v
	return s
}

func (s *PriceEstimateFeature) SetMemoryGiB(v float32) *PriceEstimateFeature {
	s.MemoryGiB = &v
	return s
}

func (s *PriceEstimateFeature) SetMinInstanceCount(v int64) *PriceEstimateFeature {
	s.MinInstanceCount = &v
	return s
}

func (s *PriceEstimateFeature) SetNoneLoadInstanceCount(v int64) *PriceEstimateFeature {
	s.NoneLoadInstanceCount = &v
	return s
}

func (s *PriceEstimateFeature) SetNoneLoadSeconds(v int64) *PriceEstimateFeature {
	s.NoneLoadSeconds = &v
	return s
}

func (s *PriceEstimateFeature) SetRegionId(v string) *PriceEstimateFeature {
	s.RegionId = &v
	return s
}

type PriceEstimateOutput struct {
	Apps  []*PriceEstimateOutputApps  `json:"Apps,omitempty" xml:"Apps,omitempty" type:"Repeated"`
	Items []*PriceEstimateOutputItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// example:
	//
	// 235.66
	TotalPrice *float32 `json:"TotalPrice,omitempty" xml:"TotalPrice,omitempty"`
}

func (s PriceEstimateOutput) String() string {
	return tea.Prettify(s)
}

func (s PriceEstimateOutput) GoString() string {
	return s.String()
}

func (s *PriceEstimateOutput) SetApps(v []*PriceEstimateOutputApps) *PriceEstimateOutput {
	s.Apps = v
	return s
}

func (s *PriceEstimateOutput) SetItems(v []*PriceEstimateOutputItems) *PriceEstimateOutput {
	s.Items = v
	return s
}

func (s *PriceEstimateOutput) SetTotalPrice(v float32) *PriceEstimateOutput {
	s.TotalPrice = &v
	return s
}

type PriceEstimateOutputApps struct {
	Feature *PriceEstimateFeature `json:"Feature,omitempty" xml:"Feature,omitempty"`
	// example:
	//
	// 1
	Id     *int64                           `json:"Id,omitempty" xml:"Id,omitempty"`
	Usages []*PriceEstimateOutputAppsUsages `json:"Usages,omitempty" xml:"Usages,omitempty" type:"Repeated"`
}

func (s PriceEstimateOutputApps) String() string {
	return tea.Prettify(s)
}

func (s PriceEstimateOutputApps) GoString() string {
	return s.String()
}

func (s *PriceEstimateOutputApps) SetFeature(v *PriceEstimateFeature) *PriceEstimateOutputApps {
	s.Feature = v
	return s
}

func (s *PriceEstimateOutputApps) SetId(v int64) *PriceEstimateOutputApps {
	s.Id = &v
	return s
}

func (s *PriceEstimateOutputApps) SetUsages(v []*PriceEstimateOutputAppsUsages) *PriceEstimateOutputApps {
	s.Usages = v
	return s
}

type PriceEstimateOutputAppsUsages struct {
	// example:
	//
	// 3600.00
	Amount *float32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// example:
	//
	// Microservice_cpuUsage
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 核*秒
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s PriceEstimateOutputAppsUsages) String() string {
	return tea.Prettify(s)
}

func (s PriceEstimateOutputAppsUsages) GoString() string {
	return s.String()
}

func (s *PriceEstimateOutputAppsUsages) SetAmount(v float32) *PriceEstimateOutputAppsUsages {
	s.Amount = &v
	return s
}

func (s *PriceEstimateOutputAppsUsages) SetId(v string) *PriceEstimateOutputAppsUsages {
	s.Id = &v
	return s
}

func (s *PriceEstimateOutputAppsUsages) SetUnit(v string) *PriceEstimateOutputAppsUsages {
	s.Unit = &v
	return s
}

type PriceEstimateOutputItems struct {
	// example:
	//
	// 3600.00
	Amount *float32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// example:
	//
	// 1
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// p_micro_service_cpu
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1.00
	Price *float32                         `json:"Price,omitempty" xml:"Price,omitempty"`
	Steps []*PriceEstimateOutputItemsSteps `json:"Steps,omitempty" xml:"Steps,omitempty" type:"Repeated"`
	// example:
	//
	// pack/post
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 核*秒
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s PriceEstimateOutputItems) String() string {
	return tea.Prettify(s)
}

func (s PriceEstimateOutputItems) GoString() string {
	return s.String()
}

func (s *PriceEstimateOutputItems) SetAmount(v float32) *PriceEstimateOutputItems {
	s.Amount = &v
	return s
}

func (s *PriceEstimateOutputItems) SetCount(v int64) *PriceEstimateOutputItems {
	s.Count = &v
	return s
}

func (s *PriceEstimateOutputItems) SetId(v string) *PriceEstimateOutputItems {
	s.Id = &v
	return s
}

func (s *PriceEstimateOutputItems) SetPrice(v float32) *PriceEstimateOutputItems {
	s.Price = &v
	return s
}

func (s *PriceEstimateOutputItems) SetSteps(v []*PriceEstimateOutputItemsSteps) *PriceEstimateOutputItems {
	s.Steps = v
	return s
}

func (s *PriceEstimateOutputItems) SetType(v string) *PriceEstimateOutputItems {
	s.Type = &v
	return s
}

func (s *PriceEstimateOutputItems) SetUnit(v string) *PriceEstimateOutputItems {
	s.Unit = &v
	return s
}

type PriceEstimateOutputItemsSteps struct {
	// example:
	//
	// 0
	Begin *int64 `json:"Begin,omitempty" xml:"Begin,omitempty"`
	// example:
	//
	// 10000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// example:
	//
	// 0.0001
	Price     *float32  `json:"Price,omitempty" xml:"Price,omitempty"`
	RegionIds []*string `json:"RegionIds,omitempty" xml:"RegionIds,omitempty" type:"Repeated"`
	// example:
	//
	// 核*秒
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s PriceEstimateOutputItemsSteps) String() string {
	return tea.Prettify(s)
}

func (s PriceEstimateOutputItemsSteps) GoString() string {
	return s.String()
}

func (s *PriceEstimateOutputItemsSteps) SetBegin(v int64) *PriceEstimateOutputItemsSteps {
	s.Begin = &v
	return s
}

func (s *PriceEstimateOutputItemsSteps) SetEnd(v int64) *PriceEstimateOutputItemsSteps {
	s.End = &v
	return s
}

func (s *PriceEstimateOutputItemsSteps) SetPrice(v float32) *PriceEstimateOutputItemsSteps {
	s.Price = &v
	return s
}

func (s *PriceEstimateOutputItemsSteps) SetRegionIds(v []*string) *PriceEstimateOutputItemsSteps {
	s.RegionIds = v
	return s
}

func (s *PriceEstimateOutputItemsSteps) SetUnit(v string) *PriceEstimateOutputItemsSteps {
	s.Unit = &v
	return s
}

type Probe struct {
	FailureThreshold    *int32             `json:"failureThreshold,omitempty" xml:"failureThreshold,omitempty"`
	InitialDelaySeconds *int32             `json:"initialDelaySeconds,omitempty" xml:"initialDelaySeconds,omitempty"`
	PeriodSeconds       *int32             `json:"periodSeconds,omitempty" xml:"periodSeconds,omitempty"`
	ProbeHandler        *ProbeProbeHandler `json:"probeHandler,omitempty" xml:"probeHandler,omitempty" type:"Struct"`
	TimeoutSeconds      *int32             `json:"timeoutSeconds,omitempty" xml:"timeoutSeconds,omitempty"`
}

func (s Probe) String() string {
	return tea.Prettify(s)
}

func (s Probe) GoString() string {
	return s.String()
}

func (s *Probe) SetFailureThreshold(v int32) *Probe {
	s.FailureThreshold = &v
	return s
}

func (s *Probe) SetInitialDelaySeconds(v int32) *Probe {
	s.InitialDelaySeconds = &v
	return s
}

func (s *Probe) SetPeriodSeconds(v int32) *Probe {
	s.PeriodSeconds = &v
	return s
}

func (s *Probe) SetProbeHandler(v *ProbeProbeHandler) *Probe {
	s.ProbeHandler = v
	return s
}

func (s *Probe) SetTimeoutSeconds(v int32) *Probe {
	s.TimeoutSeconds = &v
	return s
}

type ProbeProbeHandler struct {
	HttpGet   *ProbeProbeHandlerHttpGet   `json:"httpGet,omitempty" xml:"httpGet,omitempty" type:"Struct"`
	TcpSocket *ProbeProbeHandlerTcpSocket `json:"tcpSocket,omitempty" xml:"tcpSocket,omitempty" type:"Struct"`
}

func (s ProbeProbeHandler) String() string {
	return tea.Prettify(s)
}

func (s ProbeProbeHandler) GoString() string {
	return s.String()
}

func (s *ProbeProbeHandler) SetHttpGet(v *ProbeProbeHandlerHttpGet) *ProbeProbeHandler {
	s.HttpGet = v
	return s
}

func (s *ProbeProbeHandler) SetTcpSocket(v *ProbeProbeHandlerTcpSocket) *ProbeProbeHandler {
	s.TcpSocket = v
	return s
}

type ProbeProbeHandlerHttpGet struct {
	HttpHeaders []*ProbeProbeHandlerHttpGetHttpHeaders `json:"httpHeaders,omitempty" xml:"httpHeaders,omitempty" type:"Repeated"`
	Path        *string                                `json:"path,omitempty" xml:"path,omitempty"`
	Port        *int32                                 `json:"port,omitempty" xml:"port,omitempty"`
}

func (s ProbeProbeHandlerHttpGet) String() string {
	return tea.Prettify(s)
}

func (s ProbeProbeHandlerHttpGet) GoString() string {
	return s.String()
}

func (s *ProbeProbeHandlerHttpGet) SetHttpHeaders(v []*ProbeProbeHandlerHttpGetHttpHeaders) *ProbeProbeHandlerHttpGet {
	s.HttpHeaders = v
	return s
}

func (s *ProbeProbeHandlerHttpGet) SetPath(v string) *ProbeProbeHandlerHttpGet {
	s.Path = &v
	return s
}

func (s *ProbeProbeHandlerHttpGet) SetPort(v int32) *ProbeProbeHandlerHttpGet {
	s.Port = &v
	return s
}

type ProbeProbeHandlerHttpGetHttpHeaders struct {
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ProbeProbeHandlerHttpGetHttpHeaders) String() string {
	return tea.Prettify(s)
}

func (s ProbeProbeHandlerHttpGetHttpHeaders) GoString() string {
	return s.String()
}

func (s *ProbeProbeHandlerHttpGetHttpHeaders) SetName(v string) *ProbeProbeHandlerHttpGetHttpHeaders {
	s.Name = &v
	return s
}

func (s *ProbeProbeHandlerHttpGetHttpHeaders) SetValue(v string) *ProbeProbeHandlerHttpGetHttpHeaders {
	s.Value = &v
	return s
}

type ProbeProbeHandlerTcpSocket struct {
	Port *int32 `json:"port,omitempty" xml:"port,omitempty"`
}

func (s ProbeProbeHandlerTcpSocket) String() string {
	return tea.Prettify(s)
}

func (s ProbeProbeHandlerTcpSocket) GoString() string {
	return s.String()
}

func (s *ProbeProbeHandlerTcpSocket) SetPort(v int32) *ProbeProbeHandlerTcpSocket {
	s.Port = &v
	return s
}

type ProbeHandler struct {
	HttpGet   *HTTPGetAction   `json:"HttpGet,omitempty" xml:"HttpGet,omitempty"`
	TcpSocket *TCPSocketAction `json:"TcpSocket,omitempty" xml:"TcpSocket,omitempty"`
}

func (s ProbeHandler) String() string {
	return tea.Prettify(s)
}

func (s ProbeHandler) GoString() string {
	return s.String()
}

func (s *ProbeHandler) SetHttpGet(v *HTTPGetAction) *ProbeHandler {
	s.HttpGet = v
	return s
}

func (s *ProbeHandler) SetTcpSocket(v *TCPSocketAction) *ProbeHandler {
	s.TcpSocket = v
	return s
}

type PublishApplicationVersionInput struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}

func (s PublishApplicationVersionInput) String() string {
	return tea.Prettify(s)
}

func (s PublishApplicationVersionInput) GoString() string {
	return s.String()
}

func (s *PublishApplicationVersionInput) SetDescription(v string) *PublishApplicationVersionInput {
	s.Description = &v
	return s
}

type PublishWebApplicationRevisionInput struct {
	// This parameter is required.
	Containers []*Container `json:"Containers,omitempty" xml:"Containers,omitempty" type:"Repeated"`
	// example:
	//
	// test version
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnableArmsMetrics *bool   `json:"EnableArmsMetrics,omitempty" xml:"EnableArmsMetrics,omitempty"`
	TakeEffect        *bool   `json:"TakeEffect,omitempty" xml:"TakeEffect,omitempty"`
}

func (s PublishWebApplicationRevisionInput) String() string {
	return tea.Prettify(s)
}

func (s PublishWebApplicationRevisionInput) GoString() string {
	return s.String()
}

func (s *PublishWebApplicationRevisionInput) SetContainers(v []*Container) *PublishWebApplicationRevisionInput {
	s.Containers = v
	return s
}

func (s *PublishWebApplicationRevisionInput) SetDescription(v string) *PublishWebApplicationRevisionInput {
	s.Description = &v
	return s
}

func (s *PublishWebApplicationRevisionInput) SetEnableArmsMetrics(v bool) *PublishWebApplicationRevisionInput {
	s.EnableArmsMetrics = &v
	return s
}

func (s *PublishWebApplicationRevisionInput) SetTakeEffect(v bool) *PublishWebApplicationRevisionInput {
	s.TakeEffect = &v
	return s
}

type Revision struct {
	CreatedTime    *string         `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description    *string         `json:"Description,omitempty" xml:"Description,omitempty"`
	RevisionConfig *RevisionConfig `json:"RevisionConfig,omitempty" xml:"RevisionConfig,omitempty"`
	RevisionId     *string         `json:"RevisionId,omitempty" xml:"RevisionId,omitempty"`
	Weight         *float32        `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s Revision) String() string {
	return tea.Prettify(s)
}

func (s Revision) GoString() string {
	return s.String()
}

func (s *Revision) SetCreatedTime(v string) *Revision {
	s.CreatedTime = &v
	return s
}

func (s *Revision) SetDescription(v string) *Revision {
	s.Description = &v
	return s
}

func (s *Revision) SetRevisionConfig(v *RevisionConfig) *Revision {
	s.RevisionConfig = v
	return s
}

func (s *Revision) SetRevisionId(v string) *Revision {
	s.RevisionId = &v
	return s
}

func (s *Revision) SetWeight(v float32) *Revision {
	s.Weight = &v
	return s
}

type RevisionConfig struct {
	// This parameter is required.
	Containers        []*Container      `json:"Containers,omitempty" xml:"Containers,omitempty" type:"Repeated"`
	EnableArmsMetrics *bool             `json:"EnableArmsMetrics,omitempty" xml:"EnableArmsMetrics,omitempty"`
	WebNetworkConfig  *WebNetworkConfig `json:"WebNetworkConfig,omitempty" xml:"WebNetworkConfig,omitempty"`
}

func (s RevisionConfig) String() string {
	return tea.Prettify(s)
}

func (s RevisionConfig) GoString() string {
	return s.String()
}

func (s *RevisionConfig) SetContainers(v []*Container) *RevisionConfig {
	s.Containers = v
	return s
}

func (s *RevisionConfig) SetEnableArmsMetrics(v bool) *RevisionConfig {
	s.EnableArmsMetrics = &v
	return s
}

func (s *RevisionConfig) SetWebNetworkConfig(v *WebNetworkConfig) *RevisionConfig {
	s.WebNetworkConfig = v
	return s
}

type RouteConfig struct {
	Routes []*PathConfig `json:"routes,omitempty" xml:"routes,omitempty" type:"Repeated"`
}

func (s RouteConfig) String() string {
	return tea.Prettify(s)
}

func (s RouteConfig) GoString() string {
	return s.String()
}

func (s *RouteConfig) SetRoutes(v []*PathConfig) *RouteConfig {
	s.Routes = v
	return s
}

type RoutePolicy struct {
	Condition   *string       `json:"condition,omitempty" xml:"condition,omitempty"`
	PolicyItems []*PolicyItem `json:"policyItems,omitempty" xml:"policyItems,omitempty" type:"Repeated"`
}

func (s RoutePolicy) String() string {
	return tea.Prettify(s)
}

func (s RoutePolicy) GoString() string {
	return s.String()
}

func (s *RoutePolicy) SetCondition(v string) *RoutePolicy {
	s.Condition = &v
	return s
}

func (s *RoutePolicy) SetPolicyItems(v []*PolicyItem) *RoutePolicy {
	s.PolicyItems = v
	return s
}

type SLSCollectConfig struct {
	LogPath      *string `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	LogType      *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	LogstoreName *string `json:"LogstoreName,omitempty" xml:"LogstoreName,omitempty"`
	LogtailName  *string `json:"LogtailName,omitempty" xml:"LogtailName,omitempty"`
	MachineGroup *string `json:"MachineGroup,omitempty" xml:"MachineGroup,omitempty"`
	ProjectName  *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s SLSCollectConfig) String() string {
	return tea.Prettify(s)
}

func (s SLSCollectConfig) GoString() string {
	return s.String()
}

func (s *SLSCollectConfig) SetLogPath(v string) *SLSCollectConfig {
	s.LogPath = &v
	return s
}

func (s *SLSCollectConfig) SetLogType(v string) *SLSCollectConfig {
	s.LogType = &v
	return s
}

func (s *SLSCollectConfig) SetLogstoreName(v string) *SLSCollectConfig {
	s.LogstoreName = &v
	return s
}

func (s *SLSCollectConfig) SetLogtailName(v string) *SLSCollectConfig {
	s.LogtailName = &v
	return s
}

func (s *SLSCollectConfig) SetMachineGroup(v string) *SLSCollectConfig {
	s.MachineGroup = &v
	return s
}

func (s *SLSCollectConfig) SetProjectName(v string) *SLSCollectConfig {
	s.ProjectName = &v
	return s
}

type SLSCollectConfigs struct {
	CollectConfigs []*SLSCollectConfig `json:"CollectConfigs,omitempty" xml:"CollectConfigs,omitempty" type:"Repeated"`
}

func (s SLSCollectConfigs) String() string {
	return tea.Prettify(s)
}

func (s SLSCollectConfigs) GoString() string {
	return s.String()
}

func (s *SLSCollectConfigs) SetCollectConfigs(v []*SLSCollectConfig) *SLSCollectConfigs {
	s.CollectConfigs = v
	return s
}

type SLSConfig struct {
	CollectConfigs []*SLSConfigCollectConfigs `json:"collectConfigs,omitempty" xml:"collectConfigs,omitempty" type:"Repeated"`
}

func (s SLSConfig) String() string {
	return tea.Prettify(s)
}

func (s SLSConfig) GoString() string {
	return s.String()
}

func (s *SLSConfig) SetCollectConfigs(v []*SLSConfigCollectConfigs) *SLSConfig {
	s.CollectConfigs = v
	return s
}

type SLSConfigCollectConfigs struct {
	LogPath      *string `json:"logPath,omitempty" xml:"logPath,omitempty"`
	LogType      *string `json:"logType,omitempty" xml:"logType,omitempty"`
	LogstoreName *string `json:"logstoreName,omitempty" xml:"logstoreName,omitempty"`
	LogtailName  *string `json:"logtailName,omitempty" xml:"logtailName,omitempty"`
	ProjectName  *string `json:"projectName,omitempty" xml:"projectName,omitempty"`
}

func (s SLSConfigCollectConfigs) String() string {
	return tea.Prettify(s)
}

func (s SLSConfigCollectConfigs) GoString() string {
	return s.String()
}

func (s *SLSConfigCollectConfigs) SetLogPath(v string) *SLSConfigCollectConfigs {
	s.LogPath = &v
	return s
}

func (s *SLSConfigCollectConfigs) SetLogType(v string) *SLSConfigCollectConfigs {
	s.LogType = &v
	return s
}

func (s *SLSConfigCollectConfigs) SetLogstoreName(v string) *SLSConfigCollectConfigs {
	s.LogstoreName = &v
	return s
}

func (s *SLSConfigCollectConfigs) SetLogtailName(v string) *SLSConfigCollectConfigs {
	s.LogtailName = &v
	return s
}

func (s *SLSConfigCollectConfigs) SetProjectName(v string) *SLSConfigCollectConfigs {
	s.ProjectName = &v
	return s
}

type ScaleConfig struct {
	AlwaysAllocateCPU    *bool   `json:"alwaysAllocateCPU,omitempty" xml:"alwaysAllocateCPU,omitempty"`
	MaximumInstanceCount *int64  `json:"maximumInstanceCount,omitempty" xml:"maximumInstanceCount,omitempty"`
	MinimumInstanceCount *int64  `json:"minimumInstanceCount,omitempty" xml:"minimumInstanceCount,omitempty"`
	RequestId            *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s ScaleConfig) String() string {
	return tea.Prettify(s)
}

func (s ScaleConfig) GoString() string {
	return s.String()
}

func (s *ScaleConfig) SetAlwaysAllocateCPU(v bool) *ScaleConfig {
	s.AlwaysAllocateCPU = &v
	return s
}

func (s *ScaleConfig) SetMaximumInstanceCount(v int64) *ScaleConfig {
	s.MaximumInstanceCount = &v
	return s
}

func (s *ScaleConfig) SetMinimumInstanceCount(v int64) *ScaleConfig {
	s.MinimumInstanceCount = &v
	return s
}

func (s *ScaleConfig) SetRequestId(v string) *ScaleConfig {
	s.RequestId = &v
	return s
}

type SourceCodeAccount struct {
	AvatarUrl     *string                           `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	Id            *string                           `json:"Id,omitempty" xml:"Id,omitempty"`
	Name          *string                           `json:"Name,omitempty" xml:"Name,omitempty"`
	Organizations []*SourceCodeAccountOrganizations `json:"Organizations,omitempty" xml:"Organizations,omitempty" type:"Repeated"`
}

func (s SourceCodeAccount) String() string {
	return tea.Prettify(s)
}

func (s SourceCodeAccount) GoString() string {
	return s.String()
}

func (s *SourceCodeAccount) SetAvatarUrl(v string) *SourceCodeAccount {
	s.AvatarUrl = &v
	return s
}

func (s *SourceCodeAccount) SetId(v string) *SourceCodeAccount {
	s.Id = &v
	return s
}

func (s *SourceCodeAccount) SetName(v string) *SourceCodeAccount {
	s.Name = &v
	return s
}

func (s *SourceCodeAccount) SetOrganizations(v []*SourceCodeAccountOrganizations) *SourceCodeAccount {
	s.Organizations = v
	return s
}

type SourceCodeAccountOrganizations struct {
	AvatarUrl *string `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s SourceCodeAccountOrganizations) String() string {
	return tea.Prettify(s)
}

func (s SourceCodeAccountOrganizations) GoString() string {
	return s.String()
}

func (s *SourceCodeAccountOrganizations) SetAvatarUrl(v string) *SourceCodeAccountOrganizations {
	s.AvatarUrl = &v
	return s
}

func (s *SourceCodeAccountOrganizations) SetId(v string) *SourceCodeAccountOrganizations {
	s.Id = &v
	return s
}

func (s *SourceCodeAccountOrganizations) SetName(v string) *SourceCodeAccountOrganizations {
	s.Name = &v
	return s
}

type SourceCodeRepo struct {
	FullName *string `json:"FullName,omitempty" xml:"FullName,omitempty"`
	Id       *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s SourceCodeRepo) String() string {
	return tea.Prettify(s)
}

func (s SourceCodeRepo) GoString() string {
	return s.String()
}

func (s *SourceCodeRepo) SetFullName(v string) *SourceCodeRepo {
	s.FullName = &v
	return s
}

func (s *SourceCodeRepo) SetId(v string) *SourceCodeRepo {
	s.Id = &v
	return s
}

func (s *SourceCodeRepo) SetName(v string) *SourceCodeRepo {
	s.Name = &v
	return s
}

type SourceCodeRepoBranch struct {
	CommitId *string `json:"CommitId,omitempty" xml:"CommitId,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s SourceCodeRepoBranch) String() string {
	return tea.Prettify(s)
}

func (s SourceCodeRepoBranch) GoString() string {
	return s.String()
}

func (s *SourceCodeRepoBranch) SetCommitId(v string) *SourceCodeRepoBranch {
	s.CommitId = &v
	return s
}

func (s *SourceCodeRepoBranch) SetName(v string) *SourceCodeRepoBranch {
	s.Name = &v
	return s
}

type StartupProbe struct {
	FailureThreshold    *int32        `json:"FailureThreshold,omitempty" xml:"FailureThreshold,omitempty"`
	InitialDelaySeconds *int32        `json:"InitialDelaySeconds,omitempty" xml:"InitialDelaySeconds,omitempty"`
	PeriodSeconds       *int32        `json:"PeriodSeconds,omitempty" xml:"PeriodSeconds,omitempty"`
	ProbeHandler        *ProbeHandler `json:"ProbeHandler,omitempty" xml:"ProbeHandler,omitempty"`
	TimeoutSeconds      *int32        `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
}

func (s StartupProbe) String() string {
	return tea.Prettify(s)
}

func (s StartupProbe) GoString() string {
	return s.String()
}

func (s *StartupProbe) SetFailureThreshold(v int32) *StartupProbe {
	s.FailureThreshold = &v
	return s
}

func (s *StartupProbe) SetInitialDelaySeconds(v int32) *StartupProbe {
	s.InitialDelaySeconds = &v
	return s
}

func (s *StartupProbe) SetPeriodSeconds(v int32) *StartupProbe {
	s.PeriodSeconds = &v
	return s
}

func (s *StartupProbe) SetProbeHandler(v *ProbeHandler) *StartupProbe {
	s.ProbeHandler = v
	return s
}

func (s *StartupProbe) SetTimeoutSeconds(v int32) *StartupProbe {
	s.TimeoutSeconds = &v
	return s
}

type StaticsInfo struct {
	ActiveCPUUsage     *int64   `json:"activeCPUUsage,omitempty" xml:"activeCPUUsage,omitempty"`
	Cost               *float32 `json:"cost,omitempty" xml:"cost,omitempty"`
	DiskUsage          *int64   `json:"diskUsage,omitempty" xml:"diskUsage,omitempty"`
	FunctionName       *string  `json:"functionName,omitempty" xml:"functionName,omitempty"`
	GpuUsage           *int64   `json:"gpuUsage,omitempty" xml:"gpuUsage,omitempty"`
	IdleCPUUsage       *int64   `json:"idleCPUUsage,omitempty" xml:"idleCPUUsage,omitempty"`
	InstanceTrafficOut *int64   `json:"instanceTrafficOut,omitempty" xml:"instanceTrafficOut,omitempty"`
	Invocations        *int64   `json:"invocations,omitempty" xml:"invocations,omitempty"`
	InvokeCDNOut       *int64   `json:"invokeCDNOut,omitempty" xml:"invokeCDNOut,omitempty"`
	InvokeInternetOut  *int64   `json:"invokeInternetOut,omitempty" xml:"invokeInternetOut,omitempty"`
	MemoryUsage        *int64   `json:"memoryUsage,omitempty" xml:"memoryUsage,omitempty"`
	Region             *string  `json:"region,omitempty" xml:"region,omitempty"`
	ServiceName        *string  `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
}

func (s StaticsInfo) String() string {
	return tea.Prettify(s)
}

func (s StaticsInfo) GoString() string {
	return s.String()
}

func (s *StaticsInfo) SetActiveCPUUsage(v int64) *StaticsInfo {
	s.ActiveCPUUsage = &v
	return s
}

func (s *StaticsInfo) SetCost(v float32) *StaticsInfo {
	s.Cost = &v
	return s
}

func (s *StaticsInfo) SetDiskUsage(v int64) *StaticsInfo {
	s.DiskUsage = &v
	return s
}

func (s *StaticsInfo) SetFunctionName(v string) *StaticsInfo {
	s.FunctionName = &v
	return s
}

func (s *StaticsInfo) SetGpuUsage(v int64) *StaticsInfo {
	s.GpuUsage = &v
	return s
}

func (s *StaticsInfo) SetIdleCPUUsage(v int64) *StaticsInfo {
	s.IdleCPUUsage = &v
	return s
}

func (s *StaticsInfo) SetInstanceTrafficOut(v int64) *StaticsInfo {
	s.InstanceTrafficOut = &v
	return s
}

func (s *StaticsInfo) SetInvocations(v int64) *StaticsInfo {
	s.Invocations = &v
	return s
}

func (s *StaticsInfo) SetInvokeCDNOut(v int64) *StaticsInfo {
	s.InvokeCDNOut = &v
	return s
}

func (s *StaticsInfo) SetInvokeInternetOut(v int64) *StaticsInfo {
	s.InvokeInternetOut = &v
	return s
}

func (s *StaticsInfo) SetMemoryUsage(v int64) *StaticsInfo {
	s.MemoryUsage = &v
	return s
}

func (s *StaticsInfo) SetRegion(v string) *StaticsInfo {
	s.Region = &v
	return s
}

func (s *StaticsInfo) SetServiceName(v string) *StaticsInfo {
	s.ServiceName = &v
	return s
}

type Submenu struct {
	Items       []*SubmenuItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	SubmenuDesc *string         `json:"SubmenuDesc,omitempty" xml:"SubmenuDesc,omitempty"`
	SubmenuType *string         `json:"SubmenuType,omitempty" xml:"SubmenuType,omitempty"`
	Submenus    []*Submenu      `json:"Submenus,omitempty" xml:"Submenus,omitempty" type:"Repeated"`
}

func (s Submenu) String() string {
	return tea.Prettify(s)
}

func (s Submenu) GoString() string {
	return s.String()
}

func (s *Submenu) SetItems(v []*SubmenuItems) *Submenu {
	s.Items = v
	return s
}

func (s *Submenu) SetSubmenuDesc(v string) *Submenu {
	s.SubmenuDesc = &v
	return s
}

func (s *Submenu) SetSubmenuType(v string) *Submenu {
	s.SubmenuType = &v
	return s
}

func (s *Submenu) SetSubmenus(v []*Submenu) *Submenu {
	s.Submenus = v
	return s
}

type SubmenuItems struct {
	DefaultSelected *bool     `json:"DefaultSelected,omitempty" xml:"DefaultSelected,omitempty"`
	ItemDesc        *string   `json:"ItemDesc,omitempty" xml:"ItemDesc,omitempty"`
	ItemType        *string   `json:"ItemType,omitempty" xml:"ItemType,omitempty"`
	RelatingItems   []*string `json:"RelatingItems,omitempty" xml:"RelatingItems,omitempty" type:"Repeated"`
}

func (s SubmenuItems) String() string {
	return tea.Prettify(s)
}

func (s SubmenuItems) GoString() string {
	return s.String()
}

func (s *SubmenuItems) SetDefaultSelected(v bool) *SubmenuItems {
	s.DefaultSelected = &v
	return s
}

func (s *SubmenuItems) SetItemDesc(v string) *SubmenuItems {
	s.ItemDesc = &v
	return s
}

func (s *SubmenuItems) SetItemType(v string) *SubmenuItems {
	s.ItemType = &v
	return s
}

func (s *SubmenuItems) SetRelatingItems(v []*string) *SubmenuItems {
	s.RelatingItems = v
	return s
}

type TCPSocketAction struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s TCPSocketAction) String() string {
	return tea.Prettify(s)
}

func (s TCPSocketAction) GoString() string {
	return s.String()
}

func (s *TCPSocketAction) SetHost(v string) *TCPSocketAction {
	s.Host = &v
	return s
}

func (s *TCPSocketAction) SetPort(v int32) *TCPSocketAction {
	s.Port = &v
	return s
}

type TLSConfig struct {
	CipherSuites []*string `json:"cipherSuites,omitempty" xml:"cipherSuites,omitempty" type:"Repeated"`
	MaxVersion   *string   `json:"maxVersion,omitempty" xml:"maxVersion,omitempty"`
	MinVersion   *string   `json:"minVersion,omitempty" xml:"minVersion,omitempty"`
}

func (s TLSConfig) String() string {
	return tea.Prettify(s)
}

func (s TLSConfig) GoString() string {
	return s.String()
}

func (s *TLSConfig) SetCipherSuites(v []*string) *TLSConfig {
	s.CipherSuites = v
	return s
}

func (s *TLSConfig) SetMaxVersion(v string) *TLSConfig {
	s.MaxVersion = &v
	return s
}

func (s *TLSConfig) SetMinVersion(v string) *TLSConfig {
	s.MinVersion = &v
	return s
}

type TomcatConfig struct {
	ContextPath           *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty"`
	MaxThreads            *int32  `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty"`
	Port                  *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	UriEncoding           *string `json:"UriEncoding,omitempty" xml:"UriEncoding,omitempty"`
	UseBodyEncodingForUri *bool   `json:"UseBodyEncodingForUri,omitempty" xml:"UseBodyEncodingForUri,omitempty"`
	Version               *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s TomcatConfig) String() string {
	return tea.Prettify(s)
}

func (s TomcatConfig) GoString() string {
	return s.String()
}

func (s *TomcatConfig) SetContextPath(v string) *TomcatConfig {
	s.ContextPath = &v
	return s
}

func (s *TomcatConfig) SetMaxThreads(v int32) *TomcatConfig {
	s.MaxThreads = &v
	return s
}

func (s *TomcatConfig) SetPort(v int32) *TomcatConfig {
	s.Port = &v
	return s
}

func (s *TomcatConfig) SetUriEncoding(v string) *TomcatConfig {
	s.UriEncoding = &v
	return s
}

func (s *TomcatConfig) SetUseBodyEncodingForUri(v bool) *TomcatConfig {
	s.UseBodyEncodingForUri = &v
	return s
}

func (s *TomcatConfig) SetVersion(v string) *TomcatConfig {
	s.Version = &v
	return s
}

type TracingConfig struct {
	JaegerConfig *JaegerConfig `json:"jaegerConfig,omitempty" xml:"jaegerConfig,omitempty"`
	Params       interface{}   `json:"params,omitempty" xml:"params,omitempty"`
	Type         *string       `json:"type,omitempty" xml:"type,omitempty"`
}

func (s TracingConfig) String() string {
	return tea.Prettify(s)
}

func (s TracingConfig) GoString() string {
	return s.String()
}

func (s *TracingConfig) SetJaegerConfig(v *JaegerConfig) *TracingConfig {
	s.JaegerConfig = v
	return s
}

func (s *TracingConfig) SetParams(v interface{}) *TracingConfig {
	s.Params = v
	return s
}

func (s *TracingConfig) SetType(v string) *TracingConfig {
	s.Type = &v
	return s
}

type TrafficConfig struct {
	AdditionalVersionWeight map[string]*float32 `json:"additionalVersionWeight,omitempty" xml:"additionalVersionWeight,omitempty"`
	CreatedTime             *string             `json:"createdTime,omitempty" xml:"createdTime,omitempty"`
	LastModifiedTime        *string             `json:"lastModifiedTime,omitempty" xml:"lastModifiedTime,omitempty"`
	RequestId               *string             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResolvePolicy           *string             `json:"resolvePolicy,omitempty" xml:"resolvePolicy,omitempty"`
	RoutePolicy             *RoutePolicy        `json:"routePolicy,omitempty" xml:"routePolicy,omitempty"`
	VersionId               *string             `json:"versionId,omitempty" xml:"versionId,omitempty"`
}

func (s TrafficConfig) String() string {
	return tea.Prettify(s)
}

func (s TrafficConfig) GoString() string {
	return s.String()
}

func (s *TrafficConfig) SetAdditionalVersionWeight(v map[string]*float32) *TrafficConfig {
	s.AdditionalVersionWeight = v
	return s
}

func (s *TrafficConfig) SetCreatedTime(v string) *TrafficConfig {
	s.CreatedTime = &v
	return s
}

func (s *TrafficConfig) SetLastModifiedTime(v string) *TrafficConfig {
	s.LastModifiedTime = &v
	return s
}

func (s *TrafficConfig) SetRequestId(v string) *TrafficConfig {
	s.RequestId = &v
	return s
}

func (s *TrafficConfig) SetResolvePolicy(v string) *TrafficConfig {
	s.ResolvePolicy = &v
	return s
}

func (s *TrafficConfig) SetRoutePolicy(v *RoutePolicy) *TrafficConfig {
	s.RoutePolicy = v
	return s
}

func (s *TrafficConfig) SetVersionId(v string) *TrafficConfig {
	s.VersionId = &v
	return s
}

type UpdateApplicationInput struct {
	Args                    *string                  `json:"args,omitempty" xml:"args,omitempty"`
	CaPort                  *int32                   `json:"caPort,omitempty" xml:"caPort,omitempty"`
	Code                    *InputCodeLocation       `json:"code,omitempty" xml:"code,omitempty"`
	Command                 *string                  `json:"command,omitempty" xml:"command,omitempty"`
	Cpu                     *float32                 `json:"cpu,omitempty" xml:"cpu,omitempty"`
	CustomDNS               *CustomDNS               `json:"customDNS,omitempty" xml:"customDNS,omitempty"`
	CustomHealthCheckConfig *CustomHealthCheckConfig `json:"customHealthCheckConfig,omitempty" xml:"customHealthCheckConfig,omitempty"`
	CustomHostAlias         *CustomHostAlias         `json:"customHostAlias,omitempty" xml:"customHostAlias,omitempty"`
	CustomRuntimeConfig     *CustomRuntimeConfig     `json:"customRuntimeConfig,omitempty" xml:"customRuntimeConfig,omitempty"`
	Description             *string                  `json:"description,omitempty" xml:"description,omitempty"`
	DiskSize                *int32                   `json:"diskSize,omitempty" xml:"diskSize,omitempty"`
	EffectiveImmediately    *bool                    `json:"effectiveImmediately,omitempty" xml:"effectiveImmediately,omitempty"`
	EnableAppMetric         *bool                    `json:"enableAppMetric,omitempty" xml:"enableAppMetric,omitempty"`
	EnvironmentVariables    map[string]*string       `json:"environmentVariables,omitempty" xml:"environmentVariables,omitempty"`
	GpuMemorySize           *int32                   `json:"gpuMemorySize,omitempty" xml:"gpuMemorySize,omitempty"`
	Handler                 *string                  `json:"handler,omitempty" xml:"handler,omitempty"`
	HttpTriggerConfig       *HTTPTriggerConfig       `json:"httpTriggerConfig,omitempty" xml:"httpTriggerConfig,omitempty"`
	ImageConfig             *ImageConfig             `json:"imageConfig,omitempty" xml:"imageConfig,omitempty"`
	InitializationTimeout   *int32                   `json:"initializationTimeout,omitempty" xml:"initializationTimeout,omitempty"`
	Initializer             *string                  `json:"initializer,omitempty" xml:"initializer,omitempty"`
	InstanceConcurrency     *int32                   `json:"instanceConcurrency,omitempty" xml:"instanceConcurrency,omitempty"`
	InstanceLifecycleConfig *InstanceLifecycleConfig `json:"instanceLifecycleConfig,omitempty" xml:"instanceLifecycleConfig,omitempty"`
	InstanceSoftConcurrency *int32                   `json:"instanceSoftConcurrency,omitempty" xml:"instanceSoftConcurrency,omitempty"`
	InstanceType            *string                  `json:"instanceType,omitempty" xml:"instanceType,omitempty"`
	InternetAccess          *bool                    `json:"internetAccess,omitempty" xml:"internetAccess,omitempty"`
	Layers                  []*string                `json:"layers,omitempty" xml:"layers,omitempty" type:"Repeated"`
	LivenessProbe           *Probe                   `json:"livenessProbe,omitempty" xml:"livenessProbe,omitempty"`
	LogConfig               *LogConfig               `json:"logConfig,omitempty" xml:"logConfig,omitempty"`
	MemorySize              *int32                   `json:"memorySize,omitempty" xml:"memorySize,omitempty"`
	NamespaceID             *string                  `json:"namespaceID,omitempty" xml:"namespaceID,omitempty"`
	NasConfig               *NASConfig               `json:"nasConfig,omitempty" xml:"nasConfig,omitempty"`
	OssMountConfig          *OSSMountConfig          `json:"ossMountConfig,omitempty" xml:"ossMountConfig,omitempty"`
	ProgrammingLanguage     *string                  `json:"programmingLanguage,omitempty" xml:"programmingLanguage,omitempty"`
	Runtime                 *string                  `json:"runtime,omitempty" xml:"runtime,omitempty"`
	ScaleConfig             *ScaleConfig             `json:"scaleConfig,omitempty" xml:"scaleConfig,omitempty"`
	SlsConfig               *SLSConfig               `json:"slsConfig,omitempty" xml:"slsConfig,omitempty"`
	StartupProbe            *Probe                   `json:"startupProbe,omitempty" xml:"startupProbe,omitempty"`
	Timeout                 *int32                   `json:"timeout,omitempty" xml:"timeout,omitempty"`
	TracingConfig           *TracingConfig           `json:"tracingConfig,omitempty" xml:"tracingConfig,omitempty"`
	VpcConfig               *VPCConfig               `json:"vpcConfig,omitempty" xml:"vpcConfig,omitempty"`
}

func (s UpdateApplicationInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationInput) GoString() string {
	return s.String()
}

func (s *UpdateApplicationInput) SetArgs(v string) *UpdateApplicationInput {
	s.Args = &v
	return s
}

func (s *UpdateApplicationInput) SetCaPort(v int32) *UpdateApplicationInput {
	s.CaPort = &v
	return s
}

func (s *UpdateApplicationInput) SetCode(v *InputCodeLocation) *UpdateApplicationInput {
	s.Code = v
	return s
}

func (s *UpdateApplicationInput) SetCommand(v string) *UpdateApplicationInput {
	s.Command = &v
	return s
}

func (s *UpdateApplicationInput) SetCpu(v float32) *UpdateApplicationInput {
	s.Cpu = &v
	return s
}

func (s *UpdateApplicationInput) SetCustomDNS(v *CustomDNS) *UpdateApplicationInput {
	s.CustomDNS = v
	return s
}

func (s *UpdateApplicationInput) SetCustomHealthCheckConfig(v *CustomHealthCheckConfig) *UpdateApplicationInput {
	s.CustomHealthCheckConfig = v
	return s
}

func (s *UpdateApplicationInput) SetCustomHostAlias(v *CustomHostAlias) *UpdateApplicationInput {
	s.CustomHostAlias = v
	return s
}

func (s *UpdateApplicationInput) SetCustomRuntimeConfig(v *CustomRuntimeConfig) *UpdateApplicationInput {
	s.CustomRuntimeConfig = v
	return s
}

func (s *UpdateApplicationInput) SetDescription(v string) *UpdateApplicationInput {
	s.Description = &v
	return s
}

func (s *UpdateApplicationInput) SetDiskSize(v int32) *UpdateApplicationInput {
	s.DiskSize = &v
	return s
}

func (s *UpdateApplicationInput) SetEffectiveImmediately(v bool) *UpdateApplicationInput {
	s.EffectiveImmediately = &v
	return s
}

func (s *UpdateApplicationInput) SetEnableAppMetric(v bool) *UpdateApplicationInput {
	s.EnableAppMetric = &v
	return s
}

func (s *UpdateApplicationInput) SetEnvironmentVariables(v map[string]*string) *UpdateApplicationInput {
	s.EnvironmentVariables = v
	return s
}

func (s *UpdateApplicationInput) SetGpuMemorySize(v int32) *UpdateApplicationInput {
	s.GpuMemorySize = &v
	return s
}

func (s *UpdateApplicationInput) SetHandler(v string) *UpdateApplicationInput {
	s.Handler = &v
	return s
}

func (s *UpdateApplicationInput) SetHttpTriggerConfig(v *HTTPTriggerConfig) *UpdateApplicationInput {
	s.HttpTriggerConfig = v
	return s
}

func (s *UpdateApplicationInput) SetImageConfig(v *ImageConfig) *UpdateApplicationInput {
	s.ImageConfig = v
	return s
}

func (s *UpdateApplicationInput) SetInitializationTimeout(v int32) *UpdateApplicationInput {
	s.InitializationTimeout = &v
	return s
}

func (s *UpdateApplicationInput) SetInitializer(v string) *UpdateApplicationInput {
	s.Initializer = &v
	return s
}

func (s *UpdateApplicationInput) SetInstanceConcurrency(v int32) *UpdateApplicationInput {
	s.InstanceConcurrency = &v
	return s
}

func (s *UpdateApplicationInput) SetInstanceLifecycleConfig(v *InstanceLifecycleConfig) *UpdateApplicationInput {
	s.InstanceLifecycleConfig = v
	return s
}

func (s *UpdateApplicationInput) SetInstanceSoftConcurrency(v int32) *UpdateApplicationInput {
	s.InstanceSoftConcurrency = &v
	return s
}

func (s *UpdateApplicationInput) SetInstanceType(v string) *UpdateApplicationInput {
	s.InstanceType = &v
	return s
}

func (s *UpdateApplicationInput) SetInternetAccess(v bool) *UpdateApplicationInput {
	s.InternetAccess = &v
	return s
}

func (s *UpdateApplicationInput) SetLayers(v []*string) *UpdateApplicationInput {
	s.Layers = v
	return s
}

func (s *UpdateApplicationInput) SetLivenessProbe(v *Probe) *UpdateApplicationInput {
	s.LivenessProbe = v
	return s
}

func (s *UpdateApplicationInput) SetLogConfig(v *LogConfig) *UpdateApplicationInput {
	s.LogConfig = v
	return s
}

func (s *UpdateApplicationInput) SetMemorySize(v int32) *UpdateApplicationInput {
	s.MemorySize = &v
	return s
}

func (s *UpdateApplicationInput) SetNamespaceID(v string) *UpdateApplicationInput {
	s.NamespaceID = &v
	return s
}

func (s *UpdateApplicationInput) SetNasConfig(v *NASConfig) *UpdateApplicationInput {
	s.NasConfig = v
	return s
}

func (s *UpdateApplicationInput) SetOssMountConfig(v *OSSMountConfig) *UpdateApplicationInput {
	s.OssMountConfig = v
	return s
}

func (s *UpdateApplicationInput) SetProgrammingLanguage(v string) *UpdateApplicationInput {
	s.ProgrammingLanguage = &v
	return s
}

func (s *UpdateApplicationInput) SetRuntime(v string) *UpdateApplicationInput {
	s.Runtime = &v
	return s
}

func (s *UpdateApplicationInput) SetScaleConfig(v *ScaleConfig) *UpdateApplicationInput {
	s.ScaleConfig = v
	return s
}

func (s *UpdateApplicationInput) SetSlsConfig(v *SLSConfig) *UpdateApplicationInput {
	s.SlsConfig = v
	return s
}

func (s *UpdateApplicationInput) SetStartupProbe(v *Probe) *UpdateApplicationInput {
	s.StartupProbe = v
	return s
}

func (s *UpdateApplicationInput) SetTimeout(v int32) *UpdateApplicationInput {
	s.Timeout = &v
	return s
}

func (s *UpdateApplicationInput) SetTracingConfig(v *TracingConfig) *UpdateApplicationInput {
	s.TracingConfig = v
	return s
}

func (s *UpdateApplicationInput) SetVpcConfig(v *VPCConfig) *UpdateApplicationInput {
	s.VpcConfig = v
	return s
}

type UpdateApplicationScaleConfigInput struct {
	AlwaysAllocateCPU    *bool  `json:"alwaysAllocateCPU,omitempty" xml:"alwaysAllocateCPU,omitempty"`
	MaximumInstanceCount *int64 `json:"maximumInstanceCount,omitempty" xml:"maximumInstanceCount,omitempty"`
	MinimumInstanceCount *int64 `json:"minimumInstanceCount,omitempty" xml:"minimumInstanceCount,omitempty"`
}

func (s UpdateApplicationScaleConfigInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScaleConfigInput) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScaleConfigInput) SetAlwaysAllocateCPU(v bool) *UpdateApplicationScaleConfigInput {
	s.AlwaysAllocateCPU = &v
	return s
}

func (s *UpdateApplicationScaleConfigInput) SetMaximumInstanceCount(v int64) *UpdateApplicationScaleConfigInput {
	s.MaximumInstanceCount = &v
	return s
}

func (s *UpdateApplicationScaleConfigInput) SetMinimumInstanceCount(v int64) *UpdateApplicationScaleConfigInput {
	s.MinimumInstanceCount = &v
	return s
}

type UpdateApplicationTrafficConfigInput struct {
	AdditionalVersionWeight map[string]*float32 `json:"additionalVersionWeight,omitempty" xml:"additionalVersionWeight,omitempty"`
	ResolvePolicy           *string             `json:"resolvePolicy,omitempty" xml:"resolvePolicy,omitempty"`
	RoutePolicy             *RoutePolicy        `json:"routePolicy,omitempty" xml:"routePolicy,omitempty"`
	VersionId               *string             `json:"versionId,omitempty" xml:"versionId,omitempty"`
}

func (s UpdateApplicationTrafficConfigInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationTrafficConfigInput) GoString() string {
	return s.String()
}

func (s *UpdateApplicationTrafficConfigInput) SetAdditionalVersionWeight(v map[string]*float32) *UpdateApplicationTrafficConfigInput {
	s.AdditionalVersionWeight = v
	return s
}

func (s *UpdateApplicationTrafficConfigInput) SetResolvePolicy(v string) *UpdateApplicationTrafficConfigInput {
	s.ResolvePolicy = &v
	return s
}

func (s *UpdateApplicationTrafficConfigInput) SetRoutePolicy(v *RoutePolicy) *UpdateApplicationTrafficConfigInput {
	s.RoutePolicy = v
	return s
}

func (s *UpdateApplicationTrafficConfigInput) SetVersionId(v string) *UpdateApplicationTrafficConfigInput {
	s.VersionId = &v
	return s
}

type UpdateAttributesInput struct {
	Description       *string            `json:"description,omitempty" xml:"description,omitempty"`
	HttpTriggerConfig *HTTPTriggerConfig `json:"httpTriggerConfig,omitempty" xml:"httpTriggerConfig,omitempty"`
	VersionID         *string            `json:"versionID,omitempty" xml:"versionID,omitempty"`
}

func (s UpdateAttributesInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateAttributesInput) GoString() string {
	return s.String()
}

func (s *UpdateAttributesInput) SetDescription(v string) *UpdateAttributesInput {
	s.Description = &v
	return s
}

func (s *UpdateAttributesInput) SetHttpTriggerConfig(v *HTTPTriggerConfig) *UpdateAttributesInput {
	s.HttpTriggerConfig = v
	return s
}

func (s *UpdateAttributesInput) SetVersionID(v string) *UpdateAttributesInput {
	s.VersionID = &v
	return s
}

type UpdateCustomDomainInput struct {
	ApplicationID   *string     `json:"applicationID,omitempty" xml:"applicationID,omitempty"`
	ApplicationName *string     `json:"applicationName,omitempty" xml:"applicationName,omitempty"`
	CertConfig      *CertConfig `json:"certConfig,omitempty" xml:"certConfig,omitempty"`
	KeepFullPath    *bool       `json:"keepFullPath,omitempty" xml:"keepFullPath,omitempty"`
	NamespaceID     *string     `json:"namespaceID,omitempty" xml:"namespaceID,omitempty"`
	Protocol        *string     `json:"protocol,omitempty" xml:"protocol,omitempty"`
	TlsConfig       *TLSConfig  `json:"tlsConfig,omitempty" xml:"tlsConfig,omitempty"`
	WafConfig       *WAFConfig  `json:"wafConfig,omitempty" xml:"wafConfig,omitempty"`
}

func (s UpdateCustomDomainInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomDomainInput) GoString() string {
	return s.String()
}

func (s *UpdateCustomDomainInput) SetApplicationID(v string) *UpdateCustomDomainInput {
	s.ApplicationID = &v
	return s
}

func (s *UpdateCustomDomainInput) SetApplicationName(v string) *UpdateCustomDomainInput {
	s.ApplicationName = &v
	return s
}

func (s *UpdateCustomDomainInput) SetCertConfig(v *CertConfig) *UpdateCustomDomainInput {
	s.CertConfig = v
	return s
}

func (s *UpdateCustomDomainInput) SetKeepFullPath(v bool) *UpdateCustomDomainInput {
	s.KeepFullPath = &v
	return s
}

func (s *UpdateCustomDomainInput) SetNamespaceID(v string) *UpdateCustomDomainInput {
	s.NamespaceID = &v
	return s
}

func (s *UpdateCustomDomainInput) SetProtocol(v string) *UpdateCustomDomainInput {
	s.Protocol = &v
	return s
}

func (s *UpdateCustomDomainInput) SetTlsConfig(v *TLSConfig) *UpdateCustomDomainInput {
	s.TlsConfig = v
	return s
}

func (s *UpdateCustomDomainInput) SetWafConfig(v *WAFConfig) *UpdateCustomDomainInput {
	s.WafConfig = v
	return s
}

type UpdateWebApplicationInput struct {
	// example:
	//
	// sae-app
	Description      *string           `json:"Description,omitempty" xml:"Description,omitempty"`
	WebNetworkConfig *WebNetworkConfig `json:"WebNetworkConfig,omitempty" xml:"WebNetworkConfig,omitempty"`
}

func (s UpdateWebApplicationInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebApplicationInput) GoString() string {
	return s.String()
}

func (s *UpdateWebApplicationInput) SetDescription(v string) *UpdateWebApplicationInput {
	s.Description = &v
	return s
}

func (s *UpdateWebApplicationInput) SetWebNetworkConfig(v *WebNetworkConfig) *UpdateWebApplicationInput {
	s.WebNetworkConfig = v
	return s
}

type UpdateWebApplicationScalingConfigInput struct {
	// This parameter is required.
	//
	// example:
	//
	// 10
	MaximumInstanceCount *int64 `json:"MaximumInstanceCount,omitempty" xml:"MaximumInstanceCount,omitempty"`
	// This parameter is required.
	MinimumInstanceCount *int64 `json:"MinimumInstanceCount,omitempty" xml:"MinimumInstanceCount,omitempty"`
}

func (s UpdateWebApplicationScalingConfigInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebApplicationScalingConfigInput) GoString() string {
	return s.String()
}

func (s *UpdateWebApplicationScalingConfigInput) SetMaximumInstanceCount(v int64) *UpdateWebApplicationScalingConfigInput {
	s.MaximumInstanceCount = &v
	return s
}

func (s *UpdateWebApplicationScalingConfigInput) SetMinimumInstanceCount(v int64) *UpdateWebApplicationScalingConfigInput {
	s.MinimumInstanceCount = &v
	return s
}

type UpdateWebApplicationTrafficConfigInput struct {
	// example:
	//
	// Anonymous
	AuthType               *string             `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	DisableURLInternet     *bool               `json:"DisableURLInternet,omitempty" xml:"DisableURLInternet,omitempty"`
	RevisionsTrafficWeight map[string]*float32 `json:"RevisionsTrafficWeight,omitempty" xml:"RevisionsTrafficWeight,omitempty"`
	WebAclConfig           *WebAclConfig       `json:"WebAclConfig,omitempty" xml:"WebAclConfig,omitempty"`
}

func (s UpdateWebApplicationTrafficConfigInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebApplicationTrafficConfigInput) GoString() string {
	return s.String()
}

func (s *UpdateWebApplicationTrafficConfigInput) SetAuthType(v string) *UpdateWebApplicationTrafficConfigInput {
	s.AuthType = &v
	return s
}

func (s *UpdateWebApplicationTrafficConfigInput) SetDisableURLInternet(v bool) *UpdateWebApplicationTrafficConfigInput {
	s.DisableURLInternet = &v
	return s
}

func (s *UpdateWebApplicationTrafficConfigInput) SetRevisionsTrafficWeight(v map[string]*float32) *UpdateWebApplicationTrafficConfigInput {
	s.RevisionsTrafficWeight = v
	return s
}

func (s *UpdateWebApplicationTrafficConfigInput) SetWebAclConfig(v *WebAclConfig) *UpdateWebApplicationTrafficConfigInput {
	s.WebAclConfig = v
	return s
}

type UpdateWebCustomDomainInput struct {
	DefaultForwardingAppName *string `json:"DefaultForwardingAppName,omitempty" xml:"DefaultForwardingAppName,omitempty"`
	// example:
	//
	// HTTP
	Protocol      *string        `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	RouteConfig   *RouteConfig   `json:"RouteConfig,omitempty" xml:"RouteConfig,omitempty"`
	WebCertConfig *WebCertConfig `json:"WebCertConfig,omitempty" xml:"WebCertConfig,omitempty"`
	WebTLSConfig  *WebTLSConfig  `json:"WebTLSConfig,omitempty" xml:"WebTLSConfig,omitempty"`
	WebWAFConfig  *WebWAFConfig  `json:"WebWAFConfig,omitempty" xml:"WebWAFConfig,omitempty"`
}

func (s UpdateWebCustomDomainInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebCustomDomainInput) GoString() string {
	return s.String()
}

func (s *UpdateWebCustomDomainInput) SetDefaultForwardingAppName(v string) *UpdateWebCustomDomainInput {
	s.DefaultForwardingAppName = &v
	return s
}

func (s *UpdateWebCustomDomainInput) SetProtocol(v string) *UpdateWebCustomDomainInput {
	s.Protocol = &v
	return s
}

func (s *UpdateWebCustomDomainInput) SetRouteConfig(v *RouteConfig) *UpdateWebCustomDomainInput {
	s.RouteConfig = v
	return s
}

func (s *UpdateWebCustomDomainInput) SetWebCertConfig(v *WebCertConfig) *UpdateWebCustomDomainInput {
	s.WebCertConfig = v
	return s
}

func (s *UpdateWebCustomDomainInput) SetWebTLSConfig(v *WebTLSConfig) *UpdateWebCustomDomainInput {
	s.WebTLSConfig = v
	return s
}

func (s *UpdateWebCustomDomainInput) SetWebWAFConfig(v *WebWAFConfig) *UpdateWebCustomDomainInput {
	s.WebWAFConfig = v
	return s
}

type VPCConfig struct {
	AnytunnelViaENI *bool     `json:"anytunnelViaENI,omitempty" xml:"anytunnelViaENI,omitempty"`
	Role            *string   `json:"role,omitempty" xml:"role,omitempty"`
	SecurityGroupId *string   `json:"securityGroupId,omitempty" xml:"securityGroupId,omitempty"`
	VSwitchIds      []*string `json:"vSwitchIds,omitempty" xml:"vSwitchIds,omitempty" type:"Repeated"`
	VpcId           *string   `json:"vpcId,omitempty" xml:"vpcId,omitempty"`
}

func (s VPCConfig) String() string {
	return tea.Prettify(s)
}

func (s VPCConfig) GoString() string {
	return s.String()
}

func (s *VPCConfig) SetAnytunnelViaENI(v bool) *VPCConfig {
	s.AnytunnelViaENI = &v
	return s
}

func (s *VPCConfig) SetRole(v string) *VPCConfig {
	s.Role = &v
	return s
}

func (s *VPCConfig) SetSecurityGroupId(v string) *VPCConfig {
	s.SecurityGroupId = &v
	return s
}

func (s *VPCConfig) SetVSwitchIds(v []*string) *VPCConfig {
	s.VSwitchIds = v
	return s
}

func (s *VPCConfig) SetVpcId(v string) *VPCConfig {
	s.VpcId = &v
	return s
}

type Version struct {
	CreatedTime      *string  `json:"createdTime,omitempty" xml:"createdTime,omitempty"`
	Description      *string  `json:"description,omitempty" xml:"description,omitempty"`
	Image            *string  `json:"image,omitempty" xml:"image,omitempty"`
	LastModifiedTime *string  `json:"lastModifiedTime,omitempty" xml:"lastModifiedTime,omitempty"`
	RequestId        *string  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	VersionId        *string  `json:"versionId,omitempty" xml:"versionId,omitempty"`
	Weight           *float64 `json:"weight,omitempty" xml:"weight,omitempty"`
}

func (s Version) String() string {
	return tea.Prettify(s)
}

func (s Version) GoString() string {
	return s.String()
}

func (s *Version) SetCreatedTime(v string) *Version {
	s.CreatedTime = &v
	return s
}

func (s *Version) SetDescription(v string) *Version {
	s.Description = &v
	return s
}

func (s *Version) SetImage(v string) *Version {
	s.Image = &v
	return s
}

func (s *Version) SetLastModifiedTime(v string) *Version {
	s.LastModifiedTime = &v
	return s
}

func (s *Version) SetRequestId(v string) *Version {
	s.RequestId = &v
	return s
}

func (s *Version) SetVersionId(v string) *Version {
	s.VersionId = &v
	return s
}

func (s *Version) SetWeight(v float64) *Version {
	s.Weight = &v
	return s
}

type VersionStatus struct {
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Status       *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s VersionStatus) String() string {
	return tea.Prettify(s)
}

func (s VersionStatus) GoString() string {
	return s.String()
}

func (s *VersionStatus) SetErrorMessage(v string) *VersionStatus {
	s.ErrorMessage = &v
	return s
}

func (s *VersionStatus) SetStatus(v string) *VersionStatus {
	s.Status = &v
	return s
}

type WAFConfig struct {
	EnableWAF *bool `json:"enableWAF,omitempty" xml:"enableWAF,omitempty"`
}

func (s WAFConfig) String() string {
	return tea.Prettify(s)
}

func (s WAFConfig) GoString() string {
	return s.String()
}

func (s *WAFConfig) SetEnableWAF(v bool) *WAFConfig {
	s.EnableWAF = &v
	return s
}

type WebAclConfig struct {
	// This parameter is required.
	//
	// if can be null:
	// true
	WebAclEntries []*WebAclEntryConfig `json:"WebAclEntries,omitempty" xml:"WebAclEntries,omitempty" type:"Repeated"`
}

func (s WebAclConfig) String() string {
	return tea.Prettify(s)
}

func (s WebAclConfig) GoString() string {
	return s.String()
}

func (s *WebAclConfig) SetWebAclEntries(v []*WebAclEntryConfig) *WebAclConfig {
	s.WebAclEntries = v
	return s
}

type WebAclEntryConfig struct {
	// This parameter is required.
	//
	// example:
	//
	// 1.2.3.4/32
	Entry *string `json:"Entry,omitempty" xml:"Entry,omitempty"`
}

func (s WebAclEntryConfig) String() string {
	return tea.Prettify(s)
}

func (s WebAclEntryConfig) GoString() string {
	return s.String()
}

func (s *WebAclEntryConfig) SetEntry(v string) *WebAclEntryConfig {
	s.Entry = &v
	return s
}

type WebApplication struct {
	// This parameter is required.
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	// This parameter is required.
	ApplicationName  *string           `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	CreatedTime      *string           `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description      *string           `json:"Description,omitempty" xml:"Description,omitempty"`
	InternetURL      *string           `json:"InternetURL,omitempty" xml:"InternetURL,omitempty"`
	IntranetURL      *string           `json:"IntranetURL,omitempty" xml:"IntranetURL,omitempty"`
	LastModifiedTime *string           `json:"LastModifiedTime,omitempty" xml:"LastModifiedTime,omitempty"`
	NamespaceId      *string           `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	RevisionConfig   *RevisionConfig   `json:"RevisionConfig,omitempty" xml:"RevisionConfig,omitempty"`
	VpcId            *string           `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	WebScalingConfig *WebScalingConfig `json:"WebScalingConfig,omitempty" xml:"WebScalingConfig,omitempty"`
	WebTrafficConfig *WebTrafficConfig `json:"WebTrafficConfig,omitempty" xml:"WebTrafficConfig,omitempty"`
}

func (s WebApplication) String() string {
	return tea.Prettify(s)
}

func (s WebApplication) GoString() string {
	return s.String()
}

func (s *WebApplication) SetApplicationId(v string) *WebApplication {
	s.ApplicationId = &v
	return s
}

func (s *WebApplication) SetApplicationName(v string) *WebApplication {
	s.ApplicationName = &v
	return s
}

func (s *WebApplication) SetCreatedTime(v string) *WebApplication {
	s.CreatedTime = &v
	return s
}

func (s *WebApplication) SetDescription(v string) *WebApplication {
	s.Description = &v
	return s
}

func (s *WebApplication) SetInternetURL(v string) *WebApplication {
	s.InternetURL = &v
	return s
}

func (s *WebApplication) SetIntranetURL(v string) *WebApplication {
	s.IntranetURL = &v
	return s
}

func (s *WebApplication) SetLastModifiedTime(v string) *WebApplication {
	s.LastModifiedTime = &v
	return s
}

func (s *WebApplication) SetNamespaceId(v string) *WebApplication {
	s.NamespaceId = &v
	return s
}

func (s *WebApplication) SetRevisionConfig(v *RevisionConfig) *WebApplication {
	s.RevisionConfig = v
	return s
}

func (s *WebApplication) SetVpcId(v string) *WebApplication {
	s.VpcId = &v
	return s
}

func (s *WebApplication) SetWebScalingConfig(v *WebScalingConfig) *WebApplication {
	s.WebScalingConfig = v
	return s
}

func (s *WebApplication) SetWebTrafficConfig(v *WebTrafficConfig) *WebApplication {
	s.WebTrafficConfig = v
	return s
}

type WebApplicationBody struct {
	Code      *int32          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *WebApplication `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WebApplicationBody) String() string {
	return tea.Prettify(s)
}

func (s WebApplicationBody) GoString() string {
	return s.String()
}

func (s *WebApplicationBody) SetCode(v int32) *WebApplicationBody {
	s.Code = &v
	return s
}

func (s *WebApplicationBody) SetData(v *WebApplication) *WebApplicationBody {
	s.Data = v
	return s
}

func (s *WebApplicationBody) SetMessage(v string) *WebApplicationBody {
	s.Message = &v
	return s
}

func (s *WebApplicationBody) SetRequestId(v string) *WebApplicationBody {
	s.RequestId = &v
	return s
}

func (s *WebApplicationBody) SetSuccess(v bool) *WebApplicationBody {
	s.Success = &v
	return s
}

type WebApplicationInstanceLogsBody struct {
	Code      *int32                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeInstanceLogsOutput `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WebApplicationInstanceLogsBody) String() string {
	return tea.Prettify(s)
}

func (s WebApplicationInstanceLogsBody) GoString() string {
	return s.String()
}

func (s *WebApplicationInstanceLogsBody) SetCode(v int32) *WebApplicationInstanceLogsBody {
	s.Code = &v
	return s
}

func (s *WebApplicationInstanceLogsBody) SetData(v *DescribeInstanceLogsOutput) *WebApplicationInstanceLogsBody {
	s.Data = v
	return s
}

func (s *WebApplicationInstanceLogsBody) SetMessage(v string) *WebApplicationInstanceLogsBody {
	s.Message = &v
	return s
}

func (s *WebApplicationInstanceLogsBody) SetRequestId(v string) *WebApplicationInstanceLogsBody {
	s.RequestId = &v
	return s
}

func (s *WebApplicationInstanceLogsBody) SetSuccess(v bool) *WebApplicationInstanceLogsBody {
	s.Success = &v
	return s
}

type WebApplicationResourceStaticsBody struct {
	Code      *int32                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeWebAppStaticsOutput `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WebApplicationResourceStaticsBody) String() string {
	return tea.Prettify(s)
}

func (s WebApplicationResourceStaticsBody) GoString() string {
	return s.String()
}

func (s *WebApplicationResourceStaticsBody) SetCode(v int32) *WebApplicationResourceStaticsBody {
	s.Code = &v
	return s
}

func (s *WebApplicationResourceStaticsBody) SetData(v *DescribeWebAppStaticsOutput) *WebApplicationResourceStaticsBody {
	s.Data = v
	return s
}

func (s *WebApplicationResourceStaticsBody) SetMessage(v string) *WebApplicationResourceStaticsBody {
	s.Message = &v
	return s
}

func (s *WebApplicationResourceStaticsBody) SetRequestId(v string) *WebApplicationResourceStaticsBody {
	s.RequestId = &v
	return s
}

func (s *WebApplicationResourceStaticsBody) SetSuccess(v bool) *WebApplicationResourceStaticsBody {
	s.Success = &v
	return s
}

type WebApplicationRevisionBody struct {
	Code      *int32    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *Revision `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WebApplicationRevisionBody) String() string {
	return tea.Prettify(s)
}

func (s WebApplicationRevisionBody) GoString() string {
	return s.String()
}

func (s *WebApplicationRevisionBody) SetCode(v int32) *WebApplicationRevisionBody {
	s.Code = &v
	return s
}

func (s *WebApplicationRevisionBody) SetData(v *Revision) *WebApplicationRevisionBody {
	s.Data = v
	return s
}

func (s *WebApplicationRevisionBody) SetMessage(v string) *WebApplicationRevisionBody {
	s.Message = &v
	return s
}

func (s *WebApplicationRevisionBody) SetRequestId(v string) *WebApplicationRevisionBody {
	s.RequestId = &v
	return s
}

func (s *WebApplicationRevisionBody) SetSuccess(v bool) *WebApplicationRevisionBody {
	s.Success = &v
	return s
}

type WebApplicationScalingConfigBody struct {
	Code      *int32            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *WebScalingConfig `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WebApplicationScalingConfigBody) String() string {
	return tea.Prettify(s)
}

func (s WebApplicationScalingConfigBody) GoString() string {
	return s.String()
}

func (s *WebApplicationScalingConfigBody) SetCode(v int32) *WebApplicationScalingConfigBody {
	s.Code = &v
	return s
}

func (s *WebApplicationScalingConfigBody) SetData(v *WebScalingConfig) *WebApplicationScalingConfigBody {
	s.Data = v
	return s
}

func (s *WebApplicationScalingConfigBody) SetMessage(v string) *WebApplicationScalingConfigBody {
	s.Message = &v
	return s
}

func (s *WebApplicationScalingConfigBody) SetRequestId(v string) *WebApplicationScalingConfigBody {
	s.RequestId = &v
	return s
}

func (s *WebApplicationScalingConfigBody) SetSuccess(v bool) *WebApplicationScalingConfigBody {
	s.Success = &v
	return s
}

type WebApplicationStatus struct {
	InstanceCount    *int64            `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	WebScalingConfig *WebScalingConfig `json:"WebScalingConfig,omitempty" xml:"WebScalingConfig,omitempty"`
}

func (s WebApplicationStatus) String() string {
	return tea.Prettify(s)
}

func (s WebApplicationStatus) GoString() string {
	return s.String()
}

func (s *WebApplicationStatus) SetInstanceCount(v int64) *WebApplicationStatus {
	s.InstanceCount = &v
	return s
}

func (s *WebApplicationStatus) SetWebScalingConfig(v *WebScalingConfig) *WebApplicationStatus {
	s.WebScalingConfig = v
	return s
}

type WebApplicationTrafficConfigBody struct {
	Code      *int32            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *WebTrafficConfig `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WebApplicationTrafficConfigBody) String() string {
	return tea.Prettify(s)
}

func (s WebApplicationTrafficConfigBody) GoString() string {
	return s.String()
}

func (s *WebApplicationTrafficConfigBody) SetCode(v int32) *WebApplicationTrafficConfigBody {
	s.Code = &v
	return s
}

func (s *WebApplicationTrafficConfigBody) SetData(v *WebTrafficConfig) *WebApplicationTrafficConfigBody {
	s.Data = v
	return s
}

func (s *WebApplicationTrafficConfigBody) SetMessage(v string) *WebApplicationTrafficConfigBody {
	s.Message = &v
	return s
}

func (s *WebApplicationTrafficConfigBody) SetRequestId(v string) *WebApplicationTrafficConfigBody {
	s.RequestId = &v
	return s
}

func (s *WebApplicationTrafficConfigBody) SetSuccess(v bool) *WebApplicationTrafficConfigBody {
	s.Success = &v
	return s
}

type WebApplicationWithInstanceCount struct {
	InstanceCount  *int64          `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	WebApplication *WebApplication `json:"WebApplication,omitempty" xml:"WebApplication,omitempty"`
}

func (s WebApplicationWithInstanceCount) String() string {
	return tea.Prettify(s)
}

func (s WebApplicationWithInstanceCount) GoString() string {
	return s.String()
}

func (s *WebApplicationWithInstanceCount) SetInstanceCount(v int64) *WebApplicationWithInstanceCount {
	s.InstanceCount = &v
	return s
}

func (s *WebApplicationWithInstanceCount) SetWebApplication(v *WebApplication) *WebApplicationWithInstanceCount {
	s.WebApplication = v
	return s
}

type WebApplicationWithStatus struct {
	Status         *WebApplicationStatus `json:"Status,omitempty" xml:"Status,omitempty"`
	WebApplication *WebApplication       `json:"WebApplication,omitempty" xml:"WebApplication,omitempty"`
}

func (s WebApplicationWithStatus) String() string {
	return tea.Prettify(s)
}

func (s WebApplicationWithStatus) GoString() string {
	return s.String()
}

func (s *WebApplicationWithStatus) SetStatus(v *WebApplicationStatus) *WebApplicationWithStatus {
	s.Status = v
	return s
}

func (s *WebApplicationWithStatus) SetWebApplication(v *WebApplication) *WebApplicationWithStatus {
	s.WebApplication = v
	return s
}

type WebCertConfig struct {
	CertName    *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	PrivateKey  *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
}

func (s WebCertConfig) String() string {
	return tea.Prettify(s)
}

func (s WebCertConfig) GoString() string {
	return s.String()
}

func (s *WebCertConfig) SetCertName(v string) *WebCertConfig {
	s.CertName = &v
	return s
}

func (s *WebCertConfig) SetCertificate(v string) *WebCertConfig {
	s.Certificate = &v
	return s
}

func (s *WebCertConfig) SetPrivateKey(v string) *WebCertConfig {
	s.PrivateKey = &v
	return s
}

type WebCustomDomain struct {
	// example:
	//
	// 2023-03-30T08:02:19Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// appxxxxx
	DefaultForwardingAppName *string `json:"DefaultForwardingAppName,omitempty" xml:"DefaultForwardingAppName,omitempty"`
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// 2023-03-30T08:02:19Z
	LastModifiedTime *string `json:"LastModifiedTime,omitempty" xml:"LastModifiedTime,omitempty"`
	NamespaceId      *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// example:
	//
	// HTTP
	Protocol      *string        `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	RouteConfig   *RouteConfig   `json:"RouteConfig,omitempty" xml:"RouteConfig,omitempty"`
	WebCertConfig *WebCertConfig `json:"WebCertConfig,omitempty" xml:"WebCertConfig,omitempty"`
	WebTLSConfig  *WebTLSConfig  `json:"WebTLSConfig,omitempty" xml:"WebTLSConfig,omitempty"`
	WebWAFConfig  *WebWAFConfig  `json:"WebWAFConfig,omitempty" xml:"WebWAFConfig,omitempty"`
	// example:
	//
	// 123xxxxxx
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s WebCustomDomain) String() string {
	return tea.Prettify(s)
}

func (s WebCustomDomain) GoString() string {
	return s.String()
}

func (s *WebCustomDomain) SetCreatedTime(v string) *WebCustomDomain {
	s.CreatedTime = &v
	return s
}

func (s *WebCustomDomain) SetDefaultForwardingAppName(v string) *WebCustomDomain {
	s.DefaultForwardingAppName = &v
	return s
}

func (s *WebCustomDomain) SetDomainName(v string) *WebCustomDomain {
	s.DomainName = &v
	return s
}

func (s *WebCustomDomain) SetLastModifiedTime(v string) *WebCustomDomain {
	s.LastModifiedTime = &v
	return s
}

func (s *WebCustomDomain) SetNamespaceId(v string) *WebCustomDomain {
	s.NamespaceId = &v
	return s
}

func (s *WebCustomDomain) SetProtocol(v string) *WebCustomDomain {
	s.Protocol = &v
	return s
}

func (s *WebCustomDomain) SetRouteConfig(v *RouteConfig) *WebCustomDomain {
	s.RouteConfig = v
	return s
}

func (s *WebCustomDomain) SetWebCertConfig(v *WebCertConfig) *WebCustomDomain {
	s.WebCertConfig = v
	return s
}

func (s *WebCustomDomain) SetWebTLSConfig(v *WebTLSConfig) *WebCustomDomain {
	s.WebTLSConfig = v
	return s
}

func (s *WebCustomDomain) SetWebWAFConfig(v *WebWAFConfig) *WebCustomDomain {
	s.WebWAFConfig = v
	return s
}

func (s *WebCustomDomain) SetAccountId(v string) *WebCustomDomain {
	s.AccountId = &v
	return s
}

type WebCustomDomainBody struct {
	Code      *int32           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *WebCustomDomain `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WebCustomDomainBody) String() string {
	return tea.Prettify(s)
}

func (s WebCustomDomainBody) GoString() string {
	return s.String()
}

func (s *WebCustomDomainBody) SetCode(v int32) *WebCustomDomainBody {
	s.Code = &v
	return s
}

func (s *WebCustomDomainBody) SetData(v *WebCustomDomain) *WebCustomDomainBody {
	s.Data = v
	return s
}

func (s *WebCustomDomainBody) SetMessage(v string) *WebCustomDomainBody {
	s.Message = &v
	return s
}

func (s *WebCustomDomainBody) SetRequestId(v string) *WebCustomDomainBody {
	s.RequestId = &v
	return s
}

func (s *WebCustomDomainBody) SetSuccess(v bool) *WebCustomDomainBody {
	s.Success = &v
	return s
}

type WebInstanceInfo struct {
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// example:
	//
	// c-66691780-1522405d-3021e147e0c3
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s WebInstanceInfo) String() string {
	return tea.Prettify(s)
}

func (s WebInstanceInfo) GoString() string {
	return s.String()
}

func (s *WebInstanceInfo) SetImageUrl(v string) *WebInstanceInfo {
	s.ImageUrl = &v
	return s
}

func (s *WebInstanceInfo) SetInstanceId(v string) *WebInstanceInfo {
	s.InstanceId = &v
	return s
}

func (s *WebInstanceInfo) SetStatus(v string) *WebInstanceInfo {
	s.Status = &v
	return s
}

func (s *WebInstanceInfo) SetVersionId(v string) *WebInstanceInfo {
	s.VersionId = &v
	return s
}

type WebLogEntry struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s WebLogEntry) String() string {
	return tea.Prettify(s)
}

func (s WebLogEntry) GoString() string {
	return s.String()
}

func (s *WebLogEntry) SetMessage(v string) *WebLogEntry {
	s.Message = &v
	return s
}

type WebNASConfig struct {
	MountPoints []*WebNASMountPoint `json:"MountPoints,omitempty" xml:"MountPoints,omitempty" type:"Repeated"`
}

func (s WebNASConfig) String() string {
	return tea.Prettify(s)
}

func (s WebNASConfig) GoString() string {
	return s.String()
}

func (s *WebNASConfig) SetMountPoints(v []*WebNASMountPoint) *WebNASConfig {
	s.MountPoints = v
	return s
}

type WebNASMountPoint struct {
	MountDir *string `json:"MountDir,omitempty" xml:"MountDir,omitempty"`
	NasAddr  *string `json:"NasAddr,omitempty" xml:"NasAddr,omitempty"`
	NasPath  *string `json:"NasPath,omitempty" xml:"NasPath,omitempty"`
}

func (s WebNASMountPoint) String() string {
	return tea.Prettify(s)
}

func (s WebNASMountPoint) GoString() string {
	return s.String()
}

func (s *WebNASMountPoint) SetMountDir(v string) *WebNASMountPoint {
	s.MountDir = &v
	return s
}

func (s *WebNASMountPoint) SetNasAddr(v string) *WebNASMountPoint {
	s.NasAddr = &v
	return s
}

func (s *WebNASMountPoint) SetNasPath(v string) *WebNASMountPoint {
	s.NasPath = &v
	return s
}

type WebNetworkConfig struct {
	// example:
	//
	// true
	InternetAccess *bool `json:"InternetAccess,omitempty" xml:"InternetAccess,omitempty"`
	// example:
	//
	// sg-bp18hj1wtxgy3b0***
	SecurityGroupId *string   `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	VSwitchIds      []*string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Repeated"`
}

func (s WebNetworkConfig) String() string {
	return tea.Prettify(s)
}

func (s WebNetworkConfig) GoString() string {
	return s.String()
}

func (s *WebNetworkConfig) SetInternetAccess(v bool) *WebNetworkConfig {
	s.InternetAccess = &v
	return s
}

func (s *WebNetworkConfig) SetSecurityGroupId(v string) *WebNetworkConfig {
	s.SecurityGroupId = &v
	return s
}

func (s *WebNetworkConfig) SetVSwitchIds(v []*string) *WebNetworkConfig {
	s.VSwitchIds = v
	return s
}

type WebOSSConfig struct {
	MountPoints []*WebOSSMountPoint `json:"MountPoints,omitempty" xml:"MountPoints,omitempty" type:"Repeated"`
}

func (s WebOSSConfig) String() string {
	return tea.Prettify(s)
}

func (s WebOSSConfig) GoString() string {
	return s.String()
}

func (s *WebOSSConfig) SetMountPoints(v []*WebOSSMountPoint) *WebOSSConfig {
	s.MountPoints = v
	return s
}

type WebOSSMountPoint struct {
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	BucketPath *string `json:"BucketPath,omitempty" xml:"BucketPath,omitempty"`
	MountDir   *string `json:"MountDir,omitempty" xml:"MountDir,omitempty"`
	ReadOnly   *bool   `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
}

func (s WebOSSMountPoint) String() string {
	return tea.Prettify(s)
}

func (s WebOSSMountPoint) GoString() string {
	return s.String()
}

func (s *WebOSSMountPoint) SetBucketName(v string) *WebOSSMountPoint {
	s.BucketName = &v
	return s
}

func (s *WebOSSMountPoint) SetBucketPath(v string) *WebOSSMountPoint {
	s.BucketPath = &v
	return s
}

func (s *WebOSSMountPoint) SetMountDir(v string) *WebOSSMountPoint {
	s.MountDir = &v
	return s
}

func (s *WebOSSMountPoint) SetReadOnly(v bool) *WebOSSMountPoint {
	s.ReadOnly = &v
	return s
}

type WebScalingConfig struct {
	// example:
	//
	// 10
	MaximumInstanceCount *int64 `json:"MaximumInstanceCount,omitempty" xml:"MaximumInstanceCount,omitempty"`
	MinimumInstanceCount *int64 `json:"MinimumInstanceCount,omitempty" xml:"MinimumInstanceCount,omitempty"`
}

func (s WebScalingConfig) String() string {
	return tea.Prettify(s)
}

func (s WebScalingConfig) GoString() string {
	return s.String()
}

func (s *WebScalingConfig) SetMaximumInstanceCount(v int64) *WebScalingConfig {
	s.MaximumInstanceCount = &v
	return s
}

func (s *WebScalingConfig) SetMinimumInstanceCount(v int64) *WebScalingConfig {
	s.MinimumInstanceCount = &v
	return s
}

type WebStaticsInfo struct {
	CpuUsage           *int64 `json:"CpuUsage,omitempty" xml:"CpuUsage,omitempty"`
	InternetTrafficOut *int64 `json:"InternetTrafficOut,omitempty" xml:"InternetTrafficOut,omitempty"`
	Invocations        *int64 `json:"Invocations,omitempty" xml:"Invocations,omitempty"`
	MemoryUsage        *int64 `json:"MemoryUsage,omitempty" xml:"MemoryUsage,omitempty"`
}

func (s WebStaticsInfo) String() string {
	return tea.Prettify(s)
}

func (s WebStaticsInfo) GoString() string {
	return s.String()
}

func (s *WebStaticsInfo) SetCpuUsage(v int64) *WebStaticsInfo {
	s.CpuUsage = &v
	return s
}

func (s *WebStaticsInfo) SetInternetTrafficOut(v int64) *WebStaticsInfo {
	s.InternetTrafficOut = &v
	return s
}

func (s *WebStaticsInfo) SetInvocations(v int64) *WebStaticsInfo {
	s.Invocations = &v
	return s
}

func (s *WebStaticsInfo) SetMemoryUsage(v int64) *WebStaticsInfo {
	s.MemoryUsage = &v
	return s
}

type WebTLSConfig struct {
	CipherSuites []*string `json:"CipherSuites,omitempty" xml:"CipherSuites,omitempty" type:"Repeated"`
	MaxVersion   *string   `json:"MaxVersion,omitempty" xml:"MaxVersion,omitempty"`
	MinVersion   *string   `json:"MinVersion,omitempty" xml:"MinVersion,omitempty"`
}

func (s WebTLSConfig) String() string {
	return tea.Prettify(s)
}

func (s WebTLSConfig) GoString() string {
	return s.String()
}

func (s *WebTLSConfig) SetCipherSuites(v []*string) *WebTLSConfig {
	s.CipherSuites = v
	return s
}

func (s *WebTLSConfig) SetMaxVersion(v string) *WebTLSConfig {
	s.MaxVersion = &v
	return s
}

func (s *WebTLSConfig) SetMinVersion(v string) *WebTLSConfig {
	s.MinVersion = &v
	return s
}

type WebTrafficConfig struct {
	// example:
	//
	// Anonymous
	AuthType               *string             `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	DisableInternetURL     *bool               `json:"DisableInternetURL,omitempty" xml:"DisableInternetURL,omitempty"`
	RevisionsTrafficWeight map[string]*float32 `json:"RevisionsTrafficWeight,omitempty" xml:"RevisionsTrafficWeight,omitempty"`
	WebAclConfig           *WebAclConfig       `json:"WebAclConfig,omitempty" xml:"WebAclConfig,omitempty"`
}

func (s WebTrafficConfig) String() string {
	return tea.Prettify(s)
}

func (s WebTrafficConfig) GoString() string {
	return s.String()
}

func (s *WebTrafficConfig) SetAuthType(v string) *WebTrafficConfig {
	s.AuthType = &v
	return s
}

func (s *WebTrafficConfig) SetDisableInternetURL(v bool) *WebTrafficConfig {
	s.DisableInternetURL = &v
	return s
}

func (s *WebTrafficConfig) SetRevisionsTrafficWeight(v map[string]*float32) *WebTrafficConfig {
	s.RevisionsTrafficWeight = v
	return s
}

func (s *WebTrafficConfig) SetWebAclConfig(v *WebAclConfig) *WebTrafficConfig {
	s.WebAclConfig = v
	return s
}

type WebVersionStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s WebVersionStatus) String() string {
	return tea.Prettify(s)
}

func (s WebVersionStatus) GoString() string {
	return s.String()
}

func (s *WebVersionStatus) SetErrorMessage(v string) *WebVersionStatus {
	s.ErrorMessage = &v
	return s
}

func (s *WebVersionStatus) SetStatus(v string) *WebVersionStatus {
	s.Status = &v
	return s
}

type WebWAFConfig struct {
	EnableWAF *bool `json:"EnableWAF,omitempty" xml:"EnableWAF,omitempty"`
}

func (s WebWAFConfig) String() string {
	return tea.Prettify(s)
}

func (s WebWAFConfig) GoString() string {
	return s.String()
}

func (s *WebWAFConfig) SetEnableWAF(v bool) *WebWAFConfig {
	s.EnableWAF = &v
	return s
}

type AbortAndRollbackChangeOrderRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// ba386059-69b1-4e65-b1e5-0682d9fa****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s AbortAndRollbackChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderRequest) SetChangeOrderId(v string) *AbortAndRollbackChangeOrderRequest {
	s.ChangeOrderId = &v
	return s
}

type AbortAndRollbackChangeOrderResponseBody struct {
	// Indicates whether the change order was terminated or the application was rolled back. Valid values:
	//
	// 	- **true**: The change order was terminated or the application was rolled back.
	//
	// 	- **false**: The change order could not be terminated or the application could not be rolled back.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the change order.
	Data *AbortAndRollbackChangeOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// success
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The details of the change order.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s AbortAndRollbackChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetCode(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetData(v *AbortAndRollbackChangeOrderResponseBodyData) *AbortAndRollbackChangeOrderResponseBody {
	s.Data = v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetErrorCode(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetMessage(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetRequestId(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetSuccess(v bool) *AbortAndRollbackChangeOrderResponseBody {
	s.Success = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetTraceId(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.TraceId = &v
	return s
}

type AbortAndRollbackChangeOrderResponseBodyData struct {
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// ba386059-69b1-4e65-b1e5-0682d9fa****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s AbortAndRollbackChangeOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderResponseBodyData) SetChangeOrderId(v string) *AbortAndRollbackChangeOrderResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type AbortAndRollbackChangeOrderResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AbortAndRollbackChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AbortAndRollbackChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderResponse) SetHeaders(v map[string]*string) *AbortAndRollbackChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *AbortAndRollbackChangeOrderResponse) SetStatusCode(v int32) *AbortAndRollbackChangeOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponse) SetBody(v *AbortAndRollbackChangeOrderResponseBody) *AbortAndRollbackChangeOrderResponse {
	s.Body = v
	return s
}

type AbortChangeOrderRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// be2e1c76-682b-4897-98d3-1d8d6478****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s AbortChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderRequest) SetChangeOrderId(v string) *AbortChangeOrderRequest {
	s.ChangeOrderId = &v
	return s
}

type AbortChangeOrderResponseBody struct {
	// Indicates whether the change order was terminated. Valid values:
	//
	// 	- **true**: The change order was terminated.
	//
	// 	- **false**: The change order could not be terminated.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the change order.
	Data *AbortChangeOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The returned data.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s AbortChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderResponseBody) SetCode(v string) *AbortChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetData(v *AbortChangeOrderResponseBodyData) *AbortChangeOrderResponseBody {
	s.Data = v
	return s
}

func (s *AbortChangeOrderResponseBody) SetErrorCode(v string) *AbortChangeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetMessage(v string) *AbortChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetRequestId(v string) *AbortChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetSuccess(v bool) *AbortChangeOrderResponseBody {
	s.Success = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetTraceId(v string) *AbortChangeOrderResponseBody {
	s.TraceId = &v
	return s
}

type AbortChangeOrderResponseBodyData struct {
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// be2e1c76-682b-4897-98d3-1d8d6478****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s AbortChangeOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderResponseBodyData) SetChangeOrderId(v string) *AbortChangeOrderResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type AbortChangeOrderResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AbortChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AbortChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderResponse) SetHeaders(v map[string]*string) *AbortChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *AbortChangeOrderResponse) SetStatusCode(v int32) *AbortChangeOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *AbortChangeOrderResponse) SetBody(v *AbortChangeOrderResponseBody) *AbortChangeOrderResponse {
	s.Body = v
	return s
}

type BatchStartApplicationsRequest struct {
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// ebf491f0-c1a5-45e2-b2c4-710dbe2a****
	AppIds *string `json:"AppIds,omitempty" xml:"AppIds,omitempty"`
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The application version.
	//
	// example:
	//
	// 1.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s BatchStartApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchStartApplicationsRequest) GoString() string {
	return s.String()
}

func (s *BatchStartApplicationsRequest) SetAppIds(v string) *BatchStartApplicationsRequest {
	s.AppIds = &v
	return s
}

func (s *BatchStartApplicationsRequest) SetNamespaceId(v string) *BatchStartApplicationsRequest {
	s.NamespaceId = &v
	return s
}

func (s *BatchStartApplicationsRequest) SetVersion(v string) *BatchStartApplicationsRequest {
	s.Version = &v
	return s
}

type BatchStartApplicationsResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// - **2xx**: The call was successful.
	//
	// - **3xx**: The call was redirected.
	//
	// - **4xx**: The call failed.
	//
	// - **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error code.
	//
	// 	- If the request is successful, this parameter is not returned.****
	//
	// 	- This parameter is returned only if the request failed.***	- For more information, see **Error codes*	- in this topic.
	Data *BatchStartApplicationsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// - The ErrorCode parameter is not returned if the request succeeds.
	//
	// - If the call fails, the ErrorCode parameter is returned. For more information, see the "Error codes" section of this topic.
	//
	// example:
	//
	// NULL
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned data.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application deployment is successful. Take note of the following rules:
	//
	// - **true**
	//
	// - **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the change order.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s BatchStartApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchStartApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchStartApplicationsResponseBody) SetCode(v string) *BatchStartApplicationsResponseBody {
	s.Code = &v
	return s
}

func (s *BatchStartApplicationsResponseBody) SetData(v *BatchStartApplicationsResponseBodyData) *BatchStartApplicationsResponseBody {
	s.Data = v
	return s
}

func (s *BatchStartApplicationsResponseBody) SetErrorCode(v string) *BatchStartApplicationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *BatchStartApplicationsResponseBody) SetMessage(v string) *BatchStartApplicationsResponseBody {
	s.Message = &v
	return s
}

func (s *BatchStartApplicationsResponseBody) SetRequestId(v string) *BatchStartApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchStartApplicationsResponseBody) SetSuccess(v bool) *BatchStartApplicationsResponseBody {
	s.Success = &v
	return s
}

func (s *BatchStartApplicationsResponseBody) SetTraceId(v string) *BatchStartApplicationsResponseBody {
	s.TraceId = &v
	return s
}

type BatchStartApplicationsResponseBodyData struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 01db03d3-3ee9-48b3-b3d0-dfce2d88****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s BatchStartApplicationsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchStartApplicationsResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchStartApplicationsResponseBodyData) SetChangeOrderId(v string) *BatchStartApplicationsResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type BatchStartApplicationsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchStartApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchStartApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchStartApplicationsResponse) GoString() string {
	return s.String()
}

func (s *BatchStartApplicationsResponse) SetHeaders(v map[string]*string) *BatchStartApplicationsResponse {
	s.Headers = v
	return s
}

func (s *BatchStartApplicationsResponse) SetStatusCode(v int32) *BatchStartApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchStartApplicationsResponse) SetBody(v *BatchStartApplicationsResponseBody) *BatchStartApplicationsResponse {
	s.Body = v
	return s
}

type BatchStopApplicationsRequest struct {
	// The ID of the request.
	//
	// example:
	//
	// ebf491f0-c1a5-45e2-b2c4-710dbe2a****，ebf491f0-c1a5-45e2-b2c4-71025e2a****
	AppIds *string `json:"AppIds,omitempty" xml:"AppIds,omitempty"`
	// ebf491f0-c1a5-45e2-b2c4-710dbe2a\\*\\*\\*\\*,ebf491f0-c1a5-45e2-b2c4-71025e2a\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The application version.
	//
	// example:
	//
	// 1.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s BatchStopApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchStopApplicationsRequest) GoString() string {
	return s.String()
}

func (s *BatchStopApplicationsRequest) SetAppIds(v string) *BatchStopApplicationsRequest {
	s.AppIds = &v
	return s
}

func (s *BatchStopApplicationsRequest) SetNamespaceId(v string) *BatchStopApplicationsRequest {
	s.NamespaceId = &v
	return s
}

func (s *BatchStopApplicationsRequest) SetVersion(v string) *BatchStopApplicationsRequest {
	s.Version = &v
	return s
}

type BatchStopApplicationsResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// - **2xx**: The call was successful.
	//
	// - **3xx**: The call was redirected.
	//
	// - **4xx**: The call failed.
	//
	// - **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the change order.
	Data *BatchStopApplicationsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// - The ErrorCode parameter is not returned if the request succeeds.
	//
	// - If the call fails, the ErrorCode parameter is returned. For more information, see the "Error codes" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// 7BD8F4C7-D84C-4D46-9885-8212997E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application is created. Valid values
	//
	// - **true**
	//
	// - **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The returned data.
	//
	// example:
	//
	// 0bc3b6e215637275918588187d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s BatchStopApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchStopApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchStopApplicationsResponseBody) SetCode(v string) *BatchStopApplicationsResponseBody {
	s.Code = &v
	return s
}

func (s *BatchStopApplicationsResponseBody) SetData(v *BatchStopApplicationsResponseBodyData) *BatchStopApplicationsResponseBody {
	s.Data = v
	return s
}

func (s *BatchStopApplicationsResponseBody) SetErrorCode(v string) *BatchStopApplicationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *BatchStopApplicationsResponseBody) SetMessage(v string) *BatchStopApplicationsResponseBody {
	s.Message = &v
	return s
}

func (s *BatchStopApplicationsResponseBody) SetRequestId(v string) *BatchStopApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchStopApplicationsResponseBody) SetSuccess(v bool) *BatchStopApplicationsResponseBody {
	s.Success = &v
	return s
}

func (s *BatchStopApplicationsResponseBody) SetTraceId(v string) *BatchStopApplicationsResponseBody {
	s.TraceId = &v
	return s
}

type BatchStopApplicationsResponseBodyData struct {
	// The error code.
	//
	// 	- If the request is successful, this parameter is not returned.****
	//
	// 	- This parameter is returned only if the request failed.***	- For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// 4a815998-b468-4bea-b7d8-59f52a44****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s BatchStopApplicationsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchStopApplicationsResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchStopApplicationsResponseBodyData) SetChangeOrderId(v string) *BatchStopApplicationsResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type BatchStopApplicationsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchStopApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchStopApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchStopApplicationsResponse) GoString() string {
	return s.String()
}

func (s *BatchStopApplicationsResponse) SetHeaders(v map[string]*string) *BatchStopApplicationsResponse {
	s.Headers = v
	return s
}

func (s *BatchStopApplicationsResponse) SetStatusCode(v int32) *BatchStopApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchStopApplicationsResponse) SetBody(v *BatchStopApplicationsResponseBody) *BatchStopApplicationsResponse {
	s.Body = v
	return s
}

type BindSlbRequest struct {
	// 0099b7be-5f5b-4512-a7fc-56049ef1\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// [{"port":80,"targetPort":8080,"protocol":"TCP"}]
	//
	// example:
	//
	// [{"port":80,"targetPort":8080,"protocol":"TCP"}]
	Internet              *string `json:"Internet,omitempty" xml:"Internet,omitempty"`
	InternetSlbChargeType *string `json:"InternetSlbChargeType,omitempty" xml:"InternetSlbChargeType,omitempty"`
	// lb-bp1tg0k6d9nqaw7l1\\*\\*\\*\\*
	//
	// example:
	//
	// lb-bp1tg0k6d9nqaw7l1****
	InternetSlbId *string `json:"InternetSlbId,omitempty" xml:"InternetSlbId,omitempty"`
	// [{"port":80,"targetPort":8080,"protocol":"TCP"}]
	//
	// example:
	//
	// [{"port":80,"targetPort":8080,"protocol":"TCP"}]
	Intranet              *string `json:"Intranet,omitempty" xml:"Intranet,omitempty"`
	IntranetSlbChargeType *string `json:"IntranetSlbChargeType,omitempty" xml:"IntranetSlbChargeType,omitempty"`
	// lb-bp1tg0k6d9nqaw7l1\\*\\*\\*\\*
	//
	// example:
	//
	// lb-bp1tg0k6d9nqaw7l1****
	IntranetSlbId *string `json:"IntranetSlbId,omitempty" xml:"IntranetSlbId,omitempty"`
}

func (s BindSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s BindSlbRequest) GoString() string {
	return s.String()
}

func (s *BindSlbRequest) SetAppId(v string) *BindSlbRequest {
	s.AppId = &v
	return s
}

func (s *BindSlbRequest) SetInternet(v string) *BindSlbRequest {
	s.Internet = &v
	return s
}

func (s *BindSlbRequest) SetInternetSlbChargeType(v string) *BindSlbRequest {
	s.InternetSlbChargeType = &v
	return s
}

func (s *BindSlbRequest) SetInternetSlbId(v string) *BindSlbRequest {
	s.InternetSlbId = &v
	return s
}

func (s *BindSlbRequest) SetIntranet(v string) *BindSlbRequest {
	s.Intranet = &v
	return s
}

func (s *BindSlbRequest) SetIntranetSlbChargeType(v string) *BindSlbRequest {
	s.IntranetSlbChargeType = &v
	return s
}

func (s *BindSlbRequest) SetIntranetSlbId(v string) *BindSlbRequest {
	s.IntranetSlbId = &v
	return s
}

type BindSlbResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *BindSlbResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the SLB instance was successfully associated with the application. Valid values:
	//
	// 	- **true**: The SLB instance was successfully associated with the application.
	//
	// 	- **false**: The SLB instance could not be associated with the application.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s BindSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindSlbResponseBody) GoString() string {
	return s.String()
}

func (s *BindSlbResponseBody) SetCode(v string) *BindSlbResponseBody {
	s.Code = &v
	return s
}

func (s *BindSlbResponseBody) SetData(v *BindSlbResponseBodyData) *BindSlbResponseBody {
	s.Data = v
	return s
}

func (s *BindSlbResponseBody) SetErrorCode(v string) *BindSlbResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *BindSlbResponseBody) SetMessage(v string) *BindSlbResponseBody {
	s.Message = &v
	return s
}

func (s *BindSlbResponseBody) SetRequestId(v string) *BindSlbResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindSlbResponseBody) SetSuccess(v bool) *BindSlbResponseBody {
	s.Success = &v
	return s
}

func (s *BindSlbResponseBody) SetTraceId(v string) *BindSlbResponseBody {
	s.TraceId = &v
	return s
}

type BindSlbResponseBodyData struct {
	// The ID of the change order. It can be used to query the task status.
	//
	// example:
	//
	// 01db03d3-3ee9-48b3-b3d0-dfce2d88****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s BindSlbResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BindSlbResponseBodyData) GoString() string {
	return s.String()
}

func (s *BindSlbResponseBodyData) SetChangeOrderId(v string) *BindSlbResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type BindSlbResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindSlbResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s BindSlbResponse) GoString() string {
	return s.String()
}

func (s *BindSlbResponse) SetHeaders(v map[string]*string) *BindSlbResponse {
	s.Headers = v
	return s
}

func (s *BindSlbResponse) SetStatusCode(v int32) *BindSlbResponse {
	s.StatusCode = &v
	return s
}

func (s *BindSlbResponse) SetBody(v *BindSlbResponseBody) *BindSlbResponse {
	s.Body = v
	return s
}

type ConfirmPipelineBatchRequest struct {
	// true
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Confirm *bool `json:"Confirm,omitempty" xml:"Confirm,omitempty"`
	// e2e-vds-feh-\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// e2e-vds-feh-***
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s ConfirmPipelineBatchRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmPipelineBatchRequest) GoString() string {
	return s.String()
}

func (s *ConfirmPipelineBatchRequest) SetConfirm(v bool) *ConfirmPipelineBatchRequest {
	s.Confirm = &v
	return s
}

func (s *ConfirmPipelineBatchRequest) SetPipelineId(v string) *ConfirmPipelineBatchRequest {
	s.PipelineId = &v
	return s
}

type ConfirmPipelineBatchResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The batch information.
	Data *ConfirmPipelineBatchResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the processing of the next batch started as required. Valid values:
	//
	// 	- **true**: The processing started.
	//
	// 	- **false**: The processing could not start.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ConfirmPipelineBatchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfirmPipelineBatchResponseBody) GoString() string {
	return s.String()
}

func (s *ConfirmPipelineBatchResponseBody) SetCode(v string) *ConfirmPipelineBatchResponseBody {
	s.Code = &v
	return s
}

func (s *ConfirmPipelineBatchResponseBody) SetData(v *ConfirmPipelineBatchResponseBodyData) *ConfirmPipelineBatchResponseBody {
	s.Data = v
	return s
}

func (s *ConfirmPipelineBatchResponseBody) SetErrorCode(v string) *ConfirmPipelineBatchResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ConfirmPipelineBatchResponseBody) SetMessage(v string) *ConfirmPipelineBatchResponseBody {
	s.Message = &v
	return s
}

func (s *ConfirmPipelineBatchResponseBody) SetRequestId(v string) *ConfirmPipelineBatchResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfirmPipelineBatchResponseBody) SetSuccess(v bool) *ConfirmPipelineBatchResponseBody {
	s.Success = &v
	return s
}

func (s *ConfirmPipelineBatchResponseBody) SetTraceId(v string) *ConfirmPipelineBatchResponseBody {
	s.TraceId = &v
	return s
}

type ConfirmPipelineBatchResponseBodyData struct {
	// The ID of the batch.
	//
	// example:
	//
	// e2e-vds-feh-***
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s ConfirmPipelineBatchResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ConfirmPipelineBatchResponseBodyData) GoString() string {
	return s.String()
}

func (s *ConfirmPipelineBatchResponseBodyData) SetPipelineId(v string) *ConfirmPipelineBatchResponseBodyData {
	s.PipelineId = &v
	return s
}

type ConfirmPipelineBatchResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConfirmPipelineBatchResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConfirmPipelineBatchResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmPipelineBatchResponse) GoString() string {
	return s.String()
}

func (s *ConfirmPipelineBatchResponse) SetHeaders(v map[string]*string) *ConfirmPipelineBatchResponse {
	s.Headers = v
	return s
}

func (s *ConfirmPipelineBatchResponse) SetStatusCode(v int32) *ConfirmPipelineBatchResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfirmPipelineBatchResponse) SetBody(v *ConfirmPipelineBatchResponseBody) *ConfirmPipelineBatchResponse {
	s.Body = v
	return s
}

type CreateApplicationRequest struct {
	// acs:ram::123456789012\\*\\*\\*\\*:role/adminrole
	//
	// example:
	//
	// acs:ram::123456789012****:role/adminrole
	AcrAssumeRoleArn *string `json:"AcrAssumeRoleArn,omitempty" xml:"AcrAssumeRoleArn,omitempty"`
	// cri-xxxxxx
	//
	// example:
	//
	// cri-xxxxxx
	AcrInstanceId *string `json:"AcrInstanceId,omitempty" xml:"AcrInstanceId,omitempty"`
	// This is a test description.
	//
	// example:
	//
	// This is a test description.
	AppDescription *string `json:"AppDescription,omitempty" xml:"AppDescription,omitempty"`
	// test
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	AppName   *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AppSource *string `json:"AppSource,omitempty" xml:"AppSource,omitempty"`
	// true
	//
	// example:
	//
	// true
	AssociateEip *bool `json:"AssociateEip,omitempty" xml:"AssociateEip,omitempty"`
	// true
	//
	// example:
	//
	// true
	AutoConfig *bool   `json:"AutoConfig,omitempty" xml:"AutoConfig,omitempty"`
	BaseAppId  *string `json:"BaseAppId,omitempty" xml:"BaseAppId,omitempty"`
	// sleep
	//
	// example:
	//
	// echo
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// 1d
	//
	// example:
	//
	// ["a","b"]
	CommandArgs *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	// [{"configMapId":16,"key":"test","mountPath":"/tmp"}]
	//
	// example:
	//
	// [{"configMapId":16,"key":"test","mountPath":"/tmp"}]
	ConfigMapMountDesc *string `json:"ConfigMapMountDesc,omitempty" xml:"ConfigMapMountDesc,omitempty"`
	// 1000
	//
	// example:
	//
	// 1000
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// [{"hostName":"samplehost","ip":"127.0.0.1"}]
	//
	// example:
	//
	// [{"hostName":"samplehost","ip":"127.0.0.1"}]
	CustomHostAlias *string `json:"CustomHostAlias,omitempty" xml:"CustomHostAlias,omitempty"`
	// true
	//
	// example:
	//
	// true
	Deploy *bool   `json:"Deploy,omitempty" xml:"Deploy,omitempty"`
	Dotnet *string `json:"Dotnet,omitempty" xml:"Dotnet,omitempty"`
	// 3.5.3
	//
	// example:
	//
	// 3.5.3
	EdasContainerVersion *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	EnableEbpf           *string `json:"EnableEbpf,omitempty" xml:"EnableEbpf,omitempty"`
	EnableNewArms        *bool   `json:"EnableNewArms,omitempty" xml:"EnableNewArms,omitempty"`
	// [{"name":"envtmp","value":"0"}]
	//
	// example:
	//
	// [{"name":"envtmp","value":"0"}]
	Envs *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	// example:
	//
	// 10
	ImagePullSecrets *string `json:"ImagePullSecrets,omitempty" xml:"ImagePullSecrets,omitempty"`
	// registry.cn-hangzhou.aliyuncs.com/sae_test/ali_sae_test:0.0.1
	//
	// example:
	//
	// registry.cn-hangzhou.aliyuncs.com/sae_test/ali_sae_test:0.0.1
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// custom-args
	//
	// example:
	//
	// custom-args
	JarStartArgs *string `json:"JarStartArgs,omitempty" xml:"JarStartArgs,omitempty"`
	// \\-Xms4G -Xmx4G
	//
	// example:
	//
	// -Xms4G -Xmx4G
	JarStartOptions *string `json:"JarStartOptions,omitempty" xml:"JarStartOptions,omitempty"`
	// Open JDK 8
	//
	// example:
	//
	// Open JDK 8
	Jdk *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	// example:
	//
	// {"kafkaEndpoint":"10.0.X.XXX:XXXX,10.0.X.XXX:XXXX,10.0.X.XXX:XXXX\\","kafkaInstanceId":"alikafka_pre-cn-7pp2l8kr****","kafkaConfigs":[{"logType":"file_log","logDir":"/tmp/a.log","kafkaTopic":"test2"},{"logType":"stdout","logDir":"","kafkaTopic":"test"}]}
	KafkaConfigs *string `json:"KafkaConfigs,omitempty" xml:"KafkaConfigs,omitempty"`
	// {"exec":{"command":["sh","-c","cat /home/admin/start.sh"]},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds":2}
	//
	// example:
	//
	// {"exec":{"command":["sh","-c","cat /home/admin/start.sh"]},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds":2}
	Liveness *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	// 1024
	//
	// example:
	//
	// 1024
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// example:
	//
	// "0"
	MicroRegistration       *string `json:"MicroRegistration,omitempty" xml:"MicroRegistration,omitempty"`
	MicroRegistrationConfig *string `json:"MicroRegistrationConfig,omitempty" xml:"MicroRegistrationConfig,omitempty"`
	// [{mountPath: "/tmp", nasPath: "/"}]
	//
	// example:
	//
	// [{mountPath: "/tmp", nasPath: "/"}]
	MountDesc *string `json:"MountDesc,omitempty" xml:"MountDesc,omitempty"`
	// example.com
	//
	// example:
	//
	// example.com
	MountHost *string `json:"MountHost,omitempty" xml:"MountHost,omitempty"`
	// cn-beijing:test
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// example:
	//
	// [{"mountPath":"/test1","readOnly":false,"nasId":"nasId1","mountDomain":"nasId1.cn-shenzhen.nas.aliyuncs.com","nasPath":"/test1"},{"nasId":"nasId2","mountDomain":"nasId2.cn-shenzhen.nas.aliyuncs.com","readOnly":false,"nasPath":"/test2","mountPath":"/test2"}]
	NasConfigs *string `json:"NasConfigs,omitempty" xml:"NasConfigs,omitempty"`
	// KSAK\\*\\*\\*\\*
	//
	// example:
	//
	// KSAK****
	NasId *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	// xxxxxx
	//
	// example:
	//
	// xxxxxx
	OssAkId *string `json:"OssAkId,omitempty" xml:"OssAkId,omitempty"`
	// xxxxxx
	//
	// example:
	//
	// xxxxxx
	OssAkSecret *string `json:"OssAkSecret,omitempty" xml:"OssAkSecret,omitempty"`
	// [{"bucketName": "oss-bucket", "bucketPath": "data/user.data", "mountPath": "/usr/data/user.data", "readOnly": true}]
	//
	// example:
	//
	// [{"bucketName": "oss-bucket", "bucketPath": "data/user.data", "mountPath": "/usr/data/user.data", "readOnly": true}]
	OssMountDescs *string `json:"OssMountDescs,omitempty" xml:"OssMountDescs,omitempty"`
	// FatJar
	//
	// This parameter is required.
	//
	// example:
	//
	// FatJar
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// http://myoss.oss-cn-\\*\\*\\*\\*.aliyuncs.com/my-buc/2019-06-30/\\*\\*\\*\\*.jar
	//
	// example:
	//
	// http://myoss.oss-cn-****.aliyuncs.com/my-buc/2019-06-30/****.jar
	PackageUrl *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	// 1.0.0
	//
	// example:
	//
	// 1.0.0
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	// example:
	//
	// PHP-FPM 7.0
	Php *string `json:"Php,omitempty" xml:"Php,omitempty"`
	// /usr/local/etc/php/conf.d/arms.ini
	//
	// example:
	//
	// /usr/local/etc/php/conf.d/arms.ini
	PhpArmsConfigLocation *string `json:"PhpArmsConfigLocation,omitempty" xml:"PhpArmsConfigLocation,omitempty"`
	// k1=v1
	//
	// example:
	//
	// k1=v1
	PhpConfig *string `json:"PhpConfig,omitempty" xml:"PhpConfig,omitempty"`
	// /usr/local/etc/php/php.ini
	//
	// example:
	//
	// /usr/local/etc/php/php.ini
	PhpConfigLocation *string `json:"PhpConfigLocation,omitempty" xml:"PhpConfigLocation,omitempty"`
	// {"exec":{"command":["cat","/etc/group"]}}
	//
	// example:
	//
	// {"exec":{"command":["cat","/etc/group"]}}
	PostStart *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	// {"exec":{"command":["cat","/etc/group"]}}
	//
	// example:
	//
	// {"exec":{"command":["cat","/etc/group"]}}
	PreStop *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	// example:
	//
	// java
	ProgrammingLanguage *string `json:"ProgrammingLanguage,omitempty" xml:"ProgrammingLanguage,omitempty"`
	// example:
	//
	// {"serviceName":"bwm-poc-sc-gateway-cn-beijing-front","namespaceId":"cn-beijing:front","portAndProtocol":{"18012":"TCP"},"enable":true}
	PvtzDiscoverySvc *string `json:"PvtzDiscoverySvc,omitempty" xml:"PvtzDiscoverySvc,omitempty"`
	// example:
	//
	// PYTHON 3.9.15
	Python *string `json:"Python,omitempty" xml:"Python,omitempty"`
	// example:
	//
	// Flask==2.0
	PythonModules *string `json:"PythonModules,omitempty" xml:"PythonModules,omitempty"`
	// {"exec":{"command":["sh","-c","cat /home/admin/start.sh"]},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds":2}
	//
	// example:
	//
	// {"exec":{"command":["sh","-c","cat /home/admin/start.sh"]},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds":2}
	Readiness *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	// 1
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Replicas   *int32  `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	SaeVersion *string `json:"SaeVersion,omitempty" xml:"SaeVersion,omitempty"`
	// sg-wz969ngg2e49q5i4\\*\\*\\*\\*
	//
	// example:
	//
	// sg-wz969ngg2e49q5i4****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	ServiceTags     *string `json:"ServiceTags,omitempty" xml:"ServiceTags,omitempty"`
	// [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]
	//
	// example:
	//
	// [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]
	SlsConfigs *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	// 30
	//
	// example:
	//
	// 30
	TerminationGracePeriodSeconds *int32 `json:"TerminationGracePeriodSeconds,omitempty" xml:"TerminationGracePeriodSeconds,omitempty"`
	// Asia/Shanghai
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// {"port":8080,"contextPath":"/","maxThreads":400,"uriEncoding":"ISO-8859-1","useBodyEncodingForUri":true}
	//
	// example:
	//
	// {"port":8080,"contextPath":"/","maxThreads":400,"uriEncoding":"ISO-8859-1","useBodyEncodingForUri":true}
	TomcatConfig *string `json:"TomcatConfig,omitempty" xml:"TomcatConfig,omitempty"`
	// vsw-bp12mw1f8k3jgygk9\\*\\*\\*\\*
	//
	// example:
	//
	// vsw-bp12mw1f8k3jgygk9****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// vpc-bp1aevy8sofi8mh1q\\*\\*\\*\\*
	//
	// example:
	//
	// vpc-bp1aevy8sofi8mh1q****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// CATALINA_OPTS=\\\\"$CATALINA_OPTS $Options\\\\" catalina.sh run
	//
	// example:
	//
	// CATALINA_OPTS=\\"$CATALINA_OPTS $Options\\" catalina.sh run
	WarStartOptions *string `json:"WarStartOptions,omitempty" xml:"WarStartOptions,omitempty"`
	// apache-tomcat-7.0.91
	//
	// example:
	//
	// apache-tomcat-7.0.91
	WebContainer *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
}

func (s CreateApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationRequest) SetAcrAssumeRoleArn(v string) *CreateApplicationRequest {
	s.AcrAssumeRoleArn = &v
	return s
}

func (s *CreateApplicationRequest) SetAcrInstanceId(v string) *CreateApplicationRequest {
	s.AcrInstanceId = &v
	return s
}

func (s *CreateApplicationRequest) SetAppDescription(v string) *CreateApplicationRequest {
	s.AppDescription = &v
	return s
}

func (s *CreateApplicationRequest) SetAppName(v string) *CreateApplicationRequest {
	s.AppName = &v
	return s
}

func (s *CreateApplicationRequest) SetAppSource(v string) *CreateApplicationRequest {
	s.AppSource = &v
	return s
}

func (s *CreateApplicationRequest) SetAssociateEip(v bool) *CreateApplicationRequest {
	s.AssociateEip = &v
	return s
}

func (s *CreateApplicationRequest) SetAutoConfig(v bool) *CreateApplicationRequest {
	s.AutoConfig = &v
	return s
}

func (s *CreateApplicationRequest) SetBaseAppId(v string) *CreateApplicationRequest {
	s.BaseAppId = &v
	return s
}

func (s *CreateApplicationRequest) SetCommand(v string) *CreateApplicationRequest {
	s.Command = &v
	return s
}

func (s *CreateApplicationRequest) SetCommandArgs(v string) *CreateApplicationRequest {
	s.CommandArgs = &v
	return s
}

func (s *CreateApplicationRequest) SetConfigMapMountDesc(v string) *CreateApplicationRequest {
	s.ConfigMapMountDesc = &v
	return s
}

func (s *CreateApplicationRequest) SetCpu(v int32) *CreateApplicationRequest {
	s.Cpu = &v
	return s
}

func (s *CreateApplicationRequest) SetCustomHostAlias(v string) *CreateApplicationRequest {
	s.CustomHostAlias = &v
	return s
}

func (s *CreateApplicationRequest) SetDeploy(v bool) *CreateApplicationRequest {
	s.Deploy = &v
	return s
}

func (s *CreateApplicationRequest) SetDotnet(v string) *CreateApplicationRequest {
	s.Dotnet = &v
	return s
}

func (s *CreateApplicationRequest) SetEdasContainerVersion(v string) *CreateApplicationRequest {
	s.EdasContainerVersion = &v
	return s
}

func (s *CreateApplicationRequest) SetEnableEbpf(v string) *CreateApplicationRequest {
	s.EnableEbpf = &v
	return s
}

func (s *CreateApplicationRequest) SetEnableNewArms(v bool) *CreateApplicationRequest {
	s.EnableNewArms = &v
	return s
}

func (s *CreateApplicationRequest) SetEnvs(v string) *CreateApplicationRequest {
	s.Envs = &v
	return s
}

func (s *CreateApplicationRequest) SetImagePullSecrets(v string) *CreateApplicationRequest {
	s.ImagePullSecrets = &v
	return s
}

func (s *CreateApplicationRequest) SetImageUrl(v string) *CreateApplicationRequest {
	s.ImageUrl = &v
	return s
}

func (s *CreateApplicationRequest) SetJarStartArgs(v string) *CreateApplicationRequest {
	s.JarStartArgs = &v
	return s
}

func (s *CreateApplicationRequest) SetJarStartOptions(v string) *CreateApplicationRequest {
	s.JarStartOptions = &v
	return s
}

func (s *CreateApplicationRequest) SetJdk(v string) *CreateApplicationRequest {
	s.Jdk = &v
	return s
}

func (s *CreateApplicationRequest) SetKafkaConfigs(v string) *CreateApplicationRequest {
	s.KafkaConfigs = &v
	return s
}

func (s *CreateApplicationRequest) SetLiveness(v string) *CreateApplicationRequest {
	s.Liveness = &v
	return s
}

func (s *CreateApplicationRequest) SetMemory(v int32) *CreateApplicationRequest {
	s.Memory = &v
	return s
}

func (s *CreateApplicationRequest) SetMicroRegistration(v string) *CreateApplicationRequest {
	s.MicroRegistration = &v
	return s
}

func (s *CreateApplicationRequest) SetMicroRegistrationConfig(v string) *CreateApplicationRequest {
	s.MicroRegistrationConfig = &v
	return s
}

func (s *CreateApplicationRequest) SetMountDesc(v string) *CreateApplicationRequest {
	s.MountDesc = &v
	return s
}

func (s *CreateApplicationRequest) SetMountHost(v string) *CreateApplicationRequest {
	s.MountHost = &v
	return s
}

func (s *CreateApplicationRequest) SetNamespaceId(v string) *CreateApplicationRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateApplicationRequest) SetNasConfigs(v string) *CreateApplicationRequest {
	s.NasConfigs = &v
	return s
}

func (s *CreateApplicationRequest) SetNasId(v string) *CreateApplicationRequest {
	s.NasId = &v
	return s
}

func (s *CreateApplicationRequest) SetOssAkId(v string) *CreateApplicationRequest {
	s.OssAkId = &v
	return s
}

func (s *CreateApplicationRequest) SetOssAkSecret(v string) *CreateApplicationRequest {
	s.OssAkSecret = &v
	return s
}

func (s *CreateApplicationRequest) SetOssMountDescs(v string) *CreateApplicationRequest {
	s.OssMountDescs = &v
	return s
}

func (s *CreateApplicationRequest) SetPackageType(v string) *CreateApplicationRequest {
	s.PackageType = &v
	return s
}

func (s *CreateApplicationRequest) SetPackageUrl(v string) *CreateApplicationRequest {
	s.PackageUrl = &v
	return s
}

func (s *CreateApplicationRequest) SetPackageVersion(v string) *CreateApplicationRequest {
	s.PackageVersion = &v
	return s
}

func (s *CreateApplicationRequest) SetPhp(v string) *CreateApplicationRequest {
	s.Php = &v
	return s
}

func (s *CreateApplicationRequest) SetPhpArmsConfigLocation(v string) *CreateApplicationRequest {
	s.PhpArmsConfigLocation = &v
	return s
}

func (s *CreateApplicationRequest) SetPhpConfig(v string) *CreateApplicationRequest {
	s.PhpConfig = &v
	return s
}

func (s *CreateApplicationRequest) SetPhpConfigLocation(v string) *CreateApplicationRequest {
	s.PhpConfigLocation = &v
	return s
}

func (s *CreateApplicationRequest) SetPostStart(v string) *CreateApplicationRequest {
	s.PostStart = &v
	return s
}

func (s *CreateApplicationRequest) SetPreStop(v string) *CreateApplicationRequest {
	s.PreStop = &v
	return s
}

func (s *CreateApplicationRequest) SetProgrammingLanguage(v string) *CreateApplicationRequest {
	s.ProgrammingLanguage = &v
	return s
}

func (s *CreateApplicationRequest) SetPvtzDiscoverySvc(v string) *CreateApplicationRequest {
	s.PvtzDiscoverySvc = &v
	return s
}

func (s *CreateApplicationRequest) SetPython(v string) *CreateApplicationRequest {
	s.Python = &v
	return s
}

func (s *CreateApplicationRequest) SetPythonModules(v string) *CreateApplicationRequest {
	s.PythonModules = &v
	return s
}

func (s *CreateApplicationRequest) SetReadiness(v string) *CreateApplicationRequest {
	s.Readiness = &v
	return s
}

func (s *CreateApplicationRequest) SetReplicas(v int32) *CreateApplicationRequest {
	s.Replicas = &v
	return s
}

func (s *CreateApplicationRequest) SetSaeVersion(v string) *CreateApplicationRequest {
	s.SaeVersion = &v
	return s
}

func (s *CreateApplicationRequest) SetSecurityGroupId(v string) *CreateApplicationRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateApplicationRequest) SetServiceTags(v string) *CreateApplicationRequest {
	s.ServiceTags = &v
	return s
}

func (s *CreateApplicationRequest) SetSlsConfigs(v string) *CreateApplicationRequest {
	s.SlsConfigs = &v
	return s
}

func (s *CreateApplicationRequest) SetTerminationGracePeriodSeconds(v int32) *CreateApplicationRequest {
	s.TerminationGracePeriodSeconds = &v
	return s
}

func (s *CreateApplicationRequest) SetTimezone(v string) *CreateApplicationRequest {
	s.Timezone = &v
	return s
}

func (s *CreateApplicationRequest) SetTomcatConfig(v string) *CreateApplicationRequest {
	s.TomcatConfig = &v
	return s
}

func (s *CreateApplicationRequest) SetVSwitchId(v string) *CreateApplicationRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateApplicationRequest) SetVpcId(v string) *CreateApplicationRequest {
	s.VpcId = &v
	return s
}

func (s *CreateApplicationRequest) SetWarStartOptions(v string) *CreateApplicationRequest {
	s.WarStartOptions = &v
	return s
}

func (s *CreateApplicationRequest) SetWebContainer(v string) *CreateApplicationRequest {
	s.WebContainer = &v
	return s
}

type CreateApplicationResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *CreateApplicationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code. Valid values:
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application is created. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CreateApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApplicationResponseBody) SetCode(v string) *CreateApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *CreateApplicationResponseBody) SetData(v *CreateApplicationResponseBodyData) *CreateApplicationResponseBody {
	s.Data = v
	return s
}

func (s *CreateApplicationResponseBody) SetErrorCode(v string) *CreateApplicationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateApplicationResponseBody) SetMessage(v string) *CreateApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *CreateApplicationResponseBody) SetRequestId(v string) *CreateApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateApplicationResponseBody) SetSuccess(v bool) *CreateApplicationResponseBody {
	s.Success = &v
	return s
}

func (s *CreateApplicationResponseBody) SetTraceId(v string) *CreateApplicationResponseBody {
	s.TraceId = &v
	return s
}

type CreateApplicationResponseBodyData struct {
	// The ID of the application that is created.
	//
	// example:
	//
	// 017f39b8-dfa4-4e16-a84b-1dcee4b1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the change order. It can be used to query the task status.
	//
	// example:
	//
	// 01db03d3-3ee9-48b3-b3d0-dfce2d88****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s CreateApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateApplicationResponseBodyData) SetAppId(v string) *CreateApplicationResponseBodyData {
	s.AppId = &v
	return s
}

func (s *CreateApplicationResponseBodyData) SetChangeOrderId(v string) *CreateApplicationResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type CreateApplicationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationResponse) SetHeaders(v map[string]*string) *CreateApplicationResponse {
	s.Headers = v
	return s
}

func (s *CreateApplicationResponse) SetStatusCode(v int32) *CreateApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApplicationResponse) SetBody(v *CreateApplicationResponseBody) *CreateApplicationResponse {
	s.Body = v
	return s
}

type CreateApplicationScalingRuleRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EnableIdle *bool   `json:"EnableIdle,omitempty" xml:"EnableIdle,omitempty"`
	// example:
	//
	// -1
	MinReadyInstanceRatio *int32 `json:"MinReadyInstanceRatio,omitempty" xml:"MinReadyInstanceRatio,omitempty"`
	// example:
	//
	// 3
	MinReadyInstances *int32 `json:"MinReadyInstances,omitempty" xml:"MinReadyInstances,omitempty"`
	// example:
	//
	// true
	ScalingRuleEnable *bool `json:"ScalingRuleEnable,omitempty" xml:"ScalingRuleEnable,omitempty"`
	// example:
	//
	// {"maxReplicas":3,"minReplicas":1,"metrics":[{"metricType":"CPU","metricTargetAverageUtilization":20},{"metricType":"MEMORY","metricTargetAverageUtilization":30},{"metricType":"tcpActiveConn","metricTargetAverageUtilization":20},{"metricType":"SLB_QPS","MetricTargetAverageUtilization":25,"SlbProject":"aliyun-fc-cn-hangzhou-d95881d9-5d3c-5f26-a6b8-************","SlbLogstore":"function-log","Vport":"80"},{"metricType":"SLB_RT","MetricTargetAverageUtilization":35,"SlbProject":"aliyun-fc-cn-hangzhou-d95881d9-5d3c-5f26-a6b8-************","SlbLogstore":"function-log","Vport":"80"}],"scaleUpRules":{"step":"100","disabled":false,"stabilizationWindowSeconds":0},"scaleDownRules":{"step":"100","disabled":false,"stabilizationWindowSeconds":300}}
	ScalingRuleMetric *string `json:"ScalingRuleMetric,omitempty" xml:"ScalingRuleMetric,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// timer-0800-2100
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	// example:
	//
	// {"beginDate":null,"endDate":null,"period":"	- 	- *","schedules":[{"atTime":"08:00","targetReplicas":10},{"atTime":"20:00","targetReplicas":3}]}
	ScalingRuleTimer *string `json:"ScalingRuleTimer,omitempty" xml:"ScalingRuleTimer,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// timing
	ScalingRuleType *string `json:"ScalingRuleType,omitempty" xml:"ScalingRuleType,omitempty"`
}

func (s CreateApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleRequest) SetAppId(v string) *CreateApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetEnableIdle(v bool) *CreateApplicationScalingRuleRequest {
	s.EnableIdle = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetMinReadyInstanceRatio(v int32) *CreateApplicationScalingRuleRequest {
	s.MinReadyInstanceRatio = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetMinReadyInstances(v int32) *CreateApplicationScalingRuleRequest {
	s.MinReadyInstances = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleEnable(v bool) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleEnable = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleMetric(v string) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleMetric = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleName(v string) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleTimer(v string) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleTimer = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleType(v string) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleType = &v
	return s
}

type CreateApplicationScalingRuleResponseBody struct {
	// example:
	//
	// 200
	Code      *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *CreateApplicationScalingRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBody) SetCode(v string) *CreateApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetData(v *CreateApplicationScalingRuleResponseBodyData) *CreateApplicationScalingRuleResponseBody {
	s.Data = v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetErrorCode(v string) *CreateApplicationScalingRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetMessage(v string) *CreateApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetRequestId(v string) *CreateApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetSuccess(v bool) *CreateApplicationScalingRuleResponseBody {
	s.Success = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetTraceId(v string) *CreateApplicationScalingRuleResponseBody {
	s.TraceId = &v
	return s
}

type CreateApplicationScalingRuleResponseBodyData struct {
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// 1616642248938
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EnableIdle *bool  `json:"EnableIdle,omitempty" xml:"EnableIdle,omitempty"`
	// example:
	//
	// 1641882854484
	LastDisableTime *int64                                              `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty"`
	Metric          *CreateApplicationScalingRuleResponseBodyDataMetric `json:"Metric,omitempty" xml:"Metric,omitempty" type:"Struct"`
	// example:
	//
	// true
	ScaleRuleEnabled *bool `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	// example:
	//
	// test
	ScaleRuleName *string `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty"`
	// example:
	//
	// timing
	ScaleRuleType *string                                            `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	Timer         *CreateApplicationScalingRuleResponseBodyDataTimer `json:"Timer,omitempty" xml:"Timer,omitempty" type:"Struct"`
	// example:
	//
	// 1616642248938
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetAppId(v string) *CreateApplicationScalingRuleResponseBodyData {
	s.AppId = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetCreateTime(v int64) *CreateApplicationScalingRuleResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetEnableIdle(v bool) *CreateApplicationScalingRuleResponseBodyData {
	s.EnableIdle = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetLastDisableTime(v int64) *CreateApplicationScalingRuleResponseBodyData {
	s.LastDisableTime = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetMetric(v *CreateApplicationScalingRuleResponseBodyDataMetric) *CreateApplicationScalingRuleResponseBodyData {
	s.Metric = v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetScaleRuleEnabled(v bool) *CreateApplicationScalingRuleResponseBodyData {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetScaleRuleName(v string) *CreateApplicationScalingRuleResponseBodyData {
	s.ScaleRuleName = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetScaleRuleType(v string) *CreateApplicationScalingRuleResponseBodyData {
	s.ScaleRuleType = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetTimer(v *CreateApplicationScalingRuleResponseBodyDataTimer) *CreateApplicationScalingRuleResponseBodyData {
	s.Timer = v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyData) SetUpdateTime(v int64) *CreateApplicationScalingRuleResponseBodyData {
	s.UpdateTime = &v
	return s
}

type CreateApplicationScalingRuleResponseBodyDataMetric struct {
	// example:
	//
	// 3
	MaxReplicas *int32                                                       `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metrics     []*CreateApplicationScalingRuleResponseBodyDataMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	MinReplicas *int32 `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBodyDataMetric) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyDataMetric) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyDataMetric) SetMaxReplicas(v int32) *CreateApplicationScalingRuleResponseBodyDataMetric {
	s.MaxReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataMetric) SetMetrics(v []*CreateApplicationScalingRuleResponseBodyDataMetricMetrics) *CreateApplicationScalingRuleResponseBodyDataMetric {
	s.Metrics = v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataMetric) SetMinReplicas(v int32) *CreateApplicationScalingRuleResponseBodyDataMetric {
	s.MinReplicas = &v
	return s
}

type CreateApplicationScalingRuleResponseBodyDataMetricMetrics struct {
	// example:
	//
	// 20
	MetricTargetAverageUtilization *int32 `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty"`
	// example:
	//
	// CPU
	MetricType  *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	SlbId       *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbLogstore *string `json:"SlbLogstore,omitempty" xml:"SlbLogstore,omitempty"`
	SlbProject  *string `json:"SlbProject,omitempty" xml:"SlbProject,omitempty"`
	Vport       *string `json:"Vport,omitempty" xml:"Vport,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBodyDataMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyDataMetricMetrics) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyDataMetricMetrics) SetMetricTargetAverageUtilization(v int32) *CreateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataMetricMetrics) SetMetricType(v string) *CreateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.MetricType = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataMetricMetrics) SetSlbId(v string) *CreateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.SlbId = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataMetricMetrics) SetSlbLogstore(v string) *CreateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.SlbLogstore = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataMetricMetrics) SetSlbProject(v string) *CreateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.SlbProject = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataMetricMetrics) SetVport(v string) *CreateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.Vport = &v
	return s
}

type CreateApplicationScalingRuleResponseBodyDataTimer struct {
	// example:
	//
	// 2021-03-25
	BeginDate *string `json:"BeginDate,omitempty" xml:"BeginDate,omitempty"`
	// example:
	//
	// 2021-04-25
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// example:
	//
	// 	- 	- *
	Period    *string                                                       `json:"Period,omitempty" xml:"Period,omitempty"`
	Schedules []*CreateApplicationScalingRuleResponseBodyDataTimerSchedules `json:"Schedules,omitempty" xml:"Schedules,omitempty" type:"Repeated"`
}

func (s CreateApplicationScalingRuleResponseBodyDataTimer) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyDataTimer) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyDataTimer) SetBeginDate(v string) *CreateApplicationScalingRuleResponseBodyDataTimer {
	s.BeginDate = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataTimer) SetEndDate(v string) *CreateApplicationScalingRuleResponseBodyDataTimer {
	s.EndDate = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataTimer) SetPeriod(v string) *CreateApplicationScalingRuleResponseBodyDataTimer {
	s.Period = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataTimer) SetSchedules(v []*CreateApplicationScalingRuleResponseBodyDataTimerSchedules) *CreateApplicationScalingRuleResponseBodyDataTimer {
	s.Schedules = v
	return s
}

type CreateApplicationScalingRuleResponseBodyDataTimerSchedules struct {
	// example:
	//
	// 08:00
	AtTime      *string `json:"AtTime,omitempty" xml:"AtTime,omitempty"`
	MaxReplicas *int32  `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	MinReplicas *int32  `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	// example:
	//
	// 3
	TargetReplicas *int32 `json:"TargetReplicas,omitempty" xml:"TargetReplicas,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBodyDataTimerSchedules) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyDataTimerSchedules) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyDataTimerSchedules) SetAtTime(v string) *CreateApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.AtTime = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataTimerSchedules) SetMaxReplicas(v int32) *CreateApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.MaxReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataTimerSchedules) SetMinReplicas(v int32) *CreateApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.MinReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyDataTimerSchedules) SetTargetReplicas(v int32) *CreateApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.TargetReplicas = &v
	return s
}

type CreateApplicationScalingRuleResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *CreateApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateApplicationScalingRuleResponse) SetStatusCode(v int32) *CreateApplicationScalingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApplicationScalingRuleResponse) SetBody(v *CreateApplicationScalingRuleResponseBody) *CreateApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type CreateConfigMapRequest struct {
	// The ConfigMap data.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"env.shell": "/bin/sh"}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The key-value pairs of the ConfigMap in the JSON format. Format:
	//
	// {"Data":"{"k1":"v1", "k2":"v2"}"}
	//
	// k specifies a key and v specifies a value. For more information, see [Manage a Kubernetes ConfigMap](https://help.aliyun.com/document_detail/171326.html).
	//
	// example:
	//
	// test-desc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the ConfigMap. The name can contain digits, letters, and underscores (_). The name must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the namespace to which the ConfigMap instance belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s CreateConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigMapRequest) GoString() string {
	return s.String()
}

func (s *CreateConfigMapRequest) SetData(v string) *CreateConfigMapRequest {
	s.Data = &v
	return s
}

func (s *CreateConfigMapRequest) SetDescription(v string) *CreateConfigMapRequest {
	s.Description = &v
	return s
}

func (s *CreateConfigMapRequest) SetName(v string) *CreateConfigMapRequest {
	s.Name = &v
	return s
}

func (s *CreateConfigMapRequest) SetNamespaceId(v string) *CreateConfigMapRequest {
	s.NamespaceId = &v
	return s
}

type CreateConfigMapResponseBody struct {
	// Empty
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The trace ID that is used to query the details of the request.
	Data *CreateConfigMapResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the ConfigMap that was created.
	//
	// example:
	//
	// The error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the **Error codes*	- section in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The request ID.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned data.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The returned message.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CreateConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConfigMapResponseBody) SetCode(v string) *CreateConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *CreateConfigMapResponseBody) SetData(v *CreateConfigMapResponseBodyData) *CreateConfigMapResponseBody {
	s.Data = v
	return s
}

func (s *CreateConfigMapResponseBody) SetErrorCode(v string) *CreateConfigMapResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateConfigMapResponseBody) SetMessage(v string) *CreateConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *CreateConfigMapResponseBody) SetRequestId(v string) *CreateConfigMapResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateConfigMapResponseBody) SetSuccess(v bool) *CreateConfigMapResponseBody {
	s.Success = &v
	return s
}

func (s *CreateConfigMapResponseBody) SetTraceId(v string) *CreateConfigMapResponseBody {
	s.TraceId = &v
	return s
}

type CreateConfigMapResponseBodyData struct {
	// The returned result.
	//
	// example:
	//
	// 1
	ConfigMapId *int64 `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
}

func (s CreateConfigMapResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigMapResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateConfigMapResponseBodyData) SetConfigMapId(v int64) *CreateConfigMapResponseBodyData {
	s.ConfigMapId = &v
	return s
}

type CreateConfigMapResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigMapResponse) GoString() string {
	return s.String()
}

func (s *CreateConfigMapResponse) SetHeaders(v map[string]*string) *CreateConfigMapResponse {
	s.Headers = v
	return s
}

func (s *CreateConfigMapResponse) SetStatusCode(v int32) *CreateConfigMapResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateConfigMapResponse) SetBody(v *CreateConfigMapResponseBody) *CreateConfigMapResponse {
	s.Body = v
	return s
}

type CreateGreyTagRouteRequest struct {
	// example:
	//
	// [{"condition":"AND","items":[{"cond":"==","name":"grey","operator":"rawvalue","type":"sourceIp","value":"127.0.0.1"},{"cond":"==","name":"grey","operator":"rawvalue","type":"cookie","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"header","value":"true"}],"path":"/post-echo/hi"}]
	AlbRules *string `json:"AlbRules,omitempty" xml:"AlbRules,omitempty"`
	// dubbo-echo
	//
	// This parameter is required.
	//
	// example:
	//
	// 7802c49a-67bc-4167-8369-9a9c003c****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// [{"condition":"OR","items":[{"cond":"==","name":"grey","operator":"rawvalue","type":"param","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"cookie","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"header","value":"true"}],"path":"/post-echo/hi"}]
	//
	// example:
	//
	// 灰度发布-地域灰度
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// [{"condition":"OR","group":"DUBBO","items":[{"cond":"==","expr":".key1","index":0,"operator":"rawvalue","value":"value1"},{"cond":"==","expr":".key2","index":0,"operator":"rawvalue","value":"value2"}],"methodName":"echo","serviceName":"com.alibaba.edas.boot.EchoService","version":"1.0.0"}]
	DubboRules *string `json:"DubboRules,omitempty" xml:"DubboRules,omitempty"`
	// Canary Release - Regions
	//
	// This parameter is required.
	//
	// example:
	//
	// dubbo-echo
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// [{"condition":"OR","group":"DUBBO","items":[{"cond":"==","expr":".key1","index":0,"operator":"rawvalue","value":"value1"},{"cond":"==","expr":".key2","index":0,"operator":"rawvalue","value":"value2"}],"methodName":"echo","serviceName":"com.alibaba.edas.boot.EchoService","version":"1.0.0"}]
	//
	// example:
	//
	// [{"condition":"OR","items":[{"cond":"==","name":"grey","operator":"rawvalue","type":"param","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"cookie","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"header","value":"true"}],"path":"/post-echo/hi"}]
	ScRules *string `json:"ScRules,omitempty" xml:"ScRules,omitempty"`
}

func (s CreateGreyTagRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGreyTagRouteRequest) GoString() string {
	return s.String()
}

func (s *CreateGreyTagRouteRequest) SetAlbRules(v string) *CreateGreyTagRouteRequest {
	s.AlbRules = &v
	return s
}

func (s *CreateGreyTagRouteRequest) SetAppId(v string) *CreateGreyTagRouteRequest {
	s.AppId = &v
	return s
}

func (s *CreateGreyTagRouteRequest) SetDescription(v string) *CreateGreyTagRouteRequest {
	s.Description = &v
	return s
}

func (s *CreateGreyTagRouteRequest) SetDubboRules(v string) *CreateGreyTagRouteRequest {
	s.DubboRules = &v
	return s
}

func (s *CreateGreyTagRouteRequest) SetName(v string) *CreateGreyTagRouteRequest {
	s.Name = &v
	return s
}

func (s *CreateGreyTagRouteRequest) SetScRules(v string) *CreateGreyTagRouteRequest {
	s.ScRules = &v
	return s
}

type CreateGreyTagRouteResponseBody struct {
	// Indicates whether the information of the change order was queried. Valid values:
	//
	// 	- **true**: The information was queried.
	//
	// 	- **false**: The information failed to be queried.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the canary release rule. The ID is globally unique.
	Data *CreateGreyTagRouteResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned information.
	//
	// example:
	//
	// 9D29CBD0-45D3-410B-9826-52F86F90****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The information about the canary release rule.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CreateGreyTagRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGreyTagRouteResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGreyTagRouteResponseBody) SetCode(v string) *CreateGreyTagRouteResponseBody {
	s.Code = &v
	return s
}

func (s *CreateGreyTagRouteResponseBody) SetData(v *CreateGreyTagRouteResponseBodyData) *CreateGreyTagRouteResponseBody {
	s.Data = v
	return s
}

func (s *CreateGreyTagRouteResponseBody) SetErrorCode(v string) *CreateGreyTagRouteResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateGreyTagRouteResponseBody) SetMessage(v string) *CreateGreyTagRouteResponseBody {
	s.Message = &v
	return s
}

func (s *CreateGreyTagRouteResponseBody) SetRequestId(v string) *CreateGreyTagRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateGreyTagRouteResponseBody) SetSuccess(v bool) *CreateGreyTagRouteResponseBody {
	s.Success = &v
	return s
}

func (s *CreateGreyTagRouteResponseBody) SetTraceId(v string) *CreateGreyTagRouteResponseBody {
	s.TraceId = &v
	return s
}

type CreateGreyTagRouteResponseBodyData struct {
	// The returned error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// 16
	GreyTagRouteId *int64 `json:"GreyTagRouteId,omitempty" xml:"GreyTagRouteId,omitempty"`
}

func (s CreateGreyTagRouteResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateGreyTagRouteResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateGreyTagRouteResponseBodyData) SetGreyTagRouteId(v int64) *CreateGreyTagRouteResponseBodyData {
	s.GreyTagRouteId = &v
	return s
}

type CreateGreyTagRouteResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateGreyTagRouteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateGreyTagRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGreyTagRouteResponse) GoString() string {
	return s.String()
}

func (s *CreateGreyTagRouteResponse) SetHeaders(v map[string]*string) *CreateGreyTagRouteResponse {
	s.Headers = v
	return s
}

func (s *CreateGreyTagRouteResponse) SetStatusCode(v int32) *CreateGreyTagRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateGreyTagRouteResponse) SetBody(v *CreateGreyTagRouteResponseBody) *CreateGreyTagRouteResponse {
	s.Body = v
	return s
}

type CreateIngressRequest struct {
	// example:
	//
	// 188077086902****_176993d****_181437****_108724****
	CertId *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
	// example:
	//
	// 87***35-cn-hangzhou,812***3-cn-hangzhou
	CertIds *string `json:"CertIds,omitempty" xml:"CertIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"appId":"395b60e4-0550-458d-9c54-a265d036****","containerPort":8080}
	DefaultRule *string `json:"DefaultRule,omitempty" xml:"DefaultRule,omitempty"`
	// example:
	//
	// ingress-for-sae-test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	IdleTimeout *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// example:
	//
	// HTTP
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	// example:
	//
	// clb
	LoadBalanceType *string `json:"LoadBalanceType,omitempty" xml:"LoadBalanceType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:sae-test
	NamespaceId    *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	RequestTimeout *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{"appId":"395b60e4-0550-458d-9c54-a265d036****","containerPort":8080,"domain":"www.sae.site","path":"/path1"},{"appId":"666403ce-d25b-47cf-87fe-497565d2****","containerPort":8080,"domain":"sae.site","path":"/path2"}]
	Rules            *string `json:"Rules,omitempty" xml:"Rules,omitempty"`
	SecurityPolicyId *string `json:"SecurityPolicyId,omitempty" xml:"SecurityPolicyId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// lb-uf6hucc7inlqrtcq5****
	SlbId *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
}

func (s CreateIngressRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIngressRequest) GoString() string {
	return s.String()
}

func (s *CreateIngressRequest) SetCertId(v string) *CreateIngressRequest {
	s.CertId = &v
	return s
}

func (s *CreateIngressRequest) SetCertIds(v string) *CreateIngressRequest {
	s.CertIds = &v
	return s
}

func (s *CreateIngressRequest) SetDefaultRule(v string) *CreateIngressRequest {
	s.DefaultRule = &v
	return s
}

func (s *CreateIngressRequest) SetDescription(v string) *CreateIngressRequest {
	s.Description = &v
	return s
}

func (s *CreateIngressRequest) SetIdleTimeout(v int32) *CreateIngressRequest {
	s.IdleTimeout = &v
	return s
}

func (s *CreateIngressRequest) SetListenerPort(v int32) *CreateIngressRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateIngressRequest) SetListenerProtocol(v string) *CreateIngressRequest {
	s.ListenerProtocol = &v
	return s
}

func (s *CreateIngressRequest) SetLoadBalanceType(v string) *CreateIngressRequest {
	s.LoadBalanceType = &v
	return s
}

func (s *CreateIngressRequest) SetNamespaceId(v string) *CreateIngressRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateIngressRequest) SetRequestTimeout(v int32) *CreateIngressRequest {
	s.RequestTimeout = &v
	return s
}

func (s *CreateIngressRequest) SetRules(v string) *CreateIngressRequest {
	s.Rules = &v
	return s
}

func (s *CreateIngressRequest) SetSecurityPolicyId(v string) *CreateIngressRequest {
	s.SecurityPolicyId = &v
	return s
}

func (s *CreateIngressRequest) SetSlbId(v string) *CreateIngressRequest {
	s.SlbId = &v
	return s
}

type CreateIngressResponseBody struct {
	// example:
	//
	// 200
	Code      *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *CreateIngressResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CreateIngressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIngressResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIngressResponseBody) SetCode(v string) *CreateIngressResponseBody {
	s.Code = &v
	return s
}

func (s *CreateIngressResponseBody) SetData(v *CreateIngressResponseBodyData) *CreateIngressResponseBody {
	s.Data = v
	return s
}

func (s *CreateIngressResponseBody) SetErrorCode(v string) *CreateIngressResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateIngressResponseBody) SetMessage(v string) *CreateIngressResponseBody {
	s.Message = &v
	return s
}

func (s *CreateIngressResponseBody) SetRequestId(v string) *CreateIngressResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateIngressResponseBody) SetSuccess(v bool) *CreateIngressResponseBody {
	s.Success = &v
	return s
}

func (s *CreateIngressResponseBody) SetTraceId(v string) *CreateIngressResponseBody {
	s.TraceId = &v
	return s
}

type CreateIngressResponseBodyData struct {
	// example:
	//
	// 87
	IngressId *int64 `json:"IngressId,omitempty" xml:"IngressId,omitempty"`
}

func (s CreateIngressResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateIngressResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateIngressResponseBodyData) SetIngressId(v int64) *CreateIngressResponseBodyData {
	s.IngressId = &v
	return s
}

type CreateIngressResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateIngressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateIngressResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIngressResponse) GoString() string {
	return s.String()
}

func (s *CreateIngressResponse) SetHeaders(v map[string]*string) *CreateIngressResponse {
	s.Headers = v
	return s
}

func (s *CreateIngressResponse) SetStatusCode(v int32) *CreateIngressResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIngressResponse) SetBody(v *CreateIngressResponseBody) *CreateIngressResponse {
	s.Body = v
	return s
}

type CreateJobRequest struct {
	// The Alibaba Cloud Resource Name (ARN) required for a RAM role to obtain images across accounts. For more information, see [Grant permissions across Alibaba Cloud accounts by using a RAM role](https://help.aliyun.com/document_detail/223585.html).
	//
	// example:
	//
	// acs:ram::123456789012****:role/adminrole
	AcrAssumeRoleArn *string `json:"AcrAssumeRoleArn,omitempty" xml:"AcrAssumeRoleArn,omitempty"`
	// The ID of Container Registry Enterprise Edition instance N. This parameter is required when the **ImageUrl*	- parameter is set to the URL of an image in an ACR Enterprise Edition instance.
	//
	// example:
	//
	// cri-xxxxxx
	AcrInstanceId *string `json:"AcrInstanceId,omitempty" xml:"AcrInstanceId,omitempty"`
	// The description of the template. The description cannot exceed 1,024 characters in length.
	//
	// example:
	//
	// This is a test description.
	AppDescription *string `json:"AppDescription,omitempty" xml:"AppDescription,omitempty"`
	// The name of the job template. The name can contain digits, letters, and hyphens (-). The name must start with a letter and cannot exceed 36 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// Specifies whether to automatically configure the network environment. Take note of the following rules:
	//
	// 	- **true**: The network environment is automatically configured by SAE when the application is created. In this case, the values of the **NamespaceId**, **VpcId**, **vSwitchId**, and **SecurityGroupId*	- parameters are ignored.
	//
	// 	- **false**: The network environment is manually configured based on your settings when the application is created.
	//
	// example:
	//
	// false
	AutoConfig *bool `json:"AutoConfig,omitempty" xml:"AutoConfig,omitempty"`
	// The number of times the job is retried.
	//
	// example:
	//
	// 3
	BackoffLimit *int64 `json:"BackoffLimit,omitempty" xml:"BackoffLimit,omitempty"`
	// The command that is used to start the image. The command must be an existing executable object in the container. Sample statements:
	//
	//     command:
	//
	//           - echo
	//
	//           - abc
	//
	//           - >
	//
	//           - file0
	//
	// In this example, the Command parameter is set to `Command="echo", CommandArgs=["abc", ">", "file0"]`.
	//
	// example:
	//
	// echo
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The parameters of the image startup command. The CommandArgs parameter specifies the parameters that are required for the **Command*	- parameter. You can specify the name in one of the following formats:
	//
	// `["a","b"]`
	//
	// In the preceding example, the CommandArgs parameter is set to `CommandArgs=["abc", ">", "file0"]`. The data type of `["abc", ">", "file0"]` must be an array of strings in the JSON format. This parameter is optional.
	//
	// example:
	//
	// ["a","b"]
	CommandArgs *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	// The concurrency policy of the job. Take note of the following rules:
	//
	// 	- **Forbid**: Prohibits concurrent running. If the previous job is not completed, no new job is created.
	//
	// 	- **Allow**: Allows concurrent running.
	//
	// 	- **Replace**: If the previous job is not completed when the time to create a new job is reached, the new job replaces the previous job.
	//
	// example:
	//
	// Allow
	ConcurrencyPolicy *string `json:"ConcurrencyPolicy,omitempty" xml:"ConcurrencyPolicy,omitempty"`
	// The description of the **ConfigMap*	- instance mounted to the application. Use configurations created on the Configuration Items page to configure containers. The following table describes the parameters that are used in the preceding statements.
	//
	// 	- **congfigMapId**: the ID of the ConfigMap instance. You can call the [ListNamespacedConfigMaps](https://help.aliyun.com/document_detail/176917.html) operation to obtain the ID.
	//
	// 	- **key**: the key.
	//
	// > You can use the `sae-sys-configmap-all` key to mount all keys.
	//
	// 	- **mountPath**: the mount path in the container.
	//
	// example:
	//
	// [{"configMapId":16,"key":"test","mountPath":"/tmp"}]
	ConfigMapMountDesc *string `json:"ConfigMapMountDesc,omitempty" xml:"ConfigMapMountDesc,omitempty"`
	// The CPU specifications that are required for each instance. Unit: millicores. You cannot set this parameter to 0. Valid values:
	//
	// 	- 500
	//
	// 	- 1000
	//
	// 	- 2000
	//
	// 	- 4000
	//
	// 	- 8000
	//
	// 	- 16000
	//
	// 	- 32000
	//
	// example:
	//
	// 1000
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The custom mappings between hostnames and IP addresses in the container. Take note of the following rules:
	//
	// 	- **hostName**: the domain name or hostname.
	//
	// 	- **ip**: the IP address.
	//
	// example:
	//
	// [{"hostName":"samplehost","ip":"127.0.0.1"}]
	CustomHostAlias *string `json:"CustomHostAlias,omitempty" xml:"CustomHostAlias,omitempty"`
	// The version of the container, such as Ali-Tomcat, in which an application developed based on High-speed Service Framework (HSF) is deployed.
	//
	// example:
	//
	// 3.5.3
	EdasContainerVersion *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	EnableImageAccl      *bool   `json:"EnableImageAccl,omitempty" xml:"EnableImageAccl,omitempty"`
	// The environment variables. You can configure custom environment variables or reference a ConfigMap. If you want to reference a ConfigMap, you must first create a ConfigMap. For more information, see [CreateConfigMap](https://help.aliyun.com/document_detail/176914.html). Take note of the following rules:
	//
	// 	- Customize
	//
	//     	- **name**: the name of the environment variable.
	//
	//     	- **value**: the value of the environment variable.
	//
	// 	- Reference ConfigMap
	//
	//     	- **name**: the name of the environment variable. You can reference one or all keys. If you want to reference all keys, specify `sae-sys-configmap-all-<ConfigMap name>`. Example: `sae-sys-configmap-all-test1`.
	//
	//     	- **valueFrom**: the reference of the environment variable. Set the value to `configMapRef`.
	//
	//     	- **configMapId**: the ConfigMap ID.
	//
	//     	- **key**: the key. If you want to reference all keys, do not configure this parameter.
	//
	// example:
	//
	// [{"name":"envtmp","value":"0"}]
	Envs *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	// The ID of the corresponding Secret.
	//
	// example:
	//
	// 10
	ImagePullSecrets *string `json:"ImagePullSecrets,omitempty" xml:"ImagePullSecrets,omitempty"`
	// The URL of the image. This parameter is returned only if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// registry.cn-hangzhou.aliyuncs.com/sae_test/ali_sae_test:0.0.1
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// The arguments in the JAR package. The arguments are used to start the application container. The default startup command is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// -Xms4G -Xmx4G
	JarStartArgs *string `json:"JarStartArgs,omitempty" xml:"JarStartArgs,omitempty"`
	// The option settings in the JAR package. The settings are used to start the application container. The default startup command for application deployment is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// custom-option
	JarStartOptions *string `json:"JarStartOptions,omitempty" xml:"JarStartOptions,omitempty"`
	// The version of the Java development kit (JDK) on which the deployment package of the application depends. The following versions are supported:
	//
	// 	- **Open JDK 8**
	//
	// 	- **Open JDK 7**
	//
	// 	- **Dragonwell 11**
	//
	// 	- **Dragonwell 8**
	//
	// 	- **openjdk-8u191-jdk-alpine3.9**
	//
	// 	- **openjdk-7u201-jdk-alpine3.9**
	//
	// This parameter is not returned if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// Open JDK 8
	Jdk *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	// The size of memory required by each instance. Unit: MB. You cannot set this parameter to 0. The values of this parameter correspond to the values of the Cpu parameter:
	//
	// 	- Set the value to 1024 when Cpu is set to 500 or 1000.
	//
	// 	- Set the value to 2048 when Cpu is set to 500, 1000 or 2000.
	//
	// 	- Set the value to 4096 when Cpu is set to 1000, 2000, or 4000.
	//
	// 	- Set the value to 8192 when Cpu is set to 2000, 4000, or 8000.
	//
	// 	- Set the value to 12288 when Cpu is set to 12000.
	//
	// 	- Set the value to 16384 when Cpu is set to 4000, 8000, or 16000.
	//
	// 	- Set the value to 24576 when Cpu is set to 12000.
	//
	// 	- Set the value to 32768 when Cpu is set to 16000.
	//
	// 	- Set the value to 65536 when Cpu is set to 8000, 16000, or 32000.
	//
	// 	- Set the value to 131072 when Cpu is set to 32000.
	//
	// example:
	//
	// 1024
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The configurations for mounting the NAS file system. After the application is created, you may want to call other operations to manage the application. If you do not want to change the NAS configurations in these subsequent operations, you can omit the **MountDesc*	- parameter in the requests. If you want to unmount the NAS file system, you must set the **MountDesc*	- values in the subsequent requests to an empty string ("").
	//
	// example:
	//
	// [{mountPath: "/tmp", nasPath: "/"}]
	MountDesc *string `json:"MountDesc,omitempty" xml:"MountDesc,omitempty"`
	// The mount target of the NAS file system in the VPC where the application is deployed. If you do not need to modify this configuration during the deployment, configure the **MountHost*	- parameter only in the first request. You do not need to include this parameter in subsequent requests. If you need to remove this configuration, leave the **MountHost*	- parameter empty in the request.
	//
	// example:
	//
	// 10d3b4bc9****.com
	MountHost *string `json:"MountHost,omitempty" xml:"MountHost,omitempty"`
	// The ID of the Serverless App Engine (SAE) namespace. The ID can contain only lowercase letters and hyphens (-). It must start with a lowercase letter.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The ID of the Apsara File Storage NAS file system. After the application is created, you may want to call other operations to manage the application. If you do not want to change the NAS configurations in these subsequent operations, you can omit the **NasId*	- parameter in the requests. If you want to unmount the NAS file system, you must set the **NasId*	- values in the subsequent requests to an empty string ("").
	//
	// example:
	//
	// 10d3b4****
	NasId *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	// The AccessKey ID that is used to read data from and write data to Object Storage Service (OSS) buckets.
	//
	// example:
	//
	// xxxxxx
	OssAkId *string `json:"OssAkId,omitempty" xml:"OssAkId,omitempty"`
	// The AccessKey secret that is used to read data from and write data to OSS buckets.
	//
	// example:
	//
	// xxxxxx
	OssAkSecret *string `json:"OssAkSecret,omitempty" xml:"OssAkSecret,omitempty"`
	// Information of the Object Storage Service (OSS) bucket mounted to the application. The following table describes the parameters that are used in the preceding statements.
	//
	// 	- **bucketName**: the name of the OSS bucket.
	//
	// 	- **bucketPath**: the directory or object in OSS. If the specified directory or object does not exist, an error is returned.
	//
	// 	- **mountPath**: the directory of the container in SAE. If the path already exists, the newly specified path overwrites the previous one. If the path does not exist, it is created.
	//
	// 	- **readOnly**: specifies whether to only allow the container path to read data from the OSS directory. Valid values:
	//
	//     	- **true**: The container path only has read permission on the OSS directory.
	//
	//     	- **false**: The application has read and write permissions.
	//
	// example:
	//
	// [{"bucketName": "oss-bucket", "bucketPath": "data/user.data", "mountPath": "/usr/data/user.data", "readOnly": true}]
	OssMountDescs *string `json:"OssMountDescs,omitempty" xml:"OssMountDescs,omitempty"`
	// The type of the deployment package. Take note of the following rules:
	//
	// 	- If you deploy the application by using a Java Archive (JAR) package, you can set this parameter to **FatJar**, **War**, or **Image**.
	//
	// 	- If you deploy the application by using a PHP package, you can set this parameter to one of the following values:
	//
	// **PhpZip*	- **IMAGE_PHP_5_4*	- **IMAGE_PHP_5_4_ALPINE*	- **IMAGE_PHP_5_5*	- **IMAGE_PHP_5_5_ALPINE*	- **IMAGE_PHP_5_6*	- **IMAGE_PHP_5_6_ALPINE*	- **IMAGE_PHP_7_0*	- **IMAGE_PHP_7_0_ALPINE*	- **IMAGE_PHP_7_1*	- **IMAGE_PHP_7_1_ALPINE*	- **IMAGE_PHP_7_2*	- **IMAGE_PHP_7_2_ALPINE*	- **IMAGE_PHP_7_3*	- **IMAGE_PHP_7_3_ALPINE**
	//
	// 	- If you deploy the application by using a **Python*	- package, you can set this parameter to **PythonZip*	- or **Image**:
	//
	// This parameter is required.
	//
	// example:
	//
	// FatJar
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// The address of the deployment package. This parameter is required if you set **PackageType*	- to **FatJar**, **War**, or **PythonZip**.
	//
	// example:
	//
	// http://myoss.oss-cn-hangzhou.aliyuncs.com/my-buc/2019-06-30/****.jar
	PackageUrl *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	// The version of the deployment package. This parameter is required if you set **PackageType*	- to **FatJar**, **War**, or **PythonZip**.
	//
	// example:
	//
	// 1.0.1
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	// The details of the PHP configuration file.
	//
	// example:
	//
	// k1=v1
	PhpConfig *string `json:"PhpConfig,omitempty" xml:"PhpConfig,omitempty"`
	// The path on which the PHP configuration file for application startup is mounted. Make sure that the PHP server uses this configuration file during the startup.
	//
	// example:
	//
	// /usr/local/etc/php/php.ini
	PhpConfigLocation *string `json:"PhpConfigLocation,omitempty" xml:"PhpConfigLocation,omitempty"`
	// The script that is run immediately after the container is started. Example: `{"exec":{"command":["sh","-c","echo hello"\\]}}`
	//
	// example:
	//
	// {"exec":{"command":["sh","-c","echo hello"]}}
	PostStart *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	// The script that is run before the container is stopped. Example: `{"exec":{"command":["sh","-c","echo hello"\\]}}`
	//
	// example:
	//
	// {"exec":{"command":["sh","-c","echo hello"]}}
	PreStop *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	// The programming language. Valid values: **java**, **php**, **python**, and **shell**.
	//
	// example:
	//
	// java
	ProgrammingLanguage *string `json:"ProgrammingLanguage,omitempty" xml:"ProgrammingLanguage,omitempty"`
	// The Python environment. Set the value to **PYTHON 3.9.15**.
	//
	// example:
	//
	// PYTHON 3.9.15
	Python *string `json:"Python,omitempty" xml:"Python,omitempty"`
	// The configurations for installing custom module dependencies. By default, the dependencies defined by the requirements.txt file in the root directory are installed. If the package does not contain this file and you do not configure custom dependencies in the package, specify the dependencies that you want to install in the text box.
	//
	// example:
	//
	// Flask==2.0
	PythonModules *string `json:"PythonModules,omitempty" xml:"PythonModules,omitempty"`
	// The ID of the job that you reference.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	RefAppId *string `json:"RefAppId,omitempty" xml:"RefAppId,omitempty"`
	// The number of concurrent instances.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	Replicas *int32 `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-wz969ngg2e49q5i4****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// Specifies whether to enable job sharding.
	//
	// example:
	//
	// true
	Slice *bool `json:"Slice,omitempty" xml:"Slice,omitempty"`
	// The parameters of job sharding.
	//
	// example:
	//
	// [0,1,2]
	SliceEnvs *string `json:"SliceEnvs,omitempty" xml:"SliceEnvs,omitempty"`
	// The logging configurations of Log Service.
	//
	// 	- To use Log Service resources that are automatically created by SAE, set this parameter to `[{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]`.
	//
	// 	- To use custom Log Service resources, set this parameter to `[{"projectName":"test-sls","logType":"stdout","logDir":"","logstoreName":"sae","logtailName":""},{"projectName":"test","logDir":"/tmp/a.log","logstoreName":"sae","logtailName":""}]`.
	//
	// The following table describes the parameters that are used in the preceding statements.
	//
	// 	- **projectName**: the name of the Log Service project.
	//
	// 	- **logDir**: the path in which logs are stored.
	//
	// 	- **logType**: the log type. **stdout**: the standard output log of the container. You can specify only one stdout value for this parameter. If you leave this parameter empty, file logs are collected.
	//
	// 	- **logstoreName**: the name of the Logstore in Log Service.
	//
	// 	- **logtailName**: the name of the Logtail configuration in Log Service. If you do not configure this parameter, a new Logtail configuration is created.
	//
	// If you do not need to modify the logging configurations when you deploy the application, configure the **SlsConfigs*	- parameter only in the first request. You do not need to include this parameter in subsequent requests. If you no longer need to use Log Service, leave the **SlsConfigs*	- parameter empty in the request.
	//
	// > A Log Service project that is automatically created by SAE when you create an application is deleted when the application is deleted. Therefore, when you create an application, you cannot select a Log Service project that is automatically created by SAE for log collection.
	//
	// example:
	//
	// [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]
	SlsConfigs *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	// The timeout period for a graceful shutdown. Default value: 30. Unit: seconds. Valid values: 1 to 300.
	//
	// example:
	//
	// 10
	TerminationGracePeriodSeconds *int32 `json:"TerminationGracePeriodSeconds,omitempty" xml:"TerminationGracePeriodSeconds,omitempty"`
	// The timeout period. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The time zone. Default value: **Asia/Shanghai**.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The Tomcat configuration. If you want to cancel this configuration, set this parameter to "" or "{}". The following variables are included in the configuration: Take note of the following rules:
	//
	// 	- **port**: the port number. The port number ranges from 1024 to 65535. Though the admin permissions are configured for the container, the root permissions are required to perform operations on ports whose number is smaller than 1024. Enter a value that ranges from 1025 to 65535 because the container has only the admin permissions. If you do not specify this parameter, the default port number 8080 is used.
	//
	// 	- **contextPath**: the path. Default value: /. This value indicates the root directory.
	//
	// 	- **maxThreads**: the maximum number of connections in the connection pool. Default value: 400.
	//
	// 	- **uriEncoding**: the URI encoding scheme in the Tomcat container. Valid values: UTF-8, ISO-8859-1, GBK, and GB2312.***********	- If you do not specify this parameter, the default value **ISO-8859-1*	- is used.
	//
	// 	- **useBodyEncoding**: specifies whether to use the encoding scheme specified in the request body for URI query parameters. Default value: true.
	//
	// example:
	//
	// {"port":8080,"contextPath":"/","maxThreads":400,"uriEncoding":"ISO-8859-1","useBodyEncodingForUri":true}
	TomcatConfig  *string `json:"TomcatConfig,omitempty" xml:"TomcatConfig,omitempty"`
	TriggerConfig *string `json:"TriggerConfig,omitempty" xml:"TriggerConfig,omitempty"`
	// The vSwitch to which the elastic network interface (ENI) of the application instance is connected. The vSwitch must be located in the VPC specified by the VpcId parameter. The SAE namespace is bound with this vSwitch. The default value is the ID of the vSwitch that is bound to the namespace.
	//
	// example:
	//
	// vsw-bp12mw1f8k3jgygk9****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The ID of the virtual private cloud (VPC) that corresponds to the SAE namespace. In SAE, once correspondence is configured between a namespace and a VPC, the namespace cannot correspond to other VPCs. When the SAE application is created within the namespace, the application is bound with the VPC. Multiple namespaces can correspond to the same VPC. The default value is the ID of the VPC that is bound to the namespace.
	//
	// example:
	//
	// vpc-bp1aevy8sofi8mh1q****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The startup command of the WAR package. For information about how to configure the startup command, see [Configure startup commands](https://help.aliyun.com/document_detail/96677.html).
	//
	// example:
	//
	// CATALINA_OPTS=\\"$CATALINA_OPTS $Options\\" catalina.sh run
	WarStartOptions *string `json:"WarStartOptions,omitempty" xml:"WarStartOptions,omitempty"`
	// The version of the Tomcat container on which the deployment package depends. Valid values:
	//
	// 	- **apache-tomcat-7.0.91**
	//
	// 	- **apache-tomcat-8.5.42**
	//
	// This parameter is not returned if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// apache-tomcat-7.0.91
	WebContainer *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
	// Set the value to `job`.
	//
	// This parameter is required.
	//
	// example:
	//
	// job
	Workload *string `json:"Workload,omitempty" xml:"Workload,omitempty"`
}

func (s CreateJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJobRequest) GoString() string {
	return s.String()
}

func (s *CreateJobRequest) SetAcrAssumeRoleArn(v string) *CreateJobRequest {
	s.AcrAssumeRoleArn = &v
	return s
}

func (s *CreateJobRequest) SetAcrInstanceId(v string) *CreateJobRequest {
	s.AcrInstanceId = &v
	return s
}

func (s *CreateJobRequest) SetAppDescription(v string) *CreateJobRequest {
	s.AppDescription = &v
	return s
}

func (s *CreateJobRequest) SetAppName(v string) *CreateJobRequest {
	s.AppName = &v
	return s
}

func (s *CreateJobRequest) SetAutoConfig(v bool) *CreateJobRequest {
	s.AutoConfig = &v
	return s
}

func (s *CreateJobRequest) SetBackoffLimit(v int64) *CreateJobRequest {
	s.BackoffLimit = &v
	return s
}

func (s *CreateJobRequest) SetCommand(v string) *CreateJobRequest {
	s.Command = &v
	return s
}

func (s *CreateJobRequest) SetCommandArgs(v string) *CreateJobRequest {
	s.CommandArgs = &v
	return s
}

func (s *CreateJobRequest) SetConcurrencyPolicy(v string) *CreateJobRequest {
	s.ConcurrencyPolicy = &v
	return s
}

func (s *CreateJobRequest) SetConfigMapMountDesc(v string) *CreateJobRequest {
	s.ConfigMapMountDesc = &v
	return s
}

func (s *CreateJobRequest) SetCpu(v int32) *CreateJobRequest {
	s.Cpu = &v
	return s
}

func (s *CreateJobRequest) SetCustomHostAlias(v string) *CreateJobRequest {
	s.CustomHostAlias = &v
	return s
}

func (s *CreateJobRequest) SetEdasContainerVersion(v string) *CreateJobRequest {
	s.EdasContainerVersion = &v
	return s
}

func (s *CreateJobRequest) SetEnableImageAccl(v bool) *CreateJobRequest {
	s.EnableImageAccl = &v
	return s
}

func (s *CreateJobRequest) SetEnvs(v string) *CreateJobRequest {
	s.Envs = &v
	return s
}

func (s *CreateJobRequest) SetImagePullSecrets(v string) *CreateJobRequest {
	s.ImagePullSecrets = &v
	return s
}

func (s *CreateJobRequest) SetImageUrl(v string) *CreateJobRequest {
	s.ImageUrl = &v
	return s
}

func (s *CreateJobRequest) SetJarStartArgs(v string) *CreateJobRequest {
	s.JarStartArgs = &v
	return s
}

func (s *CreateJobRequest) SetJarStartOptions(v string) *CreateJobRequest {
	s.JarStartOptions = &v
	return s
}

func (s *CreateJobRequest) SetJdk(v string) *CreateJobRequest {
	s.Jdk = &v
	return s
}

func (s *CreateJobRequest) SetMemory(v int32) *CreateJobRequest {
	s.Memory = &v
	return s
}

func (s *CreateJobRequest) SetMountDesc(v string) *CreateJobRequest {
	s.MountDesc = &v
	return s
}

func (s *CreateJobRequest) SetMountHost(v string) *CreateJobRequest {
	s.MountHost = &v
	return s
}

func (s *CreateJobRequest) SetNamespaceId(v string) *CreateJobRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateJobRequest) SetNasId(v string) *CreateJobRequest {
	s.NasId = &v
	return s
}

func (s *CreateJobRequest) SetOssAkId(v string) *CreateJobRequest {
	s.OssAkId = &v
	return s
}

func (s *CreateJobRequest) SetOssAkSecret(v string) *CreateJobRequest {
	s.OssAkSecret = &v
	return s
}

func (s *CreateJobRequest) SetOssMountDescs(v string) *CreateJobRequest {
	s.OssMountDescs = &v
	return s
}

func (s *CreateJobRequest) SetPackageType(v string) *CreateJobRequest {
	s.PackageType = &v
	return s
}

func (s *CreateJobRequest) SetPackageUrl(v string) *CreateJobRequest {
	s.PackageUrl = &v
	return s
}

func (s *CreateJobRequest) SetPackageVersion(v string) *CreateJobRequest {
	s.PackageVersion = &v
	return s
}

func (s *CreateJobRequest) SetPhpConfig(v string) *CreateJobRequest {
	s.PhpConfig = &v
	return s
}

func (s *CreateJobRequest) SetPhpConfigLocation(v string) *CreateJobRequest {
	s.PhpConfigLocation = &v
	return s
}

func (s *CreateJobRequest) SetPostStart(v string) *CreateJobRequest {
	s.PostStart = &v
	return s
}

func (s *CreateJobRequest) SetPreStop(v string) *CreateJobRequest {
	s.PreStop = &v
	return s
}

func (s *CreateJobRequest) SetProgrammingLanguage(v string) *CreateJobRequest {
	s.ProgrammingLanguage = &v
	return s
}

func (s *CreateJobRequest) SetPython(v string) *CreateJobRequest {
	s.Python = &v
	return s
}

func (s *CreateJobRequest) SetPythonModules(v string) *CreateJobRequest {
	s.PythonModules = &v
	return s
}

func (s *CreateJobRequest) SetRefAppId(v string) *CreateJobRequest {
	s.RefAppId = &v
	return s
}

func (s *CreateJobRequest) SetReplicas(v int32) *CreateJobRequest {
	s.Replicas = &v
	return s
}

func (s *CreateJobRequest) SetSecurityGroupId(v string) *CreateJobRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateJobRequest) SetSlice(v bool) *CreateJobRequest {
	s.Slice = &v
	return s
}

func (s *CreateJobRequest) SetSliceEnvs(v string) *CreateJobRequest {
	s.SliceEnvs = &v
	return s
}

func (s *CreateJobRequest) SetSlsConfigs(v string) *CreateJobRequest {
	s.SlsConfigs = &v
	return s
}

func (s *CreateJobRequest) SetTerminationGracePeriodSeconds(v int32) *CreateJobRequest {
	s.TerminationGracePeriodSeconds = &v
	return s
}

func (s *CreateJobRequest) SetTimeout(v int64) *CreateJobRequest {
	s.Timeout = &v
	return s
}

func (s *CreateJobRequest) SetTimezone(v string) *CreateJobRequest {
	s.Timezone = &v
	return s
}

func (s *CreateJobRequest) SetTomcatConfig(v string) *CreateJobRequest {
	s.TomcatConfig = &v
	return s
}

func (s *CreateJobRequest) SetTriggerConfig(v string) *CreateJobRequest {
	s.TriggerConfig = &v
	return s
}

func (s *CreateJobRequest) SetVSwitchId(v string) *CreateJobRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateJobRequest) SetVpcId(v string) *CreateJobRequest {
	s.VpcId = &v
	return s
}

func (s *CreateJobRequest) SetWarStartOptions(v string) *CreateJobRequest {
	s.WarStartOptions = &v
	return s
}

func (s *CreateJobRequest) SetWebContainer(v string) *CreateJobRequest {
	s.WebContainer = &v
	return s
}

func (s *CreateJobRequest) SetWorkload(v string) *CreateJobRequest {
	s.Workload = &v
	return s
}

type CreateJobResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response.
	Data *CreateJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Take note of the following rules:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 01CF26C7-00A3-4AA6-BA76-7E95F2A3***
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application deployment is successful. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// ac1a0b2215622246421415014e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CreateJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJobResponseBody) SetCode(v string) *CreateJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateJobResponseBody) SetData(v *CreateJobResponseBodyData) *CreateJobResponseBody {
	s.Data = v
	return s
}

func (s *CreateJobResponseBody) SetErrorCode(v string) *CreateJobResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateJobResponseBody) SetMessage(v string) *CreateJobResponseBody {
	s.Message = &v
	return s
}

func (s *CreateJobResponseBody) SetRequestId(v string) *CreateJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateJobResponseBody) SetSuccess(v bool) *CreateJobResponseBody {
	s.Success = &v
	return s
}

func (s *CreateJobResponseBody) SetTraceId(v string) *CreateJobResponseBody {
	s.TraceId = &v
	return s
}

type CreateJobResponseBodyData struct {
	// The application ID.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the change order. It can be used to query the task status.
	//
	// example:
	//
	// 01db03d3-3ee9-48b3-b3d0-dfce2d88****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s CreateJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateJobResponseBodyData) SetAppId(v string) *CreateJobResponseBodyData {
	s.AppId = &v
	return s
}

func (s *CreateJobResponseBodyData) SetChangeOrderId(v string) *CreateJobResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type CreateJobResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJobResponse) GoString() string {
	return s.String()
}

func (s *CreateJobResponse) SetHeaders(v map[string]*string) *CreateJobResponse {
	s.Headers = v
	return s
}

func (s *CreateJobResponse) SetStatusCode(v int32) *CreateJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateJobResponse) SetBody(v *CreateJobResponseBody) *CreateJobResponse {
	s.Body = v
	return s
}

type CreateNamespaceRequest struct {
	EnableMicroRegistration *bool `json:"EnableMicroRegistration,omitempty" xml:"EnableMicroRegistration,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// The message returned for the operation.
	//
	// example:
	//
	// desc
	NamespaceDescription *string `json:"NamespaceDescription,omitempty" xml:"NamespaceDescription,omitempty"`
	// The data returned.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// name
	NamespaceName *string `json:"NamespaceName,omitempty" xml:"NamespaceName,omitempty"`
}

func (s CreateNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNamespaceRequest) GoString() string {
	return s.String()
}

func (s *CreateNamespaceRequest) SetEnableMicroRegistration(v bool) *CreateNamespaceRequest {
	s.EnableMicroRegistration = &v
	return s
}

func (s *CreateNamespaceRequest) SetNameSpaceShortId(v string) *CreateNamespaceRequest {
	s.NameSpaceShortId = &v
	return s
}

func (s *CreateNamespaceRequest) SetNamespaceDescription(v string) *CreateNamespaceRequest {
	s.NamespaceDescription = &v
	return s
}

func (s *CreateNamespaceRequest) SetNamespaceId(v string) *CreateNamespaceRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateNamespaceRequest) SetNamespaceName(v string) *CreateNamespaceRequest {
	s.NamespaceName = &v
	return s
}

type CreateNamespaceResponseBody struct {
	// bucketPath
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The region where the namespace resides.
	Data *CreateNamespaceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// http://sae_pop_pre/#vpc
	//
	// example:
	//
	// bucketName
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The description of the custom namespace.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// mountDir
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// 0a981dd515966966104121683d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CreateNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNamespaceResponseBody) SetCode(v string) *CreateNamespaceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateNamespaceResponseBody) SetData(v *CreateNamespaceResponseBodyData) *CreateNamespaceResponseBody {
	s.Data = v
	return s
}

func (s *CreateNamespaceResponseBody) SetErrorCode(v string) *CreateNamespaceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateNamespaceResponseBody) SetMessage(v string) *CreateNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateNamespaceResponseBody) SetRequestId(v string) *CreateNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNamespaceResponseBody) SetSuccess(v bool) *CreateNamespaceResponseBody {
	s.Success = &v
	return s
}

func (s *CreateNamespaceResponseBody) SetTraceId(v string) *CreateNamespaceResponseBody {
	s.TraceId = &v
	return s
}

type CreateNamespaceResponseBodyData struct {
	EnableMicroRegistration *bool `json:"EnableMicroRegistration,omitempty" xml:"EnableMicroRegistration,omitempty"`
	// Indicates whether the namespace was created. Valid values:
	//
	// 	- **true**: The instance was created.
	//
	// 	- **false**: The call failed to be created.
	//
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// The short ID of the namespace.
	//
	// example:
	//
	// desc
	NamespaceDescription *string `json:"NamespaceDescription,omitempty" xml:"NamespaceDescription,omitempty"`
	// The error code returned. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// Null
	//
	// example:
	//
	// name
	NamespaceName *string `json:"NamespaceName,omitempty" xml:"NamespaceName,omitempty"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateNamespaceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateNamespaceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateNamespaceResponseBodyData) SetEnableMicroRegistration(v bool) *CreateNamespaceResponseBodyData {
	s.EnableMicroRegistration = &v
	return s
}

func (s *CreateNamespaceResponseBodyData) SetNameSpaceShortId(v string) *CreateNamespaceResponseBodyData {
	s.NameSpaceShortId = &v
	return s
}

func (s *CreateNamespaceResponseBodyData) SetNamespaceDescription(v string) *CreateNamespaceResponseBodyData {
	s.NamespaceDescription = &v
	return s
}

func (s *CreateNamespaceResponseBodyData) SetNamespaceId(v string) *CreateNamespaceResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *CreateNamespaceResponseBodyData) SetNamespaceName(v string) *CreateNamespaceResponseBodyData {
	s.NamespaceName = &v
	return s
}

func (s *CreateNamespaceResponseBodyData) SetRegionId(v string) *CreateNamespaceResponseBodyData {
	s.RegionId = &v
	return s
}

type CreateNamespaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNamespaceResponse) GoString() string {
	return s.String()
}

func (s *CreateNamespaceResponse) SetHeaders(v map[string]*string) *CreateNamespaceResponse {
	s.Headers = v
	return s
}

func (s *CreateNamespaceResponse) SetStatusCode(v int32) *CreateNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNamespaceResponse) SetBody(v *CreateNamespaceResponseBody) *CreateNamespaceResponse {
	s.Body = v
	return s
}

type CreateSecretRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	SecretData *CreateSecretRequestSecretData `json:"SecretData,omitempty" xml:"SecretData,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// registry-auth-acree
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// kubernetes.io/dockerconfigjson
	SecretType *string `json:"SecretType,omitempty" xml:"SecretType,omitempty"`
}

func (s CreateSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecretRequest) GoString() string {
	return s.String()
}

func (s *CreateSecretRequest) SetNamespaceId(v string) *CreateSecretRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateSecretRequest) SetSecretData(v *CreateSecretRequestSecretData) *CreateSecretRequest {
	s.SecretData = v
	return s
}

func (s *CreateSecretRequest) SetSecretName(v string) *CreateSecretRequest {
	s.SecretName = &v
	return s
}

func (s *CreateSecretRequest) SetSecretType(v string) *CreateSecretRequest {
	s.SecretType = &v
	return s
}

type CreateSecretRequestSecretData struct {
	// This parameter is required.
	SecretData *string `json:"SecretData,omitempty" xml:"SecretData,omitempty"`
}

func (s CreateSecretRequestSecretData) String() string {
	return tea.Prettify(s)
}

func (s CreateSecretRequestSecretData) GoString() string {
	return s.String()
}

func (s *CreateSecretRequestSecretData) SetSecretData(v string) *CreateSecretRequestSecretData {
	s.SecretData = &v
	return s
}

type CreateSecretShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	SecretDataShrink *string `json:"SecretData,omitempty" xml:"SecretData,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// registry-auth-acree
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// kubernetes.io/dockerconfigjson
	SecretType *string `json:"SecretType,omitempty" xml:"SecretType,omitempty"`
}

func (s CreateSecretShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecretShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSecretShrinkRequest) SetNamespaceId(v string) *CreateSecretShrinkRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateSecretShrinkRequest) SetSecretDataShrink(v string) *CreateSecretShrinkRequest {
	s.SecretDataShrink = &v
	return s
}

func (s *CreateSecretShrinkRequest) SetSecretName(v string) *CreateSecretShrinkRequest {
	s.SecretName = &v
	return s
}

func (s *CreateSecretShrinkRequest) SetSecretType(v string) *CreateSecretShrinkRequest {
	s.SecretType = &v
	return s
}

type CreateSecretResponseBody struct {
	// example:
	//
	// 200
	Code      *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *CreateSecretResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s CreateSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSecretResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSecretResponseBody) SetCode(v string) *CreateSecretResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSecretResponseBody) SetData(v *CreateSecretResponseBodyData) *CreateSecretResponseBody {
	s.Data = v
	return s
}

func (s *CreateSecretResponseBody) SetErrorCode(v string) *CreateSecretResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateSecretResponseBody) SetMessage(v string) *CreateSecretResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSecretResponseBody) SetRequestId(v string) *CreateSecretResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSecretResponseBody) SetSuccess(v bool) *CreateSecretResponseBody {
	s.Success = &v
	return s
}

func (s *CreateSecretResponseBody) SetTraceId(v string) *CreateSecretResponseBody {
	s.TraceId = &v
	return s
}

type CreateSecretResponseBodyData struct {
	// example:
	//
	// 16
	SecretId *int64 `json:"SecretId,omitempty" xml:"SecretId,omitempty"`
}

func (s CreateSecretResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateSecretResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateSecretResponseBodyData) SetSecretId(v int64) *CreateSecretResponseBodyData {
	s.SecretId = &v
	return s
}

type CreateSecretResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSecretResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSecretResponse) GoString() string {
	return s.String()
}

func (s *CreateSecretResponse) SetHeaders(v map[string]*string) *CreateSecretResponse {
	s.Headers = v
	return s
}

func (s *CreateSecretResponse) SetStatusCode(v int32) *CreateSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSecretResponse) SetBody(v *CreateSecretResponseBody) *CreateSecretResponse {
	s.Body = v
	return s
}

type CreateWebApplicationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	Body *CreateWebApplicationInput `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWebApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWebApplicationRequest) GoString() string {
	return s.String()
}

func (s *CreateWebApplicationRequest) SetNamespaceId(v string) *CreateWebApplicationRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateWebApplicationRequest) SetBody(v *CreateWebApplicationInput) *CreateWebApplicationRequest {
	s.Body = v
	return s
}

type CreateWebApplicationResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWebApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWebApplicationResponse) GoString() string {
	return s.String()
}

func (s *CreateWebApplicationResponse) SetHeaders(v map[string]*string) *CreateWebApplicationResponse {
	s.Headers = v
	return s
}

func (s *CreateWebApplicationResponse) SetStatusCode(v int32) *CreateWebApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWebApplicationResponse) SetBody(v *WebApplicationBody) *CreateWebApplicationResponse {
	s.Body = v
	return s
}

type CreateWebCustomDomainRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	Body *CreateWebCustomDomainInput `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWebCustomDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWebCustomDomainRequest) GoString() string {
	return s.String()
}

func (s *CreateWebCustomDomainRequest) SetNamespaceId(v string) *CreateWebCustomDomainRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateWebCustomDomainRequest) SetBody(v *CreateWebCustomDomainInput) *CreateWebCustomDomainRequest {
	s.Body = v
	return s
}

type CreateWebCustomDomainResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebCustomDomainBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWebCustomDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWebCustomDomainResponse) GoString() string {
	return s.String()
}

func (s *CreateWebCustomDomainResponse) SetHeaders(v map[string]*string) *CreateWebCustomDomainResponse {
	s.Headers = v
	return s
}

func (s *CreateWebCustomDomainResponse) SetStatusCode(v int32) *CreateWebCustomDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWebCustomDomainResponse) SetBody(v *WebCustomDomainBody) *CreateWebCustomDomainResponse {
	s.Body = v
	return s
}

type DeleteApplicationRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// 017f39b8-dfa4-4e16-a84b-1dcee4b1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DeleteApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationRequest) SetAppId(v string) *DeleteApplicationRequest {
	s.AppId = &v
	return s
}

type DeleteApplicationResponseBody struct {
	// Indicates whether the application is deleted. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the change order that is used to query the task execution status.
	Data *DeleteApplicationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The request is successful.
	//
	// 	- **3xx**: A redirection message is returned.
	//
	// 	- **4xx**: The request is invalid.
	//
	// 	- **5xx**: A server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The trace ID that is used to query details of the request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// 	- If the request is successful, **success*	- is returned.
	//
	// 	- If an error occurred, the error code is returned.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The returned results.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponseBody) SetCode(v string) *DeleteApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetData(v *DeleteApplicationResponseBodyData) *DeleteApplicationResponseBody {
	s.Data = v
	return s
}

func (s *DeleteApplicationResponseBody) SetErrorCode(v string) *DeleteApplicationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetMessage(v string) *DeleteApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetRequestId(v string) *DeleteApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetSuccess(v bool) *DeleteApplicationResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetTraceId(v string) *DeleteApplicationResponseBody {
	s.TraceId = &v
	return s
}

type DeleteApplicationResponseBodyData struct {
	// The error code that is returned if the request fails.
	//
	// 	- If the request is successful, this parameter is not returned.****
	//
	// 	- This parameter is returned only if the request failed.***	- For more information about the values of this parameter, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// 01db03d3-3ee9-48b3-b3d0-dfce2d88****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s DeleteApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponseBodyData) SetChangeOrderId(v string) *DeleteApplicationResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type DeleteApplicationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponse) SetHeaders(v map[string]*string) *DeleteApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteApplicationResponse) SetStatusCode(v int32) *DeleteApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApplicationResponse) SetBody(v *DeleteApplicationResponseBody) *DeleteApplicationResponse {
	s.Body = v
	return s
}

type DeleteApplicationScalingRuleRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// This parameter is required.
	//
	// example:
	//
	// timer-0800-2100
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s DeleteApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleRequest) SetAppId(v string) *DeleteApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *DeleteApplicationScalingRuleRequest) SetScalingRuleName(v string) *DeleteApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

type DeleteApplicationScalingRuleResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleResponseBody) SetCode(v string) *DeleteApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteApplicationScalingRuleResponseBody) SetErrorCode(v string) *DeleteApplicationScalingRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteApplicationScalingRuleResponseBody) SetMessage(v string) *DeleteApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteApplicationScalingRuleResponseBody) SetRequestId(v string) *DeleteApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteApplicationScalingRuleResponseBody) SetSuccess(v bool) *DeleteApplicationScalingRuleResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteApplicationScalingRuleResponseBody) SetTraceId(v string) *DeleteApplicationScalingRuleResponseBody {
	s.TraceId = &v
	return s
}

type DeleteApplicationScalingRuleResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *DeleteApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteApplicationScalingRuleResponse) SetStatusCode(v int32) *DeleteApplicationScalingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApplicationScalingRuleResponse) SetBody(v *DeleteApplicationScalingRuleResponseBody) *DeleteApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type DeleteConfigMapRequest struct {
	// 1
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ConfigMapId *int64 `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
}

func (s DeleteConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigMapRequest) GoString() string {
	return s.String()
}

func (s *DeleteConfigMapRequest) SetConfigMapId(v int64) *DeleteConfigMapRequest {
	s.ConfigMapId = &v
	return s
}

type DeleteConfigMapResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the call was successful.
	//
	// 	- **3xx**: indicates that the call was redirected.
	//
	// 	- **4xx**: indicates that the call failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result.
	Data *DeleteConfigMapResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned information. Valid values:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the ConfigMap instance was deleted. Valid values:
	//
	// 	- **true**: The instance was deleted.
	//
	// 	- **false**: The instance failed to be deleted.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteConfigMapResponseBody) SetCode(v string) *DeleteConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteConfigMapResponseBody) SetData(v *DeleteConfigMapResponseBodyData) *DeleteConfigMapResponseBody {
	s.Data = v
	return s
}

func (s *DeleteConfigMapResponseBody) SetErrorCode(v string) *DeleteConfigMapResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteConfigMapResponseBody) SetMessage(v string) *DeleteConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteConfigMapResponseBody) SetRequestId(v string) *DeleteConfigMapResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteConfigMapResponseBody) SetSuccess(v bool) *DeleteConfigMapResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteConfigMapResponseBody) SetTraceId(v string) *DeleteConfigMapResponseBody {
	s.TraceId = &v
	return s
}

type DeleteConfigMapResponseBodyData struct {
	// The ID of the deleted ConfigMap instance.
	//
	// example:
	//
	// 1
	ConfigMapId *int64 `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
}

func (s DeleteConfigMapResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigMapResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteConfigMapResponseBodyData) SetConfigMapId(v int64) *DeleteConfigMapResponseBodyData {
	s.ConfigMapId = &v
	return s
}

type DeleteConfigMapResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigMapResponse) GoString() string {
	return s.String()
}

func (s *DeleteConfigMapResponse) SetHeaders(v map[string]*string) *DeleteConfigMapResponse {
	s.Headers = v
	return s
}

func (s *DeleteConfigMapResponse) SetStatusCode(v int32) *DeleteConfigMapResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteConfigMapResponse) SetBody(v *DeleteConfigMapResponseBody) *DeleteConfigMapResponse {
	s.Body = v
	return s
}

type DeleteGreyTagRouteRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	GreyTagRouteId *int64 `json:"GreyTagRouteId,omitempty" xml:"GreyTagRouteId,omitempty"`
}

func (s DeleteGreyTagRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGreyTagRouteRequest) GoString() string {
	return s.String()
}

func (s *DeleteGreyTagRouteRequest) SetGreyTagRouteId(v int64) *DeleteGreyTagRouteRequest {
	s.GreyTagRouteId = &v
	return s
}

type DeleteGreyTagRouteResponseBody struct {
	// Indicates whether the information of the change order was queried. Valid values:
	//
	// 	- **true**: The information was queried.
	//
	// 	- **false**: The information failed to be queried.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the canary release rule. The ID is globally unique.
	Data *DeleteGreyTagRouteResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned information. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// 9D29CBD0-45D3-410B-9826-52F86F90****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The information about the canary release rule.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteGreyTagRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGreyTagRouteResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGreyTagRouteResponseBody) SetCode(v string) *DeleteGreyTagRouteResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteGreyTagRouteResponseBody) SetData(v *DeleteGreyTagRouteResponseBodyData) *DeleteGreyTagRouteResponseBody {
	s.Data = v
	return s
}

func (s *DeleteGreyTagRouteResponseBody) SetErrorCode(v string) *DeleteGreyTagRouteResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteGreyTagRouteResponseBody) SetMessage(v string) *DeleteGreyTagRouteResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteGreyTagRouteResponseBody) SetRequestId(v string) *DeleteGreyTagRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteGreyTagRouteResponseBody) SetSuccess(v bool) *DeleteGreyTagRouteResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteGreyTagRouteResponseBody) SetTraceId(v string) *DeleteGreyTagRouteResponseBody {
	s.TraceId = &v
	return s
}

type DeleteGreyTagRouteResponseBodyData struct {
	// The returned error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// 16
	GreyTagRouteId *int64 `json:"GreyTagRouteId,omitempty" xml:"GreyTagRouteId,omitempty"`
}

func (s DeleteGreyTagRouteResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteGreyTagRouteResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteGreyTagRouteResponseBodyData) SetGreyTagRouteId(v int64) *DeleteGreyTagRouteResponseBodyData {
	s.GreyTagRouteId = &v
	return s
}

type DeleteGreyTagRouteResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteGreyTagRouteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteGreyTagRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGreyTagRouteResponse) GoString() string {
	return s.String()
}

func (s *DeleteGreyTagRouteResponse) SetHeaders(v map[string]*string) *DeleteGreyTagRouteResponse {
	s.Headers = v
	return s
}

func (s *DeleteGreyTagRouteResponse) SetStatusCode(v int32) *DeleteGreyTagRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGreyTagRouteResponse) SetBody(v *DeleteGreyTagRouteResponseBody) *DeleteGreyTagRouteResponse {
	s.Body = v
	return s
}

type DeleteHistoryJobRequest struct {
	// The ID of the job template to which the job that you want to delete belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 017f39b8-dfa4-4e16-a84b-1dcee4b1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the job.
	//
	// This parameter is required.
	//
	// example:
	//
	// manual-3db7a8fa-5d40-4edc-92e4-49d50eab****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteHistoryJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHistoryJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteHistoryJobRequest) SetAppId(v string) *DeleteHistoryJobRequest {
	s.AppId = &v
	return s
}

func (s *DeleteHistoryJobRequest) SetJobId(v string) *DeleteHistoryJobRequest {
	s.JobId = &v
	return s
}

type DeleteHistoryJobResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result.
	//
	// example:
	//
	// {msg: "", code: 200, success: true}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned information. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the job was deleted. Valid values:
	//
	// 	- **true**: The job was deleted.
	//
	// 	- **false**: The job failed to be deleted.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteHistoryJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHistoryJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHistoryJobResponseBody) SetCode(v string) *DeleteHistoryJobResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteHistoryJobResponseBody) SetData(v string) *DeleteHistoryJobResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteHistoryJobResponseBody) SetErrorCode(v string) *DeleteHistoryJobResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteHistoryJobResponseBody) SetMessage(v string) *DeleteHistoryJobResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteHistoryJobResponseBody) SetRequestId(v string) *DeleteHistoryJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHistoryJobResponseBody) SetSuccess(v bool) *DeleteHistoryJobResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteHistoryJobResponseBody) SetTraceId(v string) *DeleteHistoryJobResponseBody {
	s.TraceId = &v
	return s
}

type DeleteHistoryJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHistoryJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHistoryJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHistoryJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteHistoryJobResponse) SetHeaders(v map[string]*string) *DeleteHistoryJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteHistoryJobResponse) SetStatusCode(v int32) *DeleteHistoryJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHistoryJobResponse) SetBody(v *DeleteHistoryJobResponseBody) *DeleteHistoryJobResponse {
	s.Body = v
	return s
}

type DeleteIngressRequest struct {
	// 87
	//
	// This parameter is required.
	//
	// example:
	//
	// 87
	IngressId *int64 `json:"IngressId,omitempty" xml:"IngressId,omitempty"`
}

func (s DeleteIngressRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIngressRequest) GoString() string {
	return s.String()
}

func (s *DeleteIngressRequest) SetIngressId(v int64) *DeleteIngressRequest {
	s.IngressId = &v
	return s
}

type DeleteIngressResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DeleteIngressResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the routing rule was deleted. Valid values:
	//
	// 	- **true**: indicates that the routing rule was deleted.
	//
	// 	- **false**: indicates that the routing rule could not be deleted.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteIngressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteIngressResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIngressResponseBody) SetCode(v string) *DeleteIngressResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteIngressResponseBody) SetData(v *DeleteIngressResponseBodyData) *DeleteIngressResponseBody {
	s.Data = v
	return s
}

func (s *DeleteIngressResponseBody) SetErrorCode(v string) *DeleteIngressResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteIngressResponseBody) SetMessage(v string) *DeleteIngressResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteIngressResponseBody) SetRequestId(v string) *DeleteIngressResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteIngressResponseBody) SetSuccess(v bool) *DeleteIngressResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteIngressResponseBody) SetTraceId(v string) *DeleteIngressResponseBody {
	s.TraceId = &v
	return s
}

type DeleteIngressResponseBodyData struct {
	// The ID of the routing rule that you want to delete.
	//
	// example:
	//
	// 87
	IngressId *int64 `json:"IngressId,omitempty" xml:"IngressId,omitempty"`
}

func (s DeleteIngressResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteIngressResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteIngressResponseBodyData) SetIngressId(v int64) *DeleteIngressResponseBodyData {
	s.IngressId = &v
	return s
}

type DeleteIngressResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteIngressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteIngressResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIngressResponse) GoString() string {
	return s.String()
}

func (s *DeleteIngressResponse) SetHeaders(v map[string]*string) *DeleteIngressResponse {
	s.Headers = v
	return s
}

func (s *DeleteIngressResponse) SetStatusCode(v int32) *DeleteIngressResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteIngressResponse) SetBody(v *DeleteIngressResponseBody) *DeleteIngressResponse {
	s.Body = v
	return s
}

type DeleteJobRequest struct {
	// The ID of the job template that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// 017f39b8-dfa4-4e16-a84b-1dcee4b1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DeleteJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteJobRequest) SetAppId(v string) *DeleteJobRequest {
	s.AppId = &v
	return s
}

type DeleteJobResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result.
	//
	// example:
	//
	// {msg: "", code: 200, success: true}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error code that is returned. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request is successful.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application is deleted. Valid values:
	//
	// 	- **true**: The namespaces were obtained.
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteJobResponseBody) SetCode(v string) *DeleteJobResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteJobResponseBody) SetData(v string) *DeleteJobResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteJobResponseBody) SetErrorCode(v string) *DeleteJobResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteJobResponseBody) SetMessage(v string) *DeleteJobResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteJobResponseBody) SetRequestId(v string) *DeleteJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteJobResponseBody) SetSuccess(v bool) *DeleteJobResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteJobResponseBody) SetTraceId(v string) *DeleteJobResponseBody {
	s.TraceId = &v
	return s
}

type DeleteJobResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteJobResponse) SetHeaders(v map[string]*string) *DeleteJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteJobResponse) SetStatusCode(v int32) *DeleteJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteJobResponse) SetBody(v *DeleteJobResponseBody) *DeleteJobResponse {
	s.Body = v
	return s
}

type DeleteNamespaceRequest struct {
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// cn-beijing:test
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DeleteNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteNamespaceRequest) SetNameSpaceShortId(v string) *DeleteNamespaceRequest {
	s.NameSpaceShortId = &v
	return s
}

func (s *DeleteNamespaceRequest) SetNamespaceId(v string) *DeleteNamespaceRequest {
	s.NamespaceId = &v
	return s
}

type DeleteNamespaceResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the namespace was deleted. Valid values:
	//
	// 	- **true**: indicates that the namespace was deleted.
	//
	// 	- **false**: indicates that the namespace could not be deleted.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// 0a981dd515966966104121683d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNamespaceResponseBody) SetCode(v string) *DeleteNamespaceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteNamespaceResponseBody) SetErrorCode(v string) *DeleteNamespaceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteNamespaceResponseBody) SetMessage(v string) *DeleteNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteNamespaceResponseBody) SetRequestId(v string) *DeleteNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteNamespaceResponseBody) SetSuccess(v bool) *DeleteNamespaceResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteNamespaceResponseBody) SetTraceId(v string) *DeleteNamespaceResponseBody {
	s.TraceId = &v
	return s
}

type DeleteNamespaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteNamespaceResponse) SetHeaders(v map[string]*string) *DeleteNamespaceResponse {
	s.Headers = v
	return s
}

func (s *DeleteNamespaceResponse) SetStatusCode(v int32) *DeleteNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNamespaceResponse) SetBody(v *DeleteNamespaceResponseBody) *DeleteNamespaceResponse {
	s.Body = v
	return s
}

type DeleteSecretRequest struct {
	// The ID of the namespace in which the Secret resides. By default, the namespace ID is the same as the region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The ID of the Secret to be deleted. You can call the [ListSecrets](https://help.aliyun.com/document_detail/466929.html) operation to view the Secret IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 16
	SecretId *int64 `json:"SecretId,omitempty" xml:"SecretId,omitempty"`
}

func (s DeleteSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecretRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecretRequest) SetNamespaceId(v string) *DeleteSecretRequest {
	s.NamespaceId = &v
	return s
}

func (s *DeleteSecretRequest) SetSecretId(v int64) *DeleteSecretRequest {
	s.SecretId = &v
	return s
}

type DeleteSecretResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response.
	Data *DeleteSecretResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Valid values:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the Secret is successfully deleted. Valid values:
	//
	// 	- **true**: The instance was deleted.
	//
	// 	- **false**: The instance failed to be deleted.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeleteSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecretResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSecretResponseBody) SetCode(v string) *DeleteSecretResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSecretResponseBody) SetData(v *DeleteSecretResponseBodyData) *DeleteSecretResponseBody {
	s.Data = v
	return s
}

func (s *DeleteSecretResponseBody) SetErrorCode(v string) *DeleteSecretResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteSecretResponseBody) SetMessage(v string) *DeleteSecretResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSecretResponseBody) SetRequestId(v string) *DeleteSecretResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSecretResponseBody) SetSuccess(v bool) *DeleteSecretResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteSecretResponseBody) SetTraceId(v string) *DeleteSecretResponseBody {
	s.TraceId = &v
	return s
}

type DeleteSecretResponseBodyData struct {
	// The ID of the deleted Secret.
	//
	// example:
	//
	// 16
	SecretId *int64 `json:"SecretId,omitempty" xml:"SecretId,omitempty"`
}

func (s DeleteSecretResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecretResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteSecretResponseBodyData) SetSecretId(v int64) *DeleteSecretResponseBodyData {
	s.SecretId = &v
	return s
}

type DeleteSecretResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSecretResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecretResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecretResponse) SetHeaders(v map[string]*string) *DeleteSecretResponse {
	s.Headers = v
	return s
}

func (s *DeleteSecretResponse) SetStatusCode(v int32) *DeleteSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSecretResponse) SetBody(v *DeleteSecretResponseBody) *DeleteSecretResponse {
	s.Body = v
	return s
}

type DeleteWebApplicationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DeleteWebApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWebApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteWebApplicationRequest) SetNamespaceId(v string) *DeleteWebApplicationRequest {
	s.NamespaceId = &v
	return s
}

type DeleteWebApplicationResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWebApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWebApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteWebApplicationResponse) SetHeaders(v map[string]*string) *DeleteWebApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteWebApplicationResponse) SetStatusCode(v int32) *DeleteWebApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWebApplicationResponse) SetBody(v *WebApplicationBody) *DeleteWebApplicationResponse {
	s.Body = v
	return s
}

type DeleteWebApplicationRevisionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DeleteWebApplicationRevisionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWebApplicationRevisionRequest) GoString() string {
	return s.String()
}

func (s *DeleteWebApplicationRevisionRequest) SetNamespaceId(v string) *DeleteWebApplicationRevisionRequest {
	s.NamespaceId = &v
	return s
}

type DeleteWebApplicationRevisionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationRevisionBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWebApplicationRevisionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWebApplicationRevisionResponse) GoString() string {
	return s.String()
}

func (s *DeleteWebApplicationRevisionResponse) SetHeaders(v map[string]*string) *DeleteWebApplicationRevisionResponse {
	s.Headers = v
	return s
}

func (s *DeleteWebApplicationRevisionResponse) SetStatusCode(v int32) *DeleteWebApplicationRevisionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWebApplicationRevisionResponse) SetBody(v *WebApplicationRevisionBody) *DeleteWebApplicationRevisionResponse {
	s.Body = v
	return s
}

type DeleteWebCustomDomainRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DeleteWebCustomDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWebCustomDomainRequest) GoString() string {
	return s.String()
}

func (s *DeleteWebCustomDomainRequest) SetNamespaceId(v string) *DeleteWebCustomDomainRequest {
	s.NamespaceId = &v
	return s
}

type DeleteWebCustomDomainResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebCustomDomainBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWebCustomDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWebCustomDomainResponse) GoString() string {
	return s.String()
}

func (s *DeleteWebCustomDomainResponse) SetHeaders(v map[string]*string) *DeleteWebCustomDomainResponse {
	s.Headers = v
	return s
}

func (s *DeleteWebCustomDomainResponse) SetStatusCode(v int32) *DeleteWebCustomDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWebCustomDomainResponse) SetBody(v *WebCustomDomainBody) *DeleteWebCustomDomainResponse {
	s.Body = v
	return s
}

type DeployApplicationRequest struct {
	// The Alibaba Cloud Resource Name (ARN) required for a RAM role to obtain images across accounts. For more information, see [Grant permissions across Alibaba Cloud accounts by using a RAM role](https://help.aliyun.com/document_detail/223585.html).
	//
	// example:
	//
	// acs:ram::123456789012****:role/adminrole
	AcrAssumeRoleArn *string `json:"AcrAssumeRoleArn,omitempty" xml:"AcrAssumeRoleArn,omitempty"`
	// The ID of Container Registry Enterprise Edition instance N. This parameter is required when the **ImageUrl*	- parameter is set to the URL of an image in an ACR Enterprise Edition instance.
	//
	// example:
	//
	// cri-xxxxxx
	AcrInstanceId *string `json:"AcrInstanceId,omitempty" xml:"AcrInstanceId,omitempty"`
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// Specifies whether to associate an EIP with the node pool. Take note of the following rules:
	//
	// 	- **true**: The EIP is associated with the application instance.
	//
	// 	- **false**: The EIP is not associated with the application instance.
	//
	// example:
	//
	// true
	AssociateEip *bool `json:"AssociateEip,omitempty" xml:"AssociateEip,omitempty"`
	// Specifies whether to automatically enable an auto scaling policy for the application. Take note of the following rules:
	//
	// 	- **true**: turns on Logon-free Sharing
	//
	// 	- **false**: turns off Logon-free Sharing
	//
	// example:
	//
	// true
	AutoEnableApplicationScalingRule *bool `json:"AutoEnableApplicationScalingRule,omitempty" xml:"AutoEnableApplicationScalingRule,omitempty"`
	// The interval between batches during a batch release. Unit: minutes.
	//
	// example:
	//
	// 10
	BatchWaitTime *int32 `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	// The description of the change order.
	//
	// example:
	//
	// Start the application
	ChangeOrderDesc *string `json:"ChangeOrderDesc,omitempty" xml:"ChangeOrderDesc,omitempty"`
	// The command that is used to start the image. The command must be an existing executable object in the container. Sample statements:
	//
	//     command:
	//
	//           - echo
	//
	//           - abc
	//
	//           - >
	//
	//           - file0
	//
	// In this example, the Command parameter is set to `Command="echo", CommandArgs=["abc", ">", "file0"]`.
	//
	// example:
	//
	// echo
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The parameters of the image startup command. The CommandArgs parameter specifies the parameters that are required for the **Command*	- parameter. You can specify the name in one of the following formats:
	//
	// `["a","b"]`
	//
	// In the preceding example, the CommandArgs parameter is set to `CommandArgs=["abc", ">", "file0"]`. The data type of `["abc", ">", "file0"]` must be an array of strings in the JSON format. This parameter is optional.
	//
	// example:
	//
	// ["a","b"]
	CommandArgs *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	// The description of the **ConfigMap*	- instance mounted to the application. Use configurations created on the Configuration Items page to configure containers. The following table describes the parameters that are used in the preceding statements.
	//
	// 	- **congfigMapId**: the ID of the ConfigMap instance. You can call the [ListNamespacedConfigMaps](https://help.aliyun.com/document_detail/176917.html) operation to obtain the ID.
	//
	// 	- **key**: the key.
	//
	// > You can use `sae-sys-configmap-all` to mount all keys.
	//
	// 	- **mountPath**: the mount path in the container.
	//
	// example:
	//
	// [{"configMapId":16,"key":"test","mountPath":"/tmp"}]
	ConfigMapMountDesc *string `json:"ConfigMapMountDesc,omitempty" xml:"ConfigMapMountDesc,omitempty"`
	Cpu                *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The custom mappings between hostnames and IP addresses in the container. Take note of the following rules:
	//
	// 	- **hostName**: the domain name or hostname.
	//
	// 	- **ip**: the IP address.
	//
	// example:
	//
	// [{"hostName":"samplehost","ip":"127.0.0.1"}]
	CustomHostAlias *string `json:"CustomHostAlias,omitempty" xml:"CustomHostAlias,omitempty"`
	// This parameter takes effect only for applications that are in the Stopped state. If you call the **DeployApplication*	- operation to manage a running application, the application is immediately redeployed.
	//
	// 	- **true*	- (default): specifies that the system immediately deploys the application, enables new configurations, and pulls application instances.
	//
	// 	- **false**: specifies that the system only enables the new configurations.
	//
	// example:
	//
	// true
	Deploy *string `json:"Deploy,omitempty" xml:"Deploy,omitempty"`
	Dotnet *string `json:"Dotnet,omitempty" xml:"Dotnet,omitempty"`
	// The version of the container, such as Ali-Tomcat, in which an application developed based on High-speed Service Framework (HSF) is deployed.
	//
	// example:
	//
	// 3.5.3
	EdasContainerVersion *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	// Indicates whether access to Application High Availability Service (AHAS) is enabled. Take note of the following rules:
	//
	// 	- **true**: Access to AHAS is enabled.
	//
	// 	- **false**: Access to AHAS is disabled.
	//
	// example:
	//
	// false
	EnableAhas *string `json:"EnableAhas,omitempty" xml:"EnableAhas,omitempty"`
	// Indicates whether canary release rules are enabled. Canary release rules apply only to applications in Spring Cloud and Dubbo frameworks. Take note of the following rules:
	//
	// 	- **true**: The canary release rules are enabled.
	//
	// 	- **false**: The canary release rules are disabled.
	//
	// example:
	//
	// false
	EnableGreyTagRoute *bool `json:"EnableGreyTagRoute,omitempty" xml:"EnableGreyTagRoute,omitempty"`
	EnableNewArms      *bool `json:"EnableNewArms,omitempty" xml:"EnableNewArms,omitempty"`
	// The environment variables. You can configure custom environment variables or reference a ConfigMap. If you want to reference a ConfigMap, you must first create a ConfigMap. For more information, see [CreateConfigMap](https://help.aliyun.com/document_detail/176914.html). Take note of the following rules:
	//
	// 	- Customize
	//
	//     	- **name**: the name of the environment variable.
	//
	//     	- **value**: the value of the environment variable.
	//
	// 	- Reference ConfigMap
	//
	//     	- **name**: the name of the environment variable. You can reference one or all keys. If you want to reference all keys, specify `sae-sys-configmap-all-<ConfigMap name>`. Example: `sae-sys-configmap-all-test1`.
	//
	//     	- **valueFrom**: the reference of the environment variable. Set the value to `configMapRef`.
	//
	//     	- **configMapId**: the ConfigMap ID.
	//
	//     	- **key**: the key. If you want to reference all keys, do not configure this parameter.
	//
	// example:
	//
	// [{"name":"envtmp","value":"0"}]
	Envs *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	// The ID of the corresponding Secret.
	//
	// example:
	//
	// 10
	ImagePullSecrets *string `json:"ImagePullSecrets,omitempty" xml:"ImagePullSecrets,omitempty"`
	// The URL of the image. This parameter is returned only if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// registry.cn-hangzhou.aliyuncs.com/sae_test/ali_sae_test:0.0.1
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// The arguments in the JAR package. The arguments are used to start the application container. The default startup command is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// -Xms4G -Xmx4G
	JarStartArgs *string `json:"JarStartArgs,omitempty" xml:"JarStartArgs,omitempty"`
	// The option settings in the JAR package. The settings are used to start the application container. The default startup command for application deployment is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// custom-option
	JarStartOptions *string `json:"JarStartOptions,omitempty" xml:"JarStartOptions,omitempty"`
	// The version of the Java development kit (JDK) on which the deployment package of the application depends. The following versions are supported:
	//
	// 	- **Open JDK 8**
	//
	// 	- **Open JDK 7**
	//
	// 	- **Dragonwell 11**
	//
	// 	- **Dragonwell 8**
	//
	// 	- **openjdk-8u191-jdk-alpine3.9**
	//
	// 	- **openjdk-7u201-jdk-alpine3.9**
	//
	// This parameter is not returned if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// Open JDK 8
	Jdk *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	// The logging configurations of Message Queue for Apache Kafka. Take note of the following rules:
	//
	// 	- **kafkaEndpoint**: the endpoint of the Message Queue for Apache Kafka API.
	//
	// 	- **kafkaInstanceId**: the ID of the Message Queue for Apache Kafka instance.
	//
	// 	- **kafkaConfigs**: One or more logging configurations of Message Queue for Apache Kafka. For information about sample values and parameters, see the request parameter **KafkaLogfileConfig*	- in this topic.
	//
	// example:
	//
	// {"kafkaEndpoint":"10.0.X.XXX:XXXX,10.0.X.XXX:XXXX,10.0.X.XXX:XXXX\\","kafkaInstanceId":"alikafka_pre-cn-7pp2l8kr****","kafkaConfigs":[{"logType":"file_log","logDir":"/tmp/a.log","kafkaTopic":"test2"},{"logType":"stdout","logDir":"","kafkaTopic":"test"}]}
	KafkaConfigs *string `json:"KafkaConfigs,omitempty" xml:"KafkaConfigs,omitempty"`
	// The details of the availability check that was performed on the container. If the container fails this health check multiple times, the system disables and restarts the container. You can use one of the following methods to perform the health check:
	//
	// 	- Example of **exec**: `{"exec":{"command":["sh","-c","cat/home/admin/start.sh"]},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds":2}`
	//
	// 	- Sample code of the **httpGet*	- method: `{"httpGet":{"path":"/","port":18091,"scheme":"HTTP","isContainKeyWord":true,"keyWord":"SAE"},"initialDelaySeconds":11,"periodSeconds":10,"timeoutSeconds":1}`
	//
	// 	- Sample code of the **tcpSocket*	- method: `{"tcpSocket":{"port":18091},"initialDelaySeconds":11,"periodSeconds":10,"timeoutSeconds":1}`
	//
	// > You can use only one method to perform the health check.
	//
	// The following table describes the parameters that are used in the preceding statements.
	//
	// 	- **exec.command**: the health check command.
	//
	// 	- **httpGet.path**: the request path.
	//
	// 	- **httpGet.scheme**: the protocol that is used to perform the health check. Valid values: **HTTP*	- and **HTTPS**.
	//
	// 	- **httpGet.isContainKeyWord**: indicates whether the response contains keywords. Valid values: **true*	- and **false**. If this field is not returned, the advanced settings are not used.
	//
	// 	- **httpGet.keyWord**: the custom keyword. This parameter is available only if the **isContainKeyWord*	- field is returned.
	//
	// 	- **tcpSocket.port**: the port that is used to check the status of TCP connections.
	//
	// 	- **initialDelaySeconds**: the delay of the health check. Default value: 10. Unit: seconds.
	//
	// 	- **periodSeconds**: the interval at which health checks are performed. Default value: 30. Unit: seconds.
	//
	// 	- **timeoutSeconds**: the timeout period of the health check. Default value: 1. Unit: seconds. If you set this parameter to 0 or leave this parameter empty, the timeout period is automatically set to 1 second.
	//
	// example:
	//
	// {"exec":{"command":["sleep","5s"]},"initialDelaySeconds":10,"timeoutSeconds":11}
	Liveness *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	Memory   *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The Nacos registry. Valid values:
	//
	// 	- **0**: SAE built-in Nacos registry
	//
	// 	- **1**: self-managed Nacos registry
	//
	// 	- **2*	- : MSE Nacos registry
	//
	// example:
	//
	// "0"
	MicroRegistration       *string `json:"MicroRegistration,omitempty" xml:"MicroRegistration,omitempty"`
	MicroRegistrationConfig *string `json:"MicroRegistrationConfig,omitempty" xml:"MicroRegistrationConfig,omitempty"`
	// The percentage of the minimum number of available instances. Take note of the following rules:
	//
	// 	- If you set the value to **-1**, the minimum number of available instances is not determined based on this parameter. Default value: -1.
	//
	// 	- If you set the value to a number **from 0 to 100**, the minimum number of available instances is calculated by using the following formula: Current number of instances × (Value of MinReadyInstanceRatio × 100%). The value is the nearest integer rounded up from the calculated result. For example, if the percentage is set to **50**% and five instances are available, the minimum number of available instances is 3.
	//
	// > When both **MinReadyInstance*	- and **MinReadyInstanceRatio*	- are specified and **MinReadyInstanceRatio*	- is set to a number from 0 to 100, the value of **MinReadyInstanceRatio***	- takes precedence. For example, if **MinReadyInstances*	- is set to **5, and **MinReadyInstanceRatio*	- is set to **50**, the minimum number of available instances is set to the nearest integer rounded up from the calculated result of the following formula: Current number of instances × **50%**.
	//
	// example:
	//
	// -1
	MinReadyInstanceRatio *int32 `json:"MinReadyInstanceRatio,omitempty" xml:"MinReadyInstanceRatio,omitempty"`
	// The minimum number of available instances. Special values:
	//
	// 	- If you set the value to **0**, business interruptions occur when the application is updated.
	//
	// 	- If you set the value to \\*\\*-1\\*\\*, the minimum number of available instances is automatically set to a system-recommended value. The value is the nearest integer to which the calculated result of the following formula is rounded up: Current number of instances × 25%. For example, if five instances are available, the minimum number of available instances is calculated by using the following formula: 5 × 25% = 1.25. In this case, the minimum number of available instances is 2.
	//
	// > Make sure that at least one instance is available during application deployment and rollback to prevent business interruptions.
	//
	// example:
	//
	// 1
	MinReadyInstances *int32 `json:"MinReadyInstances,omitempty" xml:"MinReadyInstances,omitempty"`
	// The configurations for mounting the NAS file system. After the application is created, you may want to call other operations to manage the application. If you do not want to change the NAS configurations in these subsequent operations, you can omit the **MountDesc*	- parameter in the requests. If you want to unmount the NAS file system, you must set the **MountDesc*	- values in the subsequent requests to an empty string ("").
	//
	// example:
	//
	// [{mountPath: "/tmp", nasPath: "/"}]
	MountDesc *string `json:"MountDesc,omitempty" xml:"MountDesc,omitempty"`
	// The mount target of the NAS file system in the VPC where the application is deployed. If you do not need to modify this configuration during the deployment, configure the **MountHost*	- parameter only in the first request. You do not need to include this parameter in subsequent requests. If you need to remove this configuration, leave the **MountHost*	- parameter empty in the request.
	//
	// example:
	//
	// 10d3b4bc9****.com
	MountHost *string `json:"MountHost,omitempty" xml:"MountHost,omitempty"`
	// The configurations of mounting the NAS file system. Take note of the following rules:
	//
	// 	- **mountPath**: the mount path of the container.
	//
	// 	- **readOnly**: If you set the value to **false**, the application has the read and write permissions.
	//
	// 	- **nasId**: the ID of the NAS file system.
	//
	// 	- **mountDomain**: the domain name of the mount target. For more information, see [DescribeMountTargets](https://help.aliyun.com/document_detail/62626.html).
	//
	// 	- **nasPath**: the directory in the NAS file system.
	//
	// example:
	//
	// [{"mountPath":"/test1","readOnly":false,"nasId":"nasId1","mountDomain":"nasId1.cn-shenzhen.nas.aliyuncs.com","nasPath":"/test1"},{"nasId":"nasId2","mountDomain":"nasId2.cn-shenzhen.nas.aliyuncs.com","readOnly":false,"nasPath":"/test2","mountPath":"/test2"}]
	NasConfigs *string `json:"NasConfigs,omitempty" xml:"NasConfigs,omitempty"`
	// The ID of the Apsara File Storage NAS file system. After the application is created, you may want to call other operations to manage the application. If you do not want to change the NAS configurations in these subsequent operations, you can omit the **NasId*	- parameter in the requests. If you want to unmount the NAS file system, you must set the **NasId*	- values in the subsequent requests to an empty string ("").
	//
	// example:
	//
	// 10d3b4****
	NasId *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	// The AccessKey ID that is used to read data from and write data to Object Storage Service (OSS) buckets.
	//
	// example:
	//
	// xxxxxx
	OssAkId *string `json:"OssAkId,omitempty" xml:"OssAkId,omitempty"`
	// The AccessKey secret that is used to read data from and write data to OSS buckets.
	//
	// example:
	//
	// xxxxxx
	OssAkSecret *string `json:"OssAkSecret,omitempty" xml:"OssAkSecret,omitempty"`
	// Information of the Object Storage Service (OSS) bucket mounted to the application. The following table describes the parameters that are used in the preceding statements.
	//
	// 	- **bucketName**: the name of the OSS bucket.
	//
	// 	- **bucketPath**: the directory or object in OSS. If the specified directory or object does not exist, an error is returned.
	//
	// 	- **mountPath**: the directory of the container in SAE. If the path already exists, the newly specified path overwrites the previous one. If the path does not exist, it is created.
	//
	// 	- **readOnly**: specifies whether to only allow the container path to read data from the OSS directory. Valid values:
	//
	//     	- **true**: The container path only has read permission on the OSS directory.
	//
	//     	- **false**: The application has read and write permissions.
	//
	// example:
	//
	// [{"bucketName": "oss-bucket", "bucketPath": "data/user.data", "mountPath": "/usr/data/user.data", "readOnly": true}]
	OssMountDescs *string `json:"OssMountDescs,omitempty" xml:"OssMountDescs,omitempty"`
	// example:
	//
	// FatJar
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// The address of the deployment package. This parameter is required when the **PackageType*	- parameter is set to **FatJar**, **War**, or **PythonZip**.
	//
	// example:
	//
	// http://myoss.oss-cn-hangzhou.aliyuncs.com/my-buc/2019-06-30/****.jar
	PackageUrl *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	// The version of the deployment package. This parameter is required when the **PackageType*	- parameter is set to **FatJar**, **War**, or **PythonZip**.
	//
	// example:
	//
	// 1.0.1
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	// example:
	//
	// PHP-FPM 7.0
	Php *string `json:"Php,omitempty" xml:"Php,omitempty"`
	// The path on which the PHP configuration file for application monitoring is mounted. Make sure that the PHP server loads the configuration file. SAE automatically generates the corresponding configuration file. No manual operations are required.
	//
	// example:
	//
	// /usr/local/etc/php/conf.d/arms.ini
	PhpArmsConfigLocation *string `json:"PhpArmsConfigLocation,omitempty" xml:"PhpArmsConfigLocation,omitempty"`
	// The details of the PHP configuration file.
	//
	// example:
	//
	// k1=v1
	PhpConfig *string `json:"PhpConfig,omitempty" xml:"PhpConfig,omitempty"`
	// The path on which the PHP configuration file for application startup is mounted. Make sure that the PHP server uses this configuration file during the startup.
	//
	// example:
	//
	// /usr/local/etc/php/php.ini
	PhpConfigLocation *string `json:"PhpConfigLocation,omitempty" xml:"PhpConfigLocation,omitempty"`
	// The script that is run immediately after the container is started. Example: `{"exec":{"command":["sh","-c","echo hello"\\]}}`
	//
	// example:
	//
	// {"exec":{"command":["sh","-c","echo hello"]}}
	PostStart *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	// The script that is run before the container is stopped. Example: `{"exec":{"command":["sh","-c","echo hello"\\]}}`
	//
	// example:
	//
	// {"exec":{"command":["sh","-c","echo hello"]}}
	PreStop *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	// The configurations of Kubernetes Service-based service registration and discovery. Take note of the following rules:
	//
	// 	- **serviceName**: the name of the Alibaba Cloud service. Format: `<Custom content>-<Namespace ID>`. `-<Namespace ID>` is automatically specified based on the namespace in which an application resides and cannot be changed. For example, if you select the default namespace in the China (Beijing) region, `-cn-beijing-default` is automatically specified.
	//
	// 	- **namespaceId**: the namespace ID.
	//
	// 	- **portAndProtocol**: the port number and protocol. Valid values of the port number: 1 to 65535. Valid values of the protocol: **TCP*	- and **UDP**.
	//
	// 	- **enable**: enables the Kubernetes Service-based registration and discovery feature.
	//
	// example:
	//
	// {"serviceName":"bwm-poc-sc-gateway-cn-beijing-front","namespaceId":"cn-beijing:front","portAndProtocol":{"18012":"TCP"},"enable":true}
	PvtzDiscoverySvc *string `json:"PvtzDiscoverySvc,omitempty" xml:"PvtzDiscoverySvc,omitempty"`
	// The Python environment. Set the value to **PYTHON 3.9.15**.
	//
	// example:
	//
	// PYTHON 3.9.15
	Python *string `json:"Python,omitempty" xml:"Python,omitempty"`
	// The configurations for installing custom module dependencies. By default, the dependencies defined by the requirements.txt file in the root directory are installed. If the package does not contain this file and you do not configure custom dependencies in the package, specify the dependencies that you want to install in the text box.
	//
	// example:
	//
	// Flask==2.0
	PythonModules *string `json:"PythonModules,omitempty" xml:"PythonModules,omitempty"`
	// The details of the health check that was performed on the container. If the container fails this health check multiple times, the system disables and restarts the container. Containers that fail health checks cannot receive traffic from Server Load Balancer (SLB) instances. You can use the **exec**, **httpGet**, or **tcpSocket*	- method to perform health checks. For more information, see the description of the **Liveness*	- parameter.
	//
	// > You can use only one method to perform the health check.
	//
	// example:
	//
	// {"exec":{"command":["sleep","6s"]},"initialDelaySeconds":15,"timeoutSeconds":12}
	Readiness       *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	Replicas        *int32  `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	ServiceTags     *string `json:"ServiceTags,omitempty" xml:"ServiceTags,omitempty"`
	// The logging configurations of Log Service.
	//
	// 	- To use Log Service resources that are automatically created by SAE, set this parameter to `[{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]`.
	//
	// 	- To use custom Log Service resources, set this parameter to `[{"projectName":"test-sls","logType":"stdout","logDir":"","logstoreName":"sae","logtailName":""},{"projectName":"test","logDir":"/tmp/a.log","logstoreName":"sae","logtailName":""}]`.
	//
	// The following table describes the parameters that are used in the preceding statements.
	//
	// 	- **projectName**: the name of the Log Service project.
	//
	// 	- **logDir**: the path in which logs are stored.
	//
	// 	- **logType**: the log type. **stdout**: the standard output log of the container. You can specify only one stdout value for this parameter. If you leave this parameter empty, file logs are collected.
	//
	// 	- **logstoreName**: the name of the Logstore in Log Service.
	//
	// 	- **logtailName**: the name of the Logtail configuration in Log Service. If you do not configure this parameter, a new Logtail configuration is created.
	//
	// If you do not need to modify the logging configurations when you deploy the application, configure the **SlsConfigs*	- parameter only in the first request. You do not need to include this parameter in subsequent requests. If you no longer need to use Log Service, leave the **SlsConfigs*	- parameter empty in the request.
	//
	// > A Log Service project that is automatically created by SAE when you create an application is deleted when the application is deleted. Therefore, when you create an application, you cannot select a Log Service project that is automatically created by SAE for log collection.
	//
	// example:
	//
	// [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]
	SlsConfigs *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	// The timeout period for a graceful shutdown. Default value: 30. Unit: seconds. Valid values: 1 to 300.
	//
	// example:
	//
	// 10
	TerminationGracePeriodSeconds *int32 `json:"TerminationGracePeriodSeconds,omitempty" xml:"TerminationGracePeriodSeconds,omitempty"`
	// The time zone. Default value: **Asia/Shanghai**.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The Tomcat configuration. If you want to cancel this configuration, set this parameter to "" or "{}". The following variables are included in the configuration: Take note of the following rules:
	//
	// 	- **port**: the port number. The port number ranges from 1024 to 65535. Though the admin permissions are configured for the container, the root permissions are required to perform operations on ports whose number is smaller than 1024. Enter a value that ranges from 1025 to 65535 because the container has only the admin permissions. If you do not specify this parameter, the default port number 8080 is used.
	//
	// 	- **contextPath**: the path. Default value: /. This value indicates the root directory.
	//
	// 	- **maxThreads**: the maximum number of connections in the connection pool. Default value: 400.
	//
	// 	- **uriEncoding**: the URI encoding scheme in the Tomcat container. Valid values: UTF-8, ISO-8859-1, GBK, and GB2312.***********	- If you do not specify this parameter, the default value **ISO-8859-1*	- is used.
	//
	// 	- **useBodyEncoding**: specifies whether to use the encoding scheme specified in the request body for URI query parameters. Default value: true.
	//
	// example:
	//
	// {"port":8080,"contextPath":"/","maxThreads":400,"uriEncoding":"ISO-8859-1","useBodyEncodingForUri":true}
	TomcatConfig *string `json:"TomcatConfig,omitempty" xml:"TomcatConfig,omitempty"`
	// The deployment policy. If the minimum number of available instances is 1, the value of the **UpdateStrategy*	- parameter is an empty string (""). If the minimum number of available instances is greater than 1, the following strategies can be configured:
	//
	// 	- The application is deployed on an instance. The remaining instances are automatically classified into two release batches whose interval is set to 1. In this case, the parameter is set to `{"type":"GrayBatchUpdate","batchUpdate":{"batch":2,"releaseType":"auto","batchWaitTime":1},"grayUpdate":{"gray":1}}`.
	//
	// 	- The application is deployed on an instance. The remaining instances are manually classified into two release batches. In this case, the parameter is set to `{"type":"GrayBatchUpdate","batchUpdate":{"batch":2,"releaseType":"manual"},"grayUpdate":{"gray":1}}`.
	//
	// 	- All instances are automatically classified into two release batches. The application is deployed on the instances of the two batches in parallel. In this case, the parameter is set to `{"type":"BatchUpdate","batchUpdate":{"batch":2,"releaseType":"auto","batchWaitTime":0}}`
	//
	// The following table describes the parameters that are used in the preceding statements.
	//
	// 	- **type**: the type of the release policy. Valid values: **GrayBatchUpdate*	- and **BatchUpdate**.
	//
	// 	- **batchUpdate**: the phased release policy.
	//
	//     	- **batch**: the number of release batches.
	//
	//     	- **releaseType**: the processing method for the batches. Valid values: **auto*	- and **manual**.
	//
	//     	- **batchWaitTime**: the interval between release batches. Unit: seconds.
	//
	// 	- **grayUpdate**: the number of release batches in the phased release after a canary release. This parameter is returned only if the **type*	- parameter is set to **GrayBatchUpdate**.
	//
	// example:
	//
	// {"type":"GrayBatchUpdate","batchUpdate":{"batch":2,"releaseType":"auto","batchWaitTime":1},"grayUpdate":{"gray":1}}
	UpdateStrategy *string `json:"UpdateStrategy,omitempty" xml:"UpdateStrategy,omitempty"`
	VSwitchId      *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The startup command of the WAR package. For information about how to configure the startup command, see [Configure startup commands](https://help.aliyun.com/document_detail/96677.html).
	//
	// example:
	//
	// CATALINA_OPTS=\\"$CATALINA_OPTS $Options\\" catalina.sh run
	WarStartOptions *string `json:"WarStartOptions,omitempty" xml:"WarStartOptions,omitempty"`
	// The version of the Tomcat container on which the deployment package depends. Valid values:
	//
	// 	- **apache-tomcat-7.0.91**
	//
	// 	- **apache-tomcat-8.5.42**
	//
	// This parameter is not returned if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// apache-tomcat-7.0.91
	WebContainer *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
}

func (s DeployApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeployApplicationRequest) SetAcrAssumeRoleArn(v string) *DeployApplicationRequest {
	s.AcrAssumeRoleArn = &v
	return s
}

func (s *DeployApplicationRequest) SetAcrInstanceId(v string) *DeployApplicationRequest {
	s.AcrInstanceId = &v
	return s
}

func (s *DeployApplicationRequest) SetAppId(v string) *DeployApplicationRequest {
	s.AppId = &v
	return s
}

func (s *DeployApplicationRequest) SetAssociateEip(v bool) *DeployApplicationRequest {
	s.AssociateEip = &v
	return s
}

func (s *DeployApplicationRequest) SetAutoEnableApplicationScalingRule(v bool) *DeployApplicationRequest {
	s.AutoEnableApplicationScalingRule = &v
	return s
}

func (s *DeployApplicationRequest) SetBatchWaitTime(v int32) *DeployApplicationRequest {
	s.BatchWaitTime = &v
	return s
}

func (s *DeployApplicationRequest) SetChangeOrderDesc(v string) *DeployApplicationRequest {
	s.ChangeOrderDesc = &v
	return s
}

func (s *DeployApplicationRequest) SetCommand(v string) *DeployApplicationRequest {
	s.Command = &v
	return s
}

func (s *DeployApplicationRequest) SetCommandArgs(v string) *DeployApplicationRequest {
	s.CommandArgs = &v
	return s
}

func (s *DeployApplicationRequest) SetConfigMapMountDesc(v string) *DeployApplicationRequest {
	s.ConfigMapMountDesc = &v
	return s
}

func (s *DeployApplicationRequest) SetCpu(v int32) *DeployApplicationRequest {
	s.Cpu = &v
	return s
}

func (s *DeployApplicationRequest) SetCustomHostAlias(v string) *DeployApplicationRequest {
	s.CustomHostAlias = &v
	return s
}

func (s *DeployApplicationRequest) SetDeploy(v string) *DeployApplicationRequest {
	s.Deploy = &v
	return s
}

func (s *DeployApplicationRequest) SetDotnet(v string) *DeployApplicationRequest {
	s.Dotnet = &v
	return s
}

func (s *DeployApplicationRequest) SetEdasContainerVersion(v string) *DeployApplicationRequest {
	s.EdasContainerVersion = &v
	return s
}

func (s *DeployApplicationRequest) SetEnableAhas(v string) *DeployApplicationRequest {
	s.EnableAhas = &v
	return s
}

func (s *DeployApplicationRequest) SetEnableGreyTagRoute(v bool) *DeployApplicationRequest {
	s.EnableGreyTagRoute = &v
	return s
}

func (s *DeployApplicationRequest) SetEnableNewArms(v bool) *DeployApplicationRequest {
	s.EnableNewArms = &v
	return s
}

func (s *DeployApplicationRequest) SetEnvs(v string) *DeployApplicationRequest {
	s.Envs = &v
	return s
}

func (s *DeployApplicationRequest) SetImagePullSecrets(v string) *DeployApplicationRequest {
	s.ImagePullSecrets = &v
	return s
}

func (s *DeployApplicationRequest) SetImageUrl(v string) *DeployApplicationRequest {
	s.ImageUrl = &v
	return s
}

func (s *DeployApplicationRequest) SetJarStartArgs(v string) *DeployApplicationRequest {
	s.JarStartArgs = &v
	return s
}

func (s *DeployApplicationRequest) SetJarStartOptions(v string) *DeployApplicationRequest {
	s.JarStartOptions = &v
	return s
}

func (s *DeployApplicationRequest) SetJdk(v string) *DeployApplicationRequest {
	s.Jdk = &v
	return s
}

func (s *DeployApplicationRequest) SetKafkaConfigs(v string) *DeployApplicationRequest {
	s.KafkaConfigs = &v
	return s
}

func (s *DeployApplicationRequest) SetLiveness(v string) *DeployApplicationRequest {
	s.Liveness = &v
	return s
}

func (s *DeployApplicationRequest) SetMemory(v int32) *DeployApplicationRequest {
	s.Memory = &v
	return s
}

func (s *DeployApplicationRequest) SetMicroRegistration(v string) *DeployApplicationRequest {
	s.MicroRegistration = &v
	return s
}

func (s *DeployApplicationRequest) SetMicroRegistrationConfig(v string) *DeployApplicationRequest {
	s.MicroRegistrationConfig = &v
	return s
}

func (s *DeployApplicationRequest) SetMinReadyInstanceRatio(v int32) *DeployApplicationRequest {
	s.MinReadyInstanceRatio = &v
	return s
}

func (s *DeployApplicationRequest) SetMinReadyInstances(v int32) *DeployApplicationRequest {
	s.MinReadyInstances = &v
	return s
}

func (s *DeployApplicationRequest) SetMountDesc(v string) *DeployApplicationRequest {
	s.MountDesc = &v
	return s
}

func (s *DeployApplicationRequest) SetMountHost(v string) *DeployApplicationRequest {
	s.MountHost = &v
	return s
}

func (s *DeployApplicationRequest) SetNasConfigs(v string) *DeployApplicationRequest {
	s.NasConfigs = &v
	return s
}

func (s *DeployApplicationRequest) SetNasId(v string) *DeployApplicationRequest {
	s.NasId = &v
	return s
}

func (s *DeployApplicationRequest) SetOssAkId(v string) *DeployApplicationRequest {
	s.OssAkId = &v
	return s
}

func (s *DeployApplicationRequest) SetOssAkSecret(v string) *DeployApplicationRequest {
	s.OssAkSecret = &v
	return s
}

func (s *DeployApplicationRequest) SetOssMountDescs(v string) *DeployApplicationRequest {
	s.OssMountDescs = &v
	return s
}

func (s *DeployApplicationRequest) SetPackageType(v string) *DeployApplicationRequest {
	s.PackageType = &v
	return s
}

func (s *DeployApplicationRequest) SetPackageUrl(v string) *DeployApplicationRequest {
	s.PackageUrl = &v
	return s
}

func (s *DeployApplicationRequest) SetPackageVersion(v string) *DeployApplicationRequest {
	s.PackageVersion = &v
	return s
}

func (s *DeployApplicationRequest) SetPhp(v string) *DeployApplicationRequest {
	s.Php = &v
	return s
}

func (s *DeployApplicationRequest) SetPhpArmsConfigLocation(v string) *DeployApplicationRequest {
	s.PhpArmsConfigLocation = &v
	return s
}

func (s *DeployApplicationRequest) SetPhpConfig(v string) *DeployApplicationRequest {
	s.PhpConfig = &v
	return s
}

func (s *DeployApplicationRequest) SetPhpConfigLocation(v string) *DeployApplicationRequest {
	s.PhpConfigLocation = &v
	return s
}

func (s *DeployApplicationRequest) SetPostStart(v string) *DeployApplicationRequest {
	s.PostStart = &v
	return s
}

func (s *DeployApplicationRequest) SetPreStop(v string) *DeployApplicationRequest {
	s.PreStop = &v
	return s
}

func (s *DeployApplicationRequest) SetPvtzDiscoverySvc(v string) *DeployApplicationRequest {
	s.PvtzDiscoverySvc = &v
	return s
}

func (s *DeployApplicationRequest) SetPython(v string) *DeployApplicationRequest {
	s.Python = &v
	return s
}

func (s *DeployApplicationRequest) SetPythonModules(v string) *DeployApplicationRequest {
	s.PythonModules = &v
	return s
}

func (s *DeployApplicationRequest) SetReadiness(v string) *DeployApplicationRequest {
	s.Readiness = &v
	return s
}

func (s *DeployApplicationRequest) SetReplicas(v int32) *DeployApplicationRequest {
	s.Replicas = &v
	return s
}

func (s *DeployApplicationRequest) SetSecurityGroupId(v string) *DeployApplicationRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DeployApplicationRequest) SetServiceTags(v string) *DeployApplicationRequest {
	s.ServiceTags = &v
	return s
}

func (s *DeployApplicationRequest) SetSlsConfigs(v string) *DeployApplicationRequest {
	s.SlsConfigs = &v
	return s
}

func (s *DeployApplicationRequest) SetTerminationGracePeriodSeconds(v int32) *DeployApplicationRequest {
	s.TerminationGracePeriodSeconds = &v
	return s
}

func (s *DeployApplicationRequest) SetTimezone(v string) *DeployApplicationRequest {
	s.Timezone = &v
	return s
}

func (s *DeployApplicationRequest) SetTomcatConfig(v string) *DeployApplicationRequest {
	s.TomcatConfig = &v
	return s
}

func (s *DeployApplicationRequest) SetUpdateStrategy(v string) *DeployApplicationRequest {
	s.UpdateStrategy = &v
	return s
}

func (s *DeployApplicationRequest) SetVSwitchId(v string) *DeployApplicationRequest {
	s.VSwitchId = &v
	return s
}

func (s *DeployApplicationRequest) SetWarStartOptions(v string) *DeployApplicationRequest {
	s.WarStartOptions = &v
	return s
}

func (s *DeployApplicationRequest) SetWebContainer(v string) *DeployApplicationRequest {
	s.WebContainer = &v
	return s
}

type DeployApplicationResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response.
	Data *DeployApplicationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Take note of the following rules:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 01CF26C7-00A3-4AA6-BA76-7E95F2A3***
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application deployment is successful. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// ac1a0b2215622246421415014e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DeployApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeployApplicationResponseBody) SetCode(v string) *DeployApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeployApplicationResponseBody) SetData(v *DeployApplicationResponseBodyData) *DeployApplicationResponseBody {
	s.Data = v
	return s
}

func (s *DeployApplicationResponseBody) SetErrorCode(v string) *DeployApplicationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeployApplicationResponseBody) SetMessage(v string) *DeployApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeployApplicationResponseBody) SetRequestId(v string) *DeployApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeployApplicationResponseBody) SetSuccess(v bool) *DeployApplicationResponseBody {
	s.Success = &v
	return s
}

func (s *DeployApplicationResponseBody) SetTraceId(v string) *DeployApplicationResponseBody {
	s.TraceId = &v
	return s
}

type DeployApplicationResponseBodyData struct {
	// The application ID.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the change order. It can be used to query the task status.
	//
	// example:
	//
	// 01db03d3-3ee9-48b3-b3d0-dfce2d88****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	// Specifies whether approval is required when a RAM user performs release. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsNeedApproval *bool `json:"IsNeedApproval,omitempty" xml:"IsNeedApproval,omitempty"`
}

func (s DeployApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeployApplicationResponseBodyData) SetAppId(v string) *DeployApplicationResponseBodyData {
	s.AppId = &v
	return s
}

func (s *DeployApplicationResponseBodyData) SetChangeOrderId(v string) *DeployApplicationResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

func (s *DeployApplicationResponseBodyData) SetIsNeedApproval(v bool) *DeployApplicationResponseBodyData {
	s.IsNeedApproval = &v
	return s
}

type DeployApplicationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeployApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeployApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeployApplicationResponse) SetHeaders(v map[string]*string) *DeployApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeployApplicationResponse) SetStatusCode(v int32) *DeployApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeployApplicationResponse) SetBody(v *DeployApplicationResponseBody) *DeployApplicationResponse {
	s.Body = v
	return s
}

type DescribeAppServiceDetailRequest struct {
	// 6dcc8c9e-d3da-478a-a066-86dcf820\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// 6dcc8c9e-d3da-478a-a066-86dcf820****
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	NacosInstanceId  *string `json:"NacosInstanceId,omitempty" xml:"NacosInstanceId,omitempty"`
	NacosNamespaceId *string `json:"NacosNamespaceId,omitempty" xml:"NacosNamespaceId,omitempty"`
	// springCloud
	//
	// example:
	//
	// springCloud
	ServiceGroup *string `json:"ServiceGroup,omitempty" xml:"ServiceGroup,omitempty"`
	// edas.service.provider
	//
	// example:
	//
	// edas.service.provider
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// springCloud
	//
	// example:
	//
	// springCloud
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// 1.0.0
	//
	// example:
	//
	// 1.0.0
	ServiceVersion *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
}

func (s DescribeAppServiceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppServiceDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppServiceDetailRequest) SetAppId(v string) *DescribeAppServiceDetailRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppServiceDetailRequest) SetNacosInstanceId(v string) *DescribeAppServiceDetailRequest {
	s.NacosInstanceId = &v
	return s
}

func (s *DescribeAppServiceDetailRequest) SetNacosNamespaceId(v string) *DescribeAppServiceDetailRequest {
	s.NacosNamespaceId = &v
	return s
}

func (s *DescribeAppServiceDetailRequest) SetServiceGroup(v string) *DescribeAppServiceDetailRequest {
	s.ServiceGroup = &v
	return s
}

func (s *DescribeAppServiceDetailRequest) SetServiceName(v string) *DescribeAppServiceDetailRequest {
	s.ServiceName = &v
	return s
}

func (s *DescribeAppServiceDetailRequest) SetServiceType(v string) *DescribeAppServiceDetailRequest {
	s.ServiceType = &v
	return s
}

func (s *DescribeAppServiceDetailRequest) SetServiceVersion(v string) *DescribeAppServiceDetailRequest {
	s.ServiceVersion = &v
	return s
}

type DescribeAppServiceDetailResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// - **2xx**: indicates that the call was successful.
	//
	// - **3xx**: indicates that the call was redirected.
	//
	// - **4xx**: indicates that the call failed.
	//
	// - **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DescribeAppServiceDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned error code. Valid values:
	//
	// - If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// - If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned information.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B2C7874F-F109-5B34-8618-2C10BBA2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the meta data was obtained. Valid values:
	//
	// 	- **true**: The metadata was obtained.
	//
	// 	- **false**: The metadata failed to be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// 0b16399316402420740034918e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeAppServiceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppServiceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppServiceDetailResponseBody) SetCode(v string) *DescribeAppServiceDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBody) SetData(v *DescribeAppServiceDetailResponseBodyData) *DescribeAppServiceDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAppServiceDetailResponseBody) SetErrorCode(v string) *DescribeAppServiceDetailResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBody) SetMessage(v string) *DescribeAppServiceDetailResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBody) SetRequestId(v string) *DescribeAppServiceDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBody) SetSuccess(v bool) *DescribeAppServiceDetailResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBody) SetTraceId(v string) *DescribeAppServiceDetailResponseBody {
	s.TraceId = &v
	return s
}

type DescribeAppServiceDetailResponseBodyData struct {
	// The name of the Dubbo application.
	//
	// example:
	//
	// service-consumer
	DubboApplicationName *string `json:"DubboApplicationName,omitempty" xml:"DubboApplicationName,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// cn-zhangjiakou-micro-service-******
	EdasAppName *string `json:"EdasAppName,omitempty" xml:"EdasAppName,omitempty"`
	// The group to which the service belongs. You can create a custom group.
	//
	// example:
	//
	// springCloud
	Group *string `json:"Group,omitempty" xml:"Group,omitempty"`
	// The metadata. Example: `{side: "provider", port: "18081", preserved: {register: {source: "SPRING_CLOUD"}},…}`.
	//
	// example:
	//
	// {side: "provider", port: "18081", preserved: {register: {source: "SPRING_CLOUD"}},…}
	Metadata map[string]interface{} `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	// The methods.
	Methods []*DescribeAppServiceDetailResponseBodyDataMethods `json:"Methods,omitempty" xml:"Methods,omitempty" type:"Repeated"`
	// The name of the service.
	//
	// example:
	//
	// service-provider
	ServiceName     *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServicePorts    []*int64  `json:"ServicePorts,omitempty" xml:"ServicePorts,omitempty" type:"Repeated"`
	ServiceProtocol *string   `json:"ServiceProtocol,omitempty" xml:"ServiceProtocol,omitempty"`
	ServiceTags     []*string `json:"ServiceTags,omitempty" xml:"ServiceTags,omitempty" type:"Repeated"`
	// The type of the service. Valid values:
	//
	// 	- **dubbo**
	//
	// 	- **springCloud**
	//
	// example:
	//
	// springCloud
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// The name of the Spring Cloud application.
	//
	// example:
	//
	// service-provider
	SpringApplicationName *string `json:"SpringApplicationName,omitempty" xml:"SpringApplicationName,omitempty"`
	// The version of the service. You can create a custom version.
	//
	// example:
	//
	// 1.0.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAppServiceDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppServiceDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAppServiceDetailResponseBodyData) SetDubboApplicationName(v string) *DescribeAppServiceDetailResponseBodyData {
	s.DubboApplicationName = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetEdasAppName(v string) *DescribeAppServiceDetailResponseBodyData {
	s.EdasAppName = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetGroup(v string) *DescribeAppServiceDetailResponseBodyData {
	s.Group = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetMetadata(v map[string]interface{}) *DescribeAppServiceDetailResponseBodyData {
	s.Metadata = v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetMethods(v []*DescribeAppServiceDetailResponseBodyDataMethods) *DescribeAppServiceDetailResponseBodyData {
	s.Methods = v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetServiceName(v string) *DescribeAppServiceDetailResponseBodyData {
	s.ServiceName = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetServicePorts(v []*int64) *DescribeAppServiceDetailResponseBodyData {
	s.ServicePorts = v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetServiceProtocol(v string) *DescribeAppServiceDetailResponseBodyData {
	s.ServiceProtocol = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetServiceTags(v []*string) *DescribeAppServiceDetailResponseBodyData {
	s.ServiceTags = v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetServiceType(v string) *DescribeAppServiceDetailResponseBodyData {
	s.ServiceType = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetSpringApplicationName(v string) *DescribeAppServiceDetailResponseBodyData {
	s.SpringApplicationName = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyData) SetVersion(v string) *DescribeAppServiceDetailResponseBodyData {
	s.Version = &v
	return s
}

type DescribeAppServiceDetailResponseBodyDataMethods struct {
	// The class to which the method belongs.
	//
	// example:
	//
	// com.serverless.sae.controller.EchoController
	MethodController *string `json:"MethodController,omitempty" xml:"MethodController,omitempty"`
	// The name of the method.
	//
	// example:
	//
	// echo
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The details of the method.
	//
	// example:
	//
	// description
	NameDetail *string `json:"NameDetail,omitempty" xml:"NameDetail,omitempty"`
	// The definition of the parameter.
	ParameterDefinitions []*DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions `json:"ParameterDefinitions,omitempty" xml:"ParameterDefinitions,omitempty" type:"Repeated"`
	// The details of the parameters.
	ParameterDetails []*string `json:"ParameterDetails,omitempty" xml:"ParameterDetails,omitempty" type:"Repeated"`
	// The types of the parameters.
	ParameterTypes []*string `json:"ParameterTypes,omitempty" xml:"ParameterTypes,omitempty" type:"Repeated"`
	// The request paths. Format:
	//
	// `/path`
	Paths []*string `json:"Paths,omitempty" xml:"Paths,omitempty" type:"Repeated"`
	// The request methods. Valid values:
	//
	// 	- **GET**
	//
	// 	- **ALL**
	RequestMethods []*string `json:"RequestMethods,omitempty" xml:"RequestMethods,omitempty" type:"Repeated"`
	// The details of the response.
	//
	// example:
	//
	// test
	ReturnDetails *string `json:"ReturnDetails,omitempty" xml:"ReturnDetails,omitempty"`
	// The data format of the response.
	//
	// example:
	//
	// java.lang.String
	ReturnType *string `json:"ReturnType,omitempty" xml:"ReturnType,omitempty"`
}

func (s DescribeAppServiceDetailResponseBodyDataMethods) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppServiceDetailResponseBodyDataMethods) GoString() string {
	return s.String()
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetMethodController(v string) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.MethodController = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetName(v string) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.Name = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetNameDetail(v string) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.NameDetail = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetParameterDefinitions(v []*DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.ParameterDefinitions = v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetParameterDetails(v []*string) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.ParameterDetails = v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetParameterTypes(v []*string) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.ParameterTypes = v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetPaths(v []*string) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.Paths = v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetRequestMethods(v []*string) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.RequestMethods = v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetReturnDetails(v string) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.ReturnDetails = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethods) SetReturnType(v string) *DescribeAppServiceDetailResponseBodyDataMethods {
	s.ReturnType = &v
	return s
}

type DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions struct {
	// The description of the parameter.
	//
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the parameter.
	//
	// example:
	//
	// arg0
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the parameter.
	//
	// example:
	//
	// java.lang.String
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions) GoString() string {
	return s.String()
}

func (s *DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions) SetDescription(v string) *DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions {
	s.Description = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions) SetName(v string) *DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions {
	s.Name = &v
	return s
}

func (s *DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions) SetType(v string) *DescribeAppServiceDetailResponseBodyDataMethodsParameterDefinitions {
	s.Type = &v
	return s
}

type DescribeAppServiceDetailResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAppServiceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAppServiceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppServiceDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppServiceDetailResponse) SetHeaders(v map[string]*string) *DescribeAppServiceDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppServiceDetailResponse) SetStatusCode(v int32) *DescribeAppServiceDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppServiceDetailResponse) SetBody(v *DescribeAppServiceDetailResponseBody) *DescribeAppServiceDetailResponse {
	s.Body = v
	return s
}

type DescribeApplicationConfigRequest struct {
	// 7171a6ca-d1cd-4928-8642-7d5cfe69\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// 0026ff7f-2b57-4127-bdd0-9bf202bb\\*\\*\\*\\*
	//
	// example:
	//
	// 0026ff7f-2b57-4127-bdd0-9bf202bb****
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s DescribeApplicationConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationConfigRequest) SetAppId(v string) *DescribeApplicationConfigRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationConfigRequest) SetVersionId(v string) *DescribeApplicationConfigRequest {
	s.VersionId = &v
	return s
}

type DescribeApplicationConfigResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the application.
	Data *DescribeApplicationConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned information.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 01CF26C7-00A3-4AA6-BA76-7E95F2A3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the configurations of an application were obtained. Valid values:
	//
	// 	- **true**: The configurations were obtained.
	//
	// 	- **false**: The configurations failed to be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// ac1a0b2215622246421415014e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeApplicationConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationConfigResponseBody) SetCode(v string) *DescribeApplicationConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationConfigResponseBody) SetData(v *DescribeApplicationConfigResponseBodyData) *DescribeApplicationConfigResponseBody {
	s.Data = v
	return s
}

func (s *DescribeApplicationConfigResponseBody) SetErrorCode(v string) *DescribeApplicationConfigResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeApplicationConfigResponseBody) SetMessage(v string) *DescribeApplicationConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationConfigResponseBody) SetRequestId(v string) *DescribeApplicationConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBody) SetSuccess(v bool) *DescribeApplicationConfigResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeApplicationConfigResponseBody) SetTraceId(v string) *DescribeApplicationConfigResponseBody {
	s.TraceId = &v
	return s
}

type DescribeApplicationConfigResponseBodyData struct {
	// The Alibaba Cloud Resource Name (ARN) of the RAM role that is used to pull images across accounts. For more information, see [Pull images across Alibaba Cloud accounts](https://help.aliyun.com/document_detail/190675.html) and [Grant permissions across Alibaba Cloud accounts by using a RAM role](https://help.aliyun.com/document_detail/223585.html).
	//
	// example:
	//
	// acs:ram::123456789012****:role/adminrole
	AcrAssumeRoleArn *string `json:"AcrAssumeRoleArn,omitempty" xml:"AcrAssumeRoleArn,omitempty"`
	// The ID of the Container Registry Enterprise Edition instance.
	//
	// example:
	//
	// cri-xxxxxx
	AcrInstanceId *string `json:"AcrInstanceId,omitempty" xml:"AcrInstanceId,omitempty"`
	// The description of the application.
	AppDescription *string `json:"AppDescription,omitempty" xml:"AppDescription,omitempty"`
	// The ID of the application.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// demo-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The SAE application type.
	//
	// example:
	//
	// micro_service
	AppSource *string `json:"AppSource,omitempty" xml:"AppSource,omitempty"`
	// Indicates whether an elastic IP address (EIP) is associated with the application instance. Valid values:
	//
	// 	- **true**: The EIP is associated with the application instance.
	//
	// 	- **false**: The EIP is not associated with the application instance.
	//
	// example:
	//
	// true
	AssociateEip *bool `json:"AssociateEip,omitempty" xml:"AssociateEip,omitempty"`
	// The interval between batches in a phased release. Unit: seconds.
	//
	// example:
	//
	// 10
	BatchWaitTime *int32 `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	// The command that is used to start the image. The command must be an existing executable object in the container. Example:
	//
	// ```
	//
	// command:
	//
	//       - echo
	//
	//       - abc
	//
	//       - >
	//
	//       - file0
	//
	// ```
	//
	// In this example, the Command parameter is set to `Command="echo", CommandArgs=["abc", ">", "file0"]`.
	//
	// example:
	//
	// echo
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The parameters of the image startup command. The CommandArgs parameter contains the parameters that are required for the **Command*	- parameter. Format:
	//
	// `["a","b"]`
	//
	// In the preceding **Command*	- example, the CommandArgs parameter is set to `CommandArgs=["abc", ">", "file0"]`. The data type of `["abc", ">", "file0"]` must be an array of strings in the JSON format. You do not need to configure this parameter if it does not exist in the Command parameter.
	//
	// example:
	//
	// ["a","b"]
	CommandArgs *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	// The details of the ConfigMap.
	ConfigMapMountDesc []*DescribeApplicationConfigResponseBodyDataConfigMapMountDesc `json:"ConfigMapMountDesc,omitempty" xml:"ConfigMapMountDesc,omitempty" type:"Repeated"`
	// The CPU specifications that are required for each instance. Unit: millicores. You cannot set this parameter to 0. Valid values:
	//
	// 	- **500**
	//
	// 	- **1000**
	//
	// 	- **2000**
	//
	// 	- **4000**
	//
	// 	- **8000**
	//
	// 	- **16000**
	//
	// 	- **32000**
	//
	// example:
	//
	// 1000
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The custom mappings between hostnames and IP addresses in the container. Valid values:
	//
	// 	- **hostName**: the domain name or hostname.
	//
	// 	- **ip**: the IP address.
	//
	// example:
	//
	// [{"hostName":"test.host.name","ip":"0.0.0.0"}]
	CustomHostAlias *string `json:"CustomHostAlias,omitempty" xml:"CustomHostAlias,omitempty"`
	Dotnet          *string `json:"Dotnet,omitempty" xml:"Dotnet,omitempty"`
	// The version of the container, such as Ali-Tomcat, in which an application developed based on High-speed Service Framework (HSF) is deployed.
	//
	// example:
	//
	// 3.5.3
	EdasContainerVersion *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	// Indicates whether access to Application High Availability Service (AHAS) is enabled. Valid values:
	//
	// 	- **true**: Access to AHAS is enabled.
	//
	// 	- **false**: Access to AHAS is disabled.
	//
	// example:
	//
	// true
	EnableAhas *string `json:"EnableAhas,omitempty" xml:"EnableAhas,omitempty"`
	// Indicates whether canary release rules are enabled. Canary release rules apply only to applications in Spring Cloud and Dubbo frameworks. Valid values:
	//
	// 	- **true**: The canary release rules are enabled.
	//
	// 	- **false**: The canary release rules are disabled.
	//
	// example:
	//
	// false
	EnableGreyTagRoute *bool `json:"EnableGreyTagRoute,omitempty" xml:"EnableGreyTagRoute,omitempty"`
	EnableIdle         *bool `json:"EnableIdle,omitempty" xml:"EnableIdle,omitempty"`
	EnableNewArms      *bool `json:"EnableNewArms,omitempty" xml:"EnableNewArms,omitempty"`
	// The environment variables. Variable description:
	//
	// 	- **name**: the name of the environment variable.
	//
	// 	- **value**: the value or reference of the environment variable.
	//
	// example:
	//
	// [{"name":"TEST_ENV_KEY","value":"TEST_ENV_VAR"}]
	Envs *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	// example:
	//
	// 10
	ImagePullSecrets *string `json:"ImagePullSecrets,omitempty" xml:"ImagePullSecrets,omitempty"`
	// The URL of the image. This parameter is returned only if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// docker.io/library/nginx:1.14.2
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// The arguments in the JAR package. The arguments are used to start the application container. The default startup command is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// start
	JarStartArgs *string `json:"JarStartArgs,omitempty" xml:"JarStartArgs,omitempty"`
	// The option settings in the JAR package. The settings are used to start the application container. The default startup command is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// -Dtest=true
	JarStartOptions *string `json:"JarStartOptions,omitempty" xml:"JarStartOptions,omitempty"`
	// The version of the Java development kit (JDK) on which the deployment package of the application depends. The following versions are supported:
	//
	// 	- **Open JDK 8**
	//
	// 	- **Open JDK 7**
	//
	// 	- **Dragonwell 11**
	//
	// 	- **Dragonwell 8**
	//
	// 	- **openjdk-8u191-jdk-alpine3.9**
	//
	// 	- **openjdk-7u201-jdk-alpine3.9**
	//
	// This parameter is not returned if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// Open JDK 8
	Jdk *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	// The logging configurations of Message Queue for Apache Kafka. The following parameters are involved:
	//
	// 	- **KafkaConfigs**: the configurations of Message Queue for Apache Kafka.
	//
	// 	- **createTime**: the time when the Message Queue for Apache Kafka instance was created.
	//
	// 	- **kafkaTopic**: the message topic that is used to classify messages.
	//
	// 	- **logDir**: the path in which logs are stored.
	//
	// 	- **logType**: the type of collected logs. Valid values:
	//
	//     	- **file_log**: the file log that is stored in the container. The path of the file logs in the container is returned.
	//
	//     	- **stdout**: the standard output log of the container. You can specify only one stdout value.
	//
	// 	- **kafkaEndpoint**: the endpoint of the Message Queue for Apache Kafka service.
	//
	// 	- **kafkaInstanceId**: the ID of the Message Queue for Apache Kafka instance.
	//
	// 	- **region**: the region where the Message Queue for Apache Kafka instance resides.
	KafkaConfigs *string `json:"KafkaConfigs,omitempty" xml:"KafkaConfigs,omitempty"`
	// The details of the availability check that was performed on the container. If the container fails this health check multiple times, the system disables and restarts the container. You can use one of the following methods to perform the health check:
	//
	// 	- Sample code of the **exec*	- method: `{"exec":{"command":["sh","-c","cat/home/admin/start.sh"]},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds":2}`
	//
	// 	- Sample code of the **httpGet*	- method: `{"httpGet":{"path":"/","port":18091,"scheme":"HTTP","isContainKeyWord":true,"keyWord":"SAE"},"initialDelaySeconds":11,"periodSeconds":10,"timeoutSeconds":1}`
	//
	// 	- Sample code of the **tcpSocket*	- method: `{"tcpSocket":{"port":18091},"initialDelaySeconds":11,"periodSeconds":10,"timeoutSeconds":1}`
	//
	// >  You can use only one method to perform the health check.
	//
	// The following parameters are involved:
	//
	// 	- **exec.command**: the health check command.
	//
	// 	- **httpGet.path**: the request path.
	//
	// 	- **httpGet.scheme**: the protocol that is used to perform the health check. Valid values: **HTTP*	- and **HTTPS**.
	//
	// 	- **httpGet.isContainKeyWord**: indicates whether the response contains keywords. Valid values: **true*	- and **false**. If this field is not returned, the advanced settings are not used.
	//
	// 	- **httpGet.keyWord**: the custom keyword. This parameter is available only if the **isContainKeyWord*	- field is returned.
	//
	// 	- **tcpSocket.port**: the port that is used to check the status of TCP connections.
	//
	// 	- **initialDelaySeconds**: the delay of the health check. Default value: 10. Unit: seconds.
	//
	// 	- **periodSeconds**: the interval at which health checks are performed. Default value: 30. Unit: seconds.
	//
	// 	- **timeoutSeconds**: the timeout period of the health check. Default value: 1. Unit: seconds. If you set this parameter to 0 or leave this parameter empty, the timeout period is automatically set to 1 second.
	//
	// example:
	//
	// {"exec":{"command":["curl http://localhost:8080"]},"initialDelaySeconds":20,"timeoutSeconds":3}
	Liveness *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	// The size of memory required by each instance. Unit: MB. You cannot set this parameter to 0. The values of this parameter correspond to the values of the Cpu parameter:
	//
	// 	- This parameter is set to **1024*	- if the Cpu parameter is set to 500 or 1000.
	//
	// 	- This parameter is set to **2048*	- if the Cpu parameter is set to 500, 1000, or 1000.
	//
	// 	- This parameter is set to **4096*	- if the Cpu parameter is set to 1000, 2000, or 4000.
	//
	// 	- This parameter is set to **8192*	- if the Cpu parameter is set to 2000, 4000, or 8000.
	//
	// 	- This parameter is set to **12288*	- if the Cpu parameter is set to 12000.
	//
	// 	- This parameter is set to **16384*	- if the Cpu parameter is set to 4000, 8000, or 16000.
	//
	// 	- This parameter is set to **24567*	- if the Cpu parameter is set to 12000.
	//
	// 	- This parameter is set to **32768*	- if the Cpu parameter is set to 16000.
	//
	// 	- This parameter is set to **65536*	- if the Cpu parameter is set to 8000, 16000, or 32000.
	//
	// 	- This parameter is set to **131072*	- if the Cpu parameter is set to 32000.
	//
	// example:
	//
	// 2048
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// example:
	//
	// "0"
	MicroRegistration       *string `json:"MicroRegistration,omitempty" xml:"MicroRegistration,omitempty"`
	MicroRegistrationConfig *string `json:"MicroRegistrationConfig,omitempty" xml:"MicroRegistrationConfig,omitempty"`
	// The percentage of the minimum number of available instances. Valid values:
	//
	// 	- **-1**: the default value. This value indicates that the minimum number of available instances is not measured by percentage. If you do not configure this parameter, the default value **-1*	- is used.
	//
	// 	- **0 to 100**: indicates that the minimum number of available instances is calculated by using the following formula: Current number of instances × (Value of MinReadyInstanceRatio × 100%). If the calculated result is not an integer, the result is rounded up to the nearest integer. For example, if the percentage is set to **50**% and five instances are available, the minimum number of available instances is 3.
	//
	// >  If the **MinReadyInstance*	- and **MinReadyInstanceRatio*	- parameters are returned and the value of the **MinReadyInstanceRatio*	- parameter is not **-1**, the value of the **MinReadyInstanceRatio*	- parameter takes effect. If the **MinReadyInstances*	- parameter is set to **5*	- and the **MinReadyInstanceRatio*	- parameter is set to **50**, the value of the **MinReadyInstanceRatio*	- parameter determines the minimum number of available instances.
	//
	// example:
	//
	// -1
	MinReadyInstanceRatio *int32 `json:"MinReadyInstanceRatio,omitempty" xml:"MinReadyInstanceRatio,omitempty"`
	// The minimum number of available instances. Valid values:
	//
	// 	- If you set the value to **0**, business interruptions occur when the application is updated.
	//
	// 	- If you set the value to **-1**, the minimum number of available instances is automatically set to a system-recommended value. The value is the nearest integer to which the calculated result of the following formula is rounded up: Current number of instances × 25%. For example, if five instances are available, the minimum number of available instances is calculated by using the following formula: 5 × 25% = 1.25. In this case, the minimum number of available instances is 2.
	//
	// >  Make sure that at least one instance is available during application deployment and rollback to prevent business interruptions.
	//
	// example:
	//
	// 1
	MinReadyInstances *int32 `json:"MinReadyInstances,omitempty" xml:"MinReadyInstances,omitempty"`
	// The details of the mounted NAS file system.
	MountDesc []*DescribeApplicationConfigResponseBodyDataMountDesc `json:"MountDesc,omitempty" xml:"MountDesc,omitempty" type:"Repeated"`
	// The mount target of the NAS file system in the VPC where the application is deployed. If you do not need to modify this configuration during the deployment, configure the **MountHost*	- parameter only in the first request. You do not need to include this parameter in subsequent requests. If you need to remove this configuration, leave the **MountHost*	- parameter empty in the request.
	//
	// example:
	//
	// example.com
	MountHost *string `json:"MountHost,omitempty" xml:"MountHost,omitempty"`
	// The ID of the microservice application.
	//
	// example:
	//
	// xxxxxxx@xxxxx
	MseApplicationId *string `json:"MseApplicationId,omitempty" xml:"MseApplicationId,omitempty"`
	// example:
	//
	// cn-shenzhen-alb-demo-5c****
	MseApplicationName *string `json:"MseApplicationName,omitempty" xml:"MseApplicationName,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// example:
	//
	// [{"mountPath":"/test1","readOnly":false,"nasId":"nasId1","mountDomain":"nasId1.cn-shenzhen.nas.aliyuncs.com","nasPath":"/test1"},{"nasId":"nasId2","mountDomain":"nasId2.cn-shenzhen.nas.aliyuncs.com","readOnly":false,"nasPath":"/test2","mountPath":"/test2"}]
	NasConfigs *string `json:"NasConfigs,omitempty" xml:"NasConfigs,omitempty"`
	// The ID of the NAS file system.
	//
	// example:
	//
	// AKSN89**
	NasId *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	// The AccessKey ID that is used to read data from and write data to Object Storage Service (OSS) buckets.
	//
	// example:
	//
	// xxxxxx
	OssAkId *string `json:"OssAkId,omitempty" xml:"OssAkId,omitempty"`
	// The AccessKey secret that is used to read data from and write data to OSS buckets.
	//
	// example:
	//
	// xxxxxx
	OssAkSecret *string `json:"OssAkSecret,omitempty" xml:"OssAkSecret,omitempty"`
	// The description of the mounted OSS bucket.
	OssMountDescs []*DescribeApplicationConfigResponseBodyDataOssMountDescs `json:"OssMountDescs,omitempty" xml:"OssMountDescs,omitempty" type:"Repeated"`
	// The type of the deployment package. Valid values:
	//
	// 	- If you deploy the application by using a Java Archive (JAR) package, you can set this parameter to **FatJar**, **War**, or **Image**.
	//
	// 	- If you deploy the application by using a PHP package, you can set this parameter to one of the following values:
	//
	//     	- **PhpZip**
	//
	//     	- **IMAGE_PHP_5_4**
	//
	//     	- **IMAGE_PHP_5_4_ALPINE**
	//
	//     	- **IMAGE_PHP_5_5**
	//
	//     	- **IMAGE_PHP_5_5_ALPINE**
	//
	//     	- **IMAGE_PHP_5_6**
	//
	//     	- **IMAGE_PHP_5_6_ALPINE**
	//
	//     	- **IMAGE_PHP_7_0**
	//
	//     	- **IMAGE_PHP_7_0_ALPINE**
	//
	//     	- **IMAGE_PHP_7_1**
	//
	//     	- **IMAGE_PHP_7_1_ALPINE**
	//
	//     	- **IMAGE_PHP_7_2**
	//
	//     	- **IMAGE_PHP_7_2_ALPINE**
	//
	//     	- **IMAGE_PHP_7_3**
	//
	//     	- **IMAGE_PHP_7_3_ALPINE**
	//
	// example:
	//
	// War
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// The URL of the deployment package. This parameter is returned only if the **PackageType*	- parameter is set to **FatJar*	- or **War**.
	PackageUrl *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	// The version of the deployment package. This parameter is returned only if the **PackageType*	- parameter is set to **FatJar*	- or **War**.
	//
	// example:
	//
	// 1.0
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	// example:
	//
	// PHP-FPM 7.0
	Php *string `json:"Php,omitempty" xml:"Php,omitempty"`
	// The path on which the PHP configuration file for application monitoring is mounted. Make sure that the PHP server loads the configuration file.
	//
	// SAE automatically generates the corresponding configuration file. No manual operations are required.
	//
	// example:
	//
	// /usr/local/etc/php/conf.d/arms.ini
	PhpArmsConfigLocation *string `json:"PhpArmsConfigLocation,omitempty" xml:"PhpArmsConfigLocation,omitempty"`
	// The details of the PHP configuration file.
	//
	// example:
	//
	// k1=v1
	PhpConfig *string `json:"PhpConfig,omitempty" xml:"PhpConfig,omitempty"`
	// The path on which the PHP configuration file for application startup is mounted. Make sure that the PHP server uses this configuration file during the startup.
	//
	// example:
	//
	// /usr/local/etc/php/php.ini
	PhpConfigLocation *string `json:"PhpConfigLocation,omitempty" xml:"PhpConfigLocation,omitempty"`
	// The script that is run immediately after the container is started. Example: `{"exec":{"command":["cat","/etc/group"]}}`
	//
	// example:
	//
	// {"exec":{"command":["cat","/etc/group"]}}
	PostStart *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	// The script that is run before the container is stopped. Example: `{"exec":{"command":["cat","/etc/group"]}}`
	//
	// example:
	//
	// {"exec":{"command":["cat","/etc/group"]}}
	PreStop *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	// The programming language that is used to create the application. Valid values:
	//
	// 	- **java**: Java
	//
	// 	- **php**: PHP
	//
	// 	- **other**: Other programming languages, such as Python, C++, Go, .NET, and Node.js.
	//
	// example:
	//
	// java
	ProgrammingLanguage *string `json:"ProgrammingLanguage,omitempty" xml:"ProgrammingLanguage,omitempty"`
	// example:
	//
	// {"serviceName":"bwm-poc-sc-gateway-cn-beijing-front","namespaceId":"cn-beijing:front","portAndProtocol":{"18012":"TCP"},"enable":true}
	PvtzDiscovery *string `json:"PvtzDiscovery,omitempty" xml:"PvtzDiscovery,omitempty"`
	// example:
	//
	// PYTHON 3.9.15
	Python *string `json:"Python,omitempty" xml:"Python,omitempty"`
	// example:
	//
	// Flask==2.0
	PythonModules *string `json:"PythonModules,omitempty" xml:"PythonModules,omitempty"`
	// The details of the health check that was performed on the container. If the container fails this health check multiple times, the system disables and restarts the container. Containers that fail health checks cannot receive traffic from Server Load Balancer (SLB) instances. You can use the **exec**, **httpGet**, or **tcpSocket*	- method to perform health checks. For more information, see the description of the **Liveness*	- parameter.
	//
	// >  You can use only one method to perform the health check.
	//
	// example:
	//
	// {"exec":{"command":["curl http://localhost:8080"]},"initialDelaySeconds":20,"timeoutSeconds":5}
	Readiness *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of application instances.
	//
	// example:
	//
	// 2
	Replicas *int32 `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-wz969ngg2e49q5i4****
	SecurityGroupId *string            `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	ServiceTags     map[string]*string `json:"ServiceTags,omitempty" xml:"ServiceTags,omitempty"`
	// The logging configurations of Log Service.
	//
	// 	- To use Log Service resources that are automatically created by SAE, set this parameter to `[{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]`.
	//
	// 	- To use custom Log Service resources, set this parameter to `[{"projectName":"test-sls","logType":"stdout","logDir":"","logstoreName":"sae","logtailName":""},{"projectName":"test","logDir":"/tmp/a.log","logstoreName":"sae","logtailName":""}]`.
	//
	// The following parameters are involved:
	//
	// 	- **projectName**: the name of the Log Service project.
	//
	// 	- **logDir**: the path in which logs are stored.
	//
	// 	- **logType**: the log type. **stdout**: the standard output log of the container. You can specify only one stdout value for this parameter. If you leave this parameter empty, file logs are collected.
	//
	// 	- **logstoreName**: the name of the Logstore in Log Service.
	//
	// 	- **logtailName**: the name of the Logtail configuration in Log Service. If you do not configure this parameter, a new Logtail configuration is created.
	//
	// If you do not need to modify the logging configurations when you deploy the application, configure the **SlsConfigs*	- parameter only in the first request. You do not need to include this parameter in subsequent requests. If you no longer need to use Log Service, leave the **SlsConfigs*	- parameter empty in the request.
	//
	// example:
	//
	// [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]
	SlsConfigs *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	// The details of the tags.
	Tags []*DescribeApplicationConfigResponseBodyDataTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timeout period for a graceful shutdown. Default value: 30. Unit: seconds. Valid values: 1 to 300.
	//
	// example:
	//
	// 10
	TerminationGracePeriodSeconds *int32 `json:"TerminationGracePeriodSeconds,omitempty" xml:"TerminationGracePeriodSeconds,omitempty"`
	// The time zone. Default value: **Asia/Shanghai**.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The Tomcat configuration. If you want to delete the configuration, set this parameter to {} or leave this parameter empty. The following parameters are involved:
	//
	// 	- **port**: the port number. Valid values: 1024 to 65535. The root permissions are required to perform operations on ports whose number is smaller than 1024. Enter a value that ranges from 1025 to 65535 because the container has only the admin permissions. If you do not configure this parameter, the default port number 8080 is used.
	//
	// 	- **contextPath**: the path. Default value: /. This value indicates the root directory.
	//
	// 	- **maxThreads**: the maximum number of connections in the connection pool. Default value: 400.
	//
	// 	- **uriEncoding**: the URI encoding scheme in the Tomcat container. Valid values: **UTF-8**, **ISO-8859-1**, **GBK**, and **GB2312**. If you do not configure this parameter, the default value **ISO-8859-1*	- is used.
	//
	// 	- **useBodyEncoding**: indicates whether to use the encoding scheme that is specified by **BodyEncoding for URL**. Default value: **true**.
	//
	// example:
	//
	// {"port":8080,"contextPath":"/","maxThreads":400,"uriEncoding":"ISO-8859-1","useBodyEncodingForUri":true}
	TomcatConfig *string `json:"TomcatConfig,omitempty" xml:"TomcatConfig,omitempty"`
	// The deployment policy. If the minimum number of available instances is 1, the value of the **UpdateStrategy*	- parameter is an empty string (""). If the minimum number of available instances is greater than 1, the following strategies can be configured:
	//
	// 	- The application is deployed on an instance. The remaining instances are automatically classified into two release batches whose interval is set to 1. In this case, the parameter is set to `{"type":"GrayBatchUpdate","batchUpdate":{"batch":2,"releaseType":"auto","batchWaitTime":1},"grayUpdate":{"gray":1}}`.
	//
	// 	- The application is deployed on an instance. The remaining instances are manually classified into two release batches. In this case, the parameter is set to `{"type":"GrayBatchUpdate","batchUpdate":{"batch":2,"releaseType":"manual"},"grayUpdate":{"gray":1}}`.
	//
	// 	- All instances are automatically classified into two release batches. The application is deployed on the instances of the two batches in parallel. In this case, the parameter is set to `{"type":"BatchUpdate","batchUpdate":{"batch":2,"releaseType":"auto","batchWaitTime":0}}`
	//
	// The following parameters are involved:
	//
	// 	- **type**: the type of the release policy. Valid values: **GrayBatchUpdate*	- and **BatchUpdate**.
	//
	// 	- **batchUpdate**: the phased release policy.
	//
	//     	- **batch**: the number of release batches.
	//
	//     	- **releaseType**: the processing method for the batches. Valid values: **auto*	- and **manual**.
	//
	//     	- **batchWaitTime**: the interval between release batches. Unit: seconds.
	//
	// 	- **grayUpdate**: the number of release batches in the phased release after a canary release. This parameter is returned only if the **type*	- parameter is set to **GrayBatchUpdate**.
	//
	// example:
	//
	// {"type":"GrayBatchUpdate","batchUpdate":{"batch":2,"releaseType":"auto","batchWaitTime":1},"grayUpdate":{"gray":1}}
	UpdateStrategy *string `json:"UpdateStrategy,omitempty" xml:"UpdateStrategy,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-2ze559r1z1bpwqxwp****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// example:
	//
	// vpc-2ze0i263cnn311nvj****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The option settings in the WAR package. The settings are used to start the application container. The default startup command is `java $JAVA_OPTS $CATALINA_OPTS -Options org.apache.catalina.startup.Bootstrap "$@" start`.
	//
	// example:
	//
	// custom-option
	WarStartOptions *string `json:"WarStartOptions,omitempty" xml:"WarStartOptions,omitempty"`
	// The version of the Tomcat container on which the deployment package depends. Valid values:
	//
	// 	- **apache-tomcat-7.0.91**
	//
	// 	- **apache-tomcat-8.5.42**
	//
	// This parameter is not returned if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// apache-tomcat-7.0.91
	WebContainer *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
}

func (s DescribeApplicationConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeApplicationConfigResponseBodyData) SetAcrAssumeRoleArn(v string) *DescribeApplicationConfigResponseBodyData {
	s.AcrAssumeRoleArn = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetAcrInstanceId(v string) *DescribeApplicationConfigResponseBodyData {
	s.AcrInstanceId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetAppDescription(v string) *DescribeApplicationConfigResponseBodyData {
	s.AppDescription = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetAppId(v string) *DescribeApplicationConfigResponseBodyData {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetAppName(v string) *DescribeApplicationConfigResponseBodyData {
	s.AppName = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetAppSource(v string) *DescribeApplicationConfigResponseBodyData {
	s.AppSource = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetAssociateEip(v bool) *DescribeApplicationConfigResponseBodyData {
	s.AssociateEip = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetBatchWaitTime(v int32) *DescribeApplicationConfigResponseBodyData {
	s.BatchWaitTime = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetCommand(v string) *DescribeApplicationConfigResponseBodyData {
	s.Command = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetCommandArgs(v string) *DescribeApplicationConfigResponseBodyData {
	s.CommandArgs = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetConfigMapMountDesc(v []*DescribeApplicationConfigResponseBodyDataConfigMapMountDesc) *DescribeApplicationConfigResponseBodyData {
	s.ConfigMapMountDesc = v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetCpu(v int32) *DescribeApplicationConfigResponseBodyData {
	s.Cpu = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetCustomHostAlias(v string) *DescribeApplicationConfigResponseBodyData {
	s.CustomHostAlias = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetDotnet(v string) *DescribeApplicationConfigResponseBodyData {
	s.Dotnet = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetEdasContainerVersion(v string) *DescribeApplicationConfigResponseBodyData {
	s.EdasContainerVersion = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetEnableAhas(v string) *DescribeApplicationConfigResponseBodyData {
	s.EnableAhas = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetEnableGreyTagRoute(v bool) *DescribeApplicationConfigResponseBodyData {
	s.EnableGreyTagRoute = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetEnableIdle(v bool) *DescribeApplicationConfigResponseBodyData {
	s.EnableIdle = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetEnableNewArms(v bool) *DescribeApplicationConfigResponseBodyData {
	s.EnableNewArms = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetEnvs(v string) *DescribeApplicationConfigResponseBodyData {
	s.Envs = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetImagePullSecrets(v string) *DescribeApplicationConfigResponseBodyData {
	s.ImagePullSecrets = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetImageUrl(v string) *DescribeApplicationConfigResponseBodyData {
	s.ImageUrl = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetJarStartArgs(v string) *DescribeApplicationConfigResponseBodyData {
	s.JarStartArgs = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetJarStartOptions(v string) *DescribeApplicationConfigResponseBodyData {
	s.JarStartOptions = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetJdk(v string) *DescribeApplicationConfigResponseBodyData {
	s.Jdk = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetKafkaConfigs(v string) *DescribeApplicationConfigResponseBodyData {
	s.KafkaConfigs = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetLiveness(v string) *DescribeApplicationConfigResponseBodyData {
	s.Liveness = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetMemory(v int32) *DescribeApplicationConfigResponseBodyData {
	s.Memory = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetMicroRegistration(v string) *DescribeApplicationConfigResponseBodyData {
	s.MicroRegistration = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetMicroRegistrationConfig(v string) *DescribeApplicationConfigResponseBodyData {
	s.MicroRegistrationConfig = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetMinReadyInstanceRatio(v int32) *DescribeApplicationConfigResponseBodyData {
	s.MinReadyInstanceRatio = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetMinReadyInstances(v int32) *DescribeApplicationConfigResponseBodyData {
	s.MinReadyInstances = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetMountDesc(v []*DescribeApplicationConfigResponseBodyDataMountDesc) *DescribeApplicationConfigResponseBodyData {
	s.MountDesc = v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetMountHost(v string) *DescribeApplicationConfigResponseBodyData {
	s.MountHost = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetMseApplicationId(v string) *DescribeApplicationConfigResponseBodyData {
	s.MseApplicationId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetMseApplicationName(v string) *DescribeApplicationConfigResponseBodyData {
	s.MseApplicationName = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetNamespaceId(v string) *DescribeApplicationConfigResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetNasConfigs(v string) *DescribeApplicationConfigResponseBodyData {
	s.NasConfigs = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetNasId(v string) *DescribeApplicationConfigResponseBodyData {
	s.NasId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetOssAkId(v string) *DescribeApplicationConfigResponseBodyData {
	s.OssAkId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetOssAkSecret(v string) *DescribeApplicationConfigResponseBodyData {
	s.OssAkSecret = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetOssMountDescs(v []*DescribeApplicationConfigResponseBodyDataOssMountDescs) *DescribeApplicationConfigResponseBodyData {
	s.OssMountDescs = v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPackageType(v string) *DescribeApplicationConfigResponseBodyData {
	s.PackageType = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPackageUrl(v string) *DescribeApplicationConfigResponseBodyData {
	s.PackageUrl = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPackageVersion(v string) *DescribeApplicationConfigResponseBodyData {
	s.PackageVersion = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPhp(v string) *DescribeApplicationConfigResponseBodyData {
	s.Php = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPhpArmsConfigLocation(v string) *DescribeApplicationConfigResponseBodyData {
	s.PhpArmsConfigLocation = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPhpConfig(v string) *DescribeApplicationConfigResponseBodyData {
	s.PhpConfig = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPhpConfigLocation(v string) *DescribeApplicationConfigResponseBodyData {
	s.PhpConfigLocation = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPostStart(v string) *DescribeApplicationConfigResponseBodyData {
	s.PostStart = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPreStop(v string) *DescribeApplicationConfigResponseBodyData {
	s.PreStop = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetProgrammingLanguage(v string) *DescribeApplicationConfigResponseBodyData {
	s.ProgrammingLanguage = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPvtzDiscovery(v string) *DescribeApplicationConfigResponseBodyData {
	s.PvtzDiscovery = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPython(v string) *DescribeApplicationConfigResponseBodyData {
	s.Python = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetPythonModules(v string) *DescribeApplicationConfigResponseBodyData {
	s.PythonModules = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetReadiness(v string) *DescribeApplicationConfigResponseBodyData {
	s.Readiness = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetRegionId(v string) *DescribeApplicationConfigResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetReplicas(v int32) *DescribeApplicationConfigResponseBodyData {
	s.Replicas = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetSecurityGroupId(v string) *DescribeApplicationConfigResponseBodyData {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetServiceTags(v map[string]*string) *DescribeApplicationConfigResponseBodyData {
	s.ServiceTags = v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetSlsConfigs(v string) *DescribeApplicationConfigResponseBodyData {
	s.SlsConfigs = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetTags(v []*DescribeApplicationConfigResponseBodyDataTags) *DescribeApplicationConfigResponseBodyData {
	s.Tags = v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetTerminationGracePeriodSeconds(v int32) *DescribeApplicationConfigResponseBodyData {
	s.TerminationGracePeriodSeconds = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetTimezone(v string) *DescribeApplicationConfigResponseBodyData {
	s.Timezone = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetTomcatConfig(v string) *DescribeApplicationConfigResponseBodyData {
	s.TomcatConfig = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetUpdateStrategy(v string) *DescribeApplicationConfigResponseBodyData {
	s.UpdateStrategy = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetVSwitchId(v string) *DescribeApplicationConfigResponseBodyData {
	s.VSwitchId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetVpcId(v string) *DescribeApplicationConfigResponseBodyData {
	s.VpcId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetWarStartOptions(v string) *DescribeApplicationConfigResponseBodyData {
	s.WarStartOptions = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyData) SetWebContainer(v string) *DescribeApplicationConfigResponseBodyData {
	s.WebContainer = &v
	return s
}

type DescribeApplicationConfigResponseBodyDataConfigMapMountDesc struct {
	// The ID of the ConfigMap.
	//
	// example:
	//
	// 1
	ConfigMapId *int64 `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
	// The name of the ConfigMap.
	//
	// example:
	//
	// test
	ConfigMapName *string `json:"ConfigMapName,omitempty" xml:"ConfigMapName,omitempty"`
	// The key-value pair that is stored in the ConfigMap.
	//
	// example:
	//
	// k1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The path on which the ConfigMap is mounted.
	//
	// example:
	//
	// /tmp
	MountPath *string `json:"MountPath,omitempty" xml:"MountPath,omitempty"`
}

func (s DescribeApplicationConfigResponseBodyDataConfigMapMountDesc) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationConfigResponseBodyDataConfigMapMountDesc) GoString() string {
	return s.String()
}

func (s *DescribeApplicationConfigResponseBodyDataConfigMapMountDesc) SetConfigMapId(v int64) *DescribeApplicationConfigResponseBodyDataConfigMapMountDesc {
	s.ConfigMapId = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyDataConfigMapMountDesc) SetConfigMapName(v string) *DescribeApplicationConfigResponseBodyDataConfigMapMountDesc {
	s.ConfigMapName = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyDataConfigMapMountDesc) SetKey(v string) *DescribeApplicationConfigResponseBodyDataConfigMapMountDesc {
	s.Key = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyDataConfigMapMountDesc) SetMountPath(v string) *DescribeApplicationConfigResponseBodyDataConfigMapMountDesc {
	s.MountPath = &v
	return s
}

type DescribeApplicationConfigResponseBodyDataMountDesc struct {
	// The path on which the NAS file system is mounted.
	//
	// example:
	//
	// /tmp
	MountPath *string `json:"MountPath,omitempty" xml:"MountPath,omitempty"`
	// The directory in the NAS file system.
	//
	// example:
	//
	// /
	NasPath *string `json:"NasPath,omitempty" xml:"NasPath,omitempty"`
}

func (s DescribeApplicationConfigResponseBodyDataMountDesc) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationConfigResponseBodyDataMountDesc) GoString() string {
	return s.String()
}

func (s *DescribeApplicationConfigResponseBodyDataMountDesc) SetMountPath(v string) *DescribeApplicationConfigResponseBodyDataMountDesc {
	s.MountPath = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyDataMountDesc) SetNasPath(v string) *DescribeApplicationConfigResponseBodyDataMountDesc {
	s.NasPath = &v
	return s
}

type DescribeApplicationConfigResponseBodyDataOssMountDescs struct {
	// The name of the OSS bucket.
	//
	// example:
	//
	// oss-bucket
	BucketName *string `json:"bucketName,omitempty" xml:"bucketName,omitempty"`
	// The directory or object in OSS. If the specified directory or object does not exist, an error is returned.
	//
	// example:
	//
	// data/user.data
	BucketPath *string `json:"bucketPath,omitempty" xml:"bucketPath,omitempty"`
	// The path of the container in SAE. The parameter value that you specified overwrites the original value. If the specified path does not exist, SAE automatically creates the path.
	//
	// example:
	//
	// /usr/data/user.data
	MountPath *string `json:"mountPath,omitempty" xml:"mountPath,omitempty"`
	// Indicates whether the application can use the container path to read data from or write data to resources in the directory of the OSS bucket. Valid values:
	//
	// 	- **true**: The application has the read-only permissions.
	//
	// 	- **false**: The application has the read and write permissions.
	//
	// example:
	//
	// true
	ReadOnly *bool `json:"readOnly,omitempty" xml:"readOnly,omitempty"`
}

func (s DescribeApplicationConfigResponseBodyDataOssMountDescs) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationConfigResponseBodyDataOssMountDescs) GoString() string {
	return s.String()
}

func (s *DescribeApplicationConfigResponseBodyDataOssMountDescs) SetBucketName(v string) *DescribeApplicationConfigResponseBodyDataOssMountDescs {
	s.BucketName = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyDataOssMountDescs) SetBucketPath(v string) *DescribeApplicationConfigResponseBodyDataOssMountDescs {
	s.BucketPath = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyDataOssMountDescs) SetMountPath(v string) *DescribeApplicationConfigResponseBodyDataOssMountDescs {
	s.MountPath = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyDataOssMountDescs) SetReadOnly(v bool) *DescribeApplicationConfigResponseBodyDataOssMountDescs {
	s.ReadOnly = &v
	return s
}

type DescribeApplicationConfigResponseBodyDataTags struct {
	// The key of the tag.
	//
	// example:
	//
	// k1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// v1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeApplicationConfigResponseBodyDataTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationConfigResponseBodyDataTags) GoString() string {
	return s.String()
}

func (s *DescribeApplicationConfigResponseBodyDataTags) SetKey(v string) *DescribeApplicationConfigResponseBodyDataTags {
	s.Key = &v
	return s
}

func (s *DescribeApplicationConfigResponseBodyDataTags) SetValue(v string) *DescribeApplicationConfigResponseBodyDataTags {
	s.Value = &v
	return s
}

type DescribeApplicationConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApplicationConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApplicationConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationConfigResponse) SetHeaders(v map[string]*string) *DescribeApplicationConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationConfigResponse) SetStatusCode(v int32) *DescribeApplicationConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationConfigResponse) SetBody(v *DescribeApplicationConfigResponseBody) *DescribeApplicationConfigResponse {
	s.Body = v
	return s
}

type DescribeApplicationGroupsRequest struct {
	// d700e680-aa4d-4ec1-afc2-6566b5ff\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// d700e680-aa4d-4ec1-afc2-6566b5ff****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// 1
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// 10
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeApplicationGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationGroupsRequest) SetAppId(v string) *DescribeApplicationGroupsRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationGroupsRequest) SetCurrentPage(v int32) *DescribeApplicationGroupsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeApplicationGroupsRequest) SetPageSize(v int32) *DescribeApplicationGroupsRequest {
	s.PageSize = &v
	return s
}

type DescribeApplicationGroupsResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the instance groups of the application.
	Data []*DescribeApplicationGroupsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information about instance groups of an application was obtained. Valid values:
	//
	// 	- **true**: indicates that the information was obtained.
	//
	// 	- **false**: indicates that the information could not be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeApplicationGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationGroupsResponseBody) SetCode(v string) *DescribeApplicationGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBody) SetData(v []*DescribeApplicationGroupsResponseBodyData) *DescribeApplicationGroupsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeApplicationGroupsResponseBody) SetErrorCode(v string) *DescribeApplicationGroupsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBody) SetMessage(v string) *DescribeApplicationGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBody) SetRequestId(v string) *DescribeApplicationGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBody) SetSuccess(v bool) *DescribeApplicationGroupsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBody) SetTraceId(v string) *DescribeApplicationGroupsResponseBody {
	s.TraceId = &v
	return s
}

type DescribeApplicationGroupsResponseBodyData struct {
	// The version of the container, such as Ali-Tomcat, in which a High-speed Service Framework (HSF) application runs.
	//
	// example:
	//
	// 3.5.3
	EdasContainerVersion *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	// The ID of the group.
	//
	// example:
	//
	// b2a8a925-477a-eswa-b823-d5e22500****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the group.
	//
	// example:
	//
	// _DEFAULT_GROUP
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The type of the group.
	//
	// example:
	//
	// 0
	GroupType *int32 `json:"GroupType,omitempty" xml:"GroupType,omitempty"`
	// The address of the image. This parameter is required when the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// registry-vpc.cn-hangzhou.aliyuncs.com/demo/nginx:latest
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// The version of the Java development kit (JDK) on which the deployment package of the application depends. This parameter is invalid when the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// Open JDK 8
	Jdk *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	// The type of the application deployment package. Valid values:
	//
	// 	- When you use a Java package, set this value to **FatJar**, **War**, or **Image**.
	//
	// 	- When you use a PHP package, the following values are valid:
	//
	//     	- **PhpZip**
	//
	//     	- **IMAGE_PHP_5_4**
	//
	//     	- **IMAGE_PHP_5_4_ALPINE**
	//
	//     	- **IMAGE_PHP_5_5**
	//
	//     	- **IMAGE_PHP_5_5_ALPINE**
	//
	//     	- **IMAGE_PHP_5_6**
	//
	//     	- **IMAGE_PHP_5_6_ALPINE**
	//
	//     	- **IMAGE_PHP_7_0**
	//
	//     	- **IMAGE_PHP_7_0_ALPINE**
	//
	//     	- **IMAGE_PHP_7_1**
	//
	//     	- **IMAGE_PHP_7_1_ALPINE**
	//
	//     	- **IMAGE_PHP_7_2**
	//
	//     	- **IMAGE_PHP_7_2_ALPINE**
	//
	//     	- **IMAGE_PHP_7_3**
	//
	//     	- **IMAGE_PHP_7_3_ALPINE**
	//
	// example:
	//
	// Image
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// The address of the deployment package. This parameter is required when the **PackageType*	- parameter is set to **FatJar**, **War**, or **PhpZip**.
	//
	// example:
	//
	// registry-vpc.cn-hangzhou.aliyuncs.com/demo/nginx:latest
	PackageUrl *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	// The version of the deployment package. This parameter is required when the **PackageType*	- parameter is set to **FatJar**, **War**, or **PhpZip**. The parameter value will be automatically generated when you use an image to deploy the application and specify the **ImageUrl*	- parameter.
	//
	// example:
	//
	// 1.0.0
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	// The total number of instances.
	//
	// example:
	//
	// 10
	Replicas *int32 `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	// The number of running instances.
	//
	// example:
	//
	// 1
	RunningInstances *int32 `json:"RunningInstances,omitempty" xml:"RunningInstances,omitempty"`
	// The version of the Apache Tomcat container on which the deployment package of the application depends. This parameter is invalid when the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// Apache Tomcat 7
	WebContainer *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
}

func (s DescribeApplicationGroupsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationGroupsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeApplicationGroupsResponseBodyData) SetEdasContainerVersion(v string) *DescribeApplicationGroupsResponseBodyData {
	s.EdasContainerVersion = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetGroupId(v string) *DescribeApplicationGroupsResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetGroupName(v string) *DescribeApplicationGroupsResponseBodyData {
	s.GroupName = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetGroupType(v int32) *DescribeApplicationGroupsResponseBodyData {
	s.GroupType = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetImageUrl(v string) *DescribeApplicationGroupsResponseBodyData {
	s.ImageUrl = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetJdk(v string) *DescribeApplicationGroupsResponseBodyData {
	s.Jdk = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetPackageType(v string) *DescribeApplicationGroupsResponseBodyData {
	s.PackageType = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetPackageUrl(v string) *DescribeApplicationGroupsResponseBodyData {
	s.PackageUrl = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetPackageVersion(v string) *DescribeApplicationGroupsResponseBodyData {
	s.PackageVersion = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetReplicas(v int32) *DescribeApplicationGroupsResponseBodyData {
	s.Replicas = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetRunningInstances(v int32) *DescribeApplicationGroupsResponseBodyData {
	s.RunningInstances = &v
	return s
}

func (s *DescribeApplicationGroupsResponseBodyData) SetWebContainer(v string) *DescribeApplicationGroupsResponseBodyData {
	s.WebContainer = &v
	return s
}

type DescribeApplicationGroupsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApplicationGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApplicationGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationGroupsResponse) SetHeaders(v map[string]*string) *DescribeApplicationGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationGroupsResponse) SetStatusCode(v int32) *DescribeApplicationGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationGroupsResponse) SetBody(v *DescribeApplicationGroupsResponseBody) *DescribeApplicationGroupsResponse {
	s.Body = v
	return s
}

type DescribeApplicationImageRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// d700e680-aa4d-4ec1-afc2-6566b5ff****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The URL of the image.
	//
	// This parameter is required.
	//
	// example:
	//
	// registry-vpc.cn-hangzhou.aliyuncs.com/demo/demo:latest
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
}

func (s DescribeApplicationImageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationImageRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationImageRequest) SetAppId(v string) *DescribeApplicationImageRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationImageRequest) SetImageUrl(v string) *DescribeApplicationImageRequest {
	s.ImageUrl = &v
	return s
}

type DescribeApplicationImageResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the image of the application.
	Data *DescribeApplicationImageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the **Error codes*	- section in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information about the image was obtained. Valid values:
	//
	// 	- **true**: The information was obtained.
	//
	// 	- **false**: The information failed to be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeApplicationImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationImageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationImageResponseBody) SetCode(v string) *DescribeApplicationImageResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationImageResponseBody) SetData(v *DescribeApplicationImageResponseBodyData) *DescribeApplicationImageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeApplicationImageResponseBody) SetErrorCode(v string) *DescribeApplicationImageResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeApplicationImageResponseBody) SetMessage(v string) *DescribeApplicationImageResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationImageResponseBody) SetRequestId(v string) *DescribeApplicationImageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationImageResponseBody) SetSuccess(v bool) *DescribeApplicationImageResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeApplicationImageResponseBody) SetTraceId(v string) *DescribeApplicationImageResponseBody {
	s.TraceId = &v
	return s
}

type DescribeApplicationImageResponseBodyData struct {
	// This parameter is reserved.
	CrUrl *string `json:"CrUrl,omitempty" xml:"CrUrl,omitempty"`
	// This parameter is reserved.
	Logo *string `json:"Logo,omitempty" xml:"Logo,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the repository.
	//
	// example:
	//
	// demo
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The name of the namespace to which the image repository belongs.
	//
	// example:
	//
	// demo
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The type of the repository. Only Container Registry is supported.
	//
	// example:
	//
	// ALI_HUB
	RepoOriginType *string `json:"RepoOriginType,omitempty" xml:"RepoOriginType,omitempty"`
	// The tag of the image.
	//
	// example:
	//
	// latest
	RepoTag *string `json:"RepoTag,omitempty" xml:"RepoTag,omitempty"`
	// This parameter is reserved.
	RepoType *string `json:"RepoType,omitempty" xml:"RepoType,omitempty"`
}

func (s DescribeApplicationImageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationImageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeApplicationImageResponseBodyData) SetCrUrl(v string) *DescribeApplicationImageResponseBodyData {
	s.CrUrl = &v
	return s
}

func (s *DescribeApplicationImageResponseBodyData) SetLogo(v string) *DescribeApplicationImageResponseBodyData {
	s.Logo = &v
	return s
}

func (s *DescribeApplicationImageResponseBodyData) SetRegionId(v string) *DescribeApplicationImageResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeApplicationImageResponseBodyData) SetRepoName(v string) *DescribeApplicationImageResponseBodyData {
	s.RepoName = &v
	return s
}

func (s *DescribeApplicationImageResponseBodyData) SetRepoNamespace(v string) *DescribeApplicationImageResponseBodyData {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeApplicationImageResponseBodyData) SetRepoOriginType(v string) *DescribeApplicationImageResponseBodyData {
	s.RepoOriginType = &v
	return s
}

func (s *DescribeApplicationImageResponseBodyData) SetRepoTag(v string) *DescribeApplicationImageResponseBodyData {
	s.RepoTag = &v
	return s
}

func (s *DescribeApplicationImageResponseBodyData) SetRepoType(v string) *DescribeApplicationImageResponseBodyData {
	s.RepoType = &v
	return s
}

type DescribeApplicationImageResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApplicationImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApplicationImageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationImageResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationImageResponse) SetHeaders(v map[string]*string) *DescribeApplicationImageResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationImageResponse) SetStatusCode(v int32) *DescribeApplicationImageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationImageResponse) SetBody(v *DescribeApplicationImageResponseBody) *DescribeApplicationImageResponse {
	s.Body = v
	return s
}

type DescribeApplicationInstancesRequest struct {
	// d700e680-aa4d-4ec1-afc2-6566b5ff\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// d700e680-aa4d-4ec1-afc2-6566b5ff****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// 1
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// b2a8a925-477a-4ed7-b825-d5e22500\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// b2a8a925-477a-4ed7-b825-d5e22500****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// 10
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// true
	//
	// example:
	//
	// true
	Reverse *bool `json:"Reverse,omitempty" xml:"Reverse,omitempty"`
}

func (s DescribeApplicationInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationInstancesRequest) SetAppId(v string) *DescribeApplicationInstancesRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationInstancesRequest) SetCurrentPage(v int32) *DescribeApplicationInstancesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeApplicationInstancesRequest) SetGroupId(v string) *DescribeApplicationInstancesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApplicationInstancesRequest) SetPageSize(v int32) *DescribeApplicationInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApplicationInstancesRequest) SetReverse(v bool) *DescribeApplicationInstancesRequest {
	s.Reverse = &v
	return s
}

type DescribeApplicationInstancesResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the application instances.
	Data *DescribeApplicationInstancesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// - The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// - The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the list of application instances was obtained. Valid values:
	//
	// 	- **true**: indicates that the list was obtained.
	//
	// 	- **false**: indicates that the list could not be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeApplicationInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationInstancesResponseBody) SetCode(v string) *DescribeApplicationInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBody) SetData(v *DescribeApplicationInstancesResponseBodyData) *DescribeApplicationInstancesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeApplicationInstancesResponseBody) SetErrorCode(v string) *DescribeApplicationInstancesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBody) SetMessage(v string) *DescribeApplicationInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBody) SetRequestId(v string) *DescribeApplicationInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBody) SetSuccess(v bool) *DescribeApplicationInstancesResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBody) SetTraceId(v string) *DescribeApplicationInstancesResponseBody {
	s.TraceId = &v
	return s
}

type DescribeApplicationInstancesResponseBodyData struct {
	// The number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The list of application instances.
	Instances []*DescribeApplicationInstancesResponseBodyDataInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned instances.
	//
	// example:
	//
	// 10
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s DescribeApplicationInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeApplicationInstancesResponseBodyData) SetCurrentPage(v int32) *DescribeApplicationInstancesResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyData) SetInstances(v []*DescribeApplicationInstancesResponseBodyDataInstances) *DescribeApplicationInstancesResponseBodyData {
	s.Instances = v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyData) SetPageSize(v int32) *DescribeApplicationInstancesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyData) SetTotalSize(v int32) *DescribeApplicationInstancesResponseBodyData {
	s.TotalSize = &v
	return s
}

type DescribeApplicationInstancesResponseBodyDataInstances struct {
	// The start time of the instance creation process. Unit: milliseconds.
	//
	// example:
	//
	// 1558442609000
	CreateTimeStamp *int64 `json:"CreateTimeStamp,omitempty" xml:"CreateTimeStamp,omitempty"`
	DebugStatus     *bool  `json:"DebugStatus,omitempty" xml:"DebugStatus,omitempty"`
	// The elastic IP address (EIP).
	//
	// example:
	//
	// 8.129.XX.XXX
	Eip *string `json:"Eip,omitempty" xml:"Eip,omitempty"`
	// The end time of the instance creation process. Unit: milliseconds.
	//
	// example:
	//
	// 1642757283000
	FinishTimeStamp *int64 `json:"FinishTimeStamp,omitempty" xml:"FinishTimeStamp,omitempty"`
	// The ID of the group to which the instance belongs.
	//
	// example:
	//
	// b2a8a925-477a-4ed7-b825-d5e22500****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The address of the repository.
	//
	// >  If you deploy the application by using a JAR or WAR package, the image generated by SAE is not available for download.
	//
	// example:
	//
	// registry-vpc.cn-beijing.aliyuncs.com/sae-demo-image/cartservice:1.0
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// The internal IP address of the instance.
	//
	// example:
	//
	// 192.168.X.X
	InstanceContainerIp *string `json:"InstanceContainerIp,omitempty" xml:"InstanceContainerIp,omitempty"`
	// The number of times that the instance restarted.
	//
	// example:
	//
	// 0
	InstanceContainerRestarts *int64 `json:"InstanceContainerRestarts,omitempty" xml:"InstanceContainerRestarts,omitempty"`
	// The state of the instance. Valid values:
	//
	// 	- **Error**: An error occurred during the instance startup.
	//
	// 	- **CrashLoopBackOff**: The container failed to start. An error occurred during the startup process and persisted after the restart.
	//
	// 	- **ErrImagePull**: An error occurred while the container image was being pulled from the instance.
	//
	// 	- **ImagePullBackOff**: The container image could not be obtained.
	//
	// 	- **Pending**: The instance is waiting to be scheduled.
	//
	// 	- **Unknown**: An unknown exception occurred.
	//
	// 	- **Terminating**: The instance creation process is being terminated.
	//
	// 	- **NotFound**: The instance cannot be found.
	//
	// 	- **PodInitializing**: The instance is being initialized.
	//
	// 	- **Init:0/1**: The instance is initialized.
	//
	// 	- **Running**: The instance is running.
	//
	// example:
	//
	// Running
	InstanceContainerStatus *string `json:"InstanceContainerStatus,omitempty" xml:"InstanceContainerStatus,omitempty"`
	// The configurations of health checks. Valid values:
	//
	// 	- **WithoutHealthCheckConfig**: Liveness and readiness checks are not configured.
	//
	// 	- **WithoutLivenessConfig**: The liveness check is not configured.
	//
	// 	- **WithoutReadinessConfig**: The readiness check is not configured.
	//
	// 	- **NotCheckedYet**: The health checks are not performed or are in progress.
	//
	// 	- **LivenessUnhealthy**: The instance failed the liveness check.
	//
	// 	- **ReadinessUnhealthy**: The instance failed the readiness check.
	//
	// 	- **Unhealthy**: The instance failed both liveness and readiness checks.
	//
	// 	- **Healthy**: The instance passed both liveness and readiness checks.
	//
	// example:
	//
	// WithoutHealthCheckConfig
	InstanceHealthStatus *string `json:"InstanceHealthStatus,omitempty" xml:"InstanceHealthStatus,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// b2a8a925-477a-4ed7-b825-d5e22500****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The version of the package.
	//
	// example:
	//
	// 1609939496200
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	// The ID of the zone where the instance is deployed.
	//
	// example:
	//
	// vsw-***
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeApplicationInstancesResponseBodyDataInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationInstancesResponseBodyDataInstances) GoString() string {
	return s.String()
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetCreateTimeStamp(v int64) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.CreateTimeStamp = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetDebugStatus(v bool) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.DebugStatus = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetEip(v string) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.Eip = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetFinishTimeStamp(v int64) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.FinishTimeStamp = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetGroupId(v string) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.GroupId = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetImageUrl(v string) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.ImageUrl = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetInstanceContainerIp(v string) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.InstanceContainerIp = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetInstanceContainerRestarts(v int64) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.InstanceContainerRestarts = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetInstanceContainerStatus(v string) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.InstanceContainerStatus = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetInstanceHealthStatus(v string) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.InstanceHealthStatus = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetInstanceId(v string) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetPackageVersion(v string) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.PackageVersion = &v
	return s
}

func (s *DescribeApplicationInstancesResponseBodyDataInstances) SetVSwitchId(v string) *DescribeApplicationInstancesResponseBodyDataInstances {
	s.VSwitchId = &v
	return s
}

type DescribeApplicationInstancesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApplicationInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApplicationInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationInstancesResponse) SetHeaders(v map[string]*string) *DescribeApplicationInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationInstancesResponse) SetStatusCode(v int32) *DescribeApplicationInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationInstancesResponse) SetBody(v *DescribeApplicationInstancesResponseBody) *DescribeApplicationInstancesResponse {
	s.Body = v
	return s
}

type DescribeApplicationScalingRuleRequest struct {
	// a0d2e04c-159d-40a8-b240-d2f2c263\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// a0d2e04c-159d-40a8-b240-d2f2c263****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// test
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s DescribeApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleRequest) SetAppId(v string) *DescribeApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationScalingRuleRequest) SetScalingRuleName(v string) *DescribeApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

type DescribeApplicationScalingRuleResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data      *DescribeApplicationScalingRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                                         `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 73404D3D-EE4F-4CB2-B197-5C46F6A1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// 0b57ff7e16243300839193068e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBody) SetCode(v string) *DescribeApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBody) SetData(v *DescribeApplicationScalingRuleResponseBodyData) *DescribeApplicationScalingRuleResponseBody {
	s.Data = v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBody) SetErrorCode(v string) *DescribeApplicationScalingRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBody) SetMessage(v string) *DescribeApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBody) SetRequestId(v string) *DescribeApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBody) SetSuccess(v bool) *DescribeApplicationScalingRuleResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBody) SetTraceId(v string) *DescribeApplicationScalingRuleResponseBody {
	s.TraceId = &v
	return s
}

type DescribeApplicationScalingRuleResponseBodyData struct {
	// The ID of the application.
	//
	// example:
	//
	// a0d2e04c-159d-40a8-b240-d2f2c263****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The time when the auto scaling policy was created. Unit: milliseconds.
	//
	// example:
	//
	// 1624329843790
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EnableIdle *bool  `json:"EnableIdle,omitempty" xml:"EnableIdle,omitempty"`
	// The time when the auto scaling policy was last disabled.
	//
	// example:
	//
	// 1641882854484
	LastDisableTime *int64 `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty"`
	// The details of the metric-based auto scaling policy.
	Metric                *DescribeApplicationScalingRuleResponseBodyDataMetric `json:"Metric,omitempty" xml:"Metric,omitempty" type:"Struct"`
	MinReadyInstanceRatio *int32                                                `json:"MinReadyInstanceRatio,omitempty" xml:"MinReadyInstanceRatio,omitempty"`
	MinReadyInstances     *int32                                                `json:"MinReadyInstances,omitempty" xml:"MinReadyInstances,omitempty"`
	// Indicates whether the auto scaling policy is enabled. Valid values:
	//
	// 	- **true**: enabled
	//
	// 	- **false**: disabled
	//
	// example:
	//
	// true
	ScaleRuleEnabled *bool `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	// The name of the auto scaling policy.
	//
	// example:
	//
	// test
	ScaleRuleName *string `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty"`
	// The type of the auto scaling policy. Valid values:
	//
	// 	- **timing**: the scheduled auto scaling policy.
	//
	// 	- **metric**: the metric-based auto scaling policy.
	//
	// 	- **mix**: the hybrid auto scaling policy.
	//
	// example:
	//
	// timing
	ScaleRuleType *string `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	// The details of the scheduled auto scaling policy.
	Timer *DescribeApplicationScalingRuleResponseBodyDataTimer `json:"Timer,omitempty" xml:"Timer,omitempty" type:"Struct"`
	// The time when the auto scaling policy was updated. Unit: milliseconds.
	//
	// example:
	//
	// 1624330075827
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeApplicationScalingRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetAppId(v string) *DescribeApplicationScalingRuleResponseBodyData {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetCreateTime(v int64) *DescribeApplicationScalingRuleResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetEnableIdle(v bool) *DescribeApplicationScalingRuleResponseBodyData {
	s.EnableIdle = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetLastDisableTime(v int64) *DescribeApplicationScalingRuleResponseBodyData {
	s.LastDisableTime = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetMetric(v *DescribeApplicationScalingRuleResponseBodyDataMetric) *DescribeApplicationScalingRuleResponseBodyData {
	s.Metric = v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetMinReadyInstanceRatio(v int32) *DescribeApplicationScalingRuleResponseBodyData {
	s.MinReadyInstanceRatio = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetMinReadyInstances(v int32) *DescribeApplicationScalingRuleResponseBodyData {
	s.MinReadyInstances = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetScaleRuleEnabled(v bool) *DescribeApplicationScalingRuleResponseBodyData {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetScaleRuleName(v string) *DescribeApplicationScalingRuleResponseBodyData {
	s.ScaleRuleName = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetScaleRuleType(v string) *DescribeApplicationScalingRuleResponseBodyData {
	s.ScaleRuleType = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetTimer(v *DescribeApplicationScalingRuleResponseBodyDataTimer) *DescribeApplicationScalingRuleResponseBodyData {
	s.Timer = v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyData) SetUpdateTime(v int64) *DescribeApplicationScalingRuleResponseBodyData {
	s.UpdateTime = &v
	return s
}

type DescribeApplicationScalingRuleResponseBodyDataMetric struct {
	// The maximum number of instances.
	//
	// example:
	//
	// 3
	MaxReplicas *int32 `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	// The list of metrics that are used to trigger the auto scaling policy.
	Metrics []*DescribeApplicationScalingRuleResponseBodyDataMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	// The execution status of the metric-based auto scaling policy.
	MetricsStatus *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus `json:"MetricsStatus,omitempty" xml:"MetricsStatus,omitempty" type:"Struct"`
	// The minimum number of instances.
	//
	// example:
	//
	// 1
	MinReplicas *int32 `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	// Rules that determine the application scale-in.
	ScaleDownRules *DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules `json:"ScaleDownRules,omitempty" xml:"ScaleDownRules,omitempty" type:"Struct"`
	// Rules that determine the application scale-out.
	ScaleUpRules *DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules `json:"ScaleUpRules,omitempty" xml:"ScaleUpRules,omitempty" type:"Struct"`
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetric) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetric) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetric) SetMaxReplicas(v int32) *DescribeApplicationScalingRuleResponseBodyDataMetric {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetric) SetMetrics(v []*DescribeApplicationScalingRuleResponseBodyDataMetricMetrics) *DescribeApplicationScalingRuleResponseBodyDataMetric {
	s.Metrics = v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetric) SetMetricsStatus(v *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus) *DescribeApplicationScalingRuleResponseBodyDataMetric {
	s.MetricsStatus = v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetric) SetMinReplicas(v int32) *DescribeApplicationScalingRuleResponseBodyDataMetric {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetric) SetScaleDownRules(v *DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules) *DescribeApplicationScalingRuleResponseBodyDataMetric {
	s.ScaleDownRules = v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetric) SetScaleUpRules(v *DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules) *DescribeApplicationScalingRuleResponseBodyDataMetric {
	s.ScaleUpRules = v
	return s
}

type DescribeApplicationScalingRuleResponseBodyDataMetricMetrics struct {
	// The limit on the metric.
	//
	// 	- The limit on the CPU utilization. Unit: percentage.
	//
	// 	- The limit on the memory usage. Unit: percentage.
	//
	// 	- The limit on the average number of active TCP connections per second.
	//
	// 	- The limit on the QPS of the Internet-facing SLB instance.
	//
	// 	- The limit on the response time of the Internet-facing SLB instance. Unit: milliseconds.
	//
	// example:
	//
	// 20
	MetricTargetAverageUtilization *int32 `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty"`
	// The metric that is used to trigger the auto scaling policy. Valid values:
	//
	// 	- **CPU**: the CPU utilization.
	//
	// 	- **MEMORY**: the memory usage.
	//
	// 	- **tcpActiveConn**: the average number of active TCP connections for an instance in 30 seconds.
	//
	// 	- **SLB_QPS**: the average QPS of the Internet-facing SLB instance associated with an application instance in 15 seconds.
	//
	// 	- **SLB_RT**: the average response time of the Internet-facing SLB instance in 15 seconds.
	//
	// example:
	//
	// CPU
	MetricType  *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	SlbId       *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbLogstore *string `json:"SlbLogstore,omitempty" xml:"SlbLogstore,omitempty"`
	SlbProject  *string `json:"SlbProject,omitempty" xml:"SlbProject,omitempty"`
	Vport       *string `json:"Vport,omitempty" xml:"Vport,omitempty"`
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricMetrics) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics) SetMetricTargetAverageUtilization(v int32) *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics) SetMetricType(v string) *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.MetricType = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics) SetSlbId(v string) *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.SlbId = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics) SetSlbLogstore(v string) *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.SlbLogstore = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics) SetSlbProject(v string) *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.SlbProject = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics) SetVport(v string) *DescribeApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.Vport = &v
	return s
}

type DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus struct {
	// The metrics that is used to trigger the current auto scaling policy.
	CurrentMetrics []*DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics `json:"CurrentMetrics,omitempty" xml:"CurrentMetrics,omitempty" type:"Repeated"`
	// The current number of instances.
	//
	// example:
	//
	// 2
	CurrentReplicas *int64 `json:"CurrentReplicas,omitempty" xml:"CurrentReplicas,omitempty"`
	// The expected number of instances.
	//
	// example:
	//
	// 2
	DesiredReplicas *int64 `json:"DesiredReplicas,omitempty" xml:"DesiredReplicas,omitempty"`
	// The time when the auto scaling policy was last triggered.
	//
	// example:
	//
	// 2022-01-11T08:14:32Z
	LastScaleTime *string `json:"LastScaleTime,omitempty" xml:"LastScaleTime,omitempty"`
	// The metrics that are used to trigger the auto scaling policy next time.
	NextScaleMetrics []*DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics `json:"NextScaleMetrics,omitempty" xml:"NextScaleMetrics,omitempty" type:"Repeated"`
	// The duration for which the metric-based auto scaling policy takes effect next time.
	//
	// example:
	//
	// 3
	NextScaleTimePeriod *int32 `json:"NextScaleTimePeriod,omitempty" xml:"NextScaleTimePeriod,omitempty"`
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus) SetCurrentMetrics(v []*DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus {
	s.CurrentMetrics = v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus) SetCurrentReplicas(v int64) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus {
	s.CurrentReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus) SetDesiredReplicas(v int64) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus {
	s.DesiredReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus) SetLastScaleTime(v string) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus {
	s.LastScaleTime = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus) SetNextScaleMetrics(v []*DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus {
	s.NextScaleMetrics = v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus) SetNextScaleTimePeriod(v int32) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatus {
	s.NextScaleTimePeriod = &v
	return s
}

type DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics struct {
	// The current value of the metric.
	//
	// example:
	//
	// 0
	CurrentValue *int64 `json:"CurrentValue,omitempty" xml:"CurrentValue,omitempty"`
	// The name of the metric.
	//
	// 	- **cpu**: the CPU utilization.
	//
	// 	- **memory**: the memory usage.
	//
	// 	- **tcpActiveConn**: the number of active TCP connections.
	//
	// 	- **slb_incall_qps**: the QPS of the Internet-facing SLB instance.
	//
	// 	- **slb_incall_rt**: the response time of the Internet-facing SLB instance.
	//
	// example:
	//
	// cpu
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the data. This parameter corresponds to the metric.
	//
	// 	- **Resource**: used when the metric is the **CPU utilization*	- or **memory usage**.
	//
	// 	- **Pods**: used when the metric is the **number of active TCP connections**.
	//
	// 	- **External**: used when the metric is about the **SLB*	- instance or from **Application Real-Time Monitoring Service (ARMS)**.
	//
	// example:
	//
	// Resource
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics) SetCurrentValue(v int64) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics {
	s.CurrentValue = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics) SetName(v string) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics {
	s.Name = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics) SetType(v string) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusCurrentMetrics {
	s.Type = &v
	return s
}

type DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics struct {
	// The name of the metric.
	//
	// 	- **cpu**: the CPU utilization.
	//
	// 	- **memory**: the memory usage.
	//
	// 	- **tcpActiveConn**: the number of active TCP connections.
	//
	// 	- **slb_incall_qps**: the QPS of the Internet-facing SLB instance.
	//
	// 	- **slb_incall_rt**: the response time of the Internet-facing SLB instance.
	//
	// example:
	//
	// cpu
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The metric value as a percentage that triggers the application scale-in next time.
	//
	// example:
	//
	// 10
	NextScaleInAverageUtilization *int32 `json:"NextScaleInAverageUtilization,omitempty" xml:"NextScaleInAverageUtilization,omitempty"`
	// The metric value as a percentage that triggers the application scale-out next time.
	//
	// example:
	//
	// 21
	NextScaleOutAverageUtilization *int32 `json:"NextScaleOutAverageUtilization,omitempty" xml:"NextScaleOutAverageUtilization,omitempty"`
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics) SetName(v string) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics {
	s.Name = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics) SetNextScaleInAverageUtilization(v int32) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics {
	s.NextScaleInAverageUtilization = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics) SetNextScaleOutAverageUtilization(v int32) *DescribeApplicationScalingRuleResponseBodyDataMetricMetricsStatusNextScaleMetrics {
	s.NextScaleOutAverageUtilization = &v
	return s
}

type DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules struct {
	// Indicates whether the application scale-in is disabled. Valid values:
	//
	// 	- **true**: disabled.
	//
	// 	- **false**: enabled.
	//
	// >  When this parameter is set to true, the application instances are never reduced. This prevents risks to your business in peak hours. By default, this parameter is set to false.
	//
	// example:
	//
	// false
	Disabled *bool `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	// The cooldown time of the scale-in. Valid values: 0 to 3600. Unit: seconds. Default value: 0.
	//
	// example:
	//
	// 300
	StabilizationWindowSeconds *int64 `json:"StabilizationWindowSeconds,omitempty" xml:"StabilizationWindowSeconds,omitempty"`
	// The step size for the scale-in. The maximum number of instances that can be reduced within a specific period of time.
	//
	// example:
	//
	// 100
	Step *int64 `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules) SetDisabled(v bool) *DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules {
	s.Disabled = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules) SetStabilizationWindowSeconds(v int64) *DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules {
	s.StabilizationWindowSeconds = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules) SetStep(v int64) *DescribeApplicationScalingRuleResponseBodyDataMetricScaleDownRules {
	s.Step = &v
	return s
}

type DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules struct {
	// Indicates whether the application scale-in is disabled. Valid values:
	//
	// 	- **true**: The application scale-in is disabled.
	//
	// 	- **false**: The application scale-in is enabled.
	//
	// >  When this parameter is set to true, the application instances are never reduced. This prevents risks to your business in peak hours. By default, this parameter is set to false.
	//
	// example:
	//
	// false
	Disabled *bool `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	// The cooldown time of the scale-out. Valid values: 0 to 3600. Unit: seconds. Default value: 0.
	//
	// example:
	//
	// 300
	StabilizationWindowSeconds *int64 `json:"StabilizationWindowSeconds,omitempty" xml:"StabilizationWindowSeconds,omitempty"`
	// The step size for the scale-out. The maximum number of instances that can be added within a specific period of time.
	//
	// example:
	//
	// 100
	Step *int64 `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules) SetDisabled(v bool) *DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules {
	s.Disabled = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules) SetStabilizationWindowSeconds(v int64) *DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules {
	s.StabilizationWindowSeconds = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules) SetStep(v int64) *DescribeApplicationScalingRuleResponseBodyDataMetricScaleUpRules {
	s.Step = &v
	return s
}

type DescribeApplicationScalingRuleResponseBodyDataTimer struct {
	// The start date of the validity period of the scheduled auto scaling policy. Valid values:
	//
	// 	- If both the **BeginDate*	- and **EndDate*	- parameters are set to **null**, the auto scaling policy can always be triggered. The default value for these parameters is null.
	//
	// 	- If the two parameters are set to specific dates, the scheduled auto scaling policy can be triggered during the period between the two dates. For example, if **BeginDate*	- is **2021-03-25*	- and **EndDate*	- is **2021-04-25**, the auto scaling policy is valid for one month.
	//
	// example:
	//
	// 2021-03-25
	BeginDate *string `json:"BeginDate,omitempty" xml:"BeginDate,omitempty"`
	// The end date of the validity period of the scheduled auto scaling policy. Valid values:
	//
	// 	- If both the **BeginDate*	- and **EndDate*	- parameters are set to **null**, the auto scaling policy can always be triggered. The default value for these parameters is null.
	//
	// 	- If the two parameters are set to specific dates, the scheduled auto scaling policy can be triggered during the period between the two dates. For example, if **BeginDate*	- is **2021-03-25*	- and **EndDate*	- is **2021-04-25**, the auto scaling policy is valid for one month.
	//
	// example:
	//
	// 2021-04-25
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// The days on which the scheduled auto scaling policy takes effect. Valid values:
	//
	// 	- **\\	- \\	- \\***: The scheduled auto scaling policy takes effect at a specified time every day.
	//
	// 	- **\\	- \\	- Fri,Mon**: The scheduled auto scaling policy takes effect at a specified time on one or multiple days of a week. The specified time is in the GMT+8 time zone. Valid values:
	//
	//     	- **Sun**: Sunday
	//
	//     	- **Mon**: Monday
	//
	//     	- **Tue**: Tuesday
	//
	//     	- **Wed**: Wednesday
	//
	//     	- **Thu**: Thursday
	//
	//     	- **Fri**: Friday
	//
	//     	- **Sat**: Saturday
	//
	// 	- **1,2,3,28,31 \\	- \\***: The scheduled auto scaling policy takes effect at a specified time on one or multiple days of a month. Valid values: 1 to 31. If the month does not have a 31st day, the auto scaling policy takes effect on the specified days other than the 31st day.
	//
	// example:
	//
	// 	- 	- *
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The points in time when the auto scaling policy is triggered within one day.
	Schedules []*DescribeApplicationScalingRuleResponseBodyDataTimerSchedules `json:"Schedules,omitempty" xml:"Schedules,omitempty" type:"Repeated"`
}

func (s DescribeApplicationScalingRuleResponseBodyDataTimer) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyDataTimer) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyDataTimer) SetBeginDate(v string) *DescribeApplicationScalingRuleResponseBodyDataTimer {
	s.BeginDate = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataTimer) SetEndDate(v string) *DescribeApplicationScalingRuleResponseBodyDataTimer {
	s.EndDate = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataTimer) SetPeriod(v string) *DescribeApplicationScalingRuleResponseBodyDataTimer {
	s.Period = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataTimer) SetSchedules(v []*DescribeApplicationScalingRuleResponseBodyDataTimerSchedules) *DescribeApplicationScalingRuleResponseBodyDataTimer {
	s.Schedules = v
	return s
}

type DescribeApplicationScalingRuleResponseBodyDataTimerSchedules struct {
	// The point in time. Format: **Hour:Minute**.
	//
	// example:
	//
	// 08:00
	AtTime      *string `json:"AtTime,omitempty" xml:"AtTime,omitempty"`
	MaxReplicas *int32  `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	MinReplicas *int32  `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	// The expected number of instances.
	//
	// example:
	//
	// 2
	TargetReplicas *int32 `json:"TargetReplicas,omitempty" xml:"TargetReplicas,omitempty"`
}

func (s DescribeApplicationScalingRuleResponseBodyDataTimerSchedules) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyDataTimerSchedules) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyDataTimerSchedules) SetAtTime(v string) *DescribeApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.AtTime = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataTimerSchedules) SetMaxReplicas(v int32) *DescribeApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataTimerSchedules) SetMinReplicas(v int32) *DescribeApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyDataTimerSchedules) SetTargetReplicas(v int32) *DescribeApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.TargetReplicas = &v
	return s
}

type DescribeApplicationScalingRuleResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *DescribeApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationScalingRuleResponse) SetStatusCode(v int32) *DescribeApplicationScalingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponse) SetBody(v *DescribeApplicationScalingRuleResponseBody) *DescribeApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type DescribeApplicationScalingRulesRequest struct {
	// 7171a6ca-d1cd-4928-8642-7d5cfe69\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DescribeApplicationScalingRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesRequest) SetAppId(v string) *DescribeApplicationScalingRulesRequest {
	s.AppId = &v
	return s
}

type DescribeApplicationScalingRulesResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data      *DescribeApplicationScalingRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                                          `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBody) SetCode(v string) *DescribeApplicationScalingRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetData(v *DescribeApplicationScalingRulesResponseBodyData) *DescribeApplicationScalingRulesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetErrorCode(v string) *DescribeApplicationScalingRulesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetMessage(v string) *DescribeApplicationScalingRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetRequestId(v string) *DescribeApplicationScalingRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetSuccess(v bool) *DescribeApplicationScalingRulesResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetTraceId(v string) *DescribeApplicationScalingRulesResponseBody {
	s.TraceId = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyData struct {
	// The auto scaling policies of the application.
	ApplicationScalingRules []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules `json:"ApplicationScalingRules,omitempty" xml:"ApplicationScalingRules,omitempty" type:"Repeated"`
	// The number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of auto scaling policies.
	//
	// example:
	//
	// 3
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyData) SetApplicationScalingRules(v []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) *DescribeApplicationScalingRulesResponseBodyData {
	s.ApplicationScalingRules = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyData) SetCurrentPage(v int32) *DescribeApplicationScalingRulesResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyData) SetPageSize(v int32) *DescribeApplicationScalingRulesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyData) SetTotalSize(v int32) *DescribeApplicationScalingRulesResponseBodyData {
	s.TotalSize = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules struct {
	// The ID of the application.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The time when the auto scaling policy was created. Unit: milliseconds.
	//
	// example:
	//
	// 1616642248938
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EnableIdle *bool  `json:"EnableIdle,omitempty" xml:"EnableIdle,omitempty"`
	// The time when the auto scaling policy was last disabled.
	//
	// example:
	//
	// 1641882854484
	LastDisableTime *int64 `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty"`
	// The details of the metric-based auto scaling policy.
	Metric                *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric `json:"Metric,omitempty" xml:"Metric,omitempty" type:"Struct"`
	MinReadyInstanceRatio *int32                                                                        `json:"MinReadyInstanceRatio,omitempty" xml:"MinReadyInstanceRatio,omitempty"`
	MinReadyInstances     *int32                                                                        `json:"MinReadyInstances,omitempty" xml:"MinReadyInstances,omitempty"`
	// Indicates whether the auto scaling policy is enabled. Valid values:
	//
	// 	- **true**: enabled
	//
	// 	- **false**: disabled
	//
	// example:
	//
	// true
	ScaleRuleEnabled *bool `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	// The name of the auto scaling policy.
	//
	// example:
	//
	// test
	ScaleRuleName *string `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty"`
	// The type of the auto scaling policy. Valid values:
	//
	// 	- **timing**: the scheduled auto scaling policy.
	//
	// 	- **metric**: the metric-based auto scaling policy.
	//
	// 	- **mix**: the hybrid auto scaling policy.
	//
	// example:
	//
	// timing
	ScaleRuleType *string `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	// The details of the scheduled auto scaling policy.
	Timer *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer `json:"Timer,omitempty" xml:"Timer,omitempty" type:"Struct"`
	// The time when the auto scaling policy was updated. Unit: milliseconds.
	//
	// example:
	//
	// 1616642248938
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetAppId(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetCreateTime(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.CreateTime = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetEnableIdle(v bool) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.EnableIdle = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetLastDisableTime(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.LastDisableTime = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetMetric(v *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.Metric = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetMinReadyInstanceRatio(v int32) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.MinReadyInstanceRatio = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetMinReadyInstances(v int32) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.MinReadyInstances = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetScaleRuleEnabled(v bool) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetScaleRuleName(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.ScaleRuleName = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetScaleRuleType(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.ScaleRuleType = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetTimer(v *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.Timer = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules) SetUpdateTime(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRules {
	s.UpdateTime = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric struct {
	// The maximum number of instances.
	//
	// example:
	//
	// 3
	MaxReplicas *int32 `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	// The list of metrics that are used to trigger the auto scaling policy.
	Metrics []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	// The execution status of the metric-based auto scaling policy.
	MetricsStatus *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus `json:"MetricsStatus,omitempty" xml:"MetricsStatus,omitempty" type:"Struct"`
	// The minimum number of instances.
	//
	// example:
	//
	// 1
	MinReplicas *int32 `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	// Rules that determine the application scale-in.
	ScaleDownRules *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules `json:"ScaleDownRules,omitempty" xml:"ScaleDownRules,omitempty" type:"Struct"`
	// Rules that determine the application scale-out.
	ScaleUpRules *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules `json:"ScaleUpRules,omitempty" xml:"ScaleUpRules,omitempty" type:"Struct"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric) SetMaxReplicas(v int32) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric) SetMetrics(v []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric {
	s.Metrics = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric) SetMetricsStatus(v *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric {
	s.MetricsStatus = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric) SetMinReplicas(v int32) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric) SetScaleDownRules(v *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric {
	s.ScaleDownRules = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric) SetScaleUpRules(v *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetric {
	s.ScaleUpRules = v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics struct {
	// The limit on the metric.
	//
	// 	- The limit on the CPU utilization. Unit: percentage.
	//
	// 	- The limit on the memory usage. Unit: percentage.
	//
	// 	- The limit on the average number of active TCP connections per second.
	//
	// 	- The limit on the queries per second (QPS) of the Internet-facing Server Load Balancer (SLB) instance.
	//
	// 	- The limit on the response time of the Internet-facing SLB instance. Unit: milliseconds.
	//
	// example:
	//
	// 20
	MetricTargetAverageUtilization *int32 `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty"`
	// The metric that is used to trigger the auto scaling policy. Valid values:
	//
	// 	- **CPU**: the CPU utilization.
	//
	// 	- **MEMORY**: the memory usage.
	//
	// 	- **tcpActiveConn**: the average number of active TCP connections per second of an application instance in 30 seconds.
	//
	// 	- **SLB_QPS**: the average QPS of the Internet-facing SLB instance associated with an application instance in 15 seconds.
	//
	// 	- **SLB_RT**: the average response time of the Internet-facing SLB instance in 15 seconds.
	//
	// example:
	//
	// CPU
	MetricType  *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	SlbId       *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbLogstore *string `json:"SlbLogstore,omitempty" xml:"SlbLogstore,omitempty"`
	SlbProject  *string `json:"SlbProject,omitempty" xml:"SlbProject,omitempty"`
	Vport       *string `json:"Vport,omitempty" xml:"Vport,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics) SetMetricTargetAverageUtilization(v int32) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics) SetMetricType(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics {
	s.MetricType = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics) SetSlbId(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics {
	s.SlbId = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics) SetSlbLogstore(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics {
	s.SlbLogstore = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics) SetSlbProject(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics {
	s.SlbProject = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics) SetVport(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetrics {
	s.Vport = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus struct {
	// The metrics that are used to trigger the auto scaling policy this time.
	CurrentMetrics []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics `json:"CurrentMetrics,omitempty" xml:"CurrentMetrics,omitempty" type:"Repeated"`
	// The current number of instances.
	//
	// example:
	//
	// 2
	CurrentReplicas *int64 `json:"CurrentReplicas,omitempty" xml:"CurrentReplicas,omitempty"`
	// The expected number of instances.
	//
	// example:
	//
	// 2
	DesiredReplicas *int64 `json:"DesiredReplicas,omitempty" xml:"DesiredReplicas,omitempty"`
	// The time when the auto scaling policy was last triggered.
	//
	// example:
	//
	// 2022-01-11T08:14:32Z
	LastScaleTime *string `json:"LastScaleTime,omitempty" xml:"LastScaleTime,omitempty"`
	// The maximum number of instances.
	//
	// example:
	//
	// 3
	MaxReplicas *int64 `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	// The minimum number of instances.
	//
	// example:
	//
	// 1
	MinReplicas *int64 `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	// The metrics that are used to trigger the auto scaling policy next time.
	NextScaleMetrics []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics `json:"NextScaleMetrics,omitempty" xml:"NextScaleMetrics,omitempty" type:"Repeated"`
	// The duration for which the metric-based auto scaling policy takes effect next time.
	//
	// example:
	//
	// 3
	NextScaleTimePeriod *int32 `json:"NextScaleTimePeriod,omitempty" xml:"NextScaleTimePeriod,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) SetCurrentMetrics(v []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus {
	s.CurrentMetrics = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) SetCurrentReplicas(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus {
	s.CurrentReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) SetDesiredReplicas(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus {
	s.DesiredReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) SetLastScaleTime(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus {
	s.LastScaleTime = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) SetMaxReplicas(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) SetMinReplicas(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) SetNextScaleMetrics(v []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus {
	s.NextScaleMetrics = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus) SetNextScaleTimePeriod(v int32) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatus {
	s.NextScaleTimePeriod = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics struct {
	// The current value of the metric.
	//
	// example:
	//
	// 0
	CurrentValue *int64 `json:"CurrentValue,omitempty" xml:"CurrentValue,omitempty"`
	// The name of the metric.
	//
	// 	- **cpu**: the CPU utilization.
	//
	// 	- **memory**: the memory usage.
	//
	// 	- **tcpActiveConn**: the number of active TCP connections.
	//
	// 	- **slb_incall_qps**: the QPS of the Internet-facing SLB instance.
	//
	// 	- **slb_incall_rt**: the response time of the Internet-facing SLB instance.
	//
	// example:
	//
	// cpu
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the data. This parameter corresponds to the metric.
	//
	// 	- **Resource**: used when the metric is the **CPU utilization*	- or **memory usage**.
	//
	// 	- **Pods**: used when the metric is the **number of active TCP connections**.
	//
	// 	- **External**: used when the metric is about the **SLB*	- instance or from **Application Real-Time Monitoring Service (ARMS)**.
	//
	// example:
	//
	// Resource
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics) SetCurrentValue(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics {
	s.CurrentValue = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics) SetName(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics {
	s.Name = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics) SetType(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusCurrentMetrics {
	s.Type = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics struct {
	// The name of the metric.
	//
	// 	- **cpu**: the CPU utilization.
	//
	// 	- **memory**: the memory usage.
	//
	// 	- **tcpActiveConn**: the number of active TCP connections.
	//
	// 	- **slb_incall_qps**: the QPS of the Internet-facing SLB instance.
	//
	// 	- **slb_incall_rt**: the response time of the Internet-facing SLB instance.
	//
	// example:
	//
	// cpu
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The metric value as a percentage that triggers the application scale-in next time.
	//
	// example:
	//
	// 10
	NextScaleInAverageUtilization *int32 `json:"NextScaleInAverageUtilization,omitempty" xml:"NextScaleInAverageUtilization,omitempty"`
	// The metric value as a percentage that triggers the application scale-out next time.
	//
	// example:
	//
	// 21
	NextScaleOutAverageUtilization *int32 `json:"NextScaleOutAverageUtilization,omitempty" xml:"NextScaleOutAverageUtilization,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics) SetName(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics {
	s.Name = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics) SetNextScaleInAverageUtilization(v int32) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics {
	s.NextScaleInAverageUtilization = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics) SetNextScaleOutAverageUtilization(v int32) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricMetricsStatusNextScaleMetrics {
	s.NextScaleOutAverageUtilization = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules struct {
	// Indicates whether the application scale-in was disabled. Valid values:
	//
	// 	- **true**: The application scale-in was disabled.
	//
	// 	- **false**: The application scale-in was enabled.
	//
	// >  When this parameter is set to true, the application instances will never be reduced. This prevents risks to your business in peak hours. By default, this parameter is set to false.
	//
	// example:
	//
	// false
	Disabled *bool `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	// The cooldown time of the scale-in. Valid values: 0 to 3600. Unit: seconds. The default value is 0.
	//
	// example:
	//
	// 300
	StabilizationWindowSeconds *int64 `json:"StabilizationWindowSeconds,omitempty" xml:"StabilizationWindowSeconds,omitempty"`
	// The step size for the scale-in. The maximum number of instances that can be reduced in a unit of time.
	//
	// example:
	//
	// 100
	Step *int64 `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules) SetDisabled(v bool) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules {
	s.Disabled = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules) SetStabilizationWindowSeconds(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules {
	s.StabilizationWindowSeconds = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules) SetStep(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleDownRules {
	s.Step = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules struct {
	// Indicates whether the application scale-in was disabled. Valid values:
	//
	// 	- **true**: The application scale-in was disabled.
	//
	// 	- **false**: The application scale-in was enabled.
	//
	// >  When this parameter is set to true, the application instances will never be reduced. This prevents risks to your business in peak hours. By default, this parameter is set to false.
	//
	// example:
	//
	// false
	Disabled *bool `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	// The cooldown time of the scale-out. Valid values: 0 to 3600. Unit: seconds. The default value is 0.
	//
	// example:
	//
	// 300
	StabilizationWindowSeconds *int64 `json:"StabilizationWindowSeconds,omitempty" xml:"StabilizationWindowSeconds,omitempty"`
	// The step size for the scale-out. The maximum number of instances that can be added in a unit of time.
	//
	// example:
	//
	// 100
	Step *int64 `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules) SetDisabled(v bool) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules {
	s.Disabled = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules) SetStabilizationWindowSeconds(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules {
	s.StabilizationWindowSeconds = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules) SetStep(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesMetricScaleUpRules {
	s.Step = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer struct {
	// The start date of the validity period of the scheduled auto scaling policy. Valid values:
	//
	// 	- If both the **BeginDate*	- and **EndDate*	- parameters are set to **null**, the auto scaling policy can always be triggered. The default value for these parameters is null.
	//
	// 	- If the two parameters are set to specific dates, the scheduled auto scaling policy can be triggered during the period between the two dates. For example, if **BeginDate*	- is 2021-03-25 and **EndDate*	- is 2021-04-25, the auto scaling policy is valid for one month.
	//
	// example:
	//
	// 2021-03-25
	BeginDate *string `json:"BeginDate,omitempty" xml:"BeginDate,omitempty"`
	// The end date of the validity period of the scheduled auto scaling policy. Valid values:
	//
	// 	- If both the **BeginDate*	- and **EndDate*	- parameters are set to **null**, the auto scaling policy can always be triggered. The default value for these parameters is null.
	//
	// 	- If the two parameters are set to specific dates, the scheduled auto scaling policy can be triggered during the period between the two dates. For example, if **BeginDate*	- is 2021-03-25 and **EndDate*	- is 2021-04-25, the auto scaling policy is valid for one month.
	//
	// example:
	//
	// 2021-04-25
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// The days on which the scheduled auto scaling policy takes effect. Valid values:
	//
	// 	- **\\	- \\	- \\***: The scheduled auto scaling policy takes effect at a specified time every day.
	//
	// 	- **\\	- \\	- Fri,Mon**: The scheduled auto scaling policy takes effect at a specified time on one or multiple days of a week. The specified time is in the GMT+8 time zone. Valid values:
	//
	//     	- **Sun**: Sunday
	//
	//     	- **Mon**: Monday
	//
	//     	- **Tue**: Tuesday
	//
	//     	- **Wed**: Wednesday
	//
	//     	- **Thu**: Thursday
	//
	//     	- **Fri**: Friday
	//
	//     	- **Sat**: Saturday
	//
	// 	- **1,2,3,28,31 \\	- \\***: The scheduled auto scaling policy takes effect at a specified time on one or multiple days of a month. Valid values: 1 to 31. If the month does not have a 31st day, the auto scaling policy takes effect on the specified days other than the 31st day.
	//
	// example:
	//
	// 	- 	- *
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The points in time when the auto scaling policy is triggered within one day.
	Schedules []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules `json:"Schedules,omitempty" xml:"Schedules,omitempty" type:"Repeated"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer) SetBeginDate(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer {
	s.BeginDate = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer) SetEndDate(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer {
	s.EndDate = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer) SetPeriod(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer {
	s.Period = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer) SetSchedules(v []*DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimer {
	s.Schedules = v
	return s
}

type DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules struct {
	// The point in time. Format: **Hour:Minute**.
	//
	// example:
	//
	// 08:00
	AtTime *string `json:"AtTime,omitempty" xml:"AtTime,omitempty"`
	// The maximum number of instances.
	//
	// example:
	//
	// 50
	MaxReplicas *int64 `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	// The minimum number of instances.
	//
	// example:
	//
	// 1
	MinReplicas *int64 `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	// The expected number of instances.
	//
	// example:
	//
	// 3
	TargetReplicas *int32 `json:"TargetReplicas,omitempty" xml:"TargetReplicas,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules) SetAtTime(v string) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules {
	s.AtTime = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules) SetMaxReplicas(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules) SetMinReplicas(v int64) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules) SetTargetReplicas(v int32) *DescribeApplicationScalingRulesResponseBodyDataApplicationScalingRulesTimerSchedules {
	s.TargetReplicas = &v
	return s
}

type DescribeApplicationScalingRulesResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApplicationScalingRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApplicationScalingRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponse) SetHeaders(v map[string]*string) *DescribeApplicationScalingRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationScalingRulesResponse) SetStatusCode(v int32) *DescribeApplicationScalingRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponse) SetBody(v *DescribeApplicationScalingRulesResponseBody) *DescribeApplicationScalingRulesResponse {
	s.Body = v
	return s
}

type DescribeApplicationSlbsRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// 017f39b8-dfa4-4e16-a84b-1dcee4b1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DescribeApplicationSlbsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationSlbsRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationSlbsRequest) SetAppId(v string) *DescribeApplicationSlbsRequest {
	s.AppId = &v
	return s
}

type DescribeApplicationSlbsResponseBody struct {
	// Indicates whether the information about the SLB instances that are associated with an application was obtained successfully. Valid values:
	//
	// 	- **true**: indicates that the information was obtained successfully.
	//
	// 	- **false**: indicates that the information failed to be obtained.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Configurations of internal-facing SLB instances.
	Data *DescribeApplicationSlbsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The returned data.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeApplicationSlbsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationSlbsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationSlbsResponseBody) SetCode(v string) *DescribeApplicationSlbsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBody) SetData(v *DescribeApplicationSlbsResponseBodyData) *DescribeApplicationSlbsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeApplicationSlbsResponseBody) SetErrorCode(v string) *DescribeApplicationSlbsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBody) SetMessage(v string) *DescribeApplicationSlbsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBody) SetRequestId(v string) *DescribeApplicationSlbsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBody) SetSuccess(v bool) *DescribeApplicationSlbsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBody) SetTraceId(v string) *DescribeApplicationSlbsResponseBody {
	s.TraceId = &v
	return s
}

type DescribeApplicationSlbsResponseBodyData struct {
	// The ID of the SSL certificate issued by Alibaba Cloud.
	Internet []*DescribeApplicationSlbsResponseBodyDataInternet `json:"Internet,omitempty" xml:"Internet,omitempty" type:"Repeated"`
	// The ID of the Internet-facing SLB instance.
	//
	// example:
	//
	// 59.74.\*\*.**
	InternetIp            *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	InternetSlbChargeType *string `json:"InternetSlbChargeType,omitempty" xml:"InternetSlbChargeType,omitempty"`
	InternetSlbExpired    *bool   `json:"InternetSlbExpired,omitempty" xml:"InternetSlbExpired,omitempty"`
	// Configurations of Internet-facing SLB instances.
	//
	// example:
	//
	// lb-uf6xc7wybefehnv45****
	InternetSlbId *string `json:"InternetSlbId,omitempty" xml:"InternetSlbId,omitempty"`
	// The ID of the SSL certificate issued by Alibaba Cloud.
	Intranet []*DescribeApplicationSlbsResponseBodyDataIntranet `json:"Intranet,omitempty" xml:"Intranet,omitempty" type:"Repeated"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// 192.168.0.0
	IntranetIp            *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	IntranetSlbChargeType *string `json:"IntranetSlbChargeType,omitempty" xml:"IntranetSlbChargeType,omitempty"`
	IntranetSlbExpired    *bool   `json:"IntranetSlbExpired,omitempty" xml:"IntranetSlbExpired,omitempty"`
	// The IP address of the internal-facing SLB instance.
	//
	// example:
	//
	// lb-uf6xc7wybefehnv45****
	IntranetSlbId *string `json:"IntranetSlbId,omitempty" xml:"IntranetSlbId,omitempty"`
}

func (s DescribeApplicationSlbsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationSlbsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeApplicationSlbsResponseBodyData) SetInternet(v []*DescribeApplicationSlbsResponseBodyDataInternet) *DescribeApplicationSlbsResponseBodyData {
	s.Internet = v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyData) SetInternetIp(v string) *DescribeApplicationSlbsResponseBodyData {
	s.InternetIp = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyData) SetInternetSlbChargeType(v string) *DescribeApplicationSlbsResponseBodyData {
	s.InternetSlbChargeType = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyData) SetInternetSlbExpired(v bool) *DescribeApplicationSlbsResponseBodyData {
	s.InternetSlbExpired = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyData) SetInternetSlbId(v string) *DescribeApplicationSlbsResponseBodyData {
	s.InternetSlbId = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyData) SetIntranet(v []*DescribeApplicationSlbsResponseBodyDataIntranet) *DescribeApplicationSlbsResponseBodyData {
	s.Intranet = v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyData) SetIntranetIp(v string) *DescribeApplicationSlbsResponseBodyData {
	s.IntranetIp = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyData) SetIntranetSlbChargeType(v string) *DescribeApplicationSlbsResponseBodyData {
	s.IntranetSlbChargeType = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyData) SetIntranetSlbExpired(v bool) *DescribeApplicationSlbsResponseBodyData {
	s.IntranetSlbExpired = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyData) SetIntranetSlbId(v string) *DescribeApplicationSlbsResponseBodyData {
	s.IntranetSlbId = &v
	return s
}

type DescribeApplicationSlbsResponseBodyDataInternet struct {
	Cookie        *string `json:"Cookie,omitempty" xml:"Cookie,omitempty"`
	CookieTimeout *int32  `json:"CookieTimeout,omitempty" xml:"CookieTimeout,omitempty"`
	HttpsCaCertId *string `json:"HttpsCaCertId,omitempty" xml:"HttpsCaCertId,omitempty"`
	// The supported protocol.
	//
	// example:
	//
	// 1513561019707729_16f37aae5f3_-375882821_-169099****
	HttpsCertId *string `json:"HttpsCertId,omitempty" xml:"HttpsCertId,omitempty"`
	// The ID of the internal-facing SLB instance.
	//
	// example:
	//
	// 80
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The container port.
	//
	// example:
	//
	// TCP
	Protocol          *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	StickySession     *bool   `json:"StickySession,omitempty" xml:"StickySession,omitempty"`
	StickySessionType *string `json:"StickySessionType,omitempty" xml:"StickySessionType,omitempty"`
	// The port specified for the SLB listener.
	//
	// example:
	//
	// 8080
	TargetPort *int32 `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
}

func (s DescribeApplicationSlbsResponseBodyDataInternet) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationSlbsResponseBodyDataInternet) GoString() string {
	return s.String()
}

func (s *DescribeApplicationSlbsResponseBodyDataInternet) SetCookie(v string) *DescribeApplicationSlbsResponseBodyDataInternet {
	s.Cookie = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataInternet) SetCookieTimeout(v int32) *DescribeApplicationSlbsResponseBodyDataInternet {
	s.CookieTimeout = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataInternet) SetHttpsCaCertId(v string) *DescribeApplicationSlbsResponseBodyDataInternet {
	s.HttpsCaCertId = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataInternet) SetHttpsCertId(v string) *DescribeApplicationSlbsResponseBodyDataInternet {
	s.HttpsCertId = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataInternet) SetPort(v int32) *DescribeApplicationSlbsResponseBodyDataInternet {
	s.Port = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataInternet) SetProtocol(v string) *DescribeApplicationSlbsResponseBodyDataInternet {
	s.Protocol = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataInternet) SetStickySession(v bool) *DescribeApplicationSlbsResponseBodyDataInternet {
	s.StickySession = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataInternet) SetStickySessionType(v string) *DescribeApplicationSlbsResponseBodyDataInternet {
	s.StickySessionType = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataInternet) SetTargetPort(v int32) *DescribeApplicationSlbsResponseBodyDataInternet {
	s.TargetPort = &v
	return s
}

type DescribeApplicationSlbsResponseBodyDataIntranet struct {
	Cookie        *string `json:"Cookie,omitempty" xml:"Cookie,omitempty"`
	CookieTimeout *int32  `json:"CookieTimeout,omitempty" xml:"CookieTimeout,omitempty"`
	HttpsCaCertId *string `json:"HttpsCaCertId,omitempty" xml:"HttpsCaCertId,omitempty"`
	// The supported protocol.
	//
	// example:
	//
	// 1513561019707729_16f37aae5f3_-375882821_-169099****
	HttpsCertId *string `json:"HttpsCertId,omitempty" xml:"HttpsCertId,omitempty"`
	// The IP address of the Internet-facing SLB instance.
	//
	// example:
	//
	// 80
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The container port.
	//
	// example:
	//
	// TCP
	Protocol          *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	StickySession     *bool   `json:"StickySession,omitempty" xml:"StickySession,omitempty"`
	StickySessionType *string `json:"StickySessionType,omitempty" xml:"StickySessionType,omitempty"`
	// The port specified for the SLB listener.
	//
	// example:
	//
	// 8080
	TargetPort *int32 `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
}

func (s DescribeApplicationSlbsResponseBodyDataIntranet) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationSlbsResponseBodyDataIntranet) GoString() string {
	return s.String()
}

func (s *DescribeApplicationSlbsResponseBodyDataIntranet) SetCookie(v string) *DescribeApplicationSlbsResponseBodyDataIntranet {
	s.Cookie = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataIntranet) SetCookieTimeout(v int32) *DescribeApplicationSlbsResponseBodyDataIntranet {
	s.CookieTimeout = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataIntranet) SetHttpsCaCertId(v string) *DescribeApplicationSlbsResponseBodyDataIntranet {
	s.HttpsCaCertId = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataIntranet) SetHttpsCertId(v string) *DescribeApplicationSlbsResponseBodyDataIntranet {
	s.HttpsCertId = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataIntranet) SetPort(v int32) *DescribeApplicationSlbsResponseBodyDataIntranet {
	s.Port = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataIntranet) SetProtocol(v string) *DescribeApplicationSlbsResponseBodyDataIntranet {
	s.Protocol = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataIntranet) SetStickySession(v bool) *DescribeApplicationSlbsResponseBodyDataIntranet {
	s.StickySession = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataIntranet) SetStickySessionType(v string) *DescribeApplicationSlbsResponseBodyDataIntranet {
	s.StickySessionType = &v
	return s
}

func (s *DescribeApplicationSlbsResponseBodyDataIntranet) SetTargetPort(v int32) *DescribeApplicationSlbsResponseBodyDataIntranet {
	s.TargetPort = &v
	return s
}

type DescribeApplicationSlbsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApplicationSlbsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApplicationSlbsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationSlbsResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationSlbsResponse) SetHeaders(v map[string]*string) *DescribeApplicationSlbsResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationSlbsResponse) SetStatusCode(v int32) *DescribeApplicationSlbsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationSlbsResponse) SetBody(v *DescribeApplicationSlbsResponseBody) *DescribeApplicationSlbsResponse {
	s.Body = v
	return s
}

type DescribeApplicationStatusRequest struct {
	// 0099b7be-5f5b-4512-a7fc-56049ef1\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DescribeApplicationStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationStatusRequest) SetAppId(v string) *DescribeApplicationStatusRequest {
	s.AppId = &v
	return s
}

type DescribeApplicationStatusResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DescribeApplicationStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// 	- If the request is successful, this parameter is not returned.****
	//
	// 	- This parameter is returned only if the request failed.***	- For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message. Valid values:
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether information of the application is successfully obtained. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeApplicationStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationStatusResponseBody) SetCode(v string) *DescribeApplicationStatusResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationStatusResponseBody) SetData(v *DescribeApplicationStatusResponseBodyData) *DescribeApplicationStatusResponseBody {
	s.Data = v
	return s
}

func (s *DescribeApplicationStatusResponseBody) SetErrorCode(v string) *DescribeApplicationStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeApplicationStatusResponseBody) SetMessage(v string) *DescribeApplicationStatusResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationStatusResponseBody) SetRequestId(v string) *DescribeApplicationStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationStatusResponseBody) SetSuccess(v bool) *DescribeApplicationStatusResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeApplicationStatusResponseBody) SetTraceId(v string) *DescribeApplicationStatusResponseBody {
	s.TraceId = &v
	return s
}

type DescribeApplicationStatusResponseBodyData struct {
	// The ID of the application.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// Indicates whether Application Real-Time Monitoring Service (ARMS) advanced monitoring is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	ArmsAdvancedEnabled *string `json:"ArmsAdvancedEnabled,omitempty" xml:"ArmsAdvancedEnabled,omitempty"`
	// The metadata of the application in ARMS.
	//
	// example:
	//
	// {"appId":"0099b7be-5f5b-4512-a7fc-56049ef1****","licenseKey":"d5cgdt5pu0@7303f55292a****"}
	ArmsApmInfo *string `json:"ArmsApmInfo,omitempty" xml:"ArmsApmInfo,omitempty"`
	// The time when the application was created.
	//
	// example:
	//
	// 1563373372746
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The current state of the application. Valid values:
	//
	// 	- **RUNNING**
	//
	// 	- **STOPPED**
	//
	// 	- **UNKNOWN**
	//
	// example:
	//
	// RUNNING
	CurrentStatus *string `json:"CurrentStatus,omitempty" xml:"CurrentStatus,omitempty"`
	// Indicates whether SAE agent is enabled.
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	EnableAgent *bool `json:"EnableAgent,omitempty" xml:"EnableAgent,omitempty"`
	// The file size limit. Unit: KB. Valid values: 0 to 10240.
	//
	// example:
	//
	// 10240
	FileSizeLimit *int64 `json:"FileSizeLimit,omitempty" xml:"FileSizeLimit,omitempty"`
	// The ID of the latest change order that is executed. If no change orders have been executed or if change orders have expired, an empty parameter is returned.
	//
	// example:
	//
	// 1ccc2339-fc19-49aa-bda0-1e7b8497****
	LastChangeOrderId *string `json:"LastChangeOrderId,omitempty" xml:"LastChangeOrderId,omitempty"`
	// Indicates whether the latest change order is being executed. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// false
	LastChangeOrderRunning *bool `json:"LastChangeOrderRunning,omitempty" xml:"LastChangeOrderRunning,omitempty"`
	// The state of the latest change order. Valid values:
	//
	// 	- **READY**: The change order is ready.
	//
	// 	- **RUNNING**: The change order is being executed.
	//
	// 	- **SUCCESS**: The change order was executed successfully.
	//
	// 	- **FAIL**: The change order failed to be executed.
	//
	// 	- **ABORT**: The change order is stopped.
	//
	// 	- **WAIT_BATCH_CONFIRM**: The change order is pending execution. You must manually confirm the release batch.
	//
	// 	- **AUTO_BATCH_WAIT**: The change order is pending execution. SAE will automatically confirm the release batch.
	//
	// 	- **SYSTEM_FAIL**: A system exception occurred.
	//
	// 	- **WAIT_APPROVAL**: The change order is pending approval.
	//
	// 	- **APPROVED**: The change order is approved and is pending execution.
	//
	// example:
	//
	// SUCCESS
	LastChangeOrderStatus *string `json:"LastChangeOrderStatus,omitempty" xml:"LastChangeOrderStatus,omitempty"`
	// The number of running instances of the application.
	//
	// example:
	//
	// 1
	RunningInstances *int32 `json:"RunningInstances,omitempty" xml:"RunningInstances,omitempty"`
	// Indicates whether an error occurred while the change order was being executed. Valid values:
	//
	// 	- **NORMAL**
	//
	// 	- **RUNNING_BUT_HAS_ERROR*	- If an error occurs during a batch release, you must manually perform a rollback. In this case, the change order is still running because the task is not completed, but the state of the change order is RUNNING_BUT_HAS_ERROR.
	//
	// example:
	//
	// NORMAL
	SubStatus *string `json:"SubStatus,omitempty" xml:"SubStatus,omitempty"`
}

func (s DescribeApplicationStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeApplicationStatusResponseBodyData) SetAppId(v string) *DescribeApplicationStatusResponseBodyData {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetArmsAdvancedEnabled(v string) *DescribeApplicationStatusResponseBodyData {
	s.ArmsAdvancedEnabled = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetArmsApmInfo(v string) *DescribeApplicationStatusResponseBodyData {
	s.ArmsApmInfo = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetCreateTime(v string) *DescribeApplicationStatusResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetCurrentStatus(v string) *DescribeApplicationStatusResponseBodyData {
	s.CurrentStatus = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetEnableAgent(v bool) *DescribeApplicationStatusResponseBodyData {
	s.EnableAgent = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetFileSizeLimit(v int64) *DescribeApplicationStatusResponseBodyData {
	s.FileSizeLimit = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetLastChangeOrderId(v string) *DescribeApplicationStatusResponseBodyData {
	s.LastChangeOrderId = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetLastChangeOrderRunning(v bool) *DescribeApplicationStatusResponseBodyData {
	s.LastChangeOrderRunning = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetLastChangeOrderStatus(v string) *DescribeApplicationStatusResponseBodyData {
	s.LastChangeOrderStatus = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetRunningInstances(v int32) *DescribeApplicationStatusResponseBodyData {
	s.RunningInstances = &v
	return s
}

func (s *DescribeApplicationStatusResponseBodyData) SetSubStatus(v string) *DescribeApplicationStatusResponseBodyData {
	s.SubStatus = &v
	return s
}

type DescribeApplicationStatusResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApplicationStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApplicationStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationStatusResponse) SetHeaders(v map[string]*string) *DescribeApplicationStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationStatusResponse) SetStatusCode(v int32) *DescribeApplicationStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationStatusResponse) SetBody(v *DescribeApplicationStatusResponseBody) *DescribeApplicationStatusResponse {
	s.Body = v
	return s
}

type DescribeChangeOrderRequest struct {
	// 76fa5c0-9ebb-4bb4-b383-1f885447\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// 76fa5c0-9ebb-4bb4-b383-1f885447****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s DescribeChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *DescribeChangeOrderRequest) SetChangeOrderId(v string) *DescribeChangeOrderRequest {
	s.ChangeOrderId = &v
	return s
}

type DescribeChangeOrderResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the change order.
	Data *DescribeChangeOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information of a change order was obtained. Valid values:
	//
	// 	- **true**: The information was obtained.
	//
	// 	- **false**: The information could not be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeChangeOrderResponseBody) SetCode(v string) *DescribeChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeChangeOrderResponseBody) SetData(v *DescribeChangeOrderResponseBodyData) *DescribeChangeOrderResponseBody {
	s.Data = v
	return s
}

func (s *DescribeChangeOrderResponseBody) SetErrorCode(v string) *DescribeChangeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeChangeOrderResponseBody) SetMessage(v string) *DescribeChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeChangeOrderResponseBody) SetRequestId(v string) *DescribeChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeChangeOrderResponseBody) SetSuccess(v bool) *DescribeChangeOrderResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeChangeOrderResponseBody) SetTraceId(v string) *DescribeChangeOrderResponseBody {
	s.TraceId = &v
	return s
}

type DescribeChangeOrderResponseBodyData struct {
	// The ID of the application.
	//
	// example:
	//
	// bbbbb-3fd370b2-3646-4ba6-91f9-9423e19ab0cd-*****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// app-test
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The approval ID of the change order.
	//
	// example:
	//
	// 67de0b39-a9d4-4c09-a170-cf438208****
	ApprovalId *string `json:"ApprovalId,omitempty" xml:"ApprovalId,omitempty"`
	// Indicates whether SAE automatically determines the release batches. Valid values:
	//
	// 	- **true**: SAE automatically determines the release batches.
	//
	// 	- **false**: SAE does not automatically determine the release batches.
	//
	// example:
	//
	// true
	Auto *bool `json:"Auto,omitempty" xml:"Auto,omitempty"`
	// The number of release batches.
	//
	// example:
	//
	// 1
	BatchCount *int32 `json:"BatchCount,omitempty" xml:"BatchCount,omitempty"`
	// The mode in which the release batches are determined. Valid values:
	//
	// 	- **auto**: SAE automatically determines the release batches.
	//
	// 	- **Manual**: You must manually determine the release batches.
	//
	// example:
	//
	// auto
	BatchType *string `json:"BatchType,omitempty" xml:"BatchType,omitempty"`
	// The interval between batches when SAE automatically determines the release batches in a phased release. Unit: minutes.
	//
	// example:
	//
	// 0
	BatchWaitTime *int32 `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	// The ID of the change order.
	//
	// example:
	//
	// 765fa5c0-9ebb-4bb4-b383-1f885447**
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	// The description about the change type, which corresponds to the **CoTypeCode*	- parameter.
	CoType *string `json:"CoType,omitempty" xml:"CoType,omitempty"`
	// The code of the change type. Valid values:
	//
	// 	- **CoBindSlb**: associates the Server Load Balancer (SLB) instance with the application.
	//
	// 	- **CoUnbindSlb**: disassociates the SLB instance from the application.
	//
	// 	- **CoCreateApp**: creates the application.
	//
	// 	- **CoDeleteApp**: deletes the application.
	//
	// 	- **CoDeploy**: deploys the application.
	//
	// 	- **CoRestartApplication**: restarts the application.
	//
	// 	- **CoRollback**: rolls back the application.
	//
	// 	- **CoScaleIn**: scales in the application.
	//
	// 	- **CoScaleOut**: scales out the application.
	//
	// 	- **CoStart**: starts the application.
	//
	// 	- **CoStop**: stops the application.
	//
	// 	- **CoRescaleApplicationVertically**: modifies the instance specifications.
	//
	// 	- **CoDeployHistroy**: rolls back the application to a historical version.
	//
	// 	- **CoBindNas**: associates a network-attached storage (NAS) file system with the application.
	//
	// 	- **CoUnbindNas**: disassociates the NAS file system from the application.
	//
	// 	- **CoBatchStartApplication**: starts multiple applications concurrently.
	//
	// 	- **CoBatchStopApplication**: stops multiple applications concurrently.
	//
	// 	- **CoRestartInstances**: restarts the instances.
	//
	// 	- **CoDeleteInstances**: deletes the instances.
	//
	// 	- **CoScaleInAppWithInstances**: reduces the number of specified application instances.
	//
	// example:
	//
	// CoRestartInstances
	CoTypeCode *string `json:"CoTypeCode,omitempty" xml:"CoTypeCode,omitempty"`
	// The time when the change order was created.
	//
	// example:
	//
	// 2020-12-17 21:06:45
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the current batch.
	//
	// example:
	//
	// 0e4acf82-c9b1-4c1e-ac28-55776338****
	CurrentPipelineId *string `json:"CurrentPipelineId,omitempty" xml:"CurrentPipelineId,omitempty"`
	// The description of the change order.
	//
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The error message.
	//
	// example:
	//
	// success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The batch information.
	Pipelines []*DescribeChangeOrderResponseBodyDataPipelines `json:"Pipelines,omitempty" xml:"Pipelines,omitempty" type:"Repeated"`
	// The status of the change order. Valid values:
	//
	// 	- **0**: The change order is being prepared.
	//
	// 	- **1**: The change order is being executed.
	//
	// 	- **2**: The change order was executed.
	//
	// 	- **3**: The change order could not be executed.
	//
	// 	- **6**: The change order was terminated.
	//
	// 	- **8**: The execution process is pending. You must manually determine the release batch.
	//
	// 	- **9**: The execution process is pending. SAE will automatically determine the release batches.
	//
	// 	- **10**: The execution failed due to a system exception.
	//
	// 	- **11**: The change order is pending approval.
	//
	// 	- **12**: The change order is approved and is pending execution.
	//
	// example:
	//
	// 2
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The substatus of the change order. This parameter indicates whether an exception occurred while the change order was being executed. Valid values:
	//
	// 	- **0**: No exception occurred.
	//
	// 	- **1**: An exception occurred. For example, when an error occurred during a phased release, you must manually roll back the application. In this case, the change order cannot be completed, so the Status parameter is still displayed as "1", which indicates that the change order is being executed. You can check the value of this parameter to determine whether an exception occurs.
	//
	// example:
	//
	// 0
	SubStatus *int32 `json:"SubStatus,omitempty" xml:"SubStatus,omitempty"`
	// Indicates whether the application can be rolled back. Valid values:
	//
	// 	- **true**: The application can be rolled back.
	//
	// 	- **false**: The application cannot be rolled back.
	//
	// example:
	//
	// false
	SupportRollback *bool `json:"SupportRollback,omitempty" xml:"SupportRollback,omitempty"`
}

func (s DescribeChangeOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeChangeOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeChangeOrderResponseBodyData) SetAppId(v string) *DescribeChangeOrderResponseBodyData {
	s.AppId = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetAppName(v string) *DescribeChangeOrderResponseBodyData {
	s.AppName = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetApprovalId(v string) *DescribeChangeOrderResponseBodyData {
	s.ApprovalId = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetAuto(v bool) *DescribeChangeOrderResponseBodyData {
	s.Auto = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetBatchCount(v int32) *DescribeChangeOrderResponseBodyData {
	s.BatchCount = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetBatchType(v string) *DescribeChangeOrderResponseBodyData {
	s.BatchType = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetBatchWaitTime(v int32) *DescribeChangeOrderResponseBodyData {
	s.BatchWaitTime = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetChangeOrderId(v string) *DescribeChangeOrderResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetCoType(v string) *DescribeChangeOrderResponseBodyData {
	s.CoType = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetCoTypeCode(v string) *DescribeChangeOrderResponseBodyData {
	s.CoTypeCode = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetCreateTime(v string) *DescribeChangeOrderResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetCurrentPipelineId(v string) *DescribeChangeOrderResponseBodyData {
	s.CurrentPipelineId = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetDescription(v string) *DescribeChangeOrderResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetErrorMessage(v string) *DescribeChangeOrderResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetPipelines(v []*DescribeChangeOrderResponseBodyDataPipelines) *DescribeChangeOrderResponseBodyData {
	s.Pipelines = v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetStatus(v int32) *DescribeChangeOrderResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetSubStatus(v int32) *DescribeChangeOrderResponseBodyData {
	s.SubStatus = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyData) SetSupportRollback(v bool) *DescribeChangeOrderResponseBodyData {
	s.SupportRollback = &v
	return s
}

type DescribeChangeOrderResponseBodyDataPipelines struct {
	// The batch type.
	//
	// example:
	//
	// 0
	BatchType *int32 `json:"BatchType,omitempty" xml:"BatchType,omitempty"`
	// The number of parallel tasks in a batch.
	//
	// example:
	//
	// 0
	ParallelCount *int32 `json:"ParallelCount,omitempty" xml:"ParallelCount,omitempty"`
	// The ID of the batch.
	//
	// example:
	//
	// 0e4acf82-c9b1-4c1e-ac28-55776338****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The name of the batch.
	//
	// example:
	//
	// Batch 1 Change
	PipelineName *string `json:"PipelineName,omitempty" xml:"PipelineName,omitempty"`
	// The time when the batch processing starts.
	//
	// example:
	//
	// 1562831689704
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the batch. Valid values:
	//
	// 	- **0**: The batch is being prepared.
	//
	// 	- **1**: The batch is being processed.
	//
	// 	- **2**: The batch was processed.
	//
	// 	- **3**: The batch could not be processed.
	//
	// 	- **6**: The batch processing was terminated.
	//
	// 	- **8**: The execution process is pending. You must manually determine the release batch.
	//
	// 	- **9**: The execution process is pending. SAE will automatically determine the release batch.
	//
	// 	- **10**: The batch could not be processed due to a system exception.
	//
	// 	- **11**: The change order is pending approval.
	//
	// 	- **12**: The change order is approved and is pending execution.
	//
	// example:
	//
	// 2
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the batch information is last modified.
	//
	// example:
	//
	// 1562847178007
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeChangeOrderResponseBodyDataPipelines) String() string {
	return tea.Prettify(s)
}

func (s DescribeChangeOrderResponseBodyDataPipelines) GoString() string {
	return s.String()
}

func (s *DescribeChangeOrderResponseBodyDataPipelines) SetBatchType(v int32) *DescribeChangeOrderResponseBodyDataPipelines {
	s.BatchType = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyDataPipelines) SetParallelCount(v int32) *DescribeChangeOrderResponseBodyDataPipelines {
	s.ParallelCount = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyDataPipelines) SetPipelineId(v string) *DescribeChangeOrderResponseBodyDataPipelines {
	s.PipelineId = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyDataPipelines) SetPipelineName(v string) *DescribeChangeOrderResponseBodyDataPipelines {
	s.PipelineName = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyDataPipelines) SetStartTime(v int64) *DescribeChangeOrderResponseBodyDataPipelines {
	s.StartTime = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyDataPipelines) SetStatus(v int32) *DescribeChangeOrderResponseBodyDataPipelines {
	s.Status = &v
	return s
}

func (s *DescribeChangeOrderResponseBodyDataPipelines) SetUpdateTime(v int64) *DescribeChangeOrderResponseBodyDataPipelines {
	s.UpdateTime = &v
	return s
}

type DescribeChangeOrderResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *DescribeChangeOrderResponse) SetHeaders(v map[string]*string) *DescribeChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *DescribeChangeOrderResponse) SetStatusCode(v int32) *DescribeChangeOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeChangeOrderResponse) SetBody(v *DescribeChangeOrderResponseBody) *DescribeChangeOrderResponse {
	s.Body = v
	return s
}

type DescribeComponentsRequest struct {
	// TOMCAT
	//
	// example:
	//
	// d700e680-aa4d-4ec1-afc2-6566b5ff****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// TOMCAT
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeComponentsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeComponentsRequest) GoString() string {
	return s.String()
}

func (s *DescribeComponentsRequest) SetAppId(v string) *DescribeComponentsRequest {
	s.AppId = &v
	return s
}

func (s *DescribeComponentsRequest) SetType(v string) *DescribeComponentsRequest {
	s.Type = &v
	return s
}

type DescribeComponentsResponseBody struct {
	// Indicates whether the component version was obtained. Valid values:
	//
	// 	- **true**: indicates that the component version was obtained.
	//
	// 	- **false**: indicates that the component version could not be obtained.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The component type.
	Data []*DescribeComponentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The details of the component.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeComponentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeComponentsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeComponentsResponseBody) SetCode(v string) *DescribeComponentsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeComponentsResponseBody) SetData(v []*DescribeComponentsResponseBodyData) *DescribeComponentsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeComponentsResponseBody) SetErrorCode(v string) *DescribeComponentsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeComponentsResponseBody) SetMessage(v string) *DescribeComponentsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeComponentsResponseBody) SetRequestId(v string) *DescribeComponentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeComponentsResponseBody) SetSuccess(v bool) *DescribeComponentsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeComponentsResponseBody) SetTraceId(v string) *DescribeComponentsResponseBody {
	s.TraceId = &v
	return s
}

type DescribeComponentsResponseBodyData struct {
	// Indicates whether the component is expired. Valid values:
	//
	// 	- **true**: The component is expired.
	//
	// 	- **false**: The component is not expired.
	//
	// example:
	//
	// Open JDK 8
	ComponentDescription *string `json:"ComponentDescription,omitempty" xml:"ComponentDescription,omitempty"`
	// The description of the component.
	//
	// example:
	//
	// Open JDK 8
	ComponentKey *string `json:"ComponentKey,omitempty" xml:"ComponentKey,omitempty"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// false
	Expired *bool `json:"Expired,omitempty" xml:"Expired,omitempty"`
	// The ID of the component.
	//
	// example:
	//
	// JDK
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeComponentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeComponentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeComponentsResponseBodyData) SetComponentDescription(v string) *DescribeComponentsResponseBodyData {
	s.ComponentDescription = &v
	return s
}

func (s *DescribeComponentsResponseBodyData) SetComponentKey(v string) *DescribeComponentsResponseBodyData {
	s.ComponentKey = &v
	return s
}

func (s *DescribeComponentsResponseBodyData) SetExpired(v bool) *DescribeComponentsResponseBodyData {
	s.Expired = &v
	return s
}

func (s *DescribeComponentsResponseBodyData) SetType(v string) *DescribeComponentsResponseBodyData {
	s.Type = &v
	return s
}

type DescribeComponentsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeComponentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeComponentsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeComponentsResponse) GoString() string {
	return s.String()
}

func (s *DescribeComponentsResponse) SetHeaders(v map[string]*string) *DescribeComponentsResponse {
	s.Headers = v
	return s
}

func (s *DescribeComponentsResponse) SetStatusCode(v int32) *DescribeComponentsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeComponentsResponse) SetBody(v *DescribeComponentsResponseBody) *DescribeComponentsResponse {
	s.Body = v
	return s
}

type DescribeConfigMapRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ConfigMapId *int64 `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
}

func (s DescribeConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigMapRequest) GoString() string {
	return s.String()
}

func (s *DescribeConfigMapRequest) SetConfigMapId(v int64) *DescribeConfigMapRequest {
	s.ConfigMapId = &v
	return s
}

type DescribeConfigMapResponseBody struct {
	// Indicates whether the details of the ConfigMap instance were obtained. Valid values:
	//
	// 	- **true**: The details were obtained.
	//
	// 	- **false**: The details failed to be obtained.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time when the instance was last modified.
	Data *DescribeConfigMapResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the call was successful.
	//
	// 	- **3xx**: indicates that the call was redirected.
	//
	// 	- **4xx**: indicates that the call failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned information. Valid values:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The returned result.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConfigMapResponseBody) SetCode(v string) *DescribeConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeConfigMapResponseBody) SetData(v *DescribeConfigMapResponseBodyData) *DescribeConfigMapResponseBody {
	s.Data = v
	return s
}

func (s *DescribeConfigMapResponseBody) SetErrorCode(v string) *DescribeConfigMapResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConfigMapResponseBody) SetMessage(v string) *DescribeConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeConfigMapResponseBody) SetRequestId(v string) *DescribeConfigMapResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConfigMapResponseBody) SetSuccess(v bool) *DescribeConfigMapResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeConfigMapResponseBody) SetTraceId(v string) *DescribeConfigMapResponseBody {
	s.TraceId = &v
	return s
}

type DescribeConfigMapResponseBodyData struct {
	// The name of the ConfigMap instance.
	//
	// example:
	//
	// 1
	ConfigMapId *int64 `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
	// The application that is associated with the instance.
	//
	// example:
	//
	// 1593746835111
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the namespace to which the instance belongs.
	//
	// example:
	//
	// {"k1":"v1","k2":"v2"}
	Data map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// The time when the instance was created.
	//
	// example:
	//
	// test-desc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The returned error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// test-configmap
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The description of the instance.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The name of the application.
	RelateApps []*DescribeConfigMapResponseBodyDataRelateApps `json:"RelateApps,omitempty" xml:"RelateApps,omitempty" type:"Repeated"`
	// The data of ConfigMap key-value pairs. Format:
	//
	// {"k1":"v1", "k2":"v2"}
	//
	// k specifies a key and v specifies a value. For more information, see [Manage and use configurations](https://help.aliyun.com/document_detail/171326.html).
	//
	// example:
	//
	// 1593747274195
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeConfigMapResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigMapResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeConfigMapResponseBodyData) SetConfigMapId(v int64) *DescribeConfigMapResponseBodyData {
	s.ConfigMapId = &v
	return s
}

func (s *DescribeConfigMapResponseBodyData) SetCreateTime(v int64) *DescribeConfigMapResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeConfigMapResponseBodyData) SetData(v map[string]interface{}) *DescribeConfigMapResponseBodyData {
	s.Data = v
	return s
}

func (s *DescribeConfigMapResponseBodyData) SetDescription(v string) *DescribeConfigMapResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeConfigMapResponseBodyData) SetName(v string) *DescribeConfigMapResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeConfigMapResponseBodyData) SetNamespaceId(v string) *DescribeConfigMapResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DescribeConfigMapResponseBodyData) SetRelateApps(v []*DescribeConfigMapResponseBodyDataRelateApps) *DescribeConfigMapResponseBodyData {
	s.RelateApps = v
	return s
}

func (s *DescribeConfigMapResponseBodyData) SetUpdateTime(v int64) *DescribeConfigMapResponseBodyData {
	s.UpdateTime = &v
	return s
}

type DescribeConfigMapResponseBodyDataRelateApps struct {
	// The ID of the ConfigMap instance.
	//
	// example:
	//
	// f16b4000-9058-4c22-a49d-49a28f0b****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the application.
	//
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s DescribeConfigMapResponseBodyDataRelateApps) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigMapResponseBodyDataRelateApps) GoString() string {
	return s.String()
}

func (s *DescribeConfigMapResponseBodyDataRelateApps) SetAppId(v string) *DescribeConfigMapResponseBodyDataRelateApps {
	s.AppId = &v
	return s
}

func (s *DescribeConfigMapResponseBodyDataRelateApps) SetAppName(v string) *DescribeConfigMapResponseBodyDataRelateApps {
	s.AppName = &v
	return s
}

type DescribeConfigMapResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigMapResponse) GoString() string {
	return s.String()
}

func (s *DescribeConfigMapResponse) SetHeaders(v map[string]*string) *DescribeConfigMapResponse {
	s.Headers = v
	return s
}

func (s *DescribeConfigMapResponse) SetStatusCode(v int32) *DescribeConfigMapResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConfigMapResponse) SetBody(v *DescribeConfigMapResponseBody) *DescribeConfigMapResponse {
	s.Body = v
	return s
}

type DescribeConfigurationPriceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2000
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 4096
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// example:
	//
	// Web
	Workload *string `json:"Workload,omitempty" xml:"Workload,omitempty"`
}

func (s DescribeConfigurationPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceRequest) SetCpu(v int32) *DescribeConfigurationPriceRequest {
	s.Cpu = &v
	return s
}

func (s *DescribeConfigurationPriceRequest) SetMemory(v int32) *DescribeConfigurationPriceRequest {
	s.Memory = &v
	return s
}

func (s *DescribeConfigurationPriceRequest) SetWorkload(v string) *DescribeConfigurationPriceRequest {
	s.Workload = &v
	return s
}

type DescribeConfigurationPriceResponseBody struct {
	// example:
	//
	// 200
	Code      *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeConfigurationPriceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                                     `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ADCEC067-86AD-19E2-BD43-E83F3841****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 1a0dcc771722848598056771******
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeConfigurationPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBody) SetCode(v string) *DescribeConfigurationPriceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBody) SetData(v *DescribeConfigurationPriceResponseBodyData) *DescribeConfigurationPriceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeConfigurationPriceResponseBody) SetErrorCode(v string) *DescribeConfigurationPriceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBody) SetMessage(v string) *DescribeConfigurationPriceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBody) SetRequestId(v string) *DescribeConfigurationPriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBody) SetSuccess(v bool) *DescribeConfigurationPriceResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBody) SetTraceId(v string) *DescribeConfigurationPriceResponseBody {
	s.TraceId = &v
	return s
}

type DescribeConfigurationPriceResponseBodyData struct {
	BagUsage     *DescribeConfigurationPriceResponseBodyDataBagUsage     `json:"BagUsage,omitempty" xml:"BagUsage,omitempty" type:"Struct"`
	CpuMemPrice  *DescribeConfigurationPriceResponseBodyDataCpuMemPrice  `json:"CpuMemPrice,omitempty" xml:"CpuMemPrice,omitempty" type:"Struct"`
	Order        *DescribeConfigurationPriceResponseBodyDataOrder        `json:"Order,omitempty" xml:"Order,omitempty" type:"Struct"`
	RequestPrice *DescribeConfigurationPriceResponseBodyDataRequestPrice `json:"RequestPrice,omitempty" xml:"RequestPrice,omitempty" type:"Struct"`
	Rules        []*DescribeConfigurationPriceResponseBodyDataRules      `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
	TrafficPrice *DescribeConfigurationPriceResponseBodyDataTrafficPrice `json:"TrafficPrice,omitempty" xml:"TrafficPrice,omitempty" type:"Struct"`
}

func (s DescribeConfigurationPriceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyData) SetBagUsage(v *DescribeConfigurationPriceResponseBodyDataBagUsage) *DescribeConfigurationPriceResponseBodyData {
	s.BagUsage = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyData) SetCpuMemPrice(v *DescribeConfigurationPriceResponseBodyDataCpuMemPrice) *DescribeConfigurationPriceResponseBodyData {
	s.CpuMemPrice = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyData) SetOrder(v *DescribeConfigurationPriceResponseBodyDataOrder) *DescribeConfigurationPriceResponseBodyData {
	s.Order = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyData) SetRequestPrice(v *DescribeConfigurationPriceResponseBodyDataRequestPrice) *DescribeConfigurationPriceResponseBodyData {
	s.RequestPrice = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyData) SetRules(v []*DescribeConfigurationPriceResponseBodyDataRules) *DescribeConfigurationPriceResponseBodyData {
	s.Rules = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyData) SetTrafficPrice(v *DescribeConfigurationPriceResponseBodyDataTrafficPrice) *DescribeConfigurationPriceResponseBodyData {
	s.TrafficPrice = v
	return s
}

type DescribeConfigurationPriceResponseBodyDataBagUsage struct {
	// example:
	//
	// 497570.450009
	Cpu *float32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// example:
	//
	// 989802.563546
	Mem *float32 `json:"Mem,omitempty" xml:"Mem,omitempty"`
}

func (s DescribeConfigurationPriceResponseBodyDataBagUsage) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataBagUsage) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataBagUsage) SetCpu(v float32) *DescribeConfigurationPriceResponseBodyDataBagUsage {
	s.Cpu = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataBagUsage) SetMem(v float32) *DescribeConfigurationPriceResponseBodyDataBagUsage {
	s.Mem = &v
	return s
}

type DescribeConfigurationPriceResponseBodyDataCpuMemPrice struct {
	Order *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder   `json:"Order,omitempty" xml:"Order,omitempty" type:"Struct"`
	Rules []*DescribeConfigurationPriceResponseBodyDataCpuMemPriceRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeConfigurationPriceResponseBodyDataCpuMemPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataCpuMemPrice) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataCpuMemPrice) SetOrder(v *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder) *DescribeConfigurationPriceResponseBodyDataCpuMemPrice {
	s.Order = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataCpuMemPrice) SetRules(v []*DescribeConfigurationPriceResponseBodyDataCpuMemPriceRules) *DescribeConfigurationPriceResponseBodyDataCpuMemPrice {
	s.Rules = v
	return s
}

type DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder struct {
	// example:
	//
	// 0.0009259
	DiscountAmount *float32 `json:"DiscountAmount,omitempty" xml:"DiscountAmount,omitempty"`
	// example:
	//
	// 0.0046296
	OriginalAmount *float32  `json:"OriginalAmount,omitempty" xml:"OriginalAmount,omitempty"`
	RuleIds        []*string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Repeated"`
	// example:
	//
	// 0.0037037
	TradeAmount *float32 `json:"TradeAmount,omitempty" xml:"TradeAmount,omitempty"`
}

func (s DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder) SetDiscountAmount(v float32) *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder {
	s.DiscountAmount = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder) SetOriginalAmount(v float32) *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder {
	s.OriginalAmount = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder) SetRuleIds(v []*string) *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder {
	s.RuleIds = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder) SetTradeAmount(v float32) *DescribeConfigurationPriceResponseBodyDataCpuMemPriceOrder {
	s.TradeAmount = &v
	return s
}

type DescribeConfigurationPriceResponseBodyDataCpuMemPriceRules struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 2000010******
	RuleDescId *float32 `json:"RuleDescId,omitempty" xml:"RuleDescId,omitempty"`
}

func (s DescribeConfigurationPriceResponseBodyDataCpuMemPriceRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataCpuMemPriceRules) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataCpuMemPriceRules) SetName(v string) *DescribeConfigurationPriceResponseBodyDataCpuMemPriceRules {
	s.Name = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataCpuMemPriceRules) SetRuleDescId(v float32) *DescribeConfigurationPriceResponseBodyDataCpuMemPriceRules {
	s.RuleDescId = &v
	return s
}

type DescribeConfigurationPriceResponseBodyDataOrder struct {
	// example:
	//
	// 0.0018518
	DiscountAmount *float32 `json:"DiscountAmount,omitempty" xml:"DiscountAmount,omitempty"`
	// example:
	//
	// 0.0092592
	OriginalAmount *float32  `json:"OriginalAmount,omitempty" xml:"OriginalAmount,omitempty"`
	RuleIds        []*string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Repeated"`
	// example:
	//
	// 0.0074074
	TradeAmount *float32 `json:"TradeAmount,omitempty" xml:"TradeAmount,omitempty"`
}

func (s DescribeConfigurationPriceResponseBodyDataOrder) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataOrder) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataOrder) SetDiscountAmount(v float32) *DescribeConfigurationPriceResponseBodyDataOrder {
	s.DiscountAmount = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataOrder) SetOriginalAmount(v float32) *DescribeConfigurationPriceResponseBodyDataOrder {
	s.OriginalAmount = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataOrder) SetRuleIds(v []*string) *DescribeConfigurationPriceResponseBodyDataOrder {
	s.RuleIds = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataOrder) SetTradeAmount(v float32) *DescribeConfigurationPriceResponseBodyDataOrder {
	s.TradeAmount = &v
	return s
}

type DescribeConfigurationPriceResponseBodyDataRequestPrice struct {
	Order *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder   `json:"Order,omitempty" xml:"Order,omitempty" type:"Struct"`
	Rules []*DescribeConfigurationPriceResponseBodyDataRequestPriceRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeConfigurationPriceResponseBodyDataRequestPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataRequestPrice) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataRequestPrice) SetOrder(v *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder) *DescribeConfigurationPriceResponseBodyDataRequestPrice {
	s.Order = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataRequestPrice) SetRules(v []*DescribeConfigurationPriceResponseBodyDataRequestPriceRules) *DescribeConfigurationPriceResponseBodyDataRequestPrice {
	s.Rules = v
	return s
}

type DescribeConfigurationPriceResponseBodyDataRequestPriceOrder struct {
	// example:
	//
	// 0.0009259
	DiscountAmount *float32 `json:"DiscountAmount,omitempty" xml:"DiscountAmount,omitempty"`
	// example:
	//
	// 0.0046296
	OriginalAmount *float32  `json:"OriginalAmount,omitempty" xml:"OriginalAmount,omitempty"`
	RuleIds        []*string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Repeated"`
	// example:
	//
	// 0.0037037
	TradeAmount *float32 `json:"TradeAmount,omitempty" xml:"TradeAmount,omitempty"`
}

func (s DescribeConfigurationPriceResponseBodyDataRequestPriceOrder) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataRequestPriceOrder) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder) SetDiscountAmount(v float32) *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder {
	s.DiscountAmount = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder) SetOriginalAmount(v float32) *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder {
	s.OriginalAmount = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder) SetRuleIds(v []*string) *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder {
	s.RuleIds = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder) SetTradeAmount(v float32) *DescribeConfigurationPriceResponseBodyDataRequestPriceOrder {
	s.TradeAmount = &v
	return s
}

type DescribeConfigurationPriceResponseBodyDataRequestPriceRules struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 2000010******
	RuleDescId *int64 `json:"RuleDescId,omitempty" xml:"RuleDescId,omitempty"`
}

func (s DescribeConfigurationPriceResponseBodyDataRequestPriceRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataRequestPriceRules) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataRequestPriceRules) SetName(v string) *DescribeConfigurationPriceResponseBodyDataRequestPriceRules {
	s.Name = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataRequestPriceRules) SetRuleDescId(v int64) *DescribeConfigurationPriceResponseBodyDataRequestPriceRules {
	s.RuleDescId = &v
	return s
}

type DescribeConfigurationPriceResponseBodyDataRules struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 2000010******
	RuleDescId *int64 `json:"RuleDescId,omitempty" xml:"RuleDescId,omitempty"`
}

func (s DescribeConfigurationPriceResponseBodyDataRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataRules) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataRules) SetName(v string) *DescribeConfigurationPriceResponseBodyDataRules {
	s.Name = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataRules) SetRuleDescId(v int64) *DescribeConfigurationPriceResponseBodyDataRules {
	s.RuleDescId = &v
	return s
}

type DescribeConfigurationPriceResponseBodyDataTrafficPrice struct {
	Order *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder   `json:"Order,omitempty" xml:"Order,omitempty" type:"Struct"`
	Rules []*DescribeConfigurationPriceResponseBodyDataTrafficPriceRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeConfigurationPriceResponseBodyDataTrafficPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataTrafficPrice) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataTrafficPrice) SetOrder(v *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder) *DescribeConfigurationPriceResponseBodyDataTrafficPrice {
	s.Order = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataTrafficPrice) SetRules(v []*DescribeConfigurationPriceResponseBodyDataTrafficPriceRules) *DescribeConfigurationPriceResponseBodyDataTrafficPrice {
	s.Rules = v
	return s
}

type DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder struct {
	// example:
	//
	// 0.0009259
	DiscountAmount *float32 `json:"DiscountAmount,omitempty" xml:"DiscountAmount,omitempty"`
	// example:
	//
	// 0.0046296
	OriginalAmount *float32  `json:"OriginalAmount,omitempty" xml:"OriginalAmount,omitempty"`
	RuleIds        []*string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Repeated"`
	// example:
	//
	// 0.0037037
	TradeAmount *float32 `json:"TradeAmount,omitempty" xml:"TradeAmount,omitempty"`
}

func (s DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder) SetDiscountAmount(v float32) *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder {
	s.DiscountAmount = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder) SetOriginalAmount(v float32) *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder {
	s.OriginalAmount = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder) SetRuleIds(v []*string) *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder {
	s.RuleIds = v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder) SetTradeAmount(v float32) *DescribeConfigurationPriceResponseBodyDataTrafficPriceOrder {
	s.TradeAmount = &v
	return s
}

type DescribeConfigurationPriceResponseBodyDataTrafficPriceRules struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 2000010******
	RuleDescId *float32 `json:"RuleDescId,omitempty" xml:"RuleDescId,omitempty"`
}

func (s DescribeConfigurationPriceResponseBodyDataTrafficPriceRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponseBodyDataTrafficPriceRules) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponseBodyDataTrafficPriceRules) SetName(v string) *DescribeConfigurationPriceResponseBodyDataTrafficPriceRules {
	s.Name = &v
	return s
}

func (s *DescribeConfigurationPriceResponseBodyDataTrafficPriceRules) SetRuleDescId(v float32) *DescribeConfigurationPriceResponseBodyDataTrafficPriceRules {
	s.RuleDescId = &v
	return s
}

type DescribeConfigurationPriceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConfigurationPriceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConfigurationPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConfigurationPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeConfigurationPriceResponse) SetHeaders(v map[string]*string) *DescribeConfigurationPriceResponse {
	s.Headers = v
	return s
}

func (s *DescribeConfigurationPriceResponse) SetStatusCode(v int32) *DescribeConfigurationPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConfigurationPriceResponse) SetBody(v *DescribeConfigurationPriceResponseBody) *DescribeConfigurationPriceResponse {
	s.Body = v
	return s
}

type DescribeEdasContainersResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The list of components.
	Data []*DescribeEdasContainersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the list of container components of a microservice application was obtained. Valid values:
	//
	// 	- **true**: indicates that the list was obtained.
	//
	// 	- **false**: indicates that the list could not be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeEdasContainersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEdasContainersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEdasContainersResponseBody) SetCode(v string) *DescribeEdasContainersResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEdasContainersResponseBody) SetData(v []*DescribeEdasContainersResponseBodyData) *DescribeEdasContainersResponseBody {
	s.Data = v
	return s
}

func (s *DescribeEdasContainersResponseBody) SetErrorCode(v string) *DescribeEdasContainersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEdasContainersResponseBody) SetMessage(v string) *DescribeEdasContainersResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEdasContainersResponseBody) SetRequestId(v string) *DescribeEdasContainersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEdasContainersResponseBody) SetSuccess(v bool) *DescribeEdasContainersResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeEdasContainersResponseBody) SetTraceId(v string) *DescribeEdasContainersResponseBody {
	s.TraceId = &v
	return s
}

type DescribeEdasContainersResponseBodyData struct {
	// Indicates whether the component is disabled. Valid values:
	//
	// 	- **true**: indicates that the component is disabled.
	//
	// 	- **false**: indicates that the component is not disabled.
	//
	// example:
	//
	// false
	Disabled *bool `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	// The version of the container, such as Ali-Tomcat, in which a High-speed Service Framework (HSF) application runs.
	//
	// example:
	//
	// 3.5.3
	EdasContainerVersion *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
}

func (s DescribeEdasContainersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEdasContainersResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeEdasContainersResponseBodyData) SetDisabled(v bool) *DescribeEdasContainersResponseBodyData {
	s.Disabled = &v
	return s
}

func (s *DescribeEdasContainersResponseBodyData) SetEdasContainerVersion(v string) *DescribeEdasContainersResponseBodyData {
	s.EdasContainerVersion = &v
	return s
}

type DescribeEdasContainersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEdasContainersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEdasContainersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEdasContainersResponse) GoString() string {
	return s.String()
}

func (s *DescribeEdasContainersResponse) SetHeaders(v map[string]*string) *DescribeEdasContainersResponse {
	s.Headers = v
	return s
}

func (s *DescribeEdasContainersResponse) SetStatusCode(v int32) *DescribeEdasContainersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEdasContainersResponse) SetBody(v *DescribeEdasContainersResponseBody) *DescribeEdasContainersResponse {
	s.Body = v
	return s
}

type DescribeGreyTagRouteRequest struct {
	// The ID of the canary release rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	GreyTagRouteId *int64 `json:"GreyTagRouteId,omitempty" xml:"GreyTagRouteId,omitempty"`
}

func (s DescribeGreyTagRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteRequest) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteRequest) SetGreyTagRouteId(v int64) *DescribeGreyTagRouteRequest {
	s.GreyTagRouteId = &v
	return s
}

type DescribeGreyTagRouteResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the canary release rule.
	Data *DescribeGreyTagRouteResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the **Error codes*	- section in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9D29CBD0-45D3-410B-9826-52F86F90****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information of the change order was queried. Valid values:
	//
	// 	- **true**: The information was queried.
	//
	// 	- **false**: The information failed to be queried.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeGreyTagRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteResponseBody) SetCode(v string) *DescribeGreyTagRouteResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBody) SetData(v *DescribeGreyTagRouteResponseBodyData) *DescribeGreyTagRouteResponseBody {
	s.Data = v
	return s
}

func (s *DescribeGreyTagRouteResponseBody) SetErrorCode(v string) *DescribeGreyTagRouteResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBody) SetMessage(v string) *DescribeGreyTagRouteResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBody) SetRequestId(v string) *DescribeGreyTagRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBody) SetSuccess(v bool) *DescribeGreyTagRouteResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBody) SetTraceId(v string) *DescribeGreyTagRouteResponseBody {
	s.TraceId = &v
	return s
}

type DescribeGreyTagRouteResponseBodyData struct {
	AlbRules []*DescribeGreyTagRouteResponseBodyDataAlbRules `json:"AlbRules,omitempty" xml:"AlbRules,omitempty" type:"Repeated"`
	// The ID of the application.
	//
	// example:
	//
	// 3faaf993-7aed-4bcd-b189-625e6a5a****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The timestamp when the canary release rule was created. Unit: milliseconds.
	//
	// example:
	//
	// 1619007592013
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the canary release rule.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The canary release rule of the Dubbo service.
	DubboRules []*DescribeGreyTagRouteResponseBodyDataDubboRules `json:"DubboRules,omitempty" xml:"DubboRules,omitempty" type:"Repeated"`
	// The ID of the canary release rule. The ID is globally unique.
	//
	// example:
	//
	// 16
	GreyTagRouteId *int64 `json:"GreyTagRouteId,omitempty" xml:"GreyTagRouteId,omitempty"`
	// The name of the canary release rule.
	//
	// example:
	//
	// rule-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The canary release rule of the Spring Cloud application.
	ScRules []*DescribeGreyTagRouteResponseBodyDataScRules `json:"ScRules,omitempty" xml:"ScRules,omitempty" type:"Repeated"`
	// The timestamp when the canary release rule was updated. Unit: milliseconds.
	//
	// example:
	//
	// 1609434061000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeGreyTagRouteResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteResponseBodyData) SetAlbRules(v []*DescribeGreyTagRouteResponseBodyDataAlbRules) *DescribeGreyTagRouteResponseBodyData {
	s.AlbRules = v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyData) SetAppId(v string) *DescribeGreyTagRouteResponseBodyData {
	s.AppId = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyData) SetCreateTime(v int64) *DescribeGreyTagRouteResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyData) SetDescription(v string) *DescribeGreyTagRouteResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyData) SetDubboRules(v []*DescribeGreyTagRouteResponseBodyDataDubboRules) *DescribeGreyTagRouteResponseBodyData {
	s.DubboRules = v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyData) SetGreyTagRouteId(v int64) *DescribeGreyTagRouteResponseBodyData {
	s.GreyTagRouteId = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyData) SetName(v string) *DescribeGreyTagRouteResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyData) SetScRules(v []*DescribeGreyTagRouteResponseBodyDataScRules) *DescribeGreyTagRouteResponseBodyData {
	s.ScRules = v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyData) SetUpdateTime(v int64) *DescribeGreyTagRouteResponseBodyData {
	s.UpdateTime = &v
	return s
}

type DescribeGreyTagRouteResponseBodyDataAlbRules struct {
	// The condition mode of the canary release rule. Valid value: AND. This value indicates that that all conditions must be met.
	//
	// example:
	//
	// AND
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	// The ID of the gateway routing rule.
	//
	// example:
	//
	// 23
	IngressId *string                                              `json:"ingressId,omitempty" xml:"ingressId,omitempty"`
	Items     []*DescribeGreyTagRouteResponseBodyDataAlbRulesItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	// The service ID.
	//
	// example:
	//
	// 22
	ServiceId *string `json:"serviceId,omitempty" xml:"serviceId,omitempty"`
}

func (s DescribeGreyTagRouteResponseBodyDataAlbRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteResponseBodyDataAlbRules) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRules) SetCondition(v string) *DescribeGreyTagRouteResponseBodyDataAlbRules {
	s.Condition = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRules) SetIngressId(v string) *DescribeGreyTagRouteResponseBodyDataAlbRules {
	s.IngressId = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRules) SetItems(v []*DescribeGreyTagRouteResponseBodyDataAlbRulesItems) *DescribeGreyTagRouteResponseBodyDataAlbRules {
	s.Items = v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRules) SetServiceId(v string) *DescribeGreyTagRouteResponseBodyDataAlbRules {
	s.ServiceId = &v
	return s
}

type DescribeGreyTagRouteResponseBodyDataAlbRulesItems struct {
	// Valid value: ==.
	//
	// example:
	//
	// ==
	Cond *string `json:"cond,omitempty" xml:"cond,omitempty"`
	// This parameter is not returned for applications that are associated with ALB instances.
	//
	// example:
	//
	// N/A
	Expr *string `json:"expr,omitempty" xml:"expr,omitempty"`
	// This parameter is not returned for applications that are associated with Application Load Balancer (ALB) instances.
	//
	// example:
	//
	// N/A
	Index *int32 `json:"index,omitempty" xml:"index,omitempty"`
	// The name of the parameter.
	//
	// example:
	//
	// example
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The operator. Valid value: **rawvalue**. This value indicates direct comparison.
	//
	// example:
	//
	// rawvalue
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// The type of the comparison. Valid values:
	//
	// 	- **sourceIp**: SourceIp
	//
	// 	- **cookie**: cookie
	//
	// 	- **header**: header
	//
	// example:
	//
	// cookie
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// The value of the parameter. This value is compared with the value that is obtained based on the type and name parameters.
	//
	// example:
	//
	// test
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeGreyTagRouteResponseBodyDataAlbRulesItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteResponseBodyDataAlbRulesItems) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRulesItems) SetCond(v string) *DescribeGreyTagRouteResponseBodyDataAlbRulesItems {
	s.Cond = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRulesItems) SetExpr(v string) *DescribeGreyTagRouteResponseBodyDataAlbRulesItems {
	s.Expr = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRulesItems) SetIndex(v int32) *DescribeGreyTagRouteResponseBodyDataAlbRulesItems {
	s.Index = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRulesItems) SetName(v string) *DescribeGreyTagRouteResponseBodyDataAlbRulesItems {
	s.Name = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRulesItems) SetOperator(v string) *DescribeGreyTagRouteResponseBodyDataAlbRulesItems {
	s.Operator = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRulesItems) SetType(v string) *DescribeGreyTagRouteResponseBodyDataAlbRulesItems {
	s.Type = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataAlbRulesItems) SetValue(v string) *DescribeGreyTagRouteResponseBodyDataAlbRulesItems {
	s.Value = &v
	return s
}

type DescribeGreyTagRouteResponseBodyDataDubboRules struct {
	// The relationship between the conditions in the canary release rule. Valid values:
	//
	// 	- **AND**: The conditions are in the logical AND relation. All conditions must be met at the same time.
	//
	// 	- **OR**: The conditions are in the logical OR relation. At least one of the conditions must be met.
	//
	// example:
	//
	// OR
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	// The group of the Dubbo service that corresponds to the canary release rule.
	//
	// example:
	//
	// DUBBO
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
	// The conditions.
	Items []*DescribeGreyTagRouteResponseBodyDataDubboRulesItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	// The method name of the Dubbo service.
	//
	// example:
	//
	// echo
	MethodName *string `json:"methodName,omitempty" xml:"methodName,omitempty"`
	// The name of the Dubbo service.
	//
	// example:
	//
	// com.alibaba.edas.boot.EchoService
	ServiceName *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	// The version of the Dubbo service.
	//
	// example:
	//
	// 1.0.0
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s DescribeGreyTagRouteResponseBodyDataDubboRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteResponseBodyDataDubboRules) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRules) SetCondition(v string) *DescribeGreyTagRouteResponseBodyDataDubboRules {
	s.Condition = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRules) SetGroup(v string) *DescribeGreyTagRouteResponseBodyDataDubboRules {
	s.Group = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRules) SetItems(v []*DescribeGreyTagRouteResponseBodyDataDubboRulesItems) *DescribeGreyTagRouteResponseBodyDataDubboRules {
	s.Items = v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRules) SetMethodName(v string) *DescribeGreyTagRouteResponseBodyDataDubboRules {
	s.MethodName = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRules) SetServiceName(v string) *DescribeGreyTagRouteResponseBodyDataDubboRules {
	s.ServiceName = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRules) SetVersion(v string) *DescribeGreyTagRouteResponseBodyDataDubboRules {
	s.Version = &v
	return s
}

type DescribeGreyTagRouteResponseBodyDataDubboRulesItems struct {
	// The comparison operator. Valid values: **>**, **<**, **>=**, **<=**, **==**, and **! =**.
	//
	// example:
	//
	// ==
	Cond *string `json:"cond,omitempty" xml:"cond,omitempty"`
	// The expression that is used to obtain the value of the parameter. Valid values:
	//
	// 	- **Empty**: obtains the value of the parameter.
	//
	// 	- **.name**: obtains the name property of the parameter. This expression works the same way as args0.getName().
	//
	// 	- **.isEnabled()**: obtains the enabled property of the parameter. This expression works the same way as args0.isEnabled().
	//
	// 	- **[0]**: indicates that the value of the parameter is an array and obtains the first value of the array. This expression works the same way as args0[0]. This expression does not start with a period (.).
	//
	// 	- **.get(0)**: indicates that the value of the parameter is a list and obtains the first value of the list. This expression works the same way as args0.get(0).
	//
	// 	- **.get("key")**: indicates that the value of the parameter is a map and obtains the value of the key in the map. This expression works the same way as args0.get("key").
	//
	// example:
	//
	// .name
	Expr *string `json:"expr,omitempty" xml:"expr,omitempty"`
	// The index of the parameter. The value 0 indicates the first parameter.
	//
	// example:
	//
	// 0
	Index *int32 `json:"index,omitempty" xml:"index,omitempty"`
	// This parameter is not returned for Dubbo services.
	//
	// example:
	//
	// N/A
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The operator. Valid values:
	//
	// 	- **rawvalue**: direct comparison.
	//
	// 	- **list**: whitelist.
	//
	// 	- **mod**: mods 100.
	//
	// 	- **deterministic_proportional_steaming_division**: percentage.
	//
	// example:
	//
	// rawvalue
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// This parameter is not returned for Dubbo services.
	//
	// example:
	//
	// N/A
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// The value of the parameter. This value is compared with the value that is obtained based on the **expr*	- and **index*	- parameters.
	//
	// example:
	//
	// test
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeGreyTagRouteResponseBodyDataDubboRulesItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteResponseBodyDataDubboRulesItems) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRulesItems) SetCond(v string) *DescribeGreyTagRouteResponseBodyDataDubboRulesItems {
	s.Cond = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRulesItems) SetExpr(v string) *DescribeGreyTagRouteResponseBodyDataDubboRulesItems {
	s.Expr = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRulesItems) SetIndex(v int32) *DescribeGreyTagRouteResponseBodyDataDubboRulesItems {
	s.Index = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRulesItems) SetName(v string) *DescribeGreyTagRouteResponseBodyDataDubboRulesItems {
	s.Name = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRulesItems) SetOperator(v string) *DescribeGreyTagRouteResponseBodyDataDubboRulesItems {
	s.Operator = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRulesItems) SetType(v string) *DescribeGreyTagRouteResponseBodyDataDubboRulesItems {
	s.Type = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataDubboRulesItems) SetValue(v string) *DescribeGreyTagRouteResponseBodyDataDubboRulesItems {
	s.Value = &v
	return s
}

type DescribeGreyTagRouteResponseBodyDataScRules struct {
	// The relationship between the conditions in the canary release rule. Valid values:
	//
	// 	- **AND**: The conditions are in the logical AND relation. All conditions must be met at the same time.
	//
	// 	- **OR**: The conditions are in the logical OR relation. At least one of the conditions must be met.
	//
	// example:
	//
	// OR
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	// The conditions.
	Items []*DescribeGreyTagRouteResponseBodyDataScRulesItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	// The path of the canary release rule of the Spring Cloud application.
	//
	// example:
	//
	// /path
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
}

func (s DescribeGreyTagRouteResponseBodyDataScRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteResponseBodyDataScRules) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteResponseBodyDataScRules) SetCondition(v string) *DescribeGreyTagRouteResponseBodyDataScRules {
	s.Condition = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataScRules) SetItems(v []*DescribeGreyTagRouteResponseBodyDataScRulesItems) *DescribeGreyTagRouteResponseBodyDataScRules {
	s.Items = v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataScRules) SetPath(v string) *DescribeGreyTagRouteResponseBodyDataScRules {
	s.Path = &v
	return s
}

type DescribeGreyTagRouteResponseBodyDataScRulesItems struct {
	// The comparison operator. Valid values: **>**, **<**, **>=**, **<=**, **==**, and **! =**.
	//
	// example:
	//
	// ==
	Cond *string `json:"cond,omitempty" xml:"cond,omitempty"`
	// This parameter is not returned for Spring Cloud applications.
	//
	// example:
	//
	// N/A
	Expr *string `json:"expr,omitempty" xml:"expr,omitempty"`
	// This parameter is not returned for Spring Cloud applications.
	//
	// example:
	//
	// N/A
	Index *int32 `json:"index,omitempty" xml:"index,omitempty"`
	// The name of the parameter.
	//
	// example:
	//
	// test
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The operator. Valid values:
	//
	// 	- **rawvalue**: direct comparison.
	//
	// 	- **list**: whitelist.
	//
	// 	- **mod**: mods 100.
	//
	// 	- **deterministic_proportional_steaming_division**: percentage.
	//
	// example:
	//
	// rawvalue
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// The type of the comparison. Valid values:
	//
	// 	- **param**: parameter
	//
	// 	- **cookie**: cookie
	//
	// 	- **header**: header
	//
	// example:
	//
	// cookie
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// The value of the parameter. This value is compared with the value that is obtained based on the **type*	- and **name*	- parameters.
	//
	// example:
	//
	// test
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeGreyTagRouteResponseBodyDataScRulesItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteResponseBodyDataScRulesItems) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteResponseBodyDataScRulesItems) SetCond(v string) *DescribeGreyTagRouteResponseBodyDataScRulesItems {
	s.Cond = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataScRulesItems) SetExpr(v string) *DescribeGreyTagRouteResponseBodyDataScRulesItems {
	s.Expr = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataScRulesItems) SetIndex(v int32) *DescribeGreyTagRouteResponseBodyDataScRulesItems {
	s.Index = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataScRulesItems) SetName(v string) *DescribeGreyTagRouteResponseBodyDataScRulesItems {
	s.Name = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataScRulesItems) SetOperator(v string) *DescribeGreyTagRouteResponseBodyDataScRulesItems {
	s.Operator = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataScRulesItems) SetType(v string) *DescribeGreyTagRouteResponseBodyDataScRulesItems {
	s.Type = &v
	return s
}

func (s *DescribeGreyTagRouteResponseBodyDataScRulesItems) SetValue(v string) *DescribeGreyTagRouteResponseBodyDataScRulesItems {
	s.Value = &v
	return s
}

type DescribeGreyTagRouteResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGreyTagRouteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGreyTagRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGreyTagRouteResponse) GoString() string {
	return s.String()
}

func (s *DescribeGreyTagRouteResponse) SetHeaders(v map[string]*string) *DescribeGreyTagRouteResponse {
	s.Headers = v
	return s
}

func (s *DescribeGreyTagRouteResponse) SetStatusCode(v int32) *DescribeGreyTagRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGreyTagRouteResponse) SetBody(v *DescribeGreyTagRouteResponseBody) *DescribeGreyTagRouteResponse {
	s.Body = v
	return s
}

type DescribeIngressRequest struct {
	// The returned data.
	//
	// This parameter is required.
	//
	// example:
	//
	// 87
	IngressId *int64 `json:"IngressId,omitempty" xml:"IngressId,omitempty"`
}

func (s DescribeIngressRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIngressRequest) GoString() string {
	return s.String()
}

func (s *DescribeIngressRequest) SetIngressId(v int64) *DescribeIngressRequest {
	s.IngressId = &v
	return s
}

type DescribeIngressResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The port specified for the SLB listener.
	Data      *DescribeIngressResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                          `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the SLB instance.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The name of the routing rule.
	//
	// example:
	//
	// 0a981dd515966966104121683d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeIngressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIngressResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIngressResponseBody) SetCode(v string) *DescribeIngressResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeIngressResponseBody) SetData(v *DescribeIngressResponseBodyData) *DescribeIngressResponseBody {
	s.Data = v
	return s
}

func (s *DescribeIngressResponseBody) SetErrorCode(v string) *DescribeIngressResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeIngressResponseBody) SetMessage(v string) *DescribeIngressResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeIngressResponseBody) SetRequestId(v string) *DescribeIngressResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIngressResponseBody) SetSuccess(v bool) *DescribeIngressResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeIngressResponseBody) SetTraceId(v string) *DescribeIngressResponseBody {
	s.TraceId = &v
	return s
}

type DescribeIngressResponseBodyData struct {
	// The name of the application specified in the default rule.
	//
	// example:
	//
	// 13623****809_16cad216b32_845_-419427029
	CertId *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
	// example:
	//
	// 87***35-cn-hangzhou,812***3-cn-hangzhou
	CertIds *string `json:"CertIds,omitempty" xml:"CertIds,omitempty"`
	// The forwarding rules.
	DefaultRule *DescribeIngressResponseBodyDataDefaultRule `json:"DefaultRule,omitempty" xml:"DefaultRule,omitempty" type:"Struct"`
	// The name of the routing rule.
	//
	// example:
	//
	// ingress-sae-test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 87
	Id          *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// The default rule.
	//
	// example:
	//
	// 443
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// example:
	//
	// HTTP
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	// Indicates whether the configurations of the routing rule were queried successfully. Valid values:
	//
	// 	- **true**: indicates that the query was successful.
	//
	// 	- **false**: indicates that the query failed.
	//
	// example:
	//
	// clb
	LoadBalanceType *string `json:"LoadBalanceType,omitempty" xml:"LoadBalanceType,omitempty"`
	// The ID of the application specified in the default rule.
	//
	// example:
	//
	// lb-uf6jt0nu4z6ior943****-80-f5****
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the certificate.
	//
	// example:
	//
	// cn-beijing:sae-test
	NamespaceId    *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	RequestTimeout *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// The ID of the application specified in the forwarding rule.
	Rules            []*DescribeIngressResponseBodyDataRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
	SecurityPolicyId *string                                 `json:"SecurityPolicyId,omitempty" xml:"SecurityPolicyId,omitempty"`
	// The type of the SLB instance based on the IP address. Valid values:
	//
	// 	- **internet**: the Internet-facing SLB instance.
	//
	// 	- **intranet**: the internal-facing SLB instance.
	//
	// example:
	//
	// lb-uf62****6d13tq2u5
	SlbId *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	// The container port of the application specified in the default rule.
	//
	// example:
	//
	// internet
	SlbType *string `json:"SlbType,omitempty" xml:"SlbType,omitempty"`
}

func (s DescribeIngressResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeIngressResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeIngressResponseBodyData) SetCertId(v string) *DescribeIngressResponseBodyData {
	s.CertId = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetCertIds(v string) *DescribeIngressResponseBodyData {
	s.CertIds = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetDefaultRule(v *DescribeIngressResponseBodyDataDefaultRule) *DescribeIngressResponseBodyData {
	s.DefaultRule = v
	return s
}

func (s *DescribeIngressResponseBodyData) SetDescription(v string) *DescribeIngressResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetId(v int64) *DescribeIngressResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetIdleTimeout(v int32) *DescribeIngressResponseBodyData {
	s.IdleTimeout = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetListenerPort(v int32) *DescribeIngressResponseBodyData {
	s.ListenerPort = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetListenerProtocol(v string) *DescribeIngressResponseBodyData {
	s.ListenerProtocol = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetLoadBalanceType(v string) *DescribeIngressResponseBodyData {
	s.LoadBalanceType = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetName(v string) *DescribeIngressResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetNamespaceId(v string) *DescribeIngressResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetRequestTimeout(v int32) *DescribeIngressResponseBodyData {
	s.RequestTimeout = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetRules(v []*DescribeIngressResponseBodyDataRules) *DescribeIngressResponseBodyData {
	s.Rules = v
	return s
}

func (s *DescribeIngressResponseBodyData) SetSecurityPolicyId(v string) *DescribeIngressResponseBodyData {
	s.SecurityPolicyId = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetSlbId(v string) *DescribeIngressResponseBodyData {
	s.SlbId = &v
	return s
}

func (s *DescribeIngressResponseBodyData) SetSlbType(v string) *DescribeIngressResponseBodyData {
	s.SlbType = &v
	return s
}

type DescribeIngressResponseBodyDataDefaultRule struct {
	// The domain name of the application.
	//
	// example:
	//
	// 395b60e4-0550-458d-9c54-a265d036****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The container port of the application specified in the forwarding rule.
	//
	// example:
	//
	// app1
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// HTTP
	BackendProtocol *string `json:"BackendProtocol,omitempty" xml:"BackendProtocol,omitempty"`
	// The name of the application specified in the forwarding rule.
	//
	// example:
	//
	// 8080
	ContainerPort *int32 `json:"ContainerPort,omitempty" xml:"ContainerPort,omitempty"`
}

func (s DescribeIngressResponseBodyDataDefaultRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeIngressResponseBodyDataDefaultRule) GoString() string {
	return s.String()
}

func (s *DescribeIngressResponseBodyDataDefaultRule) SetAppId(v string) *DescribeIngressResponseBodyDataDefaultRule {
	s.AppId = &v
	return s
}

func (s *DescribeIngressResponseBodyDataDefaultRule) SetAppName(v string) *DescribeIngressResponseBodyDataDefaultRule {
	s.AppName = &v
	return s
}

func (s *DescribeIngressResponseBodyDataDefaultRule) SetBackendProtocol(v string) *DescribeIngressResponseBodyDataDefaultRule {
	s.BackendProtocol = &v
	return s
}

func (s *DescribeIngressResponseBodyDataDefaultRule) SetContainerPort(v int32) *DescribeIngressResponseBodyDataDefaultRule {
	s.ContainerPort = &v
	return s
}

type DescribeIngressResponseBodyDataRules struct {
	// The protocol used to forward requests. Valid values:
	//
	// 	- **HTTP**: used when the application needs to identify the transmitted data.
	//
	// 	- **HTTPS**: used when the application requires encrypted data transmission.
	//
	// example:
	//
	// 395b60e4-0550-458d-9c54-a265d036****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The path of the URL.
	//
	// example:
	//
	// app1
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// HTTP
	BackendProtocol *string `json:"BackendProtocol,omitempty" xml:"BackendProtocol,omitempty"`
	// The ID of the routing rule.
	//
	// example:
	//
	// 8080
	ContainerPort *int32 `json:"ContainerPort,omitempty" xml:"ContainerPort,omitempty"`
	// The type of the SLB instance based on the processing capabilities. Valid values:
	//
	// 	- **clb**: the Classic Load Balancer (CLB) instance.
	//
	// 	- **alb**: the Application Load Balancer (ALB) instance.
	//
	// example:
	//
	// edas.site
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// /path1
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
	RewritePath *string `json:"RewritePath,omitempty" xml:"RewritePath,omitempty"`
}

func (s DescribeIngressResponseBodyDataRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeIngressResponseBodyDataRules) GoString() string {
	return s.String()
}

func (s *DescribeIngressResponseBodyDataRules) SetAppId(v string) *DescribeIngressResponseBodyDataRules {
	s.AppId = &v
	return s
}

func (s *DescribeIngressResponseBodyDataRules) SetAppName(v string) *DescribeIngressResponseBodyDataRules {
	s.AppName = &v
	return s
}

func (s *DescribeIngressResponseBodyDataRules) SetBackendProtocol(v string) *DescribeIngressResponseBodyDataRules {
	s.BackendProtocol = &v
	return s
}

func (s *DescribeIngressResponseBodyDataRules) SetContainerPort(v int32) *DescribeIngressResponseBodyDataRules {
	s.ContainerPort = &v
	return s
}

func (s *DescribeIngressResponseBodyDataRules) SetDomain(v string) *DescribeIngressResponseBodyDataRules {
	s.Domain = &v
	return s
}

func (s *DescribeIngressResponseBodyDataRules) SetPath(v string) *DescribeIngressResponseBodyDataRules {
	s.Path = &v
	return s
}

func (s *DescribeIngressResponseBodyDataRules) SetRewritePath(v string) *DescribeIngressResponseBodyDataRules {
	s.RewritePath = &v
	return s
}

type DescribeIngressResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeIngressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeIngressResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIngressResponse) GoString() string {
	return s.String()
}

func (s *DescribeIngressResponse) SetHeaders(v map[string]*string) *DescribeIngressResponse {
	s.Headers = v
	return s
}

func (s *DescribeIngressResponse) SetStatusCode(v int32) *DescribeIngressResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIngressResponse) SetBody(v *DescribeIngressResponseBody) *DescribeIngressResponse {
	s.Body = v
	return s
}

type DescribeInstanceLogRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// ******-d700e680-aa4d-4ec1-afc2-6566b5ff4d7a-85d44d4bfc-*****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLogRequest) SetInstanceId(v string) *DescribeInstanceLogRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceLogResponseBody struct {
	// Indicates whether the log of the instance was obtained. Valid values:
	//
	// 	- **true**: indicates that the log was obtained.
	//
	// 	- **false**: indicates that the log could not be obtained.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// hello\\nsae\\n
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The log of the instance.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeInstanceLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLogResponseBody) SetCode(v string) *DescribeInstanceLogResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceLogResponseBody) SetData(v string) *DescribeInstanceLogResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeInstanceLogResponseBody) SetErrorCode(v string) *DescribeInstanceLogResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInstanceLogResponseBody) SetMessage(v string) *DescribeInstanceLogResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceLogResponseBody) SetRequestId(v string) *DescribeInstanceLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceLogResponseBody) SetSuccess(v bool) *DescribeInstanceLogResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeInstanceLogResponseBody) SetTraceId(v string) *DescribeInstanceLogResponseBody {
	s.TraceId = &v
	return s
}

type DescribeInstanceLogResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLogResponse) SetHeaders(v map[string]*string) *DescribeInstanceLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceLogResponse) SetStatusCode(v int32) *DescribeInstanceLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceLogResponse) SetBody(v *DescribeInstanceLogResponseBody) *DescribeInstanceLogResponse {
	s.Body = v
	return s
}

type DescribeInstanceSpecificationsResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Information of instance types.
	Data []*DescribeInstanceSpecificationsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The error code.
	//
	// 	- If the request is successful, this parameter is not returned.****
	//
	// 	- This parameter is returned only if the request failed.***	- For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message. Valid values:
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether information of the instance types is successfully obtained. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeInstanceSpecificationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecificationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecificationsResponseBody) SetCode(v string) *DescribeInstanceSpecificationsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBody) SetData(v []*DescribeInstanceSpecificationsResponseBodyData) *DescribeInstanceSpecificationsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBody) SetErrorCode(v string) *DescribeInstanceSpecificationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBody) SetMessage(v string) *DescribeInstanceSpecificationsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBody) SetRequestId(v string) *DescribeInstanceSpecificationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBody) SetSuccess(v bool) *DescribeInstanceSpecificationsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBody) SetTraceId(v string) *DescribeInstanceSpecificationsResponseBody {
	s.TraceId = &v
	return s
}

type DescribeInstanceSpecificationsResponseBodyData struct {
	// The CPU specification of the instance type. Unit: millicore.
	//
	// example:
	//
	// 2000
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// Indicates whether the instance type is available. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// The ID of the instance type.
	//
	// example:
	//
	// 4
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The memory size of the instance type. Unit: MB.
	//
	// example:
	//
	// 4096
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The name of the instance type.
	SpecInfo *string `json:"SpecInfo,omitempty" xml:"SpecInfo,omitempty"`
	// The version number of the instance type.
	//
	// example:
	//
	// 0
	Version *int32 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeInstanceSpecificationsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecificationsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecificationsResponseBodyData) SetCpu(v int32) *DescribeInstanceSpecificationsResponseBodyData {
	s.Cpu = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBodyData) SetEnable(v bool) *DescribeInstanceSpecificationsResponseBodyData {
	s.Enable = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBodyData) SetId(v int32) *DescribeInstanceSpecificationsResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBodyData) SetMemory(v int32) *DescribeInstanceSpecificationsResponseBodyData {
	s.Memory = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBodyData) SetSpecInfo(v string) *DescribeInstanceSpecificationsResponseBodyData {
	s.SpecInfo = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponseBodyData) SetVersion(v int32) *DescribeInstanceSpecificationsResponseBodyData {
	s.Version = &v
	return s
}

type DescribeInstanceSpecificationsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceSpecificationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceSpecificationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecificationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecificationsResponse) SetHeaders(v map[string]*string) *DescribeInstanceSpecificationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceSpecificationsResponse) SetStatusCode(v int32) *DescribeInstanceSpecificationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceSpecificationsResponse) SetBody(v *DescribeInstanceSpecificationsResponseBody) *DescribeInstanceSpecificationsResponse {
	s.Body = v
	return s
}

type DescribeJobRequest struct {
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The job ID.
	//
	// example:
	//
	// event-b798157b-40a2-4388-b578-71fb897103**-**
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DescribeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeJobRequest) SetAppId(v string) *DescribeJobRequest {
	s.AppId = &v
	return s
}

func (s *DescribeJobRequest) SetJobId(v string) *DescribeJobRequest {
	s.JobId = &v
	return s
}

type DescribeJobResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the application.
	Data *DescribeJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Take note of the following rules:
	//
	// 	- If the call is successful, **ErrorCode*	- is not returned.
	//
	// 	- If the call fails, **ErrorCode*	- is returned. For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 01CF26C7-00A3-4AA6-BA76-7E95F2A3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the configurations of an application were obtained. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// ac1a0b2215622246421415014e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBody) SetCode(v string) *DescribeJobResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeJobResponseBody) SetData(v *DescribeJobResponseBodyData) *DescribeJobResponseBody {
	s.Data = v
	return s
}

func (s *DescribeJobResponseBody) SetErrorCode(v string) *DescribeJobResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeJobResponseBody) SetMessage(v string) *DescribeJobResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeJobResponseBody) SetRequestId(v string) *DescribeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJobResponseBody) SetSuccess(v bool) *DescribeJobResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeJobResponseBody) SetTraceId(v string) *DescribeJobResponseBody {
	s.TraceId = &v
	return s
}

type DescribeJobResponseBodyData struct {
	// The Alibaba Cloud Resource Name (ARN) of the RAM role that is used to pull images across accounts. For more information, see [Pull images across Alibaba Cloud accounts](https://help.aliyun.com/document_detail/190675.html) and [Grant permissions across Alibaba Cloud accounts by using a RAM role](https://help.aliyun.com/document_detail/223585.html).
	//
	// example:
	//
	// acs:ram::123456789012****:role/adminrole
	AcrAssumeRoleArn *string `json:"AcrAssumeRoleArn,omitempty" xml:"AcrAssumeRoleArn,omitempty"`
	// The ID of the Container Registry Enterprise Edition instance.
	//
	// example:
	//
	// cri-xxxxxx
	AcrInstanceId *string `json:"AcrInstanceId,omitempty" xml:"AcrInstanceId,omitempty"`
	// The description of the application.
	//
	// example:
	//
	// Sample application
	AppDescription *string `json:"AppDescription,omitempty" xml:"AppDescription,omitempty"`
	// The application ID.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The application name.
	//
	// example:
	//
	// demo-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The number of times that the job was retried.
	//
	// example:
	//
	// 3
	BackoffLimit *int64 `json:"BackoffLimit,omitempty" xml:"BackoffLimit,omitempty"`
	// The command that is used to start the image. The command must be an existing executable object in the container. Example:
	//
	//     command:
	//
	//           - echo
	//
	//           - abc
	//
	//           - >
	//
	//           - file0
	//
	// In this example, the Command parameter is set to `Command="echo", CommandArgs=["abc", ">", "file0"]`.
	//
	// example:
	//
	// echo
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The arguments of the image startup command. This parameter contains the arguments that are required for **Command**. Format:
	//
	// `["a","b"]`
	//
	// In the preceding **Command*	- example, the CommandArgs parameter is set to `CommandArgs=["abc", ">", "file0"]`. The data type of `["abc", ">", "file0"]` must be an array of strings in the JSON format. If this parameter does not exist in the Command parameter, you do not need to configure it.
	//
	// example:
	//
	// ["a","b"]
	CommandArgs *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	// The concurrency policy of the job. Valid values:
	//
	// 	- **Forbid**: Concurrent running is prohibited. If the previous job is not completed, no new job is created.
	//
	// 	- **Allow**: Concurrent running is allowed.
	//
	// 	- **Replace**: If the previous job is not completed when the time to create a new job is reached, the new job replaces the previous job.
	//
	// example:
	//
	// Allow
	ConcurrencyPolicy *string `json:"ConcurrencyPolicy,omitempty" xml:"ConcurrencyPolicy,omitempty"`
	// The details of the ConfigMap.
	ConfigMapMountDesc []*DescribeJobResponseBodyDataConfigMapMountDesc `json:"ConfigMapMountDesc,omitempty" xml:"ConfigMapMountDesc,omitempty" type:"Repeated"`
	// The CPU specifications required for each instance. Unit: millicore. This parameter cannot be set to 0. Valid values:
	//
	// 	- **500**
	//
	// 	- **1000**
	//
	// 	- **2000**
	//
	// 	- **4000**
	//
	// 	- **8000**
	//
	// 	- **16000**
	//
	// 	- **32000**
	//
	// example:
	//
	// 1000
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The custom mapping between the hostname and IP address in the container. Valid values:
	//
	// 	- **hostName**: the domain name or hostname.
	//
	// 	- **ip**: the IP address.
	//
	// example:
	//
	// [{"hostName":"test.host.name","ip":"0.0.0.0"}]
	CustomHostAlias *string `json:"CustomHostAlias,omitempty" xml:"CustomHostAlias,omitempty"`
	// The version of the container, such as Ali-Tomcat, in which an application developed based on High-speed Service Framework (HSF) is deployed.
	//
	// example:
	//
	// 3.5.3
	EdasContainerVersion *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	// The environment variables. You can configure custom environment variables or reference a ConfigMap. If you want to reference a ConfigMap, you must first create a ConfigMap. For more information, see [CreateConfigMap](https://help.aliyun.com/document_detail/176914.html). Valid values:
	//
	// 	- Custom configuration
	//
	//     	- **name**: the name of the environment variable.
	//
	//     	- **value**: the value of the environment variable.
	//
	// 	- Reference a ConfigMap
	//
	//     	- **name**: the name of the environment variable. You can reference one or all keys. To reference all keys, specify `sae-sys-configmap-all-<ConfigMap name>`. Example: `sae-sys-configmap-all-test1`.
	//
	//     	- **valueFrom**: the reference of the environment variable. Set the value to `configMapRef`.
	//
	//     	- **configMapId**: the ID of the ConfigMap.
	//
	//     	- **key**: the key. If you want to reference all keys, you do not need to configure this parameter.
	//
	// example:
	//
	// [{"name":"TEST_ENV_KEY","value":"TEST_ENV_VAR"}]
	Envs *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	// The ID of the corresponding secret.
	//
	// example:
	//
	// 10
	ImagePullSecrets *string `json:"ImagePullSecrets,omitempty" xml:"ImagePullSecrets,omitempty"`
	// The URL of the image. This parameter is returned only if **PackageType*	- is set to **Image**.
	//
	// example:
	//
	// docker.io/library/nginx:1.14.2
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// The arguments in the JAR package. The arguments are used to start the application container. The default startup command is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// start
	JarStartArgs *string `json:"JarStartArgs,omitempty" xml:"JarStartArgs,omitempty"`
	// The option settings in the JAR package. The settings are used to start the application container. The default startup command is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// -Dtest=true
	JarStartOptions *string `json:"JarStartOptions,omitempty" xml:"JarStartOptions,omitempty"`
	// The version of the Java Development Kit (JDK) on which the deployment package of the application depends. The following versions are supported:
	//
	// 	- **Open JDK 8**
	//
	// 	- **Open JDK 7**
	//
	// 	- **Dragonwell 11**
	//
	// 	- **Dragonwell 8**
	//
	// 	- **openjdk-8u191-jdk-alpine3.9**
	//
	// 	- **openjdk-7u201-jdk-alpine3.9**
	//
	// This parameter is not returned if **PackageType*	- is set to **Image**.
	//
	// example:
	//
	// Open JDK 8
	Jdk *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	// The size of memory that is required by each instance. Unit: MB. This parameter cannot be set to 0. The values of this parameter correspond to the values of the Cpu parameter:
	//
	// 	- This parameter is set to **1024*	- if the Cpu parameter is set to 500 or 1000.
	//
	// 	- This parameter is set to **2048*	- if the Cpu parameter is set to 500, 1000, or 2000.
	//
	// 	- This parameter is set to **4096*	- if the Cpu parameter is set to 1000, 2000, or 4000.
	//
	// 	- This parameter is set to **8192*	- if the Cpu parameter is set to 2000, 4000, or 8000.
	//
	// 	- This parameter is set to **12288*	- if the Cpu parameter is set to 12000.
	//
	// 	- This parameter is set to **16384*	- if the Cpu parameter is set to 4000, 8000, or 16000.
	//
	// 	- This parameter is set to **24567*	- if the Cpu parameter is set to 12000.
	//
	// 	- This parameter is set to **32768*	- if the Cpu parameter is set to 16000.
	//
	// 	- This parameter is set to **65536*	- if the Cpu parameter is set to 8000, 16000, or 32000.
	//
	// 	- This parameter is set to **131072*	- if the Cpu parameter is set to 32000.
	//
	// example:
	//
	// 2048
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The details of the mounted NAS file system.
	MountDesc []*DescribeJobResponseBodyDataMountDesc `json:"MountDesc,omitempty" xml:"MountDesc,omitempty" type:"Repeated"`
	// The mount target of the NAS file system in the VPC in which the application is deployed. If you do not need to modify this configuration during the deployment, configure **MountHost*	- only in the first request. If you need to remove this configuration, leave **MountHost*	- empty in the request.
	//
	// example:
	//
	// example.com
	MountHost *string `json:"MountHost,omitempty" xml:"MountHost,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The configurations for mounting the NAS file system.
	//
	// example:
	//
	// [{"mountPath":"/test1","readOnly":false,"nasId":"nasId1","mountDomain":"nasId1.cn-shenzhen.nas.aliyuncs.com","nasPath":"/test1"},{"nasId":"nasId2","mountDomain":"nasId2.cn-shenzhen.nas.aliyuncs.com","readOnly":false,"nasPath":"/test2","mountPath":"/test2"}]
	NasConfigs *string `json:"NasConfigs,omitempty" xml:"NasConfigs,omitempty"`
	// The ID of the NAS file system.
	//
	// example:
	//
	// AKSN89**
	NasId *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	// The AccessKey ID that is used to read data from and write data to Object Storage Service (OSS).
	//
	// example:
	//
	// xxxxxx
	OssAkId *string `json:"OssAkId,omitempty" xml:"OssAkId,omitempty"`
	// The AccessKey secret that is used to read data from and write data to OSS.
	//
	// example:
	//
	// xxxxxx
	OssAkSecret *string `json:"OssAkSecret,omitempty" xml:"OssAkSecret,omitempty"`
	// The description of mounted OSS buckets.
	OssMountDescs []*DescribeJobResponseBodyDataOssMountDescs `json:"OssMountDescs,omitempty" xml:"OssMountDescs,omitempty" type:"Repeated"`
	// The type of the deployment package. Valid values:
	//
	// 	- If you deploy the application by using a Java Archive (JAR) package, this parameter is set to **FatJar**, **War**, or **Image**.
	//
	// 	- If you deploy the application by using a PHP package, this parameter is set to one of the following values:
	//
	//     	- **PhpZip**
	//
	//     	- **IMAGE_PHP_5_4**
	//
	//     	- **IMAGE_PHP_5_4_ALPINE**
	//
	//     	- **IMAGE_PHP_5_5**
	//
	//     	- **IMAGE_PHP_5_5_ALPINE**
	//
	//     	- **IMAGE_PHP_5_6**
	//
	//     	- **IMAGE_PHP_5_6_ALPINE**
	//
	//     	- **IMAGE_PHP_7_0**
	//
	//     	- **IMAGE_PHP_7_0_ALPINE**
	//
	//     	- **IMAGE_PHP_7_1**
	//
	//     	- **IMAGE_PHP_7_1_ALPINE**
	//
	//     	- **IMAGE_PHP_7_2**
	//
	//     	- **IMAGE_PHP_7_2_ALPINE**
	//
	//     	- **IMAGE_PHP_7_3**
	//
	//     	- **IMAGE_PHP_7_3_ALPINE**
	//
	// 	- If you deploy the application by using a Pythhon package, this parameter is set to **PythonZip*	- or **Image**.
	//
	// example:
	//
	// War
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// The URL of the deployment package. This parameter is returned only if **PackageType*	- is set to **FatJar*	- or **War**.
	PackageUrl *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	// The version of the deployment package. This parameter is required only if **PackageType*	- is set to **FatJar*	- or **War**.
	//
	// example:
	//
	// 1.0
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	// The details of the PHP configuration file.
	//
	// example:
	//
	// k1=v1
	PhpConfig *string `json:"PhpConfig,omitempty" xml:"PhpConfig,omitempty"`
	// The path on which the PHP configuration file for application startup is mounted. Make sure that the PHP server uses this configuration file during the startup.
	//
	// example:
	//
	// /usr/local/etc/php/php.ini
	PhpConfigLocation *string `json:"PhpConfigLocation,omitempty" xml:"PhpConfigLocation,omitempty"`
	// The script that is run immediately after the container is started. Example: `{"exec":{"command":["cat","/etc/group"\\]}}`
	//
	// example:
	//
	// {"exec":{"command":["cat","/etc/group"]}}
	PostStart *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	// The script that is run before the container is stopped. Example: `{"exec":{"command":["cat","/etc/group"\\]}}`
	//
	// example:
	//
	// {"exec":{"command":["cat","/etc/group"]}}
	PreStop *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	// The programming language that is used to create the application. Valid values:
	//
	// 	- **java**: Java
	//
	// 	- **php**: PHP
	//
	// 	- **python**: Python
	//
	// 	- **other**: other programming languages, such as C++, Go, .NET, and Node.js.
	//
	// example:
	//
	// java
	ProgrammingLanguage *string `json:"ProgrammingLanguage,omitempty" xml:"ProgrammingLanguage,omitempty"`
	// The Internet request URLs of one-time jobs.
	PublicWebHookUrls []*string `json:"PublicWebHookUrls,omitempty" xml:"PublicWebHookUrls,omitempty" type:"Repeated"`
	// The Python environment. PYTHON 3.9.15 is supported.
	//
	// example:
	//
	// PYTHON 3.9.15
	Python *string `json:"Python,omitempty" xml:"Python,omitempty"`
	// The configurations for installing custom module dependencies. By default, the dependencies defined by the requirements.txt file in the root directory are installed. If no software package is configured, you can specify dependencies based on your business requirements.
	//
	// example:
	//
	// Flask==2.0
	PythonModules *string `json:"PythonModules,omitempty" xml:"PythonModules,omitempty"`
	// The ID of the job template that you reference.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	RefAppId *string `json:"RefAppId,omitempty" xml:"RefAppId,omitempty"`
	// The IDs of the referenced job templates.
	RefedAppIds []*string `json:"RefedAppIds,omitempty" xml:"RefedAppIds,omitempty" type:"Repeated"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of application instances.
	//
	// example:
	//
	// 2
	Replicas *int32 `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-wz969ngg2e49q5i4****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// Indicates whether job sharding is enabled.
	//
	// example:
	//
	// true
	Slice *bool `json:"Slice,omitempty" xml:"Slice,omitempty"`
	// The parameters of job sharding.
	//
	// example:
	//
	// SliceEnvs
	SliceEnvs *string `json:"SliceEnvs,omitempty" xml:"SliceEnvs,omitempty"`
	// The logging configurations of Log Service.
	//
	// 	- To use Log Service resources that are automatically created by SAE, set this parameter to `[{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]`.
	//
	// 	- To use custom Log Service resources, set this parameter to `[{"projectName":"test-sls","logType":"stdout","logDir":"","logstoreName":"sae","logtailName":""},{"projectName":"test","logDir":"/tmp/a.log","logstoreName":"sae","logtailName":""}]`.
	//
	// Parameter description:
	//
	// 	- **projectName**: the name of the Log Service project.
	//
	// 	- **logDir**: the path in which logs are stored.
	//
	// 	- **logType**: the log type. **stdout**: the standard output (stdout) log of the container. Only one stdout value for this parameter can be specified. If this parameter is not configured, file logs are collected.
	//
	// 	- **logstoreName**: the name of the Logstore in Log Service.
	//
	// 	- **logtailName**: the name of the Logtail in Log Service. If this parameter is not configured, a new Logtail is created.
	//
	// If you do not need to modify the logging configurations when you deploy the application, configure **SlsConfigs*	- only in the first request. If you no longer need to use Log Service, leave **SlsConfigs*	- empty in the request.
	//
	// example:
	//
	// [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]
	SlsConfigs *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	// Indicates whether the job template is suspended.
	//
	// example:
	//
	// false
	Suspend *bool `json:"Suspend,omitempty" xml:"Suspend,omitempty"`
	// The tags.
	Tags []*DescribeJobResponseBodyDataTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timeout period for a graceful shutdown. Default value: 30. Unit: seconds. Valid values: 1 to 300.
	//
	// example:
	//
	// 10
	TerminationGracePeriodSeconds *int32 `json:"TerminationGracePeriodSeconds,omitempty" xml:"TerminationGracePeriodSeconds,omitempty"`
	// The timeout period for the job. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The time zone. Default value: **Asia/Shanghai**.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The Tomcat configuration. If you want to delete the configuration, set this parameter to {} or leave this parameter empty. Parameter description:
	//
	// 	- **port**: the port number. Valid values: 1024 to 65535. The root permissions are required to perform operations on ports whose number is smaller than 1024. Enter a value that ranges from 1025 to 65535 because the container has only the admin permissions. If this parameter is not configured, the default value 8080 is used.
	//
	// 	- **contextPath**: the path. Default value: /. The value indicates the root directory.
	//
	// 	- **maxThreads**: the maximum number of connections in the connection pool. Default value: 400.
	//
	// 	- **uriEncoding**: the URI encoding scheme in the Tomcat container. Valid values: **UTF-8**, **ISO-8859-1**, **GBK**, and **GB2312**. If this parameter is not configured, the default value **ISO-8859-1*	- is used.
	//
	// 	- **useBodyEncoding**: indicates whether to use the encoding scheme that is specified by **BodyEncoding for URL**. Default value: **true**.
	//
	// example:
	//
	// {"port":8080,"contextPath":"/","maxThreads":400,"uriEncoding":"ISO-8859-1","useBodyEncodingForUri":true}
	TomcatConfig  *string `json:"TomcatConfig,omitempty" xml:"TomcatConfig,omitempty"`
	TriggerConfig *string `json:"TriggerConfig,omitempty" xml:"TriggerConfig,omitempty"`
	// The vSwitch ID.
	//
	// example:
	//
	// vsw-2ze559r1z1bpwqxwp****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// example:
	//
	// vpc-2ze0i263cnn311nvj****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The internal request URLs for one-time jobs.
	VpcWebHookUrls []*string `json:"VpcWebHookUrls,omitempty" xml:"VpcWebHookUrls,omitempty" type:"Repeated"`
	// The option settings in the WAR package. The settings are used to start the application container. The default startup command is `java $JAVA_OPTS $CATALINA_OPTS -Options org.apache.catalina.startup.Bootstrap "$@" start`.
	//
	// example:
	//
	// custom-option
	WarStartOptions *string `json:"WarStartOptions,omitempty" xml:"WarStartOptions,omitempty"`
	// The version of the Tomcat container on which the deployment package depends. The following versions are supported:
	//
	// 	- **apache-tomcat-7.0.91**
	//
	// 	- **apache-tomcat-8.5.42**
	//
	// This parameter is not returned if **PackageType*	- is set to **Image**.
	//
	// example:
	//
	// apache-tomcat-7.0.91
	WebContainer *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
}

func (s DescribeJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyData) SetAcrAssumeRoleArn(v string) *DescribeJobResponseBodyData {
	s.AcrAssumeRoleArn = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetAcrInstanceId(v string) *DescribeJobResponseBodyData {
	s.AcrInstanceId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetAppDescription(v string) *DescribeJobResponseBodyData {
	s.AppDescription = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetAppId(v string) *DescribeJobResponseBodyData {
	s.AppId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetAppName(v string) *DescribeJobResponseBodyData {
	s.AppName = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetBackoffLimit(v int64) *DescribeJobResponseBodyData {
	s.BackoffLimit = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetCommand(v string) *DescribeJobResponseBodyData {
	s.Command = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetCommandArgs(v string) *DescribeJobResponseBodyData {
	s.CommandArgs = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetConcurrencyPolicy(v string) *DescribeJobResponseBodyData {
	s.ConcurrencyPolicy = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetConfigMapMountDesc(v []*DescribeJobResponseBodyDataConfigMapMountDesc) *DescribeJobResponseBodyData {
	s.ConfigMapMountDesc = v
	return s
}

func (s *DescribeJobResponseBodyData) SetCpu(v int32) *DescribeJobResponseBodyData {
	s.Cpu = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetCustomHostAlias(v string) *DescribeJobResponseBodyData {
	s.CustomHostAlias = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetEdasContainerVersion(v string) *DescribeJobResponseBodyData {
	s.EdasContainerVersion = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetEnvs(v string) *DescribeJobResponseBodyData {
	s.Envs = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetImagePullSecrets(v string) *DescribeJobResponseBodyData {
	s.ImagePullSecrets = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetImageUrl(v string) *DescribeJobResponseBodyData {
	s.ImageUrl = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetJarStartArgs(v string) *DescribeJobResponseBodyData {
	s.JarStartArgs = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetJarStartOptions(v string) *DescribeJobResponseBodyData {
	s.JarStartOptions = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetJdk(v string) *DescribeJobResponseBodyData {
	s.Jdk = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetMemory(v int32) *DescribeJobResponseBodyData {
	s.Memory = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetMountDesc(v []*DescribeJobResponseBodyDataMountDesc) *DescribeJobResponseBodyData {
	s.MountDesc = v
	return s
}

func (s *DescribeJobResponseBodyData) SetMountHost(v string) *DescribeJobResponseBodyData {
	s.MountHost = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetNamespaceId(v string) *DescribeJobResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetNasConfigs(v string) *DescribeJobResponseBodyData {
	s.NasConfigs = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetNasId(v string) *DescribeJobResponseBodyData {
	s.NasId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetOssAkId(v string) *DescribeJobResponseBodyData {
	s.OssAkId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetOssAkSecret(v string) *DescribeJobResponseBodyData {
	s.OssAkSecret = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetOssMountDescs(v []*DescribeJobResponseBodyDataOssMountDescs) *DescribeJobResponseBodyData {
	s.OssMountDescs = v
	return s
}

func (s *DescribeJobResponseBodyData) SetPackageType(v string) *DescribeJobResponseBodyData {
	s.PackageType = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetPackageUrl(v string) *DescribeJobResponseBodyData {
	s.PackageUrl = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetPackageVersion(v string) *DescribeJobResponseBodyData {
	s.PackageVersion = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetPhpConfig(v string) *DescribeJobResponseBodyData {
	s.PhpConfig = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetPhpConfigLocation(v string) *DescribeJobResponseBodyData {
	s.PhpConfigLocation = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetPostStart(v string) *DescribeJobResponseBodyData {
	s.PostStart = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetPreStop(v string) *DescribeJobResponseBodyData {
	s.PreStop = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetProgrammingLanguage(v string) *DescribeJobResponseBodyData {
	s.ProgrammingLanguage = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetPublicWebHookUrls(v []*string) *DescribeJobResponseBodyData {
	s.PublicWebHookUrls = v
	return s
}

func (s *DescribeJobResponseBodyData) SetPython(v string) *DescribeJobResponseBodyData {
	s.Python = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetPythonModules(v string) *DescribeJobResponseBodyData {
	s.PythonModules = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetRefAppId(v string) *DescribeJobResponseBodyData {
	s.RefAppId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetRefedAppIds(v []*string) *DescribeJobResponseBodyData {
	s.RefedAppIds = v
	return s
}

func (s *DescribeJobResponseBodyData) SetRegionId(v string) *DescribeJobResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetReplicas(v int32) *DescribeJobResponseBodyData {
	s.Replicas = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetSecurityGroupId(v string) *DescribeJobResponseBodyData {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetSlice(v bool) *DescribeJobResponseBodyData {
	s.Slice = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetSliceEnvs(v string) *DescribeJobResponseBodyData {
	s.SliceEnvs = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetSlsConfigs(v string) *DescribeJobResponseBodyData {
	s.SlsConfigs = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetSuspend(v bool) *DescribeJobResponseBodyData {
	s.Suspend = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetTags(v []*DescribeJobResponseBodyDataTags) *DescribeJobResponseBodyData {
	s.Tags = v
	return s
}

func (s *DescribeJobResponseBodyData) SetTerminationGracePeriodSeconds(v int32) *DescribeJobResponseBodyData {
	s.TerminationGracePeriodSeconds = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetTimeout(v int64) *DescribeJobResponseBodyData {
	s.Timeout = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetTimezone(v string) *DescribeJobResponseBodyData {
	s.Timezone = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetTomcatConfig(v string) *DescribeJobResponseBodyData {
	s.TomcatConfig = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetTriggerConfig(v string) *DescribeJobResponseBodyData {
	s.TriggerConfig = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetVSwitchId(v string) *DescribeJobResponseBodyData {
	s.VSwitchId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetVpcId(v string) *DescribeJobResponseBodyData {
	s.VpcId = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetVpcWebHookUrls(v []*string) *DescribeJobResponseBodyData {
	s.VpcWebHookUrls = v
	return s
}

func (s *DescribeJobResponseBodyData) SetWarStartOptions(v string) *DescribeJobResponseBodyData {
	s.WarStartOptions = &v
	return s
}

func (s *DescribeJobResponseBodyData) SetWebContainer(v string) *DescribeJobResponseBodyData {
	s.WebContainer = &v
	return s
}

type DescribeJobResponseBodyDataConfigMapMountDesc struct {
	// The ConfigMap ID.
	//
	// example:
	//
	// 1
	ConfigMapId *int64 `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
	// The ConfigMap name.
	//
	// example:
	//
	// test
	ConfigMapName *string `json:"ConfigMapName,omitempty" xml:"ConfigMapName,omitempty"`
	// The key-value pair that is stored in the ConfigMap.
	//
	// example:
	//
	// k1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The path on which the NAS file system is mounted.
	//
	// example:
	//
	// /tmp
	MountPath *string `json:"MountPath,omitempty" xml:"MountPath,omitempty"`
}

func (s DescribeJobResponseBodyDataConfigMapMountDesc) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyDataConfigMapMountDesc) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyDataConfigMapMountDesc) SetConfigMapId(v int64) *DescribeJobResponseBodyDataConfigMapMountDesc {
	s.ConfigMapId = &v
	return s
}

func (s *DescribeJobResponseBodyDataConfigMapMountDesc) SetConfigMapName(v string) *DescribeJobResponseBodyDataConfigMapMountDesc {
	s.ConfigMapName = &v
	return s
}

func (s *DescribeJobResponseBodyDataConfigMapMountDesc) SetKey(v string) *DescribeJobResponseBodyDataConfigMapMountDesc {
	s.Key = &v
	return s
}

func (s *DescribeJobResponseBodyDataConfigMapMountDesc) SetMountPath(v string) *DescribeJobResponseBodyDataConfigMapMountDesc {
	s.MountPath = &v
	return s
}

type DescribeJobResponseBodyDataMountDesc struct {
	// The path on which the NAS file system is mounted.
	//
	// example:
	//
	// /tmp
	MountPath *string `json:"MountPath,omitempty" xml:"MountPath,omitempty"`
	// The directory in the NAS file system.
	//
	// example:
	//
	// /
	NasPath *string `json:"NasPath,omitempty" xml:"NasPath,omitempty"`
}

func (s DescribeJobResponseBodyDataMountDesc) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyDataMountDesc) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyDataMountDesc) SetMountPath(v string) *DescribeJobResponseBodyDataMountDesc {
	s.MountPath = &v
	return s
}

func (s *DescribeJobResponseBodyDataMountDesc) SetNasPath(v string) *DescribeJobResponseBodyDataMountDesc {
	s.NasPath = &v
	return s
}

type DescribeJobResponseBodyDataOssMountDescs struct {
	// The bucket name.
	//
	// example:
	//
	// oss-bucket
	BucketName *string `json:"bucketName,omitempty" xml:"bucketName,omitempty"`
	// The directory or object in OSS. If the specified directory or object does not exist, an error is returned.
	//
	// example:
	//
	// data/user.data
	BucketPath *string `json:"bucketPath,omitempty" xml:"bucketPath,omitempty"`
	// The path of the container in SAE. The parameter value that you specified overwrites the original value. If the specified path does not exist, SAE automatically creates the path.
	//
	// example:
	//
	// /usr/data/user.data
	MountPath *string `json:"mountPath,omitempty" xml:"mountPath,omitempty"`
	// Indicates whether the application can use the container path to read data from or write data to resources in the directory of the OSS bucket. Valid values:
	//
	// 	- **true**: The application has the read-only permission.
	//
	// 	- **false**: The application has read and write permissions.
	//
	// example:
	//
	// true
	ReadOnly *bool `json:"readOnly,omitempty" xml:"readOnly,omitempty"`
}

func (s DescribeJobResponseBodyDataOssMountDescs) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyDataOssMountDescs) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyDataOssMountDescs) SetBucketName(v string) *DescribeJobResponseBodyDataOssMountDescs {
	s.BucketName = &v
	return s
}

func (s *DescribeJobResponseBodyDataOssMountDescs) SetBucketPath(v string) *DescribeJobResponseBodyDataOssMountDescs {
	s.BucketPath = &v
	return s
}

func (s *DescribeJobResponseBodyDataOssMountDescs) SetMountPath(v string) *DescribeJobResponseBodyDataOssMountDescs {
	s.MountPath = &v
	return s
}

func (s *DescribeJobResponseBodyDataOssMountDescs) SetReadOnly(v bool) *DescribeJobResponseBodyDataOssMountDescs {
	s.ReadOnly = &v
	return s
}

type DescribeJobResponseBodyDataTags struct {
	// The tag key.
	//
	// example:
	//
	// k1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// v1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeJobResponseBodyDataTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBodyDataTags) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBodyDataTags) SetKey(v string) *DescribeJobResponseBodyDataTags {
	s.Key = &v
	return s
}

func (s *DescribeJobResponseBodyDataTags) SetValue(v string) *DescribeJobResponseBodyDataTags {
	s.Value = &v
	return s
}

type DescribeJobResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeJobResponse) SetHeaders(v map[string]*string) *DescribeJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeJobResponse) SetStatusCode(v int32) *DescribeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJobResponse) SetBody(v *DescribeJobResponseBody) *DescribeJobResponse {
	s.Body = v
	return s
}

type DescribeJobHistoryRequest struct {
	// The ID of the job template.
	//
	// This parameter is required.
	//
	// example:
	//
	// e1a7a07-abcb-4652-a1d3-2d57f415****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The number of the page to return.
	//
	// example:
	//
	// 1
	CurrentPage *int64 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page. Valid values: 0 to 10000.
	//
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The status of the job. Valid values:
	//
	// 	- **0**: The job is not executed.
	//
	// 	- **1**: The job is executed.
	//
	// 	- **2**: The job fails to be executed.
	//
	// 	- **3**: The job is being executed.
	//
	// example:
	//
	// 1
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeJobHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeJobHistoryRequest) SetAppId(v string) *DescribeJobHistoryRequest {
	s.AppId = &v
	return s
}

func (s *DescribeJobHistoryRequest) SetCurrentPage(v int64) *DescribeJobHistoryRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeJobHistoryRequest) SetPageSize(v int64) *DescribeJobHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeJobHistoryRequest) SetState(v string) *DescribeJobHistoryRequest {
	s.State = &v
	return s
}

type DescribeJobHistoryResponseBody struct {
	// The HTTP status code returned. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DescribeJobHistoryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Take note of the following rules:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The message returned. Take note of the following rules:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 53F15A18-8079-5992-810C-0211A5AE****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0b1639af16575057857241351e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeJobHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJobHistoryResponseBody) SetCode(v string) *DescribeJobHistoryResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeJobHistoryResponseBody) SetData(v *DescribeJobHistoryResponseBodyData) *DescribeJobHistoryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeJobHistoryResponseBody) SetErrorCode(v string) *DescribeJobHistoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeJobHistoryResponseBody) SetMessage(v string) *DescribeJobHistoryResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeJobHistoryResponseBody) SetRequestId(v string) *DescribeJobHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJobHistoryResponseBody) SetSuccess(v bool) *DescribeJobHistoryResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeJobHistoryResponseBody) SetTraceId(v string) *DescribeJobHistoryResponseBody {
	s.TraceId = &v
	return s
}

type DescribeJobHistoryResponseBodyData struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int64 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The jobs.
	Jobs []*DescribeJobHistoryResponseBodyDataJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// The number of entries to return on each page. Valid values: 0 to 10000.
	//
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of jobs.
	//
	// example:
	//
	// 20
	TotalSize *int64 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s DescribeJobHistoryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobHistoryResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeJobHistoryResponseBodyData) SetCurrentPage(v int64) *DescribeJobHistoryResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *DescribeJobHistoryResponseBodyData) SetJobs(v []*DescribeJobHistoryResponseBodyDataJobs) *DescribeJobHistoryResponseBodyData {
	s.Jobs = v
	return s
}

func (s *DescribeJobHistoryResponseBodyData) SetPageSize(v int64) *DescribeJobHistoryResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeJobHistoryResponseBodyData) SetTotalSize(v int64) *DescribeJobHistoryResponseBodyData {
	s.TotalSize = &v
	return s
}

type DescribeJobHistoryResponseBodyDataJobs struct {
	// The number of running instances.
	//
	// example:
	//
	// 0
	Active *int64 `json:"Active,omitempty" xml:"Active,omitempty"`
	// The time when the job was executed.
	//
	// example:
	//
	// 1657522839
	CompletionTime *int64 `json:"CompletionTime,omitempty" xml:"CompletionTime,omitempty"`
	// The number of instances that failed to run.
	//
	// example:
	//
	// 0
	Failed *int64 `json:"Failed,omitempty" xml:"Failed,omitempty"`
	// The job ID.
	//
	// example:
	//
	// manual-3db7a8fa-5d40-4edc-92e4-49d50eab****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The message returned if exceptions occur during job running.
	//
	// example:
	//
	// Null
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 1657522800
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the job. Valid values:
	//
	// 	- **0**: The job was not executed.
	//
	// 	- **1**: The job was executed.
	//
	// 	- **2**: The job failed to be executed.
	//
	// 	- **3**: The job is being executed.
	//
	// example:
	//
	// 1
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The number of instances that are successfully run.
	//
	// example:
	//
	// 3
	Succeeded *int64 `json:"Succeeded,omitempty" xml:"Succeeded,omitempty"`
}

func (s DescribeJobHistoryResponseBodyDataJobs) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobHistoryResponseBodyDataJobs) GoString() string {
	return s.String()
}

func (s *DescribeJobHistoryResponseBodyDataJobs) SetActive(v int64) *DescribeJobHistoryResponseBodyDataJobs {
	s.Active = &v
	return s
}

func (s *DescribeJobHistoryResponseBodyDataJobs) SetCompletionTime(v int64) *DescribeJobHistoryResponseBodyDataJobs {
	s.CompletionTime = &v
	return s
}

func (s *DescribeJobHistoryResponseBodyDataJobs) SetFailed(v int64) *DescribeJobHistoryResponseBodyDataJobs {
	s.Failed = &v
	return s
}

func (s *DescribeJobHistoryResponseBodyDataJobs) SetJobId(v string) *DescribeJobHistoryResponseBodyDataJobs {
	s.JobId = &v
	return s
}

func (s *DescribeJobHistoryResponseBodyDataJobs) SetMessage(v string) *DescribeJobHistoryResponseBodyDataJobs {
	s.Message = &v
	return s
}

func (s *DescribeJobHistoryResponseBodyDataJobs) SetStartTime(v int64) *DescribeJobHistoryResponseBodyDataJobs {
	s.StartTime = &v
	return s
}

func (s *DescribeJobHistoryResponseBodyDataJobs) SetState(v string) *DescribeJobHistoryResponseBodyDataJobs {
	s.State = &v
	return s
}

func (s *DescribeJobHistoryResponseBodyDataJobs) SetSucceeded(v int64) *DescribeJobHistoryResponseBodyDataJobs {
	s.Succeeded = &v
	return s
}

type DescribeJobHistoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeJobHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeJobHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeJobHistoryResponse) SetHeaders(v map[string]*string) *DescribeJobHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeJobHistoryResponse) SetStatusCode(v int32) *DescribeJobHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJobHistoryResponse) SetBody(v *DescribeJobHistoryResponseBody) *DescribeJobHistoryResponse {
	s.Body = v
	return s
}

type DescribeJobStatusRequest struct {
	// The ID of the job template.
	//
	// This parameter is required.
	//
	// example:
	//
	// e1a7a07-abcb-4652-a1d3-2d57f415****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The job ID.
	//
	// example:
	//
	// event-b798157b-40a2-4388-b578-71fb897103**-**
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DescribeJobStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeJobStatusRequest) SetAppId(v string) *DescribeJobStatusRequest {
	s.AppId = &v
	return s
}

func (s *DescribeJobStatusRequest) SetJobId(v string) *DescribeJobStatusRequest {
	s.JobId = &v
	return s
}

type DescribeJobStatusResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DescribeJobStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Take note of the following rules:
	//
	// 	- **ErrorCode*	- is not returned if the request succeeds.
	//
	// 	- **ErrorCode*	- is returned if the request fails. For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message. Take note of the following rules:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 53F15A18-8079-5992-810C-0211A5AE****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0b1639af16575057857241351e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeJobStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJobStatusResponseBody) SetCode(v string) *DescribeJobStatusResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeJobStatusResponseBody) SetData(v *DescribeJobStatusResponseBodyData) *DescribeJobStatusResponseBody {
	s.Data = v
	return s
}

func (s *DescribeJobStatusResponseBody) SetErrorCode(v string) *DescribeJobStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeJobStatusResponseBody) SetMessage(v string) *DescribeJobStatusResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeJobStatusResponseBody) SetRequestId(v string) *DescribeJobStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJobStatusResponseBody) SetSuccess(v bool) *DescribeJobStatusResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeJobStatusResponseBody) SetTraceId(v string) *DescribeJobStatusResponseBody {
	s.TraceId = &v
	return s
}

type DescribeJobStatusResponseBodyData struct {
	// The number of running instances.
	//
	// example:
	//
	// 0
	Active *int64 `json:"Active,omitempty" xml:"Active,omitempty"`
	// The time when the job was executed.
	//
	// example:
	//
	// 1657522839
	CompletionTime *int64 `json:"CompletionTime,omitempty" xml:"CompletionTime,omitempty"`
	// The number of instances that failed to run.
	//
	// example:
	//
	// 0
	Failed *int64 `json:"Failed,omitempty" xml:"Failed,omitempty"`
	// The job ID.
	//
	// example:
	//
	// event-b798157b-40a2-4388-b578-71fb897103**-**
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message. Take note of the following rules:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the job was created.
	//
	// example:
	//
	// 1657522800
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the job. Valid values:
	//
	// 	- **0**: The job is not executed.
	//
	// 	- **1**: The job was executed.
	//
	// 	- **2**: The job failed to be executed.
	//
	// 	- **3**: The job is being executed.
	//
	// example:
	//
	// 1
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The number of instances that are successfully run.
	//
	// example:
	//
	// 3
	Succeeded *int64 `json:"Succeeded,omitempty" xml:"Succeeded,omitempty"`
}

func (s DescribeJobStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeJobStatusResponseBodyData) SetActive(v int64) *DescribeJobStatusResponseBodyData {
	s.Active = &v
	return s
}

func (s *DescribeJobStatusResponseBodyData) SetCompletionTime(v int64) *DescribeJobStatusResponseBodyData {
	s.CompletionTime = &v
	return s
}

func (s *DescribeJobStatusResponseBodyData) SetFailed(v int64) *DescribeJobStatusResponseBodyData {
	s.Failed = &v
	return s
}

func (s *DescribeJobStatusResponseBodyData) SetJobId(v string) *DescribeJobStatusResponseBodyData {
	s.JobId = &v
	return s
}

func (s *DescribeJobStatusResponseBodyData) SetMessage(v string) *DescribeJobStatusResponseBodyData {
	s.Message = &v
	return s
}

func (s *DescribeJobStatusResponseBodyData) SetStartTime(v int64) *DescribeJobStatusResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *DescribeJobStatusResponseBodyData) SetState(v string) *DescribeJobStatusResponseBodyData {
	s.State = &v
	return s
}

func (s *DescribeJobStatusResponseBodyData) SetSucceeded(v int64) *DescribeJobStatusResponseBodyData {
	s.Succeeded = &v
	return s
}

type DescribeJobStatusResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeJobStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeJobStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeJobStatusResponse) SetHeaders(v map[string]*string) *DescribeJobStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeJobStatusResponse) SetStatusCode(v int32) *DescribeJobStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJobStatusResponse) SetBody(v *DescribeJobStatusResponseBody) *DescribeJobStatusResponse {
	s.Body = v
	return s
}

type DescribeNamespaceRequest struct {
	// The short ID of the namespace. You do not need to specify a region ID. The value of this parameter can be up to 20 characters in length and can contain only lowercase letters and digits.
	//
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// The ID of the namespace. The information about the default namespace cannot be queried or modified. The default namespace cannot be deleted.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DescribeNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceRequest) SetNameSpaceShortId(v string) *DescribeNamespaceRequest {
	s.NameSpaceShortId = &v
	return s
}

func (s *DescribeNamespaceRequest) SetNamespaceId(v string) *DescribeNamespaceRequest {
	s.NamespaceId = &v
	return s
}

type DescribeNamespaceResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the namespace.
	Data *DescribeNamespaceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned if the request fails. For more information, see the **Error codes*	- section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information about the namespace was queried successfully. Valid values:
	//
	// 	- **true**: The information was queried.
	//
	// 	- **false**: The image failed to be found.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a981dd515966966104121683d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResponseBody) SetCode(v string) *DescribeNamespaceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetData(v *DescribeNamespaceResponseBodyData) *DescribeNamespaceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeNamespaceResponseBody) SetErrorCode(v string) *DescribeNamespaceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetMessage(v string) *DescribeNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetRequestId(v string) *DescribeNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetSuccess(v bool) *DescribeNamespaceResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeNamespaceResponseBody) SetTraceId(v string) *DescribeNamespaceResponseBody {
	s.TraceId = &v
	return s
}

type DescribeNamespaceResponseBodyData struct {
	// Indicates whether the SAE built-in registry is enabled. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	EnableMicroRegistration *bool `json:"EnableMicroRegistration,omitempty" xml:"EnableMicroRegistration,omitempty"`
	// The short ID of the namespace.
	//
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// The description of the namespace.
	//
	// example:
	//
	// desc
	NamespaceDescription *string `json:"NamespaceDescription,omitempty" xml:"NamespaceDescription,omitempty"`
	// The ID of the namespace. The information about the default namespace cannot be queried or modified. The default namespace cannot be deleted.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// name
	NamespaceName *string `json:"NamespaceName,omitempty" xml:"NamespaceName,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeNamespaceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResponseBodyData) SetEnableMicroRegistration(v bool) *DescribeNamespaceResponseBodyData {
	s.EnableMicroRegistration = &v
	return s
}

func (s *DescribeNamespaceResponseBodyData) SetNameSpaceShortId(v string) *DescribeNamespaceResponseBodyData {
	s.NameSpaceShortId = &v
	return s
}

func (s *DescribeNamespaceResponseBodyData) SetNamespaceDescription(v string) *DescribeNamespaceResponseBodyData {
	s.NamespaceDescription = &v
	return s
}

func (s *DescribeNamespaceResponseBodyData) SetNamespaceId(v string) *DescribeNamespaceResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DescribeNamespaceResponseBodyData) SetNamespaceName(v string) *DescribeNamespaceResponseBodyData {
	s.NamespaceName = &v
	return s
}

func (s *DescribeNamespaceResponseBodyData) SetRegionId(v string) *DescribeNamespaceResponseBodyData {
	s.RegionId = &v
	return s
}

type DescribeNamespaceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResponse) SetHeaders(v map[string]*string) *DescribeNamespaceResponse {
	s.Headers = v
	return s
}

func (s *DescribeNamespaceResponse) SetStatusCode(v int32) *DescribeNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNamespaceResponse) SetBody(v *DescribeNamespaceResponseBody) *DescribeNamespaceResponse {
	s.Body = v
	return s
}

type DescribeNamespaceListRequest struct {
	// Specifies whether to return custom namespaces. Valid values:
	//
	// 	- **true**: The system returns custom namespaces.
	//
	// 	- **false**: The system does not return custom namespaces.
	//
	// example:
	//
	// true
	ContainCustom *bool `json:"ContainCustom,omitempty" xml:"ContainCustom,omitempty"`
	// Specifies whether to exclude hybrid cloud namespaces from the result. Valid values:
	//
	// - **true**: The system excludes hybrid cloud namespaces from the result.
	//
	// - **false**: The system does not exclude hybrid cloud namespaces from the result.
	//
	// example:
	//
	// true
	HybridCloudExclude *bool `json:"HybridCloudExclude,omitempty" xml:"HybridCloudExclude,omitempty"`
}

func (s DescribeNamespaceListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceListRequest) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceListRequest) SetContainCustom(v bool) *DescribeNamespaceListRequest {
	s.ContainCustom = &v
	return s
}

func (s *DescribeNamespaceListRequest) SetHybridCloudExclude(v bool) *DescribeNamespaceListRequest {
	s.HybridCloudExclude = &v
	return s
}

type DescribeNamespaceListResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The namespaces.
	Data []*DescribeNamespaceListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the **Error codes*	- section in this topic.
	//
	// example:
	//
	// NULL
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 30375C38-F4ED-4135-A0AE-5C75DC7F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the list of namespaces was queried. Valid values:
	//
	// 	- **true**: The list was queried.
	//
	// 	- **false**: The list failed to be queried.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// ac1a0b2215622920113732501e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeNamespaceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceListResponseBody) SetCode(v string) *DescribeNamespaceListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeNamespaceListResponseBody) SetData(v []*DescribeNamespaceListResponseBodyData) *DescribeNamespaceListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeNamespaceListResponseBody) SetErrorCode(v string) *DescribeNamespaceListResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeNamespaceListResponseBody) SetMessage(v string) *DescribeNamespaceListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeNamespaceListResponseBody) SetRequestId(v string) *DescribeNamespaceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNamespaceListResponseBody) SetSuccess(v bool) *DescribeNamespaceListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeNamespaceListResponseBody) SetTraceId(v string) *DescribeNamespaceListResponseBody {
	s.TraceId = &v
	return s
}

type DescribeNamespaceListResponseBodyData struct {
	// The command that was run to install the agent.
	//
	// example:
	//
	// http://edas-bj.oss-cn-beijing-internal.aliyuncs.com/test/install.sh
	AgentInstall *string `json:"AgentInstall,omitempty" xml:"AgentInstall,omitempty"`
	// This parameter is no longer valid.
	//
	// example:
	//
	// false
	Current *bool `json:"Current,omitempty" xml:"Current,omitempty"`
	// Indicates whether custom namespaces are returned. Valid values:
	//
	// 	- **true**: Custom namespaces are returned.
	//
	// 	- **false**: Custom namespaces are not returned.
	//
	// example:
	//
	// true
	Custom *bool `json:"Custom,omitempty" xml:"Custom,omitempty"`
	// Indicates whether hybrid cloud namespaces are excluded. Valid values:
	//
	// 	- **true**: Hybrid cloud namespaces are excluded.
	//
	// 	- **false**: Hybrid cloud namespaces are included.
	//
	// example:
	//
	// false
	HybridCloudEnable *bool `json:"HybridCloudEnable,omitempty" xml:"HybridCloudEnable,omitempty"`
	// The short ID of the namespace.
	//
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// test
	NamespaceName *string `json:"NamespaceName,omitempty" xml:"NamespaceName,omitempty"`
	// The region to which the namespace belongs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-wz969ngg2e49q5i4****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-2ze559r1z1bpwqxwp****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// example:
	//
	// vpc-2ze0i263cnn311nvj****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeNamespaceListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceListResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceListResponseBodyData) SetAgentInstall(v string) *DescribeNamespaceListResponseBodyData {
	s.AgentInstall = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetCurrent(v bool) *DescribeNamespaceListResponseBodyData {
	s.Current = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetCustom(v bool) *DescribeNamespaceListResponseBodyData {
	s.Custom = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetHybridCloudEnable(v bool) *DescribeNamespaceListResponseBodyData {
	s.HybridCloudEnable = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetNameSpaceShortId(v string) *DescribeNamespaceListResponseBodyData {
	s.NameSpaceShortId = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetNamespaceId(v string) *DescribeNamespaceListResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetNamespaceName(v string) *DescribeNamespaceListResponseBodyData {
	s.NamespaceName = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetRegionId(v string) *DescribeNamespaceListResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetSecurityGroupId(v string) *DescribeNamespaceListResponseBodyData {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetVSwitchId(v string) *DescribeNamespaceListResponseBodyData {
	s.VSwitchId = &v
	return s
}

func (s *DescribeNamespaceListResponseBodyData) SetVpcId(v string) *DescribeNamespaceListResponseBodyData {
	s.VpcId = &v
	return s
}

type DescribeNamespaceListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNamespaceListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNamespaceListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceListResponse) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceListResponse) SetHeaders(v map[string]*string) *DescribeNamespaceListResponse {
	s.Headers = v
	return s
}

func (s *DescribeNamespaceListResponse) SetStatusCode(v int32) *DescribeNamespaceListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNamespaceListResponse) SetBody(v *DescribeNamespaceListResponseBody) *DescribeNamespaceListResponse {
	s.Body = v
	return s
}

type DescribeNamespaceResourcesRequest struct {
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// cn-shanghai:test
	//
	// example:
	//
	// cn-shanghai:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DescribeNamespaceResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResourcesRequest) SetNameSpaceShortId(v string) *DescribeNamespaceResourcesRequest {
	s.NameSpaceShortId = &v
	return s
}

func (s *DescribeNamespaceResourcesRequest) SetNamespaceId(v string) *DescribeNamespaceResourcesRequest {
	s.NamespaceId = &v
	return s
}

type DescribeNamespaceResourcesResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DescribeNamespaceResourcesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information about resources in the namespace was queried successfully. Valid values:
	//
	// 	- **true**: indicates that the query was successful.
	//
	// 	- **false**: indicates that the query failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeNamespaceResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResourcesResponseBody) SetCode(v string) *DescribeNamespaceResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBody) SetData(v *DescribeNamespaceResourcesResponseBodyData) *DescribeNamespaceResourcesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeNamespaceResourcesResponseBody) SetErrorCode(v string) *DescribeNamespaceResourcesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBody) SetMessage(v string) *DescribeNamespaceResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBody) SetRequestId(v string) *DescribeNamespaceResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBody) SetSuccess(v bool) *DescribeNamespaceResourcesResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBody) SetTraceId(v string) *DescribeNamespaceResourcesResponseBody {
	s.TraceId = &v
	return s
}

type DescribeNamespaceResourcesResponseBodyData struct {
	// The number of applications.
	//
	// example:
	//
	// 1
	AppCount *int64 `json:"AppCount,omitempty" xml:"AppCount,omitempty"`
	// The region to which the namespace belongs.
	//
	// example:
	//
	// cn-shanghai
	BelongRegion *string `json:"BelongRegion,omitempty" xml:"BelongRegion,omitempty"`
	// The description of the namespace.
	//
	// example:
	//
	// decs
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the jump server application.
	//
	// example:
	//
	// 5ec46468-6b26-4a3c-9f7c-bf88761a****
	JumpServerAppId *string `json:"JumpServerAppId,omitempty" xml:"JumpServerAppId,omitempty"`
	// The IP address of the jump server.
	//
	// example:
	//
	// 120.78.XXX.XX
	JumpServerIp *string `json:"JumpServerIp,omitempty" xml:"JumpServerIp,omitempty"`
	// The ID of the change order.
	//
	// example:
	//
	// afedb3c4-63f8-4a3d-aaa3-2c30363f****
	LastChangeOrderId *string `json:"LastChangeOrderId,omitempty" xml:"LastChangeOrderId,omitempty"`
	// Indicates whether a change order is being executed in the namespace. Valid values:
	//
	// 	- **true**: indicates that a change order is being executed in the namespace.
	//
	// 	- **false**: indicates that no change orders are being executed in the namespace.
	//
	// example:
	//
	// true
	LastChangeOrderRunning *bool `json:"LastChangeOrderRunning,omitempty" xml:"LastChangeOrderRunning,omitempty"`
	// The status of the latest change order. Valid values:
	//
	// 	- **READY**: The change order is ready.
	//
	// 	- **RUNNING**: The change order is being executed.
	//
	// 	- **SUCCESS**: The change order was executed.
	//
	// 	- **FAIL**: The change order could not be executed.
	//
	// 	- **ABORT**: The change order was terminated.
	//
	// 	- **WAIT_BATCH_CONFIRM**: The change order is pending execution. You must manually confirm the release batch.
	//
	// 	- **AUTO_BATCH_WAIT**: The change order is pending execution. SAE will automatically confirm the release batch.
	//
	// 	- **SYSTEM_FAIL**: A system exception occurred.
	//
	// 	- **WAIT_APPROVAL**: The change order is pending approval.
	//
	// 	- **APPROVED**: The change order is approved and is pending execution.
	//
	// example:
	//
	// SUCCESS
	LastChangeOrderStatus *string `json:"LastChangeOrderStatus,omitempty" xml:"LastChangeOrderStatus,omitempty"`
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// cn-shangha:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// test
	NamespaceName *string `json:"NamespaceName,omitempty" xml:"NamespaceName,omitempty"`
	// Indicates whether the notification of a change order is expired. Valid values:
	//
	// 	- **true**: indicates that the notification is expired.
	//
	// 	- **false**: indicates that the notification is not expired.
	//
	// example:
	//
	// true
	NotificationExpired *bool `json:"NotificationExpired,omitempty" xml:"NotificationExpired,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-wz969ngg2e49q5i4****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The ID of the tenant in the SAE namespace.
	//
	// example:
	//
	// 838cad95-973f-48fe-830b-2a8546d7****
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// test@aliyun.com
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-2ze559r1z1bpwqxwp****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The name of the vSwitch.
	//
	// example:
	//
	// test
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// example:
	//
	// vpc-2ze0i263cnn311nvj****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The name of the VPC.
	//
	// example:
	//
	// test
	VpcName *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s DescribeNamespaceResourcesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceResourcesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetAppCount(v int64) *DescribeNamespaceResourcesResponseBodyData {
	s.AppCount = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetBelongRegion(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.BelongRegion = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetDescription(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetJumpServerAppId(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.JumpServerAppId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetJumpServerIp(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.JumpServerIp = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetLastChangeOrderId(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.LastChangeOrderId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetLastChangeOrderRunning(v bool) *DescribeNamespaceResourcesResponseBodyData {
	s.LastChangeOrderRunning = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetLastChangeOrderStatus(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.LastChangeOrderStatus = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetNameSpaceShortId(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.NameSpaceShortId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetNamespaceId(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetNamespaceName(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.NamespaceName = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetNotificationExpired(v bool) *DescribeNamespaceResourcesResponseBodyData {
	s.NotificationExpired = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetSecurityGroupId(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetTenantId(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetUserId(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.UserId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetVSwitchId(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.VSwitchId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetVSwitchName(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.VSwitchName = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetVpcId(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.VpcId = &v
	return s
}

func (s *DescribeNamespaceResourcesResponseBodyData) SetVpcName(v string) *DescribeNamespaceResourcesResponseBodyData {
	s.VpcName = &v
	return s
}

type DescribeNamespaceResourcesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNamespaceResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNamespaceResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespaceResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNamespaceResourcesResponse) SetHeaders(v map[string]*string) *DescribeNamespaceResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeNamespaceResourcesResponse) SetStatusCode(v int32) *DescribeNamespaceResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNamespaceResourcesResponse) SetBody(v *DescribeNamespaceResourcesResponseBody) *DescribeNamespaceResourcesResponse {
	s.Body = v
	return s
}

type DescribeNamespacesRequest struct {
	// 1
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// 10
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeNamespacesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespacesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNamespacesRequest) SetCurrentPage(v int32) *DescribeNamespacesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNamespacesRequest) SetPageSize(v int32) *DescribeNamespacesRequest {
	s.PageSize = &v
	return s
}

type DescribeNamespacesResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information of namespaces.
	Data *DescribeNamespacesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// - The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// - The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error message is returned when the request fails.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the details of namespaces were queried successfully. Valid values:
	//
	// 	- **true**: indicates that the query was successful.
	//
	// 	- **false**: indicates that the query failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// 0a981dd515966966104121683d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeNamespacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespacesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNamespacesResponseBody) SetCode(v string) *DescribeNamespacesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeNamespacesResponseBody) SetData(v *DescribeNamespacesResponseBodyData) *DescribeNamespacesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeNamespacesResponseBody) SetErrorCode(v string) *DescribeNamespacesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeNamespacesResponseBody) SetMessage(v string) *DescribeNamespacesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeNamespacesResponseBody) SetRequestId(v string) *DescribeNamespacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNamespacesResponseBody) SetSuccess(v bool) *DescribeNamespacesResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeNamespacesResponseBody) SetTraceId(v string) *DescribeNamespacesResponseBody {
	s.TraceId = &v
	return s
}

type DescribeNamespacesResponseBodyData struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The list of namespaces.
	Namespaces []*DescribeNamespacesResponseBodyDataNamespaces `json:"Namespaces,omitempty" xml:"Namespaces,omitempty" type:"Repeated"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of namespaces.
	//
	// example:
	//
	// 100
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s DescribeNamespacesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespacesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeNamespacesResponseBodyData) SetCurrentPage(v int32) *DescribeNamespacesResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNamespacesResponseBodyData) SetNamespaces(v []*DescribeNamespacesResponseBodyDataNamespaces) *DescribeNamespacesResponseBodyData {
	s.Namespaces = v
	return s
}

func (s *DescribeNamespacesResponseBodyData) SetPageSize(v int32) *DescribeNamespacesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeNamespacesResponseBodyData) SetTotalSize(v int32) *DescribeNamespacesResponseBodyData {
	s.TotalSize = &v
	return s
}

type DescribeNamespacesResponseBodyDataNamespaces struct {
	// The ACM-specific AccessKey ID. It can be used to manage data in an Application Configuration Management (ACM) namespace. For more information, see [Differences between Alibaba Cloud AccessKey and ACM-specific AccessKey](~~~~).
	//
	// example:
	//
	// b34dbe3315c64f9f99b58ea447ec****
	AccessKey *string `json:"AccessKey,omitempty" xml:"AccessKey,omitempty"`
	// example:
	//
	// addr-bj-internal.edas.aliyun.com
	AddressServerHost *string `json:"AddressServerHost,omitempty" xml:"AddressServerHost,omitempty"`
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// The description of the namespace.
	//
	// example:
	//
	// desc
	NamespaceDescription *string `json:"NamespaceDescription,omitempty" xml:"NamespaceDescription,omitempty"`
	// The ID of the namespace. The information of the default namespace cannot be queried or modified. The default namespace cannot be deleted.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// name
	NamespaceName *string `json:"NamespaceName,omitempty" xml:"NamespaceName,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ACM-specific AccessKey secret. It can be used to manage data in an ACM namespace. For more information, see [Differences between Alibaba Cloud AccessKey and ACM-specific AccessKey](~~~~).
	//
	// example:
	//
	// G/w6sseK7+nb3S6HBmANDBMD****
	SecretKey *string `json:"SecretKey,omitempty" xml:"SecretKey,omitempty"`
	// The ID of the tenant.
	//
	// example:
	//
	// 838cad95-973f-48fe-830b-2a8546d7****
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeNamespacesResponseBodyDataNamespaces) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespacesResponseBodyDataNamespaces) GoString() string {
	return s.String()
}

func (s *DescribeNamespacesResponseBodyDataNamespaces) SetAccessKey(v string) *DescribeNamespacesResponseBodyDataNamespaces {
	s.AccessKey = &v
	return s
}

func (s *DescribeNamespacesResponseBodyDataNamespaces) SetAddressServerHost(v string) *DescribeNamespacesResponseBodyDataNamespaces {
	s.AddressServerHost = &v
	return s
}

func (s *DescribeNamespacesResponseBodyDataNamespaces) SetNameSpaceShortId(v string) *DescribeNamespacesResponseBodyDataNamespaces {
	s.NameSpaceShortId = &v
	return s
}

func (s *DescribeNamespacesResponseBodyDataNamespaces) SetNamespaceDescription(v string) *DescribeNamespacesResponseBodyDataNamespaces {
	s.NamespaceDescription = &v
	return s
}

func (s *DescribeNamespacesResponseBodyDataNamespaces) SetNamespaceId(v string) *DescribeNamespacesResponseBodyDataNamespaces {
	s.NamespaceId = &v
	return s
}

func (s *DescribeNamespacesResponseBodyDataNamespaces) SetNamespaceName(v string) *DescribeNamespacesResponseBodyDataNamespaces {
	s.NamespaceName = &v
	return s
}

func (s *DescribeNamespacesResponseBodyDataNamespaces) SetRegionId(v string) *DescribeNamespacesResponseBodyDataNamespaces {
	s.RegionId = &v
	return s
}

func (s *DescribeNamespacesResponseBodyDataNamespaces) SetSecretKey(v string) *DescribeNamespacesResponseBodyDataNamespaces {
	s.SecretKey = &v
	return s
}

func (s *DescribeNamespacesResponseBodyDataNamespaces) SetTenantId(v string) *DescribeNamespacesResponseBodyDataNamespaces {
	s.TenantId = &v
	return s
}

type DescribeNamespacesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNamespacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNamespacesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNamespacesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNamespacesResponse) SetHeaders(v map[string]*string) *DescribeNamespacesResponse {
	s.Headers = v
	return s
}

func (s *DescribeNamespacesResponse) SetStatusCode(v int32) *DescribeNamespacesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNamespacesResponse) SetBody(v *DescribeNamespacesResponseBody) *DescribeNamespacesResponse {
	s.Body = v
	return s
}

type DescribePipelineRequest struct {
	// The ID of the batch. You can call the [DescribeChangeOrder](https://help.aliyun.com/document_detail/126617.html) operation to obtain the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 917660ba-5092-44ca-b8e0-80012c96****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s DescribePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePipelineRequest) GoString() string {
	return s.String()
}

func (s *DescribePipelineRequest) SetPipelineId(v string) *DescribePipelineRequest {
	s.PipelineId = &v
	return s
}

type DescribePipelineResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The batch information.
	Data *DescribePipelineResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The message returned for the operation.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 559B4247-C41C-4D9E-B866-B55D360B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the batch information was obtained. Valid values:
	//
	// 	- **true**: The information was queried.
	//
	// 	- **false**: The image failed to be found.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0be3e0c316390414649128666e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePipelineResponseBody) SetCode(v string) *DescribePipelineResponseBody {
	s.Code = &v
	return s
}

func (s *DescribePipelineResponseBody) SetData(v *DescribePipelineResponseBodyData) *DescribePipelineResponseBody {
	s.Data = v
	return s
}

func (s *DescribePipelineResponseBody) SetErrorCode(v string) *DescribePipelineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribePipelineResponseBody) SetMessage(v string) *DescribePipelineResponseBody {
	s.Message = &v
	return s
}

func (s *DescribePipelineResponseBody) SetRequestId(v string) *DescribePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePipelineResponseBody) SetSuccess(v bool) *DescribePipelineResponseBody {
	s.Success = &v
	return s
}

func (s *DescribePipelineResponseBody) SetTraceId(v string) *DescribePipelineResponseBody {
	s.TraceId = &v
	return s
}

type DescribePipelineResponseBodyData struct {
	// The status of the change order for the batch.
	//
	// example:
	//
	// Successful
	CoStatus *string `json:"CoStatus,omitempty" xml:"CoStatus,omitempty"`
	// The ID of the batch processing stage.
	//
	// example:
	//
	// c3a55592-4c30-4d84-ac2d-e98c18ec****
	CurrentStageId *string `json:"CurrentStageId,omitempty" xml:"CurrentStageId,omitempty"`
	// The ID of the next batch.
	//
	// example:
	//
	// b77b1c98-5772-4f05-95fc-c7bee5fa****
	NextPipelineId *string `json:"NextPipelineId,omitempty" xml:"NextPipelineId,omitempty"`
	// The ID of the batch.
	//
	// example:
	//
	// 917660ba-5092-44ca-b8e0-80012c96****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// The name of the batch.
	//
	// example:
	//
	// First batch
	PipelineName *string `json:"PipelineName,omitempty" xml:"PipelineName,omitempty"`
	// The batch status. Valid values:
	//
	// 	- **0**: The batch is prepared for processing.
	//
	// 	- **1**: The task is being executed.
	//
	// 	- **2**: successful
	//
	// 	- **3**: The processing failed in this stage.
	//
	// 	- **6**: The batch processing was terminated.
	//
	// 	- **10**: The batch could not be processed due to a system exception.
	//
	// example:
	//
	// 2
	PipelineStatus *int32 `json:"PipelineStatus,omitempty" xml:"PipelineStatus,omitempty"`
	// Indicates whether to start processing the next batch. Valid values:
	//
	// 	- **false**: indicates that the next batch cannot be processed yet.
	//
	// 	- **true**: indicates that the next batch can be processed now.
	//
	// example:
	//
	// false
	ShowBatch *bool `json:"ShowBatch,omitempty" xml:"ShowBatch,omitempty"`
	// The list of batch processing stages.
	StageList []*DescribePipelineResponseBodyDataStageList `json:"StageList,omitempty" xml:"StageList,omitempty" type:"Repeated"`
}

func (s DescribePipelineResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribePipelineResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribePipelineResponseBodyData) SetCoStatus(v string) *DescribePipelineResponseBodyData {
	s.CoStatus = &v
	return s
}

func (s *DescribePipelineResponseBodyData) SetCurrentStageId(v string) *DescribePipelineResponseBodyData {
	s.CurrentStageId = &v
	return s
}

func (s *DescribePipelineResponseBodyData) SetNextPipelineId(v string) *DescribePipelineResponseBodyData {
	s.NextPipelineId = &v
	return s
}

func (s *DescribePipelineResponseBodyData) SetPipelineId(v string) *DescribePipelineResponseBodyData {
	s.PipelineId = &v
	return s
}

func (s *DescribePipelineResponseBodyData) SetPipelineName(v string) *DescribePipelineResponseBodyData {
	s.PipelineName = &v
	return s
}

func (s *DescribePipelineResponseBodyData) SetPipelineStatus(v int32) *DescribePipelineResponseBodyData {
	s.PipelineStatus = &v
	return s
}

func (s *DescribePipelineResponseBodyData) SetShowBatch(v bool) *DescribePipelineResponseBodyData {
	s.ShowBatch = &v
	return s
}

func (s *DescribePipelineResponseBodyData) SetStageList(v []*DescribePipelineResponseBodyDataStageList) *DescribePipelineResponseBodyData {
	s.StageList = v
	return s
}

type DescribePipelineResponseBodyDataStageList struct {
	// The execution type of the stage. Valid values:
	//
	// 	- **0**: in sequence.
	//
	// 	- **1**: in parallel.
	//
	// example:
	//
	// 0
	ExecutorType *int32 `json:"ExecutorType,omitempty" xml:"ExecutorType,omitempty"`
	// The ID of the stage.
	//
	// example:
	//
	// c3a55592-4c30-4d84-ac2d-e98c18ec****
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The name of the stage.
	//
	// example:
	//
	// Deploy an application
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The status of the batch processing stage. Valid values:
	//
	// 	- **0**: The batch is prepared for this processing stage.
	//
	// 	- **1**: The task is being executed.
	//
	// 	- **2**: successful
	//
	// 	- **3**: The processing failed in this stage.
	//
	// 	- **6**: The processing stage was terminated.
	//
	// example:
	//
	// 2
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The list of task statuses.
	TaskList []*DescribePipelineResponseBodyDataStageListTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Repeated"`
}

func (s DescribePipelineResponseBodyDataStageList) String() string {
	return tea.Prettify(s)
}

func (s DescribePipelineResponseBodyDataStageList) GoString() string {
	return s.String()
}

func (s *DescribePipelineResponseBodyDataStageList) SetExecutorType(v int32) *DescribePipelineResponseBodyDataStageList {
	s.ExecutorType = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageList) SetStageId(v string) *DescribePipelineResponseBodyDataStageList {
	s.StageId = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageList) SetStageName(v string) *DescribePipelineResponseBodyDataStageList {
	s.StageName = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageList) SetStatus(v int32) *DescribePipelineResponseBodyDataStageList {
	s.Status = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageList) SetTaskList(v []*DescribePipelineResponseBodyDataStageListTaskList) *DescribePipelineResponseBodyDataStageList {
	s.TaskList = v
	return s
}

type DescribePipelineResponseBodyDataStageListTaskList struct {
	// The error code returned when the task could not be executed. If the task is successfully executed, this parameter is not returned.
	//
	// example:
	//
	// EDAS-10022
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// Indicates whether to execute the subsequent tasks when the task failed. Valid values:
	//
	// 	- **0**: The subsequent tasks cannot be executed.
	//
	// 	- **1**: The subsequent tasks can be executed.
	//
	// example:
	//
	// 0
	ErrorIgnore *int32 `json:"ErrorIgnore,omitempty" xml:"ErrorIgnore,omitempty"`
	// The error message returned when the task could not be executed. If the task is successfully executed, this parameter is not returned.
	//
	// example:
	//
	// EDAS-10022 \\<a target=\\"_blank\\" href=\\"https://help.aliyun.com/knowledge_detail/106573.html#EDAS-10022\\">READINESS check failed during the application startup.\\</a>
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The returned message indicating the task execution result.
	//
	// example:
	//
	// init Namespace success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Indicates whether a running task can be manually skipped. Valid values:
	//
	// 	- **true**: The running task can be skipped.
	//
	// 	- **false**: The zone does not allow you to change the network type of an ApsaraDB for Redis instance from classic network to VPC.
	//
	// example:
	//
	// false
	ShowManualIgnore *bool `json:"ShowManualIgnore,omitempty" xml:"ShowManualIgnore,omitempty"`
	// The ID of the stage.
	//
	// example:
	//
	// c3a55592-4c30-4d84-ac2d-e98c18ec****
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The task status. Valid values:
	//
	// 	- **0**: The task is prepared for execution.
	//
	// 	- **1**: The task is being executed.
	//
	// 	- **2**: successful
	//
	// 	- **3**: The task could not be executed.
	//
	// 	- **5**: The task is pending retry.
	//
	// 	- **6**: The task was terminated.
	//
	// example:
	//
	// 2
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the task.
	//
	// example:
	//
	// bef0122f-de9a-4ab0-8223-b88bf8ad****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// Environment initialization
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s DescribePipelineResponseBodyDataStageListTaskList) String() string {
	return tea.Prettify(s)
}

func (s DescribePipelineResponseBodyDataStageListTaskList) GoString() string {
	return s.String()
}

func (s *DescribePipelineResponseBodyDataStageListTaskList) SetErrorCode(v string) *DescribePipelineResponseBodyDataStageListTaskList {
	s.ErrorCode = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageListTaskList) SetErrorIgnore(v int32) *DescribePipelineResponseBodyDataStageListTaskList {
	s.ErrorIgnore = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageListTaskList) SetErrorMessage(v string) *DescribePipelineResponseBodyDataStageListTaskList {
	s.ErrorMessage = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageListTaskList) SetMessage(v string) *DescribePipelineResponseBodyDataStageListTaskList {
	s.Message = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageListTaskList) SetShowManualIgnore(v bool) *DescribePipelineResponseBodyDataStageListTaskList {
	s.ShowManualIgnore = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageListTaskList) SetStageId(v string) *DescribePipelineResponseBodyDataStageListTaskList {
	s.StageId = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageListTaskList) SetStatus(v int32) *DescribePipelineResponseBodyDataStageListTaskList {
	s.Status = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageListTaskList) SetTaskId(v string) *DescribePipelineResponseBodyDataStageListTaskList {
	s.TaskId = &v
	return s
}

func (s *DescribePipelineResponseBodyDataStageListTaskList) SetTaskName(v string) *DescribePipelineResponseBodyDataStageListTaskList {
	s.TaskName = &v
	return s
}

type DescribePipelineResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePipelineResponse) GoString() string {
	return s.String()
}

func (s *DescribePipelineResponse) SetHeaders(v map[string]*string) *DescribePipelineResponse {
	s.Headers = v
	return s
}

func (s *DescribePipelineResponse) SetStatusCode(v int32) *DescribePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePipelineResponse) SetBody(v *DescribePipelineResponseBody) *DescribePipelineResponse {
	s.Body = v
	return s
}

type DescribeRegionsResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// - **2xx**: The call was successful.
	//
	// - **3xx**: The call was redirected.
	//
	// - **4xx**: The call failed.
	//
	// - **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// No request parameters are required.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	Regions *DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Struct"`
	// The returned information.
	//
	// example:
	//
	// DDE85827-B0B3-4E56-86E8-17C42009****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetCode(v int32) *DescribeRegionsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRegionsResponseBody) SetMessage(v string) *DescribeRegionsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRegionsResponseBody) SetRegions(v *DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionsResponseBodyRegions struct {
	Region []*DescribeRegionsResponseBodyRegionsRegion `json:"Region,omitempty" xml:"Region,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) SetRegion(v []*DescribeRegionsResponseBodyRegionsRegion) *DescribeRegionsResponseBodyRegions {
	s.Region = v
	return s
}

type DescribeRegionsResponseBodyRegionsRegion struct {
	// The list of regions.
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	// The ID of the region. Valid values:
	//
	// 	- **cn-hangzhou**: the ID of the China (Hangzhou) region
	//
	// 	- **cn-shanghai**: the ID of the China (Shanghai) region
	//
	// 	- **cn-beijing**: the ID of the China (Beijing) region
	//
	// 	- **cn-zhangjiakou**: the ID of the China (Zhangjiakou) region
	//
	// 	- **cn-shenzhen**: the ID of the China (Shenzhen) region
	//
	// 	- **cn-guangzhou**: the ID of the China (Guangzhou) region
	//
	// 	- **cn-hongkong**: the ID of the China (Hong Kong) region
	//
	// 	- **ap-southeast-1**: the ID of the Singapore region
	//
	// 	- **us-west-1**: the ID of the US (Silicon Valley) region
	RecommendZones *DescribeRegionsResponseBodyRegionsRegionRecommendZones `json:"RecommendZones,omitempty" xml:"RecommendZones,omitempty" type:"Struct"`
	// The name of the region. Valid values:
	//
	// 	- **China (Hangzhou)**
	//
	// 	- **China (Shanghai)**
	//
	// 	- **China (Beijing)**
	//
	// 	- **China (Zhangjiakou)**
	//
	// 	- **China (Shenzhen)**
	//
	// 	- **China (Guangzhou)**
	//
	// 	- **China (Hong Kong)**
	//
	// 	- **Singapore (Singapore)**
	//
	// 	- **US (Silicon Valley)**
	//
	// example:
	//
	// sae.cn-shanghai.aliyuncs.com
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty"`
	// The endpoint of the region. Valid values:
	//
	// 	- **sae.cn-hangzhou.aliyuncs.com**
	//
	// 	- **sae.cn-shanghai.aliyuncs.com**
	//
	// 	- **sae.cn-beijing.aliyuncs.com**
	//
	// 	- **sae.cn-zhangjiakou.aliyuncs.com**
	//
	// 	- **sae.cn-shenzhen.aliyuncs.com**
	//
	// 	- **sae.cn-guangzhou.aliyuncs.com**
	//
	// 	- **sae.cn-hongkong.aliyuncs.com**
	//
	// 	- **sae.ap-southeast-1.aliyuncs.com**
	//
	// 	- **sae.us-west-1.aliyuncs.com**
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegionsRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetLocalName(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRecommendZones(v *DescribeRegionsResponseBodyRegionsRegionRecommendZones) *DescribeRegionsResponseBodyRegionsRegion {
	s.RecommendZones = v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionEndpoint(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionEndpoint = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionId(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponseBodyRegionsRegionRecommendZones struct {
	RecommendZone []*string `json:"RecommendZone,omitempty" xml:"RecommendZone,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegionsRegionRecommendZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegionRecommendZones) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegionRecommendZones) SetRecommendZone(v []*string) *DescribeRegionsResponseBodyRegionsRegionRecommendZones {
	s.RecommendZone = v
	return s
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeSecretRequest struct {
	// The ID of the namespace in which the Secret instance resides. By default, the namespace ID is the same as the region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The ID of the Secret instance to be queried. You can call the [ListSecrets](https://help.aliyun.com/document_detail/466929.html) operation to view the IDs of Secrete instances.
	//
	// This parameter is required.
	//
	// example:
	//
	// 16
	SecretId *int64 `json:"SecretId,omitempty" xml:"SecretId,omitempty"`
}

func (s DescribeSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecretRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecretRequest) SetNamespaceId(v string) *DescribeSecretRequest {
	s.NamespaceId = &v
	return s
}

func (s *DescribeSecretRequest) SetSecretId(v int64) *DescribeSecretRequest {
	s.SecretId = &v
	return s
}

type DescribeSecretResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response.
	Data *DescribeSecretResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Valid values:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the details of the Secret instance are successfully queried. Valid values:
	//
	// 	- **true**: The information was queried.
	//
	// 	- **false**: The image failed to be found.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecretResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecretResponseBody) SetCode(v string) *DescribeSecretResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSecretResponseBody) SetData(v *DescribeSecretResponseBodyData) *DescribeSecretResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSecretResponseBody) SetErrorCode(v string) *DescribeSecretResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSecretResponseBody) SetMessage(v string) *DescribeSecretResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSecretResponseBody) SetRequestId(v string) *DescribeSecretResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecretResponseBody) SetSuccess(v bool) *DescribeSecretResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSecretResponseBody) SetTraceId(v string) *DescribeSecretResponseBody {
	s.TraceId = &v
	return s
}

type DescribeSecretResponseBodyData struct {
	// The time when the task was created.
	//
	// example:
	//
	// 1593746835111
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The associated application.
	RelateApps []*DescribeSecretResponseBodyDataRelateApps `json:"RelateApps,omitempty" xml:"RelateApps,omitempty" type:"Repeated"`
	// Secret key-value pair data.
	SecretData map[string]*string `json:"SecretData,omitempty" xml:"SecretData,omitempty"`
	// The ID of the Secret instance.
	//
	// example:
	//
	// 16
	SecretId *int64 `json:"SecretId,omitempty" xml:"SecretId,omitempty"`
	// The name of the Secret instance.
	//
	// example:
	//
	// registry-auth
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// The type of the Secret instance.
	//
	// example:
	//
	// kubernetes.io/dockerconfigjson
	SecretType *string `json:"SecretType,omitempty" xml:"SecretType,omitempty"`
	// The time when the task was updated.
	//
	// example:
	//
	// 1593746835111
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeSecretResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecretResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSecretResponseBodyData) SetCreateTime(v int64) *DescribeSecretResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeSecretResponseBodyData) SetNamespaceId(v string) *DescribeSecretResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DescribeSecretResponseBodyData) SetRelateApps(v []*DescribeSecretResponseBodyDataRelateApps) *DescribeSecretResponseBodyData {
	s.RelateApps = v
	return s
}

func (s *DescribeSecretResponseBodyData) SetSecretData(v map[string]*string) *DescribeSecretResponseBodyData {
	s.SecretData = v
	return s
}

func (s *DescribeSecretResponseBodyData) SetSecretId(v int64) *DescribeSecretResponseBodyData {
	s.SecretId = &v
	return s
}

func (s *DescribeSecretResponseBodyData) SetSecretName(v string) *DescribeSecretResponseBodyData {
	s.SecretName = &v
	return s
}

func (s *DescribeSecretResponseBodyData) SetSecretType(v string) *DescribeSecretResponseBodyData {
	s.SecretType = &v
	return s
}

func (s *DescribeSecretResponseBodyData) SetUpdateTime(v int64) *DescribeSecretResponseBodyData {
	s.UpdateTime = &v
	return s
}

type DescribeSecretResponseBodyDataRelateApps struct {
	// The application ID.
	//
	// example:
	//
	// f16b4000-9058-4c22-a49d-49a28f0b****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s DescribeSecretResponseBodyDataRelateApps) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecretResponseBodyDataRelateApps) GoString() string {
	return s.String()
}

func (s *DescribeSecretResponseBodyDataRelateApps) SetAppId(v string) *DescribeSecretResponseBodyDataRelateApps {
	s.AppId = &v
	return s
}

func (s *DescribeSecretResponseBodyDataRelateApps) SetAppName(v string) *DescribeSecretResponseBodyDataRelateApps {
	s.AppName = &v
	return s
}

type DescribeSecretResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSecretResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecretResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecretResponse) SetHeaders(v map[string]*string) *DescribeSecretResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecretResponse) SetStatusCode(v int32) *DescribeSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecretResponse) SetBody(v *DescribeSecretResponseBody) *DescribeSecretResponse {
	s.Body = v
	return s
}

type DescribeWebApplicationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DescribeWebApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationRequest) SetNamespaceId(v string) *DescribeWebApplicationRequest {
	s.NamespaceId = &v
	return s
}

type DescribeWebApplicationResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWebApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationResponse) SetHeaders(v map[string]*string) *DescribeWebApplicationResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebApplicationResponse) SetStatusCode(v int32) *DescribeWebApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebApplicationResponse) SetBody(v *WebApplicationBody) *DescribeWebApplicationResponse {
	s.Body = v
	return s
}

type DescribeWebApplicationResourceStaticsRequest struct {
	// example:
	//
	// 1687832980387
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1562831689704
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeWebApplicationResourceStaticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationResourceStaticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationResourceStaticsRequest) SetEndTime(v int64) *DescribeWebApplicationResourceStaticsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeWebApplicationResourceStaticsRequest) SetNamespaceId(v string) *DescribeWebApplicationResourceStaticsRequest {
	s.NamespaceId = &v
	return s
}

func (s *DescribeWebApplicationResourceStaticsRequest) SetRegionId(v string) *DescribeWebApplicationResourceStaticsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeWebApplicationResourceStaticsRequest) SetStartTime(v int64) *DescribeWebApplicationResourceStaticsRequest {
	s.StartTime = &v
	return s
}

type DescribeWebApplicationResourceStaticsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationResourceStaticsBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWebApplicationResourceStaticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationResourceStaticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationResourceStaticsResponse) SetHeaders(v map[string]*string) *DescribeWebApplicationResourceStaticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebApplicationResourceStaticsResponse) SetStatusCode(v int32) *DescribeWebApplicationResourceStaticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebApplicationResourceStaticsResponse) SetBody(v *WebApplicationResourceStaticsBody) *DescribeWebApplicationResourceStaticsResponse {
	s.Body = v
	return s
}

type DescribeWebApplicationRevisionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DescribeWebApplicationRevisionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationRevisionRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationRevisionRequest) SetNamespaceId(v string) *DescribeWebApplicationRevisionRequest {
	s.NamespaceId = &v
	return s
}

type DescribeWebApplicationRevisionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationRevisionBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWebApplicationRevisionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationRevisionResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationRevisionResponse) SetHeaders(v map[string]*string) *DescribeWebApplicationRevisionResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebApplicationRevisionResponse) SetStatusCode(v int32) *DescribeWebApplicationRevisionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebApplicationRevisionResponse) SetBody(v *WebApplicationRevisionBody) *DescribeWebApplicationRevisionResponse {
	s.Body = v
	return s
}

type DescribeWebApplicationScalingConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:sae-test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DescribeWebApplicationScalingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationScalingConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationScalingConfigRequest) SetNamespaceId(v string) *DescribeWebApplicationScalingConfigRequest {
	s.NamespaceId = &v
	return s
}

type DescribeWebApplicationScalingConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationScalingConfigBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWebApplicationScalingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationScalingConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationScalingConfigResponse) SetHeaders(v map[string]*string) *DescribeWebApplicationScalingConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebApplicationScalingConfigResponse) SetStatusCode(v int32) *DescribeWebApplicationScalingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebApplicationScalingConfigResponse) SetBody(v *WebApplicationScalingConfigBody) *DescribeWebApplicationScalingConfigResponse {
	s.Body = v
	return s
}

type DescribeWebApplicationTrafficConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DescribeWebApplicationTrafficConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationTrafficConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationTrafficConfigRequest) SetNamespaceId(v string) *DescribeWebApplicationTrafficConfigRequest {
	s.NamespaceId = &v
	return s
}

type DescribeWebApplicationTrafficConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationTrafficConfigBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWebApplicationTrafficConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebApplicationTrafficConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebApplicationTrafficConfigResponse) SetHeaders(v map[string]*string) *DescribeWebApplicationTrafficConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebApplicationTrafficConfigResponse) SetStatusCode(v int32) *DescribeWebApplicationTrafficConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebApplicationTrafficConfigResponse) SetBody(v *WebApplicationTrafficConfigBody) *DescribeWebApplicationTrafficConfigResponse {
	s.Body = v
	return s
}

type DescribeWebCustomDomainRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DescribeWebCustomDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebCustomDomainRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebCustomDomainRequest) SetNamespaceId(v string) *DescribeWebCustomDomainRequest {
	s.NamespaceId = &v
	return s
}

type DescribeWebCustomDomainResponse struct {
	Headers    map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebCustomDomain   `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWebCustomDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebCustomDomainResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebCustomDomainResponse) SetHeaders(v map[string]*string) *DescribeWebCustomDomainResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebCustomDomainResponse) SetStatusCode(v int32) *DescribeWebCustomDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebCustomDomainResponse) SetBody(v *WebCustomDomain) *DescribeWebCustomDomainResponse {
	s.Body = v
	return s
}

type DescribeWebInstanceLogsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s DescribeWebInstanceLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebInstanceLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebInstanceLogsRequest) SetNamespaceId(v string) *DescribeWebInstanceLogsRequest {
	s.NamespaceId = &v
	return s
}

type DescribeWebInstanceLogsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationInstanceLogsBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWebInstanceLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebInstanceLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebInstanceLogsResponse) SetHeaders(v map[string]*string) *DescribeWebInstanceLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebInstanceLogsResponse) SetStatusCode(v int32) *DescribeWebInstanceLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebInstanceLogsResponse) SetBody(v *WebApplicationInstanceLogsBody) *DescribeWebInstanceLogsResponse {
	s.Body = v
	return s
}

type DisableApplicationScalingRuleRequest struct {
	// timer-0800-2100
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// timer-0800-2100
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s DisableApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleRequest) SetAppId(v string) *DisableApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *DisableApplicationScalingRuleRequest) SetScalingRuleName(v string) *DisableApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

type DisableApplicationScalingRuleResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DisableApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBody) SetCode(v string) *DisableApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetErrorCode(v string) *DisableApplicationScalingRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetMessage(v string) *DisableApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetRequestId(v string) *DisableApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetSuccess(v bool) *DisableApplicationScalingRuleResponseBody {
	s.Success = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetTraceId(v string) *DisableApplicationScalingRuleResponseBody {
	s.TraceId = &v
	return s
}

type DisableApplicationScalingRuleResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *DisableApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DisableApplicationScalingRuleResponse) SetStatusCode(v int32) *DisableApplicationScalingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableApplicationScalingRuleResponse) SetBody(v *DisableApplicationScalingRuleResponseBody) *DisableApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type EnableApplicationScalingRuleRequest struct {
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the auto scaling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// timer-0800-2100
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s EnableApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleRequest) SetAppId(v string) *EnableApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *EnableApplicationScalingRuleRequest) SetScalingRuleName(v string) *EnableApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

type EnableApplicationScalingRuleResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Take note of the following rules:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Specifies whether the instances are successfully restarted. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**: The restart failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s EnableApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBody) SetCode(v string) *EnableApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetErrorCode(v string) *EnableApplicationScalingRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetMessage(v string) *EnableApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetRequestId(v string) *EnableApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetSuccess(v bool) *EnableApplicationScalingRuleResponseBody {
	s.Success = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetTraceId(v string) *EnableApplicationScalingRuleResponseBody {
	s.TraceId = &v
	return s
}

type EnableApplicationScalingRuleResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *EnableApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *EnableApplicationScalingRuleResponse) SetStatusCode(v int32) *EnableApplicationScalingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableApplicationScalingRuleResponse) SetBody(v *EnableApplicationScalingRuleResponseBody) *EnableApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type ExecJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ee1a7a07-abcb-4652-a1d3-2d57f415****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// echo
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// example:
	//
	// ["a","b"]
	CommandArgs *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	// example:
	//
	// [{"name":"envtmp","value":"0"}]
	Envs *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	// example:
	//
	// custom
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// example:
	//
	// custom-args
	JarStartArgs *string `json:"JarStartArgs,omitempty" xml:"JarStartArgs,omitempty"`
	// example:
	//
	// -Xms4G -Xmx4G
	JarStartOptions *string `json:"JarStartOptions,omitempty" xml:"JarStartOptions,omitempty"`
	Replicas        *string `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	Time            *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// example:
	//
	// CATALINA_OPTS=\\"$CATALINA_OPTS $Options\\" catalina.sh run
	WarStartOptions *string `json:"WarStartOptions,omitempty" xml:"WarStartOptions,omitempty"`
}

func (s ExecJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecJobRequest) GoString() string {
	return s.String()
}

func (s *ExecJobRequest) SetAppId(v string) *ExecJobRequest {
	s.AppId = &v
	return s
}

func (s *ExecJobRequest) SetCommand(v string) *ExecJobRequest {
	s.Command = &v
	return s
}

func (s *ExecJobRequest) SetCommandArgs(v string) *ExecJobRequest {
	s.CommandArgs = &v
	return s
}

func (s *ExecJobRequest) SetEnvs(v string) *ExecJobRequest {
	s.Envs = &v
	return s
}

func (s *ExecJobRequest) SetEventId(v string) *ExecJobRequest {
	s.EventId = &v
	return s
}

func (s *ExecJobRequest) SetJarStartArgs(v string) *ExecJobRequest {
	s.JarStartArgs = &v
	return s
}

func (s *ExecJobRequest) SetJarStartOptions(v string) *ExecJobRequest {
	s.JarStartOptions = &v
	return s
}

func (s *ExecJobRequest) SetReplicas(v string) *ExecJobRequest {
	s.Replicas = &v
	return s
}

func (s *ExecJobRequest) SetTime(v string) *ExecJobRequest {
	s.Time = &v
	return s
}

func (s *ExecJobRequest) SetWarStartOptions(v string) *ExecJobRequest {
	s.WarStartOptions = &v
	return s
}

type ExecJobResponseBody struct {
	// example:
	//
	// 200
	Code      *string                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ExecJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 67DD9A98-9CCC-5BE8-8C9E-B45E72F4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 0b87b7e716575071334387401e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ExecJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecJobResponseBody) GoString() string {
	return s.String()
}

func (s *ExecJobResponseBody) SetCode(v string) *ExecJobResponseBody {
	s.Code = &v
	return s
}

func (s *ExecJobResponseBody) SetData(v *ExecJobResponseBodyData) *ExecJobResponseBody {
	s.Data = v
	return s
}

func (s *ExecJobResponseBody) SetErrorCode(v string) *ExecJobResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ExecJobResponseBody) SetMessage(v string) *ExecJobResponseBody {
	s.Message = &v
	return s
}

func (s *ExecJobResponseBody) SetRequestId(v string) *ExecJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExecJobResponseBody) SetSuccess(v bool) *ExecJobResponseBody {
	s.Success = &v
	return s
}

func (s *ExecJobResponseBody) SetTraceId(v string) *ExecJobResponseBody {
	s.TraceId = &v
	return s
}

type ExecJobResponseBodyData struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// manual-3db7a8fa-5d40-4edc-92e4-49d50eab****
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// success
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExecJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ExecJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *ExecJobResponseBodyData) SetCode(v string) *ExecJobResponseBodyData {
	s.Code = &v
	return s
}

func (s *ExecJobResponseBodyData) SetData(v string) *ExecJobResponseBodyData {
	s.Data = &v
	return s
}

func (s *ExecJobResponseBodyData) SetMsg(v string) *ExecJobResponseBodyData {
	s.Msg = &v
	return s
}

func (s *ExecJobResponseBodyData) SetSuccess(v string) *ExecJobResponseBodyData {
	s.Success = &v
	return s
}

type ExecJobResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExecJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExecJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecJobResponse) GoString() string {
	return s.String()
}

func (s *ExecJobResponse) SetHeaders(v map[string]*string) *ExecJobResponse {
	s.Headers = v
	return s
}

func (s *ExecJobResponse) SetStatusCode(v int32) *ExecJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecJobResponse) SetBody(v *ExecJobResponseBody) *ExecJobResponse {
	s.Body = v
	return s
}

type GetArmsTopNMetricRequest struct {
	// The SAE application type. Valid values:
	//
	// 	- **micro_service**
	//
	// 	- **web**
	//
	// 	- **job**
	//
	// example:
	//
	// micro_service
	AppSource *string `json:"AppSource,omitempty" xml:"AppSource,omitempty"`
	// The CPU allocation policy. Valid values:
	//
	// 	- **request**: CPU cores are allocated only when a request is initiated.
	//
	// 	- **always**: Fixed CPU cores are always allocated.
	//
	// example:
	//
	// always
	CpuStrategy *string `json:"CpuStrategy,omitempty" xml:"CpuStrategy,omitempty"`
	// The end of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1675824035951
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The number of entries to return. Valid values: 0 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	Limit *int64 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// The field based on which you want to sort the returned entries.
	//
	// This parameter is required.
	//
	// example:
	//
	// count
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1675823135951
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetArmsTopNMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s GetArmsTopNMetricRequest) GoString() string {
	return s.String()
}

func (s *GetArmsTopNMetricRequest) SetAppSource(v string) *GetArmsTopNMetricRequest {
	s.AppSource = &v
	return s
}

func (s *GetArmsTopNMetricRequest) SetCpuStrategy(v string) *GetArmsTopNMetricRequest {
	s.CpuStrategy = &v
	return s
}

func (s *GetArmsTopNMetricRequest) SetEndTime(v int64) *GetArmsTopNMetricRequest {
	s.EndTime = &v
	return s
}

func (s *GetArmsTopNMetricRequest) SetLimit(v int64) *GetArmsTopNMetricRequest {
	s.Limit = &v
	return s
}

func (s *GetArmsTopNMetricRequest) SetOrderBy(v string) *GetArmsTopNMetricRequest {
	s.OrderBy = &v
	return s
}

func (s *GetArmsTopNMetricRequest) SetRegionId(v string) *GetArmsTopNMetricRequest {
	s.RegionId = &v
	return s
}

func (s *GetArmsTopNMetricRequest) SetStartTime(v int64) *GetArmsTopNMetricRequest {
	s.StartTime = &v
	return s
}

type GetArmsTopNMetricResponseBody struct {
	// The HTTP status code. The following limits are imposed on the ID:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of applications.
	Data []*GetArmsTopNMetricResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The additional information that is returned. The following limits are imposed on the ID:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3B763F98-0BA2-5C23-B6B8-558568D2C1C2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the list of applications was obtained. The following limits are imposed on the ID:
	//
	// 	- **true**: The namespaces were obtained.
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetArmsTopNMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetArmsTopNMetricResponseBody) GoString() string {
	return s.String()
}

func (s *GetArmsTopNMetricResponseBody) SetCode(v string) *GetArmsTopNMetricResponseBody {
	s.Code = &v
	return s
}

func (s *GetArmsTopNMetricResponseBody) SetData(v []*GetArmsTopNMetricResponseBodyData) *GetArmsTopNMetricResponseBody {
	s.Data = v
	return s
}

func (s *GetArmsTopNMetricResponseBody) SetMessage(v string) *GetArmsTopNMetricResponseBody {
	s.Message = &v
	return s
}

func (s *GetArmsTopNMetricResponseBody) SetRequestId(v string) *GetArmsTopNMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetArmsTopNMetricResponseBody) SetSuccess(v bool) *GetArmsTopNMetricResponseBody {
	s.Success = &v
	return s
}

type GetArmsTopNMetricResponseBodyData struct {
	// The application ID.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The total number of requests.
	//
	// example:
	//
	// 100
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The number of errors.
	//
	// example:
	//
	// 0
	Error *int64 `json:"Error,omitempty" xml:"Error,omitempty"`
	// The application name.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The average response time. Unit: milliseconds.
	//
	// example:
	//
	// 100
	Rt *int64 `json:"Rt,omitempty" xml:"Rt,omitempty"`
}

func (s GetArmsTopNMetricResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetArmsTopNMetricResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetArmsTopNMetricResponseBodyData) SetAppId(v string) *GetArmsTopNMetricResponseBodyData {
	s.AppId = &v
	return s
}

func (s *GetArmsTopNMetricResponseBodyData) SetCount(v int64) *GetArmsTopNMetricResponseBodyData {
	s.Count = &v
	return s
}

func (s *GetArmsTopNMetricResponseBodyData) SetError(v int64) *GetArmsTopNMetricResponseBodyData {
	s.Error = &v
	return s
}

func (s *GetArmsTopNMetricResponseBodyData) SetName(v string) *GetArmsTopNMetricResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetArmsTopNMetricResponseBodyData) SetRegionId(v string) *GetArmsTopNMetricResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetArmsTopNMetricResponseBodyData) SetRt(v int64) *GetArmsTopNMetricResponseBodyData {
	s.Rt = &v
	return s
}

type GetArmsTopNMetricResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetArmsTopNMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetArmsTopNMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s GetArmsTopNMetricResponse) GoString() string {
	return s.String()
}

func (s *GetArmsTopNMetricResponse) SetHeaders(v map[string]*string) *GetArmsTopNMetricResponse {
	s.Headers = v
	return s
}

func (s *GetArmsTopNMetricResponse) SetStatusCode(v int32) *GetArmsTopNMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *GetArmsTopNMetricResponse) SetBody(v *GetArmsTopNMetricResponseBody) *GetArmsTopNMetricResponse {
	s.Body = v
	return s
}

type GetAvailabilityMetricRequest struct {
	// The SAE application type. Valid values:
	//
	// 	- **micro_service**
	//
	// 	- **web**
	//
	// 	- **job**
	//
	// example:
	//
	// micro_service
	AppSource *string `json:"AppSource,omitempty" xml:"AppSource,omitempty"`
	// The CPU allocation policy. Valid values:
	//
	// 	- **request**: CPU cores are allocated only when a request is initiated.
	//
	// 	- **always**: Fixed CPU cores are always allocated.
	//
	// example:
	//
	// always
	CpuStrategy *string `json:"CpuStrategy,omitempty" xml:"CpuStrategy,omitempty"`
	// The number of entries to return. Valid values: 0 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	Limit *int64 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetAvailabilityMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAvailabilityMetricRequest) GoString() string {
	return s.String()
}

func (s *GetAvailabilityMetricRequest) SetAppSource(v string) *GetAvailabilityMetricRequest {
	s.AppSource = &v
	return s
}

func (s *GetAvailabilityMetricRequest) SetCpuStrategy(v string) *GetAvailabilityMetricRequest {
	s.CpuStrategy = &v
	return s
}

func (s *GetAvailabilityMetricRequest) SetLimit(v int64) *GetAvailabilityMetricRequest {
	s.Limit = &v
	return s
}

func (s *GetAvailabilityMetricRequest) SetRegionId(v string) *GetAvailabilityMetricRequest {
	s.RegionId = &v
	return s
}

type GetAvailabilityMetricResponseBody struct {
	// The HTTP status code. The following limits are imposed on the ID:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data entries returned.
	Data []*GetAvailabilityMetricResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The additional information that is returned. The following limits are imposed on the ID:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3A92C4EA-4C53-5A1C-8AEB-F2DB11982D5F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the list of applications was obtained. The following limits are imposed on the ID:
	//
	// 	- **true**: The namespaces were obtained.
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAvailabilityMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAvailabilityMetricResponseBody) GoString() string {
	return s.String()
}

func (s *GetAvailabilityMetricResponseBody) SetCode(v string) *GetAvailabilityMetricResponseBody {
	s.Code = &v
	return s
}

func (s *GetAvailabilityMetricResponseBody) SetData(v []*GetAvailabilityMetricResponseBodyData) *GetAvailabilityMetricResponseBody {
	s.Data = v
	return s
}

func (s *GetAvailabilityMetricResponseBody) SetMessage(v string) *GetAvailabilityMetricResponseBody {
	s.Message = &v
	return s
}

func (s *GetAvailabilityMetricResponseBody) SetRequestId(v string) *GetAvailabilityMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAvailabilityMetricResponseBody) SetSuccess(v bool) *GetAvailabilityMetricResponseBody {
	s.Success = &v
	return s
}

type GetAvailabilityMetricResponseBodyData struct {
	// The application ID.
	//
	// example:
	//
	// 017f39b8-dfa4-4e16-a84b-1dcee4b1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// Indicates whether an auto scaling policy is enabled. Valid values:
	//
	// 	- **1**: An auto scaling policy is enabled.
	//
	// 	- **0**: No auto scaling policy is enabled.
	//
	// example:
	//
	// 0
	EnableAutoscale *int64 `json:"EnableAutoscale,omitempty" xml:"EnableAutoscale,omitempty"`
	// The number of abnormal instances.
	//
	// example:
	//
	// 0
	ErrorInstances *int64 `json:"ErrorInstances,omitempty" xml:"ErrorInstances,omitempty"`
	// The expected number of instances.
	//
	// example:
	//
	// 0
	Instances *int64 `json:"Instances,omitempty" xml:"Instances,omitempty"`
	// The application name.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The current number of instances.
	//
	// example:
	//
	// 1
	Runnings *int64 `json:"Runnings,omitempty" xml:"Runnings,omitempty"`
}

func (s GetAvailabilityMetricResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAvailabilityMetricResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAvailabilityMetricResponseBodyData) SetAppId(v string) *GetAvailabilityMetricResponseBodyData {
	s.AppId = &v
	return s
}

func (s *GetAvailabilityMetricResponseBodyData) SetEnableAutoscale(v int64) *GetAvailabilityMetricResponseBodyData {
	s.EnableAutoscale = &v
	return s
}

func (s *GetAvailabilityMetricResponseBodyData) SetErrorInstances(v int64) *GetAvailabilityMetricResponseBodyData {
	s.ErrorInstances = &v
	return s
}

func (s *GetAvailabilityMetricResponseBodyData) SetInstances(v int64) *GetAvailabilityMetricResponseBodyData {
	s.Instances = &v
	return s
}

func (s *GetAvailabilityMetricResponseBodyData) SetName(v string) *GetAvailabilityMetricResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetAvailabilityMetricResponseBodyData) SetRegionId(v string) *GetAvailabilityMetricResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetAvailabilityMetricResponseBodyData) SetRunnings(v int64) *GetAvailabilityMetricResponseBodyData {
	s.Runnings = &v
	return s
}

type GetAvailabilityMetricResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAvailabilityMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAvailabilityMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAvailabilityMetricResponse) GoString() string {
	return s.String()
}

func (s *GetAvailabilityMetricResponse) SetHeaders(v map[string]*string) *GetAvailabilityMetricResponse {
	s.Headers = v
	return s
}

func (s *GetAvailabilityMetricResponse) SetStatusCode(v int32) *GetAvailabilityMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAvailabilityMetricResponse) SetBody(v *GetAvailabilityMetricResponseBody) *GetAvailabilityMetricResponse {
	s.Body = v
	return s
}

type GetChangeOrderMetricRequest struct {
	// The SAE application type. Valid values:
	//
	// 	- **micro_service**
	//
	// 	- **web**
	//
	// 	- **job**
	//
	// example:
	//
	// micro_service
	AppSource *string `json:"AppSource,omitempty" xml:"AppSource,omitempty"`
	// The CPU allocation policy. Valid values:
	//
	// 	- **request**: CPU cores are allocated only when a request is initiated.
	//
	// 	- **always**: Fixed CPU cores are always allocated.
	//
	// example:
	//
	// always
	CpuStrategy *string `json:"CpuStrategy,omitempty" xml:"CpuStrategy,omitempty"`
	// The start time when the change order was created.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1661152748883
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The number of entries to return. Valid values: 0 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	Limit *int64 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// The field based on which you want to sort the returned entries.
	//
	// This parameter is required.
	//
	// example:
	//
	// errorPercent
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetChangeOrderMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderMetricRequest) GoString() string {
	return s.String()
}

func (s *GetChangeOrderMetricRequest) SetAppSource(v string) *GetChangeOrderMetricRequest {
	s.AppSource = &v
	return s
}

func (s *GetChangeOrderMetricRequest) SetCpuStrategy(v string) *GetChangeOrderMetricRequest {
	s.CpuStrategy = &v
	return s
}

func (s *GetChangeOrderMetricRequest) SetCreateTime(v string) *GetChangeOrderMetricRequest {
	s.CreateTime = &v
	return s
}

func (s *GetChangeOrderMetricRequest) SetLimit(v int64) *GetChangeOrderMetricRequest {
	s.Limit = &v
	return s
}

func (s *GetChangeOrderMetricRequest) SetOrderBy(v string) *GetChangeOrderMetricRequest {
	s.OrderBy = &v
	return s
}

func (s *GetChangeOrderMetricRequest) SetRegionId(v string) *GetChangeOrderMetricRequest {
	s.RegionId = &v
	return s
}

type GetChangeOrderMetricResponseBody struct {
	// The HTTP status code. The following limits are imposed on the ID:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of applications.
	Data []*GetChangeOrderMetricResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The additional information that is returned. The following limits are imposed on the ID:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3B763F98-0BA2-5C23-B6B8-558568D2C1C2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the microservice list was obtained. The following limits are imposed on the ID:
	//
	// 	- **true**: The namespaces were obtained.
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetChangeOrderMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderMetricResponseBody) GoString() string {
	return s.String()
}

func (s *GetChangeOrderMetricResponseBody) SetCode(v string) *GetChangeOrderMetricResponseBody {
	s.Code = &v
	return s
}

func (s *GetChangeOrderMetricResponseBody) SetData(v []*GetChangeOrderMetricResponseBodyData) *GetChangeOrderMetricResponseBody {
	s.Data = v
	return s
}

func (s *GetChangeOrderMetricResponseBody) SetMessage(v string) *GetChangeOrderMetricResponseBody {
	s.Message = &v
	return s
}

func (s *GetChangeOrderMetricResponseBody) SetRequestId(v string) *GetChangeOrderMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetChangeOrderMetricResponseBody) SetSuccess(v bool) *GetChangeOrderMetricResponseBody {
	s.Success = &v
	return s
}

type GetChangeOrderMetricResponseBodyData struct {
	// The application ID.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The number of abnormal change orders.
	//
	// example:
	//
	// 1
	Error *int64 `json:"Error,omitempty" xml:"Error,omitempty"`
	// The percentage of change failures.
	//
	// example:
	//
	// 0.25
	ErrorPercent *float32 `json:"ErrorPercent,omitempty" xml:"ErrorPercent,omitempty"`
	// The application name.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The total number of change orders.
	//
	// example:
	//
	// 4
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetChangeOrderMetricResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderMetricResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetChangeOrderMetricResponseBodyData) SetAppId(v string) *GetChangeOrderMetricResponseBodyData {
	s.AppId = &v
	return s
}

func (s *GetChangeOrderMetricResponseBodyData) SetError(v int64) *GetChangeOrderMetricResponseBodyData {
	s.Error = &v
	return s
}

func (s *GetChangeOrderMetricResponseBodyData) SetErrorPercent(v float32) *GetChangeOrderMetricResponseBodyData {
	s.ErrorPercent = &v
	return s
}

func (s *GetChangeOrderMetricResponseBodyData) SetName(v string) *GetChangeOrderMetricResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetChangeOrderMetricResponseBodyData) SetRegionId(v string) *GetChangeOrderMetricResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetChangeOrderMetricResponseBodyData) SetTotal(v int64) *GetChangeOrderMetricResponseBodyData {
	s.Total = &v
	return s
}

type GetChangeOrderMetricResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetChangeOrderMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetChangeOrderMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderMetricResponse) GoString() string {
	return s.String()
}

func (s *GetChangeOrderMetricResponse) SetHeaders(v map[string]*string) *GetChangeOrderMetricResponse {
	s.Headers = v
	return s
}

func (s *GetChangeOrderMetricResponse) SetStatusCode(v int32) *GetChangeOrderMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *GetChangeOrderMetricResponse) SetBody(v *GetChangeOrderMetricResponseBody) *GetChangeOrderMetricResponse {
	s.Body = v
	return s
}

type GetScaleAppMetricRequest struct {
	// The SAE application type. Valid values:
	//
	// 	- **micro_service**
	//
	// 	- **web**
	//
	// 	- **job**
	//
	// example:
	//
	// micro_service
	AppSource *string `json:"AppSource,omitempty" xml:"AppSource,omitempty"`
	// The CPU allocation policy. Valid values:
	//
	// 	- **request**: CPU cores are allocated only when a request is initiated.
	//
	// 	- **always**: Fixed CPU cores are always allocated.
	//
	// example:
	//
	// always
	CpuStrategy *string `json:"CpuStrategy,omitempty" xml:"CpuStrategy,omitempty"`
	// The number of entries to return. Valid values: 0 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	Limit *int64 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetScaleAppMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScaleAppMetricRequest) GoString() string {
	return s.String()
}

func (s *GetScaleAppMetricRequest) SetAppSource(v string) *GetScaleAppMetricRequest {
	s.AppSource = &v
	return s
}

func (s *GetScaleAppMetricRequest) SetCpuStrategy(v string) *GetScaleAppMetricRequest {
	s.CpuStrategy = &v
	return s
}

func (s *GetScaleAppMetricRequest) SetLimit(v int64) *GetScaleAppMetricRequest {
	s.Limit = &v
	return s
}

func (s *GetScaleAppMetricRequest) SetRegionId(v string) *GetScaleAppMetricRequest {
	s.RegionId = &v
	return s
}

type GetScaleAppMetricResponseBody struct {
	// The HTTP status code. The following limits are imposed on the ID:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of applications.
	Data []*GetScaleAppMetricResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The additional information that is returned. The following limits are imposed on the ID:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3B763F98-0BA2-5C23-B6B8-558568D2C1C2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the microservice list was obtained. The following limits are imposed on the ID:
	//
	// 	- **true**: The namespaces were obtained.
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetScaleAppMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetScaleAppMetricResponseBody) GoString() string {
	return s.String()
}

func (s *GetScaleAppMetricResponseBody) SetCode(v string) *GetScaleAppMetricResponseBody {
	s.Code = &v
	return s
}

func (s *GetScaleAppMetricResponseBody) SetData(v []*GetScaleAppMetricResponseBodyData) *GetScaleAppMetricResponseBody {
	s.Data = v
	return s
}

func (s *GetScaleAppMetricResponseBody) SetMessage(v string) *GetScaleAppMetricResponseBody {
	s.Message = &v
	return s
}

func (s *GetScaleAppMetricResponseBody) SetRequestId(v string) *GetScaleAppMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetScaleAppMetricResponseBody) SetSuccess(v bool) *GetScaleAppMetricResponseBody {
	s.Success = &v
	return s
}

type GetScaleAppMetricResponseBodyData struct {
	// The application ID.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The maximum number of instances.
	//
	// example:
	//
	// 10
	MaxReplicas *int64 `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	// The application name.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The current number of instances.
	//
	// example:
	//
	// 10
	Runnings *int64 `json:"Runnings,omitempty" xml:"Runnings,omitempty"`
}

func (s GetScaleAppMetricResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetScaleAppMetricResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetScaleAppMetricResponseBodyData) SetAppId(v string) *GetScaleAppMetricResponseBodyData {
	s.AppId = &v
	return s
}

func (s *GetScaleAppMetricResponseBodyData) SetMaxReplicas(v int64) *GetScaleAppMetricResponseBodyData {
	s.MaxReplicas = &v
	return s
}

func (s *GetScaleAppMetricResponseBodyData) SetName(v string) *GetScaleAppMetricResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetScaleAppMetricResponseBodyData) SetRegionId(v string) *GetScaleAppMetricResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetScaleAppMetricResponseBodyData) SetRunnings(v int64) *GetScaleAppMetricResponseBodyData {
	s.Runnings = &v
	return s
}

type GetScaleAppMetricResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetScaleAppMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetScaleAppMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s GetScaleAppMetricResponse) GoString() string {
	return s.String()
}

func (s *GetScaleAppMetricResponse) SetHeaders(v map[string]*string) *GetScaleAppMetricResponse {
	s.Headers = v
	return s
}

func (s *GetScaleAppMetricResponse) SetStatusCode(v int32) *GetScaleAppMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *GetScaleAppMetricResponse) SetBody(v *GetScaleAppMetricResponseBody) *GetScaleAppMetricResponse {
	s.Body = v
	return s
}

type GetWarningEventMetricRequest struct {
	// The SAE application type. Valid values:
	//
	// 	- **micro_service**
	//
	// 	- **web**
	//
	// 	- **job**
	//
	// example:
	//
	// micro_service
	AppSource *string `json:"AppSource,omitempty" xml:"AppSource,omitempty"`
	// The CPU allocation policy. Valid values:
	//
	// 	- **request**: CPU cores are allocated only when a request is initiated.
	//
	// 	- **always**: Fixed CPU cores are always allocated.
	//
	// example:
	//
	// always
	CpuStrategy *string `json:"CpuStrategy,omitempty" xml:"CpuStrategy,omitempty"`
	// The end of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1675824035951
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The number of entries to return. Valid values: 0 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	Limit *int64 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1675823135951
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetWarningEventMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWarningEventMetricRequest) GoString() string {
	return s.String()
}

func (s *GetWarningEventMetricRequest) SetAppSource(v string) *GetWarningEventMetricRequest {
	s.AppSource = &v
	return s
}

func (s *GetWarningEventMetricRequest) SetCpuStrategy(v string) *GetWarningEventMetricRequest {
	s.CpuStrategy = &v
	return s
}

func (s *GetWarningEventMetricRequest) SetEndTime(v int64) *GetWarningEventMetricRequest {
	s.EndTime = &v
	return s
}

func (s *GetWarningEventMetricRequest) SetLimit(v int64) *GetWarningEventMetricRequest {
	s.Limit = &v
	return s
}

func (s *GetWarningEventMetricRequest) SetRegionId(v string) *GetWarningEventMetricRequest {
	s.RegionId = &v
	return s
}

func (s *GetWarningEventMetricRequest) SetStartTime(v int64) *GetWarningEventMetricRequest {
	s.StartTime = &v
	return s
}

type GetWarningEventMetricResponseBody struct {
	// The HTTP status code. The following limits are imposed on the ID:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of applications.
	Data []*GetWarningEventMetricResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The additional information that is returned. The following limits are imposed on the ID:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3B763F98-0BA2-5C23-B6B8-558568D2C1C2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the list of applications was obtained. The following limits are imposed on the ID:
	//
	// 	- **true**: The namespaces were obtained.
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetWarningEventMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWarningEventMetricResponseBody) GoString() string {
	return s.String()
}

func (s *GetWarningEventMetricResponseBody) SetCode(v string) *GetWarningEventMetricResponseBody {
	s.Code = &v
	return s
}

func (s *GetWarningEventMetricResponseBody) SetData(v []*GetWarningEventMetricResponseBodyData) *GetWarningEventMetricResponseBody {
	s.Data = v
	return s
}

func (s *GetWarningEventMetricResponseBody) SetMessage(v string) *GetWarningEventMetricResponseBody {
	s.Message = &v
	return s
}

func (s *GetWarningEventMetricResponseBody) SetRequestId(v string) *GetWarningEventMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWarningEventMetricResponseBody) SetSuccess(v bool) *GetWarningEventMetricResponseBody {
	s.Success = &v
	return s
}

type GetWarningEventMetricResponseBodyData struct {
	// The application ID.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The application name.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of Warning events.
	//
	// example:
	//
	// 10
	WarningCount *int64 `json:"WarningCount,omitempty" xml:"WarningCount,omitempty"`
}

func (s GetWarningEventMetricResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetWarningEventMetricResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetWarningEventMetricResponseBodyData) SetAppId(v string) *GetWarningEventMetricResponseBodyData {
	s.AppId = &v
	return s
}

func (s *GetWarningEventMetricResponseBodyData) SetName(v string) *GetWarningEventMetricResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetWarningEventMetricResponseBodyData) SetRegionId(v string) *GetWarningEventMetricResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetWarningEventMetricResponseBodyData) SetWarningCount(v int64) *GetWarningEventMetricResponseBodyData {
	s.WarningCount = &v
	return s
}

type GetWarningEventMetricResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWarningEventMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWarningEventMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWarningEventMetricResponse) GoString() string {
	return s.String()
}

func (s *GetWarningEventMetricResponse) SetHeaders(v map[string]*string) *GetWarningEventMetricResponse {
	s.Headers = v
	return s
}

func (s *GetWarningEventMetricResponse) SetStatusCode(v int32) *GetWarningEventMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWarningEventMetricResponse) SetBody(v *GetWarningEventMetricResponseBody) *GetWarningEventMetricResponse {
	s.Body = v
	return s
}

type ListAppEventsRequest struct {
	// The application ID.
	//
	// example:
	//
	// f7730764-d88f-4b9a-8d8e-cd8efbfe****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The page number of the page to return.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The type of the event. Valid values:
	//
	// 	- **Warning**: an alert.
	//
	// 	- **Normal**: a normal event.
	//
	// example:
	//
	// Warning
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The namespace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The type of the object. Valid values:
	//
	// 	- **Deployment**: an application.
	//
	// 	- **Pod**: an application instance.
	//
	// 	- **Service**: a Server Load Balancer (SLB) instance.
	//
	// 	- **HorizontalPodAutoscaler**: an auto scaling policy.
	//
	// 	- **CloneSet**: an application.
	//
	// example:
	//
	// Pod
	ObjectKind *string `json:"ObjectKind,omitempty" xml:"ObjectKind,omitempty"`
	// The name of the object. Fuzzy search by prefix is supported.
	//
	// example:
	//
	// errew-b86bf540-b4dc-47d8-a42f-b4997c14bd8f-5595cbddd6-x****
	ObjectName *string `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
	// The number of entries to return on each page. Valid values: 0 to 10000.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The cause of the event. Fuzzy search by prefix is supported.
	//
	// example:
	//
	// Started
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s ListAppEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppEventsRequest) GoString() string {
	return s.String()
}

func (s *ListAppEventsRequest) SetAppId(v string) *ListAppEventsRequest {
	s.AppId = &v
	return s
}

func (s *ListAppEventsRequest) SetCurrentPage(v int32) *ListAppEventsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListAppEventsRequest) SetEventType(v string) *ListAppEventsRequest {
	s.EventType = &v
	return s
}

func (s *ListAppEventsRequest) SetNamespace(v string) *ListAppEventsRequest {
	s.Namespace = &v
	return s
}

func (s *ListAppEventsRequest) SetObjectKind(v string) *ListAppEventsRequest {
	s.ObjectKind = &v
	return s
}

func (s *ListAppEventsRequest) SetObjectName(v string) *ListAppEventsRequest {
	s.ObjectName = &v
	return s
}

func (s *ListAppEventsRequest) SetPageSize(v int32) *ListAppEventsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAppEventsRequest) SetReason(v string) *ListAppEventsRequest {
	s.Reason = &v
	return s
}

type ListAppEventsResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The events.
	Data *ListAppEventsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the call failed. Take note of the following rules:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4D805CA-926D-41B1-8E63-7AD0C1ED****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the events that occurred in the application were queried. Valid values:
	//
	// 	- **true**: The events were queried.
	//
	// 	- **false**: The events failed to be queried.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAppEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAppEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAppEventsResponseBody) SetCode(v string) *ListAppEventsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAppEventsResponseBody) SetData(v *ListAppEventsResponseBodyData) *ListAppEventsResponseBody {
	s.Data = v
	return s
}

func (s *ListAppEventsResponseBody) SetErrorCode(v string) *ListAppEventsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListAppEventsResponseBody) SetMessage(v string) *ListAppEventsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAppEventsResponseBody) SetRequestId(v string) *ListAppEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAppEventsResponseBody) SetSuccess(v bool) *ListAppEventsResponseBody {
	s.Success = &v
	return s
}

type ListAppEventsResponseBodyData struct {
	// The events.
	AppEventEntity []*ListAppEventsResponseBodyDataAppEventEntity `json:"AppEventEntity,omitempty" xml:"AppEventEntity,omitempty" type:"Repeated"`
	// The number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of events that occurred in an application.
	//
	// example:
	//
	// 20
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListAppEventsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAppEventsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAppEventsResponseBodyData) SetAppEventEntity(v []*ListAppEventsResponseBodyDataAppEventEntity) *ListAppEventsResponseBodyData {
	s.AppEventEntity = v
	return s
}

func (s *ListAppEventsResponseBodyData) SetCurrentPage(v int32) *ListAppEventsResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListAppEventsResponseBodyData) SetPageSize(v int32) *ListAppEventsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListAppEventsResponseBodyData) SetTotalSize(v int32) *ListAppEventsResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListAppEventsResponseBodyDataAppEventEntity struct {
	// The type of the event. Valid values:
	//
	// example:
	//
	// Normal
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The timestamp of the first occurrence of the event.
	//
	// example:
	//
	// 2020-02-19T05:01:28Z
	FirstTimestamp *string `json:"FirstTimestamp,omitempty" xml:"FirstTimestamp,omitempty"`
	// The timestamp of the last occurrence of the event.
	//
	// example:
	//
	// 2020-02-19T05:01:28Z
	LastTimestamp *string `json:"LastTimestamp,omitempty" xml:"LastTimestamp,omitempty"`
	// The information about the event.
	//
	// example:
	//
	// Created container
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The type of the object.
	//
	// example:
	//
	// Pod
	ObjectKind *string `json:"ObjectKind,omitempty" xml:"ObjectKind,omitempty"`
	// The name of the object.
	//
	// example:
	//
	// errew-b86bf540-b4dc-47d8-a42f-b4997c14bd8f-5595cbddd6-2****
	ObjectName *string `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
	// The cause of the event.
	//
	// example:
	//
	// Created
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s ListAppEventsResponseBodyDataAppEventEntity) String() string {
	return tea.Prettify(s)
}

func (s ListAppEventsResponseBodyDataAppEventEntity) GoString() string {
	return s.String()
}

func (s *ListAppEventsResponseBodyDataAppEventEntity) SetEventType(v string) *ListAppEventsResponseBodyDataAppEventEntity {
	s.EventType = &v
	return s
}

func (s *ListAppEventsResponseBodyDataAppEventEntity) SetFirstTimestamp(v string) *ListAppEventsResponseBodyDataAppEventEntity {
	s.FirstTimestamp = &v
	return s
}

func (s *ListAppEventsResponseBodyDataAppEventEntity) SetLastTimestamp(v string) *ListAppEventsResponseBodyDataAppEventEntity {
	s.LastTimestamp = &v
	return s
}

func (s *ListAppEventsResponseBodyDataAppEventEntity) SetMessage(v string) *ListAppEventsResponseBodyDataAppEventEntity {
	s.Message = &v
	return s
}

func (s *ListAppEventsResponseBodyDataAppEventEntity) SetObjectKind(v string) *ListAppEventsResponseBodyDataAppEventEntity {
	s.ObjectKind = &v
	return s
}

func (s *ListAppEventsResponseBodyDataAppEventEntity) SetObjectName(v string) *ListAppEventsResponseBodyDataAppEventEntity {
	s.ObjectName = &v
	return s
}

func (s *ListAppEventsResponseBodyDataAppEventEntity) SetReason(v string) *ListAppEventsResponseBodyDataAppEventEntity {
	s.Reason = &v
	return s
}

type ListAppEventsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAppEventsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAppEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppEventsResponse) GoString() string {
	return s.String()
}

func (s *ListAppEventsResponse) SetHeaders(v map[string]*string) *ListAppEventsResponse {
	s.Headers = v
	return s
}

func (s *ListAppEventsResponse) SetStatusCode(v int32) *ListAppEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAppEventsResponse) SetBody(v *ListAppEventsResponseBody) *ListAppEventsResponse {
	s.Body = v
	return s
}

type ListAppServicesPageRequest struct {
	// 1
	//
	// This parameter is required.
	//
	// example:
	//
	// 6dcc8c9e-d3da-478a-a066-86dcf820****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned information.
	//
	// example:
	//
	// 9999
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 9999
	//
	// This parameter is required.
	//
	// example:
	//
	// springCloud
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
}

func (s ListAppServicesPageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppServicesPageRequest) GoString() string {
	return s.String()
}

func (s *ListAppServicesPageRequest) SetAppId(v string) *ListAppServicesPageRequest {
	s.AppId = &v
	return s
}

func (s *ListAppServicesPageRequest) SetPageNumber(v int32) *ListAppServicesPageRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAppServicesPageRequest) SetPageSize(v int32) *ListAppServicesPageRequest {
	s.PageSize = &v
	return s
}

func (s *ListAppServicesPageRequest) SetServiceType(v string) *ListAppServicesPageRequest {
	s.ServiceType = &v
	return s
}

type ListAppServicesPageResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The total number of pages returned.
	Data []*ListAppServicesPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Indicates whether the microservice list was obtained. Valid values:
	//
	// 	- **true**: The list was obtained.
	//
	// 	- **false**: The list failed to be obtained.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The details of microservices.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// 2583E089-99C2-562E-8B7E-73512136****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The page number of the current page.
	//
	// example:
	//
	// 0be3e0c816394483660457498e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListAppServicesPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAppServicesPageResponseBody) GoString() string {
	return s.String()
}

func (s *ListAppServicesPageResponseBody) SetCode(v string) *ListAppServicesPageResponseBody {
	s.Code = &v
	return s
}

func (s *ListAppServicesPageResponseBody) SetData(v []*ListAppServicesPageResponseBodyData) *ListAppServicesPageResponseBody {
	s.Data = v
	return s
}

func (s *ListAppServicesPageResponseBody) SetErrorCode(v string) *ListAppServicesPageResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListAppServicesPageResponseBody) SetMessage(v string) *ListAppServicesPageResponseBody {
	s.Message = &v
	return s
}

func (s *ListAppServicesPageResponseBody) SetRequestId(v string) *ListAppServicesPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAppServicesPageResponseBody) SetSuccess(v bool) *ListAppServicesPageResponseBody {
	s.Success = &v
	return s
}

func (s *ListAppServicesPageResponseBody) SetTraceId(v string) *ListAppServicesPageResponseBody {
	s.TraceId = &v
	return s
}

type ListAppServicesPageResponseBodyData struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *string `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The returned result.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// 9999
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The version of the service. You can create a custom version.
	Result []*ListAppServicesPageResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// The number of entries returned per page. Valid values: 0 to 9999.
	//
	// example:
	//
	// 1
	TotalSize *string `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListAppServicesPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAppServicesPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAppServicesPageResponseBodyData) SetCurrentPage(v string) *ListAppServicesPageResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListAppServicesPageResponseBodyData) SetPageNumber(v string) *ListAppServicesPageResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListAppServicesPageResponseBodyData) SetPageSize(v string) *ListAppServicesPageResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListAppServicesPageResponseBodyData) SetResult(v []*ListAppServicesPageResponseBodyDataResult) *ListAppServicesPageResponseBodyData {
	s.Result = v
	return s
}

func (s *ListAppServicesPageResponseBodyData) SetTotalSize(v string) *ListAppServicesPageResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListAppServicesPageResponseBodyDataResult struct {
	// The group to which the service belongs. You can create a custom group.
	//
	// example:
	//
	// hc4fs1****@98314c8790b****
	EdasAppId *string `json:"EdasAppId,omitempty" xml:"EdasAppId,omitempty"`
	// The total number of instances.
	//
	// example:
	//
	// cn-zhangjiakou-micro-service-******
	EdasAppName *string `json:"EdasAppName,omitempty" xml:"EdasAppName,omitempty"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the call was successful.
	//
	// 	- **3xx**: indicates that the call was redirected.
	//
	// 	- **4xx**: indicates that the call failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// springCloud
	Group *string `json:"Group,omitempty" xml:"Group,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// 1
	InstanceNum *int64 `json:"InstanceNum,omitempty" xml:"InstanceNum,omitempty"`
	// The returned error code. Valid values:
	//
	// - If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// - If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// edas.service.provider
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The ID of the application.
	//
	// example:
	//
	// 1.0.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListAppServicesPageResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s ListAppServicesPageResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *ListAppServicesPageResponseBodyDataResult) SetEdasAppId(v string) *ListAppServicesPageResponseBodyDataResult {
	s.EdasAppId = &v
	return s
}

func (s *ListAppServicesPageResponseBodyDataResult) SetEdasAppName(v string) *ListAppServicesPageResponseBodyDataResult {
	s.EdasAppName = &v
	return s
}

func (s *ListAppServicesPageResponseBodyDataResult) SetGroup(v string) *ListAppServicesPageResponseBodyDataResult {
	s.Group = &v
	return s
}

func (s *ListAppServicesPageResponseBodyDataResult) SetInstanceNum(v int64) *ListAppServicesPageResponseBodyDataResult {
	s.InstanceNum = &v
	return s
}

func (s *ListAppServicesPageResponseBodyDataResult) SetServiceName(v string) *ListAppServicesPageResponseBodyDataResult {
	s.ServiceName = &v
	return s
}

func (s *ListAppServicesPageResponseBodyDataResult) SetVersion(v string) *ListAppServicesPageResponseBodyDataResult {
	s.Version = &v
	return s
}

type ListAppServicesPageResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAppServicesPageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAppServicesPageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppServicesPageResponse) GoString() string {
	return s.String()
}

func (s *ListAppServicesPageResponse) SetHeaders(v map[string]*string) *ListAppServicesPageResponse {
	s.Headers = v
	return s
}

func (s *ListAppServicesPageResponse) SetStatusCode(v int32) *ListAppServicesPageResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAppServicesPageResponse) SetBody(v *ListAppServicesPageResponseBody) *ListAppServicesPageResponse {
	s.Body = v
	return s
}

type ListAppVersionsRequest struct {
	// The returned message.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ListAppVersionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppVersionsRequest) GoString() string {
	return s.String()
}

func (s *ListAppVersionsRequest) SetAppId(v string) *ListAppVersionsRequest {
	s.AppId = &v
	return s
}

type ListAppVersionsResponseBody struct {
	// Indicates whether the historical versions of the application were obtained. Valid values:
	//
	// 	- **true**: indicates that the historical versions of the application were obtained.
	//
	// 	- **false**: indicates that the historical versions of the application could not be obtained.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The deployment method of the application. Valid values:
	//
	// 	- **image**: indicates that the application was deployed by using an image.
	//
	// 	- **upload**: indicates that the application was deployed by uploading a WAR or JAR package.
	//
	// 	- **url**: indicates that the application was deployed by specifying the URL of a WAR or JAR package.
	Data []*ListAppVersionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The information about the versions.
	//
	// example:
	//
	// 01CF26C7-00A3-4AA6-BA76-7E95F2A3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAppVersionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAppVersionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAppVersionsResponseBody) SetCode(v string) *ListAppVersionsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAppVersionsResponseBody) SetData(v []*ListAppVersionsResponseBodyData) *ListAppVersionsResponseBody {
	s.Data = v
	return s
}

func (s *ListAppVersionsResponseBody) SetErrorCode(v string) *ListAppVersionsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListAppVersionsResponseBody) SetMessage(v string) *ListAppVersionsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAppVersionsResponseBody) SetRequestId(v string) *ListAppVersionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAppVersionsResponseBody) SetSuccess(v bool) *ListAppVersionsResponseBody {
	s.Success = &v
	return s
}

type ListAppVersionsResponseBodyData struct {
	// 	- The address of the image. This parameter is returned when the **Type*	- parameter is set to **image**.
	//
	// 	- The download link of the WAR or JAR package. This parameter is returned when the **Type*	- parameter is set to **upload**.
	BuildPackageUrl *string `json:"BuildPackageUrl,omitempty" xml:"BuildPackageUrl,omitempty"`
	// The download link of the WAR or JAR package. This parameter is returned when the **Type*	- parameter is set to **url**.
	//
	// example:
	//
	// 1590124643553
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// a0ce266c-d354-423a-9bd6-4083405a****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the application was created.
	//
	// example:
	//
	// image
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the version.
	WarUrl *string `json:"WarUrl,omitempty" xml:"WarUrl,omitempty"`
}

func (s ListAppVersionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAppVersionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAppVersionsResponseBodyData) SetBuildPackageUrl(v string) *ListAppVersionsResponseBodyData {
	s.BuildPackageUrl = &v
	return s
}

func (s *ListAppVersionsResponseBodyData) SetCreateTime(v string) *ListAppVersionsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListAppVersionsResponseBodyData) SetId(v string) *ListAppVersionsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListAppVersionsResponseBodyData) SetType(v string) *ListAppVersionsResponseBodyData {
	s.Type = &v
	return s
}

func (s *ListAppVersionsResponseBodyData) SetWarUrl(v string) *ListAppVersionsResponseBodyData {
	s.WarUrl = &v
	return s
}

type ListAppVersionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAppVersionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAppVersionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppVersionsResponse) GoString() string {
	return s.String()
}

func (s *ListAppVersionsResponse) SetHeaders(v map[string]*string) *ListAppVersionsResponse {
	s.Headers = v
	return s
}

func (s *ListAppVersionsResponse) SetStatusCode(v int32) *ListAppVersionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAppVersionsResponse) SetBody(v *ListAppVersionsResponseBody) *ListAppVersionsResponse {
	s.Body = v
	return s
}

type ListApplicationsRequest struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// demo-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The SAE application type. Valid values:
	//
	// - **micro_service**
	//
	// - **web**
	//
	// - **job**
	//
	// example:
	//
	// micro_service
	AppSource *string `json:"AppSource,omitempty" xml:"AppSource,omitempty"`
	// The number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// true
	//
	// example:
	//
	// appName
	FieldType *string `json:"FieldType,omitempty" xml:"FieldType,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// demo-app
	FieldValue *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
	// 1
	//
	// example:
	//
	// cn-beijing:demo
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// runnings
	//
	// example:
	//
	// running
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// Indicates whether the application is being deleted. Valid values:
	//
	// 	- **true**: The application is being deleted.
	//
	// 	- **false**: The application is not being deleted.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The returned message.
	//
	// example:
	//
	// true
	Reverse *bool `json:"Reverse,omitempty" xml:"Reverse,omitempty"`
	// The list of applications.
	//
	// example:
	//
	// [{"key":"key","value":"value"}]
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ListApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationsRequest) SetAppName(v string) *ListApplicationsRequest {
	s.AppName = &v
	return s
}

func (s *ListApplicationsRequest) SetAppSource(v string) *ListApplicationsRequest {
	s.AppSource = &v
	return s
}

func (s *ListApplicationsRequest) SetCurrentPage(v int32) *ListApplicationsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListApplicationsRequest) SetFieldType(v string) *ListApplicationsRequest {
	s.FieldType = &v
	return s
}

func (s *ListApplicationsRequest) SetFieldValue(v string) *ListApplicationsRequest {
	s.FieldValue = &v
	return s
}

func (s *ListApplicationsRequest) SetNamespaceId(v string) *ListApplicationsRequest {
	s.NamespaceId = &v
	return s
}

func (s *ListApplicationsRequest) SetOrderBy(v string) *ListApplicationsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListApplicationsRequest) SetPageSize(v int32) *ListApplicationsRequest {
	s.PageSize = &v
	return s
}

func (s *ListApplicationsRequest) SetReverse(v bool) *ListApplicationsRequest {
	s.Reverse = &v
	return s
}

func (s *ListApplicationsRequest) SetTags(v string) *ListApplicationsRequest {
	s.Tags = &v
	return s
}

type ListApplicationsResponseBody struct {
	// Queries applications.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 20
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The queried applications.
	Data *ListApplicationsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// The ID of the request.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// 20
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// cn-beijing:demo
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// B4D805CA-926D-41B1-8E63-7AD0C1ED****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 1
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// demo-app
	//
	// example:
	//
	// 2
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBody) SetCode(v string) *ListApplicationsResponseBody {
	s.Code = &v
	return s
}

func (s *ListApplicationsResponseBody) SetCurrentPage(v int32) *ListApplicationsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *ListApplicationsResponseBody) SetData(v *ListApplicationsResponseBodyData) *ListApplicationsResponseBody {
	s.Data = v
	return s
}

func (s *ListApplicationsResponseBody) SetErrorCode(v string) *ListApplicationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListApplicationsResponseBody) SetMessage(v string) *ListApplicationsResponseBody {
	s.Message = &v
	return s
}

func (s *ListApplicationsResponseBody) SetPageSize(v int32) *ListApplicationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListApplicationsResponseBody) SetRequestId(v string) *ListApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApplicationsResponseBody) SetSuccess(v bool) *ListApplicationsResponseBody {
	s.Success = &v
	return s
}

func (s *ListApplicationsResponseBody) SetTotalSize(v int32) *ListApplicationsResponseBody {
	s.TotalSize = &v
	return s
}

type ListApplicationsResponseBodyData struct {
	// The applications.
	Applications []*ListApplicationsResponseBodyDataApplications `json:"Applications,omitempty" xml:"Applications,omitempty" type:"Repeated"`
	// The number of application instances.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The tags of the application.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The information about applications.
	//
	// example:
	//
	// 2
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListApplicationsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyData) SetApplications(v []*ListApplicationsResponseBodyDataApplications) *ListApplicationsResponseBodyData {
	s.Applications = v
	return s
}

func (s *ListApplicationsResponseBodyData) SetCurrentPage(v int32) *ListApplicationsResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListApplicationsResponseBodyData) SetPageSize(v int32) *ListApplicationsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListApplicationsResponseBodyData) SetTotalSize(v int32) *ListApplicationsResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListApplicationsResponseBodyDataApplications struct {
	// Indicates whether the application is being deleted. Valid values:
	//
	// 	- **true**: The application is being deleted.
	//
	// 	- **false**: The application is not being deleted.
	//
	// example:
	//
	// false
	AppDeletingStatus *bool `json:"AppDeletingStatus,omitempty" xml:"AppDeletingStatus,omitempty"`
	// The description of the application.
	//
	// example:
	//
	// description
	AppDescription *string `json:"AppDescription,omitempty" xml:"AppDescription,omitempty"`
	// The application ID.
	//
	// example:
	//
	// f7730764-d88f-4b9a-8d8e-cd8efbfe****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The application name.
	//
	// example:
	//
	// demo-app
	AppName   *string                                                 `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BaseAppId *string                                                 `json:"BaseAppId,omitempty" xml:"BaseAppId,omitempty"`
	Children  []*ListApplicationsResponseBodyDataApplicationsChildren `json:"Children,omitempty" xml:"Children,omitempty" type:"Repeated"`
	// The CPU specifications that are required for each instance. Unit: millicores. This parameter cannot be set to 0. Valid values:
	//
	// 	- **500**
	//
	// 	- **1000**
	//
	// 	- **2000**
	//
	// 	- **4000**
	//
	// 	- **8000**
	//
	// 	- **16000**
	//
	// 	- **32000**
	//
	// example:
	//
	// 1000
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The number of application instances.
	//
	// example:
	//
	// 2
	Instances *int32 `json:"Instances,omitempty" xml:"Instances,omitempty"`
	// The memory size that is required by each instance. Unit: MB. This parameter cannot be set to 0. The values of this parameter correspond to the values of the Cpu parameter:
	//
	// 	- This parameter is set to **1024*	- if the Cpu parameter is set to 500 or 1000.
	//
	// 	- This parameter is set to **2048*	- if the Cpu parameter is set to 500, 1000, or 2000.
	//
	// 	- This parameter is set to **4096*	- if the Cpu parameter is set to 1000, 2000, or 4000.
	//
	// 	- This parameter is set to **8192*	- if the Cpu parameter is set to 2000, 4000, or 8000.
	//
	// 	- This parameter is set to **12288*	- if the Cpu parameter is set to 12000.
	//
	// 	- This parameter is set to **16384*	- if the Cpu parameter is set to 4000, 8000, or 16000.
	//
	// 	- This parameter is set to **24576*	- if the Cpu parameter is set to 12000.
	//
	// 	- This parameter is set to **32768*	- if the Cpu parameter is set to 16000.
	//
	// 	- This parameter is set to **65536*	- if the Cpu parameter is set to 8000, 16000, or 32000.
	//
	// 	- This parameter is set to **131072*	- if the Cpu parameter is set to 32000.
	//
	// example:
	//
	// 1024
	Mem            *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	MseEnabled     *bool   `json:"MseEnabled,omitempty" xml:"MseEnabled,omitempty"`
	MseNamespaceId *string `json:"MseNamespaceId,omitempty" xml:"MseNamespaceId,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-beijing:demo
	NamespaceId         *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	ProgrammingLanguage *string `json:"ProgrammingLanguage,omitempty" xml:"ProgrammingLanguage,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of running instances.
	//
	// example:
	//
	// 2
	RunningInstances *int32 `json:"RunningInstances,omitempty" xml:"RunningInstances,omitempty"`
	// The tags of the application.
	Tags []*ListApplicationsResponseBodyDataApplicationsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListApplicationsResponseBodyDataApplications) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyDataApplications) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyDataApplications) SetAppDeletingStatus(v bool) *ListApplicationsResponseBodyDataApplications {
	s.AppDeletingStatus = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetAppDescription(v string) *ListApplicationsResponseBodyDataApplications {
	s.AppDescription = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetAppId(v string) *ListApplicationsResponseBodyDataApplications {
	s.AppId = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetAppName(v string) *ListApplicationsResponseBodyDataApplications {
	s.AppName = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetBaseAppId(v string) *ListApplicationsResponseBodyDataApplications {
	s.BaseAppId = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetChildren(v []*ListApplicationsResponseBodyDataApplicationsChildren) *ListApplicationsResponseBodyDataApplications {
	s.Children = v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetCpu(v int32) *ListApplicationsResponseBodyDataApplications {
	s.Cpu = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetInstances(v int32) *ListApplicationsResponseBodyDataApplications {
	s.Instances = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetMem(v int32) *ListApplicationsResponseBodyDataApplications {
	s.Mem = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetMseEnabled(v bool) *ListApplicationsResponseBodyDataApplications {
	s.MseEnabled = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetMseNamespaceId(v string) *ListApplicationsResponseBodyDataApplications {
	s.MseNamespaceId = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetNamespaceId(v string) *ListApplicationsResponseBodyDataApplications {
	s.NamespaceId = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetProgrammingLanguage(v string) *ListApplicationsResponseBodyDataApplications {
	s.ProgrammingLanguage = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetRegionId(v string) *ListApplicationsResponseBodyDataApplications {
	s.RegionId = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetRunningInstances(v int32) *ListApplicationsResponseBodyDataApplications {
	s.RunningInstances = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplications) SetTags(v []*ListApplicationsResponseBodyDataApplicationsTags) *ListApplicationsResponseBodyDataApplications {
	s.Tags = v
	return s
}

type ListApplicationsResponseBodyDataApplicationsChildren struct {
	AppDeletingStatus   *bool                                                       `json:"AppDeletingStatus,omitempty" xml:"AppDeletingStatus,omitempty"`
	AppDescription      *string                                                     `json:"AppDescription,omitempty" xml:"AppDescription,omitempty"`
	AppId               *string                                                     `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName             *string                                                     `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BaseAppId           *string                                                     `json:"BaseAppId,omitempty" xml:"BaseAppId,omitempty"`
	Cpu                 *int32                                                      `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	Instances           *int32                                                      `json:"Instances,omitempty" xml:"Instances,omitempty"`
	Mem                 *int32                                                      `json:"Mem,omitempty" xml:"Mem,omitempty"`
	MseEnabled          *bool                                                       `json:"MseEnabled,omitempty" xml:"MseEnabled,omitempty"`
	NamespaceId         *string                                                     `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	ProgrammingLanguage *string                                                     `json:"ProgrammingLanguage,omitempty" xml:"ProgrammingLanguage,omitempty"`
	RegionId            *string                                                     `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RunningInstances    *int32                                                      `json:"RunningInstances,omitempty" xml:"RunningInstances,omitempty"`
	ScaleRuleEnabled    *bool                                                       `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	ScaleRuleType       *string                                                     `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	Tags                []*ListApplicationsResponseBodyDataApplicationsChildrenTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListApplicationsResponseBodyDataApplicationsChildren) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyDataApplicationsChildren) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetAppDeletingStatus(v bool) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.AppDeletingStatus = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetAppDescription(v string) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.AppDescription = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetAppId(v string) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.AppId = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetAppName(v string) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.AppName = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetBaseAppId(v string) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.BaseAppId = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetCpu(v int32) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.Cpu = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetInstances(v int32) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.Instances = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetMem(v int32) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.Mem = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetMseEnabled(v bool) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.MseEnabled = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetNamespaceId(v string) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.NamespaceId = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetProgrammingLanguage(v string) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.ProgrammingLanguage = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetRegionId(v string) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.RegionId = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetRunningInstances(v int32) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.RunningInstances = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetScaleRuleEnabled(v bool) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetScaleRuleType(v string) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.ScaleRuleType = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildren) SetTags(v []*ListApplicationsResponseBodyDataApplicationsChildrenTags) *ListApplicationsResponseBodyDataApplicationsChildren {
	s.Tags = v
	return s
}

type ListApplicationsResponseBodyDataApplicationsChildrenTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListApplicationsResponseBodyDataApplicationsChildrenTags) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyDataApplicationsChildrenTags) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyDataApplicationsChildrenTags) SetKey(v string) *ListApplicationsResponseBodyDataApplicationsChildrenTags {
	s.Key = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsChildrenTags) SetValue(v string) *ListApplicationsResponseBodyDataApplicationsChildrenTags {
	s.Value = &v
	return s
}

type ListApplicationsResponseBodyDataApplicationsTags struct {
	// The key of the tag.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListApplicationsResponseBodyDataApplicationsTags) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyDataApplicationsTags) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyDataApplicationsTags) SetKey(v string) *ListApplicationsResponseBodyDataApplicationsTags {
	s.Key = &v
	return s
}

func (s *ListApplicationsResponseBodyDataApplicationsTags) SetValue(v string) *ListApplicationsResponseBodyDataApplicationsTags {
	s.Value = &v
	return s
}

type ListApplicationsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponse) SetHeaders(v map[string]*string) *ListApplicationsResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationsResponse) SetStatusCode(v int32) *ListApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListApplicationsResponse) SetBody(v *ListApplicationsResponseBody) *ListApplicationsResponse {
	s.Body = v
	return s
}

type ListChangeOrdersRequest struct {
	// 1
	//
	// This parameter is required.
	//
	// example:
	//
	// 145341c-9708-4967-b3ec-24933767****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 2
	CoStatus *string `json:"CoStatus,omitempty" xml:"CoStatus,omitempty"`
	// 2
	//
	// example:
	//
	// CoCreateApp
	CoType *string `json:"CoType,omitempty" xml:"CoType,omitempty"`
	// 20
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// CoCreateApp
	//
	// example:
	//
	// test
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// test
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListChangeOrdersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListChangeOrdersRequest) GoString() string {
	return s.String()
}

func (s *ListChangeOrdersRequest) SetAppId(v string) *ListChangeOrdersRequest {
	s.AppId = &v
	return s
}

func (s *ListChangeOrdersRequest) SetCoStatus(v string) *ListChangeOrdersRequest {
	s.CoStatus = &v
	return s
}

func (s *ListChangeOrdersRequest) SetCoType(v string) *ListChangeOrdersRequest {
	s.CoType = &v
	return s
}

func (s *ListChangeOrdersRequest) SetCurrentPage(v int32) *ListChangeOrdersRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListChangeOrdersRequest) SetKey(v string) *ListChangeOrdersRequest {
	s.Key = &v
	return s
}

func (s *ListChangeOrdersRequest) SetPageSize(v int32) *ListChangeOrdersRequest {
	s.PageSize = &v
	return s
}

type ListChangeOrdersResponseBody struct {
	// Indicates whether the list of change orders was obtained. Valid values:
	//
	// 	- **true**: indicates that the list was obtained.
	//
	// 	- **false**: indicates that the list could not be obtained.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of the returned page.
	Data *ListChangeOrdersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// example:
	//
	// 65E1F-43BA-4D0C-8E61-E4D1337F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The information about change orders.
	//
	// example:
	//
	// 0bb6f815638568884597879d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListChangeOrdersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListChangeOrdersResponseBody) GoString() string {
	return s.String()
}

func (s *ListChangeOrdersResponseBody) SetCode(v string) *ListChangeOrdersResponseBody {
	s.Code = &v
	return s
}

func (s *ListChangeOrdersResponseBody) SetData(v *ListChangeOrdersResponseBodyData) *ListChangeOrdersResponseBody {
	s.Data = v
	return s
}

func (s *ListChangeOrdersResponseBody) SetErrorCode(v string) *ListChangeOrdersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListChangeOrdersResponseBody) SetMessage(v string) *ListChangeOrdersResponseBody {
	s.Message = &v
	return s
}

func (s *ListChangeOrdersResponseBody) SetRequestId(v string) *ListChangeOrdersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListChangeOrdersResponseBody) SetSuccess(v bool) *ListChangeOrdersResponseBody {
	s.Success = &v
	return s
}

func (s *ListChangeOrdersResponseBody) SetTraceId(v string) *ListChangeOrdersResponseBody {
	s.TraceId = &v
	return s
}

type ListChangeOrdersResponseBodyData struct {
	// The status of the change order. Valid values:
	//
	// 	- **0**: The change order is being prepared.
	//
	// 	- **1**: The change order is being executed.
	//
	// 	- **2**: The change order was executed.
	//
	// 	- **3**: The change order could not be executed.
	//
	// 	- **6**: The change order was terminated.
	//
	// 	- **8**: The execution process is pending. You must manually determine the release batch.
	//
	// 	- **9**: The execution process is pending. SAE will automatically determine the release batch.
	//
	// 	- **10**: The change order could not be executed due to a system exception.
	//
	// 	- **11**: The change order is pending approval.
	//
	// 	- **12**: The change order is approved and is pending execution.
	ChangeOrderList []*ListChangeOrdersResponseBodyDataChangeOrderList `json:"ChangeOrderList,omitempty" xml:"ChangeOrderList,omitempty" type:"Repeated"`
	// The total number of change orders.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The list of change orders.
	//
	// example:
	//
	// 1
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListChangeOrdersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListChangeOrdersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListChangeOrdersResponseBodyData) SetChangeOrderList(v []*ListChangeOrdersResponseBodyDataChangeOrderList) *ListChangeOrdersResponseBodyData {
	s.ChangeOrderList = v
	return s
}

func (s *ListChangeOrdersResponseBodyData) SetCurrentPage(v int32) *ListChangeOrdersResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListChangeOrdersResponseBodyData) SetPageSize(v int32) *ListChangeOrdersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListChangeOrdersResponseBodyData) SetTotalSize(v int32) *ListChangeOrdersResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListChangeOrdersResponseBodyDataChangeOrderList struct {
	// The number of entries returned on each page.
	//
	// example:
	//
	// 164341c-9708-4967-b3ec-24933767****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the user who created the change order.
	//
	// example:
	//
	// 1
	BatchCount *int32 `json:"BatchCount,omitempty" xml:"BatchCount,omitempty"`
	// The ID of the group.
	//
	// example:
	//
	// auto
	BatchType *string `json:"BatchType,omitempty" xml:"BatchType,omitempty"`
	// The mode in which the release batches are determined. Valid values:
	//
	// 	- **auto**: SAE automatically determines the release batches.
	//
	// 	- **manual**: You must manually determine the release batches.
	//
	// example:
	//
	// 7fa5c0-9ebb-4bb4-b383-1f885447****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	// The ID of the application.
	CoType *string `json:"CoType,omitempty" xml:"CoType,omitempty"`
	// The ID of the change order.
	//
	// example:
	//
	// CoCreateApp
	CoTypeCode *string `json:"CoTypeCode,omitempty" xml:"CoTypeCode,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// 2019-07-11 15:54:49
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The code of the change type. Valid values:
	//
	// 	- **CoBindSlb**: associates an SLB instance with the application.
	//
	// 	- **CoUnbindSlb**: disassociates the SLB instance from the application.
	//
	// 	- **CoCreateApp**: creates the application.
	//
	// 	- **CoDeleteApp**: deletes the application.
	//
	// 	- **CoDeploy**: deploys the application.
	//
	// 	- **CoRestartApplication**: restarts the application.
	//
	// 	- **CoRollback**: rolls back the application.
	//
	// 	- **CoScaleIn**: scales in the application.
	//
	// 	- **CoScaleOut**: scales out the application.
	//
	// 	- **CoStart**: starts the application.
	//
	// 	- **CoStop**: stops the application.
	//
	// 	- **CoRescaleApplicationVertically**: modifies the instance specifications.
	//
	// 	- **CoDeployHistroy**: rolls back the application to a historical version.
	//
	// 	- **CoBindNas**: associates a NAS file system with the application.
	//
	// 	- **CoUnbindNas**: disassociates the NAS file system from the application.
	//
	// 	- **CoBatchStartApplication**: starts multiple applications concurrently.
	//
	// 	- **CoBatchStopApplication**: stops multiple applications concurrently.
	//
	// 	- **CoRestartInstances**: restarts the instances.
	//
	// 	- **CoDeleteInstances**: deletes the instances.
	//
	// 	- **CoScaleInAppWithInstances**: reduces the number of the specified application instances.
	//
	// example:
	//
	// sae-beta-test
	CreateUserId *string `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty"`
	// The change type, which corresponds to the **CoTypeCode*	- parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the change order was created.
	//
	// example:
	//
	// 2019-07-11 20:12:58
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The description about the application.
	//
	// example:
	//
	// c9ecd2-cf6c-46c3-9f20-525de202****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of release batches.
	//
	// example:
	//
	// console
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The time when the change order was completed.
	//
	// example:
	//
	// 2
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The source of the change order.
	//
	// example:
	//
	// sae-beta-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListChangeOrdersResponseBodyDataChangeOrderList) String() string {
	return tea.Prettify(s)
}

func (s ListChangeOrdersResponseBodyDataChangeOrderList) GoString() string {
	return s.String()
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetAppId(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.AppId = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetBatchCount(v int32) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.BatchCount = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetBatchType(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.BatchType = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetChangeOrderId(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.ChangeOrderId = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetCoType(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.CoType = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetCoTypeCode(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.CoTypeCode = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetCreateTime(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.CreateTime = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetCreateUserId(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.CreateUserId = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetDescription(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.Description = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetFinishTime(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.FinishTime = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetGroupId(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.GroupId = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetSource(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.Source = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetStatus(v int32) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.Status = &v
	return s
}

func (s *ListChangeOrdersResponseBodyDataChangeOrderList) SetUserId(v string) *ListChangeOrdersResponseBodyDataChangeOrderList {
	s.UserId = &v
	return s
}

type ListChangeOrdersResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListChangeOrdersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListChangeOrdersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListChangeOrdersResponse) GoString() string {
	return s.String()
}

func (s *ListChangeOrdersResponse) SetHeaders(v map[string]*string) *ListChangeOrdersResponse {
	s.Headers = v
	return s
}

func (s *ListChangeOrdersResponse) SetStatusCode(v int32) *ListChangeOrdersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListChangeOrdersResponse) SetBody(v *ListChangeOrdersResponseBody) *ListChangeOrdersResponse {
	s.Body = v
	return s
}

type ListConsumedServicesRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// b2a8a925-477a-4ed7-b825-d5e22500****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ListConsumedServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesRequest) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesRequest) SetAppId(v string) *ListConsumedServicesRequest {
	s.AppId = &v
	return s
}

type ListConsumedServicesResponseBody struct {
	// Indicates whether the microservice list was obtained. Valid values:
	//
	// 	- **true**: The list was obtained.
	//
	// 	- **false**: The list failed to be obtained.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The type of the published service.
	Data []*ListConsumedServicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the call was successful.
	//
	// 	- **3xx**: indicates that the call was redirected.
	//
	// 	- **4xx**: indicates that the call failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned information. Valid values:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The details of the microservices.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListConsumedServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBody) SetCode(v string) *ListConsumedServicesResponseBody {
	s.Code = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetData(v []*ListConsumedServicesResponseBodyData) *ListConsumedServicesResponseBody {
	s.Data = v
	return s
}

func (s *ListConsumedServicesResponseBody) SetErrorCode(v string) *ListConsumedServicesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetMessage(v string) *ListConsumedServicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetRequestId(v string) *ListConsumedServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetSuccess(v bool) *ListConsumedServicesResponseBody {
	s.Success = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetTraceId(v string) *ListConsumedServicesResponseBody {
	s.TraceId = &v
	return s
}

type ListConsumedServicesResponseBodyData struct {
	// A reserved parameter.
	//
	// example:
	//
	// b2a8a925-477a-4ed7-b825-d5e22500****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The subscription address of the service.
	//
	// example:
	//
	// {}
	Group2Ip *string `json:"Group2Ip,omitempty" xml:"Group2Ip,omitempty"`
	// The version of the published service
	Groups []*string `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Repeated"`
	// The name of the published service.
	Ips []*string `json:"Ips,omitempty" xml:"Ips,omitempty" type:"Repeated"`
	// The returned error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// com.alibaba.nodejs.ItemService
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The service group that corresponds to the published service.
	//
	// example:
	//
	// RPC
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the application.
	//
	// example:
	//
	// 1.0.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListConsumedServicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBodyData) SetAppId(v string) *ListConsumedServicesResponseBodyData {
	s.AppId = &v
	return s
}

func (s *ListConsumedServicesResponseBodyData) SetGroup2Ip(v string) *ListConsumedServicesResponseBodyData {
	s.Group2Ip = &v
	return s
}

func (s *ListConsumedServicesResponseBodyData) SetGroups(v []*string) *ListConsumedServicesResponseBodyData {
	s.Groups = v
	return s
}

func (s *ListConsumedServicesResponseBodyData) SetIps(v []*string) *ListConsumedServicesResponseBodyData {
	s.Ips = v
	return s
}

func (s *ListConsumedServicesResponseBodyData) SetName(v string) *ListConsumedServicesResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListConsumedServicesResponseBodyData) SetType(v string) *ListConsumedServicesResponseBodyData {
	s.Type = &v
	return s
}

func (s *ListConsumedServicesResponseBodyData) SetVersion(v string) *ListConsumedServicesResponseBodyData {
	s.Version = &v
	return s
}

type ListConsumedServicesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListConsumedServicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListConsumedServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponse) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponse) SetHeaders(v map[string]*string) *ListConsumedServicesResponse {
	s.Headers = v
	return s
}

func (s *ListConsumedServicesResponse) SetStatusCode(v int32) *ListConsumedServicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListConsumedServicesResponse) SetBody(v *ListConsumedServicesResponseBody) *ListConsumedServicesResponse {
	s.Body = v
	return s
}

type ListGreyTagRouteRequest struct {
	// 7171a6ca-d1cd-4928-8642-7d5cfe69\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ListGreyTagRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteRequest) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteRequest) SetAppId(v string) *ListGreyTagRouteRequest {
	s.AppId = &v
	return s
}

type ListGreyTagRouteResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// - **2xx**: The call was successful.
	//
	// - **3xx**: The call was redirected.
	//
	// - **4xx**: The call failed.
	//
	// - **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the canary release rule.
	Data *ListGreyTagRouteResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned error code. Valid values:
	//
	// - If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// - If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned information. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 9D29CBD0-45D3-410B-9826-52F86F90****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information of the change order was queried. Valid values:
	//
	// - **true**: The information was queried.
	//
	// - **false**: The information failed to be queried.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListGreyTagRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponseBody) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponseBody) SetCode(v string) *ListGreyTagRouteResponseBody {
	s.Code = &v
	return s
}

func (s *ListGreyTagRouteResponseBody) SetData(v *ListGreyTagRouteResponseBodyData) *ListGreyTagRouteResponseBody {
	s.Data = v
	return s
}

func (s *ListGreyTagRouteResponseBody) SetErrorCode(v string) *ListGreyTagRouteResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListGreyTagRouteResponseBody) SetMessage(v string) *ListGreyTagRouteResponseBody {
	s.Message = &v
	return s
}

func (s *ListGreyTagRouteResponseBody) SetRequestId(v string) *ListGreyTagRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListGreyTagRouteResponseBody) SetSuccess(v bool) *ListGreyTagRouteResponseBody {
	s.Success = &v
	return s
}

func (s *ListGreyTagRouteResponseBody) SetTraceId(v string) *ListGreyTagRouteResponseBody {
	s.TraceId = &v
	return s
}

type ListGreyTagRouteResponseBodyData struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned on each page. Valid value: **1**.
	//
	// example:
	//
	// 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The returned result.
	Result []*ListGreyTagRouteResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// The total number of canary release rules. Valid value: **1**.
	//
	// example:
	//
	// 1
	TotalSize *int64 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListGreyTagRouteResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponseBodyData) SetCurrentPage(v int32) *ListGreyTagRouteResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyData) SetPageSize(v int32) *ListGreyTagRouteResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyData) SetResult(v []*ListGreyTagRouteResponseBodyDataResult) *ListGreyTagRouteResponseBodyData {
	s.Result = v
	return s
}

func (s *ListGreyTagRouteResponseBodyData) SetTotalSize(v int64) *ListGreyTagRouteResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListGreyTagRouteResponseBodyDataResult struct {
	AlbRules []*ListGreyTagRouteResponseBodyDataResultAlbRules `json:"AlbRules,omitempty" xml:"AlbRules,omitempty" type:"Repeated"`
	// The timestamp when the canary release rule was created. Unit: milliseconds.
	//
	// example:
	//
	// 1619007592013
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the canary release rule.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The canary release rule of the Dubbo service.
	DubboRules []*ListGreyTagRouteResponseBodyDataResultDubboRules `json:"DubboRules,omitempty" xml:"DubboRules,omitempty" type:"Repeated"`
	// The ID of the canary release rule.
	//
	// example:
	//
	// 1
	GreyTagRouteId *int64 `json:"GreyTagRouteId,omitempty" xml:"GreyTagRouteId,omitempty"`
	// The name of the canary release rule.
	//
	// example:
	//
	// rule-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The canary release rule of the Spring Cloud application.
	ScRules []*ListGreyTagRouteResponseBodyDataResultScRules `json:"ScRules,omitempty" xml:"ScRules,omitempty" type:"Repeated"`
	// The timestamp when the canary release rule was updated. Unit: milliseconds.
	//
	// example:
	//
	// 1609434061000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListGreyTagRouteResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponseBodyDataResult) SetAlbRules(v []*ListGreyTagRouteResponseBodyDataResultAlbRules) *ListGreyTagRouteResponseBodyDataResult {
	s.AlbRules = v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResult) SetCreateTime(v int64) *ListGreyTagRouteResponseBodyDataResult {
	s.CreateTime = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResult) SetDescription(v string) *ListGreyTagRouteResponseBodyDataResult {
	s.Description = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResult) SetDubboRules(v []*ListGreyTagRouteResponseBodyDataResultDubboRules) *ListGreyTagRouteResponseBodyDataResult {
	s.DubboRules = v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResult) SetGreyTagRouteId(v int64) *ListGreyTagRouteResponseBodyDataResult {
	s.GreyTagRouteId = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResult) SetName(v string) *ListGreyTagRouteResponseBodyDataResult {
	s.Name = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResult) SetScRules(v []*ListGreyTagRouteResponseBodyDataResultScRules) *ListGreyTagRouteResponseBodyDataResult {
	s.ScRules = v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResult) SetUpdateTime(v int64) *ListGreyTagRouteResponseBodyDataResult {
	s.UpdateTime = &v
	return s
}

type ListGreyTagRouteResponseBodyDataResultAlbRules struct {
	// example:
	//
	// AND
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	// example:
	//
	// 23
	IngressId   *string                                                `json:"ingressId,omitempty" xml:"ingressId,omitempty"`
	Items       []*ListGreyTagRouteResponseBodyDataResultAlbRulesItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	ServiceName *string                                                `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
}

func (s ListGreyTagRouteResponseBodyDataResultAlbRules) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponseBodyDataResultAlbRules) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRules) SetCondition(v string) *ListGreyTagRouteResponseBodyDataResultAlbRules {
	s.Condition = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRules) SetIngressId(v string) *ListGreyTagRouteResponseBodyDataResultAlbRules {
	s.IngressId = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRules) SetItems(v []*ListGreyTagRouteResponseBodyDataResultAlbRulesItems) *ListGreyTagRouteResponseBodyDataResultAlbRules {
	s.Items = v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRules) SetServiceName(v string) *ListGreyTagRouteResponseBodyDataResultAlbRules {
	s.ServiceName = &v
	return s
}

type ListGreyTagRouteResponseBodyDataResultAlbRulesItems struct {
	// example:
	//
	// ==
	Cond *string `json:"cond,omitempty" xml:"cond,omitempty"`
	// example:
	//
	// N/A
	Expr *string `json:"expr,omitempty" xml:"expr,omitempty"`
	// example:
	//
	// N/A
	Index *int32 `json:"index,omitempty" xml:"index,omitempty"`
	// example:
	//
	// example
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// rawvalue
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// example:
	//
	// cookie
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// test
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ListGreyTagRouteResponseBodyDataResultAlbRulesItems) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponseBodyDataResultAlbRulesItems) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRulesItems) SetCond(v string) *ListGreyTagRouteResponseBodyDataResultAlbRulesItems {
	s.Cond = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRulesItems) SetExpr(v string) *ListGreyTagRouteResponseBodyDataResultAlbRulesItems {
	s.Expr = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRulesItems) SetIndex(v int32) *ListGreyTagRouteResponseBodyDataResultAlbRulesItems {
	s.Index = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRulesItems) SetName(v string) *ListGreyTagRouteResponseBodyDataResultAlbRulesItems {
	s.Name = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRulesItems) SetOperator(v string) *ListGreyTagRouteResponseBodyDataResultAlbRulesItems {
	s.Operator = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRulesItems) SetType(v string) *ListGreyTagRouteResponseBodyDataResultAlbRulesItems {
	s.Type = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultAlbRulesItems) SetValue(v string) *ListGreyTagRouteResponseBodyDataResultAlbRulesItems {
	s.Value = &v
	return s
}

type ListGreyTagRouteResponseBodyDataResultDubboRules struct {
	// The relationship between the conditions in the canary release rule. Valid values:
	//
	// - **AND**: The conditions are in the logical AND relation. All conditions must be met at the same time.
	//
	// - **OR**: The conditions are in the logical OR relation. At least one of the conditions must be met.
	//
	// example:
	//
	// OR
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	// The group of the Dubbo service that corresponds to the canary release rule.
	//
	// example:
	//
	// DUBBO
	Group *string `json:"group,omitempty" xml:"group,omitempty"`
	// The conditions.
	Items []*ListGreyTagRouteResponseBodyDataResultDubboRulesItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	// The method name of the Dubbo service.
	//
	// example:
	//
	// echo
	MethodName *string `json:"methodName,omitempty" xml:"methodName,omitempty"`
	// The name of the Dubbo service.
	//
	// example:
	//
	// com.alibaba.edas.boot.EchoService
	ServiceName *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	// The version of the Dubbo service.
	//
	// example:
	//
	// 1.0.0
	Version *string `json:"version,omitempty" xml:"version,omitempty"`
}

func (s ListGreyTagRouteResponseBodyDataResultDubboRules) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponseBodyDataResultDubboRules) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRules) SetCondition(v string) *ListGreyTagRouteResponseBodyDataResultDubboRules {
	s.Condition = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRules) SetGroup(v string) *ListGreyTagRouteResponseBodyDataResultDubboRules {
	s.Group = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRules) SetItems(v []*ListGreyTagRouteResponseBodyDataResultDubboRulesItems) *ListGreyTagRouteResponseBodyDataResultDubboRules {
	s.Items = v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRules) SetMethodName(v string) *ListGreyTagRouteResponseBodyDataResultDubboRules {
	s.MethodName = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRules) SetServiceName(v string) *ListGreyTagRouteResponseBodyDataResultDubboRules {
	s.ServiceName = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRules) SetVersion(v string) *ListGreyTagRouteResponseBodyDataResultDubboRules {
	s.Version = &v
	return s
}

type ListGreyTagRouteResponseBodyDataResultDubboRulesItems struct {
	// The comparison operator. Valid values: **>**, **<**, **>=**, **<=**, **==**, and **! =**.
	//
	// example:
	//
	// ==
	Cond *string `json:"cond,omitempty" xml:"cond,omitempty"`
	// The expression that is used to obtain the value of the parameter. The syntax of the expression must follow the standard of the SpEL. Valid values:
	//
	// - **Empty**: obtains the value of the parameter.
	//
	// - **.name**: obtains the name property of the parameter. This expression works the same way as args0.getName().
	//
	// - **.isEnabled()**: obtains the enabled property of the parameter. This expression works the same way as args0.isEnabled().
	//
	// - **[0]**: indicates that the value of the parameter is an array and obtains the first value of the array. This expression works the same way as args0[0]. This expression does not start with a period (.).
	//
	// - **.get(0)**: indicates that the value of the parameter is a list and obtains the first value of the list. This expression works the same way as args0.get(0).
	//
	// - **.get("key")**: indicates that the value of the parameter is a map and obtains the value of the key in the map. This expression works the same way as args0.get("key").  >  For more information about the expressions that are used to obtain parameter values, see  [Spring Expression Language (SpEL)](https://docs.spring.io/spring-integration/docs/current/reference/html/spel.html).
	//
	// example:
	//
	// .name
	Expr *string `json:"expr,omitempty" xml:"expr,omitempty"`
	// The index of the parameter. The value 0 indicates the first parameter.
	//
	// example:
	//
	// 0
	Index *int32 `json:"index,omitempty" xml:"index,omitempty"`
	// This parameter is not returned for Dubbo services.
	//
	// example:
	//
	// N/A
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The operator. Valid values:
	//
	// - **rawvalue**: direct comparison.
	//
	// - **list**: whitelist.
	//
	// - **mod**: mods 100.
	//
	// - **deterministic_proportional_steaming_division**: percentage.
	//
	// example:
	//
	// rawvalue
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// This parameter is not returned for Dubbo services.
	//
	// example:
	//
	// N/A
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// The value of the parameter. This value is compared with the value that is obtained based on the **expr*	- and **index*	- parameters.
	//
	// example:
	//
	// test
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ListGreyTagRouteResponseBodyDataResultDubboRulesItems) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponseBodyDataResultDubboRulesItems) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRulesItems) SetCond(v string) *ListGreyTagRouteResponseBodyDataResultDubboRulesItems {
	s.Cond = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRulesItems) SetExpr(v string) *ListGreyTagRouteResponseBodyDataResultDubboRulesItems {
	s.Expr = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRulesItems) SetIndex(v int32) *ListGreyTagRouteResponseBodyDataResultDubboRulesItems {
	s.Index = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRulesItems) SetName(v string) *ListGreyTagRouteResponseBodyDataResultDubboRulesItems {
	s.Name = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRulesItems) SetOperator(v string) *ListGreyTagRouteResponseBodyDataResultDubboRulesItems {
	s.Operator = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRulesItems) SetType(v string) *ListGreyTagRouteResponseBodyDataResultDubboRulesItems {
	s.Type = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultDubboRulesItems) SetValue(v string) *ListGreyTagRouteResponseBodyDataResultDubboRulesItems {
	s.Value = &v
	return s
}

type ListGreyTagRouteResponseBodyDataResultScRules struct {
	// The relationship between the conditions in the canary release rule. Valid values:
	//
	// 	- **AND**: The conditions are in the logical AND relation. All conditions must be met at the same time.
	//
	// 	- **OR**: The conditions are in the logical OR relation. At least one of the conditions must be met.
	//
	// example:
	//
	// OR
	Condition *string `json:"condition,omitempty" xml:"condition,omitempty"`
	// The conditions.
	Items []*ListGreyTagRouteResponseBodyDataResultScRulesItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	// The path of the canary release rule of the Spring Cloud application.
	//
	// example:
	//
	// /path
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
}

func (s ListGreyTagRouteResponseBodyDataResultScRules) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponseBodyDataResultScRules) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponseBodyDataResultScRules) SetCondition(v string) *ListGreyTagRouteResponseBodyDataResultScRules {
	s.Condition = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultScRules) SetItems(v []*ListGreyTagRouteResponseBodyDataResultScRulesItems) *ListGreyTagRouteResponseBodyDataResultScRules {
	s.Items = v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultScRules) SetPath(v string) *ListGreyTagRouteResponseBodyDataResultScRules {
	s.Path = &v
	return s
}

type ListGreyTagRouteResponseBodyDataResultScRulesItems struct {
	// The comparison operator. Valid values: **>**, **<**, **>=**, **<=**, **==**, and **! =**.
	//
	// example:
	//
	// ==
	Cond *string `json:"cond,omitempty" xml:"cond,omitempty"`
	// This parameter is not returned for Spring Cloud applications.
	//
	// example:
	//
	// N/A
	Expr *string `json:"expr,omitempty" xml:"expr,omitempty"`
	// This parameter is not returned for Spring Cloud applications.
	//
	// example:
	//
	// N/A
	Index *int32 `json:"index,omitempty" xml:"index,omitempty"`
	// The name of the parameter.
	//
	// example:
	//
	// test
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The operator. Valid values:
	//
	// 	- **rawvalue**: direct comparison.
	//
	// 	- **list**: whitelist.
	//
	// 	- **mod**: mods 100.
	//
	// 	- **deterministic_proportional_steaming_division**: percentage.
	//
	// example:
	//
	// rawvalue
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// The type of the comparison. Valid values:
	//
	// 	- **param**: parameter
	//
	// 	- **cookie**: cookie
	//
	// 	- **header**: header
	//
	// example:
	//
	// cookie
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// The value of the parameter. This value is compared with the value that is obtained based on the **type*	- and **name*	- parameters.
	//
	// example:
	//
	// test
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ListGreyTagRouteResponseBodyDataResultScRulesItems) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponseBodyDataResultScRulesItems) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponseBodyDataResultScRulesItems) SetCond(v string) *ListGreyTagRouteResponseBodyDataResultScRulesItems {
	s.Cond = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultScRulesItems) SetExpr(v string) *ListGreyTagRouteResponseBodyDataResultScRulesItems {
	s.Expr = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultScRulesItems) SetIndex(v int32) *ListGreyTagRouteResponseBodyDataResultScRulesItems {
	s.Index = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultScRulesItems) SetName(v string) *ListGreyTagRouteResponseBodyDataResultScRulesItems {
	s.Name = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultScRulesItems) SetOperator(v string) *ListGreyTagRouteResponseBodyDataResultScRulesItems {
	s.Operator = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultScRulesItems) SetType(v string) *ListGreyTagRouteResponseBodyDataResultScRulesItems {
	s.Type = &v
	return s
}

func (s *ListGreyTagRouteResponseBodyDataResultScRulesItems) SetValue(v string) *ListGreyTagRouteResponseBodyDataResultScRulesItems {
	s.Value = &v
	return s
}

type ListGreyTagRouteResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListGreyTagRouteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListGreyTagRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s ListGreyTagRouteResponse) GoString() string {
	return s.String()
}

func (s *ListGreyTagRouteResponse) SetHeaders(v map[string]*string) *ListGreyTagRouteResponse {
	s.Headers = v
	return s
}

func (s *ListGreyTagRouteResponse) SetStatusCode(v int32) *ListGreyTagRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *ListGreyTagRouteResponse) SetBody(v *ListGreyTagRouteResponseBody) *ListGreyTagRouteResponse {
	s.Body = v
	return s
}

type ListIngressesRequest struct {
	// The list of routing rules.
	//
	// example:
	//
	// bbf3a590-6d13-46fe-8ca9-c947a20b****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The returned data.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s ListIngressesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIngressesRequest) GoString() string {
	return s.String()
}

func (s *ListIngressesRequest) SetAppId(v string) *ListIngressesRequest {
	s.AppId = &v
	return s
}

func (s *ListIngressesRequest) SetNamespaceId(v string) *ListIngressesRequest {
	s.NamespaceId = &v
	return s
}

type ListIngressesResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The port specified for the SLB listener.
	Data      *ListIngressesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the SLB instance.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The name of the routing rule.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListIngressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIngressesResponseBody) GoString() string {
	return s.String()
}

func (s *ListIngressesResponseBody) SetCode(v string) *ListIngressesResponseBody {
	s.Code = &v
	return s
}

func (s *ListIngressesResponseBody) SetData(v *ListIngressesResponseBodyData) *ListIngressesResponseBody {
	s.Data = v
	return s
}

func (s *ListIngressesResponseBody) SetErrorCode(v string) *ListIngressesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListIngressesResponseBody) SetMessage(v string) *ListIngressesResponseBody {
	s.Message = &v
	return s
}

func (s *ListIngressesResponseBody) SetRequestId(v string) *ListIngressesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListIngressesResponseBody) SetSuccess(v bool) *ListIngressesResponseBody {
	s.Success = &v
	return s
}

func (s *ListIngressesResponseBody) SetTraceId(v string) *ListIngressesResponseBody {
	s.TraceId = &v
	return s
}

type ListIngressesResponseBodyData struct {
	// The type of the SLB instance based on the IP address. Valid values:
	//
	// 	- **internet**: the Internet-facing SLB instance.
	//
	// 	- **intranet**: the internal-facing SLB instance.
	IngressList []*ListIngressesResponseBodyDataIngressList `json:"IngressList,omitempty" xml:"IngressList,omitempty" type:"Repeated"`
}

func (s ListIngressesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListIngressesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListIngressesResponseBodyData) SetIngressList(v []*ListIngressesResponseBodyDataIngressList) *ListIngressesResponseBodyData {
	s.IngressList = v
	return s
}

type ListIngressesResponseBodyDataIngressList struct {
	// The error code.
	//
	// - The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// - The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// 13624*****73809_16f8e549a20_1175189789_12****3210
	CertId *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
	// example:
	//
	// 87***35-cn-hangzhou,812***3-cn-hangzhou
	CertIds *string `json:"CertIds,omitempty" xml:"CertIds,omitempty"`
	// The ID of the routing rule.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether the list of routing rules was obtained. Valid values:
	//
	// 	- **true**: indicates that the list was obtained.
	//
	// 	- **false**: indicates that the list could not be obtained.
	//
	// example:
	//
	// 18
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The type of the SLB instance based on the processing capabilities. Valid values:
	//
	// 	- **clb**: the Classic Load Balancer (CLB) instance.
	//
	// 	- **alb**: the Application Load Balancer (ALB) instance.
	//
	// example:
	//
	// 80
	ListenerPort *string `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// example:
	//
	// HTTP
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	// example:
	//
	// clb
	LoadBalanceType    *string `json:"LoadBalanceType,omitempty" xml:"LoadBalanceType,omitempty"`
	MseGatewayId       *string `json:"MseGatewayId,omitempty" xml:"MseGatewayId,omitempty"`
	MseGatewayPort     *string `json:"MseGatewayPort,omitempty" xml:"MseGatewayPort,omitempty"`
	MseGatewayProtocol *string `json:"MseGatewayProtocol,omitempty" xml:"MseGatewayProtocol,omitempty"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// lb-uf6jt0nu4z6ior943****-80-f5****
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The name of the routing rule.
	//
	// example:
	//
	// cn-shanghai
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The ID of the certificate.
	//
	// example:
	//
	// lb-uf62****6d13tq2u5
	SlbId *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	// The protocol used to forward requests. Valid values:
	//
	// 	- **HTTP**: used when the application needs to identify the transmitted data.
	//
	// 	- **HTTPS**: used when the application requires encrypted data transmission.
	//
	// example:
	//
	// internet
	SlbType *string `json:"SlbType,omitempty" xml:"SlbType,omitempty"`
}

func (s ListIngressesResponseBodyDataIngressList) String() string {
	return tea.Prettify(s)
}

func (s ListIngressesResponseBodyDataIngressList) GoString() string {
	return s.String()
}

func (s *ListIngressesResponseBodyDataIngressList) SetCertId(v string) *ListIngressesResponseBodyDataIngressList {
	s.CertId = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetCertIds(v string) *ListIngressesResponseBodyDataIngressList {
	s.CertIds = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetDescription(v string) *ListIngressesResponseBodyDataIngressList {
	s.Description = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetId(v int64) *ListIngressesResponseBodyDataIngressList {
	s.Id = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetListenerPort(v string) *ListIngressesResponseBodyDataIngressList {
	s.ListenerPort = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetListenerProtocol(v string) *ListIngressesResponseBodyDataIngressList {
	s.ListenerProtocol = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetLoadBalanceType(v string) *ListIngressesResponseBodyDataIngressList {
	s.LoadBalanceType = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetMseGatewayId(v string) *ListIngressesResponseBodyDataIngressList {
	s.MseGatewayId = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetMseGatewayPort(v string) *ListIngressesResponseBodyDataIngressList {
	s.MseGatewayPort = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetMseGatewayProtocol(v string) *ListIngressesResponseBodyDataIngressList {
	s.MseGatewayProtocol = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetName(v string) *ListIngressesResponseBodyDataIngressList {
	s.Name = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetNamespaceId(v string) *ListIngressesResponseBodyDataIngressList {
	s.NamespaceId = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetSlbId(v string) *ListIngressesResponseBodyDataIngressList {
	s.SlbId = &v
	return s
}

func (s *ListIngressesResponseBodyDataIngressList) SetSlbType(v string) *ListIngressesResponseBodyDataIngressList {
	s.SlbType = &v
	return s
}

type ListIngressesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIngressesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIngressesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIngressesResponse) GoString() string {
	return s.String()
}

func (s *ListIngressesResponse) SetHeaders(v map[string]*string) *ListIngressesResponse {
	s.Headers = v
	return s
}

func (s *ListIngressesResponse) SetStatusCode(v int32) *ListIngressesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIngressesResponse) SetBody(v *ListIngressesResponseBody) *ListIngressesResponse {
	s.Body = v
	return s
}

type ListJobsRequest struct {
	// The name of the job template.
	//
	// example:
	//
	// demo-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The number of the page to return. The parameter value is a positive integer that is greater than or equal to 1.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The dimension by which applications are filtered. Valid values:
	//
	// 	- **appName**: Applications are filtered by job template name.
	//
	// 	- **appIds**: Applications are filtered by job template ID.
	//
	// example:
	//
	// appName
	FieldType *string `json:"FieldType,omitempty" xml:"FieldType,omitempty"`
	// Enter the name and ID of the job template.
	//
	// example:
	//
	// demo-app
	FieldValue *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-beijing:demo
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// Specifies how applications are sorted. Valid values:
	//
	// 	- **running**: The applications are sorted based on the number of running instances.
	//
	// 	- **instances**: The applications are sorted based on the number of destination instances.
	//
	// example:
	//
	// running
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The number of entries to return on each page. Valid value: 0 to 200.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Specifies whether to sort the field names that are passed by **OrderBy*	- in ascending order. Valid values:
	//
	// 	- **true**: in ascending order
	//
	// 	- **false**: in descending order
	//
	// example:
	//
	// true
	Reverse *bool `json:"Reverse,omitempty" xml:"Reverse,omitempty"`
	// The tags that are displayed in a JSON string. Valid values:
	//
	// 	- **key**: the tag key
	//
	// 	- **value**: the tag value
	//
	// example:
	//
	// [{"key":"key","value":"value"}]
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// Set the value to `job`.
	//
	// example:
	//
	// job
	Workload *string `json:"Workload,omitempty" xml:"Workload,omitempty"`
}

func (s ListJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobsRequest) GoString() string {
	return s.String()
}

func (s *ListJobsRequest) SetAppName(v string) *ListJobsRequest {
	s.AppName = &v
	return s
}

func (s *ListJobsRequest) SetCurrentPage(v int32) *ListJobsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListJobsRequest) SetFieldType(v string) *ListJobsRequest {
	s.FieldType = &v
	return s
}

func (s *ListJobsRequest) SetFieldValue(v string) *ListJobsRequest {
	s.FieldValue = &v
	return s
}

func (s *ListJobsRequest) SetNamespaceId(v string) *ListJobsRequest {
	s.NamespaceId = &v
	return s
}

func (s *ListJobsRequest) SetOrderBy(v string) *ListJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListJobsRequest) SetPageSize(v int32) *ListJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListJobsRequest) SetReverse(v bool) *ListJobsRequest {
	s.Reverse = &v
	return s
}

func (s *ListJobsRequest) SetTags(v string) *ListJobsRequest {
	s.Tags = &v
	return s
}

func (s *ListJobsRequest) SetWorkload(v string) *ListJobsRequest {
	s.Workload = &v
	return s
}

type ListJobsResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The job templates.
	Data *ListJobsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Take note of the following rules:
	//
	// 	- If the call is successful, **ErrorCode*	- is not returned.
	//
	// 	- If the call fails, **ErrorCode*	- is returned. For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B4D805CA-926D-41B1-8E63-7AD0C1ED****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the applications were obtained. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of job templates.
	//
	// example:
	//
	// 2
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBody) SetCode(v string) *ListJobsResponseBody {
	s.Code = &v
	return s
}

func (s *ListJobsResponseBody) SetCurrentPage(v int32) *ListJobsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *ListJobsResponseBody) SetData(v *ListJobsResponseBodyData) *ListJobsResponseBody {
	s.Data = v
	return s
}

func (s *ListJobsResponseBody) SetErrorCode(v string) *ListJobsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListJobsResponseBody) SetMessage(v string) *ListJobsResponseBody {
	s.Message = &v
	return s
}

func (s *ListJobsResponseBody) SetPageSize(v int32) *ListJobsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListJobsResponseBody) SetRequestId(v string) *ListJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobsResponseBody) SetSuccess(v bool) *ListJobsResponseBody {
	s.Success = &v
	return s
}

func (s *ListJobsResponseBody) SetTotalSize(v int32) *ListJobsResponseBody {
	s.TotalSize = &v
	return s
}

type ListJobsResponseBodyData struct {
	// The job templates.
	Applications []*ListJobsResponseBodyDataApplications `json:"Applications,omitempty" xml:"Applications,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of job templates.
	//
	// example:
	//
	// 2
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListJobsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyData) SetApplications(v []*ListJobsResponseBodyDataApplications) *ListJobsResponseBodyData {
	s.Applications = v
	return s
}

func (s *ListJobsResponseBodyData) SetCurrentPage(v int32) *ListJobsResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListJobsResponseBodyData) SetPageSize(v int32) *ListJobsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListJobsResponseBodyData) SetTotalSize(v int32) *ListJobsResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListJobsResponseBodyDataApplications struct {
	// The number of running instances.
	//
	// example:
	//
	// 0
	Active *int64 `json:"Active,omitempty" xml:"Active,omitempty"`
	// The description of the job template.
	//
	// example:
	//
	// description
	AppDescription *string `json:"AppDescription,omitempty" xml:"AppDescription,omitempty"`
	// The ID of the job template.
	//
	// example:
	//
	// f7730764-d88f-4b9a-8d8e-cd8efbfe****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the job template.
	//
	// example:
	//
	// demo-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The time when the job was last completed.
	//
	// example:
	//
	// 1657522839
	CompletionTime *int64 `json:"CompletionTime,omitempty" xml:"CompletionTime,omitempty"`
	Cpu            *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The number of instances that failed to run.
	//
	// example:
	//
	// 0
	Failed *int64 `json:"Failed,omitempty" xml:"Failed,omitempty"`
	// Indicates whether the latest change order was executed. Valid values:
	//
	// 	- **0**: The latest change order failed to be executed.
	//
	// 	- **1**: The latest change order was executed.
	//
	// example:
	//
	// 1
	LastChangeorderState *string `json:"LastChangeorderState,omitempty" xml:"LastChangeorderState,omitempty"`
	// The running status of the latest job. Valid values:
	//
	// 	- **0**: The job is not executed.
	//
	// 	- **1**: The job was executed.
	//
	// 	- **2**: The job failed to be executed.
	//
	// 	- **3**: The job is being executed.
	//
	// example:
	//
	// 0
	LastJobState *string `json:"LastJobState,omitempty" xml:"LastJobState,omitempty"`
	// The time when the job was last started.
	//
	// example:
	//
	// 1657522800
	LastStartTime *int64  `json:"LastStartTime,omitempty" xml:"LastStartTime,omitempty"`
	Mem           *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-beijing:demo
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of instances that were successfully run.
	//
	// example:
	//
	// 3
	Succeeded *int64 `json:"Succeeded,omitempty" xml:"Succeeded,omitempty"`
	// Indicates whether the job template is suspended.
	//
	// example:
	//
	// false
	Suspend *bool `json:"Suspend,omitempty" xml:"Suspend,omitempty"`
	// The tag of the job template.
	Tags          []*ListJobsResponseBodyDataApplicationsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	TriggerConfig *string                                     `json:"TriggerConfig,omitempty" xml:"TriggerConfig,omitempty"`
}

func (s ListJobsResponseBodyDataApplications) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyDataApplications) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyDataApplications) SetActive(v int64) *ListJobsResponseBodyDataApplications {
	s.Active = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetAppDescription(v string) *ListJobsResponseBodyDataApplications {
	s.AppDescription = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetAppId(v string) *ListJobsResponseBodyDataApplications {
	s.AppId = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetAppName(v string) *ListJobsResponseBodyDataApplications {
	s.AppName = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetCompletionTime(v int64) *ListJobsResponseBodyDataApplications {
	s.CompletionTime = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetCpu(v int32) *ListJobsResponseBodyDataApplications {
	s.Cpu = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetFailed(v int64) *ListJobsResponseBodyDataApplications {
	s.Failed = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetLastChangeorderState(v string) *ListJobsResponseBodyDataApplications {
	s.LastChangeorderState = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetLastJobState(v string) *ListJobsResponseBodyDataApplications {
	s.LastJobState = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetLastStartTime(v int64) *ListJobsResponseBodyDataApplications {
	s.LastStartTime = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetMem(v int32) *ListJobsResponseBodyDataApplications {
	s.Mem = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetMessage(v string) *ListJobsResponseBodyDataApplications {
	s.Message = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetNamespaceId(v string) *ListJobsResponseBodyDataApplications {
	s.NamespaceId = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetRegionId(v string) *ListJobsResponseBodyDataApplications {
	s.RegionId = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetSucceeded(v int64) *ListJobsResponseBodyDataApplications {
	s.Succeeded = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetSuspend(v bool) *ListJobsResponseBodyDataApplications {
	s.Suspend = &v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetTags(v []*ListJobsResponseBodyDataApplicationsTags) *ListJobsResponseBodyDataApplications {
	s.Tags = v
	return s
}

func (s *ListJobsResponseBodyDataApplications) SetTriggerConfig(v string) *ListJobsResponseBodyDataApplications {
	s.TriggerConfig = &v
	return s
}

type ListJobsResponseBodyDataApplicationsTags struct {
	// The tag key.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListJobsResponseBodyDataApplicationsTags) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyDataApplicationsTags) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyDataApplicationsTags) SetKey(v string) *ListJobsResponseBodyDataApplicationsTags {
	s.Key = &v
	return s
}

func (s *ListJobsResponseBodyDataApplicationsTags) SetValue(v string) *ListJobsResponseBodyDataApplicationsTags {
	s.Value = &v
	return s
}

type ListJobsResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponse) GoString() string {
	return s.String()
}

func (s *ListJobsResponse) SetHeaders(v map[string]*string) *ListJobsResponse {
	s.Headers = v
	return s
}

func (s *ListJobsResponse) SetStatusCode(v int32) *ListJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListJobsResponse) SetBody(v *ListJobsResponseBody) *ListJobsResponse {
	s.Body = v
	return s
}

type ListLogConfigsRequest struct {
	// 10
	//
	// This parameter is required.
	//
	// example:
	//
	// 56f77b65-788d-442a-9885-7f20d91f****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// 1
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListLogConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLogConfigsRequest) GoString() string {
	return s.String()
}

func (s *ListLogConfigsRequest) SetAppId(v string) *ListLogConfigsRequest {
	s.AppId = &v
	return s
}

func (s *ListLogConfigsRequest) SetCurrentPage(v int32) *ListLogConfigsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListLogConfigsRequest) SetPageSize(v int32) *ListLogConfigsRequest {
	s.PageSize = &v
	return s
}

type ListLogConfigsResponseBody struct {
	// Indicates whether the logging configurations of an application were obtained. Valid values:
	//
	// 	- **true**: indicates that the configurations were obtained.
	//
	// 	- **false**: indicates that the configurations could not be obtained.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of logging configurations.
	Data *ListLogConfigsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The logging configurations.
	//
	// example:
	//
	// ac1d5e2c15671581252413581d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListLogConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLogConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLogConfigsResponseBody) SetCode(v string) *ListLogConfigsResponseBody {
	s.Code = &v
	return s
}

func (s *ListLogConfigsResponseBody) SetData(v *ListLogConfigsResponseBodyData) *ListLogConfigsResponseBody {
	s.Data = v
	return s
}

func (s *ListLogConfigsResponseBody) SetErrorCode(v string) *ListLogConfigsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListLogConfigsResponseBody) SetMessage(v string) *ListLogConfigsResponseBody {
	s.Message = &v
	return s
}

func (s *ListLogConfigsResponseBody) SetRequestId(v string) *ListLogConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLogConfigsResponseBody) SetSuccess(v bool) *ListLogConfigsResponseBody {
	s.Success = &v
	return s
}

func (s *ListLogConfigsResponseBody) SetTraceId(v string) *ListLogConfigsResponseBody {
	s.TraceId = &v
	return s
}

type ListLogConfigsResponseBodyData struct {
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The name of the Log Service configuration.
	LogConfigs []*ListLogConfigsResponseBodyDataLogConfigs `json:"LogConfigs,omitempty" xml:"LogConfigs,omitempty" type:"Repeated"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 1
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListLogConfigsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListLogConfigsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListLogConfigsResponseBodyData) SetCurrentPage(v int32) *ListLogConfigsResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListLogConfigsResponseBodyData) SetLogConfigs(v []*ListLogConfigsResponseBodyDataLogConfigs) *ListLogConfigsResponseBodyData {
	s.LogConfigs = v
	return s
}

func (s *ListLogConfigsResponseBodyData) SetPageSize(v int32) *ListLogConfigsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListLogConfigsResponseBodyData) SetTotalSize(v int32) *ListLogConfigsResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListLogConfigsResponseBodyDataLogConfigs struct {
	// The path of logs.
	//
	// example:
	//
	// sae-1f240907a6faf58c653f09e81b7e****
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	// The storage type of logs.
	//
	// example:
	//
	// 2019-08-29 17:18:00
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The name of the Logstore in Log Service.
	//
	// example:
	//
	// /root/logs/hsf/hsf.log
	LogDir *string `json:"LogDir,omitempty" xml:"LogDir,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// file_log
	LogType *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	// The number of the returned page.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The time when the configuration was created.
	//
	// example:
	//
	// sae-1f240907a6faf58c653f09e81b7e****
	SlsLogStore *string `json:"SlsLogStore,omitempty" xml:"SlsLogStore,omitempty"`
	// The type of the log. Set this value to **file_log**.
	//
	// example:
	//
	// sae-56f77b65-788d-442a-9885-7f20d91f****
	SlsProject *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
	// The ID of the Log Service project.
	//
	// example:
	//
	// sls
	StoreType *string `json:"StoreType,omitempty" xml:"StoreType,omitempty"`
}

func (s ListLogConfigsResponseBodyDataLogConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListLogConfigsResponseBodyDataLogConfigs) GoString() string {
	return s.String()
}

func (s *ListLogConfigsResponseBodyDataLogConfigs) SetConfigName(v string) *ListLogConfigsResponseBodyDataLogConfigs {
	s.ConfigName = &v
	return s
}

func (s *ListLogConfigsResponseBodyDataLogConfigs) SetCreateTime(v string) *ListLogConfigsResponseBodyDataLogConfigs {
	s.CreateTime = &v
	return s
}

func (s *ListLogConfigsResponseBodyDataLogConfigs) SetLogDir(v string) *ListLogConfigsResponseBodyDataLogConfigs {
	s.LogDir = &v
	return s
}

func (s *ListLogConfigsResponseBodyDataLogConfigs) SetLogType(v string) *ListLogConfigsResponseBodyDataLogConfigs {
	s.LogType = &v
	return s
}

func (s *ListLogConfigsResponseBodyDataLogConfigs) SetRegionId(v string) *ListLogConfigsResponseBodyDataLogConfigs {
	s.RegionId = &v
	return s
}

func (s *ListLogConfigsResponseBodyDataLogConfigs) SetSlsLogStore(v string) *ListLogConfigsResponseBodyDataLogConfigs {
	s.SlsLogStore = &v
	return s
}

func (s *ListLogConfigsResponseBodyDataLogConfigs) SetSlsProject(v string) *ListLogConfigsResponseBodyDataLogConfigs {
	s.SlsProject = &v
	return s
}

func (s *ListLogConfigsResponseBodyDataLogConfigs) SetStoreType(v string) *ListLogConfigsResponseBodyDataLogConfigs {
	s.StoreType = &v
	return s
}

type ListLogConfigsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLogConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLogConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLogConfigsResponse) GoString() string {
	return s.String()
}

func (s *ListLogConfigsResponse) SetHeaders(v map[string]*string) *ListLogConfigsResponse {
	s.Headers = v
	return s
}

func (s *ListLogConfigsResponse) SetStatusCode(v int32) *ListLogConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLogConfigsResponse) SetBody(v *ListLogConfigsResponseBody) *ListLogConfigsResponse {
	s.Body = v
	return s
}

type ListNamespaceChangeOrdersRequest struct {
	// 2
	//
	// example:
	//
	// 2
	CoStatus *string `json:"CoStatus,omitempty" xml:"CoStatus,omitempty"`
	// CoBatchStartApplication
	//
	// example:
	//
	// CoBatchStartApplication
	CoType *string `json:"CoType,omitempty" xml:"CoType,omitempty"`
	// 1
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// test
	//
	// example:
	//
	// test
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// cn-shanghai:test
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// 20
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListNamespaceChangeOrdersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNamespaceChangeOrdersRequest) GoString() string {
	return s.String()
}

func (s *ListNamespaceChangeOrdersRequest) SetCoStatus(v string) *ListNamespaceChangeOrdersRequest {
	s.CoStatus = &v
	return s
}

func (s *ListNamespaceChangeOrdersRequest) SetCoType(v string) *ListNamespaceChangeOrdersRequest {
	s.CoType = &v
	return s
}

func (s *ListNamespaceChangeOrdersRequest) SetCurrentPage(v int32) *ListNamespaceChangeOrdersRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListNamespaceChangeOrdersRequest) SetKey(v string) *ListNamespaceChangeOrdersRequest {
	s.Key = &v
	return s
}

func (s *ListNamespaceChangeOrdersRequest) SetNamespaceId(v string) *ListNamespaceChangeOrdersRequest {
	s.NamespaceId = &v
	return s
}

func (s *ListNamespaceChangeOrdersRequest) SetPageSize(v int32) *ListNamespaceChangeOrdersRequest {
	s.PageSize = &v
	return s
}

type ListNamespaceChangeOrdersResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *ListNamespaceChangeOrdersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 0bc3915638507554994370d****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the list of change orders was obtained. Valid values:
	//
	// 	- **true**: indicates that the list was obtained.
	//
	// 	- **false**: indicates that the list could not be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// 0bc3915638507554994370d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListNamespaceChangeOrdersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNamespaceChangeOrdersResponseBody) GoString() string {
	return s.String()
}

func (s *ListNamespaceChangeOrdersResponseBody) SetCode(v string) *ListNamespaceChangeOrdersResponseBody {
	s.Code = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBody) SetData(v *ListNamespaceChangeOrdersResponseBodyData) *ListNamespaceChangeOrdersResponseBody {
	s.Data = v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBody) SetErrorCode(v string) *ListNamespaceChangeOrdersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBody) SetMessage(v string) *ListNamespaceChangeOrdersResponseBody {
	s.Message = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBody) SetRequestId(v string) *ListNamespaceChangeOrdersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBody) SetSuccess(v bool) *ListNamespaceChangeOrdersResponseBody {
	s.Success = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBody) SetTraceId(v string) *ListNamespaceChangeOrdersResponseBody {
	s.TraceId = &v
	return s
}

type ListNamespaceChangeOrdersResponseBodyData struct {
	// The list of change orders.
	ChangeOrderList []*ListNamespaceChangeOrdersResponseBodyDataChangeOrderList `json:"ChangeOrderList,omitempty" xml:"ChangeOrderList,omitempty" type:"Repeated"`
	// The number of the returned page.
	//
	// example:
	//
	// 1
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of change orders.
	//
	// example:
	//
	// 32
	TotalSize *int32 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListNamespaceChangeOrdersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNamespaceChangeOrdersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNamespaceChangeOrdersResponseBodyData) SetChangeOrderList(v []*ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) *ListNamespaceChangeOrdersResponseBodyData {
	s.ChangeOrderList = v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyData) SetCurrentPage(v int32) *ListNamespaceChangeOrdersResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyData) SetPageSize(v int32) *ListNamespaceChangeOrdersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyData) SetTotalSize(v int32) *ListNamespaceChangeOrdersResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListNamespaceChangeOrdersResponseBodyDataChangeOrderList struct {
	// The number of release batches.
	//
	// example:
	//
	// 1
	BatchCount *int32 `json:"BatchCount,omitempty" xml:"BatchCount,omitempty"`
	// The mode in which the release batches are determined. Valid values:
	//
	// 	- **auto**: SAE automatically determines the release batches.
	//
	// 	- **manual**: You must manually determine the release batches.
	BatchType *string `json:"BatchType,omitempty" xml:"BatchType,omitempty"`
	// The ID of the change order.
	//
	// example:
	//
	// 7fa5c0-9ebb-4bb4-b383-1f885447****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	// The type of the change order, which corresponds the **CoTypeCode*	- parameter.
	//
	// example:
	//
	// msg.docker.app.actions.CoBatchStartApplication
	CoType *string `json:"CoType,omitempty" xml:"CoType,omitempty"`
	// The code of the change order type. Valid values:
	//
	// 	- **CoBatchStartApplication**: starts multiple applications concurrently.
	//
	// 	- **CoBatchStopApplication**: stops multiple applications concurrently.
	//
	// example:
	//
	// CoBatchStartApplication
	CoTypeCode *string `json:"CoTypeCode,omitempty" xml:"CoTypeCode,omitempty"`
	// The time when the change order was created.
	//
	// example:
	//
	// 2019-07-11 15:54:49
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the user who created the change order.
	//
	// example:
	//
	// test@aliyun.com
	CreateUserId *string `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty"`
	// The description of the change order.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the change order was completed.
	//
	// example:
	//
	// 2019-07-11 20:12:58
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The ID of the group.
	//
	// example:
	//
	// c9ecd2-cf6c-46c3-9f20-525de202****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// cn-shanghai:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The information about release batches.
	//
	// example:
	//
	// xxxx
	Pipelines *string `json:"Pipelines,omitempty" xml:"Pipelines,omitempty"`
	// The source of the change order.
	//
	// example:
	//
	// console
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The status of the change order. Valid values:
	//
	// 	- **0**: The change order is being prepared.
	//
	// 	- **1**: The change order is being executed.
	//
	// 	- **2**: The change order was executed.
	//
	// 	- **3**: The change order could not be executed.
	//
	// 	- **6**: The change order was terminated.
	//
	// 	- **10**: The change order could not be executed due to a system exception.
	//
	// example:
	//
	// 2
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// test_sae
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) String() string {
	return tea.Prettify(s)
}

func (s ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) GoString() string {
	return s.String()
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetBatchCount(v int32) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.BatchCount = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetBatchType(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.BatchType = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetChangeOrderId(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.ChangeOrderId = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetCoType(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.CoType = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetCoTypeCode(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.CoTypeCode = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetCreateTime(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.CreateTime = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetCreateUserId(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.CreateUserId = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetDescription(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.Description = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetFinishTime(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.FinishTime = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetGroupId(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.GroupId = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetNamespaceId(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.NamespaceId = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetPipelines(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.Pipelines = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetSource(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.Source = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetStatus(v int32) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.Status = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList) SetUserId(v string) *ListNamespaceChangeOrdersResponseBodyDataChangeOrderList {
	s.UserId = &v
	return s
}

type ListNamespaceChangeOrdersResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNamespaceChangeOrdersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNamespaceChangeOrdersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNamespaceChangeOrdersResponse) GoString() string {
	return s.String()
}

func (s *ListNamespaceChangeOrdersResponse) SetHeaders(v map[string]*string) *ListNamespaceChangeOrdersResponse {
	s.Headers = v
	return s
}

func (s *ListNamespaceChangeOrdersResponse) SetStatusCode(v int32) *ListNamespaceChangeOrdersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNamespaceChangeOrdersResponse) SetBody(v *ListNamespaceChangeOrdersResponseBody) *ListNamespaceChangeOrdersResponse {
	s.Body = v
	return s
}

type ListNamespacedConfigMapsRequest struct {
	// cn-hangzhou
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s ListNamespacedConfigMapsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacedConfigMapsRequest) GoString() string {
	return s.String()
}

func (s *ListNamespacedConfigMapsRequest) SetNamespaceId(v string) *ListNamespacedConfigMapsRequest {
	s.NamespaceId = &v
	return s
}

type ListNamespacedConfigMapsResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the call was successful.
	//
	// 	- **3xx**: indicates that the call was redirected.
	//
	// 	- **4xx**: indicates that the call failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result.
	Data *ListNamespacedConfigMapsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned error code. Valid values:
	//
	// - If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// - If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned information. Valid values:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the ConfigMap instances were obtained. Valid values:
	//
	// 	- **true**: The instances were obtained.
	//
	// 	- **false**: The instances failed to be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListNamespacedConfigMapsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacedConfigMapsResponseBody) GoString() string {
	return s.String()
}

func (s *ListNamespacedConfigMapsResponseBody) SetCode(v string) *ListNamespacedConfigMapsResponseBody {
	s.Code = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBody) SetData(v *ListNamespacedConfigMapsResponseBodyData) *ListNamespacedConfigMapsResponseBody {
	s.Data = v
	return s
}

func (s *ListNamespacedConfigMapsResponseBody) SetErrorCode(v string) *ListNamespacedConfigMapsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBody) SetMessage(v string) *ListNamespacedConfigMapsResponseBody {
	s.Message = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBody) SetRequestId(v string) *ListNamespacedConfigMapsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBody) SetSuccess(v bool) *ListNamespacedConfigMapsResponseBody {
	s.Success = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBody) SetTraceId(v string) *ListNamespacedConfigMapsResponseBody {
	s.TraceId = &v
	return s
}

type ListNamespacedConfigMapsResponseBodyData struct {
	// The ConfigMap instances.
	ConfigMaps []*ListNamespacedConfigMapsResponseBodyDataConfigMaps `json:"ConfigMaps,omitempty" xml:"ConfigMaps,omitempty" type:"Repeated"`
}

func (s ListNamespacedConfigMapsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacedConfigMapsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNamespacedConfigMapsResponseBodyData) SetConfigMaps(v []*ListNamespacedConfigMapsResponseBodyDataConfigMaps) *ListNamespacedConfigMapsResponseBodyData {
	s.ConfigMaps = v
	return s
}

type ListNamespacedConfigMapsResponseBodyDataConfigMaps struct {
	// The ID of the ConfigMap instance.
	//
	// example:
	//
	// 1
	ConfigMapId *int64 `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
	// The time when the instance was created.
	//
	// example:
	//
	// 1593760185111
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The data of ConfigMap key-value pairs. Format:
	//
	// {"k1":"v1", "k2":"v2"}
	//
	// k specifies a key and v specifies a value. For more information, see [Manage and use configurations](https://help.aliyun.com/document_detail/171326.html).
	//
	// example:
	//
	// {"k1":"v1","k2":"v2"}
	Data map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// The description of the instance.
	//
	// example:
	//
	// test-desc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the ConfigMap instance.
	//
	// example:
	//
	// test-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The application that is associated with the instance.
	RelateApps []*ListNamespacedConfigMapsResponseBodyDataConfigMapsRelateApps `json:"RelateApps,omitempty" xml:"RelateApps,omitempty" type:"Repeated"`
	// The time when the instance was last modified.
	//
	// example:
	//
	// 1593760185111
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListNamespacedConfigMapsResponseBodyDataConfigMaps) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacedConfigMapsResponseBodyDataConfigMaps) GoString() string {
	return s.String()
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMaps) SetConfigMapId(v int64) *ListNamespacedConfigMapsResponseBodyDataConfigMaps {
	s.ConfigMapId = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMaps) SetCreateTime(v int64) *ListNamespacedConfigMapsResponseBodyDataConfigMaps {
	s.CreateTime = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMaps) SetData(v map[string]interface{}) *ListNamespacedConfigMapsResponseBodyDataConfigMaps {
	s.Data = v
	return s
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMaps) SetDescription(v string) *ListNamespacedConfigMapsResponseBodyDataConfigMaps {
	s.Description = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMaps) SetName(v string) *ListNamespacedConfigMapsResponseBodyDataConfigMaps {
	s.Name = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMaps) SetNamespaceId(v string) *ListNamespacedConfigMapsResponseBodyDataConfigMaps {
	s.NamespaceId = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMaps) SetRelateApps(v []*ListNamespacedConfigMapsResponseBodyDataConfigMapsRelateApps) *ListNamespacedConfigMapsResponseBodyDataConfigMaps {
	s.RelateApps = v
	return s
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMaps) SetUpdateTime(v int64) *ListNamespacedConfigMapsResponseBodyDataConfigMaps {
	s.UpdateTime = &v
	return s
}

type ListNamespacedConfigMapsResponseBodyDataConfigMapsRelateApps struct {
	// The ID of the application.
	//
	// example:
	//
	// f16b4000-9058-4c22-a49d-49a28f0b****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s ListNamespacedConfigMapsResponseBodyDataConfigMapsRelateApps) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacedConfigMapsResponseBodyDataConfigMapsRelateApps) GoString() string {
	return s.String()
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMapsRelateApps) SetAppId(v string) *ListNamespacedConfigMapsResponseBodyDataConfigMapsRelateApps {
	s.AppId = &v
	return s
}

func (s *ListNamespacedConfigMapsResponseBodyDataConfigMapsRelateApps) SetAppName(v string) *ListNamespacedConfigMapsResponseBodyDataConfigMapsRelateApps {
	s.AppName = &v
	return s
}

type ListNamespacedConfigMapsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNamespacedConfigMapsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNamespacedConfigMapsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNamespacedConfigMapsResponse) GoString() string {
	return s.String()
}

func (s *ListNamespacedConfigMapsResponse) SetHeaders(v map[string]*string) *ListNamespacedConfigMapsResponse {
	s.Headers = v
	return s
}

func (s *ListNamespacedConfigMapsResponse) SetStatusCode(v int32) *ListNamespacedConfigMapsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNamespacedConfigMapsResponse) SetBody(v *ListNamespacedConfigMapsResponseBody) *ListNamespacedConfigMapsResponse {
	s.Body = v
	return s
}

type ListPublishedServicesRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// b2a8a925-477a-4ed7-b825-d5e22500****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ListPublishedServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesRequest) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesRequest) SetAppId(v string) *ListPublishedServicesRequest {
	s.AppId = &v
	return s
}

type ListPublishedServicesResponseBody struct {
	// Indicates whether the microservice list was obtained. Valid values:
	//
	// 	- **true**: The list was obtained.
	//
	// 	- **false**: The list failed to be obtained.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The type of the published service.
	Data []*ListPublishedServicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the call was successful.
	//
	// 	- **3xx**: indicates that the call was redirected.
	//
	// 	- **4xx**: indicates that the call failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It is used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned information. Valid values:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The details of the microservices.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListPublishedServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBody) SetCode(v string) *ListPublishedServicesResponseBody {
	s.Code = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetData(v []*ListPublishedServicesResponseBodyData) *ListPublishedServicesResponseBody {
	s.Data = v
	return s
}

func (s *ListPublishedServicesResponseBody) SetErrorCode(v string) *ListPublishedServicesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetMessage(v string) *ListPublishedServicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetRequestId(v string) *ListPublishedServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetSuccess(v bool) *ListPublishedServicesResponseBody {
	s.Success = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetTraceId(v string) *ListPublishedServicesResponseBody {
	s.TraceId = &v
	return s
}

type ListPublishedServicesResponseBodyData struct {
	// The reserved parameter. This parameter does not take effect.
	//
	// example:
	//
	// b2a8a925-477a-4ed7-b825-d5e22500****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The subscription address of the service.
	//
	// example:
	//
	// {}
	Group2Ip *string `json:"Group2Ip,omitempty" xml:"Group2Ip,omitempty"`
	// The version of the published services.
	Groups []*string `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Repeated"`
	// The name of the published service.
	Ips []*string `json:"Ips,omitempty" xml:"Ips,omitempty" type:"Repeated"`
	// The returned error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// com.alibaba.nodejs.ItemService
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The service group that corresponds to the consumed service.
	//
	// example:
	//
	// RPC
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the application.
	//
	// example:
	//
	// 1.0.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListPublishedServicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBodyData) SetAppId(v string) *ListPublishedServicesResponseBodyData {
	s.AppId = &v
	return s
}

func (s *ListPublishedServicesResponseBodyData) SetGroup2Ip(v string) *ListPublishedServicesResponseBodyData {
	s.Group2Ip = &v
	return s
}

func (s *ListPublishedServicesResponseBodyData) SetGroups(v []*string) *ListPublishedServicesResponseBodyData {
	s.Groups = v
	return s
}

func (s *ListPublishedServicesResponseBodyData) SetIps(v []*string) *ListPublishedServicesResponseBodyData {
	s.Ips = v
	return s
}

func (s *ListPublishedServicesResponseBodyData) SetName(v string) *ListPublishedServicesResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListPublishedServicesResponseBodyData) SetType(v string) *ListPublishedServicesResponseBodyData {
	s.Type = &v
	return s
}

func (s *ListPublishedServicesResponseBodyData) SetVersion(v string) *ListPublishedServicesResponseBodyData {
	s.Version = &v
	return s
}

type ListPublishedServicesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPublishedServicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPublishedServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponse) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponse) SetHeaders(v map[string]*string) *ListPublishedServicesResponse {
	s.Headers = v
	return s
}

func (s *ListPublishedServicesResponse) SetStatusCode(v int32) *ListPublishedServicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPublishedServicesResponse) SetBody(v *ListPublishedServicesResponseBody) *ListPublishedServicesResponse {
	s.Body = v
	return s
}

type ListSecretsRequest struct {
	// The ID of the namespace in which the Secrets reside. By default, the namespace ID is the same as the region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s ListSecretsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsRequest) GoString() string {
	return s.String()
}

func (s *ListSecretsRequest) SetNamespaceId(v string) *ListSecretsRequest {
	s.NamespaceId = &v
	return s
}

type ListSecretsResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *ListSecretsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Take note of the following rules:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message. Take note of the following rules:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListSecretsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBody) SetCode(v string) *ListSecretsResponseBody {
	s.Code = &v
	return s
}

func (s *ListSecretsResponseBody) SetData(v *ListSecretsResponseBodyData) *ListSecretsResponseBody {
	s.Data = v
	return s
}

func (s *ListSecretsResponseBody) SetErrorCode(v string) *ListSecretsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListSecretsResponseBody) SetMessage(v string) *ListSecretsResponseBody {
	s.Message = &v
	return s
}

func (s *ListSecretsResponseBody) SetRequestId(v string) *ListSecretsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSecretsResponseBody) SetSuccess(v bool) *ListSecretsResponseBody {
	s.Success = &v
	return s
}

func (s *ListSecretsResponseBody) SetTraceId(v string) *ListSecretsResponseBody {
	s.TraceId = &v
	return s
}

type ListSecretsResponseBodyData struct {
	// The Secrets.
	Secrets []*ListSecretsResponseBodyDataSecrets `json:"Secrets,omitempty" xml:"Secrets,omitempty" type:"Repeated"`
}

func (s ListSecretsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBodyData) SetSecrets(v []*ListSecretsResponseBodyDataSecrets) *ListSecretsResponseBodyData {
	s.Secrets = v
	return s
}

type ListSecretsResponseBodyDataSecrets struct {
	// The time when the Secret was created.
	//
	// example:
	//
	// 1593760185111
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The namespace ID.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The associated applications.
	RelateApps []*ListSecretsResponseBodyDataSecretsRelateApps `json:"RelateApps,omitempty" xml:"RelateApps,omitempty" type:"Repeated"`
	// The Secret ID.
	//
	// example:
	//
	// 16
	SecretId *int64 `json:"SecretId,omitempty" xml:"SecretId,omitempty"`
	// The Secret name.
	//
	// example:
	//
	// registry-auth
	SecretName *string `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
	// The Secret type.
	//
	// Set the value to **kubernetes.io/dockerconfigjson**. The value indicates the secret for the username and password of the image repository and is used for authentication when images are pulled during application deployment.
	//
	// example:
	//
	// kubernetes.io/dockerconfigjson
	SecretType *string `json:"SecretType,omitempty" xml:"SecretType,omitempty"`
	// The time when the Secret was updated.
	//
	// example:
	//
	// 1593760185111
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListSecretsResponseBodyDataSecrets) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsResponseBodyDataSecrets) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBodyDataSecrets) SetCreateTime(v int64) *ListSecretsResponseBodyDataSecrets {
	s.CreateTime = &v
	return s
}

func (s *ListSecretsResponseBodyDataSecrets) SetNamespaceId(v string) *ListSecretsResponseBodyDataSecrets {
	s.NamespaceId = &v
	return s
}

func (s *ListSecretsResponseBodyDataSecrets) SetRelateApps(v []*ListSecretsResponseBodyDataSecretsRelateApps) *ListSecretsResponseBodyDataSecrets {
	s.RelateApps = v
	return s
}

func (s *ListSecretsResponseBodyDataSecrets) SetSecretId(v int64) *ListSecretsResponseBodyDataSecrets {
	s.SecretId = &v
	return s
}

func (s *ListSecretsResponseBodyDataSecrets) SetSecretName(v string) *ListSecretsResponseBodyDataSecrets {
	s.SecretName = &v
	return s
}

func (s *ListSecretsResponseBodyDataSecrets) SetSecretType(v string) *ListSecretsResponseBodyDataSecrets {
	s.SecretType = &v
	return s
}

func (s *ListSecretsResponseBodyDataSecrets) SetUpdateTime(v int64) *ListSecretsResponseBodyDataSecrets {
	s.UpdateTime = &v
	return s
}

type ListSecretsResponseBodyDataSecretsRelateApps struct {
	// The application ID.
	//
	// example:
	//
	// f16b4000-9058-4c22-a49d-49a28f0b****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The application name.
	//
	// example:
	//
	// test-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s ListSecretsResponseBodyDataSecretsRelateApps) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsResponseBodyDataSecretsRelateApps) GoString() string {
	return s.String()
}

func (s *ListSecretsResponseBodyDataSecretsRelateApps) SetAppId(v string) *ListSecretsResponseBodyDataSecretsRelateApps {
	s.AppId = &v
	return s
}

func (s *ListSecretsResponseBodyDataSecretsRelateApps) SetAppName(v string) *ListSecretsResponseBodyDataSecretsRelateApps {
	s.AppName = &v
	return s
}

type ListSecretsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSecretsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSecretsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSecretsResponse) GoString() string {
	return s.String()
}

func (s *ListSecretsResponse) SetHeaders(v map[string]*string) *ListSecretsResponse {
	s.Headers = v
	return s
}

func (s *ListSecretsResponse) SetStatusCode(v int32) *ListSecretsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSecretsResponse) SetBody(v *ListSecretsResponseBody) *ListSecretsResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	// A2RN
	//
	// example:
	//
	// A2RN
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// cn-beijing
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// ["d42921c4-5433-4abd-8075-0e536f8b\\*\\*\\*\\*"]
	//
	// example:
	//
	// ["d42921c4-5433-4abd-8075-0e536f8b****"]
	ResourceIds *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	// application
	//
	// This parameter is required.
	//
	// example:
	//
	// application
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// [{"key":"k1","value":"v1"}]
	//
	// example:
	//
	// [{"key":"k1","value":"v1"}]
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceIds(v string) *ListTagResourcesRequest {
	s.ResourceIds = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTags(v string) *ListTagResourcesRequest {
	s.Tags = &v
	return s
}

type ListTagResourcesResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *ListTagResourcesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// - The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// - The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 7414187F-4F59-4585-9BCF-5F0804E4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether mapping relationships between applications and tags were queried successfully. Valid values:
	//
	// 	- **true**: The query was successful.
	//
	// 	- **false**: The query failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// 0bc5f84e15916043198032146d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetCode(v string) *ListTagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetData(v *ListTagResourcesResponseBodyData) *ListTagResourcesResponseBody {
	s.Data = v
	return s
}

func (s *ListTagResourcesResponseBody) SetErrorCode(v string) *ListTagResourcesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetMessage(v string) *ListTagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetSuccess(v bool) *ListTagResourcesResponseBody {
	s.Success = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTraceId(v string) *ListTagResourcesResponseBody {
	s.TraceId = &v
	return s
}

type ListTagResourcesResponseBodyData struct {
	// A maximum of 50 entries can be returned for a query. If a query generates more than 50 entries, the NextToken parameter is returned with the first 50 entries. You can use the NextToken parameter value to retrieve the subsequent entries that are not returned in the current query result.
	//
	// example:
	//
	// ""
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The mapping relationships between applications and tags.
	TagResources []*ListTagResourcesResponseBodyDataTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyData) SetNextToken(v string) *ListTagResourcesResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBodyData) SetTagResources(v []*ListTagResourcesResponseBodyDataTagResources) *ListTagResourcesResponseBodyData {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyDataTagResources struct {
	// The ID of the application.
	//
	// example:
	//
	// d42921c4-5433-4abd-8075-0e536f8b****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource. Set the value to `application`.
	//
	// example:
	//
	// ALIYUN::SAE::APPLICATION
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag key.
	//
	// example:
	//
	// k1
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// example:
	//
	// v1
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyDataTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyDataTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyDataTagResources) SetResourceId(v string) *ListTagResourcesResponseBodyDataTagResources {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyDataTagResources) SetResourceType(v string) *ListTagResourcesResponseBodyDataTagResources {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyDataTagResources) SetTagKey(v string) *ListTagResourcesResponseBodyDataTagResources {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyDataTagResources) SetTagValue(v string) *ListTagResourcesResponseBodyDataTagResources {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ListWebApplicationInstancesRequest struct {
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// c-667d143a-17b4e0fa-46d3a2******
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	Limit *string `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId *string   `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	StartTime   *int64    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Statuses    []*string `json:"Statuses,omitempty" xml:"Statuses,omitempty" type:"Repeated"`
	// example:
	//
	// 001
	VersionIds []*string `json:"VersionIds,omitempty" xml:"VersionIds,omitempty" type:"Repeated"`
}

func (s ListWebApplicationInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListWebApplicationInstancesRequest) SetEndTime(v int64) *ListWebApplicationInstancesRequest {
	s.EndTime = &v
	return s
}

func (s *ListWebApplicationInstancesRequest) SetInstanceIds(v []*string) *ListWebApplicationInstancesRequest {
	s.InstanceIds = v
	return s
}

func (s *ListWebApplicationInstancesRequest) SetLimit(v string) *ListWebApplicationInstancesRequest {
	s.Limit = &v
	return s
}

func (s *ListWebApplicationInstancesRequest) SetNamespaceId(v string) *ListWebApplicationInstancesRequest {
	s.NamespaceId = &v
	return s
}

func (s *ListWebApplicationInstancesRequest) SetStartTime(v int64) *ListWebApplicationInstancesRequest {
	s.StartTime = &v
	return s
}

func (s *ListWebApplicationInstancesRequest) SetStatuses(v []*string) *ListWebApplicationInstancesRequest {
	s.Statuses = v
	return s
}

func (s *ListWebApplicationInstancesRequest) SetVersionIds(v []*string) *ListWebApplicationInstancesRequest {
	s.VersionIds = v
	return s
}

type ListWebApplicationInstancesShrinkRequest struct {
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// c-667d143a-17b4e0fa-46d3a2******
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// example:
	//
	// 10
	Limit *string `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId    *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	StartTime      *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StatusesShrink *string `json:"Statuses,omitempty" xml:"Statuses,omitempty"`
	// example:
	//
	// 001
	VersionIdsShrink *string `json:"VersionIds,omitempty" xml:"VersionIds,omitempty"`
}

func (s ListWebApplicationInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListWebApplicationInstancesShrinkRequest) SetEndTime(v int64) *ListWebApplicationInstancesShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *ListWebApplicationInstancesShrinkRequest) SetInstanceIdsShrink(v string) *ListWebApplicationInstancesShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *ListWebApplicationInstancesShrinkRequest) SetLimit(v string) *ListWebApplicationInstancesShrinkRequest {
	s.Limit = &v
	return s
}

func (s *ListWebApplicationInstancesShrinkRequest) SetNamespaceId(v string) *ListWebApplicationInstancesShrinkRequest {
	s.NamespaceId = &v
	return s
}

func (s *ListWebApplicationInstancesShrinkRequest) SetStartTime(v int64) *ListWebApplicationInstancesShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *ListWebApplicationInstancesShrinkRequest) SetStatusesShrink(v string) *ListWebApplicationInstancesShrinkRequest {
	s.StatusesShrink = &v
	return s
}

func (s *ListWebApplicationInstancesShrinkRequest) SetVersionIdsShrink(v string) *ListWebApplicationInstancesShrinkRequest {
	s.VersionIdsShrink = &v
	return s
}

type ListWebApplicationInstancesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWebApplicationInstancesBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWebApplicationInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListWebApplicationInstancesResponse) SetHeaders(v map[string]*string) *ListWebApplicationInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListWebApplicationInstancesResponse) SetStatusCode(v int32) *ListWebApplicationInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWebApplicationInstancesResponse) SetBody(v *ListWebApplicationInstancesBody) *ListWebApplicationInstancesResponse {
	s.Body = v
	return s
}

type ListWebApplicationRevisionsRequest struct {
	// example:
	//
	// 10
	Limit *int32 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// example:
	//
	// A2RN
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
}

func (s ListWebApplicationRevisionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationRevisionsRequest) GoString() string {
	return s.String()
}

func (s *ListWebApplicationRevisionsRequest) SetLimit(v int32) *ListWebApplicationRevisionsRequest {
	s.Limit = &v
	return s
}

func (s *ListWebApplicationRevisionsRequest) SetNamespaceId(v string) *ListWebApplicationRevisionsRequest {
	s.NamespaceId = &v
	return s
}

func (s *ListWebApplicationRevisionsRequest) SetNextToken(v string) *ListWebApplicationRevisionsRequest {
	s.NextToken = &v
	return s
}

type ListWebApplicationRevisionsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWebApplicationRevisionsBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWebApplicationRevisionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationRevisionsResponse) GoString() string {
	return s.String()
}

func (s *ListWebApplicationRevisionsResponse) SetHeaders(v map[string]*string) *ListWebApplicationRevisionsResponse {
	s.Headers = v
	return s
}

func (s *ListWebApplicationRevisionsResponse) SetStatusCode(v int32) *ListWebApplicationRevisionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWebApplicationRevisionsResponse) SetBody(v *ListWebApplicationRevisionsBody) *ListWebApplicationRevisionsResponse {
	s.Body = v
	return s
}

type ListWebApplicationsRequest struct {
	// example:
	//
	// 10
	Limit *int32 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// example:
	//
	// MTIzNCNhYmM
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// my-application
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
}

func (s ListWebApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationsRequest) GoString() string {
	return s.String()
}

func (s *ListWebApplicationsRequest) SetLimit(v int32) *ListWebApplicationsRequest {
	s.Limit = &v
	return s
}

func (s *ListWebApplicationsRequest) SetNamespaceId(v string) *ListWebApplicationsRequest {
	s.NamespaceId = &v
	return s
}

func (s *ListWebApplicationsRequest) SetNextToken(v string) *ListWebApplicationsRequest {
	s.NextToken = &v
	return s
}

func (s *ListWebApplicationsRequest) SetPrefix(v string) *ListWebApplicationsRequest {
	s.Prefix = &v
	return s
}

type ListWebApplicationsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWebApplicationsBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWebApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWebApplicationsResponse) GoString() string {
	return s.String()
}

func (s *ListWebApplicationsResponse) SetHeaders(v map[string]*string) *ListWebApplicationsResponse {
	s.Headers = v
	return s
}

func (s *ListWebApplicationsResponse) SetStatusCode(v int32) *ListWebApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWebApplicationsResponse) SetBody(v *ListWebApplicationsBody) *ListWebApplicationsResponse {
	s.Body = v
	return s
}

type ListWebCustomDomainsRequest struct {
	// example:
	//
	// 7e41aff0-9eca-45c9-ac48-675e09******
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	// example:
	//
	// 10
	Limit *int32 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// example:
	//
	// cn-hangzhou
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// example:
	//
	// A2RN
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// remoteresult
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
}

func (s ListWebCustomDomainsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWebCustomDomainsRequest) GoString() string {
	return s.String()
}

func (s *ListWebCustomDomainsRequest) SetApplicationId(v string) *ListWebCustomDomainsRequest {
	s.ApplicationId = &v
	return s
}

func (s *ListWebCustomDomainsRequest) SetLimit(v int32) *ListWebCustomDomainsRequest {
	s.Limit = &v
	return s
}

func (s *ListWebCustomDomainsRequest) SetNamespaceId(v string) *ListWebCustomDomainsRequest {
	s.NamespaceId = &v
	return s
}

func (s *ListWebCustomDomainsRequest) SetNextToken(v string) *ListWebCustomDomainsRequest {
	s.NextToken = &v
	return s
}

func (s *ListWebCustomDomainsRequest) SetPrefix(v string) *ListWebCustomDomainsRequest {
	s.Prefix = &v
	return s
}

type ListWebCustomDomainsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWebCustomDomainBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWebCustomDomainsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWebCustomDomainsResponse) GoString() string {
	return s.String()
}

func (s *ListWebCustomDomainsResponse) SetHeaders(v map[string]*string) *ListWebCustomDomainsResponse {
	s.Headers = v
	return s
}

func (s *ListWebCustomDomainsResponse) SetStatusCode(v int32) *ListWebCustomDomainsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWebCustomDomainsResponse) SetBody(v *ListWebCustomDomainBody) *ListWebCustomDomainsResponse {
	s.Body = v
	return s
}

type OpenSaeServiceResponseBody struct {
	// The ID of the order.
	//
	// example:
	//
	// 20485646575****
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 559B4247-C41C-4D9E-B866-B55D378B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenSaeServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenSaeServiceResponseBody) GoString() string {
	return s.String()
}

func (s *OpenSaeServiceResponseBody) SetOrderId(v string) *OpenSaeServiceResponseBody {
	s.OrderId = &v
	return s
}

func (s *OpenSaeServiceResponseBody) SetRequestId(v string) *OpenSaeServiceResponseBody {
	s.RequestId = &v
	return s
}

type OpenSaeServiceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenSaeServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenSaeServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenSaeServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenSaeServiceResponse) SetHeaders(v map[string]*string) *OpenSaeServiceResponse {
	s.Headers = v
	return s
}

func (s *OpenSaeServiceResponse) SetStatusCode(v int32) *OpenSaeServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenSaeServiceResponse) SetBody(v *OpenSaeServiceResponseBody) *OpenSaeServiceResponse {
	s.Body = v
	return s
}

type PublishWebApplicationRevisionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	Body *PublishWebApplicationRevisionInput `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PublishWebApplicationRevisionRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishWebApplicationRevisionRequest) GoString() string {
	return s.String()
}

func (s *PublishWebApplicationRevisionRequest) SetNamespaceId(v string) *PublishWebApplicationRevisionRequest {
	s.NamespaceId = &v
	return s
}

func (s *PublishWebApplicationRevisionRequest) SetBody(v *PublishWebApplicationRevisionInput) *PublishWebApplicationRevisionRequest {
	s.Body = v
	return s
}

type PublishWebApplicationRevisionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationRevisionBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PublishWebApplicationRevisionResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishWebApplicationRevisionResponse) GoString() string {
	return s.String()
}

func (s *PublishWebApplicationRevisionResponse) SetHeaders(v map[string]*string) *PublishWebApplicationRevisionResponse {
	s.Headers = v
	return s
}

func (s *PublishWebApplicationRevisionResponse) SetStatusCode(v int32) *PublishWebApplicationRevisionResponse {
	s.StatusCode = &v
	return s
}

func (s *PublishWebApplicationRevisionResponse) SetBody(v *WebApplicationRevisionBody) *PublishWebApplicationRevisionResponse {
	s.Body = v
	return s
}

type QueryResourceStaticsRequest struct {
	// 7171a6ca-d1cd-4928-8642-7d5cfe69\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s QueryResourceStaticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceStaticsRequest) GoString() string {
	return s.String()
}

func (s *QueryResourceStaticsRequest) SetAppId(v string) *QueryResourceStaticsRequest {
	s.AppId = &v
	return s
}

type QueryResourceStaticsResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The resource usage.
	Data *QueryResourceStaticsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// - The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// - The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 7CCF7092-72CA-4431-90D6-C7D98752****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the resource usage of an application was obtained. Valid values:
	//
	// 	- **true**: indicates that the resource usage was obtained.
	//
	// 	- **false**: indicates that the resource usage could not be obtained.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// ac1a08a015623098794277264e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s QueryResourceStaticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceStaticsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryResourceStaticsResponseBody) SetCode(v string) *QueryResourceStaticsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryResourceStaticsResponseBody) SetData(v *QueryResourceStaticsResponseBodyData) *QueryResourceStaticsResponseBody {
	s.Data = v
	return s
}

func (s *QueryResourceStaticsResponseBody) SetErrorCode(v string) *QueryResourceStaticsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *QueryResourceStaticsResponseBody) SetMessage(v string) *QueryResourceStaticsResponseBody {
	s.Message = &v
	return s
}

func (s *QueryResourceStaticsResponseBody) SetRequestId(v string) *QueryResourceStaticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryResourceStaticsResponseBody) SetSuccess(v bool) *QueryResourceStaticsResponseBody {
	s.Success = &v
	return s
}

func (s *QueryResourceStaticsResponseBody) SetTraceId(v string) *QueryResourceStaticsResponseBody {
	s.TraceId = &v
	return s
}

type QueryResourceStaticsResponseBodyData struct {
	// The real-time resource usage.
	RealTimeRes *QueryResourceStaticsResponseBodyDataRealTimeRes `json:"RealTimeRes,omitempty" xml:"RealTimeRes,omitempty" type:"Struct"`
	// The resource usage of the current month.
	Summary *QueryResourceStaticsResponseBodyDataSummary `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Struct"`
}

func (s QueryResourceStaticsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceStaticsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryResourceStaticsResponseBodyData) SetRealTimeRes(v *QueryResourceStaticsResponseBodyDataRealTimeRes) *QueryResourceStaticsResponseBodyData {
	s.RealTimeRes = v
	return s
}

func (s *QueryResourceStaticsResponseBodyData) SetSummary(v *QueryResourceStaticsResponseBodyDataSummary) *QueryResourceStaticsResponseBodyData {
	s.Summary = v
	return s
}

type QueryResourceStaticsResponseBodyDataRealTimeRes struct {
	// The CPU usage. Unit: core per minute.
	//
	// example:
	//
	// 13
	Cpu *float32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The memory usage. Unit: GiB per minute.
	//
	// example:
	//
	// 26
	Memory *float32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s QueryResourceStaticsResponseBodyDataRealTimeRes) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceStaticsResponseBodyDataRealTimeRes) GoString() string {
	return s.String()
}

func (s *QueryResourceStaticsResponseBodyDataRealTimeRes) SetCpu(v float32) *QueryResourceStaticsResponseBodyDataRealTimeRes {
	s.Cpu = &v
	return s
}

func (s *QueryResourceStaticsResponseBodyDataRealTimeRes) SetMemory(v float32) *QueryResourceStaticsResponseBodyDataRealTimeRes {
	s.Memory = &v
	return s
}

type QueryResourceStaticsResponseBodyDataSummary struct {
	// The CPU usage. Unit: core per minute.
	//
	// example:
	//
	// 3354
	Cpu *float32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The memory usage. Unit: GiB per minute.
	//
	// example:
	//
	// 6708
	Memory *float32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s QueryResourceStaticsResponseBodyDataSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceStaticsResponseBodyDataSummary) GoString() string {
	return s.String()
}

func (s *QueryResourceStaticsResponseBodyDataSummary) SetCpu(v float32) *QueryResourceStaticsResponseBodyDataSummary {
	s.Cpu = &v
	return s
}

func (s *QueryResourceStaticsResponseBodyDataSummary) SetMemory(v float32) *QueryResourceStaticsResponseBodyDataSummary {
	s.Memory = &v
	return s
}

type QueryResourceStaticsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryResourceStaticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryResourceStaticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResourceStaticsResponse) GoString() string {
	return s.String()
}

func (s *QueryResourceStaticsResponse) SetHeaders(v map[string]*string) *QueryResourceStaticsResponse {
	s.Headers = v
	return s
}

func (s *QueryResourceStaticsResponse) SetStatusCode(v int32) *QueryResourceStaticsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryResourceStaticsResponse) SetBody(v *QueryResourceStaticsResponseBody) *QueryResourceStaticsResponse {
	s.Body = v
	return s
}

type ReduceApplicationCapacityByInstanceIdsRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the instance. Separate multiple instances with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// b2a8a925-477a-4ed7-b825-d5e22500****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s ReduceApplicationCapacityByInstanceIdsRequest) String() string {
	return tea.Prettify(s)
}

func (s ReduceApplicationCapacityByInstanceIdsRequest) GoString() string {
	return s.String()
}

func (s *ReduceApplicationCapacityByInstanceIdsRequest) SetAppId(v string) *ReduceApplicationCapacityByInstanceIdsRequest {
	s.AppId = &v
	return s
}

func (s *ReduceApplicationCapacityByInstanceIdsRequest) SetInstanceIds(v string) *ReduceApplicationCapacityByInstanceIdsRequest {
	s.InstanceIds = &v
	return s
}

type ReduceApplicationCapacityByInstanceIdsResponseBody struct {
	// The HTTP status code.
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the change process.
	Data *ReduceApplicationCapacityByInstanceIdsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Take note of the following rules:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A8E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information of the change order was queried. Take note of the following rules:
	//
	// 	- **true**: The information was queried.
	//
	// 	- **false**: The image failed to be found.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s ReduceApplicationCapacityByInstanceIdsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReduceApplicationCapacityByInstanceIdsResponseBody) GoString() string {
	return s.String()
}

func (s *ReduceApplicationCapacityByInstanceIdsResponseBody) SetCode(v string) *ReduceApplicationCapacityByInstanceIdsResponseBody {
	s.Code = &v
	return s
}

func (s *ReduceApplicationCapacityByInstanceIdsResponseBody) SetData(v *ReduceApplicationCapacityByInstanceIdsResponseBodyData) *ReduceApplicationCapacityByInstanceIdsResponseBody {
	s.Data = v
	return s
}

func (s *ReduceApplicationCapacityByInstanceIdsResponseBody) SetErrorCode(v string) *ReduceApplicationCapacityByInstanceIdsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ReduceApplicationCapacityByInstanceIdsResponseBody) SetMessage(v string) *ReduceApplicationCapacityByInstanceIdsResponseBody {
	s.Message = &v
	return s
}

func (s *ReduceApplicationCapacityByInstanceIdsResponseBody) SetRequestId(v string) *ReduceApplicationCapacityByInstanceIdsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReduceApplicationCapacityByInstanceIdsResponseBody) SetSuccess(v bool) *ReduceApplicationCapacityByInstanceIdsResponseBody {
	s.Success = &v
	return s
}

func (s *ReduceApplicationCapacityByInstanceIdsResponseBody) SetTraceId(v string) *ReduceApplicationCapacityByInstanceIdsResponseBody {
	s.TraceId = &v
	return s
}

type ReduceApplicationCapacityByInstanceIdsResponseBodyData struct {
	// The ID of the change process.
	//
	// example:
	//
	// 76fa5c0-9ebb-4bb4-b383-1f885447****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s ReduceApplicationCapacityByInstanceIdsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ReduceApplicationCapacityByInstanceIdsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ReduceApplicationCapacityByInstanceIdsResponseBodyData) SetChangeOrderId(v string) *ReduceApplicationCapacityByInstanceIdsResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type ReduceApplicationCapacityByInstanceIdsResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReduceApplicationCapacityByInstanceIdsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReduceApplicationCapacityByInstanceIdsResponse) String() string {
	return tea.Prettify(s)
}

func (s ReduceApplicationCapacityByInstanceIdsResponse) GoString() string {
	return s.String()
}

func (s *ReduceApplicationCapacityByInstanceIdsResponse) SetHeaders(v map[string]*string) *ReduceApplicationCapacityByInstanceIdsResponse {
	s.Headers = v
	return s
}

func (s *ReduceApplicationCapacityByInstanceIdsResponse) SetStatusCode(v int32) *ReduceApplicationCapacityByInstanceIdsResponse {
	s.StatusCode = &v
	return s
}

func (s *ReduceApplicationCapacityByInstanceIdsResponse) SetBody(v *ReduceApplicationCapacityByInstanceIdsResponseBody) *ReduceApplicationCapacityByInstanceIdsResponse {
	s.Body = v
	return s
}

type RescaleApplicationRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// Specifies whether to automatically enable an auto scaling policy for the application. Take note of the following rules:
	//
	// 	- **true**: turns on Logon-free Sharing
	//
	// 	- **false**: turns off Logon-free Sharing
	//
	// example:
	//
	// true
	AutoEnableApplicationScalingRule *bool `json:"AutoEnableApplicationScalingRule,omitempty" xml:"AutoEnableApplicationScalingRule,omitempty"`
	// The percentage of the minimum number of available instances. Take note of the following rules:
	//
	// 	- If you set the value to **-1**, the minimum number of available instances is not determined based on this parameter. Default value: -1.
	//
	// 	- If you set the value to a number **from 0 to 100**, the minimum number of available instances is calculated by using the following formula: Current number of instances × (Value of MinReadyInstanceRatio × 100%). The value is the nearest integer rounded up from the calculated result. For example, if the percentage is set to **50**% and five instances are available, the minimum number of available instances is 3.
	//
	// > When **MinReadyInstance*	- and **MinReadyInstanceRatio*	- are specified and **MinReadyInstanceRatio*	- is set to a number from 0 to 100, the value of MinReadyInstanceRatio*	- takes precedence.***	- For example, if **MinReadyInstances*	- is set to **5, and **MinReadyInstanceRatio*	- is set to **50**, the minimum number of available instances is set to the nearest integer rounded up from the calculated result of the following formula: Current number of instances × **50%**.
	//
	// example:
	//
	// -1
	MinReadyInstanceRatio *int32 `json:"MinReadyInstanceRatio,omitempty" xml:"MinReadyInstanceRatio,omitempty"`
	// The minimum number of available instances. Special values:
	//
	// 	- If you set the value to **0**, business interruptions occur when the application is updated.
	//
	// 	- If you set the value to \\*\\*-1\\*\\*, the minimum number of available instances is automatically set to a system-recommended value. The value is the nearest integer to which the calculated result of the following formula is rounded up: Current number of instances × 25%. For example, if five instances are available, the minimum number of available instances is calculated by using the following formula: 5 × 25% = 1.25. In this case, the minimum number of available instances is 2.
	//
	// > Make sure that at least one instance is available during application deployment and rollback to prevent business interruptions.
	//
	// example:
	//
	// 1
	MinReadyInstances *int32 `json:"MinReadyInstances,omitempty" xml:"MinReadyInstances,omitempty"`
	// The expected number of instances.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5
	Replicas *int32 `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
}

func (s RescaleApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationRequest) GoString() string {
	return s.String()
}

func (s *RescaleApplicationRequest) SetAppId(v string) *RescaleApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RescaleApplicationRequest) SetAutoEnableApplicationScalingRule(v bool) *RescaleApplicationRequest {
	s.AutoEnableApplicationScalingRule = &v
	return s
}

func (s *RescaleApplicationRequest) SetMinReadyInstanceRatio(v int32) *RescaleApplicationRequest {
	s.MinReadyInstanceRatio = &v
	return s
}

func (s *RescaleApplicationRequest) SetMinReadyInstances(v int32) *RescaleApplicationRequest {
	s.MinReadyInstances = &v
	return s
}

func (s *RescaleApplicationRequest) SetReplicas(v int32) *RescaleApplicationRequest {
	s.Replicas = &v
	return s
}

type RescaleApplicationResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response.
	Data *RescaleApplicationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The message returned for the operation.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application is successfully scaled. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RescaleApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RescaleApplicationResponseBody) SetCode(v string) *RescaleApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *RescaleApplicationResponseBody) SetData(v *RescaleApplicationResponseBodyData) *RescaleApplicationResponseBody {
	s.Data = v
	return s
}

func (s *RescaleApplicationResponseBody) SetErrorCode(v string) *RescaleApplicationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RescaleApplicationResponseBody) SetMessage(v string) *RescaleApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *RescaleApplicationResponseBody) SetRequestId(v string) *RescaleApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *RescaleApplicationResponseBody) SetSuccess(v bool) *RescaleApplicationResponseBody {
	s.Success = &v
	return s
}

type RescaleApplicationResponseBodyData struct {
	// The ID of the change order.
	//
	// example:
	//
	// 0e09829f-4914-4612-bc88-6f52fd81****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s RescaleApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *RescaleApplicationResponseBodyData) SetChangeOrderId(v string) *RescaleApplicationResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type RescaleApplicationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RescaleApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RescaleApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationResponse) GoString() string {
	return s.String()
}

func (s *RescaleApplicationResponse) SetHeaders(v map[string]*string) *RescaleApplicationResponse {
	s.Headers = v
	return s
}

func (s *RescaleApplicationResponse) SetStatusCode(v int32) *RescaleApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *RescaleApplicationResponse) SetBody(v *RescaleApplicationResponseBody) *RescaleApplicationResponse {
	s.Body = v
	return s
}

type RescaleApplicationVerticallyRequest struct {
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The destination CPU specification. Unit: millicore.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Cpu *string `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The destination memory size. Unit: MB.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2048
	Memory *string `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s RescaleApplicationVerticallyRequest) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationVerticallyRequest) GoString() string {
	return s.String()
}

func (s *RescaleApplicationVerticallyRequest) SetAppId(v string) *RescaleApplicationVerticallyRequest {
	s.AppId = &v
	return s
}

func (s *RescaleApplicationVerticallyRequest) SetCpu(v string) *RescaleApplicationVerticallyRequest {
	s.Cpu = &v
	return s
}

func (s *RescaleApplicationVerticallyRequest) SetMemory(v string) *RescaleApplicationVerticallyRequest {
	s.Memory = &v
	return s
}

type RescaleApplicationVerticallyResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response.
	Data *RescaleApplicationVerticallyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned if the request fails. For more information, see the **Error codes*	- section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The message returned for the operation.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// AB521DBB-FA78-42E6-803F-A862EA4F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the instance specifications are changed. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0bc3b6f315637273629117900d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RescaleApplicationVerticallyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationVerticallyResponseBody) GoString() string {
	return s.String()
}

func (s *RescaleApplicationVerticallyResponseBody) SetCode(v string) *RescaleApplicationVerticallyResponseBody {
	s.Code = &v
	return s
}

func (s *RescaleApplicationVerticallyResponseBody) SetData(v *RescaleApplicationVerticallyResponseBodyData) *RescaleApplicationVerticallyResponseBody {
	s.Data = v
	return s
}

func (s *RescaleApplicationVerticallyResponseBody) SetErrorCode(v string) *RescaleApplicationVerticallyResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RescaleApplicationVerticallyResponseBody) SetMessage(v string) *RescaleApplicationVerticallyResponseBody {
	s.Message = &v
	return s
}

func (s *RescaleApplicationVerticallyResponseBody) SetRequestId(v string) *RescaleApplicationVerticallyResponseBody {
	s.RequestId = &v
	return s
}

func (s *RescaleApplicationVerticallyResponseBody) SetSuccess(v bool) *RescaleApplicationVerticallyResponseBody {
	s.Success = &v
	return s
}

func (s *RescaleApplicationVerticallyResponseBody) SetTraceId(v string) *RescaleApplicationVerticallyResponseBody {
	s.TraceId = &v
	return s
}

type RescaleApplicationVerticallyResponseBodyData struct {
	// The ID of the change order.
	//
	// example:
	//
	// ffd8cd45-2b5f-415d-b4d0-1003e80b****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s RescaleApplicationVerticallyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationVerticallyResponseBodyData) GoString() string {
	return s.String()
}

func (s *RescaleApplicationVerticallyResponseBodyData) SetChangeOrderId(v string) *RescaleApplicationVerticallyResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type RescaleApplicationVerticallyResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RescaleApplicationVerticallyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RescaleApplicationVerticallyResponse) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationVerticallyResponse) GoString() string {
	return s.String()
}

func (s *RescaleApplicationVerticallyResponse) SetHeaders(v map[string]*string) *RescaleApplicationVerticallyResponse {
	s.Headers = v
	return s
}

func (s *RescaleApplicationVerticallyResponse) SetStatusCode(v int32) *RescaleApplicationVerticallyResponse {
	s.StatusCode = &v
	return s
}

func (s *RescaleApplicationVerticallyResponse) SetBody(v *RescaleApplicationVerticallyResponseBody) *RescaleApplicationVerticallyResponse {
	s.Body = v
	return s
}

type RestartApplicationRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId                            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AutoEnableApplicationScalingRule *bool   `json:"AutoEnableApplicationScalingRule,omitempty" xml:"AutoEnableApplicationScalingRule,omitempty"`
	// The percentage of the minimum number of available instances. Take note of the following rules:
	//
	// 	- If you set the value to **-1**, the minimum number of available instances is not determined based on this parameter. Default value: -1.
	//
	// 	- If you set the value to a number **from 0 to 100**, the minimum number of available instances is calculated by using the following formula: Current number of instances × (Value of MinReadyInstanceRatio × 100%). The value is the nearest integer rounded up from the calculated result. For example, if the percentage is set to **50**% and five instances are available, the minimum number of available instances is 3.
	//
	// > When **MinReadyInstance*	- and **MinReadyInstanceRatio*	- are specified and **MinReadyInstanceRatio*	- is set to a number from 0 to 100, the value of \\*\\*MinReadyInstanceRatio*	- takes precedence.***	- For example, if **MinReadyInstances*	- is set to **5\\*\\*, and **MinReadyInstanceRatio*	- is set to **50**, the minimum number of available instances is set to the nearest integer rounded up from the calculated result of the following formula: Current number of instances × **50%**.
	//
	// example:
	//
	// -1
	MinReadyInstanceRatio *int32 `json:"MinReadyInstanceRatio,omitempty" xml:"MinReadyInstanceRatio,omitempty"`
	// The minimum number of available instances. Special values:
	//
	// 	- If you set the value to **0**, business interruptions occur when the application is updated.
	//
	// 	- If you set the value to \\*\\*-1\\*\\*, the minimum number of available instances is automatically set to a system-recommended value. The value is the nearest integer to which the calculated result of the following formula is rounded up: Current number of instances × 25%. For example, if five instances are available, the minimum number of available instances is calculated by using the following formula: 5 × 25% = 1.25. In this case, the minimum number of available instances is 2.
	//
	// > Make sure that at least one instance is available during application deployment and rollback to prevent business interruptions.
	//
	// example:
	//
	// 1
	MinReadyInstances *int32 `json:"MinReadyInstances,omitempty" xml:"MinReadyInstances,omitempty"`
}

func (s RestartApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationRequest) GoString() string {
	return s.String()
}

func (s *RestartApplicationRequest) SetAppId(v string) *RestartApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RestartApplicationRequest) SetAutoEnableApplicationScalingRule(v bool) *RestartApplicationRequest {
	s.AutoEnableApplicationScalingRule = &v
	return s
}

func (s *RestartApplicationRequest) SetMinReadyInstanceRatio(v int32) *RestartApplicationRequest {
	s.MinReadyInstanceRatio = &v
	return s
}

func (s *RestartApplicationRequest) SetMinReadyInstances(v int32) *RestartApplicationRequest {
	s.MinReadyInstances = &v
	return s
}

type RestartApplicationResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response.
	Data *RestartApplicationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Take note of the following rules:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the instance is successfully restarted. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RestartApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RestartApplicationResponseBody) SetCode(v string) *RestartApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *RestartApplicationResponseBody) SetData(v *RestartApplicationResponseBodyData) *RestartApplicationResponseBody {
	s.Data = v
	return s
}

func (s *RestartApplicationResponseBody) SetErrorCode(v string) *RestartApplicationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RestartApplicationResponseBody) SetMessage(v string) *RestartApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *RestartApplicationResponseBody) SetRequestId(v string) *RestartApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *RestartApplicationResponseBody) SetSuccess(v bool) *RestartApplicationResponseBody {
	s.Success = &v
	return s
}

func (s *RestartApplicationResponseBody) SetTraceId(v string) *RestartApplicationResponseBody {
	s.TraceId = &v
	return s
}

type RestartApplicationResponseBodyData struct {
	// The ID of the change process.
	//
	// example:
	//
	// 4a815998-b468-4bea-b7d8-59f52a44****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s RestartApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *RestartApplicationResponseBodyData) SetChangeOrderId(v string) *RestartApplicationResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type RestartApplicationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RestartApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RestartApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationResponse) GoString() string {
	return s.String()
}

func (s *RestartApplicationResponse) SetHeaders(v map[string]*string) *RestartApplicationResponse {
	s.Headers = v
	return s
}

func (s *RestartApplicationResponse) SetStatusCode(v int32) *RestartApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *RestartApplicationResponse) SetBody(v *RestartApplicationResponseBody) *RestartApplicationResponse {
	s.Body = v
	return s
}

type RestartInstancesRequest struct {
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1daa7236-3844-4f36-b39a-605b0cc0****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the instance to be restarted. Separate multiple instance IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// mysae-1daa7236-3844-4f36-b39a-605b0cc0caa6-*****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s RestartInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartInstancesRequest) GoString() string {
	return s.String()
}

func (s *RestartInstancesRequest) SetAppId(v string) *RestartInstancesRequest {
	s.AppId = &v
	return s
}

func (s *RestartInstancesRequest) SetInstanceIds(v string) *RestartInstancesRequest {
	s.InstanceIds = &v
	return s
}

type RestartInstancesResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the application.
	Data *RestartInstancesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Take note of the following rules:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Specifies whether the instances are successfully restarted. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RestartInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *RestartInstancesResponseBody) SetCode(v string) *RestartInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *RestartInstancesResponseBody) SetData(v *RestartInstancesResponseBodyData) *RestartInstancesResponseBody {
	s.Data = v
	return s
}

func (s *RestartInstancesResponseBody) SetErrorCode(v string) *RestartInstancesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RestartInstancesResponseBody) SetMessage(v string) *RestartInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *RestartInstancesResponseBody) SetRequestId(v string) *RestartInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *RestartInstancesResponseBody) SetSuccess(v bool) *RestartInstancesResponseBody {
	s.Success = &v
	return s
}

func (s *RestartInstancesResponseBody) SetTraceId(v string) *RestartInstancesResponseBody {
	s.TraceId = &v
	return s
}

type RestartInstancesResponseBodyData struct {
	// The ID of the change order.
	//
	// example:
	//
	// 5afa5b98-0c64-4637-983f-15eaa888****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s RestartInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RestartInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *RestartInstancesResponseBodyData) SetChangeOrderId(v string) *RestartInstancesResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type RestartInstancesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RestartInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RestartInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartInstancesResponse) GoString() string {
	return s.String()
}

func (s *RestartInstancesResponse) SetHeaders(v map[string]*string) *RestartInstancesResponse {
	s.Headers = v
	return s
}

func (s *RestartInstancesResponse) SetStatusCode(v int32) *RestartInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *RestartInstancesResponse) SetBody(v *RestartInstancesResponseBody) *RestartInstancesResponse {
	s.Body = v
	return s
}

type RollbackApplicationRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 017f39b8-dfa4-4e16-a84b-1dcee4b1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// Specifies whether to automatically enable an auto scaling policy for the application. Take note of the following rules:
	//
	// 	- **true**: turns on Logon-free Sharing
	//
	// 	- **false**: turns off Logon-free Sharing
	//
	// example:
	//
	// true
	AutoEnableApplicationScalingRule *string `json:"AutoEnableApplicationScalingRule,omitempty" xml:"AutoEnableApplicationScalingRule,omitempty"`
	// The wait time between batches. Unit: seconds.
	//
	// example:
	//
	// 10
	BatchWaitTime *int32 `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	// The percentage of the minimum number of available instances. Take note of the following rules:
	//
	// 	- If you set the value to **-1**, the minimum number of available instances is not determined based on this parameter. Default value: -1.
	//
	// 	- If you set the value to a number **from 0 to 100**, the minimum number of available instances is calculated by using the following formula: Current number of instances × (Value of MinReadyInstanceRatio × 100%). The value is the nearest integer rounded up from the calculated result. For example, if the percentage is set to **50**% and five instances are available, the minimum number of available instances is 3.
	//
	// > When both **MinReadyInstance*	- and **MinReadyInstanceRatio*	- are specified and **MinReadyInstanceRatio*	- is set to a number from 0 to 100, the value of **MinReadyInstanceRatio*	- takes precedence.*	- For example, if **MinReadyInstances*	- is set to **5, and **MinReadyInstanceRatio*	- is set to **50**, the minimum number of available instances is set to the nearest integer rounded up from the calculated result of the following formula: Current number of instances × **50%**.
	//
	// example:
	//
	// -1
	MinReadyInstanceRatio *int32 `json:"MinReadyInstanceRatio,omitempty" xml:"MinReadyInstanceRatio,omitempty"`
	// The minimum number of available instances. Take note of the following rules:
	//
	// 	- If you set the value to **0**, business interruptions occur when the application is updated.
	//
	// 	- If you set the value to \\*\\*-1\\*\\*, the minimum number of available instances is automatically set to a system-recommended value. The value is the nearest integer to which the calculated result of the following formula is rounded up: Current number of instances × 25%. For example, if five instances are available, the minimum number of available instances is calculated by using the following formula: 5 × 25% = 1.25. In this case, the minimum number of available instances is 2.
	//
	// > Make sure that at least one instance is available during application deployment and rollback to prevent business interruptions.
	//
	// example:
	//
	// 1
	MinReadyInstances *int32 `json:"MinReadyInstances,omitempty" xml:"MinReadyInstances,omitempty"`
	// The deployment policy. If the minimum number of available instances is 1, the value of the **UpdateStrategy*	- parameter is an empty string (""). If the minimum number of available instances is larger than 1, specify this parameter based on your requirements. Examples:
	//
	// 	- Perform canary release for one instance and release the remaining instances in two batches automatically with a one-minute interval between the deployment of each instance:
	//
	//     `{"type":"GrayBatchUpdate","batchUpdate":{"batch":2,"releaseType":"auto","batchWaitTime":1},"grayUpdate":{"gray":1}}`
	//
	// 	- Perform canary release for one instance and release the remaining instances in two batches manually:
	//
	//     `{"type":"GrayBatchUpdate","batchUpdate":{"batch":2,"releaseType":"manual"},"grayUpdate":{"gray":1}}`
	//
	// 	- Release the instances in two batches automatically with no interval between the deployment of each instance:
	//
	//     `{"type":"BatchUpdate","batchUpdate":{"batch":2,"releaseType":"auto","batchWaitTime":0}}`
	//
	// The following table describes the parameters that are used in the preceding statements.
	//
	// 	- **type**: the type of the release policy. Valid values: **GrayBatchUpdate*	- and **BatchUpdate**.
	//
	// 	- **batchUpdate**: the phased release policy.
	//
	//     	- **batch**: the number of release batches.
	//
	//     	- **releaseType**: the processing method for the batches. Valid values: **auto*	- and **manual**.
	//
	//     	- **batchWaitTime**: the interval between release batches. Unit: seconds.
	//
	// 	- **grayUpdate**: the number of release batches in the phased release after a canary release. This parameter is returned only if the **type*	- parameter is set to **GrayBatchUpdate**.
	//
	// example:
	//
	// {"type":"GrayBatchUpdate","batchUpdate":{"batch":2,"releaseType":"auto","batchWaitTime":1},"grayUpdate":{"gray":1}}
	UpdateStrategy *string `json:"UpdateStrategy,omitempty" xml:"UpdateStrategy,omitempty"`
	// The ID of the application version. Call the [ListAppVersions](https://help.aliyun.com/document_detail/162054.html) operation to obtain the version ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0026ff7f-2b57-4127-bdd0-9bf202bb9****
	VersionId *string `json:"VersionId,omitempty" xml:"VersionId,omitempty"`
}

func (s RollbackApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationRequest) GoString() string {
	return s.String()
}

func (s *RollbackApplicationRequest) SetAppId(v string) *RollbackApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RollbackApplicationRequest) SetAutoEnableApplicationScalingRule(v string) *RollbackApplicationRequest {
	s.AutoEnableApplicationScalingRule = &v
	return s
}

func (s *RollbackApplicationRequest) SetBatchWaitTime(v int32) *RollbackApplicationRequest {
	s.BatchWaitTime = &v
	return s
}

func (s *RollbackApplicationRequest) SetMinReadyInstanceRatio(v int32) *RollbackApplicationRequest {
	s.MinReadyInstanceRatio = &v
	return s
}

func (s *RollbackApplicationRequest) SetMinReadyInstances(v int32) *RollbackApplicationRequest {
	s.MinReadyInstances = &v
	return s
}

func (s *RollbackApplicationRequest) SetUpdateStrategy(v string) *RollbackApplicationRequest {
	s.UpdateStrategy = &v
	return s
}

func (s *RollbackApplicationRequest) SetVersionId(v string) *RollbackApplicationRequest {
	s.VersionId = &v
	return s
}

type RollbackApplicationResponseBody struct {
	// The HTTP status code. Take note of the following rules:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response.
	Data *RollbackApplicationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned if the request failed. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The message returned for the operation.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application is successfully rolled back. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RollbackApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponseBody) SetCode(v string) *RollbackApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetData(v *RollbackApplicationResponseBodyData) *RollbackApplicationResponseBody {
	s.Data = v
	return s
}

func (s *RollbackApplicationResponseBody) SetErrorCode(v string) *RollbackApplicationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetMessage(v string) *RollbackApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetRequestId(v string) *RollbackApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetSuccess(v bool) *RollbackApplicationResponseBody {
	s.Success = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetTraceId(v string) *RollbackApplicationResponseBody {
	s.TraceId = &v
	return s
}

type RollbackApplicationResponseBodyData struct {
	// The ID of the change process.
	//
	// example:
	//
	// 01db03d3-3ee9-48b3-b3d0-dfce2d88****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	// Specifies whether approval is required when a RAM user performs release. Take note of the following rules:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	IsNeedApproval *bool `json:"IsNeedApproval,omitempty" xml:"IsNeedApproval,omitempty"`
}

func (s RollbackApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponseBodyData) SetChangeOrderId(v string) *RollbackApplicationResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

func (s *RollbackApplicationResponseBodyData) SetIsNeedApproval(v bool) *RollbackApplicationResponseBodyData {
	s.IsNeedApproval = &v
	return s
}

type RollbackApplicationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RollbackApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RollbackApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponse) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponse) SetHeaders(v map[string]*string) *RollbackApplicationResponse {
	s.Headers = v
	return s
}

func (s *RollbackApplicationResponse) SetStatusCode(v int32) *RollbackApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *RollbackApplicationResponse) SetBody(v *RollbackApplicationResponseBody) *RollbackApplicationResponse {
	s.Body = v
	return s
}

type StartApplicationRequest struct {
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s StartApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationRequest) GoString() string {
	return s.String()
}

func (s *StartApplicationRequest) SetAppId(v string) *StartApplicationRequest {
	s.AppId = &v
	return s
}

type StartApplicationResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result.
	Data *StartApplicationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Take note of the following rules:
	//
	// 	- If the call is successful, **ErrorCode*	- is not returned.
	//
	// 	- If the call fails, **ErrorCode*	- is returned. For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message. Take note of the following rules:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7BD8F4C7-D84C-4D46-9885-8212997E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application is started. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0bc3b6e215637275918588187d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s StartApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StartApplicationResponseBody) SetCode(v string) *StartApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StartApplicationResponseBody) SetData(v *StartApplicationResponseBodyData) *StartApplicationResponseBody {
	s.Data = v
	return s
}

func (s *StartApplicationResponseBody) SetErrorCode(v string) *StartApplicationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StartApplicationResponseBody) SetMessage(v string) *StartApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StartApplicationResponseBody) SetRequestId(v string) *StartApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartApplicationResponseBody) SetSuccess(v bool) *StartApplicationResponseBody {
	s.Success = &v
	return s
}

func (s *StartApplicationResponseBody) SetTraceId(v string) *StartApplicationResponseBody {
	s.TraceId = &v
	return s
}

type StartApplicationResponseBodyData struct {
	// The ID of the change order.
	//
	// example:
	//
	// 4a815998-b468-4bea-b7d8-59f52a44****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s StartApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *StartApplicationResponseBodyData) SetChangeOrderId(v string) *StartApplicationResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type StartApplicationResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationResponse) GoString() string {
	return s.String()
}

func (s *StartApplicationResponse) SetHeaders(v map[string]*string) *StartApplicationResponse {
	s.Headers = v
	return s
}

func (s *StartApplicationResponse) SetStatusCode(v int32) *StartApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *StartApplicationResponse) SetBody(v *StartApplicationResponseBody) *StartApplicationResponse {
	s.Body = v
	return s
}

type StartWebApplicationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s StartWebApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StartWebApplicationRequest) GoString() string {
	return s.String()
}

func (s *StartWebApplicationRequest) SetNamespaceId(v string) *StartWebApplicationRequest {
	s.NamespaceId = &v
	return s
}

type StartWebApplicationResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartWebApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StartWebApplicationResponse) GoString() string {
	return s.String()
}

func (s *StartWebApplicationResponse) SetHeaders(v map[string]*string) *StartWebApplicationResponse {
	s.Headers = v
	return s
}

func (s *StartWebApplicationResponse) SetStatusCode(v int32) *StartWebApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *StartWebApplicationResponse) SetBody(v *WebApplicationBody) *StartWebApplicationResponse {
	s.Body = v
	return s
}

type StopApplicationRequest struct {
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s StopApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationRequest) GoString() string {
	return s.String()
}

func (s *StopApplicationRequest) SetAppId(v string) *StopApplicationRequest {
	s.AppId = &v
	return s
}

type StopApplicationResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error code.
	//
	// 	- If the request is successful, this parameter is not returned.****
	//
	// 	- This parameter is returned only if the request failed.***	- For more information, see **Error codes*	- in this topic.
	Data *StopApplicationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// Indicates whether the specified application is stopped. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned data.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the change order.
	//
	// example:
	//
	// 0bc3b6e215637275918588187d****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s StopApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StopApplicationResponseBody) SetCode(v string) *StopApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StopApplicationResponseBody) SetData(v *StopApplicationResponseBodyData) *StopApplicationResponseBody {
	s.Data = v
	return s
}

func (s *StopApplicationResponseBody) SetErrorCode(v string) *StopApplicationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StopApplicationResponseBody) SetMessage(v string) *StopApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StopApplicationResponseBody) SetRequestId(v string) *StopApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopApplicationResponseBody) SetSuccess(v bool) *StopApplicationResponseBody {
	s.Success = &v
	return s
}

func (s *StopApplicationResponseBody) SetTraceId(v string) *StopApplicationResponseBody {
	s.TraceId = &v
	return s
}

type StopApplicationResponseBodyData struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 4a815998-b468-4bea-b7d8-59f52a44****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s StopApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *StopApplicationResponseBodyData) SetChangeOrderId(v string) *StopApplicationResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type StopApplicationResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationResponse) GoString() string {
	return s.String()
}

func (s *StopApplicationResponse) SetHeaders(v map[string]*string) *StopApplicationResponse {
	s.Headers = v
	return s
}

func (s *StopApplicationResponse) SetStatusCode(v int32) *StopApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *StopApplicationResponse) SetBody(v *StopApplicationResponseBody) *StopApplicationResponse {
	s.Body = v
	return s
}

type StopWebApplicationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s StopWebApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StopWebApplicationRequest) GoString() string {
	return s.String()
}

func (s *StopWebApplicationRequest) SetNamespaceId(v string) *StopWebApplicationRequest {
	s.NamespaceId = &v
	return s
}

type StopWebApplicationResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopWebApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StopWebApplicationResponse) GoString() string {
	return s.String()
}

func (s *StopWebApplicationResponse) SetHeaders(v map[string]*string) *StopWebApplicationResponse {
	s.Headers = v
	return s
}

func (s *StopWebApplicationResponse) SetStatusCode(v int32) *StopWebApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *StopWebApplicationResponse) SetBody(v *WebApplicationBody) *StopWebApplicationResponse {
	s.Body = v
	return s
}

type SuspendJobRequest struct {
	// The ID of the job template.
	//
	// This parameter is required.
	//
	// example:
	//
	// ee1a7a07-abcb-4652-a1d3-2d57f415****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// Specifies whether to suspend the job template.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Suspend *bool `json:"Suspend,omitempty" xml:"Suspend,omitempty"`
}

func (s SuspendJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendJobRequest) GoString() string {
	return s.String()
}

func (s *SuspendJobRequest) SetAppId(v string) *SuspendJobRequest {
	s.AppId = &v
	return s
}

func (s *SuspendJobRequest) SetSuspend(v bool) *SuspendJobRequest {
	s.Suspend = &v
	return s
}

type SuspendJobResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Whether the execution is successful.
	//
	// example:
	//
	// {success: true}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error code returned. Valid values:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 67DD9A98-9CCC-5BE8-8C9E-B45E72F4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the job was executed. Valid values:
	//
	// 	- **true**: The job was executed.
	//
	// 	- **false**: The job failed to be executed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0b87b7e716575071334387401e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s SuspendJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendJobResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendJobResponseBody) SetCode(v string) *SuspendJobResponseBody {
	s.Code = &v
	return s
}

func (s *SuspendJobResponseBody) SetData(v string) *SuspendJobResponseBody {
	s.Data = &v
	return s
}

func (s *SuspendJobResponseBody) SetErrorCode(v string) *SuspendJobResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SuspendJobResponseBody) SetMessage(v string) *SuspendJobResponseBody {
	s.Message = &v
	return s
}

func (s *SuspendJobResponseBody) SetRequestId(v string) *SuspendJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendJobResponseBody) SetSuccess(v bool) *SuspendJobResponseBody {
	s.Success = &v
	return s
}

func (s *SuspendJobResponseBody) SetTraceId(v string) *SuspendJobResponseBody {
	s.TraceId = &v
	return s
}

type SuspendJobResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SuspendJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SuspendJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendJobResponse) GoString() string {
	return s.String()
}

func (s *SuspendJobResponse) SetHeaders(v map[string]*string) *SuspendJobResponse {
	s.Headers = v
	return s
}

func (s *SuspendJobResponse) SetStatusCode(v int32) *SuspendJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendJobResponse) SetBody(v *SuspendJobResponseBody) *SuspendJobResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	// application
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// ["d42921c4-5433-4abd-8075-0e536f8b****"]
	ResourceIds *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	// [{"key":"k1","value":"v1"}]
	//
	// This parameter is required.
	//
	// example:
	//
	// application
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// ["d42921c4-5433-4abd-8075-0e536f8b\\*\\*\\*\\*"]
	//
	// example:
	//
	// [{"key":"k1","value":"v1"}]
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceIds(v string) *TagResourcesRequest {
	s.ResourceIds = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTags(v string) *TagResourcesRequest {
	s.Tags = &v
	return s
}

type TagResourcesResponseBody struct {
	// Indicates whether tags were added to the specified resources successfully. Valid values:
	//
	// 	- **true**: indicates that tags were added to the specified resources successfully.
	//
	// 	- **false**: indicates that tags could not be added to the specified resources.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// Indicates that the operation was successful.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetCode(v string) *TagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *TagResourcesResponseBody) SetData(v bool) *TagResourcesResponseBody {
	s.Data = &v
	return s
}

func (s *TagResourcesResponseBody) SetErrorCode(v string) *TagResourcesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *TagResourcesResponseBody) SetMessage(v string) *TagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *TagResourcesResponseBody) SetSuccess(v bool) *TagResourcesResponseBody {
	s.Success = &v
	return s
}

func (s *TagResourcesResponseBody) SetTraceId(v string) *TagResourcesResponseBody {
	s.TraceId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UnbindSlbRequest struct {
	// true
	//
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// true
	//
	// example:
	//
	// true
	Internet *bool `json:"Internet,omitempty" xml:"Internet,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// true
	Intranet *bool `json:"Intranet,omitempty" xml:"Intranet,omitempty"`
}

func (s UnbindSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbRequest) GoString() string {
	return s.String()
}

func (s *UnbindSlbRequest) SetAppId(v string) *UnbindSlbRequest {
	s.AppId = &v
	return s
}

func (s *UnbindSlbRequest) SetInternet(v bool) *UnbindSlbRequest {
	s.Internet = &v
	return s
}

func (s *UnbindSlbRequest) SetIntranet(v bool) *UnbindSlbRequest {
	s.Intranet = &v
	return s
}

type UnbindSlbResponseBody struct {
	// Indicates whether the internal-facing or Internet-facing SLB instance was disassociated successfully. Valid values:
	//
	// 	- **true**: The SLB instance was disassociated successfully.
	//
	// 	- **false**: The SLB instance could not be disassociated.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the change order. It can be used to query the task status.
	Data *UnbindSlbResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The returned data.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UnbindSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindSlbResponseBody) SetCode(v string) *UnbindSlbResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindSlbResponseBody) SetData(v *UnbindSlbResponseBodyData) *UnbindSlbResponseBody {
	s.Data = v
	return s
}

func (s *UnbindSlbResponseBody) SetErrorCode(v string) *UnbindSlbResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UnbindSlbResponseBody) SetMessage(v string) *UnbindSlbResponseBody {
	s.Message = &v
	return s
}

func (s *UnbindSlbResponseBody) SetRequestId(v string) *UnbindSlbResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnbindSlbResponseBody) SetSuccess(v bool) *UnbindSlbResponseBody {
	s.Success = &v
	return s
}

func (s *UnbindSlbResponseBody) SetTraceId(v string) *UnbindSlbResponseBody {
	s.TraceId = &v
	return s
}

type UnbindSlbResponseBodyData struct {
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// 4a815998-b468-4bea-b7d8-59f52a44****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s UnbindSlbResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbResponseBodyData) GoString() string {
	return s.String()
}

func (s *UnbindSlbResponseBodyData) SetChangeOrderId(v string) *UnbindSlbResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type UnbindSlbResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindSlbResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbResponse) GoString() string {
	return s.String()
}

func (s *UnbindSlbResponse) SetHeaders(v map[string]*string) *UnbindSlbResponse {
	s.Headers = v
	return s
}

func (s *UnbindSlbResponse) SetStatusCode(v int32) *UnbindSlbResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindSlbResponse) SetBody(v *UnbindSlbResponseBody) *UnbindSlbResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// false
	//
	// example:
	//
	// false
	DeleteAll *bool `json:"DeleteAll,omitempty" xml:"DeleteAll,omitempty"`
	// cn-beijing
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// ["d42921c4-5433-4abd-8075-0e536f8b\\*\\*\\*\\*"]
	//
	// This parameter is required.
	//
	// example:
	//
	// ["d42921c4-5433-4abd-8075-0e536f8b****"]
	ResourceIds *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	// application
	//
	// This parameter is required.
	//
	// example:
	//
	// application
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// ["k1","k2"]
	//
	// example:
	//
	// ["k1","k2"]
	TagKeys *string `json:"TagKeys,omitempty" xml:"TagKeys,omitempty"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetDeleteAll(v bool) *UntagResourcesRequest {
	s.DeleteAll = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceIds(v string) *UntagResourcesRequest {
	s.ResourceIds = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKeys(v string) *UntagResourcesRequest {
	s.TagKeys = &v
	return s
}

type UntagResourcesResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	//
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the tags were removed. Valid values:
	//
	// 	- **true**: The tags were removed.
	//
	// 	- **false**: The tags could not be removed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the trace. It can be used to query details of a request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetCode(v string) *UntagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *UntagResourcesResponseBody) SetData(v bool) *UntagResourcesResponseBody {
	s.Data = &v
	return s
}

func (s *UntagResourcesResponseBody) SetErrorCode(v string) *UntagResourcesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UntagResourcesResponseBody) SetMessage(v string) *UntagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UntagResourcesResponseBody) SetSuccess(v bool) *UntagResourcesResponseBody {
	s.Success = &v
	return s
}

func (s *UntagResourcesResponseBody) SetTraceId(v string) *UntagResourcesResponseBody {
	s.TraceId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpdateAppSecurityGroupRequest struct {
	// sg-wz969ngg2e49q5i4\\*\\*\\*\\*
	//
	// This parameter is required.
	//
	// example:
	//
	// 017f39b8-dfa4-4e16-a84b-1dcee4b1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-wz969ngg2e49q5i4****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s UpdateAppSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppSecurityGroupRequest) SetAppId(v string) *UpdateAppSecurityGroupRequest {
	s.AppId = &v
	return s
}

func (s *UpdateAppSecurityGroupRequest) SetSecurityGroupId(v string) *UpdateAppSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

type UpdateAppSecurityGroupResponseBody struct {
	// Indicates whether the security group of the application is successfully updated. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It can be used to query details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// 	- If the request is successful, **success*	- is returned.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The error code.
	//
	// 	- If the request is successful, this parameter is not returned.****
	//
	// 	- This parameter is returned only if the request failed.***	- For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateAppSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAppSecurityGroupResponseBody) SetCode(v string) *UpdateAppSecurityGroupResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAppSecurityGroupResponseBody) SetErrorCode(v string) *UpdateAppSecurityGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateAppSecurityGroupResponseBody) SetMessage(v string) *UpdateAppSecurityGroupResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAppSecurityGroupResponseBody) SetRequestId(v string) *UpdateAppSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAppSecurityGroupResponseBody) SetSuccess(v bool) *UpdateAppSecurityGroupResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateAppSecurityGroupResponseBody) SetTraceId(v string) *UpdateAppSecurityGroupResponseBody {
	s.TraceId = &v
	return s
}

type UpdateAppSecurityGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAppSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAppSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppSecurityGroupResponse) SetHeaders(v map[string]*string) *UpdateAppSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateAppSecurityGroupResponse) SetStatusCode(v int32) *UpdateAppSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAppSecurityGroupResponse) SetBody(v *UpdateAppSecurityGroupResponseBody) *UpdateAppSecurityGroupResponse {
	s.Body = v
	return s
}

type UpdateApplicationDescriptionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// newdesc
	AppDescription *string `json:"AppDescription,omitempty" xml:"AppDescription,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s UpdateApplicationDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationDescriptionRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicationDescriptionRequest) SetAppDescription(v string) *UpdateApplicationDescriptionRequest {
	s.AppDescription = &v
	return s
}

func (s *UpdateApplicationDescriptionRequest) SetAppId(v string) *UpdateApplicationDescriptionRequest {
	s.AppId = &v
	return s
}

type UpdateApplicationDescriptionResponseBody struct {
	// example:
	//
	// 200
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 01CF26C7-00A3-4AA6-BA76-7E95F2A3***
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// ac1a0b2215622246421415014e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateApplicationDescriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateApplicationDescriptionResponseBody) SetCode(v string) *UpdateApplicationDescriptionResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateApplicationDescriptionResponseBody) SetErrorCode(v string) *UpdateApplicationDescriptionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateApplicationDescriptionResponseBody) SetMessage(v string) *UpdateApplicationDescriptionResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateApplicationDescriptionResponseBody) SetRequestId(v string) *UpdateApplicationDescriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateApplicationDescriptionResponseBody) SetSuccess(v bool) *UpdateApplicationDescriptionResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateApplicationDescriptionResponseBody) SetTraceId(v string) *UpdateApplicationDescriptionResponseBody {
	s.TraceId = &v
	return s
}

type UpdateApplicationDescriptionResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateApplicationDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateApplicationDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationDescriptionResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicationDescriptionResponse) SetHeaders(v map[string]*string) *UpdateApplicationDescriptionResponse {
	s.Headers = v
	return s
}

func (s *UpdateApplicationDescriptionResponse) SetStatusCode(v int32) *UpdateApplicationDescriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateApplicationDescriptionResponse) SetBody(v *UpdateApplicationDescriptionResponseBody) *UpdateApplicationDescriptionResponse {
	s.Body = v
	return s
}

type UpdateApplicationScalingRuleRequest struct {
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EnableIdle *bool   `json:"EnableIdle,omitempty" xml:"EnableIdle,omitempty"`
	// The percentage of the minimum number of available instances. Take note of the following rules:
	//
	// 	- If you set the value to **-1**, the minimum number of available instances is not determined based on this parameter. This is the default value.
	//
	// 	- If you set the value to a number **from 0 to 100**, the minimum number of available instances is calculated by using the following formula: Current number of instances × (Value of MinReadyInstanceRatio × 100%). The value is the nearest integer rounded up from the calculated result. For example, if you set this parameter to **50**, and five instances are available, the minimum number of available instances is 3.
	//
	// > When **MinReadyInstance*	- and **MinReadyInstanceRatio*	- are specified and **MinReadyInstanceRatio*	- is set to a number from 0 to 100, the value of \\*\\*MinReadyInstanceRatio*	- takes precedence.***	- For example, if **MinReadyInstances*	- is set to **5\\*\\*, and **MinReadyInstanceRatio*	- is set to **50**, the minimum number of available instances is set to the nearest integer rounded up from the calculated result of the following formula: Current number of instances × **50%**.
	//
	// example:
	//
	// -1
	MinReadyInstanceRatio *int32 `json:"MinReadyInstanceRatio,omitempty" xml:"MinReadyInstanceRatio,omitempty"`
	// The minimum number of available instances. Take note of the following rules:
	//
	// 	- If you set the value to **0**, business interruptions occur when the auto-scaling policy is updated.
	//
	// 	- If you set the value to \\*\\*-1\\*\\*, the minimum number of available instances is automatically set to a system-recommended value. The value is the nearest integer to which the calculated result of the following formula is rounded up: Current number of instances × 25%. For example, if five instances are available, the minimum number of available instances is calculated by using the following formula: 5 × 25% = 1.25. In this case, the minimum number of available instances is 2.
	//
	// > Make sure that at least one instance is available during application deployment and rollback to prevent business interruptions.
	//
	// example:
	//
	// 3
	MinReadyInstances *int32 `json:"MinReadyInstances,omitempty" xml:"MinReadyInstances,omitempty"`
	// The configurations of the metric-based auto scaling policy. This parameter is required if you set the ScalingRuleType parameter to metric.
	//
	// Parameter description:
	//
	// 	- **maxReplicas**: the maximum number of instances in the application.
	//
	// 	- **minReplicas**: the minimum number of instances in the application.
	//
	// 	- **metricType**: the metric that is used to trigger the auto scaling policy.
	//
	//     	- **CPU**: the CPU utilization.
	//
	//     	- **MEMORY**: the memory usage.
	//
	//     	- **tcpActiveConn**: the average number of active TCP connections in an application instance within 30 seconds.
	//
	//     	- **SLB_QPS**: the average queries per second (QPS) of the Internet-facing Server Load Balancer (SLB) instance associated with an application instance within 15 seconds.
	//
	//     	- **SLB_RT**: the average response time of the Internet-facing SLB instance within 15 seconds.
	//
	// 	- **metricTargetAverageUtilization**: the limit on the metric specified by the **metricType*	- parameter.
	//
	//     	- The limit on the CPU utilization. Unit: percentage.
	//
	//     	- The limit on the memory usage. Unit: percentage.
	//
	//     	- The limit on the average number of active TCP connections per second.
	//
	//     	- The limit on the QPS of the Internet-facing SLB instance.
	//
	//     	- The limit on the response time of the Internet-facing SLB instance. Unit: milliseconds.
	//
	// 	- **SlbProject**: the Log Service project.
	//
	// 	- **SlbLogstore**: the Log Service Logstore.
	//
	// 	- **Vport**: the listener port for the SLB instance. HTTP and HTTPS are supported.
	//
	// 	- **scaleUpRules**: the scale-out rule.
	//
	// 	- **scaleDownRules**: the scale-in rule.
	//
	// 	- **step**: the scale-out or scale-in step size. The maximum number of instances that can be added or removed per unit time.
	//
	// 	- **disabled**: specifies whether to disable the application scale-in. If you set this parameter to true, the application instances are never scaled in. This prevents business risks during peak hours.
	//
	//     	- **true**: disables the application scale-in.
	//
	//     	- **false**: enables the application scale-in. Default value: false.
	//
	// 	- **stabilizationWindowSeconds**: the cooldown period during which the system is stable and does not perform scale-out or scale-in operations. Valid values: 0 to 3600. Unit: seconds. Default value: 0.
	//
	// > You can specify one or more metrics as the trigger conditions of the auto scaling policy. If you specify multiple metrics, the application is scaled out when the value of a metric is greater than or equal to the limit. The number of application instances after the scale-out cannot exceed the configured maximum number of application instances. If the values of all the metrics are less than the limits, the application is scaled in. The number of instances after the scale-in cannot be less than the configured minimum number of application instances.
	//
	// example:
	//
	// {"maxReplicas":3,"minReplicas":1,"metrics":[{"metricType":"CPU","metricTargetAverageUtilization":20},{"metricType":"MEMORY","metricTargetAverageUtilization":30},{"metricType":"tcpActiveConn","metricTargetAverageUtilization":20},{"metricType":"SLB_QPS","MetricTargetAverageUtilization":25,"SlbProject":"aliyun-fc-cn-hangzhou-d95881d9-5d3c-5f26-a6b8-************","SlbLogstore":"function-log","Vport":"80"},{"metricType":"SLB_RT","MetricTargetAverageUtilization":35,"SlbProject":"aliyun-fc-cn-hangzhou-d95881d9-5d3c-5f26-a6b8-************","SlbLogstore":"function-log","Vport":"80"}],"scaleUpRules":{"step":"100","disabled":false,"stabilizationWindowSeconds":0},"scaleDownRules":{"step":"100","disabled":false,"stabilizationWindowSeconds":300}}
	ScalingRuleMetric *string `json:"ScalingRuleMetric,omitempty" xml:"ScalingRuleMetric,omitempty"`
	// The name of the auto scaling policy. The name must start with a lowercase letter and can contain only lowercase letters, digits, and hyphens (-). The name cannot exceed 32 characters in length.
	//
	// > You cannot change the names of created policies.
	//
	// This parameter is required.
	//
	// example:
	//
	// timer-0800-2100
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	// The configurations of the scheduled auto scaling policy. This parameter is required when you set the ScalingRuleType parameter to timing or when you want to create a scheduled auto scaling policy by using an SDK.
	//
	// Parameter description:
	//
	// 	- **beginDate*	- and **endDate**: specify the validity period of the scheduled auto scaling policy. **beginDate*	- specifies the start date and **endDate*	- specifies the end date. Take note of the following rules:
	//
	//     	- If you set the two parameters to **null**, the scheduled auto scaling policy is a long-term policy. Default values of the beginDate and endDate parameters: null.
	//
	//     	- If you set the two parameters to specific dates, the scheduled auto scaling policy can be triggered during the period between the two dates. For example, if you set **beginDate*	- to **2021-03-25*	- and **endDate*	- to **2021-04-25**, the auto scaling policy is valid for one month.
	//
	// 	- **period**: specifies the frequency at which the scheduled auto scaling policy is executed. Valid values:
	//
	//     	- **\\	- \\	- \\***: The scheduled auto scaling policy is executed at a specified point in time every day.
	//
	//     	- **\\	- \\	- Fri,Mon**: The scheduled auto scaling policy is executed at a specified point in time on one or more specified days of each week. GMT+8 is used. Valid values:
	//
	//         	- **Sun**
	//
	//         	- **Mon**
	//
	//         	- **Tue**
	//
	//         	- **Wed**
	//
	//         	- **Thu**
	//
	//         	- **Fri**
	//
	//         	- **Sat**
	//
	//     	- **1,2,3,28,31 \\	- \\***: The scheduled auto scaling policy is executed at a specified point in time on one or more days of each month. Valid values: 1 to 31. If the month does not have a 31st day, the auto scaling policy is executed on the specified days other than the 31st day.
	//
	// 	- **schedules**: specifies the points in time at which the auto scaling policy is triggered and the number of application instances that are retained during the corresponding period of time. You can specify up to 20 points in time. Parameter description:
	//
	//     	- **atTime**: the point in time at which the policy is triggered. Format: **Hour:Minute**. Example: **08:00**.
	//
	//     	- **targetReplicas**: specifies the number of application instances that you want to maintain by using this policy. You can also set the value to the minimum number of available instances required for each application release. Valid values: 1 to 50.
	//
	//         **
	//
	//         **Note**Make sure that at least **one*	- instance is available during the application deployment and rollback to prevent your business from being interrupted. If you set the value to **0**, business interruptions occur when the application is updated.
	//
	// example:
	//
	// {"beginDate":null,"endDate":null,"period":"	- 	- *","schedules":[{"atTime":"08:00","targetReplicas":10},{"atTime":"20:00","targetReplicas":3}]}
	ScalingRuleTimer *string `json:"ScalingRuleTimer,omitempty" xml:"ScalingRuleTimer,omitempty"`
}

func (s UpdateApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleRequest) SetAppId(v string) *UpdateApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetEnableIdle(v bool) *UpdateApplicationScalingRuleRequest {
	s.EnableIdle = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetMinReadyInstanceRatio(v int32) *UpdateApplicationScalingRuleRequest {
	s.MinReadyInstanceRatio = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetMinReadyInstances(v int32) *UpdateApplicationScalingRuleRequest {
	s.MinReadyInstances = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetScalingRuleMetric(v string) *UpdateApplicationScalingRuleRequest {
	s.ScalingRuleMetric = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetScalingRuleName(v string) *UpdateApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetScalingRuleTimer(v string) *UpdateApplicationScalingRuleRequest {
	s.ScalingRuleTimer = &v
	return s
}

type UpdateApplicationScalingRuleResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result.
	Data *UpdateApplicationScalingRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Take note of the following rules:
	//
	// 	- If the call is successful, **ErrorCode*	- is not returned.
	//
	// 	- If the call fails, **ErrorCode*	- is returned. For more information, see the "**Error codes**" section in this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned message. Take note of the following rules:
	//
	// 	- If the call is successful, **success*	- is returned.
	//
	// 	- If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Specifies whether the instances are successfully restarted. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBody) SetCode(v string) *UpdateApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetData(v *UpdateApplicationScalingRuleResponseBodyData) *UpdateApplicationScalingRuleResponseBody {
	s.Data = v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetErrorCode(v string) *UpdateApplicationScalingRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetMessage(v string) *UpdateApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetRequestId(v string) *UpdateApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetSuccess(v bool) *UpdateApplicationScalingRuleResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetTraceId(v string) *UpdateApplicationScalingRuleResponseBody {
	s.TraceId = &v
	return s
}

type UpdateApplicationScalingRuleResponseBodyData struct {
	// The application ID.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The time when the auto scaling policy was created. Unit: milliseconds.
	//
	// example:
	//
	// 1616642248938
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EnableIdle *bool  `json:"EnableIdle,omitempty" xml:"EnableIdle,omitempty"`
	// The time when the auto scaling policy was last disabled.
	//
	// example:
	//
	// 1641882854484
	LastDisableTime *int64 `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty"`
	// The details of the metric-based auto scaling policy.
	Metric *UpdateApplicationScalingRuleResponseBodyDataMetric `json:"Metric,omitempty" xml:"Metric,omitempty" type:"Struct"`
	// Specifies whether to enable the auto scaling policy. Valid values:
	//
	// 	- **true**: The auto scaling policy is enabled.
	//
	// 	- **false**: The auto scaling policy is disabled.
	//
	// example:
	//
	// true
	ScaleRuleEnabled *bool `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	// The name of the auto scaling policy.
	//
	// example:
	//
	// test
	ScaleRuleName *string `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty"`
	// The type of the auto scaling policy. Valid values:
	//
	// 	- **timing**: a scheduled auto scaling policy
	//
	// 	- **metric**: a metric-based auto scaling policy
	//
	// 	- **mix**: a hybrid auto scaling policy
	//
	// example:
	//
	// timing
	ScaleRuleType *string `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	// The details of the scheduled auto scaling policy.
	Timer *UpdateApplicationScalingRuleResponseBodyDataTimer `json:"Timer,omitempty" xml:"Timer,omitempty" type:"Struct"`
	// The time when the auto scaling policy was updated. Unit: milliseconds.
	//
	// example:
	//
	// 1616642248938
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetAppId(v string) *UpdateApplicationScalingRuleResponseBodyData {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetCreateTime(v int64) *UpdateApplicationScalingRuleResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetEnableIdle(v bool) *UpdateApplicationScalingRuleResponseBodyData {
	s.EnableIdle = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetLastDisableTime(v int64) *UpdateApplicationScalingRuleResponseBodyData {
	s.LastDisableTime = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetMetric(v *UpdateApplicationScalingRuleResponseBodyDataMetric) *UpdateApplicationScalingRuleResponseBodyData {
	s.Metric = v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetScaleRuleEnabled(v bool) *UpdateApplicationScalingRuleResponseBodyData {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetScaleRuleName(v string) *UpdateApplicationScalingRuleResponseBodyData {
	s.ScaleRuleName = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetScaleRuleType(v string) *UpdateApplicationScalingRuleResponseBodyData {
	s.ScaleRuleType = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetTimer(v *UpdateApplicationScalingRuleResponseBodyDataTimer) *UpdateApplicationScalingRuleResponseBodyData {
	s.Timer = v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyData) SetUpdateTime(v int64) *UpdateApplicationScalingRuleResponseBodyData {
	s.UpdateTime = &v
	return s
}

type UpdateApplicationScalingRuleResponseBodyDataMetric struct {
	// The maximum number of instances.
	//
	// example:
	//
	// 3
	MaxReplicas *int32 `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	// The metrics that are used to trigger the auto scaling policy.
	Metrics []*UpdateApplicationScalingRuleResponseBodyDataMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	// The minimum number of instances.
	//
	// example:
	//
	// 1
	MinReplicas *int32 `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBodyDataMetric) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyDataMetric) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyDataMetric) SetMaxReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyDataMetric {
	s.MaxReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataMetric) SetMetrics(v []*UpdateApplicationScalingRuleResponseBodyDataMetricMetrics) *UpdateApplicationScalingRuleResponseBodyDataMetric {
	s.Metrics = v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataMetric) SetMinReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyDataMetric {
	s.MinReplicas = &v
	return s
}

type UpdateApplicationScalingRuleResponseBodyDataMetricMetrics struct {
	// The limit on the metric.
	//
	// 	- The limit on the CPU utilization. Unit: percentage.
	//
	// 	- The limit on the memory usage. Unit: percentage.
	//
	// 	- The limit on the average number of active TCP connections per second.
	//
	// 	- The limit on the QPS of the Internet-facing SLB instance.
	//
	// 	- The limit on the response time of the Internet-facing SLB instance. Unit: milliseconds.
	//
	// example:
	//
	// 20
	MetricTargetAverageUtilization *int32 `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty"`
	// The metric that is used to trigger the auto scaling policy. Valid values:
	//
	// 	- **CPU**: the CPU utilization.
	//
	// 	- **MEMORY**: the memory usage.
	//
	// 	- **tcpActiveConn**: the average number of active TCP connections of an application instance within 30 seconds.
	//
	// 	- **SLB_QPS**: the average QPS of the Internet-facing SLB instance associated with an application instance within 15 seconds.
	//
	// 	- **SLB_RT**: the average response time of the Internet-facing SLB instance within 15 seconds.
	//
	// example:
	//
	// CPU
	MetricType  *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	SlbId       *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbLogstore *string `json:"SlbLogstore,omitempty" xml:"SlbLogstore,omitempty"`
	SlbProject  *string `json:"SlbProject,omitempty" xml:"SlbProject,omitempty"`
	Vport       *string `json:"Vport,omitempty" xml:"Vport,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBodyDataMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyDataMetricMetrics) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics) SetMetricTargetAverageUtilization(v int32) *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics) SetMetricType(v string) *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.MetricType = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics) SetSlbId(v string) *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.SlbId = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics) SetSlbLogstore(v string) *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.SlbLogstore = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics) SetSlbProject(v string) *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.SlbProject = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics) SetVport(v string) *UpdateApplicationScalingRuleResponseBodyDataMetricMetrics {
	s.Vport = &v
	return s
}

type UpdateApplicationScalingRuleResponseBodyDataTimer struct {
	// The start date of the validity period of the scheduled auto scaling policy. Parameter description:
	//
	// 	- If **BeginDate*	- and **EndDate*	- are set to **null**, the auto scaling policy is a long-term policy. Default values of the beginDate and endDate parameters: null.
	//
	// 	- If the two parameters are set to specific dates, the scheduled auto scaling policy can be triggered during the period between the two dates. For example, if **BeginDate*	- is set to 2021-03-25 and **EndDate*	- is set to 2021-04-25, the auto scaling policy is valid for one month.
	//
	// example:
	//
	// 2021-03-25
	BeginDate *string `json:"BeginDate,omitempty" xml:"BeginDate,omitempty"`
	// The end date of the validity period of the scheduled auto scaling policy. Take note of the following rules:
	//
	// 	- If **BeginDate*	- and **EndDate*	- are set to **null**, the auto scaling policy is a long-term policy. Default values of the beginDate and endDate parameters: null.
	//
	// 	- If the two parameters are set to specific dates, the scheduled auto scaling policy can be triggered during the period between the two dates. For example, if **BeginDate*	- is set to 2021-03-25 and **EndDate*	- is set to 2021-04-25, the auto scaling policy is valid for one month.
	//
	// example:
	//
	// 2021-04-25
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// The frequency at which the scheduled auto scaling policy is executed. Valid values:
	//
	// 	- **\\	- \\	- \\***: The scheduled auto scaling policy is executed at a specified point in time every day.
	//
	// 	- **\\	- \\	- Fri,Mon**: The scheduled auto scaling policy is executed at a specified point in time on one or more days of each week. GMT+8 is used. Valid values:
	//
	//     	- **Sun**
	//
	//     	- **Mon**
	//
	//     	- **Tue**
	//
	//     	- **Wed**
	//
	//     	- **Thu**
	//
	//     	- **Fri**
	//
	//     	- **Sat**
	//
	// 	- **1,2,3,28,31 \\	- \\***: The scheduled auto scaling policy is executed at a specified point in time on one or more days of each month. Valid values: 1 to 31. If the month does not have a 31st day, the auto scaling policy is executed on the specified days other than the 31st day.
	//
	// example:
	//
	// 	- 	- *
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The points in time at which the auto scaling policy is triggered within one day.
	Schedules []*UpdateApplicationScalingRuleResponseBodyDataTimerSchedules `json:"Schedules,omitempty" xml:"Schedules,omitempty" type:"Repeated"`
}

func (s UpdateApplicationScalingRuleResponseBodyDataTimer) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyDataTimer) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyDataTimer) SetBeginDate(v string) *UpdateApplicationScalingRuleResponseBodyDataTimer {
	s.BeginDate = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataTimer) SetEndDate(v string) *UpdateApplicationScalingRuleResponseBodyDataTimer {
	s.EndDate = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataTimer) SetPeriod(v string) *UpdateApplicationScalingRuleResponseBodyDataTimer {
	s.Period = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataTimer) SetSchedules(v []*UpdateApplicationScalingRuleResponseBodyDataTimerSchedules) *UpdateApplicationScalingRuleResponseBodyDataTimer {
	s.Schedules = v
	return s
}

type UpdateApplicationScalingRuleResponseBodyDataTimerSchedules struct {
	// The point in time. Format: **Hour:Minute**.
	//
	// example:
	//
	// 08:00
	AtTime      *string `json:"AtTime,omitempty" xml:"AtTime,omitempty"`
	MaxReplicas *int32  `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	MinReplicas *int32  `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	// The expected number of instances.
	//
	// example:
	//
	// 3
	TargetReplicas *int32 `json:"TargetReplicas,omitempty" xml:"TargetReplicas,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBodyDataTimerSchedules) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyDataTimerSchedules) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyDataTimerSchedules) SetAtTime(v string) *UpdateApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.AtTime = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataTimerSchedules) SetMaxReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.MaxReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataTimerSchedules) SetMinReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.MinReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyDataTimerSchedules) SetTargetReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyDataTimerSchedules {
	s.TargetReplicas = &v
	return s
}

type UpdateApplicationScalingRuleResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *UpdateApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateApplicationScalingRuleResponse) SetStatusCode(v int32) *UpdateApplicationScalingRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponse) SetBody(v *UpdateApplicationScalingRuleResponseBody) *UpdateApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type UpdateApplicationVswitchesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0099b7be-5f5b-4512-a7fc-56049ef1****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// vsw-2ze559r1z1bpwqxwp****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s UpdateApplicationVswitchesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationVswitchesRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicationVswitchesRequest) SetAppId(v string) *UpdateApplicationVswitchesRequest {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationVswitchesRequest) SetVSwitchId(v string) *UpdateApplicationVswitchesRequest {
	s.VSwitchId = &v
	return s
}

type UpdateApplicationVswitchesResponseBody struct {
	// example:
	//
	// 200
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateApplicationVswitchesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationVswitchesResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateApplicationVswitchesResponseBody) SetCode(v string) *UpdateApplicationVswitchesResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateApplicationVswitchesResponseBody) SetErrorCode(v string) *UpdateApplicationVswitchesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateApplicationVswitchesResponseBody) SetMessage(v string) *UpdateApplicationVswitchesResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateApplicationVswitchesResponseBody) SetRequestId(v string) *UpdateApplicationVswitchesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateApplicationVswitchesResponseBody) SetSuccess(v bool) *UpdateApplicationVswitchesResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateApplicationVswitchesResponseBody) SetTraceId(v string) *UpdateApplicationVswitchesResponseBody {
	s.TraceId = &v
	return s
}

type UpdateApplicationVswitchesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateApplicationVswitchesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateApplicationVswitchesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationVswitchesResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicationVswitchesResponse) SetHeaders(v map[string]*string) *UpdateApplicationVswitchesResponse {
	s.Headers = v
	return s
}

func (s *UpdateApplicationVswitchesResponse) SetStatusCode(v int32) *UpdateApplicationVswitchesResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateApplicationVswitchesResponse) SetBody(v *UpdateApplicationVswitchesResponseBody) *UpdateApplicationVswitchesResponse {
	s.Body = v
	return s
}

type UpdateConfigMapRequest struct {
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ConfigMapId *int64 `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"env.shell": "/bin/sh"}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// test-desc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s UpdateConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigMapRequest) GoString() string {
	return s.String()
}

func (s *UpdateConfigMapRequest) SetConfigMapId(v int64) *UpdateConfigMapRequest {
	s.ConfigMapId = &v
	return s
}

func (s *UpdateConfigMapRequest) SetData(v string) *UpdateConfigMapRequest {
	s.Data = &v
	return s
}

func (s *UpdateConfigMapRequest) SetDescription(v string) *UpdateConfigMapRequest {
	s.Description = &v
	return s
}

type UpdateConfigMapResponseBody struct {
	// Indicates whether the ConfigMap instance was updated. Valid values:
	//
	// 	- **true**: The instance was updated.
	//
	// 	- **false**: The instance failed to be updated.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the ConfigMap instance.
	Data *UpdateConfigMapResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx:**: indicates that the call was successful.
	//
	// 	- **3xx**: indicates that the call was redirected.
	//
	// 	- **4xx**: indicates that the call failed.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. The ID is used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned information.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The returned result.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateConfigMapResponseBody) SetCode(v string) *UpdateConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateConfigMapResponseBody) SetData(v *UpdateConfigMapResponseBodyData) *UpdateConfigMapResponseBody {
	s.Data = v
	return s
}

func (s *UpdateConfigMapResponseBody) SetErrorCode(v string) *UpdateConfigMapResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateConfigMapResponseBody) SetMessage(v string) *UpdateConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateConfigMapResponseBody) SetRequestId(v string) *UpdateConfigMapResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateConfigMapResponseBody) SetSuccess(v bool) *UpdateConfigMapResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateConfigMapResponseBody) SetTraceId(v string) *UpdateConfigMapResponseBody {
	s.TraceId = &v
	return s
}

type UpdateConfigMapResponseBodyData struct {
	// The returned error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// 1
	ConfigMapId *string `json:"ConfigMapId,omitempty" xml:"ConfigMapId,omitempty"`
}

func (s UpdateConfigMapResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigMapResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateConfigMapResponseBodyData) SetConfigMapId(v string) *UpdateConfigMapResponseBodyData {
	s.ConfigMapId = &v
	return s
}

type UpdateConfigMapResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigMapResponse) GoString() string {
	return s.String()
}

func (s *UpdateConfigMapResponse) SetHeaders(v map[string]*string) *UpdateConfigMapResponse {
	s.Headers = v
	return s
}

func (s *UpdateConfigMapResponse) SetStatusCode(v int32) *UpdateConfigMapResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateConfigMapResponse) SetBody(v *UpdateConfigMapResponseBody) *UpdateConfigMapResponse {
	s.Body = v
	return s
}

type UpdateGreyTagRouteRequest struct {
	// example:
	//
	// [{"condition":"AND","items":[{"cond":"==","name":"grey","operator":"rawvalue","type":"sourceIp","value":"127.0.0.1"},{"cond":"==","name":"grey","operator":"rawvalue","type":"cookie","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"header","value":"true"}],"path":"/post-echo/hi"}]
	AlbRules *string `json:"AlbRules,omitempty" xml:"AlbRules,omitempty"`
	// Canary Release - Regions
	//
	// example:
	//
	// 灰度发布-地域灰度
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// [{"condition":"OR","group":"DUBBO","items":[{"cond":"==","expr":".key1","index":0,"operator":"rawvalue","value":"value1"},{"cond":"==","expr":".key2","index":0,"operator":"rawvalue","value":"value2"}],"methodName":"echo","serviceName":"com.alibaba.edas.boot.EchoService","version":"1.0.0"}]
	//
	// example:
	//
	// [{"condition":"OR","group":"DUBBO","items":[{"cond":"==","expr":".key1","index":0,"operator":"rawvalue","value":"value1"},{"cond":"==","expr":".key2","index":0,"operator":"rawvalue","value":"value2"}],"methodName":"echo","serviceName":"com.alibaba.edas.boot.EchoService","version":"1.0.0"}]
	DubboRules *string `json:"DubboRules,omitempty" xml:"DubboRules,omitempty"`
	// 1
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	GreyTagRouteId *int64 `json:"GreyTagRouteId,omitempty" xml:"GreyTagRouteId,omitempty"`
	// [{"condition":"OR","items":[{"cond":"==","name":"grey","operator":"rawvalue","type":"param","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"cookie","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"header","value":"true"}],"path":"/post-echo/hi"}]
	//
	// example:
	//
	// [{"condition":"OR","items":[{"cond":"==","name":"grey","operator":"rawvalue","type":"param","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"cookie","value":"true"},{"cond":"==","name":"grey","operator":"rawvalue","type":"header","value":"true"}],"path":"/post-echo/hi"}]
	ScRules *string `json:"ScRules,omitempty" xml:"ScRules,omitempty"`
}

func (s UpdateGreyTagRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateGreyTagRouteRequest) GoString() string {
	return s.String()
}

func (s *UpdateGreyTagRouteRequest) SetAlbRules(v string) *UpdateGreyTagRouteRequest {
	s.AlbRules = &v
	return s
}

func (s *UpdateGreyTagRouteRequest) SetDescription(v string) *UpdateGreyTagRouteRequest {
	s.Description = &v
	return s
}

func (s *UpdateGreyTagRouteRequest) SetDubboRules(v string) *UpdateGreyTagRouteRequest {
	s.DubboRules = &v
	return s
}

func (s *UpdateGreyTagRouteRequest) SetGreyTagRouteId(v int64) *UpdateGreyTagRouteRequest {
	s.GreyTagRouteId = &v
	return s
}

func (s *UpdateGreyTagRouteRequest) SetScRules(v string) *UpdateGreyTagRouteRequest {
	s.ScRules = &v
	return s
}

type UpdateGreyTagRouteResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the canary release rule.
	Data *UpdateGreyTagRouteResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned error code. Valid values:
	//
	// 	- If the call is successful, the **ErrorCode*	- parameter is not returned.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The returned information.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 9D29CBD0-45D3-410B-9826-52F86F90****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information of the change order was queried. Valid values:
	//
	// 	- **true**: The information was queried.
	//
	// 	- **false**: The information failed to be queried.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateGreyTagRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateGreyTagRouteResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateGreyTagRouteResponseBody) SetCode(v string) *UpdateGreyTagRouteResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateGreyTagRouteResponseBody) SetData(v *UpdateGreyTagRouteResponseBodyData) *UpdateGreyTagRouteResponseBody {
	s.Data = v
	return s
}

func (s *UpdateGreyTagRouteResponseBody) SetErrorCode(v string) *UpdateGreyTagRouteResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateGreyTagRouteResponseBody) SetMessage(v string) *UpdateGreyTagRouteResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateGreyTagRouteResponseBody) SetRequestId(v string) *UpdateGreyTagRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateGreyTagRouteResponseBody) SetSuccess(v bool) *UpdateGreyTagRouteResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateGreyTagRouteResponseBody) SetTraceId(v string) *UpdateGreyTagRouteResponseBody {
	s.TraceId = &v
	return s
}

type UpdateGreyTagRouteResponseBodyData struct {
	// The ID of the canary release rule. The ID is globally unique.
	//
	// example:
	//
	// 1
	GreyTagRouteId *int64 `json:"GreyTagRouteId,omitempty" xml:"GreyTagRouteId,omitempty"`
}

func (s UpdateGreyTagRouteResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateGreyTagRouteResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateGreyTagRouteResponseBodyData) SetGreyTagRouteId(v int64) *UpdateGreyTagRouteResponseBodyData {
	s.GreyTagRouteId = &v
	return s
}

type UpdateGreyTagRouteResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateGreyTagRouteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateGreyTagRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateGreyTagRouteResponse) GoString() string {
	return s.String()
}

func (s *UpdateGreyTagRouteResponse) SetHeaders(v map[string]*string) *UpdateGreyTagRouteResponse {
	s.Headers = v
	return s
}

func (s *UpdateGreyTagRouteResponse) SetStatusCode(v int32) *UpdateGreyTagRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateGreyTagRouteResponse) SetBody(v *UpdateGreyTagRouteResponseBody) *UpdateGreyTagRouteResponse {
	s.Body = v
	return s
}

type UpdateIngressRequest struct {
	// example:
	//
	// 188077086902****_176993d****_181437****_108724****
	CertId *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
	// example:
	//
	// 87***35-cn-hangzhou,812***3-cn-hangzhou
	CertIds *string `json:"CertIds,omitempty" xml:"CertIds,omitempty"`
	// example:
	//
	// {"appId":"395b60e4-0550-458d-9c54-a265d036****","containerPort":8080}
	DefaultRule *string `json:"DefaultRule,omitempty" xml:"DefaultRule,omitempty"`
	// example:
	//
	// ingress-sae-test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	IdleTimeout *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 87
	IngressId *int64 `json:"IngressId,omitempty" xml:"IngressId,omitempty"`
	// example:
	//
	// 443
	ListenerPort *string `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// example:
	//
	// HTTP
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	// example:
	//
	// clb
	LoadBalanceType *string `json:"LoadBalanceType,omitempty" xml:"LoadBalanceType,omitempty"`
	RequestTimeout  *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// example:
	//
	// [{"appId":"395b60e4-0550-458d-9c54-a265d036****","containerPort":8080,"domain":"www.sae.site","path":"/path1"},{"appId":"666403ce-d25b-47cf-87fe-497565d2****","containerPort":8080,"domain":"sae.site","path":"/path2"}]
	Rules            *string `json:"Rules,omitempty" xml:"Rules,omitempty"`
	SecurityPolicyId *string `json:"SecurityPolicyId,omitempty" xml:"SecurityPolicyId,omitempty"`
}

func (s UpdateIngressRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIngressRequest) GoString() string {
	return s.String()
}

func (s *UpdateIngressRequest) SetCertId(v string) *UpdateIngressRequest {
	s.CertId = &v
	return s
}

func (s *UpdateIngressRequest) SetCertIds(v string) *UpdateIngressRequest {
	s.CertIds = &v
	return s
}

func (s *UpdateIngressRequest) SetDefaultRule(v string) *UpdateIngressRequest {
	s.DefaultRule = &v
	return s
}

func (s *UpdateIngressRequest) SetDescription(v string) *UpdateIngressRequest {
	s.Description = &v
	return s
}

func (s *UpdateIngressRequest) SetIdleTimeout(v int32) *UpdateIngressRequest {
	s.IdleTimeout = &v
	return s
}

func (s *UpdateIngressRequest) SetIngressId(v int64) *UpdateIngressRequest {
	s.IngressId = &v
	return s
}

func (s *UpdateIngressRequest) SetListenerPort(v string) *UpdateIngressRequest {
	s.ListenerPort = &v
	return s
}

func (s *UpdateIngressRequest) SetListenerProtocol(v string) *UpdateIngressRequest {
	s.ListenerProtocol = &v
	return s
}

func (s *UpdateIngressRequest) SetLoadBalanceType(v string) *UpdateIngressRequest {
	s.LoadBalanceType = &v
	return s
}

func (s *UpdateIngressRequest) SetRequestTimeout(v int32) *UpdateIngressRequest {
	s.RequestTimeout = &v
	return s
}

func (s *UpdateIngressRequest) SetRules(v string) *UpdateIngressRequest {
	s.Rules = &v
	return s
}

func (s *UpdateIngressRequest) SetSecurityPolicyId(v string) *UpdateIngressRequest {
	s.SecurityPolicyId = &v
	return s
}

type UpdateIngressResponseBody struct {
	// example:
	//
	// 200
	Code      *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *UpdateIngressResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateIngressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateIngressResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateIngressResponseBody) SetCode(v string) *UpdateIngressResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateIngressResponseBody) SetData(v *UpdateIngressResponseBodyData) *UpdateIngressResponseBody {
	s.Data = v
	return s
}

func (s *UpdateIngressResponseBody) SetErrorCode(v string) *UpdateIngressResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateIngressResponseBody) SetMessage(v string) *UpdateIngressResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateIngressResponseBody) SetRequestId(v string) *UpdateIngressResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateIngressResponseBody) SetSuccess(v bool) *UpdateIngressResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateIngressResponseBody) SetTraceId(v string) *UpdateIngressResponseBody {
	s.TraceId = &v
	return s
}

type UpdateIngressResponseBodyData struct {
	// example:
	//
	// 87
	IngressId *int64 `json:"IngressId,omitempty" xml:"IngressId,omitempty"`
}

func (s UpdateIngressResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateIngressResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateIngressResponseBodyData) SetIngressId(v int64) *UpdateIngressResponseBodyData {
	s.IngressId = &v
	return s
}

type UpdateIngressResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateIngressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateIngressResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIngressResponse) GoString() string {
	return s.String()
}

func (s *UpdateIngressResponse) SetHeaders(v map[string]*string) *UpdateIngressResponse {
	s.Headers = v
	return s
}

func (s *UpdateIngressResponse) SetStatusCode(v int32) *UpdateIngressResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateIngressResponse) SetBody(v *UpdateIngressResponseBody) *UpdateIngressResponse {
	s.Body = v
	return s
}

type UpdateJobRequest struct {
	// The Alibaba Cloud Resource Name (ARN) of the RAM role that is used to pull images across accounts. For more information, see [Grant permissions across Alibaba Cloud accounts by using a RAM role](https://help.aliyun.com/document_detail/223585.html).
	//
	// example:
	//
	// acs:ram::123456789012****:role/adminrole
	AcrAssumeRoleArn *string `json:"AcrAssumeRoleArn,omitempty" xml:"AcrAssumeRoleArn,omitempty"`
	// The ID of Container Registry Enterprise Edition instance N. This parameter is required when the **ImageUrl*	- parameter is set to the URL of an image in an ACR Enterprise Edition instance.
	//
	// example:
	//
	// cri-xxxxxx
	AcrInstanceId *string `json:"AcrInstanceId,omitempty" xml:"AcrInstanceId,omitempty"`
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The number of times the job is retried.
	//
	// example:
	//
	// 3
	BackoffLimit *int64 `json:"BackoffLimit,omitempty" xml:"BackoffLimit,omitempty"`
	// The command that is used to start the image. The command must be an existing executable object in the container. Example:
	//
	//     command:
	//
	//           - echo
	//
	//           - abc
	//
	//           - >
	//
	//           - file0
	//
	// In this example, the Command parameter is set to `Command="echo", CommandArgs=["abc", ">", "file0"]`.
	//
	// example:
	//
	// echo
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The parameters of the image startup command. The CommandArgs parameter specifies the parameters that are required for the **Command*	- parameter. The name must meet the following format requirements:
	//
	// `["a","b"]`
	//
	// In the preceding example, the CommandArgs parameter is set to `CommandArgs=["abc", ">", "file0"]`. The data type of `["abc", ">", "file0"]` must be an array of strings in the JSON format. This parameter is optional.
	//
	// example:
	//
	// ["a","b"]
	CommandArgs *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	// The concurrency policy of the job. Valid values:
	//
	// 	- **Forbid**: Prohibits concurrent running. If the previous job is not completed, no new job is created.
	//
	// 	- **Allow**: Allows concurrent running.
	//
	// 	- **Replace**: If the previous job is not completed when the time to create a new job is reached, the new job replaces the previous job.
	//
	// example:
	//
	// Allow
	ConcurrencyPolicy *string `json:"ConcurrencyPolicy,omitempty" xml:"ConcurrencyPolicy,omitempty"`
	// The description of the **ConfigMap*	- instance mounted to the application. Use configurations created on the Configuration Items page to configure containers. The following parameters are involved:
	//
	// 	- **congfigMapId**: the ID of the ConfigMap instance. You can call the [ListNamespacedConfigMaps](https://help.aliyun.com/document_detail/176917.html) operation to obtain the ID.
	//
	// 	- **key**: the key.
	//
	// > You can use the `sae-sys-configmap-all` key to mount all keys.
	//
	// 	- **mountPath**: the mount path.
	//
	// example:
	//
	// [{"configMapId":16,"key":"test","mountPath":"/tmp"}]
	ConfigMapMountDesc *string `json:"ConfigMapMountDesc,omitempty" xml:"ConfigMapMountDesc,omitempty"`
	// The custom mappings between hostnames and IP addresses in the container. Valid values:
	//
	// 	- **hostName**: the domain name or hostname.
	//
	// 	- **ip**: the IP address.
	//
	// example:
	//
	// [{"hostName":"samplehost","ip":"127.0.0.1"}]
	CustomHostAlias *string `json:"CustomHostAlias,omitempty" xml:"CustomHostAlias,omitempty"`
	// The version of the container, such as Ali-Tomcat, in which an application developed based on High-speed Service Framework (HSF) is deployed.
	//
	// example:
	//
	// 3.5.3
	EdasContainerVersion *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	EnableImageAccl      *bool   `json:"EnableImageAccl,omitempty" xml:"EnableImageAccl,omitempty"`
	// The environment variables. You can configure custom environment variables or reference a ConfigMap. If you want to reference a ConfigMap, you must first create a ConfigMap. For more information, see [CreateConfigMap](https://help.aliyun.com/document_detail/176914.html). Valid values:
	//
	// 	- Configure custom environment variables
	//
	//     	- **name**: the name of the environment variable.
	//
	//     	- **value**: the value of the environment variable.
	//
	// 	- Reference ConfigMap
	//
	//     	- **name**: the name of the environment variable. You can reference one or all keys. If you want to reference all keys, specify `sae-sys-configmap-all-<ConfigMap name>`. Example: `sae-sys-configmap-all-test1`.
	//
	//     	- **valueFrom**: the reference of the environment variable. Set the value to `configMapRef`.
	//
	//     	- **configMapId**: the ConfigMap ID.
	//
	//     	- **key**: the key. If you want to reference all keys, do not configure this parameter.
	//
	// example:
	//
	// [{"name":"envtmp","value":"0"}]
	Envs *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	// The ID of the corresponding Secret.
	//
	// example:
	//
	// 10
	ImagePullSecrets *string `json:"ImagePullSecrets,omitempty" xml:"ImagePullSecrets,omitempty"`
	// The URL of the image. This parameter is returned only if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// registry.cn-hangzhou.aliyuncs.com/sae_test/ali_sae_test:0.0.1
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// The arguments in the JAR package. The arguments are used to start the application container. The default startup command is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// -Xms4G -Xmx4G
	JarStartArgs *string `json:"JarStartArgs,omitempty" xml:"JarStartArgs,omitempty"`
	// The option settings in the JAR package. The settings are used to start the application container. The default startup command for application deployment is `$JAVA_HOME/bin/java $JarStartOptions -jar $CATALINA_OPTS "$package_path" $JarStartArgs`.
	//
	// example:
	//
	// custom-option
	JarStartOptions *string `json:"JarStartOptions,omitempty" xml:"JarStartOptions,omitempty"`
	// The version of the Java development kit (JDK) on which the deployment package of the application depends. The following versions are supported:
	//
	// 	- **Open JDK 8**
	//
	// 	- **Open JDK 7**
	//
	// 	- **Dragonwell 11**
	//
	// 	- **Dragonwell 8**
	//
	// 	- **openjdk-8u191-jdk-alpine3.9**
	//
	// 	- **openjdk-7u201-jdk-alpine3.9**
	//
	// This parameter is not returned if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// Open JDK 8
	Jdk *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	// The configurations for mounting the NAS file system. If you do not need to modify the NAS configurations when you deploy the application, configure **MountDesc*	- only in the first request. If you no longer need to use NAS, leave **MountDesc*	- empty in the request.
	//
	// example:
	//
	// [{mountPath: "/tmp", nasPath: "/"}]
	MountDesc *string `json:"MountDesc,omitempty" xml:"MountDesc,omitempty"`
	// The mount target of the NAS file system in the VPC where the application is deployed. If you do not need to modify this configuration during the deployment, configure the **MountHost*	- parameter only in the first request. You do not need to include this parameter in subsequent requests. If you need to remove this configuration, leave the **MountHost*	- parameter empty in the request.
	//
	// example:
	//
	// 10d3b4bc9****.com
	MountHost *string `json:"MountHost,omitempty" xml:"MountHost,omitempty"`
	// The ID of the Apsara File Storage NAS file system. If you do not need to modify the NAS configurations when you deploy the application, configure **NasId*	- only in the first request. If you no longer need to use NAS, leave **NasId*	- empty in the request.
	//
	// example:
	//
	// 10d3b4****
	NasId *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	// The AccessKey ID that is used to read data from and write data to OSS.
	//
	// example:
	//
	// xxxxxx
	OssAkId *string `json:"OssAkId,omitempty" xml:"OssAkId,omitempty"`
	// The AccessKey secret that is used to read data from and write data to OSS.
	//
	// example:
	//
	// xxxxxx
	OssAkSecret *string `json:"OssAkSecret,omitempty" xml:"OssAkSecret,omitempty"`
	// The information about the mounted Object Storage Service (OSS) bucket. The following parameters are involved:
	//
	// 	- **bucketName**: the name of the OSS bucket.
	//
	// 	- **bucketPath**: the directory or object in OSS. If the specified directory or object does not exist, an error is returned.
	//
	// 	- **mountPath**: the directory of the container in SAE. If the path already exists, the newly specified path overwrites the previous one. If the path does not exist, it is created.
	//
	// 	- **readOnly**: specifies whether to only allow the container path to read data from the OSS directory. Valid values:
	//
	//     	- **true**: The container path only has read permission on the OSS directory.
	//
	//     	- **false**: The application has read and write permissions.
	//
	// example:
	//
	// [{"bucketName": "oss-bucket", "bucketPath": "data/user.data", "mountPath": "/usr/data/user.data", "readOnly": true}]
	OssMountDescs *string `json:"OssMountDescs,omitempty" xml:"OssMountDescs,omitempty"`
	// The address of the deployment package. This parameter is required if you set **PackageType*	- to **FatJar**, **War**, or **PythonZip**.
	//
	// example:
	//
	// http://myoss.oss-cn-hangzhou.aliyuncs.com/my-buc/2019-06-30/****.jar
	PackageUrl *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	// The version of the deployment package. This parameter is required if you set **PackageType*	- to **FatJar**, **War**, or **PythonZip**.
	//
	// example:
	//
	// 1.0.1
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	// The ID of Container Registry Enterprise Edition instance N.
	//
	// example:
	//
	// cri-xxxxxx
	Php *string `json:"Php,omitempty" xml:"Php,omitempty"`
	// The details of the PHP configuration file.
	//
	// example:
	//
	// k1=v1
	PhpConfig *string `json:"PhpConfig,omitempty" xml:"PhpConfig,omitempty"`
	// The path on which the PHP configuration file for application startup is mounted. Make sure that the PHP server uses this configuration file during the startup.
	//
	// example:
	//
	// /usr/local/etc/php/php.ini
	PhpConfigLocation *string `json:"PhpConfigLocation,omitempty" xml:"PhpConfigLocation,omitempty"`
	// The script to be run after the container is started. Example: `{"exec":{"command":["sh","-c","echo hello"\\]}}`
	//
	// example:
	//
	// {"exec":{"command":["sh","-c","echo hello"]}}
	PostStart *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	// The script that is run before the container is stopped. Example: `{"exec":{"command":["sh","-c","echo hello"\\]}}`
	//
	// example:
	//
	// {"exec":{"command":["sh","-c","echo hello"]}}
	PreStop *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	// The programming language. Valid values: **java**, **php**, **python**, and **shell**.
	//
	// example:
	//
	// java
	ProgrammingLanguage *string `json:"ProgrammingLanguage,omitempty" xml:"ProgrammingLanguage,omitempty"`
	// The Python environment. Set the value to **PYTHON 3.9.15**.
	//
	// example:
	//
	// PYTHON 3.9.15
	Python *string `json:"Python,omitempty" xml:"Python,omitempty"`
	// The configurations for installing custom module dependencies. By default, the dependencies defined by the requirements.txt file in the root directory are installed. If the package does not contain this file and you do not configure custom dependencies in the package, specify the dependencies that you want to install in the text box.
	//
	// example:
	//
	// Flask==2.0
	PythonModules *string `json:"PythonModules,omitempty" xml:"PythonModules,omitempty"`
	// The ID of the job that you reference.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	RefAppId *string `json:"RefAppId,omitempty" xml:"RefAppId,omitempty"`
	// The number of concurrent instances.
	//
	// example:
	//
	// 3
	Replicas *string `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	// Specifies whether to enable job sharding.
	//
	// example:
	//
	// true
	Slice *bool `json:"Slice,omitempty" xml:"Slice,omitempty"`
	// The parameters of job sharding.
	//
	// example:
	//
	// [0,1,2]
	SliceEnvs *string `json:"SliceEnvs,omitempty" xml:"SliceEnvs,omitempty"`
	// The configurations of Log Service.
	//
	// 	- To use Log Service resources that are automatically created by SAE, set this parameter to `[{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]`.
	//
	// 	- To use custom Log Service resources, set this parameter to `[{"projectName":"test-sls","logType":"stdout","logDir":"","logstoreName":"sae","logtailName":""},{"projectName":"test","logDir":"/tmp/a.log","logstoreName":"sae","logtailName":""}]`.
	//
	// The following parameters are involved:
	//
	// 	- **projectName**: the name of the Log Service project.
	//
	// 	- **logDir**: the path in which logs are stored.
	//
	// 	- **logType**: the log type. **stdout**: the standard output log of the container. You can specify only one stdout value for this parameter. If you leave this parameter empty, file logs are collected.
	//
	// 	- **logstoreName**: the name of the Logstore in Log Service.
	//
	// 	- **logtailName**: the name of the Logtail configuration in Log Service. If you do not configure this parameter, a new Logtail configuration is created.
	//
	// If you do not need to modify the logging configurations when you deploy the application, configure the **SlsConfigs*	- parameter only in the first request. You do not need to include this parameter in subsequent requests. If you no longer need to use Log Service, leave the **SlsConfigs*	- parameter empty in the request.
	//
	// > A Log Service project that is automatically created by SAE when you create an application is deleted when the application is deleted. Therefore, when you create an application, you cannot select a Log Service project that is automatically created by SAE for log collection.
	//
	// example:
	//
	// [{"logDir":"","logType":"stdout"},{"logDir":"/tmp/a.log"}]
	SlsConfigs *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	// The timeout period for a graceful shutdown. Default value: 30. Unit: seconds. Valid values: 1 to 300.
	//
	// example:
	//
	// 10
	TerminationGracePeriodSeconds *int32 `json:"TerminationGracePeriodSeconds,omitempty" xml:"TerminationGracePeriodSeconds,omitempty"`
	// The timeout period. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The time zone. Default value: **Asia/Shanghai**.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The Tomcat configuration. If you want to delete the configuration, set this parameter to {} or leave this parameter empty. Valid values:
	//
	// 	- **port**: the port number. The port number ranges from 1024 to 65535. Though the admin permissions are configured for the container, the root permissions are required to perform operations on ports whose number is smaller than 1024. Enter a value that ranges from 1025 to 65535 because the container has only the admin permissions. If you do not specify this parameter, the default port number 8080 is used.
	//
	// 	- **contextPath**: the path. Default value: /. This value indicates the root directory.
	//
	// 	- **maxThreads**: the maximum number of connections in the connection pool. Default value: 400.
	//
	// 	- **uriEncoding**: the URI encoding scheme in the Tomcat container. Valid values: **UTF-8**, **ISO-8859-1**, **GBK**, and GB2312. If you do not specify this parameter, the default value **ISO-8859-1*	- is used.
	//
	// 	- **useBodyEncoding**: specifies whether to use the encoding scheme that is specified by **BodyEncoding for URL**. Default value: **true**.
	//
	// example:
	//
	// {"port":8080,"contextPath":"/","maxThreads":400,"uriEncoding":"ISO-8859-1","useBodyEncodingForUri":true}
	TomcatConfig  *string `json:"TomcatConfig,omitempty" xml:"TomcatConfig,omitempty"`
	TriggerConfig *string `json:"TriggerConfig,omitempty" xml:"TriggerConfig,omitempty"`
	// The startup command of the WAR package. For information about how to configure the startup command, see [Configure startup commands](https://help.aliyun.com/document_detail/96677.html).
	//
	// example:
	//
	// CATALINA_OPTS=\\"$CATALINA_OPTS $Options\\" catalina.sh run
	WarStartOptions *string `json:"WarStartOptions,omitempty" xml:"WarStartOptions,omitempty"`
	// The version of the Tomcat container on which the deployment package depends. The following versions are supported:
	//
	// 	- **apache-tomcat-7.0.91**
	//
	// 	- **apache-tomcat-8.5.42**
	//
	// This parameter is not returned if the **PackageType*	- parameter is set to **Image**.
	//
	// example:
	//
	// apache-tomcat-7.0.91
	WebContainer *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
}

func (s UpdateJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateJobRequest) SetAcrAssumeRoleArn(v string) *UpdateJobRequest {
	s.AcrAssumeRoleArn = &v
	return s
}

func (s *UpdateJobRequest) SetAcrInstanceId(v string) *UpdateJobRequest {
	s.AcrInstanceId = &v
	return s
}

func (s *UpdateJobRequest) SetAppId(v string) *UpdateJobRequest {
	s.AppId = &v
	return s
}

func (s *UpdateJobRequest) SetBackoffLimit(v int64) *UpdateJobRequest {
	s.BackoffLimit = &v
	return s
}

func (s *UpdateJobRequest) SetCommand(v string) *UpdateJobRequest {
	s.Command = &v
	return s
}

func (s *UpdateJobRequest) SetCommandArgs(v string) *UpdateJobRequest {
	s.CommandArgs = &v
	return s
}

func (s *UpdateJobRequest) SetConcurrencyPolicy(v string) *UpdateJobRequest {
	s.ConcurrencyPolicy = &v
	return s
}

func (s *UpdateJobRequest) SetConfigMapMountDesc(v string) *UpdateJobRequest {
	s.ConfigMapMountDesc = &v
	return s
}

func (s *UpdateJobRequest) SetCustomHostAlias(v string) *UpdateJobRequest {
	s.CustomHostAlias = &v
	return s
}

func (s *UpdateJobRequest) SetEdasContainerVersion(v string) *UpdateJobRequest {
	s.EdasContainerVersion = &v
	return s
}

func (s *UpdateJobRequest) SetEnableImageAccl(v bool) *UpdateJobRequest {
	s.EnableImageAccl = &v
	return s
}

func (s *UpdateJobRequest) SetEnvs(v string) *UpdateJobRequest {
	s.Envs = &v
	return s
}

func (s *UpdateJobRequest) SetImagePullSecrets(v string) *UpdateJobRequest {
	s.ImagePullSecrets = &v
	return s
}

func (s *UpdateJobRequest) SetImageUrl(v string) *UpdateJobRequest {
	s.ImageUrl = &v
	return s
}

func (s *UpdateJobRequest) SetJarStartArgs(v string) *UpdateJobRequest {
	s.JarStartArgs = &v
	return s
}

func (s *UpdateJobRequest) SetJarStartOptions(v string) *UpdateJobRequest {
	s.JarStartOptions = &v
	return s
}

func (s *UpdateJobRequest) SetJdk(v string) *UpdateJobRequest {
	s.Jdk = &v
	return s
}

func (s *UpdateJobRequest) SetMountDesc(v string) *UpdateJobRequest {
	s.MountDesc = &v
	return s
}

func (s *UpdateJobRequest) SetMountHost(v string) *UpdateJobRequest {
	s.MountHost = &v
	return s
}

func (s *UpdateJobRequest) SetNasId(v string) *UpdateJobRequest {
	s.NasId = &v
	return s
}

func (s *UpdateJobRequest) SetOssAkId(v string) *UpdateJobRequest {
	s.OssAkId = &v
	return s
}

func (s *UpdateJobRequest) SetOssAkSecret(v string) *UpdateJobRequest {
	s.OssAkSecret = &v
	return s
}

func (s *UpdateJobRequest) SetOssMountDescs(v string) *UpdateJobRequest {
	s.OssMountDescs = &v
	return s
}

func (s *UpdateJobRequest) SetPackageUrl(v string) *UpdateJobRequest {
	s.PackageUrl = &v
	return s
}

func (s *UpdateJobRequest) SetPackageVersion(v string) *UpdateJobRequest {
	s.PackageVersion = &v
	return s
}

func (s *UpdateJobRequest) SetPhp(v string) *UpdateJobRequest {
	s.Php = &v
	return s
}

func (s *UpdateJobRequest) SetPhpConfig(v string) *UpdateJobRequest {
	s.PhpConfig = &v
	return s
}

func (s *UpdateJobRequest) SetPhpConfigLocation(v string) *UpdateJobRequest {
	s.PhpConfigLocation = &v
	return s
}

func (s *UpdateJobRequest) SetPostStart(v string) *UpdateJobRequest {
	s.PostStart = &v
	return s
}

func (s *UpdateJobRequest) SetPreStop(v string) *UpdateJobRequest {
	s.PreStop = &v
	return s
}

func (s *UpdateJobRequest) SetProgrammingLanguage(v string) *UpdateJobRequest {
	s.ProgrammingLanguage = &v
	return s
}

func (s *UpdateJobRequest) SetPython(v string) *UpdateJobRequest {
	s.Python = &v
	return s
}

func (s *UpdateJobRequest) SetPythonModules(v string) *UpdateJobRequest {
	s.PythonModules = &v
	return s
}

func (s *UpdateJobRequest) SetRefAppId(v string) *UpdateJobRequest {
	s.RefAppId = &v
	return s
}

func (s *UpdateJobRequest) SetReplicas(v string) *UpdateJobRequest {
	s.Replicas = &v
	return s
}

func (s *UpdateJobRequest) SetSlice(v bool) *UpdateJobRequest {
	s.Slice = &v
	return s
}

func (s *UpdateJobRequest) SetSliceEnvs(v string) *UpdateJobRequest {
	s.SliceEnvs = &v
	return s
}

func (s *UpdateJobRequest) SetSlsConfigs(v string) *UpdateJobRequest {
	s.SlsConfigs = &v
	return s
}

func (s *UpdateJobRequest) SetTerminationGracePeriodSeconds(v int32) *UpdateJobRequest {
	s.TerminationGracePeriodSeconds = &v
	return s
}

func (s *UpdateJobRequest) SetTimeout(v int64) *UpdateJobRequest {
	s.Timeout = &v
	return s
}

func (s *UpdateJobRequest) SetTimezone(v string) *UpdateJobRequest {
	s.Timezone = &v
	return s
}

func (s *UpdateJobRequest) SetTomcatConfig(v string) *UpdateJobRequest {
	s.TomcatConfig = &v
	return s
}

func (s *UpdateJobRequest) SetTriggerConfig(v string) *UpdateJobRequest {
	s.TriggerConfig = &v
	return s
}

func (s *UpdateJobRequest) SetWarStartOptions(v string) *UpdateJobRequest {
	s.WarStartOptions = &v
	return s
}

func (s *UpdateJobRequest) SetWebContainer(v string) *UpdateJobRequest {
	s.WebContainer = &v
	return s
}

type UpdateJobResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The response.
	Data *UpdateJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Valid values:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The additional information that is returned. Valid values:
	//
	// 	- success: If the call is successful, **success*	- is returned.
	//
	// 	- An error code: If the call fails, an error code is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 01CF26C7-00A3-4AA6-BA76-7E95F2A3***
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the application deployment is successful. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// ac1a0b2215622246421415014e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateJobResponseBody) SetCode(v string) *UpdateJobResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateJobResponseBody) SetData(v *UpdateJobResponseBodyData) *UpdateJobResponseBody {
	s.Data = v
	return s
}

func (s *UpdateJobResponseBody) SetErrorCode(v string) *UpdateJobResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateJobResponseBody) SetMessage(v string) *UpdateJobResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateJobResponseBody) SetRequestId(v string) *UpdateJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateJobResponseBody) SetSuccess(v bool) *UpdateJobResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateJobResponseBody) SetTraceId(v string) *UpdateJobResponseBody {
	s.TraceId = &v
	return s
}

type UpdateJobResponseBodyData struct {
	// The application ID.
	//
	// example:
	//
	// 7171a6ca-d1cd-4928-8642-7d5cfe69****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the change order. It can be used to query the task status.
	//
	// example:
	//
	// 01db03d3-3ee9-48b3-b3d0-dfce2d88****
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s UpdateJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateJobResponseBodyData) SetAppId(v string) *UpdateJobResponseBodyData {
	s.AppId = &v
	return s
}

func (s *UpdateJobResponseBodyData) SetChangeOrderId(v string) *UpdateJobResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type UpdateJobResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateJobResponse) SetHeaders(v map[string]*string) *UpdateJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateJobResponse) SetStatusCode(v int32) *UpdateJobResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateJobResponse) SetBody(v *UpdateJobResponseBody) *UpdateJobResponse {
	s.Body = v
	return s
}

type UpdateNamespaceRequest struct {
	EnableMicroRegistration *bool `json:"EnableMicroRegistration,omitempty" xml:"EnableMicroRegistration,omitempty"`
	// The short ID of the namespace. You do not need to specify a region ID. We recommend that you configure this parameter. The value of this parameter can be up to 20 characters in length and can contain only lowercase letters and digits.
	//
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// The description of the namespace. The description cannot exceed 100 characters in length.
	//
	// example:
	//
	// desc
	NamespaceDescription *string `json:"NamespaceDescription,omitempty" xml:"NamespaceDescription,omitempty"`
	// The long ID of the namespace. If you configure this parameter, the long ID take effects and the value of the NameSpaceShortId parameter is ignored. To ensure compatibility, we recommend that you specify a short namespace ID. A long namespace ID follows the `<RegionId>:<NamespaceId>` format. The `NamespaceId` variable can contain only lowercase letters and digits. Example: `cn-beijing:test`. The value of the NamespaceId variable cannot exceed 32 characters in length. For more information about **RegionId**, you can call the [DescribeRegions](https://help.aliyun.com/document_detail/126213.html) operation to obtain the IDs of regions supported by SAE.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The name of the namespace. The name cannot exceed 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// name
	NamespaceName *string `json:"NamespaceName,omitempty" xml:"NamespaceName,omitempty"`
}

func (s UpdateNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateNamespaceRequest) GoString() string {
	return s.String()
}

func (s *UpdateNamespaceRequest) SetEnableMicroRegistration(v bool) *UpdateNamespaceRequest {
	s.EnableMicroRegistration = &v
	return s
}

func (s *UpdateNamespaceRequest) SetNameSpaceShortId(v string) *UpdateNamespaceRequest {
	s.NameSpaceShortId = &v
	return s
}

func (s *UpdateNamespaceRequest) SetNamespaceDescription(v string) *UpdateNamespaceRequest {
	s.NamespaceDescription = &v
	return s
}

func (s *UpdateNamespaceRequest) SetNamespaceId(v string) *UpdateNamespaceRequest {
	s.NamespaceId = &v
	return s
}

func (s *UpdateNamespaceRequest) SetNamespaceName(v string) *UpdateNamespaceRequest {
	s.NamespaceName = &v
	return s
}

type UpdateNamespaceResponseBody struct {
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: The call was successful.
	//
	// 	- **3xx**: The call was redirected.
	//
	// 	- **4xx**: The call failed.
	//
	// 	- **5xx**: A server error occurred.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information of the namespace.
	Data *UpdateNamespaceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code returned. Take note of the following rules:
	//
	// 	- The **ErrorCode*	- parameter is not returned if the request succeeds.
	//
	// 	- If the call fails, the **ErrorCode*	- parameter is returned. For more information, see the "**Error codes**" section of this topic.
	//
	// example:
	//
	// Null
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The message returned for the operation.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information about the namespace was updated. Valid values:
	//
	// 	- **true**: The instance was updated.
	//
	// 	- **false**: The instance failed to be updated.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The trace ID that is used to query the details of the request.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateNamespaceResponseBody) SetCode(v string) *UpdateNamespaceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateNamespaceResponseBody) SetData(v *UpdateNamespaceResponseBodyData) *UpdateNamespaceResponseBody {
	s.Data = v
	return s
}

func (s *UpdateNamespaceResponseBody) SetErrorCode(v string) *UpdateNamespaceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateNamespaceResponseBody) SetMessage(v string) *UpdateNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateNamespaceResponseBody) SetRequestId(v string) *UpdateNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateNamespaceResponseBody) SetSuccess(v bool) *UpdateNamespaceResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateNamespaceResponseBody) SetTraceId(v string) *UpdateNamespaceResponseBody {
	s.TraceId = &v
	return s
}

type UpdateNamespaceResponseBodyData struct {
	EnableMicroRegistration *bool `json:"EnableMicroRegistration,omitempty" xml:"EnableMicroRegistration,omitempty"`
	// The short ID of the namespace.
	//
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// The description of the namespace.
	//
	// example:
	//
	// desc
	NamespaceDescription *string `json:"NamespaceDescription,omitempty" xml:"NamespaceDescription,omitempty"`
	// The ID of the namespace.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// name
	NamespaceName *string `json:"NamespaceName,omitempty" xml:"NamespaceName,omitempty"`
	// The region where the namespace resides.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateNamespaceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateNamespaceResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateNamespaceResponseBodyData) SetEnableMicroRegistration(v bool) *UpdateNamespaceResponseBodyData {
	s.EnableMicroRegistration = &v
	return s
}

func (s *UpdateNamespaceResponseBodyData) SetNameSpaceShortId(v string) *UpdateNamespaceResponseBodyData {
	s.NameSpaceShortId = &v
	return s
}

func (s *UpdateNamespaceResponseBodyData) SetNamespaceDescription(v string) *UpdateNamespaceResponseBodyData {
	s.NamespaceDescription = &v
	return s
}

func (s *UpdateNamespaceResponseBodyData) SetNamespaceId(v string) *UpdateNamespaceResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *UpdateNamespaceResponseBodyData) SetNamespaceName(v string) *UpdateNamespaceResponseBodyData {
	s.NamespaceName = &v
	return s
}

func (s *UpdateNamespaceResponseBodyData) SetRegionId(v string) *UpdateNamespaceResponseBodyData {
	s.RegionId = &v
	return s
}

type UpdateNamespaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateNamespaceResponse) GoString() string {
	return s.String()
}

func (s *UpdateNamespaceResponse) SetHeaders(v map[string]*string) *UpdateNamespaceResponse {
	s.Headers = v
	return s
}

func (s *UpdateNamespaceResponse) SetStatusCode(v int32) *UpdateNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateNamespaceResponse) SetBody(v *UpdateNamespaceResponseBody) *UpdateNamespaceResponse {
	s.Body = v
	return s
}

type UpdateNamespaceVpcRequest struct {
	// example:
	//
	// test
	NameSpaceShortId *string `json:"NameSpaceShortId,omitempty" xml:"NameSpaceShortId,omitempty"`
	// vpc-2ze0i263cnn311nvj\\*\\*\\*\\*
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// The ID of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-2ze0i263cnn311nvj****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s UpdateNamespaceVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateNamespaceVpcRequest) GoString() string {
	return s.String()
}

func (s *UpdateNamespaceVpcRequest) SetNameSpaceShortId(v string) *UpdateNamespaceVpcRequest {
	s.NameSpaceShortId = &v
	return s
}

func (s *UpdateNamespaceVpcRequest) SetNamespaceId(v string) *UpdateNamespaceVpcRequest {
	s.NamespaceId = &v
	return s
}

func (s *UpdateNamespaceVpcRequest) SetVpcId(v string) *UpdateNamespaceVpcRequest {
	s.VpcId = &v
	return s
}

type UpdateNamespaceVpcResponseBody struct {
	// Indicates whether the VPC information was updated. Valid values:
	//
	// 	- **true**: indicates that the information was updated.
	//
	// 	- **false**: indicates that the information could not be updated.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code. Valid values:
	//
	// 	- **2xx**: indicates that the request was successful.
	//
	// 	- **3xx**: indicates that the request was redirected.
	//
	// 	- **4xx**: indicates that the request was invalid.
	//
	// 	- **5xx**: indicates that a server error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The ID of the trace. It can be used to query the details of a request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned message.
	//
	// 	- **success*	- is returned when the request succeeds.
	//
	// 	- An error code is returned when the request fails.
	//
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The error code.
	//
	// 	- The **ErrorCode*	- parameter is not returned when the request succeeds.
	//
	// 	- The **ErrorCode*	- parameter is returned when the request fails. For more information, see **Error codes*	- in this topic.
	//
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateNamespaceVpcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateNamespaceVpcResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateNamespaceVpcResponseBody) SetCode(v string) *UpdateNamespaceVpcResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateNamespaceVpcResponseBody) SetErrorCode(v string) *UpdateNamespaceVpcResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateNamespaceVpcResponseBody) SetMessage(v string) *UpdateNamespaceVpcResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateNamespaceVpcResponseBody) SetRequestId(v string) *UpdateNamespaceVpcResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateNamespaceVpcResponseBody) SetSuccess(v bool) *UpdateNamespaceVpcResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateNamespaceVpcResponseBody) SetTraceId(v string) *UpdateNamespaceVpcResponseBody {
	s.TraceId = &v
	return s
}

type UpdateNamespaceVpcResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateNamespaceVpcResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateNamespaceVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateNamespaceVpcResponse) GoString() string {
	return s.String()
}

func (s *UpdateNamespaceVpcResponse) SetHeaders(v map[string]*string) *UpdateNamespaceVpcResponse {
	s.Headers = v
	return s
}

func (s *UpdateNamespaceVpcResponse) SetStatusCode(v int32) *UpdateNamespaceVpcResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateNamespaceVpcResponse) SetBody(v *UpdateNamespaceVpcResponseBody) *UpdateNamespaceVpcResponse {
	s.Body = v
	return s
}

type UpdateSecretRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	SecretData *UpdateSecretRequestSecretData `json:"SecretData,omitempty" xml:"SecretData,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 16
	SecretId *int64 `json:"SecretId,omitempty" xml:"SecretId,omitempty"`
}

func (s UpdateSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSecretRequest) GoString() string {
	return s.String()
}

func (s *UpdateSecretRequest) SetNamespaceId(v string) *UpdateSecretRequest {
	s.NamespaceId = &v
	return s
}

func (s *UpdateSecretRequest) SetSecretData(v *UpdateSecretRequestSecretData) *UpdateSecretRequest {
	s.SecretData = v
	return s
}

func (s *UpdateSecretRequest) SetSecretId(v int64) *UpdateSecretRequest {
	s.SecretId = &v
	return s
}

type UpdateSecretRequestSecretData struct {
	// This parameter is required.
	SecretData *string `json:"SecretData,omitempty" xml:"SecretData,omitempty"`
}

func (s UpdateSecretRequestSecretData) String() string {
	return tea.Prettify(s)
}

func (s UpdateSecretRequestSecretData) GoString() string {
	return s.String()
}

func (s *UpdateSecretRequestSecretData) SetSecretData(v string) *UpdateSecretRequestSecretData {
	s.SecretData = &v
	return s
}

type UpdateSecretShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	SecretDataShrink *string `json:"SecretData,omitempty" xml:"SecretData,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 16
	SecretId *int64 `json:"SecretId,omitempty" xml:"SecretId,omitempty"`
}

func (s UpdateSecretShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSecretShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateSecretShrinkRequest) SetNamespaceId(v string) *UpdateSecretShrinkRequest {
	s.NamespaceId = &v
	return s
}

func (s *UpdateSecretShrinkRequest) SetSecretDataShrink(v string) *UpdateSecretShrinkRequest {
	s.SecretDataShrink = &v
	return s
}

func (s *UpdateSecretShrinkRequest) SetSecretId(v int64) *UpdateSecretShrinkRequest {
	s.SecretId = &v
	return s
}

type UpdateSecretResponseBody struct {
	// example:
	//
	// 200
	Code      *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *UpdateSecretResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 91F93257-7A4A-4BD3-9A7E-2F6EAE6D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 0a98a02315955564772843261e****
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s UpdateSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSecretResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSecretResponseBody) SetCode(v string) *UpdateSecretResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSecretResponseBody) SetData(v *UpdateSecretResponseBodyData) *UpdateSecretResponseBody {
	s.Data = v
	return s
}

func (s *UpdateSecretResponseBody) SetErrorCode(v string) *UpdateSecretResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateSecretResponseBody) SetMessage(v string) *UpdateSecretResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSecretResponseBody) SetRequestId(v string) *UpdateSecretResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSecretResponseBody) SetSuccess(v bool) *UpdateSecretResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateSecretResponseBody) SetTraceId(v string) *UpdateSecretResponseBody {
	s.TraceId = &v
	return s
}

type UpdateSecretResponseBodyData struct {
	// example:
	//
	// 16
	SecretId *int64 `json:"SecretId,omitempty" xml:"SecretId,omitempty"`
}

func (s UpdateSecretResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateSecretResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateSecretResponseBodyData) SetSecretId(v int64) *UpdateSecretResponseBodyData {
	s.SecretId = &v
	return s
}

type UpdateSecretResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSecretResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSecretResponse) GoString() string {
	return s.String()
}

func (s *UpdateSecretResponse) SetHeaders(v map[string]*string) *UpdateSecretResponse {
	s.Headers = v
	return s
}

func (s *UpdateSecretResponse) SetStatusCode(v int32) *UpdateSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSecretResponse) SetBody(v *UpdateSecretResponseBody) *UpdateSecretResponse {
	s.Body = v
	return s
}

type UpdateWebApplicationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	Body *UpdateWebApplicationInput `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWebApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebApplicationRequest) GoString() string {
	return s.String()
}

func (s *UpdateWebApplicationRequest) SetNamespaceId(v string) *UpdateWebApplicationRequest {
	s.NamespaceId = &v
	return s
}

func (s *UpdateWebApplicationRequest) SetBody(v *UpdateWebApplicationInput) *UpdateWebApplicationRequest {
	s.Body = v
	return s
}

type UpdateWebApplicationResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWebApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebApplicationResponse) GoString() string {
	return s.String()
}

func (s *UpdateWebApplicationResponse) SetHeaders(v map[string]*string) *UpdateWebApplicationResponse {
	s.Headers = v
	return s
}

func (s *UpdateWebApplicationResponse) SetStatusCode(v int32) *UpdateWebApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWebApplicationResponse) SetBody(v *WebApplicationBody) *UpdateWebApplicationResponse {
	s.Body = v
	return s
}

type UpdateWebApplicationScalingConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	Body *UpdateWebApplicationScalingConfigInput `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWebApplicationScalingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebApplicationScalingConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateWebApplicationScalingConfigRequest) SetNamespaceId(v string) *UpdateWebApplicationScalingConfigRequest {
	s.NamespaceId = &v
	return s
}

func (s *UpdateWebApplicationScalingConfigRequest) SetBody(v *UpdateWebApplicationScalingConfigInput) *UpdateWebApplicationScalingConfigRequest {
	s.Body = v
	return s
}

type UpdateWebApplicationScalingConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationScalingConfigBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWebApplicationScalingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebApplicationScalingConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateWebApplicationScalingConfigResponse) SetHeaders(v map[string]*string) *UpdateWebApplicationScalingConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateWebApplicationScalingConfigResponse) SetStatusCode(v int32) *UpdateWebApplicationScalingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWebApplicationScalingConfigResponse) SetBody(v *WebApplicationScalingConfigBody) *UpdateWebApplicationScalingConfigResponse {
	s.Body = v
	return s
}

type UpdateWebApplicationTrafficConfigRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing:test
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	Body *UpdateWebApplicationTrafficConfigInput `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWebApplicationTrafficConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebApplicationTrafficConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateWebApplicationTrafficConfigRequest) SetNamespaceId(v string) *UpdateWebApplicationTrafficConfigRequest {
	s.NamespaceId = &v
	return s
}

func (s *UpdateWebApplicationTrafficConfigRequest) SetBody(v *UpdateWebApplicationTrafficConfigInput) *UpdateWebApplicationTrafficConfigRequest {
	s.Body = v
	return s
}

type UpdateWebApplicationTrafficConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebApplicationTrafficConfigBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWebApplicationTrafficConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebApplicationTrafficConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateWebApplicationTrafficConfigResponse) SetHeaders(v map[string]*string) *UpdateWebApplicationTrafficConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateWebApplicationTrafficConfigResponse) SetStatusCode(v int32) *UpdateWebApplicationTrafficConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWebApplicationTrafficConfigResponse) SetBody(v *WebApplicationTrafficConfigBody) *UpdateWebApplicationTrafficConfigResponse {
	s.Body = v
	return s
}

type UpdateWebCustomDomainRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	// This parameter is required.
	Body *UpdateWebCustomDomainInput `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWebCustomDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebCustomDomainRequest) GoString() string {
	return s.String()
}

func (s *UpdateWebCustomDomainRequest) SetNamespaceId(v string) *UpdateWebCustomDomainRequest {
	s.NamespaceId = &v
	return s
}

func (s *UpdateWebCustomDomainRequest) SetBody(v *UpdateWebCustomDomainInput) *UpdateWebCustomDomainRequest {
	s.Body = v
	return s
}

type UpdateWebCustomDomainResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WebCustomDomainBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWebCustomDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWebCustomDomainResponse) GoString() string {
	return s.String()
}

func (s *UpdateWebCustomDomainResponse) SetHeaders(v map[string]*string) *UpdateWebCustomDomainResponse {
	s.Headers = v
	return s
}

func (s *UpdateWebCustomDomainResponse) SetStatusCode(v int32) *UpdateWebCustomDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWebCustomDomainResponse) SetBody(v *WebCustomDomainBody) *UpdateWebCustomDomainResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("sae"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ba386059-69b1-4e65-b1e5-0682d9fa\\*\\*\\*\\*
//
// @param request - AbortAndRollbackChangeOrderRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AbortAndRollbackChangeOrderResponse
func (client *Client) AbortAndRollbackChangeOrderWithOptions(request *AbortAndRollbackChangeOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AbortAndRollbackChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChangeOrderId)) {
		query["ChangeOrderId"] = request.ChangeOrderId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AbortAndRollbackChangeOrder"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/changeorder/AbortAndRollbackChangeOrder"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AbortAndRollbackChangeOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ba386059-69b1-4e65-b1e5-0682d9fa\\*\\*\\*\\*
//
// @param request - AbortAndRollbackChangeOrderRequest
//
// @return AbortAndRollbackChangeOrderResponse
func (client *Client) AbortAndRollbackChangeOrder(request *AbortAndRollbackChangeOrderRequest) (_result *AbortAndRollbackChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AbortAndRollbackChangeOrderResponse{}
	_body, _err := client.AbortAndRollbackChangeOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AbortChangeOrderRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AbortChangeOrderResponse
func (client *Client) AbortChangeOrderWithOptions(request *AbortChangeOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AbortChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChangeOrderId)) {
		query["ChangeOrderId"] = request.ChangeOrderId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AbortChangeOrder"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/changeorder/AbortChangeOrder"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AbortChangeOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AbortChangeOrderRequest
//
// @return AbortChangeOrderResponse
func (client *Client) AbortChangeOrder(request *AbortChangeOrderRequest) (_result *AbortChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AbortChangeOrderResponse{}
	_body, _err := client.AbortChangeOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// cn-shanghai
//
// @param request - BatchStartApplicationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchStartApplicationsResponse
func (client *Client) BatchStartApplicationsWithOptions(request *BatchStartApplicationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchStartApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppIds)) {
		query["AppIds"] = request.AppIds
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchStartApplications"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/batchStartApplications"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchStartApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// cn-shanghai
//
// @param request - BatchStartApplicationsRequest
//
// @return BatchStartApplicationsResponse
func (client *Client) BatchStartApplications(request *BatchStartApplicationsRequest) (_result *BatchStartApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchStartApplicationsResponse{}
	_body, _err := client.BatchStartApplicationsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops multiple applications at a time.
//
// @param request - BatchStopApplicationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchStopApplicationsResponse
func (client *Client) BatchStopApplicationsWithOptions(request *BatchStopApplicationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BatchStopApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppIds)) {
		query["AppIds"] = request.AppIds
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchStopApplications"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/batchStopApplications"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchStopApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops multiple applications at a time.
//
// @param request - BatchStopApplicationsRequest
//
// @return BatchStopApplicationsResponse
func (client *Client) BatchStopApplications(request *BatchStopApplicationsRequest) (_result *BatchStopApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BatchStopApplicationsResponse{}
	_body, _err := client.BatchStopApplicationsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BindSlbRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindSlbResponse
func (client *Client) BindSlbWithOptions(request *BindSlbRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Internet)) {
		query["Internet"] = request.Internet
	}

	if !tea.BoolValue(util.IsUnset(request.InternetSlbChargeType)) {
		query["InternetSlbChargeType"] = request.InternetSlbChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetSlbId)) {
		query["InternetSlbId"] = request.InternetSlbId
	}

	if !tea.BoolValue(util.IsUnset(request.Intranet)) {
		query["Intranet"] = request.Intranet
	}

	if !tea.BoolValue(util.IsUnset(request.IntranetSlbChargeType)) {
		query["IntranetSlbChargeType"] = request.IntranetSlbChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.IntranetSlbId)) {
		query["IntranetSlbId"] = request.IntranetSlbId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindSlb"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/slb"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &BindSlbResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BindSlbRequest
//
// @return BindSlbResponse
func (client *Client) BindSlb(request *BindSlbRequest) (_result *BindSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindSlbResponse{}
	_body, _err := client.BindSlbWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ConfirmPipelineBatchRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ConfirmPipelineBatchResponse
func (client *Client) ConfirmPipelineBatchWithOptions(request *ConfirmPipelineBatchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConfirmPipelineBatchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Confirm)) {
		query["Confirm"] = request.Confirm
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfirmPipelineBatch"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/changeorder/ConfirmPipelineBatch"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfirmPipelineBatchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ConfirmPipelineBatchRequest
//
// @return ConfirmPipelineBatchResponse
func (client *Client) ConfirmPipelineBatch(request *ConfirmPipelineBatchRequest) (_result *ConfirmPipelineBatchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConfirmPipelineBatchResponse{}
	_body, _err := client.ConfirmPipelineBatchWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateApplicationResponse
func (client *Client) CreateApplicationWithOptions(request *CreateApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcrAssumeRoleArn)) {
		query["AcrAssumeRoleArn"] = request.AcrAssumeRoleArn
	}

	if !tea.BoolValue(util.IsUnset(request.AppDescription)) {
		query["AppDescription"] = request.AppDescription
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AppSource)) {
		query["AppSource"] = request.AppSource
	}

	if !tea.BoolValue(util.IsUnset(request.AutoConfig)) {
		query["AutoConfig"] = request.AutoConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.CommandArgs)) {
		query["CommandArgs"] = request.CommandArgs
	}

	if !tea.BoolValue(util.IsUnset(request.Cpu)) {
		query["Cpu"] = request.Cpu
	}

	if !tea.BoolValue(util.IsUnset(request.CustomHostAlias)) {
		query["CustomHostAlias"] = request.CustomHostAlias
	}

	if !tea.BoolValue(util.IsUnset(request.Deploy)) {
		query["Deploy"] = request.Deploy
	}

	if !tea.BoolValue(util.IsUnset(request.Dotnet)) {
		query["Dotnet"] = request.Dotnet
	}

	if !tea.BoolValue(util.IsUnset(request.EdasContainerVersion)) {
		query["EdasContainerVersion"] = request.EdasContainerVersion
	}

	if !tea.BoolValue(util.IsUnset(request.EnableEbpf)) {
		query["EnableEbpf"] = request.EnableEbpf
	}

	if !tea.BoolValue(util.IsUnset(request.EnableNewArms)) {
		query["EnableNewArms"] = request.EnableNewArms
	}

	if !tea.BoolValue(util.IsUnset(request.Envs)) {
		query["Envs"] = request.Envs
	}

	if !tea.BoolValue(util.IsUnset(request.ImagePullSecrets)) {
		query["ImagePullSecrets"] = request.ImagePullSecrets
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartArgs)) {
		query["JarStartArgs"] = request.JarStartArgs
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartOptions)) {
		query["JarStartOptions"] = request.JarStartOptions
	}

	if !tea.BoolValue(util.IsUnset(request.Jdk)) {
		query["Jdk"] = request.Jdk
	}

	if !tea.BoolValue(util.IsUnset(request.KafkaConfigs)) {
		query["KafkaConfigs"] = request.KafkaConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.Liveness)) {
		query["Liveness"] = request.Liveness
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		query["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.MicroRegistration)) {
		query["MicroRegistration"] = request.MicroRegistration
	}

	if !tea.BoolValue(util.IsUnset(request.MountDesc)) {
		query["MountDesc"] = request.MountDesc
	}

	if !tea.BoolValue(util.IsUnset(request.MountHost)) {
		query["MountHost"] = request.MountHost
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.NasConfigs)) {
		query["NasConfigs"] = request.NasConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.NasId)) {
		query["NasId"] = request.NasId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.PackageUrl)) {
		query["PackageUrl"] = request.PackageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PackageVersion)) {
		query["PackageVersion"] = request.PackageVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PhpArmsConfigLocation)) {
		query["PhpArmsConfigLocation"] = request.PhpArmsConfigLocation
	}

	if !tea.BoolValue(util.IsUnset(request.PhpConfigLocation)) {
		query["PhpConfigLocation"] = request.PhpConfigLocation
	}

	if !tea.BoolValue(util.IsUnset(request.PostStart)) {
		query["PostStart"] = request.PostStart
	}

	if !tea.BoolValue(util.IsUnset(request.PreStop)) {
		query["PreStop"] = request.PreStop
	}

	if !tea.BoolValue(util.IsUnset(request.ProgrammingLanguage)) {
		query["ProgrammingLanguage"] = request.ProgrammingLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.PvtzDiscoverySvc)) {
		query["PvtzDiscoverySvc"] = request.PvtzDiscoverySvc
	}

	if !tea.BoolValue(util.IsUnset(request.Python)) {
		query["Python"] = request.Python
	}

	if !tea.BoolValue(util.IsUnset(request.PythonModules)) {
		query["PythonModules"] = request.PythonModules
	}

	if !tea.BoolValue(util.IsUnset(request.Readiness)) {
		query["Readiness"] = request.Readiness
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	if !tea.BoolValue(util.IsUnset(request.SaeVersion)) {
		query["SaeVersion"] = request.SaeVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SlsConfigs)) {
		query["SlsConfigs"] = request.SlsConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.TerminationGracePeriodSeconds)) {
		query["TerminationGracePeriodSeconds"] = request.TerminationGracePeriodSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.Timezone)) {
		query["Timezone"] = request.Timezone
	}

	if !tea.BoolValue(util.IsUnset(request.TomcatConfig)) {
		query["TomcatConfig"] = request.TomcatConfig
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.WarStartOptions)) {
		query["WarStartOptions"] = request.WarStartOptions
	}

	if !tea.BoolValue(util.IsUnset(request.WebContainer)) {
		query["WebContainer"] = request.WebContainer
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcrInstanceId)) {
		body["AcrInstanceId"] = request.AcrInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.AssociateEip)) {
		body["AssociateEip"] = request.AssociateEip
	}

	if !tea.BoolValue(util.IsUnset(request.BaseAppId)) {
		body["BaseAppId"] = request.BaseAppId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigMapMountDesc)) {
		body["ConfigMapMountDesc"] = request.ConfigMapMountDesc
	}

	if !tea.BoolValue(util.IsUnset(request.MicroRegistrationConfig)) {
		body["MicroRegistrationConfig"] = request.MicroRegistrationConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OssAkId)) {
		body["OssAkId"] = request.OssAkId
	}

	if !tea.BoolValue(util.IsUnset(request.OssAkSecret)) {
		body["OssAkSecret"] = request.OssAkSecret
	}

	if !tea.BoolValue(util.IsUnset(request.OssMountDescs)) {
		body["OssMountDescs"] = request.OssMountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.Php)) {
		body["Php"] = request.Php
	}

	if !tea.BoolValue(util.IsUnset(request.PhpConfig)) {
		body["PhpConfig"] = request.PhpConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceTags)) {
		body["ServiceTags"] = request.ServiceTags
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/createApplication"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateApplicationRequest
//
// @return CreateApplicationResponse
func (client *Client) CreateApplication(request *CreateApplicationRequest) (_result *CreateApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateApplicationResponse{}
	_body, _err := client.CreateApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Null
//
// Description:
//
// The HTTP status code. Take note of the following rules:
//
// 	- **2xx**: The call was successful.
//
// 	- **3xx**: The call was redirected.
//
// 	- **4xx**: The call failed.
//
// 	- **5xx**: A server error occurred.
//
// @param request - CreateApplicationScalingRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateApplicationScalingRuleResponse
func (client *Client) CreateApplicationScalingRuleWithOptions(request *CreateApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EnableIdle)) {
		query["EnableIdle"] = request.EnableIdle
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstanceRatio)) {
		query["MinReadyInstanceRatio"] = request.MinReadyInstanceRatio
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstances)) {
		query["MinReadyInstances"] = request.MinReadyInstances
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleEnable)) {
		query["ScalingRuleEnable"] = request.ScalingRuleEnable
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleMetric)) {
		query["ScalingRuleMetric"] = request.ScalingRuleMetric
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleTimer)) {
		query["ScalingRuleTimer"] = request.ScalingRuleTimer
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleType)) {
		query["ScalingRuleType"] = request.ScalingRuleType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApplicationScalingRule"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/scale/applicationScalingRule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Null
//
// Description:
//
// The HTTP status code. Take note of the following rules:
//
// 	- **2xx**: The call was successful.
//
// 	- **3xx**: The call was redirected.
//
// 	- **4xx**: The call failed.
//
// 	- **5xx**: A server error occurred.
//
// @param request - CreateApplicationScalingRuleRequest
//
// @return CreateApplicationScalingRuleResponse
func (client *Client) CreateApplicationScalingRule(request *CreateApplicationScalingRuleRequest) (_result *CreateApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateApplicationScalingRuleResponse{}
	_body, _err := client.CreateApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create a ConfigMap in a namespace.
//
// @param request - CreateConfigMapRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateConfigMapResponse
func (client *Client) CreateConfigMapWithOptions(request *CreateConfigMapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateConfigMap"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/configmap/configMap"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateConfigMapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Create a ConfigMap in a namespace.
//
// @param request - CreateConfigMapRequest
//
// @return CreateConfigMapResponse
func (client *Client) CreateConfigMap(request *CreateConfigMapRequest) (_result *CreateConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConfigMapResponse{}
	_body, _err := client.CreateConfigMapWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a canary release rule for a Spring Cloud or Dubbo application.
//
// Description:
//
// >  You can configure only one canary release rule for each application.
//
// @param request - CreateGreyTagRouteRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateGreyTagRouteResponse
func (client *Client) CreateGreyTagRouteWithOptions(request *CreateGreyTagRouteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateGreyTagRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlbRules)) {
		query["AlbRules"] = request.AlbRules
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DubboRules)) {
		query["DubboRules"] = request.DubboRules
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ScRules)) {
		query["ScRules"] = request.ScRules
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateGreyTagRoute"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/tagroute/greyTagRoute"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateGreyTagRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a canary release rule for a Spring Cloud or Dubbo application.
//
// Description:
//
// >  You can configure only one canary release rule for each application.
//
// @param request - CreateGreyTagRouteRequest
//
// @return CreateGreyTagRouteResponse
func (client *Client) CreateGreyTagRoute(request *CreateGreyTagRouteRequest) (_result *CreateGreyTagRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateGreyTagRouteResponse{}
	_body, _err := client.CreateGreyTagRouteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// {"appId":"395b60e4-0550-458d-9c54-a265d036\\*\\*\\*\\*","containerPort":8080}
//
// @param request - CreateIngressRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateIngressResponse
func (client *Client) CreateIngressWithOptions(request *CreateIngressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateIngressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CertId)) {
		query["CertId"] = request.CertId
	}

	if !tea.BoolValue(util.IsUnset(request.CertIds)) {
		query["CertIds"] = request.CertIds
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultRule)) {
		query["DefaultRule"] = request.DefaultRule
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerProtocol)) {
		query["ListenerProtocol"] = request.ListenerProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalanceType)) {
		query["LoadBalanceType"] = request.LoadBalanceType
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityPolicyId)) {
		query["SecurityPolicyId"] = request.SecurityPolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.SlbId)) {
		query["SlbId"] = request.SlbId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Rules)) {
		body["Rules"] = request.Rules
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIngress"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/ingress/Ingress"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIngressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// {"appId":"395b60e4-0550-458d-9c54-a265d036\\*\\*\\*\\*","containerPort":8080}
//
// @param request - CreateIngressRequest
//
// @return CreateIngressResponse
func (client *Client) CreateIngress(request *CreateIngressRequest) (_result *CreateIngressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateIngressResponse{}
	_body, _err := client.CreateIngressWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a job template.
//
// @param request - CreateJobRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateJobResponse
func (client *Client) CreateJobWithOptions(request *CreateJobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcrAssumeRoleArn)) {
		query["AcrAssumeRoleArn"] = request.AcrAssumeRoleArn
	}

	if !tea.BoolValue(util.IsUnset(request.AppDescription)) {
		query["AppDescription"] = request.AppDescription
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AutoConfig)) {
		query["AutoConfig"] = request.AutoConfig
	}

	if !tea.BoolValue(util.IsUnset(request.BackoffLimit)) {
		query["BackoffLimit"] = request.BackoffLimit
	}

	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.CommandArgs)) {
		query["CommandArgs"] = request.CommandArgs
	}

	if !tea.BoolValue(util.IsUnset(request.ConcurrencyPolicy)) {
		query["ConcurrencyPolicy"] = request.ConcurrencyPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.Cpu)) {
		query["Cpu"] = request.Cpu
	}

	if !tea.BoolValue(util.IsUnset(request.CustomHostAlias)) {
		query["CustomHostAlias"] = request.CustomHostAlias
	}

	if !tea.BoolValue(util.IsUnset(request.EdasContainerVersion)) {
		query["EdasContainerVersion"] = request.EdasContainerVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Envs)) {
		query["Envs"] = request.Envs
	}

	if !tea.BoolValue(util.IsUnset(request.ImagePullSecrets)) {
		query["ImagePullSecrets"] = request.ImagePullSecrets
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartArgs)) {
		query["JarStartArgs"] = request.JarStartArgs
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartOptions)) {
		query["JarStartOptions"] = request.JarStartOptions
	}

	if !tea.BoolValue(util.IsUnset(request.Jdk)) {
		query["Jdk"] = request.Jdk
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		query["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.MountDesc)) {
		query["MountDesc"] = request.MountDesc
	}

	if !tea.BoolValue(util.IsUnset(request.MountHost)) {
		query["MountHost"] = request.MountHost
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.NasId)) {
		query["NasId"] = request.NasId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.PackageUrl)) {
		query["PackageUrl"] = request.PackageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PackageVersion)) {
		query["PackageVersion"] = request.PackageVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PhpConfigLocation)) {
		query["PhpConfigLocation"] = request.PhpConfigLocation
	}

	if !tea.BoolValue(util.IsUnset(request.PostStart)) {
		query["PostStart"] = request.PostStart
	}

	if !tea.BoolValue(util.IsUnset(request.PreStop)) {
		query["PreStop"] = request.PreStop
	}

	if !tea.BoolValue(util.IsUnset(request.ProgrammingLanguage)) {
		query["ProgrammingLanguage"] = request.ProgrammingLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.Python)) {
		query["Python"] = request.Python
	}

	if !tea.BoolValue(util.IsUnset(request.PythonModules)) {
		query["PythonModules"] = request.PythonModules
	}

	if !tea.BoolValue(util.IsUnset(request.RefAppId)) {
		query["RefAppId"] = request.RefAppId
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Slice)) {
		query["Slice"] = request.Slice
	}

	if !tea.BoolValue(util.IsUnset(request.SliceEnvs)) {
		query["SliceEnvs"] = request.SliceEnvs
	}

	if !tea.BoolValue(util.IsUnset(request.SlsConfigs)) {
		query["SlsConfigs"] = request.SlsConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.TerminationGracePeriodSeconds)) {
		query["TerminationGracePeriodSeconds"] = request.TerminationGracePeriodSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.Timezone)) {
		query["Timezone"] = request.Timezone
	}

	if !tea.BoolValue(util.IsUnset(request.TomcatConfig)) {
		query["TomcatConfig"] = request.TomcatConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerConfig)) {
		query["TriggerConfig"] = request.TriggerConfig
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.WarStartOptions)) {
		query["WarStartOptions"] = request.WarStartOptions
	}

	if !tea.BoolValue(util.IsUnset(request.WebContainer)) {
		query["WebContainer"] = request.WebContainer
	}

	if !tea.BoolValue(util.IsUnset(request.Workload)) {
		query["Workload"] = request.Workload
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcrInstanceId)) {
		body["AcrInstanceId"] = request.AcrInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigMapMountDesc)) {
		body["ConfigMapMountDesc"] = request.ConfigMapMountDesc
	}

	if !tea.BoolValue(util.IsUnset(request.EnableImageAccl)) {
		body["EnableImageAccl"] = request.EnableImageAccl
	}

	if !tea.BoolValue(util.IsUnset(request.OssAkId)) {
		body["OssAkId"] = request.OssAkId
	}

	if !tea.BoolValue(util.IsUnset(request.OssAkSecret)) {
		body["OssAkSecret"] = request.OssAkSecret
	}

	if !tea.BoolValue(util.IsUnset(request.OssMountDescs)) {
		body["OssMountDescs"] = request.OssMountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.PhpConfig)) {
		body["PhpConfig"] = request.PhpConfig
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateJob"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/createJob"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a job template.
//
// @param request - CreateJobRequest
//
// @return CreateJobResponse
func (client *Client) CreateJob(request *CreateJobRequest) (_result *CreateJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateJobResponse{}
	_body, _err := client.CreateJobWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a namespace.
//
// @param request - CreateNamespaceRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNamespaceResponse
func (client *Client) CreateNamespaceWithOptions(request *CreateNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableMicroRegistration)) {
		query["EnableMicroRegistration"] = request.EnableMicroRegistration
	}

	if !tea.BoolValue(util.IsUnset(request.NameSpaceShortId)) {
		query["NameSpaceShortId"] = request.NameSpaceShortId
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceDescription)) {
		query["NamespaceDescription"] = request.NamespaceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceName)) {
		query["NamespaceName"] = request.NamespaceName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNamespace"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/paas/namespace"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNamespaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a namespace.
//
// @param request - CreateNamespaceRequest
//
// @return CreateNamespaceResponse
func (client *Client) CreateNamespace(request *CreateNamespaceRequest) (_result *CreateNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateNamespaceResponse{}
	_body, _err := client.CreateNamespaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Null
//
// @param tmpReq - CreateSecretRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSecretResponse
func (client *Client) CreateSecretWithOptions(tmpReq *CreateSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSecretResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSecretShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SecretData)) {
		request.SecretDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SecretData, tea.String("SecretData"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecretDataShrink)) {
		query["SecretData"] = request.SecretDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SecretName)) {
		query["SecretName"] = request.SecretName
	}

	if !tea.BoolValue(util.IsUnset(request.SecretType)) {
		query["SecretType"] = request.SecretType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSecret"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/secret/secret"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSecretResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Null
//
// @param request - CreateSecretRequest
//
// @return CreateSecretResponse
func (client *Client) CreateSecret(request *CreateSecretRequest) (_result *CreateSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSecretResponse{}
	_body, _err := client.CreateSecretWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建应用
//
// @param request - CreateWebApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWebApplicationResponse
func (client *Client) CreateWebApplicationWithOptions(request *CreateWebApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWebApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(request.Body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWebApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/applications"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWebApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建应用
//
// @param request - CreateWebApplicationRequest
//
// @return CreateWebApplicationResponse
func (client *Client) CreateWebApplication(request *CreateWebApplicationRequest) (_result *CreateWebApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWebApplicationResponse{}
	_body, _err := client.CreateWebApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新建自定义域名
//
// @param request - CreateWebCustomDomainRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWebCustomDomainResponse
func (client *Client) CreateWebCustomDomainWithOptions(request *CreateWebCustomDomainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWebCustomDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(request.Body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWebCustomDomain"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/custom-domains"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWebCustomDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新建自定义域名
//
// @param request - CreateWebCustomDomainRequest
//
// @return CreateWebCustomDomainResponse
func (client *Client) CreateWebCustomDomain(request *CreateWebCustomDomainRequest) (_result *CreateWebCustomDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWebCustomDomainResponse{}
	_body, _err := client.CreateWebCustomDomainWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteApplicationResponse
func (client *Client) DeleteApplicationWithOptions(request *DeleteApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/deleteApplication"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteApplicationRequest
//
// @return DeleteApplicationResponse
func (client *Client) DeleteApplication(request *DeleteApplicationRequest) (_result *DeleteApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DeleteApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 7171a6ca-d1cd-4928-8642-7d5cfe69\\*\\*\\*\\*
//
// @param request - DeleteApplicationScalingRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteApplicationScalingRuleResponse
func (client *Client) DeleteApplicationScalingRuleWithOptions(request *DeleteApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApplicationScalingRule"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/scale/applicationScalingRule"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 7171a6ca-d1cd-4928-8642-7d5cfe69\\*\\*\\*\\*
//
// @param request - DeleteApplicationScalingRuleRequest
//
// @return DeleteApplicationScalingRuleResponse
func (client *Client) DeleteApplicationScalingRule(request *DeleteApplicationScalingRuleRequest) (_result *DeleteApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteApplicationScalingRuleResponse{}
	_body, _err := client.DeleteApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteConfigMapRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteConfigMapResponse
func (client *Client) DeleteConfigMapWithOptions(request *DeleteConfigMapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigMapId)) {
		query["ConfigMapId"] = request.ConfigMapId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteConfigMap"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/configmap/configMap"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteConfigMapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteConfigMapRequest
//
// @return DeleteConfigMapResponse
func (client *Client) DeleteConfigMap(request *DeleteConfigMapRequest) (_result *DeleteConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteConfigMapResponse{}
	_body, _err := client.DeleteConfigMapWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 1
//
// @param request - DeleteGreyTagRouteRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteGreyTagRouteResponse
func (client *Client) DeleteGreyTagRouteWithOptions(request *DeleteGreyTagRouteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteGreyTagRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GreyTagRouteId)) {
		query["GreyTagRouteId"] = request.GreyTagRouteId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGreyTagRoute"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/tagroute/greyTagRoute"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGreyTagRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 1
//
// @param request - DeleteGreyTagRouteRequest
//
// @return DeleteGreyTagRouteResponse
func (client *Client) DeleteGreyTagRoute(request *DeleteGreyTagRouteRequest) (_result *DeleteGreyTagRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteGreyTagRouteResponse{}
	_body, _err := client.DeleteGreyTagRouteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a job.
//
// @param request - DeleteHistoryJobRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHistoryJobResponse
func (client *Client) DeleteHistoryJobWithOptions(request *DeleteHistoryJobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteHistoryJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHistoryJob"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/deleteHistoryJob"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHistoryJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a job.
//
// @param request - DeleteHistoryJobRequest
//
// @return DeleteHistoryJobResponse
func (client *Client) DeleteHistoryJob(request *DeleteHistoryJobRequest) (_result *DeleteHistoryJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteHistoryJobResponse{}
	_body, _err := client.DeleteHistoryJobWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteIngressRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteIngressResponse
func (client *Client) DeleteIngressWithOptions(request *DeleteIngressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteIngressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IngressId)) {
		query["IngressId"] = request.IngressId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteIngress"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/ingress/Ingress"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteIngressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteIngressRequest
//
// @return DeleteIngressResponse
func (client *Client) DeleteIngress(request *DeleteIngressRequest) (_result *DeleteIngressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteIngressResponse{}
	_body, _err := client.DeleteIngressWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a job template.
//
// @param request - DeleteJobRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteJobResponse
func (client *Client) DeleteJobWithOptions(request *DeleteJobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteJob"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/deleteJob"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a job template.
//
// @param request - DeleteJobRequest
//
// @return DeleteJobResponse
func (client *Client) DeleteJob(request *DeleteJobRequest) (_result *DeleteJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteJobResponse{}
	_body, _err := client.DeleteJobWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteNamespaceRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNamespaceResponse
func (client *Client) DeleteNamespaceWithOptions(request *DeleteNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NameSpaceShortId)) {
		query["NameSpaceShortId"] = request.NameSpaceShortId
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNamespace"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/paas/namespace"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNamespaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteNamespaceRequest
//
// @return DeleteNamespaceResponse
func (client *Client) DeleteNamespace(request *DeleteNamespaceRequest) (_result *DeleteNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteNamespaceResponse{}
	_body, _err := client.DeleteNamespaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a Secret.
//
// @param request - DeleteSecretRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSecretResponse
func (client *Client) DeleteSecretWithOptions(request *DeleteSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecretId)) {
		query["SecretId"] = request.SecretId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSecret"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/secret/secret"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSecretResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a Secret.
//
// @param request - DeleteSecretRequest
//
// @return DeleteSecretResponse
func (client *Client) DeleteSecret(request *DeleteSecretRequest) (_result *DeleteSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteSecretResponse{}
	_body, _err := client.DeleteSecretWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除应用
//
// @param request - DeleteWebApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWebApplicationResponse
func (client *Client) DeleteWebApplicationWithOptions(ApplicationId *string, request *DeleteWebApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteWebApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWebApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/applications/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWebApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除应用
//
// @param request - DeleteWebApplicationRequest
//
// @return DeleteWebApplicationResponse
func (client *Client) DeleteWebApplication(ApplicationId *string, request *DeleteWebApplicationRequest) (_result *DeleteWebApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteWebApplicationResponse{}
	_body, _err := client.DeleteWebApplicationWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除应用版本
//
// @param request - DeleteWebApplicationRevisionRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWebApplicationRevisionResponse
func (client *Client) DeleteWebApplicationRevisionWithOptions(ApplicationId *string, RevisionId *string, request *DeleteWebApplicationRevisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteWebApplicationRevisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWebApplicationRevision"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-revisions/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId)) + "/revisions/" + tea.StringValue(openapiutil.GetEncodeParam(RevisionId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWebApplicationRevisionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除应用版本
//
// @param request - DeleteWebApplicationRevisionRequest
//
// @return DeleteWebApplicationRevisionResponse
func (client *Client) DeleteWebApplicationRevision(ApplicationId *string, RevisionId *string, request *DeleteWebApplicationRevisionRequest) (_result *DeleteWebApplicationRevisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteWebApplicationRevisionResponse{}
	_body, _err := client.DeleteWebApplicationRevisionWithOptions(ApplicationId, RevisionId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除自定义域名
//
// @param request - DeleteWebCustomDomainRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWebCustomDomainResponse
func (client *Client) DeleteWebCustomDomainWithOptions(DomainName *string, request *DeleteWebCustomDomainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteWebCustomDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWebCustomDomain"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/custom-domains/" + tea.StringValue(openapiutil.GetEncodeParam(DomainName))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWebCustomDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除自定义域名
//
// @param request - DeleteWebCustomDomainRequest
//
// @return DeleteWebCustomDomainResponse
func (client *Client) DeleteWebCustomDomain(DomainName *string, request *DeleteWebCustomDomainRequest) (_result *DeleteWebCustomDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteWebCustomDomainResponse{}
	_body, _err := client.DeleteWebCustomDomainWithOptions(DomainName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deploys an application.
//
// @param request - DeployApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeployApplicationResponse
func (client *Client) DeployApplicationWithOptions(request *DeployApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeployApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcrAssumeRoleArn)) {
		query["AcrAssumeRoleArn"] = request.AcrAssumeRoleArn
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AutoEnableApplicationScalingRule)) {
		query["AutoEnableApplicationScalingRule"] = request.AutoEnableApplicationScalingRule
	}

	if !tea.BoolValue(util.IsUnset(request.BatchWaitTime)) {
		query["BatchWaitTime"] = request.BatchWaitTime
	}

	if !tea.BoolValue(util.IsUnset(request.ChangeOrderDesc)) {
		query["ChangeOrderDesc"] = request.ChangeOrderDesc
	}

	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.CommandArgs)) {
		query["CommandArgs"] = request.CommandArgs
	}

	if !tea.BoolValue(util.IsUnset(request.Cpu)) {
		query["Cpu"] = request.Cpu
	}

	if !tea.BoolValue(util.IsUnset(request.CustomHostAlias)) {
		query["CustomHostAlias"] = request.CustomHostAlias
	}

	if !tea.BoolValue(util.IsUnset(request.Deploy)) {
		query["Deploy"] = request.Deploy
	}

	if !tea.BoolValue(util.IsUnset(request.Dotnet)) {
		query["Dotnet"] = request.Dotnet
	}

	if !tea.BoolValue(util.IsUnset(request.EdasContainerVersion)) {
		query["EdasContainerVersion"] = request.EdasContainerVersion
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAhas)) {
		query["EnableAhas"] = request.EnableAhas
	}

	if !tea.BoolValue(util.IsUnset(request.EnableGreyTagRoute)) {
		query["EnableGreyTagRoute"] = request.EnableGreyTagRoute
	}

	if !tea.BoolValue(util.IsUnset(request.EnableNewArms)) {
		query["EnableNewArms"] = request.EnableNewArms
	}

	if !tea.BoolValue(util.IsUnset(request.Envs)) {
		query["Envs"] = request.Envs
	}

	if !tea.BoolValue(util.IsUnset(request.ImagePullSecrets)) {
		query["ImagePullSecrets"] = request.ImagePullSecrets
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartArgs)) {
		query["JarStartArgs"] = request.JarStartArgs
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartOptions)) {
		query["JarStartOptions"] = request.JarStartOptions
	}

	if !tea.BoolValue(util.IsUnset(request.Jdk)) {
		query["Jdk"] = request.Jdk
	}

	if !tea.BoolValue(util.IsUnset(request.KafkaConfigs)) {
		query["KafkaConfigs"] = request.KafkaConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.Liveness)) {
		query["Liveness"] = request.Liveness
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		query["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.MicroRegistration)) {
		query["MicroRegistration"] = request.MicroRegistration
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstanceRatio)) {
		query["MinReadyInstanceRatio"] = request.MinReadyInstanceRatio
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstances)) {
		query["MinReadyInstances"] = request.MinReadyInstances
	}

	if !tea.BoolValue(util.IsUnset(request.MountDesc)) {
		query["MountDesc"] = request.MountDesc
	}

	if !tea.BoolValue(util.IsUnset(request.MountHost)) {
		query["MountHost"] = request.MountHost
	}

	if !tea.BoolValue(util.IsUnset(request.NasConfigs)) {
		query["NasConfigs"] = request.NasConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.NasId)) {
		query["NasId"] = request.NasId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.PackageUrl)) {
		query["PackageUrl"] = request.PackageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PackageVersion)) {
		query["PackageVersion"] = request.PackageVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PhpArmsConfigLocation)) {
		query["PhpArmsConfigLocation"] = request.PhpArmsConfigLocation
	}

	if !tea.BoolValue(util.IsUnset(request.PhpConfigLocation)) {
		query["PhpConfigLocation"] = request.PhpConfigLocation
	}

	if !tea.BoolValue(util.IsUnset(request.PostStart)) {
		query["PostStart"] = request.PostStart
	}

	if !tea.BoolValue(util.IsUnset(request.PreStop)) {
		query["PreStop"] = request.PreStop
	}

	if !tea.BoolValue(util.IsUnset(request.PvtzDiscoverySvc)) {
		query["PvtzDiscoverySvc"] = request.PvtzDiscoverySvc
	}

	if !tea.BoolValue(util.IsUnset(request.Python)) {
		query["Python"] = request.Python
	}

	if !tea.BoolValue(util.IsUnset(request.PythonModules)) {
		query["PythonModules"] = request.PythonModules
	}

	if !tea.BoolValue(util.IsUnset(request.Readiness)) {
		query["Readiness"] = request.Readiness
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SlsConfigs)) {
		query["SlsConfigs"] = request.SlsConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.TerminationGracePeriodSeconds)) {
		query["TerminationGracePeriodSeconds"] = request.TerminationGracePeriodSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.Timezone)) {
		query["Timezone"] = request.Timezone
	}

	if !tea.BoolValue(util.IsUnset(request.TomcatConfig)) {
		query["TomcatConfig"] = request.TomcatConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateStrategy)) {
		query["UpdateStrategy"] = request.UpdateStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.WarStartOptions)) {
		query["WarStartOptions"] = request.WarStartOptions
	}

	if !tea.BoolValue(util.IsUnset(request.WebContainer)) {
		query["WebContainer"] = request.WebContainer
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcrInstanceId)) {
		body["AcrInstanceId"] = request.AcrInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.AssociateEip)) {
		body["AssociateEip"] = request.AssociateEip
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigMapMountDesc)) {
		body["ConfigMapMountDesc"] = request.ConfigMapMountDesc
	}

	if !tea.BoolValue(util.IsUnset(request.MicroRegistrationConfig)) {
		body["MicroRegistrationConfig"] = request.MicroRegistrationConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OssAkId)) {
		body["OssAkId"] = request.OssAkId
	}

	if !tea.BoolValue(util.IsUnset(request.OssAkSecret)) {
		body["OssAkSecret"] = request.OssAkSecret
	}

	if !tea.BoolValue(util.IsUnset(request.OssMountDescs)) {
		body["OssMountDescs"] = request.OssMountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.Php)) {
		body["Php"] = request.Php
	}

	if !tea.BoolValue(util.IsUnset(request.PhpConfig)) {
		body["PhpConfig"] = request.PhpConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceTags)) {
		body["ServiceTags"] = request.ServiceTags
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeployApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/deployApplication"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeployApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deploys an application.
//
// @param request - DeployApplicationRequest
//
// @return DeployApplicationResponse
func (client *Client) DeployApplication(request *DeployApplicationRequest) (_result *DeployApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeployApplicationResponse{}
	_body, _err := client.DeployApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the metadata details of the service of an application.
//
// @param request - DescribeAppServiceDetailRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAppServiceDetailResponse
func (client *Client) DescribeAppServiceDetailWithOptions(request *DescribeAppServiceDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeAppServiceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.NacosInstanceId)) {
		query["NacosInstanceId"] = request.NacosInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NacosNamespaceId)) {
		query["NacosNamespaceId"] = request.NacosNamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceGroup)) {
		query["ServiceGroup"] = request.ServiceGroup
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceVersion)) {
		query["ServiceVersion"] = request.ServiceVersion
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAppServiceDetail"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/service/describeAppServiceDetail"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppServiceDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the metadata details of the service of an application.
//
// @param request - DescribeAppServiceDetailRequest
//
// @return DescribeAppServiceDetailResponse
func (client *Client) DescribeAppServiceDetail(request *DescribeAppServiceDetailRequest) (_result *DescribeAppServiceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeAppServiceDetailResponse{}
	_body, _err := client.DescribeAppServiceDetailWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of an application.
//
// @param request - DescribeApplicationConfigRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApplicationConfigResponse
func (client *Client) DescribeApplicationConfigWithOptions(request *DescribeApplicationConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeApplicationConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.VersionId)) {
		query["VersionId"] = request.VersionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationConfig"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/describeApplicationConfig"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of an application.
//
// @param request - DescribeApplicationConfigRequest
//
// @return DescribeApplicationConfigResponse
func (client *Client) DescribeApplicationConfig(request *DescribeApplicationConfigRequest) (_result *DescribeApplicationConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeApplicationConfigResponse{}
	_body, _err := client.DescribeApplicationConfigWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeApplicationGroupsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApplicationGroupsResponse
func (client *Client) DescribeApplicationGroupsWithOptions(request *DescribeApplicationGroupsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeApplicationGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationGroups"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/describeApplicationGroups"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeApplicationGroupsRequest
//
// @return DescribeApplicationGroupsResponse
func (client *Client) DescribeApplicationGroups(request *DescribeApplicationGroupsRequest) (_result *DescribeApplicationGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeApplicationGroupsResponse{}
	_body, _err := client.DescribeApplicationGroupsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about the image of an application.
//
// @param request - DescribeApplicationImageRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApplicationImageResponse
func (client *Client) DescribeApplicationImageWithOptions(request *DescribeApplicationImageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeApplicationImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		query["ImageUrl"] = request.ImageUrl
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationImage"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/container/describeApplicationImage"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the image of an application.
//
// @param request - DescribeApplicationImageRequest
//
// @return DescribeApplicationImageResponse
func (client *Client) DescribeApplicationImage(request *DescribeApplicationImageRequest) (_result *DescribeApplicationImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeApplicationImageResponse{}
	_body, _err := client.DescribeApplicationImageWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries application instances.
//
// @param request - DescribeApplicationInstancesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApplicationInstancesResponse
func (client *Client) DescribeApplicationInstancesWithOptions(request *DescribeApplicationInstancesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeApplicationInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Reverse)) {
		query["Reverse"] = request.Reverse
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationInstances"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/describeApplicationInstances"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries application instances.
//
// @param request - DescribeApplicationInstancesRequest
//
// @return DescribeApplicationInstancesResponse
func (client *Client) DescribeApplicationInstances(request *DescribeApplicationInstancesRequest) (_result *DescribeApplicationInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeApplicationInstancesResponse{}
	_body, _err := client.DescribeApplicationInstancesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a specified auto scaling policy of an application.
//
// @param request - DescribeApplicationScalingRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApplicationScalingRuleResponse
func (client *Client) DescribeApplicationScalingRuleWithOptions(request *DescribeApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationScalingRule"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/scale/applicationScalingRule"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a specified auto scaling policy of an application.
//
// @param request - DescribeApplicationScalingRuleRequest
//
// @return DescribeApplicationScalingRuleResponse
func (client *Client) DescribeApplicationScalingRule(request *DescribeApplicationScalingRuleRequest) (_result *DescribeApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeApplicationScalingRuleResponse{}
	_body, _err := client.DescribeApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the auto scaling policies of an application.
//
// @param request - DescribeApplicationScalingRulesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApplicationScalingRulesResponse
func (client *Client) DescribeApplicationScalingRulesWithOptions(request *DescribeApplicationScalingRulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeApplicationScalingRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationScalingRules"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/scale/applicationScalingRules"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationScalingRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the auto scaling policies of an application.
//
// @param request - DescribeApplicationScalingRulesRequest
//
// @return DescribeApplicationScalingRulesResponse
func (client *Client) DescribeApplicationScalingRules(request *DescribeApplicationScalingRulesRequest) (_result *DescribeApplicationScalingRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeApplicationScalingRulesResponse{}
	_body, _err := client.DescribeApplicationScalingRulesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 017f39b8-dfa4-4e16-a84b-1dcee4b1\\*\\*\\*\\*
//
// @param request - DescribeApplicationSlbsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApplicationSlbsResponse
func (client *Client) DescribeApplicationSlbsWithOptions(request *DescribeApplicationSlbsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeApplicationSlbsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationSlbs"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/slb"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationSlbsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 017f39b8-dfa4-4e16-a84b-1dcee4b1\\*\\*\\*\\*
//
// @param request - DescribeApplicationSlbsRequest
//
// @return DescribeApplicationSlbsResponse
func (client *Client) DescribeApplicationSlbs(request *DescribeApplicationSlbsRequest) (_result *DescribeApplicationSlbsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeApplicationSlbsResponse{}
	_body, _err := client.DescribeApplicationSlbsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeApplicationStatusRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApplicationStatusResponse
func (client *Client) DescribeApplicationStatusWithOptions(request *DescribeApplicationStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeApplicationStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationStatus"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/describeApplicationStatus"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeApplicationStatusRequest
//
// @return DescribeApplicationStatusResponse
func (client *Client) DescribeApplicationStatus(request *DescribeApplicationStatusRequest) (_result *DescribeApplicationStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeApplicationStatusResponse{}
	_body, _err := client.DescribeApplicationStatusWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeChangeOrderRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChangeOrderResponse
func (client *Client) DescribeChangeOrderWithOptions(request *DescribeChangeOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChangeOrderId)) {
		query["ChangeOrderId"] = request.ChangeOrderId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeChangeOrder"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/changeorder/DescribeChangeOrder"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeChangeOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeChangeOrderRequest
//
// @return DescribeChangeOrderResponse
func (client *Client) DescribeChangeOrder(request *DescribeChangeOrderRequest) (_result *DescribeChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeChangeOrderResponse{}
	_body, _err := client.DescribeChangeOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeComponentsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeComponentsResponse
func (client *Client) DescribeComponentsWithOptions(request *DescribeComponentsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeComponentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeComponents"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/resource/components"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeComponentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeComponentsRequest
//
// @return DescribeComponentsResponse
func (client *Client) DescribeComponents(request *DescribeComponentsRequest) (_result *DescribeComponentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeComponentsResponse{}
	_body, _err := client.DescribeComponentsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConfigMapRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConfigMapResponse
func (client *Client) DescribeConfigMapWithOptions(request *DescribeConfigMapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigMapId)) {
		query["ConfigMapId"] = request.ConfigMapId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConfigMap"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/configmap/configMap"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConfigMapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConfigMapRequest
//
// @return DescribeConfigMapResponse
func (client *Client) DescribeConfigMap(request *DescribeConfigMapRequest) (_result *DescribeConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeConfigMapResponse{}
	_body, _err := client.DescribeConfigMapWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConfigurationPriceRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConfigurationPriceResponse
func (client *Client) DescribeConfigurationPriceWithOptions(request *DescribeConfigurationPriceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeConfigurationPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cpu)) {
		query["Cpu"] = request.Cpu
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		query["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.Workload)) {
		query["Workload"] = request.Workload
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConfigurationPrice"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/paas/configurationPrice"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConfigurationPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConfigurationPriceRequest
//
// @return DescribeConfigurationPriceResponse
func (client *Client) DescribeConfigurationPrice(request *DescribeConfigurationPriceRequest) (_result *DescribeConfigurationPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeConfigurationPriceResponse{}
	_body, _err := client.DescribeConfigurationPriceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEdasContainersResponse
func (client *Client) DescribeEdasContainersWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeEdasContainersResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEdasContainers"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/resource/edasContainers"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEdasContainersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeEdasContainersResponse
func (client *Client) DescribeEdasContainers() (_result *DescribeEdasContainersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeEdasContainersResponse{}
	_body, _err := client.DescribeEdasContainersWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a canary release rule based on the specified rule ID.
//
// @param request - DescribeGreyTagRouteRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGreyTagRouteResponse
func (client *Client) DescribeGreyTagRouteWithOptions(request *DescribeGreyTagRouteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeGreyTagRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GreyTagRouteId)) {
		query["GreyTagRouteId"] = request.GreyTagRouteId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGreyTagRoute"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/tagroute/greyTagRoute"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGreyTagRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a canary release rule based on the specified rule ID.
//
// @param request - DescribeGreyTagRouteRequest
//
// @return DescribeGreyTagRouteResponse
func (client *Client) DescribeGreyTagRoute(request *DescribeGreyTagRouteRequest) (_result *DescribeGreyTagRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeGreyTagRouteResponse{}
	_body, _err := client.DescribeGreyTagRouteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeIngressRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIngressResponse
func (client *Client) DescribeIngressWithOptions(request *DescribeIngressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeIngressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IngressId)) {
		query["IngressId"] = request.IngressId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIngress"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/ingress/Ingress"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIngressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeIngressRequest
//
// @return DescribeIngressResponse
func (client *Client) DescribeIngress(request *DescribeIngressRequest) (_result *DescribeIngressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeIngressResponse{}
	_body, _err := client.DescribeIngressWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeInstanceLogRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceLogResponse
func (client *Client) DescribeInstanceLogWithOptions(request *DescribeInstanceLogRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeInstanceLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceLog"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/instance/describeInstanceLog"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeInstanceLogRequest
//
// @return DescribeInstanceLogResponse
func (client *Client) DescribeInstanceLog(request *DescribeInstanceLogRequest) (_result *DescribeInstanceLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeInstanceLogResponse{}
	_body, _err := client.DescribeInstanceLogWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceSpecificationsResponse
func (client *Client) DescribeInstanceSpecificationsWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeInstanceSpecificationsResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceSpecifications"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/paas/quota/instanceSpecifications"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceSpecificationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeInstanceSpecificationsResponse
func (client *Client) DescribeInstanceSpecifications() (_result *DescribeInstanceSpecificationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeInstanceSpecificationsResponse{}
	_body, _err := client.DescribeInstanceSpecificationsWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of a job template.
//
// @param request - DescribeJobRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeJobResponse
func (client *Client) DescribeJobWithOptions(request *DescribeJobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeJob"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/describeJob"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of a job template.
//
// @param request - DescribeJobRequest
//
// @return DescribeJobResponse
func (client *Client) DescribeJob(request *DescribeJobRequest) (_result *DescribeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeJobResponse{}
	_body, _err := client.DescribeJobWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Query the information about jobs.
//
// @param request - DescribeJobHistoryRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeJobHistoryResponse
func (client *Client) DescribeJobHistoryWithOptions(request *DescribeJobHistoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeJobHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeJobHistory"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/describeJobHistory"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeJobHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query the information about jobs.
//
// @param request - DescribeJobHistoryRequest
//
// @return DescribeJobHistoryResponse
func (client *Client) DescribeJobHistory(request *DescribeJobHistoryRequest) (_result *DescribeJobHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeJobHistoryResponse{}
	_body, _err := client.DescribeJobHistoryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status of a job.
//
// @param request - DescribeJobStatusRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeJobStatusResponse
func (client *Client) DescribeJobStatusWithOptions(request *DescribeJobStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeJobStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeJobStatus"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/describeJobStatus"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeJobStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of a job.
//
// @param request - DescribeJobStatusRequest
//
// @return DescribeJobStatusResponse
func (client *Client) DescribeJobStatus(request *DescribeJobStatusRequest) (_result *DescribeJobStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeJobStatusResponse{}
	_body, _err := client.DescribeJobStatusWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a namespace.
//
// @param request - DescribeNamespaceRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNamespaceResponse
func (client *Client) DescribeNamespaceWithOptions(request *DescribeNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NameSpaceShortId)) {
		query["NameSpaceShortId"] = request.NameSpaceShortId
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNamespace"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/paas/namespace"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNamespaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a namespace.
//
// @param request - DescribeNamespaceRequest
//
// @return DescribeNamespaceResponse
func (client *Client) DescribeNamespace(request *DescribeNamespaceRequest) (_result *DescribeNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeNamespaceResponse{}
	_body, _err := client.DescribeNamespaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of namespaces.
//
// @param request - DescribeNamespaceListRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNamespaceListResponse
func (client *Client) DescribeNamespaceListWithOptions(request *DescribeNamespaceListRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeNamespaceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContainCustom)) {
		query["ContainCustom"] = request.ContainCustom
	}

	if !tea.BoolValue(util.IsUnset(request.HybridCloudExclude)) {
		query["HybridCloudExclude"] = request.HybridCloudExclude
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNamespaceList"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/namespace/describeNamespaceList"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNamespaceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of namespaces.
//
// @param request - DescribeNamespaceListRequest
//
// @return DescribeNamespaceListResponse
func (client *Client) DescribeNamespaceList(request *DescribeNamespaceListRequest) (_result *DescribeNamespaceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeNamespaceListResponse{}
	_body, _err := client.DescribeNamespaceListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeNamespaceResourcesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNamespaceResourcesResponse
func (client *Client) DescribeNamespaceResourcesWithOptions(request *DescribeNamespaceResourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeNamespaceResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NameSpaceShortId)) {
		query["NameSpaceShortId"] = request.NameSpaceShortId
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNamespaceResources"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/namespace/describeNamespaceResources"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNamespaceResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeNamespaceResourcesRequest
//
// @return DescribeNamespaceResourcesResponse
func (client *Client) DescribeNamespaceResources(request *DescribeNamespaceResourcesRequest) (_result *DescribeNamespaceResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeNamespaceResourcesResponse{}
	_body, _err := client.DescribeNamespaceResourcesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of namespaces.
//
// @param request - DescribeNamespacesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNamespacesResponse
func (client *Client) DescribeNamespacesWithOptions(request *DescribeNamespacesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeNamespacesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNamespaces"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/paas/namespaces"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNamespacesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of namespaces.
//
// @param request - DescribeNamespacesRequest
//
// @return DescribeNamespacesResponse
func (client *Client) DescribeNamespaces(request *DescribeNamespacesRequest) (_result *DescribeNamespacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeNamespacesResponse{}
	_body, _err := client.DescribeNamespacesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information of a batch.
//
// @param request - DescribePipelineRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePipelineResponse
func (client *Client) DescribePipelineWithOptions(request *DescribePipelineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePipeline"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/changeorder/DescribePipeline"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information of a batch.
//
// @param request - DescribePipelineRequest
//
// @return DescribePipelineResponse
func (client *Client) DescribePipeline(request *DescribePipelineRequest) (_result *DescribePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribePipelineResponse{}
	_body, _err := client.DescribePipelineWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries available regions.
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegionsWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegions"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/paas/regionConfig"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries available regions.
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegions() (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a Secret instance.
//
// @param request - DescribeSecretRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecretResponse
func (client *Client) DescribeSecretWithOptions(request *DescribeSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecretId)) {
		query["SecretId"] = request.SecretId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecret"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/secret/secret"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSecretResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a Secret instance.
//
// @param request - DescribeSecretRequest
//
// @return DescribeSecretResponse
func (client *Client) DescribeSecret(request *DescribeSecretRequest) (_result *DescribeSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeSecretResponse{}
	_body, _err := client.DescribeSecretWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取应用信息
//
// @param request - DescribeWebApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebApplicationResponse
func (client *Client) DescribeWebApplicationWithOptions(ApplicationId *string, request *DescribeWebApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeWebApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/applications/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取应用信息
//
// @param request - DescribeWebApplicationRequest
//
// @return DescribeWebApplicationResponse
func (client *Client) DescribeWebApplication(ApplicationId *string, request *DescribeWebApplicationRequest) (_result *DescribeWebApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeWebApplicationResponse{}
	_body, _err := client.DescribeWebApplicationWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 应用资源用量统计
//
// @param request - DescribeWebApplicationResourceStaticsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebApplicationResourceStaticsResponse
func (client *Client) DescribeWebApplicationResourceStaticsWithOptions(ApplicationId *string, request *DescribeWebApplicationResourceStaticsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeWebApplicationResourceStaticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebApplicationResourceStatics"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/applications-observability/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId)) + "/resource"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebApplicationResourceStaticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 应用资源用量统计
//
// @param request - DescribeWebApplicationResourceStaticsRequest
//
// @return DescribeWebApplicationResourceStaticsResponse
func (client *Client) DescribeWebApplicationResourceStatics(ApplicationId *string, request *DescribeWebApplicationResourceStaticsRequest) (_result *DescribeWebApplicationResourceStaticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeWebApplicationResourceStaticsResponse{}
	_body, _err := client.DescribeWebApplicationResourceStaticsWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取应用版本
//
// @param request - DescribeWebApplicationRevisionRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebApplicationRevisionResponse
func (client *Client) DescribeWebApplicationRevisionWithOptions(ApplicationId *string, RevisionId *string, request *DescribeWebApplicationRevisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeWebApplicationRevisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebApplicationRevision"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-revisions/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId)) + "/revisions/" + tea.StringValue(openapiutil.GetEncodeParam(RevisionId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebApplicationRevisionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取应用版本
//
// @param request - DescribeWebApplicationRevisionRequest
//
// @return DescribeWebApplicationRevisionResponse
func (client *Client) DescribeWebApplicationRevision(ApplicationId *string, RevisionId *string, request *DescribeWebApplicationRevisionRequest) (_result *DescribeWebApplicationRevisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeWebApplicationRevisionResponse{}
	_body, _err := client.DescribeWebApplicationRevisionWithOptions(ApplicationId, RevisionId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 弹性配置详情
//
// @param request - DescribeWebApplicationScalingConfigRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebApplicationScalingConfigResponse
func (client *Client) DescribeWebApplicationScalingConfigWithOptions(ApplicationId *string, request *DescribeWebApplicationScalingConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeWebApplicationScalingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebApplicationScalingConfig"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-scaling/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebApplicationScalingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 弹性配置详情
//
// @param request - DescribeWebApplicationScalingConfigRequest
//
// @return DescribeWebApplicationScalingConfigResponse
func (client *Client) DescribeWebApplicationScalingConfig(ApplicationId *string, request *DescribeWebApplicationScalingConfigRequest) (_result *DescribeWebApplicationScalingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeWebApplicationScalingConfigResponse{}
	_body, _err := client.DescribeWebApplicationScalingConfigWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 流量配置详情
//
// @param request - DescribeWebApplicationTrafficConfigRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebApplicationTrafficConfigResponse
func (client *Client) DescribeWebApplicationTrafficConfigWithOptions(ApplicationId *string, request *DescribeWebApplicationTrafficConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeWebApplicationTrafficConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebApplicationTrafficConfig"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-traffic/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebApplicationTrafficConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 流量配置详情
//
// @param request - DescribeWebApplicationTrafficConfigRequest
//
// @return DescribeWebApplicationTrafficConfigResponse
func (client *Client) DescribeWebApplicationTrafficConfig(ApplicationId *string, request *DescribeWebApplicationTrafficConfigRequest) (_result *DescribeWebApplicationTrafficConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeWebApplicationTrafficConfigResponse{}
	_body, _err := client.DescribeWebApplicationTrafficConfigWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取域名.
//
// @param request - DescribeWebCustomDomainRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebCustomDomainResponse
func (client *Client) DescribeWebCustomDomainWithOptions(DomainName *string, request *DescribeWebCustomDomainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeWebCustomDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebCustomDomain"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/custom-domains/" + tea.StringValue(openapiutil.GetEncodeParam(DomainName))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebCustomDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取域名.
//
// @param request - DescribeWebCustomDomainRequest
//
// @return DescribeWebCustomDomainResponse
func (client *Client) DescribeWebCustomDomain(DomainName *string, request *DescribeWebCustomDomainRequest) (_result *DescribeWebCustomDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeWebCustomDomainResponse{}
	_body, _err := client.DescribeWebCustomDomainWithOptions(DomainName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 应用实例日志
//
// @param request - DescribeWebInstanceLogsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeWebInstanceLogsResponse
func (client *Client) DescribeWebInstanceLogsWithOptions(ApplicationId *string, InstanceId *string, request *DescribeWebInstanceLogsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeWebInstanceLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebInstanceLogs"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/applications-observability/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId)) + "/instances/" + tea.StringValue(openapiutil.GetEncodeParam(InstanceId)) + "/logs"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebInstanceLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 应用实例日志
//
// @param request - DescribeWebInstanceLogsRequest
//
// @return DescribeWebInstanceLogsResponse
func (client *Client) DescribeWebInstanceLogs(ApplicationId *string, InstanceId *string, request *DescribeWebInstanceLogsRequest) (_result *DescribeWebInstanceLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeWebInstanceLogsResponse{}
	_body, _err := client.DescribeWebInstanceLogsWithOptions(ApplicationId, InstanceId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DisableApplicationScalingRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableApplicationScalingRuleResponse
func (client *Client) DisableApplicationScalingRuleWithOptions(request *DisableApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DisableApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableApplicationScalingRule"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/scale/disableApplicationScalingRule"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DisableApplicationScalingRuleRequest
//
// @return DisableApplicationScalingRuleResponse
func (client *Client) DisableApplicationScalingRule(request *DisableApplicationScalingRuleRequest) (_result *DisableApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DisableApplicationScalingRuleResponse{}
	_body, _err := client.DisableApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables an auto scaling policy for an application.
//
// @param request - EnableApplicationScalingRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableApplicationScalingRuleResponse
func (client *Client) EnableApplicationScalingRuleWithOptions(request *EnableApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableApplicationScalingRule"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/scale/enableApplicationScalingRule"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables an auto scaling policy for an application.
//
// @param request - EnableApplicationScalingRuleRequest
//
// @return EnableApplicationScalingRuleResponse
func (client *Client) EnableApplicationScalingRule(request *EnableApplicationScalingRuleRequest) (_result *EnableApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableApplicationScalingRuleResponse{}
	_body, _err := client.EnableApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ExecJobRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecJobResponse
func (client *Client) ExecJobWithOptions(request *ExecJobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.CommandArgs)) {
		query["CommandArgs"] = request.CommandArgs
	}

	if !tea.BoolValue(util.IsUnset(request.Envs)) {
		query["Envs"] = request.Envs
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartArgs)) {
		query["JarStartArgs"] = request.JarStartArgs
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartOptions)) {
		query["JarStartOptions"] = request.JarStartOptions
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	if !tea.BoolValue(util.IsUnset(request.Time)) {
		query["Time"] = request.Time
	}

	if !tea.BoolValue(util.IsUnset(request.WarStartOptions)) {
		query["WarStartOptions"] = request.WarStartOptions
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExecJob"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/execJob"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExecJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ExecJobRequest
//
// @return ExecJobResponse
func (client *Client) ExecJob(request *ExecJobRequest) (_result *ExecJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecJobResponse{}
	_body, _err := client.ExecJobWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the top N applications in Application Monitoring.
//
// @param request - GetArmsTopNMetricRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetArmsTopNMetricResponse
func (client *Client) GetArmsTopNMetricWithOptions(request *GetArmsTopNMetricRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetArmsTopNMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppSource)) {
		query["AppSource"] = request.AppSource
	}

	if !tea.BoolValue(util.IsUnset(request.CpuStrategy)) {
		query["CpuStrategy"] = request.CpuStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetArmsTopNMetric"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/getArmsTopNMetric"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetArmsTopNMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the top N applications in Application Monitoring.
//
// @param request - GetArmsTopNMetricRequest
//
// @return GetArmsTopNMetricResponse
func (client *Client) GetArmsTopNMetric(request *GetArmsTopNMetricRequest) (_result *GetArmsTopNMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetArmsTopNMetricResponse{}
	_body, _err := client.GetArmsTopNMetricWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the top N applications in which abnormal instances exist. The applications are sorted by the total number of abnormal instances.
//
// @param request - GetAvailabilityMetricRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAvailabilityMetricResponse
func (client *Client) GetAvailabilityMetricWithOptions(request *GetAvailabilityMetricRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAvailabilityMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppSource)) {
		query["AppSource"] = request.AppSource
	}

	if !tea.BoolValue(util.IsUnset(request.CpuStrategy)) {
		query["CpuStrategy"] = request.CpuStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAvailabilityMetric"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/getAvailabilityMetric"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAvailabilityMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the top N applications in which abnormal instances exist. The applications are sorted by the total number of abnormal instances.
//
// @param request - GetAvailabilityMetricRequest
//
// @return GetAvailabilityMetricResponse
func (client *Client) GetAvailabilityMetric(request *GetAvailabilityMetricRequest) (_result *GetAvailabilityMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAvailabilityMetricResponse{}
	_body, _err := client.GetAvailabilityMetricWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries top N applications in abnormal change orders.
//
// @param request - GetChangeOrderMetricRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetChangeOrderMetricResponse
func (client *Client) GetChangeOrderMetricWithOptions(request *GetChangeOrderMetricRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetChangeOrderMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppSource)) {
		query["AppSource"] = request.AppSource
	}

	if !tea.BoolValue(util.IsUnset(request.CpuStrategy)) {
		query["CpuStrategy"] = request.CpuStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTime)) {
		query["CreateTime"] = request.CreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetChangeOrderMetric"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/getChangeOrderMetric"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetChangeOrderMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries top N applications in abnormal change orders.
//
// @param request - GetChangeOrderMetricRequest
//
// @return GetChangeOrderMetricResponse
func (client *Client) GetChangeOrderMetric(request *GetChangeOrderMetricRequest) (_result *GetChangeOrderMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetChangeOrderMetricResponse{}
	_body, _err := client.GetChangeOrderMetricWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the top N applications in which auto scaling takes effect.
//
// @param request - GetScaleAppMetricRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetScaleAppMetricResponse
func (client *Client) GetScaleAppMetricWithOptions(request *GetScaleAppMetricRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetScaleAppMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppSource)) {
		query["AppSource"] = request.AppSource
	}

	if !tea.BoolValue(util.IsUnset(request.CpuStrategy)) {
		query["CpuStrategy"] = request.CpuStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetScaleAppMetric"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/getScaleAppMetric"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetScaleAppMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the top N applications in which auto scaling takes effect.
//
// @param request - GetScaleAppMetricRequest
//
// @return GetScaleAppMetricResponse
func (client *Client) GetScaleAppMetric(request *GetScaleAppMetricRequest) (_result *GetScaleAppMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetScaleAppMetricResponse{}
	_body, _err := client.GetScaleAppMetricWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the top N applications in which Warning events occur.
//
// @param request - GetWarningEventMetricRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWarningEventMetricResponse
func (client *Client) GetWarningEventMetricWithOptions(request *GetWarningEventMetricRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWarningEventMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppSource)) {
		query["AppSource"] = request.AppSource
	}

	if !tea.BoolValue(util.IsUnset(request.CpuStrategy)) {
		query["CpuStrategy"] = request.CpuStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWarningEventMetric"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/getWarningEventMetric"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWarningEventMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the top N applications in which Warning events occur.
//
// @param request - GetWarningEventMetricRequest
//
// @return GetWarningEventMetricResponse
func (client *Client) GetWarningEventMetric(request *GetWarningEventMetricRequest) (_result *GetWarningEventMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWarningEventMetricResponse{}
	_body, _err := client.GetWarningEventMetricWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the events that occurred in an application.
//
// @param request - ListAppEventsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAppEventsResponse
func (client *Client) ListAppEventsWithOptions(request *ListAppEventsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectKind)) {
		query["ObjectKind"] = request.ObjectKind
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectName)) {
		query["ObjectName"] = request.ObjectName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAppEvents"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/listAppEvents"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAppEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the events that occurred in an application.
//
// @param request - ListAppEventsRequest
//
// @return ListAppEventsResponse
func (client *Client) ListAppEvents(request *ListAppEventsRequest) (_result *ListAppEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppEventsResponse{}
	_body, _err := client.ListAppEventsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 6dcc8c9e-d3da-478a-a066-86dcf820\\*\\*\\*\\*
//
// @param request - ListAppServicesPageRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAppServicesPageResponse
func (client *Client) ListAppServicesPageWithOptions(request *ListAppServicesPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppServicesPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAppServicesPage"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/service/listAppServicesPage"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAppServicesPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 6dcc8c9e-d3da-478a-a066-86dcf820\\*\\*\\*\\*
//
// @param request - ListAppServicesPageRequest
//
// @return ListAppServicesPageResponse
func (client *Client) ListAppServicesPage(request *ListAppServicesPageRequest) (_result *ListAppServicesPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppServicesPageResponse{}
	_body, _err := client.ListAppServicesPageWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 7171a6ca-d1cd-4928-8642-7d5cfe69\\*\\*\\*\\*
//
// @param request - ListAppVersionsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAppVersionsResponse
func (client *Client) ListAppVersionsWithOptions(request *ListAppVersionsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppVersionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAppVersions"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/listAppVersions"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAppVersionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 7171a6ca-d1cd-4928-8642-7d5cfe69\\*\\*\\*\\*
//
// @param request - ListAppVersionsRequest
//
// @return ListAppVersionsResponse
func (client *Client) ListAppVersions(request *ListAppVersionsRequest) (_result *ListAppVersionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppVersionsResponse{}
	_body, _err := client.ListAppVersionsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The ID of the namespace.
//
// @param request - ListApplicationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListApplicationsResponse
func (client *Client) ListApplicationsWithOptions(request *ListApplicationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AppSource)) {
		query["AppSource"] = request.AppSource
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.FieldType)) {
		query["FieldType"] = request.FieldType
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["FieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Reverse)) {
		query["Reverse"] = request.Reverse
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApplications"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/listApplications"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The ID of the namespace.
//
// @param request - ListApplicationsRequest
//
// @return ListApplicationsResponse
func (client *Client) ListApplications(request *ListApplicationsRequest) (_result *ListApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplicationsResponse{}
	_body, _err := client.ListApplicationsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListChangeOrdersRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListChangeOrdersResponse
func (client *Client) ListChangeOrdersWithOptions(request *ListChangeOrdersRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListChangeOrdersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CoStatus)) {
		query["CoStatus"] = request.CoStatus
	}

	if !tea.BoolValue(util.IsUnset(request.CoType)) {
		query["CoType"] = request.CoType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListChangeOrders"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/changeorder/ListChangeOrders"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListChangeOrdersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListChangeOrdersRequest
//
// @return ListChangeOrdersResponse
func (client *Client) ListChangeOrders(request *ListChangeOrdersRequest) (_result *ListChangeOrdersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListChangeOrdersResponse{}
	_body, _err := client.ListChangeOrdersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// b2a8a925-477a-4ed7-b825-d5e22500\\*\\*\\*\\*
//
// @param request - ListConsumedServicesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListConsumedServicesResponse
func (client *Client) ListConsumedServicesWithOptions(request *ListConsumedServicesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListConsumedServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListConsumedServices"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/service/listConsumedServices"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListConsumedServicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// b2a8a925-477a-4ed7-b825-d5e22500\\*\\*\\*\\*
//
// @param request - ListConsumedServicesRequest
//
// @return ListConsumedServicesResponse
func (client *Client) ListConsumedServices(request *ListConsumedServicesRequest) (_result *ListConsumedServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListConsumedServicesResponse{}
	_body, _err := client.ListConsumedServicesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a canary release rule based on an application ID.
//
// Description:
//
// >  You can configure only one canary release rule for each application.
//
// @param request - ListGreyTagRouteRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListGreyTagRouteResponse
func (client *Client) ListGreyTagRouteWithOptions(request *ListGreyTagRouteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListGreyTagRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListGreyTagRoute"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/tagroute/greyTagRouteList"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListGreyTagRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a canary release rule based on an application ID.
//
// Description:
//
// >  You can configure only one canary release rule for each application.
//
// @param request - ListGreyTagRouteRequest
//
// @return ListGreyTagRouteResponse
func (client *Client) ListGreyTagRoute(request *ListGreyTagRouteRequest) (_result *ListGreyTagRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListGreyTagRouteResponse{}
	_body, _err := client.ListGreyTagRouteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The returned message.
//
// 	- **success*	- is returned when the request succeeds.
//
// 	- An error code is returned when the request fails.
//
// @param request - ListIngressesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIngressesResponse
func (client *Client) ListIngressesWithOptions(request *ListIngressesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListIngressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIngresses"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/ingress/IngressList"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIngressesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The returned message.
//
// 	- **success*	- is returned when the request succeeds.
//
// 	- An error code is returned when the request fails.
//
// @param request - ListIngressesRequest
//
// @return ListIngressesResponse
func (client *Client) ListIngresses(request *ListIngressesRequest) (_result *ListIngressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListIngressesResponse{}
	_body, _err := client.ListIngressesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about job templates.
//
// @param request - ListJobsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListJobsResponse
func (client *Client) ListJobsWithOptions(request *ListJobsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.FieldType)) {
		query["FieldType"] = request.FieldType
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["FieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Reverse)) {
		query["Reverse"] = request.Reverse
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Workload)) {
		query["Workload"] = request.Workload
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListJobs"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/listJobs"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about job templates.
//
// @param request - ListJobsRequest
//
// @return ListJobsResponse
func (client *Client) ListJobs(request *ListJobsRequest) (_result *ListJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListJobsResponse{}
	_body, _err := client.ListJobsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 56f77b65-788d-442a-9885-7f20d91f\\*\\*\\*\\*
//
// @param request - ListLogConfigsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLogConfigsResponse
func (client *Client) ListLogConfigsWithOptions(request *ListLogConfigsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListLogConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLogConfigs"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/log/listLogConfigs"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLogConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 56f77b65-788d-442a-9885-7f20d91f\\*\\*\\*\\*
//
// @param request - ListLogConfigsRequest
//
// @return ListLogConfigsResponse
func (client *Client) ListLogConfigs(request *ListLogConfigsRequest) (_result *ListLogConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListLogConfigsResponse{}
	_body, _err := client.ListLogConfigsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListNamespaceChangeOrdersRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNamespaceChangeOrdersResponse
func (client *Client) ListNamespaceChangeOrdersWithOptions(request *ListNamespaceChangeOrdersRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListNamespaceChangeOrdersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoStatus)) {
		query["CoStatus"] = request.CoStatus
	}

	if !tea.BoolValue(util.IsUnset(request.CoType)) {
		query["CoType"] = request.CoType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNamespaceChangeOrders"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/changeorder/listNamespaceChangeOrders"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNamespaceChangeOrdersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListNamespaceChangeOrdersRequest
//
// @return ListNamespaceChangeOrdersResponse
func (client *Client) ListNamespaceChangeOrders(request *ListNamespaceChangeOrdersRequest) (_result *ListNamespaceChangeOrdersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListNamespaceChangeOrdersResponse{}
	_body, _err := client.ListNamespaceChangeOrdersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the ConfigMap instances in a namespace.
//
// @param request - ListNamespacedConfigMapsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNamespacedConfigMapsResponse
func (client *Client) ListNamespacedConfigMapsWithOptions(request *ListNamespacedConfigMapsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListNamespacedConfigMapsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNamespacedConfigMaps"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/configmap/listNamespacedConfigMaps"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNamespacedConfigMapsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the ConfigMap instances in a namespace.
//
// @param request - ListNamespacedConfigMapsRequest
//
// @return ListNamespacedConfigMapsResponse
func (client *Client) ListNamespacedConfigMaps(request *ListNamespacedConfigMapsRequest) (_result *ListNamespacedConfigMapsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListNamespacedConfigMapsResponse{}
	_body, _err := client.ListNamespacedConfigMapsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// b2a8a925-477a-4ed7-b825-d5e22500\\*\\*\\*\\*
//
// @param request - ListPublishedServicesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPublishedServicesResponse
func (client *Client) ListPublishedServicesWithOptions(request *ListPublishedServicesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPublishedServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPublishedServices"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/service/listPublishedServices"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPublishedServicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// b2a8a925-477a-4ed7-b825-d5e22500\\*\\*\\*\\*
//
// @param request - ListPublishedServicesRequest
//
// @return ListPublishedServicesResponse
func (client *Client) ListPublishedServices(request *ListPublishedServicesRequest) (_result *ListPublishedServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPublishedServicesResponse{}
	_body, _err := client.ListPublishedServicesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about Secrets in a namespace.
//
// @param request - ListSecretsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSecretsResponse
func (client *Client) ListSecretsWithOptions(request *ListSecretsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSecretsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSecrets"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/secret/secrets"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSecretsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about Secrets in a namespace.
//
// @param request - ListSecretsRequest
//
// @return ListSecretsResponse
func (client *Client) ListSecrets(request *ListSecretsRequest) (_result *ListSecretsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSecretsResponse{}
	_body, _err := client.ListSecretsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the mapping relationships between applications and tags.
//
// @param request - ListTagResourcesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceIds)) {
		query["ResourceIds"] = request.ResourceIds
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/tags"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the mapping relationships between applications and tags.
//
// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 应用实例列表
//
// @param tmpReq - ListWebApplicationInstancesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWebApplicationInstancesResponse
func (client *Client) ListWebApplicationInstancesWithOptions(ApplicationId *string, tmpReq *ListWebApplicationInstancesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWebApplicationInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListWebApplicationInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Statuses)) {
		request.StatusesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Statuses, tea.String("Statuses"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.VersionIds)) {
		request.VersionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.VersionIds, tea.String("VersionIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StatusesShrink)) {
		query["Statuses"] = request.StatusesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.VersionIdsShrink)) {
		query["VersionIds"] = request.VersionIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWebApplicationInstances"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/applications-observability/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId)) + "/instances"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWebApplicationInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 应用实例列表
//
// @param request - ListWebApplicationInstancesRequest
//
// @return ListWebApplicationInstancesResponse
func (client *Client) ListWebApplicationInstances(ApplicationId *string, request *ListWebApplicationInstancesRequest) (_result *ListWebApplicationInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWebApplicationInstancesResponse{}
	_body, _err := client.ListWebApplicationInstancesWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 版本列表
//
// @param request - ListWebApplicationRevisionsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWebApplicationRevisionsResponse
func (client *Client) ListWebApplicationRevisionsWithOptions(ApplicationId *string, request *ListWebApplicationRevisionsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWebApplicationRevisionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWebApplicationRevisions"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-revisions/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId)) + "/revisions"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWebApplicationRevisionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 版本列表
//
// @param request - ListWebApplicationRevisionsRequest
//
// @return ListWebApplicationRevisionsResponse
func (client *Client) ListWebApplicationRevisions(ApplicationId *string, request *ListWebApplicationRevisionsRequest) (_result *ListWebApplicationRevisionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWebApplicationRevisionsResponse{}
	_body, _err := client.ListWebApplicationRevisionsWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 应用列表
//
// @param request - ListWebApplicationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWebApplicationsResponse
func (client *Client) ListWebApplicationsWithOptions(request *ListWebApplicationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWebApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Prefix)) {
		query["Prefix"] = request.Prefix
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWebApplications"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/applications"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWebApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 应用列表
//
// @param request - ListWebApplicationsRequest
//
// @return ListWebApplicationsResponse
func (client *Client) ListWebApplications(request *ListWebApplicationsRequest) (_result *ListWebApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWebApplicationsResponse{}
	_body, _err := client.ListWebApplicationsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 自定义域名列表.
//
// @param request - ListWebCustomDomainsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWebCustomDomainsResponse
func (client *Client) ListWebCustomDomainsWithOptions(request *ListWebCustomDomainsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWebCustomDomainsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicationId)) {
		query["ApplicationId"] = request.ApplicationId
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Prefix)) {
		query["Prefix"] = request.Prefix
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWebCustomDomains"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/custom-domains"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWebCustomDomainsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 自定义域名列表.
//
// @param request - ListWebCustomDomainsRequest
//
// @return ListWebCustomDomainsResponse
func (client *Client) ListWebCustomDomains(request *ListWebCustomDomainsRequest) (_result *ListWebCustomDomainsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWebCustomDomainsResponse{}
	_body, _err := client.ListWebCustomDomainsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Activates the Serverless App Engine (SAE) service for free.
//
// Description:
//
// > Make sure that your account balance is greater than 0. Otherwise, the SAE service cannot be activated.
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenSaeServiceResponse
func (client *Client) OpenSaeServiceWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *OpenSaeServiceResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("OpenSaeService"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/service/open"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenSaeServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Activates the Serverless App Engine (SAE) service for free.
//
// Description:
//
// > Make sure that your account balance is greater than 0. Otherwise, the SAE service cannot be activated.
//
// @return OpenSaeServiceResponse
func (client *Client) OpenSaeService() (_result *OpenSaeServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &OpenSaeServiceResponse{}
	_body, _err := client.OpenSaeServiceWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新建版本
//
// @param request - PublishWebApplicationRevisionRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PublishWebApplicationRevisionResponse
func (client *Client) PublishWebApplicationRevisionWithOptions(ApplicationId *string, request *PublishWebApplicationRevisionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PublishWebApplicationRevisionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(request.Body),
	}
	params := &openapi.Params{
		Action:      tea.String("PublishWebApplicationRevision"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-revisions/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId)) + "/revisions"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &PublishWebApplicationRevisionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新建版本
//
// @param request - PublishWebApplicationRevisionRequest
//
// @return PublishWebApplicationRevisionResponse
func (client *Client) PublishWebApplicationRevision(ApplicationId *string, request *PublishWebApplicationRevisionRequest) (_result *PublishWebApplicationRevisionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PublishWebApplicationRevisionResponse{}
	_body, _err := client.PublishWebApplicationRevisionWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resource usage of an application.
//
// @param request - QueryResourceStaticsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryResourceStaticsResponse
func (client *Client) QueryResourceStaticsWithOptions(request *QueryResourceStaticsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryResourceStaticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryResourceStatics"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/paas/quota/queryResourceStatics"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryResourceStaticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the resource usage of an application.
//
// @param request - QueryResourceStaticsRequest
//
// @return QueryResourceStaticsResponse
func (client *Client) QueryResourceStatics(request *QueryResourceStaticsRequest) (_result *QueryResourceStaticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryResourceStaticsResponse{}
	_body, _err := client.QueryResourceStaticsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Reduces capacity by instance IDs.
//
// @param request - ReduceApplicationCapacityByInstanceIdsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReduceApplicationCapacityByInstanceIdsResponse
func (client *Client) ReduceApplicationCapacityByInstanceIdsWithOptions(request *ReduceApplicationCapacityByInstanceIdsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReduceApplicationCapacityByInstanceIdsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReduceApplicationCapacityByInstanceIds"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/ScaleInApplicationWithInstanceIds"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ReduceApplicationCapacityByInstanceIdsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Reduces capacity by instance IDs.
//
// @param request - ReduceApplicationCapacityByInstanceIdsRequest
//
// @return ReduceApplicationCapacityByInstanceIdsResponse
func (client *Client) ReduceApplicationCapacityByInstanceIds(request *ReduceApplicationCapacityByInstanceIdsRequest) (_result *ReduceApplicationCapacityByInstanceIdsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReduceApplicationCapacityByInstanceIdsResponse{}
	_body, _err := client.ReduceApplicationCapacityByInstanceIdsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Scales an application.
//
// @param request - RescaleApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RescaleApplicationResponse
func (client *Client) RescaleApplicationWithOptions(request *RescaleApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RescaleApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AutoEnableApplicationScalingRule)) {
		query["AutoEnableApplicationScalingRule"] = request.AutoEnableApplicationScalingRule
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstanceRatio)) {
		query["MinReadyInstanceRatio"] = request.MinReadyInstanceRatio
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstances)) {
		query["MinReadyInstances"] = request.MinReadyInstances
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RescaleApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/rescaleApplication"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RescaleApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Scales an application.
//
// @param request - RescaleApplicationRequest
//
// @return RescaleApplicationResponse
func (client *Client) RescaleApplication(request *RescaleApplicationRequest) (_result *RescaleApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RescaleApplicationResponse{}
	_body, _err := client.RescaleApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the instance specifications of an application.
//
// @param request - RescaleApplicationVerticallyRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RescaleApplicationVerticallyResponse
func (client *Client) RescaleApplicationVerticallyWithOptions(request *RescaleApplicationVerticallyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RescaleApplicationVerticallyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Cpu)) {
		query["Cpu"] = request.Cpu
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		query["Memory"] = request.Memory
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RescaleApplicationVertically"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/rescaleApplicationVertically"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RescaleApplicationVerticallyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the instance specifications of an application.
//
// @param request - RescaleApplicationVerticallyRequest
//
// @return RescaleApplicationVerticallyResponse
func (client *Client) RescaleApplicationVertically(request *RescaleApplicationVerticallyRequest) (_result *RescaleApplicationVerticallyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RescaleApplicationVerticallyResponse{}
	_body, _err := client.RescaleApplicationVerticallyWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restarts an application.
//
// @param request - RestartApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestartApplicationResponse
func (client *Client) RestartApplicationWithOptions(request *RestartApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RestartApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AutoEnableApplicationScalingRule)) {
		query["AutoEnableApplicationScalingRule"] = request.AutoEnableApplicationScalingRule
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstanceRatio)) {
		query["MinReadyInstanceRatio"] = request.MinReadyInstanceRatio
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstances)) {
		query["MinReadyInstances"] = request.MinReadyInstances
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RestartApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/restartApplication"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RestartApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restarts an application.
//
// @param request - RestartApplicationRequest
//
// @return RestartApplicationResponse
func (client *Client) RestartApplication(request *RestartApplicationRequest) (_result *RestartApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RestartApplicationResponse{}
	_body, _err := client.RestartApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restarts one or more instances in an application.
//
// @param request - RestartInstancesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestartInstancesResponse
func (client *Client) RestartInstancesWithOptions(request *RestartInstancesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RestartInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RestartInstances"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/restartInstances"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RestartInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restarts one or more instances in an application.
//
// @param request - RestartInstancesRequest
//
// @return RestartInstancesResponse
func (client *Client) RestartInstances(request *RestartInstancesRequest) (_result *RestartInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RestartInstancesResponse{}
	_body, _err := client.RestartInstancesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Rolls back an application.
//
// @param request - RollbackApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RollbackApplicationResponse
func (client *Client) RollbackApplicationWithOptions(request *RollbackApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AutoEnableApplicationScalingRule)) {
		query["AutoEnableApplicationScalingRule"] = request.AutoEnableApplicationScalingRule
	}

	if !tea.BoolValue(util.IsUnset(request.BatchWaitTime)) {
		query["BatchWaitTime"] = request.BatchWaitTime
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstanceRatio)) {
		query["MinReadyInstanceRatio"] = request.MinReadyInstanceRatio
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstances)) {
		query["MinReadyInstances"] = request.MinReadyInstances
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateStrategy)) {
		query["UpdateStrategy"] = request.UpdateStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.VersionId)) {
		query["VersionId"] = request.VersionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RollbackApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/rollbackApplication"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RollbackApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Rolls back an application.
//
// @param request - RollbackApplicationRequest
//
// @return RollbackApplicationResponse
func (client *Client) RollbackApplication(request *RollbackApplicationRequest) (_result *RollbackApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackApplicationResponse{}
	_body, _err := client.RollbackApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts an application.
//
// @param request - StartApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartApplicationResponse
func (client *Client) StartApplicationWithOptions(request *StartApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/startApplication"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StartApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts an application.
//
// @param request - StartApplicationRequest
//
// @return StartApplicationResponse
func (client *Client) StartApplication(request *StartApplicationRequest) (_result *StartApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartApplicationResponse{}
	_body, _err := client.StartApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 启动应用
//
// @param request - StartWebApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartWebApplicationResponse
func (client *Client) StartWebApplicationWithOptions(ApplicationId *string, request *StartWebApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartWebApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartWebApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-ops/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId)) + "/start"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StartWebApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 启动应用
//
// @param request - StartWebApplicationRequest
//
// @return StartWebApplicationResponse
func (client *Client) StartWebApplication(ApplicationId *string, request *StartWebApplicationRequest) (_result *StartWebApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartWebApplicationResponse{}
	_body, _err := client.StartWebApplicationWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 0099b7be-5f5b-4512-a7fc-56049ef1\\*\\*\\*\\*
//
// @param request - StopApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopApplicationResponse
func (client *Client) StopApplicationWithOptions(request *StopApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/stopApplication"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StopApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 0099b7be-5f5b-4512-a7fc-56049ef1\\*\\*\\*\\*
//
// @param request - StopApplicationRequest
//
// @return StopApplicationResponse
func (client *Client) StopApplication(request *StopApplicationRequest) (_result *StopApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopApplicationResponse{}
	_body, _err := client.StopApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 停止应用
//
// @param request - StopWebApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopWebApplicationResponse
func (client *Client) StopWebApplicationWithOptions(ApplicationId *string, request *StopWebApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopWebApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopWebApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-ops/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId)) + "/stop"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StopWebApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 停止应用
//
// @param request - StopWebApplicationRequest
//
// @return StopWebApplicationResponse
func (client *Client) StopWebApplication(ApplicationId *string, request *StopWebApplicationRequest) (_result *StopWebApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopWebApplicationResponse{}
	_body, _err := client.StopWebApplicationWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Suspends a job.
//
// @param request - SuspendJobRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SuspendJobResponse
func (client *Client) SuspendJobWithOptions(request *SuspendJobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SuspendJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Suspend)) {
		query["Suspend"] = request.Suspend
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendJob"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/suspendJob"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Suspends a job.
//
// @param request - SuspendJobRequest
//
// @return SuspendJobResponse
func (client *Client) SuspendJob(request *SuspendJobRequest) (_result *SuspendJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SuspendJobResponse{}
	_body, _err := client.SuspendJobWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// cn-beijing
//
// @param request - TagResourcesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		body["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceIds)) {
		body["ResourceIds"] = request.ResourceIds
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		body["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		body["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/tags"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// cn-beijing
//
// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 0099b7be-5f5b-4512-a7fc-56049ef1\\*\\*\\*\\*
//
// @param request - UnbindSlbRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindSlbResponse
func (client *Client) UnbindSlbWithOptions(request *UnbindSlbRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnbindSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Internet)) {
		query["Internet"] = request.Internet
	}

	if !tea.BoolValue(util.IsUnset(request.Intranet)) {
		query["Intranet"] = request.Intranet
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindSlb"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/slb"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindSlbResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 0099b7be-5f5b-4512-a7fc-56049ef1\\*\\*\\*\\*
//
// @param request - UnbindSlbRequest
//
// @return UnbindSlbResponse
func (client *Client) UnbindSlb(request *UnbindSlbRequest) (_result *UnbindSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnbindSlbResponse{}
	_body, _err := client.UnbindSlbWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UntagResourcesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeleteAll)) {
		query["DeleteAll"] = request.DeleteAll
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceIds)) {
		query["ResourceIds"] = request.ResourceIds
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKeys)) {
		query["TagKeys"] = request.TagKeys
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/tags"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 017f39b8-dfa4-4e16-a84b-1dcee4b1\\*\\*\\*\\*
//
// @param request - UpdateAppSecurityGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAppSecurityGroupResponse
func (client *Client) UpdateAppSecurityGroupWithOptions(request *UpdateAppSecurityGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAppSecurityGroup"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/updateAppSecurityGroup"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAppSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 017f39b8-dfa4-4e16-a84b-1dcee4b1\\*\\*\\*\\*
//
// @param request - UpdateAppSecurityGroupRequest
//
// @return UpdateAppSecurityGroupResponse
func (client *Client) UpdateAppSecurityGroup(request *UpdateAppSecurityGroupRequest) (_result *UpdateAppSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppSecurityGroupResponse{}
	_body, _err := client.UpdateAppSecurityGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新应用描述信息
//
// @param request - UpdateApplicationDescriptionRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateApplicationDescriptionResponse
func (client *Client) UpdateApplicationDescriptionWithOptions(request *UpdateApplicationDescriptionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateApplicationDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppDescription)) {
		query["AppDescription"] = request.AppDescription
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateApplicationDescription"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/updateAppDescription"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateApplicationDescriptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新应用描述信息
//
// @param request - UpdateApplicationDescriptionRequest
//
// @return UpdateApplicationDescriptionResponse
func (client *Client) UpdateApplicationDescription(request *UpdateApplicationDescriptionRequest) (_result *UpdateApplicationDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateApplicationDescriptionResponse{}
	_body, _err := client.UpdateApplicationDescriptionWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the auto scaling policy of an application.
//
// Description:
//
// ##
//
// If you want to configure more than 50 instances for an application, you must submit a [ticket](https://workorder.console.aliyun.com/#/ticket/createIndex) to add your account to the whitelist.
//
// @param request - UpdateApplicationScalingRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateApplicationScalingRuleResponse
func (client *Client) UpdateApplicationScalingRuleWithOptions(request *UpdateApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EnableIdle)) {
		query["EnableIdle"] = request.EnableIdle
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstanceRatio)) {
		query["MinReadyInstanceRatio"] = request.MinReadyInstanceRatio
	}

	if !tea.BoolValue(util.IsUnset(request.MinReadyInstances)) {
		query["MinReadyInstances"] = request.MinReadyInstances
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleMetric)) {
		query["ScalingRuleMetric"] = request.ScalingRuleMetric
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleTimer)) {
		query["ScalingRuleTimer"] = request.ScalingRuleTimer
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateApplicationScalingRule"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/scale/applicationScalingRule"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the auto scaling policy of an application.
//
// Description:
//
// ##
//
// If you want to configure more than 50 instances for an application, you must submit a [ticket](https://workorder.console.aliyun.com/#/ticket/createIndex) to add your account to the whitelist.
//
// @param request - UpdateApplicationScalingRuleRequest
//
// @return UpdateApplicationScalingRuleResponse
func (client *Client) UpdateApplicationScalingRule(request *UpdateApplicationScalingRuleRequest) (_result *UpdateApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateApplicationScalingRuleResponse{}
	_body, _err := client.UpdateApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateApplicationVswitchesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateApplicationVswitchesResponse
func (client *Client) UpdateApplicationVswitchesWithOptions(request *UpdateApplicationVswitchesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateApplicationVswitchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateApplicationVswitches"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/app/updateAppVswitches"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateApplicationVswitchesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateApplicationVswitchesRequest
//
// @return UpdateApplicationVswitchesResponse
func (client *Client) UpdateApplicationVswitches(request *UpdateApplicationVswitchesRequest) (_result *UpdateApplicationVswitchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateApplicationVswitchesResponse{}
	_body, _err := client.UpdateApplicationVswitchesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 1
//
// @param request - UpdateConfigMapRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateConfigMapResponse
func (client *Client) UpdateConfigMapWithOptions(request *UpdateConfigMapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigMapId)) {
		query["ConfigMapId"] = request.ConfigMapId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateConfigMap"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/configmap/configMap"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateConfigMapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 1
//
// @param request - UpdateConfigMapRequest
//
// @return UpdateConfigMapResponse
func (client *Client) UpdateConfigMap(request *UpdateConfigMapRequest) (_result *UpdateConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateConfigMapResponse{}
	_body, _err := client.UpdateConfigMapWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a canary release rule.
//
// @param request - UpdateGreyTagRouteRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateGreyTagRouteResponse
func (client *Client) UpdateGreyTagRouteWithOptions(request *UpdateGreyTagRouteRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateGreyTagRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlbRules)) {
		query["AlbRules"] = request.AlbRules
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DubboRules)) {
		query["DubboRules"] = request.DubboRules
	}

	if !tea.BoolValue(util.IsUnset(request.GreyTagRouteId)) {
		query["GreyTagRouteId"] = request.GreyTagRouteId
	}

	if !tea.BoolValue(util.IsUnset(request.ScRules)) {
		query["ScRules"] = request.ScRules
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateGreyTagRoute"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/tagroute/greyTagRoute"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateGreyTagRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a canary release rule.
//
// @param request - UpdateGreyTagRouteRequest
//
// @return UpdateGreyTagRouteResponse
func (client *Client) UpdateGreyTagRoute(request *UpdateGreyTagRouteRequest) (_result *UpdateGreyTagRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateGreyTagRouteResponse{}
	_body, _err := client.UpdateGreyTagRouteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateIngressRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateIngressResponse
func (client *Client) UpdateIngressWithOptions(request *UpdateIngressRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateIngressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CertId)) {
		query["CertId"] = request.CertId
	}

	if !tea.BoolValue(util.IsUnset(request.CertIds)) {
		query["CertIds"] = request.CertIds
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultRule)) {
		query["DefaultRule"] = request.DefaultRule
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.IngressId)) {
		query["IngressId"] = request.IngressId
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerProtocol)) {
		query["ListenerProtocol"] = request.ListenerProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalanceType)) {
		query["LoadBalanceType"] = request.LoadBalanceType
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityPolicyId)) {
		query["SecurityPolicyId"] = request.SecurityPolicyId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Rules)) {
		body["Rules"] = request.Rules
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateIngress"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/ingress/Ingress"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateIngressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateIngressRequest
//
// @return UpdateIngressResponse
func (client *Client) UpdateIngress(request *UpdateIngressRequest) (_result *UpdateIngressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateIngressResponse{}
	_body, _err := client.UpdateIngressWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a job template.
//
// @param request - UpdateJobRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateJobResponse
func (client *Client) UpdateJobWithOptions(request *UpdateJobRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcrAssumeRoleArn)) {
		query["AcrAssumeRoleArn"] = request.AcrAssumeRoleArn
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BackoffLimit)) {
		query["BackoffLimit"] = request.BackoffLimit
	}

	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.CommandArgs)) {
		query["CommandArgs"] = request.CommandArgs
	}

	if !tea.BoolValue(util.IsUnset(request.ConcurrencyPolicy)) {
		query["ConcurrencyPolicy"] = request.ConcurrencyPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.CustomHostAlias)) {
		query["CustomHostAlias"] = request.CustomHostAlias
	}

	if !tea.BoolValue(util.IsUnset(request.EdasContainerVersion)) {
		query["EdasContainerVersion"] = request.EdasContainerVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Envs)) {
		query["Envs"] = request.Envs
	}

	if !tea.BoolValue(util.IsUnset(request.ImagePullSecrets)) {
		query["ImagePullSecrets"] = request.ImagePullSecrets
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartArgs)) {
		query["JarStartArgs"] = request.JarStartArgs
	}

	if !tea.BoolValue(util.IsUnset(request.JarStartOptions)) {
		query["JarStartOptions"] = request.JarStartOptions
	}

	if !tea.BoolValue(util.IsUnset(request.Jdk)) {
		query["Jdk"] = request.Jdk
	}

	if !tea.BoolValue(util.IsUnset(request.MountDesc)) {
		query["MountDesc"] = request.MountDesc
	}

	if !tea.BoolValue(util.IsUnset(request.MountHost)) {
		query["MountHost"] = request.MountHost
	}

	if !tea.BoolValue(util.IsUnset(request.NasId)) {
		query["NasId"] = request.NasId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageUrl)) {
		query["PackageUrl"] = request.PackageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PackageVersion)) {
		query["PackageVersion"] = request.PackageVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PhpConfigLocation)) {
		query["PhpConfigLocation"] = request.PhpConfigLocation
	}

	if !tea.BoolValue(util.IsUnset(request.PostStart)) {
		query["PostStart"] = request.PostStart
	}

	if !tea.BoolValue(util.IsUnset(request.PreStop)) {
		query["PreStop"] = request.PreStop
	}

	if !tea.BoolValue(util.IsUnset(request.ProgrammingLanguage)) {
		query["ProgrammingLanguage"] = request.ProgrammingLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.Python)) {
		query["Python"] = request.Python
	}

	if !tea.BoolValue(util.IsUnset(request.PythonModules)) {
		query["PythonModules"] = request.PythonModules
	}

	if !tea.BoolValue(util.IsUnset(request.RefAppId)) {
		query["RefAppId"] = request.RefAppId
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	if !tea.BoolValue(util.IsUnset(request.Slice)) {
		query["Slice"] = request.Slice
	}

	if !tea.BoolValue(util.IsUnset(request.SliceEnvs)) {
		query["SliceEnvs"] = request.SliceEnvs
	}

	if !tea.BoolValue(util.IsUnset(request.SlsConfigs)) {
		query["SlsConfigs"] = request.SlsConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.TerminationGracePeriodSeconds)) {
		query["TerminationGracePeriodSeconds"] = request.TerminationGracePeriodSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.Timezone)) {
		query["Timezone"] = request.Timezone
	}

	if !tea.BoolValue(util.IsUnset(request.TomcatConfig)) {
		query["TomcatConfig"] = request.TomcatConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerConfig)) {
		query["TriggerConfig"] = request.TriggerConfig
	}

	if !tea.BoolValue(util.IsUnset(request.WarStartOptions)) {
		query["WarStartOptions"] = request.WarStartOptions
	}

	if !tea.BoolValue(util.IsUnset(request.WebContainer)) {
		query["WebContainer"] = request.WebContainer
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcrInstanceId)) {
		body["AcrInstanceId"] = request.AcrInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigMapMountDesc)) {
		body["ConfigMapMountDesc"] = request.ConfigMapMountDesc
	}

	if !tea.BoolValue(util.IsUnset(request.EnableImageAccl)) {
		body["EnableImageAccl"] = request.EnableImageAccl
	}

	if !tea.BoolValue(util.IsUnset(request.OssAkId)) {
		body["OssAkId"] = request.OssAkId
	}

	if !tea.BoolValue(util.IsUnset(request.OssAkSecret)) {
		body["OssAkSecret"] = request.OssAkSecret
	}

	if !tea.BoolValue(util.IsUnset(request.OssMountDescs)) {
		body["OssMountDescs"] = request.OssMountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.Php)) {
		body["Php"] = request.Php
	}

	if !tea.BoolValue(util.IsUnset(request.PhpConfig)) {
		body["PhpConfig"] = request.PhpConfig
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateJob"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/job/updateJob"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a job template.
//
// @param request - UpdateJobRequest
//
// @return UpdateJobResponse
func (client *Client) UpdateJob(request *UpdateJobRequest) (_result *UpdateJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateJobResponse{}
	_body, _err := client.UpdateJobWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about a namespace.
//
// @param request - UpdateNamespaceRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateNamespaceResponse
func (client *Client) UpdateNamespaceWithOptions(request *UpdateNamespaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableMicroRegistration)) {
		query["EnableMicroRegistration"] = request.EnableMicroRegistration
	}

	if !tea.BoolValue(util.IsUnset(request.NameSpaceShortId)) {
		query["NameSpaceShortId"] = request.NameSpaceShortId
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceDescription)) {
		query["NamespaceDescription"] = request.NamespaceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceName)) {
		query["NamespaceName"] = request.NamespaceName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateNamespace"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/paas/namespace"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateNamespaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about a namespace.
//
// @param request - UpdateNamespaceRequest
//
// @return UpdateNamespaceResponse
func (client *Client) UpdateNamespace(request *UpdateNamespaceRequest) (_result *UpdateNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateNamespaceResponse{}
	_body, _err := client.UpdateNamespaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// cn-beijing:test
//
// @param request - UpdateNamespaceVpcRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateNamespaceVpcResponse
func (client *Client) UpdateNamespaceVpcWithOptions(request *UpdateNamespaceVpcRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateNamespaceVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NameSpaceShortId)) {
		query["NameSpaceShortId"] = request.NameSpaceShortId
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateNamespaceVpc"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/namespace/updateNamespaceVpc"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateNamespaceVpcResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// cn-beijing:test
//
// @param request - UpdateNamespaceVpcRequest
//
// @return UpdateNamespaceVpcResponse
func (client *Client) UpdateNamespaceVpc(request *UpdateNamespaceVpcRequest) (_result *UpdateNamespaceVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateNamespaceVpcResponse{}
	_body, _err := client.UpdateNamespaceVpcWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The HTTP status code. Valid values:
//
// 	- **2xx**: The call was successful.
//
// 	- **3xx**: The call was redirected.
//
// 	- **4xx**: The call failed.
//
// 	- **5xx**: A server error occurred.
//
// @param tmpReq - UpdateSecretRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSecretResponse
func (client *Client) UpdateSecretWithOptions(tmpReq *UpdateSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSecretResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateSecretShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SecretData)) {
		request.SecretDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SecretData, tea.String("SecretData"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecretDataShrink)) {
		query["SecretData"] = request.SecretDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SecretId)) {
		query["SecretId"] = request.SecretId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSecret"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/sam/secret/secret"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSecretResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The HTTP status code. Valid values:
//
// 	- **2xx**: The call was successful.
//
// 	- **3xx**: The call was redirected.
//
// 	- **4xx**: The call failed.
//
// 	- **5xx**: A server error occurred.
//
// @param request - UpdateSecretRequest
//
// @return UpdateSecretResponse
func (client *Client) UpdateSecret(request *UpdateSecretRequest) (_result *UpdateSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSecretResponse{}
	_body, _err := client.UpdateSecretWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新应用
//
// @param request - UpdateWebApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWebApplicationResponse
func (client *Client) UpdateWebApplicationWithOptions(ApplicationId *string, request *UpdateWebApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateWebApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(request.Body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWebApplication"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/applications/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWebApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新应用
//
// @param request - UpdateWebApplicationRequest
//
// @return UpdateWebApplicationResponse
func (client *Client) UpdateWebApplication(ApplicationId *string, request *UpdateWebApplicationRequest) (_result *UpdateWebApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateWebApplicationResponse{}
	_body, _err := client.UpdateWebApplicationWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新弹性配置
//
// @param request - UpdateWebApplicationScalingConfigRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWebApplicationScalingConfigResponse
func (client *Client) UpdateWebApplicationScalingConfigWithOptions(ApplicationId *string, request *UpdateWebApplicationScalingConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateWebApplicationScalingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(request.Body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWebApplicationScalingConfig"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-scaling/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWebApplicationScalingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新弹性配置
//
// @param request - UpdateWebApplicationScalingConfigRequest
//
// @return UpdateWebApplicationScalingConfigResponse
func (client *Client) UpdateWebApplicationScalingConfig(ApplicationId *string, request *UpdateWebApplicationScalingConfigRequest) (_result *UpdateWebApplicationScalingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateWebApplicationScalingConfigResponse{}
	_body, _err := client.UpdateWebApplicationScalingConfigWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新流量配置
//
// @param request - UpdateWebApplicationTrafficConfigRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWebApplicationTrafficConfigResponse
func (client *Client) UpdateWebApplicationTrafficConfigWithOptions(ApplicationId *string, request *UpdateWebApplicationTrafficConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateWebApplicationTrafficConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(request.Body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWebApplicationTrafficConfig"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/application-traffic/" + tea.StringValue(openapiutil.GetEncodeParam(ApplicationId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWebApplicationTrafficConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新流量配置
//
// @param request - UpdateWebApplicationTrafficConfigRequest
//
// @return UpdateWebApplicationTrafficConfigResponse
func (client *Client) UpdateWebApplicationTrafficConfig(ApplicationId *string, request *UpdateWebApplicationTrafficConfigRequest) (_result *UpdateWebApplicationTrafficConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateWebApplicationTrafficConfigResponse{}
	_body, _err := client.UpdateWebApplicationTrafficConfigWithOptions(ApplicationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新自定义域名.
//
// @param request - UpdateWebCustomDomainRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWebCustomDomainResponse
func (client *Client) UpdateWebCustomDomainWithOptions(DomainName *string, request *UpdateWebCustomDomainRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateWebCustomDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(request.Body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWebCustomDomain"),
		Version:     tea.String("2019-05-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v2/api/web/custom-domains/" + tea.StringValue(openapiutil.GetEncodeParam(DomainName))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWebCustomDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新自定义域名.
//
// @param request - UpdateWebCustomDomainRequest
//
// @return UpdateWebCustomDomainResponse
func (client *Client) UpdateWebCustomDomain(DomainName *string, request *UpdateWebCustomDomainRequest) (_result *UpdateWebCustomDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateWebCustomDomainResponse{}
	_body, _err := client.UpdateWebCustomDomainWithOptions(DomainName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
