// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iDescribeSQLPlanResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetDetail(v *DescribeSQLPlanResponseBodyDetail) *DescribeSQLPlanResponseBody
	GetDetail() *DescribeSQLPlanResponseBodyDetail
	SetOriginInfo(v string) *DescribeSQLPlanResponseBody
	GetOriginInfo() *string
	SetRequestId(v string) *DescribeSQLPlanResponseBody
	GetRequestId() *string
	SetStageList(v []*DescribeSQLPlanResponseBodyStageList) *DescribeSQLPlanResponseBody
	GetStageList() []*DescribeSQLPlanResponseBodyStageList
}

type DescribeSQLPlanResponseBody struct {
	// The execution information about the SQL statement.
	Detail *DescribeSQLPlanResponseBodyDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	// The original information about the SQL statement.
	//
	// example:
	//
	// {\\"queryId\\":\\"20210527_160443_10581_hdhzr\\",\\"session\\":{\\"queryId\\":\\"20210527_160443_10581_hdhzr\\",\\"hasSharedStage\\":false,\\"parentId\\":0}}
	OriginInfo *string `json:"OriginInfo,omitempty" xml:"OriginInfo,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 22D6DEF0-CBC7-4388-A41C-D5FD62******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The queried plan in different stages.
	StageList []*DescribeSQLPlanResponseBodyStageList `json:"StageList,omitempty" xml:"StageList,omitempty" type:"Repeated"`
}

func (s DescribeSQLPlanResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLPlanResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLPlanResponseBody) GetDetail() *DescribeSQLPlanResponseBodyDetail {
	return s.Detail
}

func (s *DescribeSQLPlanResponseBody) GetOriginInfo() *string {
	return s.OriginInfo
}

func (s *DescribeSQLPlanResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeSQLPlanResponseBody) GetStageList() []*DescribeSQLPlanResponseBodyStageList {
	return s.StageList
}

func (s *DescribeSQLPlanResponseBody) SetDetail(v *DescribeSQLPlanResponseBodyDetail) *DescribeSQLPlanResponseBody {
	s.Detail = v
	return s
}

func (s *DescribeSQLPlanResponseBody) SetOriginInfo(v string) *DescribeSQLPlanResponseBody {
	s.OriginInfo = &v
	return s
}

func (s *DescribeSQLPlanResponseBody) SetRequestId(v string) *DescribeSQLPlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLPlanResponseBody) SetStageList(v []*DescribeSQLPlanResponseBodyStageList) *DescribeSQLPlanResponseBody {
	s.StageList = v
	return s
}

func (s *DescribeSQLPlanResponseBody) Validate() error {
	if s.Detail != nil {
		if err := s.Detail.Validate(); err != nil {
			return err
		}
	}
	if s.StageList != nil {
		for _, item := range s.StageList {
			if item != nil {
				if err := item.Validate(); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

type DescribeSQLPlanResponseBodyDetail struct {
	// The total CPU time consumed by all operators on multithreaded servers when the SQL statement is executed. Unit: milliseconds.
	//
	// example:
	//
	// 6100
	CPUTime *int64 `json:"CPUTime,omitempty" xml:"CPUTime,omitempty"`
	// The IP address of the client that is used to execute the SQL statement.
	//
	// example:
	//
	// 172.16.***.***
	ClientIP *string `json:"ClientIP,omitempty" xml:"ClientIP,omitempty"`
	// The name of the database on which the SQL statement was executed.
	//
	// example:
	//
	// adb_demo
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The total number of rows generated by the SQL statement.
	//
	// example:
	//
	// 1
	OutputRows *int64 `json:"OutputRows,omitempty" xml:"OutputRows,omitempty"`
	// The total amount of data generated by the SQL statement. Unit: bytes.
	//
	// example:
	//
	// 9
	OutputSize *int64 `json:"OutputSize,omitempty" xml:"OutputSize,omitempty"`
	// The maximum memory usage when the SQL statement is executed. Unit: bytes.
	//
	// example:
	//
	// 441802
	PeakMemory *int64 `json:"PeakMemory,omitempty" xml:"PeakMemory,omitempty"`
	// The amount of time consumed to generate the execution plan of the SQL statement. Unit: milliseconds.
	//
	// example:
	//
	// 86
	PlanningTime *int64 `json:"PlanningTime,omitempty" xml:"PlanningTime,omitempty"`
	// The amount of time consumed to queue the SQL statement. Unit: milliseconds.
	//
	// example:
	//
	// 0
	QueuedTime *int64 `json:"QueuedTime,omitempty" xml:"QueuedTime,omitempty"`
	// The SQL statement.
	//
	// example:
	//
	// INSERT OVERWRITE INTO hdfs_import_external\\nSELECT *\\nFROM adb_hdfs_import_source
	SQL *string `json:"SQL,omitempty" xml:"SQL,omitempty"`
	// The execution start time of the SQL statement. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1622102683243
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The final execution state of the SQL statement. Valid values:
	//
	// 	- FINISHED
	//
	// 	- FAILED
	//
	// example:
	//
	// FINISHED
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The total number of stages in the SQL statement.
	//
	// example:
	//
	// 4
	TotalStage *int64 `json:"TotalStage,omitempty" xml:"TotalStage,omitempty"`
	// The total number of tasks in the SQL statement.
	//
	// example:
	//
	// 4
	TotalTask *int64 `json:"TotalTask,omitempty" xml:"TotalTask,omitempty"`
	// The total amount of time consumed to execute the SQL statement. Unit: milliseconds.
	//
	// example:
	//
	// 2340
	TotalTime *int64 `json:"TotalTime,omitempty" xml:"TotalTime,omitempty"`
	// The name of the user who submitted the SQL statement.
	//
	// example:
	//
	// test_acc
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeSQLPlanResponseBodyDetail) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLPlanResponseBodyDetail) GoString() string {
	return s.String()
}

func (s *DescribeSQLPlanResponseBodyDetail) GetCPUTime() *int64 {
	return s.CPUTime
}

func (s *DescribeSQLPlanResponseBodyDetail) GetClientIP() *string {
	return s.ClientIP
}

func (s *DescribeSQLPlanResponseBodyDetail) GetDatabase() *string {
	return s.Database
}

func (s *DescribeSQLPlanResponseBodyDetail) GetOutputRows() *int64 {
	return s.OutputRows
}

func (s *DescribeSQLPlanResponseBodyDetail) GetOutputSize() *int64 {
	return s.OutputSize
}

func (s *DescribeSQLPlanResponseBodyDetail) GetPeakMemory() *int64 {
	return s.PeakMemory
}

func (s *DescribeSQLPlanResponseBodyDetail) GetPlanningTime() *int64 {
	return s.PlanningTime
}

func (s *DescribeSQLPlanResponseBodyDetail) GetQueuedTime() *int64 {
	return s.QueuedTime
}

func (s *DescribeSQLPlanResponseBodyDetail) GetSQL() *string {
	return s.SQL
}

func (s *DescribeSQLPlanResponseBodyDetail) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeSQLPlanResponseBodyDetail) GetState() *string {
	return s.State
}

func (s *DescribeSQLPlanResponseBodyDetail) GetTotalStage() *int64 {
	return s.TotalStage
}

func (s *DescribeSQLPlanResponseBodyDetail) GetTotalTask() *int64 {
	return s.TotalTask
}

func (s *DescribeSQLPlanResponseBodyDetail) GetTotalTime() *int64 {
	return s.TotalTime
}

func (s *DescribeSQLPlanResponseBodyDetail) GetUser() *string {
	return s.User
}

func (s *DescribeSQLPlanResponseBodyDetail) SetCPUTime(v int64) *DescribeSQLPlanResponseBodyDetail {
	s.CPUTime = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetClientIP(v string) *DescribeSQLPlanResponseBodyDetail {
	s.ClientIP = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetDatabase(v string) *DescribeSQLPlanResponseBodyDetail {
	s.Database = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetOutputRows(v int64) *DescribeSQLPlanResponseBodyDetail {
	s.OutputRows = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetOutputSize(v int64) *DescribeSQLPlanResponseBodyDetail {
	s.OutputSize = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetPeakMemory(v int64) *DescribeSQLPlanResponseBodyDetail {
	s.PeakMemory = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetPlanningTime(v int64) *DescribeSQLPlanResponseBodyDetail {
	s.PlanningTime = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetQueuedTime(v int64) *DescribeSQLPlanResponseBodyDetail {
	s.QueuedTime = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetSQL(v string) *DescribeSQLPlanResponseBodyDetail {
	s.SQL = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetStartTime(v string) *DescribeSQLPlanResponseBodyDetail {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetState(v string) *DescribeSQLPlanResponseBodyDetail {
	s.State = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetTotalStage(v int64) *DescribeSQLPlanResponseBodyDetail {
	s.TotalStage = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetTotalTask(v int64) *DescribeSQLPlanResponseBodyDetail {
	s.TotalTask = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetTotalTime(v int64) *DescribeSQLPlanResponseBodyDetail {
	s.TotalTime = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) SetUser(v string) *DescribeSQLPlanResponseBodyDetail {
	s.User = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyDetail) Validate() error {
	return dara.Validate(s)
}

type DescribeSQLPlanResponseBodyStageList struct {
	// The average `CPU Time` value on each compute node in the stage. Unit: milliseconds.
	//
	// example:
	//
	// 5984
	CPUTimeAvg *int64 `json:"CPUTimeAvg,omitempty" xml:"CPUTimeAvg,omitempty"`
	// The maximum `CPU Time` value on each compute node in the stage. Unit: milliseconds.
	//
	// example:
	//
	// 5984
	CPUTimeMax *int64 `json:"CPUTimeMax,omitempty" xml:"CPUTimeMax,omitempty"`
	// The minimum `CPU Time` value on each compute node in the stage. Unit: milliseconds.
	//
	// example:
	//
	// 47
	CPUTimeMin *int64 `json:"CPUTimeMin,omitempty" xml:"CPUTimeMin,omitempty"`
	// The average amount of input data on each compute node in the stage. Unit: bytes.
	//
	// example:
	//
	// 173
	InputSizeAvg *int64 `json:"InputSizeAvg,omitempty" xml:"InputSizeAvg,omitempty"`
	// The maximum amount of input data on each compute node in the stage. Unit: byte.
	//
	// example:
	//
	// 173
	InputSizeMax *int64 `json:"InputSizeMax,omitempty" xml:"InputSizeMax,omitempty"`
	// The minimum amount of input data on each compute node in the stage. Unit: bytes.
	//
	// example:
	//
	// 173
	InputSizeMin *int64 `json:"InputSizeMin,omitempty" xml:"InputSizeMin,omitempty"`
	// The total CPU time consumed by all operators in the stage, which is equivalent to the total CPU time of the stage. You can use this parameter to determine which parts of the stage consume a large amount of computing resources. Unit: milliseconds.
	//
	// example:
	//
	// 5984
	OperatorCost *int64 `json:"OperatorCost,omitempty" xml:"OperatorCost,omitempty"`
	// The maximum memory usage when the SQL statement is executed. Unit: bytes.
	//
	// example:
	//
	// 74208
	PeakMemory *int64 `json:"PeakMemory,omitempty" xml:"PeakMemory,omitempty"`
	// The average amount of data scanned by a scan operator on each storage node in the stage. Unit: bytes.
	//
	// example:
	//
	// 0
	ScanSizeAvg *int64 `json:"ScanSizeAvg,omitempty" xml:"ScanSizeAvg,omitempty"`
	// The maximum amount of data scanned by a scan operator on each storage node in the stage. Unit: bytes.
	//
	// example:
	//
	// 0
	ScanSizeMax *int64 `json:"ScanSizeMax,omitempty" xml:"ScanSizeMax,omitempty"`
	// The minimum amount of data scanned by a scan operator on each storage node in the stage. Unit: bytes.
	//
	// example:
	//
	// 0
	ScanSizeMin *int64 `json:"ScanSizeMin,omitempty" xml:"ScanSizeMin,omitempty"`
	// The average amount of time consumed by a scan operator to read data on each storage node in the stage. Unit: milliseconds.
	//
	// example:
	//
	// 0
	ScanTimeAvg *int64 `json:"ScanTimeAvg,omitempty" xml:"ScanTimeAvg,omitempty"`
	// The maximum amount of time consumed by a scan operator to read data on each storage node in the stage. Unit: milliseconds.
	//
	// example:
	//
	// 0
	ScanTimeMax *int64 `json:"ScanTimeMax,omitempty" xml:"ScanTimeMax,omitempty"`
	// The minimum amount of time consumed by a scan operator to read data on each storage node in the stage. Unit: milliseconds.
	//
	// example:
	//
	// 0
	ScanTimeMin *int64 `json:"ScanTimeMin,omitempty" xml:"ScanTimeMin,omitempty"`
	// The stage ID.
	//
	// example:
	//
	// 1
	StageId *int32 `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The final execution state of the stage. Valid values:
	//
	// 	- FINISHED
	//
	// 	- CANCELED
	//
	// 	- ABORTED
	//
	// 	- FAILED
	//
	// example:
	//
	// FINISHED
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSQLPlanResponseBodyStageList) String() string {
	return dara.Prettify(s)
}

func (s DescribeSQLPlanResponseBodyStageList) GoString() string {
	return s.String()
}

func (s *DescribeSQLPlanResponseBodyStageList) GetCPUTimeAvg() *int64 {
	return s.CPUTimeAvg
}

func (s *DescribeSQLPlanResponseBodyStageList) GetCPUTimeMax() *int64 {
	return s.CPUTimeMax
}

func (s *DescribeSQLPlanResponseBodyStageList) GetCPUTimeMin() *int64 {
	return s.CPUTimeMin
}

func (s *DescribeSQLPlanResponseBodyStageList) GetInputSizeAvg() *int64 {
	return s.InputSizeAvg
}

func (s *DescribeSQLPlanResponseBodyStageList) GetInputSizeMax() *int64 {
	return s.InputSizeMax
}

func (s *DescribeSQLPlanResponseBodyStageList) GetInputSizeMin() *int64 {
	return s.InputSizeMin
}

func (s *DescribeSQLPlanResponseBodyStageList) GetOperatorCost() *int64 {
	return s.OperatorCost
}

func (s *DescribeSQLPlanResponseBodyStageList) GetPeakMemory() *int64 {
	return s.PeakMemory
}

func (s *DescribeSQLPlanResponseBodyStageList) GetScanSizeAvg() *int64 {
	return s.ScanSizeAvg
}

func (s *DescribeSQLPlanResponseBodyStageList) GetScanSizeMax() *int64 {
	return s.ScanSizeMax
}

func (s *DescribeSQLPlanResponseBodyStageList) GetScanSizeMin() *int64 {
	return s.ScanSizeMin
}

func (s *DescribeSQLPlanResponseBodyStageList) GetScanTimeAvg() *int64 {
	return s.ScanTimeAvg
}

func (s *DescribeSQLPlanResponseBodyStageList) GetScanTimeMax() *int64 {
	return s.ScanTimeMax
}

func (s *DescribeSQLPlanResponseBodyStageList) GetScanTimeMin() *int64 {
	return s.ScanTimeMin
}

func (s *DescribeSQLPlanResponseBodyStageList) GetStageId() *int32 {
	return s.StageId
}

func (s *DescribeSQLPlanResponseBodyStageList) GetState() *string {
	return s.State
}

func (s *DescribeSQLPlanResponseBodyStageList) SetCPUTimeAvg(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.CPUTimeAvg = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetCPUTimeMax(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.CPUTimeMax = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetCPUTimeMin(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.CPUTimeMin = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetInputSizeAvg(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.InputSizeAvg = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetInputSizeMax(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.InputSizeMax = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetInputSizeMin(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.InputSizeMin = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetOperatorCost(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.OperatorCost = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetPeakMemory(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.PeakMemory = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetScanSizeAvg(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.ScanSizeAvg = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetScanSizeMax(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.ScanSizeMax = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetScanSizeMin(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.ScanSizeMin = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetScanTimeAvg(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.ScanTimeAvg = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetScanTimeMax(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.ScanTimeMax = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetScanTimeMin(v int64) *DescribeSQLPlanResponseBodyStageList {
	s.ScanTimeMin = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetStageId(v int32) *DescribeSQLPlanResponseBodyStageList {
	s.StageId = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) SetState(v string) *DescribeSQLPlanResponseBodyStageList {
	s.State = &v
	return s
}

func (s *DescribeSQLPlanResponseBodyStageList) Validate() error {
	return dara.Validate(s)
}
