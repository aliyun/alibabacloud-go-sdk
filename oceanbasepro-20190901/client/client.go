// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type DataExtraInfoSubCondsValue struct {
	TenantName       *string   `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	Database         *string   `json:"Database,omitempty" xml:"Database,omitempty"`
	DestDatabase     *string   `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	TableName        *string   `json:"TableName,omitempty" xml:"TableName,omitempty"`
	DestName         *string   `json:"DestName,omitempty" xml:"DestName,omitempty"`
	WhereClause      *string   `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
	FilterColumns    []*string `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	ShardColumns     []*string `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	LogicTableId     *string   `json:"LogicTableId,omitempty" xml:"LogicTableId,omitempty"`
	SourceEndpointId *string   `json:"SourceEndpointId,omitempty" xml:"SourceEndpointId,omitempty"`
	SourceClientId   *string   `json:"SourceClientId,omitempty" xml:"SourceClientId,omitempty"`
}

func (s DataExtraInfoSubCondsValue) String() string {
	return tea.Prettify(s)
}

func (s DataExtraInfoSubCondsValue) GoString() string {
	return s.String()
}

func (s *DataExtraInfoSubCondsValue) SetTenantName(v string) *DataExtraInfoSubCondsValue {
	s.TenantName = &v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetDatabase(v string) *DataExtraInfoSubCondsValue {
	s.Database = &v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetDestDatabase(v string) *DataExtraInfoSubCondsValue {
	s.DestDatabase = &v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetTableName(v string) *DataExtraInfoSubCondsValue {
	s.TableName = &v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetDestName(v string) *DataExtraInfoSubCondsValue {
	s.DestName = &v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetWhereClause(v string) *DataExtraInfoSubCondsValue {
	s.WhereClause = &v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetFilterColumns(v []*string) *DataExtraInfoSubCondsValue {
	s.FilterColumns = v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetShardColumns(v []*string) *DataExtraInfoSubCondsValue {
	s.ShardColumns = v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetLogicTableId(v string) *DataExtraInfoSubCondsValue {
	s.LogicTableId = &v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetSourceEndpointId(v string) *DataExtraInfoSubCondsValue {
	s.SourceEndpointId = &v
	return s
}

func (s *DataExtraInfoSubCondsValue) SetSourceClientId(v string) *DataExtraInfoSubCondsValue {
	s.SourceClientId = &v
	return s
}

type DataExtraInfoSubDbsValue struct {
	ClusterName         *string                           `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	TenantName          *string                           `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	DatabaseId          *string                           `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	DatabaseName        *string                           `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	MappingDatabaseName *string                           `json:"MappingDatabaseName,omitempty" xml:"MappingDatabaseName,omitempty"`
	SourceClientId      *string                           `json:"SourceClientId,omitempty" xml:"SourceClientId,omitempty"`
	Tables              []*DataExtraInfoSubDbsValueTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
}

func (s DataExtraInfoSubDbsValue) String() string {
	return tea.Prettify(s)
}

func (s DataExtraInfoSubDbsValue) GoString() string {
	return s.String()
}

func (s *DataExtraInfoSubDbsValue) SetClusterName(v string) *DataExtraInfoSubDbsValue {
	s.ClusterName = &v
	return s
}

func (s *DataExtraInfoSubDbsValue) SetTenantName(v string) *DataExtraInfoSubDbsValue {
	s.TenantName = &v
	return s
}

func (s *DataExtraInfoSubDbsValue) SetDatabaseId(v string) *DataExtraInfoSubDbsValue {
	s.DatabaseId = &v
	return s
}

func (s *DataExtraInfoSubDbsValue) SetDatabaseName(v string) *DataExtraInfoSubDbsValue {
	s.DatabaseName = &v
	return s
}

func (s *DataExtraInfoSubDbsValue) SetMappingDatabaseName(v string) *DataExtraInfoSubDbsValue {
	s.MappingDatabaseName = &v
	return s
}

func (s *DataExtraInfoSubDbsValue) SetSourceClientId(v string) *DataExtraInfoSubDbsValue {
	s.SourceClientId = &v
	return s
}

func (s *DataExtraInfoSubDbsValue) SetTables(v []*DataExtraInfoSubDbsValueTables) *DataExtraInfoSubDbsValue {
	s.Tables = v
	return s
}

type DataExtraInfoSubDbsValueTables struct {
	TableId          *string                                  `json:"TableId,omitempty" xml:"TableId,omitempty"`
	Database         *string                                  `json:"Database,omitempty" xml:"Database,omitempty"`
	TableName        *string                                  `json:"TableName,omitempty" xml:"TableName,omitempty"`
	MappingTableName *string                                  `json:"MappingTableName,omitempty" xml:"MappingTableName,omitempty"`
	Instance         *string                                  `json:"Instance,omitempty" xml:"Instance,omitempty"`
	Columns          []*DataExtraInfoSubDbsValueTablesColumns `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
}

func (s DataExtraInfoSubDbsValueTables) String() string {
	return tea.Prettify(s)
}

func (s DataExtraInfoSubDbsValueTables) GoString() string {
	return s.String()
}

func (s *DataExtraInfoSubDbsValueTables) SetTableId(v string) *DataExtraInfoSubDbsValueTables {
	s.TableId = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTables) SetDatabase(v string) *DataExtraInfoSubDbsValueTables {
	s.Database = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTables) SetTableName(v string) *DataExtraInfoSubDbsValueTables {
	s.TableName = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTables) SetMappingTableName(v string) *DataExtraInfoSubDbsValueTables {
	s.MappingTableName = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTables) SetInstance(v string) *DataExtraInfoSubDbsValueTables {
	s.Instance = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTables) SetColumns(v []*DataExtraInfoSubDbsValueTablesColumns) *DataExtraInfoSubDbsValueTables {
	s.Columns = v
	return s
}

type DataExtraInfoSubDbsValueTablesColumns struct {
	ColumnName      *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	Position        *int32  `json:"Position,omitempty" xml:"Position,omitempty"`
	ColumnType      *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	RecordFieldType *string `json:"RecordFieldType,omitempty" xml:"RecordFieldType,omitempty"`
	RawColumnType   *string `json:"RawColumnType,omitempty" xml:"RawColumnType,omitempty"`
	ColumnKey       *string `json:"ColumnKey,omitempty" xml:"ColumnKey,omitempty"`
	Nullable        *bool   `json:"Nullable,omitempty" xml:"Nullable,omitempty"`
	DefaultValue    *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	DataLength      *int64  `json:"DataLength,omitempty" xml:"DataLength,omitempty"`
	DataPrecision   *int32  `json:"DataPrecision,omitempty" xml:"DataPrecision,omitempty"`
	DataScale       *int32  `json:"DataScale,omitempty" xml:"DataScale,omitempty"`
	Encoding        *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	ColumnComment   *string `json:"ColumnComment,omitempty" xml:"ColumnComment,omitempty"`
	IsGenerateField *bool   `json:"IsGenerateField,omitempty" xml:"IsGenerateField,omitempty"`
}

func (s DataExtraInfoSubDbsValueTablesColumns) String() string {
	return tea.Prettify(s)
}

func (s DataExtraInfoSubDbsValueTablesColumns) GoString() string {
	return s.String()
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetColumnName(v string) *DataExtraInfoSubDbsValueTablesColumns {
	s.ColumnName = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetPosition(v int32) *DataExtraInfoSubDbsValueTablesColumns {
	s.Position = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetColumnType(v string) *DataExtraInfoSubDbsValueTablesColumns {
	s.ColumnType = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetRecordFieldType(v string) *DataExtraInfoSubDbsValueTablesColumns {
	s.RecordFieldType = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetRawColumnType(v string) *DataExtraInfoSubDbsValueTablesColumns {
	s.RawColumnType = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetColumnKey(v string) *DataExtraInfoSubDbsValueTablesColumns {
	s.ColumnKey = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetNullable(v bool) *DataExtraInfoSubDbsValueTablesColumns {
	s.Nullable = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetDefaultValue(v string) *DataExtraInfoSubDbsValueTablesColumns {
	s.DefaultValue = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetDataLength(v int64) *DataExtraInfoSubDbsValueTablesColumns {
	s.DataLength = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetDataPrecision(v int32) *DataExtraInfoSubDbsValueTablesColumns {
	s.DataPrecision = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetDataScale(v int32) *DataExtraInfoSubDbsValueTablesColumns {
	s.DataScale = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetEncoding(v string) *DataExtraInfoSubDbsValueTablesColumns {
	s.Encoding = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetColumnComment(v string) *DataExtraInfoSubDbsValueTablesColumns {
	s.ColumnComment = &v
	return s
}

func (s *DataExtraInfoSubDbsValueTablesColumns) SetIsGenerateField(v bool) *DataExtraInfoSubDbsValueTablesColumns {
	s.IsGenerateField = &v
	return s
}

type CancelProjectModifyRecordRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CancelProjectModifyRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelProjectModifyRecordRequest) GoString() string {
	return s.String()
}

func (s *CancelProjectModifyRecordRequest) SetId(v string) *CancelProjectModifyRecordRequest {
	s.Id = &v
	return s
}

type CancelProjectModifyRecordResponseBody struct {
	Advice      *string                                           `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                           `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        interface{}                                       `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *CancelProjectModifyRecordResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s CancelProjectModifyRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelProjectModifyRecordResponseBody) GoString() string {
	return s.String()
}

func (s *CancelProjectModifyRecordResponseBody) SetAdvice(v string) *CancelProjectModifyRecordResponseBody {
	s.Advice = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetCode(v string) *CancelProjectModifyRecordResponseBody {
	s.Code = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetCost(v string) *CancelProjectModifyRecordResponseBody {
	s.Cost = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetData(v interface{}) *CancelProjectModifyRecordResponseBody {
	s.Data = v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetErrorDetail(v *CancelProjectModifyRecordResponseBodyErrorDetail) *CancelProjectModifyRecordResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetMessage(v string) *CancelProjectModifyRecordResponseBody {
	s.Message = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetPageNumber(v int32) *CancelProjectModifyRecordResponseBody {
	s.PageNumber = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetPageSize(v int32) *CancelProjectModifyRecordResponseBody {
	s.PageSize = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetRequestId(v string) *CancelProjectModifyRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetSuccess(v bool) *CancelProjectModifyRecordResponseBody {
	s.Success = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBody) SetTotalCount(v int64) *CancelProjectModifyRecordResponseBody {
	s.TotalCount = &v
	return s
}

type CancelProjectModifyRecordResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s CancelProjectModifyRecordResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s CancelProjectModifyRecordResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetCode(v string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetLevel(v string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetMessage(v string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetMessageMcmsKey(v string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetProposal(v string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetProposalMcmsKey(v string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetReason(v string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetReasonMcmsKey(v string) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *CancelProjectModifyRecordResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *CancelProjectModifyRecordResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type CancelProjectModifyRecordResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelProjectModifyRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelProjectModifyRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelProjectModifyRecordResponse) GoString() string {
	return s.String()
}

func (s *CancelProjectModifyRecordResponse) SetHeaders(v map[string]*string) *CancelProjectModifyRecordResponse {
	s.Headers = v
	return s
}

func (s *CancelProjectModifyRecordResponse) SetStatusCode(v int32) *CancelProjectModifyRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelProjectModifyRecordResponse) SetBody(v *CancelProjectModifyRecordResponseBody) *CancelProjectModifyRecordResponse {
	s.Body = v
	return s
}

type CreateBackupSetDownloadLinkRequest struct {
	BackupSetId *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateBackupSetDownloadLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupSetDownloadLinkRequest) GoString() string {
	return s.String()
}

func (s *CreateBackupSetDownloadLinkRequest) SetBackupSetId(v string) *CreateBackupSetDownloadLinkRequest {
	s.BackupSetId = &v
	return s
}

func (s *CreateBackupSetDownloadLinkRequest) SetInstanceId(v string) *CreateBackupSetDownloadLinkRequest {
	s.InstanceId = &v
	return s
}

type CreateBackupSetDownloadLinkResponseBody struct {
	DownloadTaskId *int64  `json:"DownloadTaskId,omitempty" xml:"DownloadTaskId,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBackupSetDownloadLinkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupSetDownloadLinkResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackupSetDownloadLinkResponseBody) SetDownloadTaskId(v int64) *CreateBackupSetDownloadLinkResponseBody {
	s.DownloadTaskId = &v
	return s
}

func (s *CreateBackupSetDownloadLinkResponseBody) SetRequestId(v string) *CreateBackupSetDownloadLinkResponseBody {
	s.RequestId = &v
	return s
}

type CreateBackupSetDownloadLinkResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBackupSetDownloadLinkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBackupSetDownloadLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupSetDownloadLinkResponse) GoString() string {
	return s.String()
}

func (s *CreateBackupSetDownloadLinkResponse) SetHeaders(v map[string]*string) *CreateBackupSetDownloadLinkResponse {
	s.Headers = v
	return s
}

func (s *CreateBackupSetDownloadLinkResponse) SetStatusCode(v int32) *CreateBackupSetDownloadLinkResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBackupSetDownloadLinkResponse) SetBody(v *CreateBackupSetDownloadLinkResponseBody) *CreateBackupSetDownloadLinkResponse {
	s.Body = v
	return s
}

type CreateDatabaseRequest struct {
	// The name of the database.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The encoding standard of the database.
	// For more information, see the Charset field returned by the DescribeCharset operation.
	Collation *string `json:"Collation,omitempty" xml:"Collation,omitempty"`
	// Alibaba Cloud CLI
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The operation that you want to perform.
	// Set the value to **CreateDatabase**.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the tenant.
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The collation.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the database.
	// You cannot use reserved keywords, such as test and mysql.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s CreateDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseRequest) GoString() string {
	return s.String()
}

func (s *CreateDatabaseRequest) SetClientToken(v string) *CreateDatabaseRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDatabaseRequest) SetCollation(v string) *CreateDatabaseRequest {
	s.Collation = &v
	return s
}

func (s *CreateDatabaseRequest) SetDatabaseName(v string) *CreateDatabaseRequest {
	s.DatabaseName = &v
	return s
}

func (s *CreateDatabaseRequest) SetDescription(v string) *CreateDatabaseRequest {
	s.Description = &v
	return s
}

func (s *CreateDatabaseRequest) SetEncoding(v string) *CreateDatabaseRequest {
	s.Encoding = &v
	return s
}

func (s *CreateDatabaseRequest) SetInstanceId(v string) *CreateDatabaseRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateDatabaseRequest) SetTenantId(v string) *CreateDatabaseRequest {
	s.TenantId = &v
	return s
}

type CreateDatabaseResponseBody struct {
	// CreateDatabase
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDatabaseResponseBody) SetDatabaseName(v string) *CreateDatabaseResponseBody {
	s.DatabaseName = &v
	return s
}

func (s *CreateDatabaseResponseBody) SetRequestId(v string) *CreateDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type CreateDatabaseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseResponse) GoString() string {
	return s.String()
}

func (s *CreateDatabaseResponse) SetHeaders(v map[string]*string) *CreateDatabaseResponse {
	s.Headers = v
	return s
}

func (s *CreateDatabaseResponse) SetStatusCode(v int32) *CreateDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDatabaseResponse) SetBody(v *CreateDatabaseResponseBody) *CreateDatabaseResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	// Specifies whether to enable automatic renewal.
	// This parameter is valid only when the ChargeType parameter is set to PrePaid. Valid values:
	// - true: enables automatic renewal for the instance.
	// - false: disables automatic renewal for the instance. This is the default value.
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The automatic renewal period of the instance. This parameter is required when the AutoRenew parameter is set to true. Valid values:
	// - If the PeriodUnit parameter is set to Year: "1", "2", and "3".
	// - If the PeriodUnit parameter is set to Month: "1", "2", "3", "6", and "12".
	AutoRenewPeriod *int64 `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	// The billing method of the instance. Valid values:
	// - PrePay: the subscription billing method. You must ensure that the remaining balance or credit balance of your account can cover the cost of the subscription. Otherwise, you will receive an InvalidPayMethod error.
	// - PostPay: the pay-as-you-go billing method. This is the default value. By default, fees are charged on an hourly basis.
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The size of the storage space,in GB.
	// The limits on the storage space vary with the cluster specifications:
	// - 8C32GB: 100 GB to 10000 GB
	// - 14C70GB: 200 GB to 10000 GB
	// - 30C180GB: 400 GB to 10000 GB
	// - 62C400GB: 800 GB to 10000 GB
	// The preceding minimum storage space sizes are the default storage space sizes of the corresponding cluster specification plans.
	DiskSize *int64 `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// The type of the storage disk where the cluster is deployed. This parameter takes effect only for Standard Cluster Edition (Cloud Disk).
	// Valid values:
	// - cloud_essd_pl1: ESSD PL1.
	// - cloud_essd_pl0: ESSD PL0. Default value: cloud_essd_pl1.
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// Specifies whether to perform only a dry run for the request. Default value: false. Valid values:
	// - true: Only a dry-run request is sent and the instance is not created. If the dry run succeeds, DryRunResult=true is returned. If the dry run fails, an error code is returned.
	// - false: The actual request is sent and no dry run is performed. The instance is created if the requirements are met. By default, the DryRunResult parameter returns false if you set DryRun to false.
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The specifications of the cluster.
	// You can specify one of the following four plans:
	//  - 8C32GB: indicates 8 CPU cores and 32 GB of memory.
	//  - 14C70GB: indicates 14 CPU cores and 70 GB of memory. This is the default value.
	// - 30C180GB: indicates 30 CPU cores and 180 GB of memory.
	// - 62C400GB: indicates 62 CPU cores and 400 GB of memory.
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// The name of the OceanBase cluster.
	// It must be 1 to 20 characters in length.
	// If this parameter is not specified, the value is the instance ID of the cluster by default.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// Specifies whether to enable the control group feature.
	// Valid values:
	// - true
	// - false
	IsolationOptimization *string `json:"IsolationOptimization,omitempty" xml:"IsolationOptimization,omitempty"`
	// OceanBase Server version number.
	ObVersion *string `json:"ObVersion,omitempty" xml:"ObVersion,omitempty"`
	// The valid duration of the purchased resources. The unit is specified by the PeriodUnit parameter.
	// This parameter is valid and required only when the InstanceChargeType parameter is set to PrePaid.
	// Valid values:
	// - When the PeriodUnit parameter is set to Month: "1", "2", "3", "4", "5", "6", "7", "8", "9".
	// - When the PeriodUnit parameter is set to Year: "1", "2", "3".
	Period *int64 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the valid duration of the purchased resources.
	// Valid value for subscription: Month or Year.
	// Default value: Month for subscription, and Hour for pay-as-you-go.
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// Primary instance ID.
	PrimaryInstance *string `json:"PrimaryInstance,omitempty" xml:"PrimaryInstance,omitempty"`
	// Primary instance region.
	PrimaryRegion *string `json:"PrimaryRegion,omitempty" xml:"PrimaryRegion,omitempty"`
	// The number of full-featured replicas.
	// - 3F: three full-featured replicas.
	// - 2F1L: two full-featured replicas and one log replica.
	// - 2F1A: two full-featured replicas and one arbitration service.
	// - ApsaraDB for OceanBase earlier than V4.1 supports 3F and 2F1L.
	// - ApsaraDB for OceanBase V4.1 or later supports 3F and 2F1A.
	// - An ApsaraDB for OceanBase instance deployed across three zones supports only 3F.
	// - An ApsaraDB for OceanBase instance deployed across two zones supports 2F1A or 2F1L, depending on the version.
	// - An ApsaraDB for OceanBase instance deployed in a single zone supports 3F, 2F1A, or 2F1L, depending on the version.
	ReplicaMode *string `json:"ReplicaMode,omitempty" xml:"ReplicaMode,omitempty"`
	// The ID of the resource group to which the instance belongs.
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The series of the OceanBase cluster. Valid values:
	// - normal: Standard Cluster Edition (Cloud Disk). This is the default value.
	// - normal_ssd: Standard Cluster Edition (Local Disk).
	// - history: History Database Cluster Edition.
	Series *string `json:"Series,omitempty" xml:"Series,omitempty"`
	// The ID of the zone to which the instance belongs.
	// For more information about how to obtain the list of zones, see [DescribeZones](~~25610~~).
	Zones *string `json:"Zones,omitempty" xml:"Zones,omitempty"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetAutoRenew(v bool) *CreateInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateInstanceRequest) SetAutoRenewPeriod(v int64) *CreateInstanceRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *CreateInstanceRequest) SetChargeType(v string) *CreateInstanceRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateInstanceRequest) SetDiskSize(v int64) *CreateInstanceRequest {
	s.DiskSize = &v
	return s
}

func (s *CreateInstanceRequest) SetDiskType(v string) *CreateInstanceRequest {
	s.DiskType = &v
	return s
}

func (s *CreateInstanceRequest) SetDryRun(v bool) *CreateInstanceRequest {
	s.DryRun = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceClass(v string) *CreateInstanceRequest {
	s.InstanceClass = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceName(v string) *CreateInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceRequest) SetIsolationOptimization(v string) *CreateInstanceRequest {
	s.IsolationOptimization = &v
	return s
}

func (s *CreateInstanceRequest) SetObVersion(v string) *CreateInstanceRequest {
	s.ObVersion = &v
	return s
}

func (s *CreateInstanceRequest) SetPeriod(v int64) *CreateInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateInstanceRequest) SetPeriodUnit(v string) *CreateInstanceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateInstanceRequest) SetPrimaryInstance(v string) *CreateInstanceRequest {
	s.PrimaryInstance = &v
	return s
}

func (s *CreateInstanceRequest) SetPrimaryRegion(v string) *CreateInstanceRequest {
	s.PrimaryRegion = &v
	return s
}

func (s *CreateInstanceRequest) SetReplicaMode(v string) *CreateInstanceRequest {
	s.ReplicaMode = &v
	return s
}

func (s *CreateInstanceRequest) SetResourceGroupId(v string) *CreateInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateInstanceRequest) SetSeries(v string) *CreateInstanceRequest {
	s.Series = &v
	return s
}

func (s *CreateInstanceRequest) SetZones(v string) *CreateInstanceRequest {
	s.Zones = &v
	return s
}

type CreateInstanceResponseBody struct {
	Data *CreateInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetData(v *CreateInstanceResponseBodyData) *CreateInstanceResponseBody {
	s.Data = v
	return s
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateInstanceResponseBodyData struct {
	// The result of the dry-run request.
	//
	// If the DryRun parameter is set to true and the dry run succeeds, the DryRunResult parameter returns true. Otherwise, an error code is returned.
	// If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.
	DryRunResult *bool `json:"DryRunResult,omitempty" xml:"DryRunResult,omitempty"`
	// Instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Order ID. The ID of the order that you have placed.
	// This parameter returns a value after you create a pre-paid or post-paid cluster.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// Resource group ID.
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyData) SetDryRunResult(v bool) *CreateInstanceResponseBodyData {
	s.DryRunResult = &v
	return s
}

func (s *CreateInstanceResponseBodyData) SetInstanceId(v string) *CreateInstanceResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponseBodyData) SetOrderId(v string) *CreateInstanceResponseBodyData {
	s.OrderId = &v
	return s
}

func (s *CreateInstanceResponseBodyData) SetResourceGroupId(v string) *CreateInstanceResponseBodyData {
	s.ResourceGroupId = &v
	return s
}

type CreateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetStatusCode(v int32) *CreateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateLabelRequest struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateLabelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLabelRequest) GoString() string {
	return s.String()
}

func (s *CreateLabelRequest) SetName(v string) *CreateLabelRequest {
	s.Name = &v
	return s
}

type CreateLabelResponseBody struct {
	Advice      *string                             `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                             `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *string                             `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *CreateLabelResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s CreateLabelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLabelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLabelResponseBody) SetAdvice(v string) *CreateLabelResponseBody {
	s.Advice = &v
	return s
}

func (s *CreateLabelResponseBody) SetCode(v string) *CreateLabelResponseBody {
	s.Code = &v
	return s
}

func (s *CreateLabelResponseBody) SetCost(v string) *CreateLabelResponseBody {
	s.Cost = &v
	return s
}

func (s *CreateLabelResponseBody) SetData(v string) *CreateLabelResponseBody {
	s.Data = &v
	return s
}

func (s *CreateLabelResponseBody) SetErrorDetail(v *CreateLabelResponseBodyErrorDetail) *CreateLabelResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *CreateLabelResponseBody) SetMessage(v string) *CreateLabelResponseBody {
	s.Message = &v
	return s
}

func (s *CreateLabelResponseBody) SetPageNumber(v int32) *CreateLabelResponseBody {
	s.PageNumber = &v
	return s
}

func (s *CreateLabelResponseBody) SetPageSize(v int32) *CreateLabelResponseBody {
	s.PageSize = &v
	return s
}

func (s *CreateLabelResponseBody) SetRequestId(v string) *CreateLabelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLabelResponseBody) SetSuccess(v bool) *CreateLabelResponseBody {
	s.Success = &v
	return s
}

func (s *CreateLabelResponseBody) SetTotalCount(v int64) *CreateLabelResponseBody {
	s.TotalCount = &v
	return s
}

type CreateLabelResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s CreateLabelResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s CreateLabelResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *CreateLabelResponseBodyErrorDetail) SetCode(v string) *CreateLabelResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *CreateLabelResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetLevel(v string) *CreateLabelResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetMessage(v string) *CreateLabelResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *CreateLabelResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetMessageMcmsKey(v string) *CreateLabelResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetProposal(v string) *CreateLabelResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *CreateLabelResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetProposalMcmsKey(v string) *CreateLabelResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetReason(v string) *CreateLabelResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *CreateLabelResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetReasonMcmsKey(v string) *CreateLabelResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *CreateLabelResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *CreateLabelResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type CreateLabelResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLabelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLabelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLabelResponse) GoString() string {
	return s.String()
}

func (s *CreateLabelResponse) SetHeaders(v map[string]*string) *CreateLabelResponse {
	s.Headers = v
	return s
}

func (s *CreateLabelResponse) SetStatusCode(v int32) *CreateLabelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLabelResponse) SetBody(v *CreateLabelResponseBody) *CreateLabelResponse {
	s.Body = v
	return s
}

type CreateMySqlDataSourceRequest struct {
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DgInstanceId *string `json:"DgInstanceId,omitempty" xml:"DgInstanceId,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Ip           *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Password     *string `json:"Password,omitempty" xml:"Password,omitempty"`
	Port         *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	Schema       *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UserName     *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreateMySqlDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMySqlDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateMySqlDataSourceRequest) SetDescription(v string) *CreateMySqlDataSourceRequest {
	s.Description = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetDgInstanceId(v string) *CreateMySqlDataSourceRequest {
	s.DgInstanceId = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetInstanceId(v string) *CreateMySqlDataSourceRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetIp(v string) *CreateMySqlDataSourceRequest {
	s.Ip = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetName(v string) *CreateMySqlDataSourceRequest {
	s.Name = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetPassword(v string) *CreateMySqlDataSourceRequest {
	s.Password = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetPort(v int32) *CreateMySqlDataSourceRequest {
	s.Port = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetSchema(v string) *CreateMySqlDataSourceRequest {
	s.Schema = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetType(v string) *CreateMySqlDataSourceRequest {
	s.Type = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetUserName(v string) *CreateMySqlDataSourceRequest {
	s.UserName = &v
	return s
}

func (s *CreateMySqlDataSourceRequest) SetVpcId(v string) *CreateMySqlDataSourceRequest {
	s.VpcId = &v
	return s
}

type CreateMySqlDataSourceResponseBody struct {
	Advice      *string                                       `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                       `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *string                                       `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *CreateMySqlDataSourceResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s CreateMySqlDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMySqlDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMySqlDataSourceResponseBody) SetAdvice(v string) *CreateMySqlDataSourceResponseBody {
	s.Advice = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetCode(v string) *CreateMySqlDataSourceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetCost(v string) *CreateMySqlDataSourceResponseBody {
	s.Cost = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetData(v string) *CreateMySqlDataSourceResponseBody {
	s.Data = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetErrorDetail(v *CreateMySqlDataSourceResponseBodyErrorDetail) *CreateMySqlDataSourceResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetMessage(v string) *CreateMySqlDataSourceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetPageNumber(v int32) *CreateMySqlDataSourceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetPageSize(v int32) *CreateMySqlDataSourceResponseBody {
	s.PageSize = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetRequestId(v string) *CreateMySqlDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetSuccess(v bool) *CreateMySqlDataSourceResponseBody {
	s.Success = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBody) SetTotalCount(v int64) *CreateMySqlDataSourceResponseBody {
	s.TotalCount = &v
	return s
}

type CreateMySqlDataSourceResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s CreateMySqlDataSourceResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s CreateMySqlDataSourceResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetCode(v string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetLevel(v string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetMessage(v string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetMessageMcmsKey(v string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetProposal(v string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetProposalMcmsKey(v string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetReason(v string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetReasonMcmsKey(v string) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *CreateMySqlDataSourceResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *CreateMySqlDataSourceResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type CreateMySqlDataSourceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMySqlDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMySqlDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMySqlDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateMySqlDataSourceResponse) SetHeaders(v map[string]*string) *CreateMySqlDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateMySqlDataSourceResponse) SetStatusCode(v int32) *CreateMySqlDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMySqlDataSourceResponse) SetBody(v *CreateMySqlDataSourceResponseBody) *CreateMySqlDataSourceResponse {
	s.Body = v
	return s
}

type CreateOceanBaseDataSourceRequest struct {
	Cluster          *string `json:"Cluster,omitempty" xml:"Cluster,omitempty"`
	ConfigUrl        *string `json:"ConfigUrl,omitempty" xml:"ConfigUrl,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DrcPassword      *string `json:"DrcPassword,omitempty" xml:"DrcPassword,omitempty"`
	DrcUserName      *string `json:"DrcUserName,omitempty" xml:"DrcUserName,omitempty"`
	InnerDrcPassword *string `json:"InnerDrcPassword,omitempty" xml:"InnerDrcPassword,omitempty"`
	Ip               *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// LogProxy IP。
	LogProxyIp   *string `json:"LogProxyIp,omitempty" xml:"LogProxyIp,omitempty"`
	LogProxyPort *string `json:"LogProxyPort,omitempty" xml:"LogProxyPort,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Password     *string `json:"Password,omitempty" xml:"Password,omitempty"`
	Port         *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	Tenant       *string `json:"Tenant,omitempty" xml:"Tenant,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UserName     *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreateOceanBaseDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOceanBaseDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateOceanBaseDataSourceRequest) SetCluster(v string) *CreateOceanBaseDataSourceRequest {
	s.Cluster = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetConfigUrl(v string) *CreateOceanBaseDataSourceRequest {
	s.ConfigUrl = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetDescription(v string) *CreateOceanBaseDataSourceRequest {
	s.Description = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetDrcPassword(v string) *CreateOceanBaseDataSourceRequest {
	s.DrcPassword = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetDrcUserName(v string) *CreateOceanBaseDataSourceRequest {
	s.DrcUserName = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetInnerDrcPassword(v string) *CreateOceanBaseDataSourceRequest {
	s.InnerDrcPassword = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetIp(v string) *CreateOceanBaseDataSourceRequest {
	s.Ip = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetLogProxyIp(v string) *CreateOceanBaseDataSourceRequest {
	s.LogProxyIp = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetLogProxyPort(v string) *CreateOceanBaseDataSourceRequest {
	s.LogProxyPort = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetName(v string) *CreateOceanBaseDataSourceRequest {
	s.Name = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetPassword(v string) *CreateOceanBaseDataSourceRequest {
	s.Password = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetPort(v int32) *CreateOceanBaseDataSourceRequest {
	s.Port = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetTenant(v string) *CreateOceanBaseDataSourceRequest {
	s.Tenant = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetType(v string) *CreateOceanBaseDataSourceRequest {
	s.Type = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetUserName(v string) *CreateOceanBaseDataSourceRequest {
	s.UserName = &v
	return s
}

func (s *CreateOceanBaseDataSourceRequest) SetVpcId(v string) *CreateOceanBaseDataSourceRequest {
	s.VpcId = &v
	return s
}

type CreateOceanBaseDataSourceResponseBody struct {
	Advice      *string                                           `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                           `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *string                                           `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *CreateOceanBaseDataSourceResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s CreateOceanBaseDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOceanBaseDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOceanBaseDataSourceResponseBody) SetAdvice(v string) *CreateOceanBaseDataSourceResponseBody {
	s.Advice = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetCode(v string) *CreateOceanBaseDataSourceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetCost(v string) *CreateOceanBaseDataSourceResponseBody {
	s.Cost = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetData(v string) *CreateOceanBaseDataSourceResponseBody {
	s.Data = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetErrorDetail(v *CreateOceanBaseDataSourceResponseBodyErrorDetail) *CreateOceanBaseDataSourceResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetMessage(v string) *CreateOceanBaseDataSourceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetPageNumber(v int32) *CreateOceanBaseDataSourceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetPageSize(v int32) *CreateOceanBaseDataSourceResponseBody {
	s.PageSize = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetRequestId(v string) *CreateOceanBaseDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetSuccess(v bool) *CreateOceanBaseDataSourceResponseBody {
	s.Success = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBody) SetTotalCount(v int64) *CreateOceanBaseDataSourceResponseBody {
	s.TotalCount = &v
	return s
}

type CreateOceanBaseDataSourceResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s CreateOceanBaseDataSourceResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s CreateOceanBaseDataSourceResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetCode(v string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetLevel(v string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetMessage(v string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetMessageMcmsKey(v string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetProposal(v string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetProposalMcmsKey(v string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetReason(v string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetReasonMcmsKey(v string) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *CreateOceanBaseDataSourceResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type CreateOceanBaseDataSourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOceanBaseDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOceanBaseDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOceanBaseDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateOceanBaseDataSourceResponse) SetHeaders(v map[string]*string) *CreateOceanBaseDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateOceanBaseDataSourceResponse) SetStatusCode(v int32) *CreateOceanBaseDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOceanBaseDataSourceResponse) SetBody(v *CreateOceanBaseDataSourceResponseBody) *CreateOceanBaseDataSourceResponse {
	s.Body = v
	return s
}

type CreateOmsMysqlDataSourceRequest struct {
	// The description of the data source.
	//
	// It must be 2 to 256 characters in length. The default value is null.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the database gateway instance.
	//
	// > <br>If Type is set to DG, this parameter is required.
	DgDatabaseId *string `json:"DgDatabaseId,omitempty" xml:"DgDatabaseId,omitempty"`
	// The ID of the ECS instance of the data source.
	//
	// > <br>If Type is set to RDS, PolarDB, or DG, this parameter is required.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IP address of the data source.
	//
	// > <br>If Type is set to INTERNET or VPC, this parameter is required.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The name of the data source.
	// It must be 2 to 128 characters in length and can contain letters, digits, underscores (_), periods (.), and hyphens (-).
	//
	// > <br>Invalid characters, such as slashes (/), are not allowed.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The password of the username that is used to access the database. It must be Base64 encoded.
	// For example, for the password abcd123@!, the Base64-encoded value is YWJjZDEyM0Ah.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The port number of the data source.
	//
	// > <br>If Type is set to INTERNET or VPC, this parameter is required.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The name of the database.
	//
	// > <br>If you specify this parameter, subsequent migration or synchronization operations will take effect on this database only.
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
	// The type of the MySQL data source.
	// Valid values: INTERNET, VPC, RDS, PolarDB, and DG.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The username that is used to access the database.
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
	// The ID of the VPC to which the data source belongs.
	//
	// > <br>If Type is set to VPC, this parameter is required.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreateOmsMysqlDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsMysqlDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateOmsMysqlDataSourceRequest) SetDescription(v string) *CreateOmsMysqlDataSourceRequest {
	s.Description = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetDgDatabaseId(v string) *CreateOmsMysqlDataSourceRequest {
	s.DgDatabaseId = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetInstanceId(v string) *CreateOmsMysqlDataSourceRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetIp(v string) *CreateOmsMysqlDataSourceRequest {
	s.Ip = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetName(v string) *CreateOmsMysqlDataSourceRequest {
	s.Name = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetPassword(v string) *CreateOmsMysqlDataSourceRequest {
	s.Password = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetPort(v string) *CreateOmsMysqlDataSourceRequest {
	s.Port = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetSchema(v string) *CreateOmsMysqlDataSourceRequest {
	s.Schema = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetType(v string) *CreateOmsMysqlDataSourceRequest {
	s.Type = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetUsername(v string) *CreateOmsMysqlDataSourceRequest {
	s.Username = &v
	return s
}

func (s *CreateOmsMysqlDataSourceRequest) SetVpcId(v string) *CreateOmsMysqlDataSourceRequest {
	s.VpcId = &v
	return s
}

type CreateOmsMysqlDataSourceResponseBody struct {
	// The return result of the request.
	Data *CreateOmsMysqlDataSourceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOmsMysqlDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsMysqlDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOmsMysqlDataSourceResponseBody) SetData(v *CreateOmsMysqlDataSourceResponseBodyData) *CreateOmsMysqlDataSourceResponseBody {
	s.Data = v
	return s
}

func (s *CreateOmsMysqlDataSourceResponseBody) SetRequestId(v string) *CreateOmsMysqlDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type CreateOmsMysqlDataSourceResponseBodyData struct {
	// The ID of the data source record.
	EndpointId *string `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
}

func (s CreateOmsMysqlDataSourceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsMysqlDataSourceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateOmsMysqlDataSourceResponseBodyData) SetEndpointId(v string) *CreateOmsMysqlDataSourceResponseBodyData {
	s.EndpointId = &v
	return s
}

type CreateOmsMysqlDataSourceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOmsMysqlDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOmsMysqlDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsMysqlDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateOmsMysqlDataSourceResponse) SetHeaders(v map[string]*string) *CreateOmsMysqlDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateOmsMysqlDataSourceResponse) SetStatusCode(v int32) *CreateOmsMysqlDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOmsMysqlDataSourceResponse) SetBody(v *CreateOmsMysqlDataSourceResponseBody) *CreateOmsMysqlDataSourceResponse {
	s.Body = v
	return s
}

type CreateOmsOpenAPIProjectRequest struct {
	BusinessName *string                                   `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	DestConfig   *CreateOmsOpenAPIProjectRequestDestConfig `json:"DestConfig,omitempty" xml:"DestConfig,omitempty" type:"Struct"`
	LabelIds     []*string                                 `json:"LabelIds,omitempty" xml:"LabelIds,omitempty" type:"Repeated"`
	// 页序号，分页查询时生效
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// 页大小，分页查询时生效
	PageSize           *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectName        *string                                           `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	SourceConfig       *CreateOmsOpenAPIProjectRequestSourceConfig       `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty" type:"Struct"`
	TransferMapping    *CreateOmsOpenAPIProjectRequestTransferMapping    `json:"TransferMapping,omitempty" xml:"TransferMapping,omitempty" type:"Struct"`
	TransferStepConfig *CreateOmsOpenAPIProjectRequestTransferStepConfig `json:"TransferStepConfig,omitempty" xml:"TransferStepConfig,omitempty" type:"Struct"`
	// 实例规格 ID，创建项目时生效
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s CreateOmsOpenAPIProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectRequest) SetBusinessName(v string) *CreateOmsOpenAPIProjectRequest {
	s.BusinessName = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequest) SetDestConfig(v *CreateOmsOpenAPIProjectRequestDestConfig) *CreateOmsOpenAPIProjectRequest {
	s.DestConfig = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequest) SetLabelIds(v []*string) *CreateOmsOpenAPIProjectRequest {
	s.LabelIds = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequest) SetPageNumber(v int32) *CreateOmsOpenAPIProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequest) SetPageSize(v int32) *CreateOmsOpenAPIProjectRequest {
	s.PageSize = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequest) SetProjectName(v string) *CreateOmsOpenAPIProjectRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequest) SetSourceConfig(v *CreateOmsOpenAPIProjectRequestSourceConfig) *CreateOmsOpenAPIProjectRequest {
	s.SourceConfig = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequest) SetTransferMapping(v *CreateOmsOpenAPIProjectRequestTransferMapping) *CreateOmsOpenAPIProjectRequest {
	s.TransferMapping = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequest) SetTransferStepConfig(v *CreateOmsOpenAPIProjectRequestTransferStepConfig) *CreateOmsOpenAPIProjectRequest {
	s.TransferStepConfig = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequest) SetWorkerGradeId(v string) *CreateOmsOpenAPIProjectRequest {
	s.WorkerGradeId = &v
	return s
}

type CreateOmsOpenAPIProjectRequestDestConfig struct {
	EnableMsgTrace         *bool   `json:"EnableMsgTrace,omitempty" xml:"EnableMsgTrace,omitempty"`
	EndpointId             *string `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	EndpointType           *string `json:"EndpointType,omitempty" xml:"EndpointType,omitempty"`
	MsgTags                *string `json:"MsgTags,omitempty" xml:"MsgTags,omitempty"`
	Partition              *int32  `json:"Partition,omitempty" xml:"Partition,omitempty"`
	PartitionMode          *string `json:"PartitionMode,omitempty" xml:"PartitionMode,omitempty"`
	ProducerGroup          *string `json:"ProducerGroup,omitempty" xml:"ProducerGroup,omitempty"`
	SendMsgTimeout         *int64  `json:"SendMsgTimeout,omitempty" xml:"SendMsgTimeout,omitempty"`
	SequenceEnable         *bool   `json:"SequenceEnable,omitempty" xml:"SequenceEnable,omitempty"`
	SequenceStartTimestamp *int64  `json:"SequenceStartTimestamp,omitempty" xml:"SequenceStartTimestamp,omitempty"`
	SerializerType         *string `json:"SerializerType,omitempty" xml:"SerializerType,omitempty"`
	TopicType              *string `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
}

func (s CreateOmsOpenAPIProjectRequestDestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectRequestDestConfig) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetEnableMsgTrace(v bool) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.EnableMsgTrace = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetEndpointId(v string) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.EndpointId = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetEndpointType(v string) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.EndpointType = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetMsgTags(v string) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.MsgTags = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetPartition(v int32) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.Partition = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetPartitionMode(v string) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.PartitionMode = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetProducerGroup(v string) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.ProducerGroup = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetSendMsgTimeout(v int64) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.SendMsgTimeout = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetSequenceEnable(v bool) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.SequenceEnable = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetSequenceStartTimestamp(v int64) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.SequenceStartTimestamp = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetSerializerType(v string) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.SerializerType = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestDestConfig) SetTopicType(v string) *CreateOmsOpenAPIProjectRequestDestConfig {
	s.TopicType = &v
	return s
}

type CreateOmsOpenAPIProjectRequestSourceConfig struct {
	EnableMsgTrace         *bool   `json:"EnableMsgTrace,omitempty" xml:"EnableMsgTrace,omitempty"`
	EndpointId             *string `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	EndpointType           *string `json:"EndpointType,omitempty" xml:"EndpointType,omitempty"`
	MsgTags                *string `json:"MsgTags,omitempty" xml:"MsgTags,omitempty"`
	Partition              *int32  `json:"Partition,omitempty" xml:"Partition,omitempty"`
	PartitionMode          *string `json:"PartitionMode,omitempty" xml:"PartitionMode,omitempty"`
	ProducerGroup          *string `json:"ProducerGroup,omitempty" xml:"ProducerGroup,omitempty"`
	SendMsgTimeout         *int64  `json:"SendMsgTimeout,omitempty" xml:"SendMsgTimeout,omitempty"`
	SequenceEnable         *bool   `json:"SequenceEnable,omitempty" xml:"SequenceEnable,omitempty"`
	SequenceStartTimestamp *int64  `json:"SequenceStartTimestamp,omitempty" xml:"SequenceStartTimestamp,omitempty"`
	SerializerType         *string `json:"SerializerType,omitempty" xml:"SerializerType,omitempty"`
	TopicType              *string `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
}

func (s CreateOmsOpenAPIProjectRequestSourceConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectRequestSourceConfig) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetEnableMsgTrace(v bool) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.EnableMsgTrace = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetEndpointId(v string) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.EndpointId = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetEndpointType(v string) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.EndpointType = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetMsgTags(v string) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.MsgTags = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetPartition(v int32) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.Partition = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetPartitionMode(v string) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.PartitionMode = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetProducerGroup(v string) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.ProducerGroup = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetSendMsgTimeout(v int64) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.SendMsgTimeout = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetSequenceEnable(v bool) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.SequenceEnable = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetSequenceStartTimestamp(v int64) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.SequenceStartTimestamp = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetSerializerType(v string) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.SerializerType = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestSourceConfig) SetTopicType(v string) *CreateOmsOpenAPIProjectRequestSourceConfig {
	s.TopicType = &v
	return s
}

type CreateOmsOpenAPIProjectRequestTransferMapping struct {
	Databases []*CreateOmsOpenAPIProjectRequestTransferMappingDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	Mode      *string                                                   `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s CreateOmsOpenAPIProjectRequestTransferMapping) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectRequestTransferMapping) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectRequestTransferMapping) SetDatabases(v []*CreateOmsOpenAPIProjectRequestTransferMappingDatabases) *CreateOmsOpenAPIProjectRequestTransferMapping {
	s.Databases = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMapping) SetMode(v string) *CreateOmsOpenAPIProjectRequestTransferMapping {
	s.Mode = &v
	return s
}

type CreateOmsOpenAPIProjectRequestTransferMappingDatabases struct {
	DatabaseId   *string                                                         `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	DatabaseName *string                                                         `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	MappedName   *string                                                         `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Tables       []*CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	TenantName   *string                                                         `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	Type         *string                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateOmsOpenAPIProjectRequestTransferMappingDatabases) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectRequestTransferMappingDatabases) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabases) SetDatabaseId(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabases {
	s.DatabaseId = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabases) SetDatabaseName(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabases {
	s.DatabaseName = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabases) SetMappedName(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabases {
	s.MappedName = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabases) SetTables(v []*CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) *CreateOmsOpenAPIProjectRequestTransferMappingDatabases {
	s.Tables = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabases) SetTenantName(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabases {
	s.TenantName = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabases) SetType(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabases {
	s.Type = &v
	return s
}

type CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables struct {
	AdbTableSchema *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                   `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	MappedName     *string                                                                     `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	ShardColumns   []*string                                                                   `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	TableId        *string                                                                     `json:"TableId,omitempty" xml:"TableId,omitempty"`
	TableName      *string                                                                     `json:"TableName,omitempty" xml:"TableName,omitempty"`
	Type           *string                                                                     `json:"Type,omitempty" xml:"Type,omitempty"`
	WhereClause    *string                                                                     `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) SetAdbTableSchema(v *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables {
	s.AdbTableSchema = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) SetFilterColumns(v []*string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables {
	s.FilterColumns = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) SetMappedName(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables {
	s.MappedName = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) SetShardColumns(v []*string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables {
	s.ShardColumns = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) SetTableId(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables {
	s.TableId = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) SetTableName(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables {
	s.TableName = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) SetType(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables {
	s.Type = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables) SetWhereClause(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTables {
	s.WhereClause = &v
	return s
}

type CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *int32    `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema) SetDistributedKeys(v []*string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema) SetPartitionLifeCycle(v int32) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema) SetPartitionStatement(v string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema) SetPrimaryKeys(v []*string) *CreateOmsOpenAPIProjectRequestTransferMappingDatabasesTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateOmsOpenAPIProjectRequestTransferStepConfig struct {
	EnableFullSync             *bool                                                                       `json:"EnableFullSync,omitempty" xml:"EnableFullSync,omitempty"`
	EnableIncrSync             *bool                                                                       `json:"EnableIncrSync,omitempty" xml:"EnableIncrSync,omitempty"`
	EnableStructSync           *bool                                                                       `json:"EnableStructSync,omitempty" xml:"EnableStructSync,omitempty"`
	IncrSyncStepTransferConfig *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig `json:"IncrSyncStepTransferConfig,omitempty" xml:"IncrSyncStepTransferConfig,omitempty" type:"Struct"`
}

func (s CreateOmsOpenAPIProjectRequestTransferStepConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectRequestTransferStepConfig) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectRequestTransferStepConfig) SetEnableFullSync(v bool) *CreateOmsOpenAPIProjectRequestTransferStepConfig {
	s.EnableFullSync = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferStepConfig) SetEnableIncrSync(v bool) *CreateOmsOpenAPIProjectRequestTransferStepConfig {
	s.EnableIncrSync = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferStepConfig) SetEnableStructSync(v bool) *CreateOmsOpenAPIProjectRequestTransferStepConfig {
	s.EnableStructSync = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferStepConfig) SetIncrSyncStepTransferConfig(v *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig) *CreateOmsOpenAPIProjectRequestTransferStepConfig {
	s.IncrSyncStepTransferConfig = v
	return s
}

type CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig struct {
	RecordTypeList          []*string `json:"RecordTypeList,omitempty" xml:"RecordTypeList,omitempty" type:"Repeated"`
	StartTimestamp          *int64    `json:"StartTimestamp,omitempty" xml:"StartTimestamp,omitempty"`
	StoreLogKeptHour        *int64    `json:"StoreLogKeptHour,omitempty" xml:"StoreLogKeptHour,omitempty"`
	StoreTransactionEnabled *bool     `json:"StoreTransactionEnabled,omitempty" xml:"StoreTransactionEnabled,omitempty"`
	TransferStepType        *string   `json:"TransferStepType,omitempty" xml:"TransferStepType,omitempty"`
}

func (s CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig) SetRecordTypeList(v []*string) *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig {
	s.RecordTypeList = v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig) SetStartTimestamp(v int64) *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig {
	s.StartTimestamp = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig) SetStoreLogKeptHour(v int64) *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig {
	s.StoreLogKeptHour = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig) SetStoreTransactionEnabled(v bool) *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig {
	s.StoreTransactionEnabled = &v
	return s
}

func (s *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig) SetTransferStepType(v string) *CreateOmsOpenAPIProjectRequestTransferStepConfigIncrSyncStepTransferConfig {
	s.TransferStepType = &v
	return s
}

type CreateOmsOpenAPIProjectShrinkRequest struct {
	BusinessName     *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	DestConfigShrink *string `json:"DestConfig,omitempty" xml:"DestConfig,omitempty"`
	LabelIdsShrink   *string `json:"LabelIds,omitempty" xml:"LabelIds,omitempty"`
	// 页序号，分页查询时生效
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// 页大小，分页查询时生效
	PageSize                 *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectName              *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	SourceConfigShrink       *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty"`
	TransferMappingShrink    *string `json:"TransferMapping,omitempty" xml:"TransferMapping,omitempty"`
	TransferStepConfigShrink *string `json:"TransferStepConfig,omitempty" xml:"TransferStepConfig,omitempty"`
	// 实例规格 ID，创建项目时生效
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s CreateOmsOpenAPIProjectShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetBusinessName(v string) *CreateOmsOpenAPIProjectShrinkRequest {
	s.BusinessName = &v
	return s
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetDestConfigShrink(v string) *CreateOmsOpenAPIProjectShrinkRequest {
	s.DestConfigShrink = &v
	return s
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetLabelIdsShrink(v string) *CreateOmsOpenAPIProjectShrinkRequest {
	s.LabelIdsShrink = &v
	return s
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetPageNumber(v int32) *CreateOmsOpenAPIProjectShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetPageSize(v int32) *CreateOmsOpenAPIProjectShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetProjectName(v string) *CreateOmsOpenAPIProjectShrinkRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetSourceConfigShrink(v string) *CreateOmsOpenAPIProjectShrinkRequest {
	s.SourceConfigShrink = &v
	return s
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetTransferMappingShrink(v string) *CreateOmsOpenAPIProjectShrinkRequest {
	s.TransferMappingShrink = &v
	return s
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetTransferStepConfigShrink(v string) *CreateOmsOpenAPIProjectShrinkRequest {
	s.TransferStepConfigShrink = &v
	return s
}

func (s *CreateOmsOpenAPIProjectShrinkRequest) SetWorkerGradeId(v string) *CreateOmsOpenAPIProjectShrinkRequest {
	s.WorkerGradeId = &v
	return s
}

type CreateOmsOpenAPIProjectResponseBody struct {
	Advice      *string                                         `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                         `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *string                                         `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *CreateOmsOpenAPIProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s CreateOmsOpenAPIProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetAdvice(v string) *CreateOmsOpenAPIProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetCode(v string) *CreateOmsOpenAPIProjectResponseBody {
	s.Code = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetCost(v string) *CreateOmsOpenAPIProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetData(v string) *CreateOmsOpenAPIProjectResponseBody {
	s.Data = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetErrorDetail(v *CreateOmsOpenAPIProjectResponseBodyErrorDetail) *CreateOmsOpenAPIProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetMessage(v string) *CreateOmsOpenAPIProjectResponseBody {
	s.Message = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetPageNumber(v int32) *CreateOmsOpenAPIProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetPageSize(v int32) *CreateOmsOpenAPIProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetRequestId(v string) *CreateOmsOpenAPIProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetSuccess(v bool) *CreateOmsOpenAPIProjectResponseBody {
	s.Success = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBody) SetTotalCount(v int64) *CreateOmsOpenAPIProjectResponseBody {
	s.TotalCount = &v
	return s
}

type CreateOmsOpenAPIProjectResponseBodyErrorDetail struct {
	Code     *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Level    *string `json:"Level,omitempty" xml:"Level,omitempty"`
	Message  *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s CreateOmsOpenAPIProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectResponseBodyErrorDetail) SetCode(v string) *CreateOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBodyErrorDetail) SetLevel(v string) *CreateOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBodyErrorDetail) SetMessage(v string) *CreateOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponseBodyErrorDetail) SetProposal(v string) *CreateOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type CreateOmsOpenAPIProjectResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOmsOpenAPIProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOmsOpenAPIProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOmsOpenAPIProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateOmsOpenAPIProjectResponse) SetHeaders(v map[string]*string) *CreateOmsOpenAPIProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateOmsOpenAPIProjectResponse) SetStatusCode(v int32) *CreateOmsOpenAPIProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOmsOpenAPIProjectResponse) SetBody(v *CreateOmsOpenAPIProjectResponseBody) *CreateOmsOpenAPIProjectResponse {
	s.Body = v
	return s
}

type CreateProjectRequest struct {
	CommonTransferConfig      *CreateProjectRequestCommonTransferConfig `json:"CommonTransferConfig,omitempty" xml:"CommonTransferConfig,omitempty" type:"Struct"`
	EnableFullTransfer        *bool                                     `json:"EnableFullTransfer,omitempty" xml:"EnableFullTransfer,omitempty"`
	EnableFullVerify          *bool                                     `json:"EnableFullVerify,omitempty" xml:"EnableFullVerify,omitempty"`
	EnableIncrTransfer        *bool                                     `json:"EnableIncrTransfer,omitempty" xml:"EnableIncrTransfer,omitempty"`
	EnableReverseIncrTransfer *bool                                     `json:"EnableReverseIncrTransfer,omitempty" xml:"EnableReverseIncrTransfer,omitempty"`
	EnableStructTransfer      *bool                                     `json:"EnableStructTransfer,omitempty" xml:"EnableStructTransfer,omitempty"`
	FullTransferConfig        *CreateProjectRequestFullTransferConfig   `json:"FullTransferConfig,omitempty" xml:"FullTransferConfig,omitempty" type:"Struct"`
	IncrTransferConfig        *CreateProjectRequestIncrTransferConfig   `json:"IncrTransferConfig,omitempty" xml:"IncrTransferConfig,omitempty" type:"Struct"`
	LabelIds                  []*string                                 `json:"LabelIds,omitempty" xml:"LabelIds,omitempty" type:"Repeated"`
	Name                      *string                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	OssKey                    *string                                   `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	SinkEndpointId            *string                                   `json:"SinkEndpointId,omitempty" xml:"SinkEndpointId,omitempty"`
	SourceEndpointId          *string                                   `json:"SourceEndpointId,omitempty" xml:"SourceEndpointId,omitempty"`
	StructTransferConfig      *CreateProjectRequestStructTransferConfig `json:"StructTransferConfig,omitempty" xml:"StructTransferConfig,omitempty" type:"Struct"`
	TransferMapping           *CreateProjectRequestTransferMapping      `json:"TransferMapping,omitempty" xml:"TransferMapping,omitempty" type:"Struct"`
	Type                      *string                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	UseOss                    *bool                                     `json:"UseOss,omitempty" xml:"UseOss,omitempty"`
	WorkerGradeId             *string                                   `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s CreateProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectRequest) SetCommonTransferConfig(v *CreateProjectRequestCommonTransferConfig) *CreateProjectRequest {
	s.CommonTransferConfig = v
	return s
}

func (s *CreateProjectRequest) SetEnableFullTransfer(v bool) *CreateProjectRequest {
	s.EnableFullTransfer = &v
	return s
}

func (s *CreateProjectRequest) SetEnableFullVerify(v bool) *CreateProjectRequest {
	s.EnableFullVerify = &v
	return s
}

func (s *CreateProjectRequest) SetEnableIncrTransfer(v bool) *CreateProjectRequest {
	s.EnableIncrTransfer = &v
	return s
}

func (s *CreateProjectRequest) SetEnableReverseIncrTransfer(v bool) *CreateProjectRequest {
	s.EnableReverseIncrTransfer = &v
	return s
}

func (s *CreateProjectRequest) SetEnableStructTransfer(v bool) *CreateProjectRequest {
	s.EnableStructTransfer = &v
	return s
}

func (s *CreateProjectRequest) SetFullTransferConfig(v *CreateProjectRequestFullTransferConfig) *CreateProjectRequest {
	s.FullTransferConfig = v
	return s
}

func (s *CreateProjectRequest) SetIncrTransferConfig(v *CreateProjectRequestIncrTransferConfig) *CreateProjectRequest {
	s.IncrTransferConfig = v
	return s
}

func (s *CreateProjectRequest) SetLabelIds(v []*string) *CreateProjectRequest {
	s.LabelIds = v
	return s
}

func (s *CreateProjectRequest) SetName(v string) *CreateProjectRequest {
	s.Name = &v
	return s
}

func (s *CreateProjectRequest) SetOssKey(v string) *CreateProjectRequest {
	s.OssKey = &v
	return s
}

func (s *CreateProjectRequest) SetSinkEndpointId(v string) *CreateProjectRequest {
	s.SinkEndpointId = &v
	return s
}

func (s *CreateProjectRequest) SetSourceEndpointId(v string) *CreateProjectRequest {
	s.SourceEndpointId = &v
	return s
}

func (s *CreateProjectRequest) SetStructTransferConfig(v *CreateProjectRequestStructTransferConfig) *CreateProjectRequest {
	s.StructTransferConfig = v
	return s
}

func (s *CreateProjectRequest) SetTransferMapping(v *CreateProjectRequestTransferMapping) *CreateProjectRequest {
	s.TransferMapping = v
	return s
}

func (s *CreateProjectRequest) SetType(v string) *CreateProjectRequest {
	s.Type = &v
	return s
}

func (s *CreateProjectRequest) SetUseOss(v bool) *CreateProjectRequest {
	s.UseOss = &v
	return s
}

func (s *CreateProjectRequest) SetWorkerGradeId(v string) *CreateProjectRequest {
	s.WorkerGradeId = &v
	return s
}

type CreateProjectRequestCommonTransferConfig struct {
	ActiveActive           *bool                                                    `json:"ActiveActive,omitempty" xml:"ActiveActive,omitempty"`
	CustomColumns          []*CreateProjectRequestCommonTransferConfigCustomColumns `json:"CustomColumns,omitempty" xml:"CustomColumns,omitempty" type:"Repeated"`
	DataWorksBusinessName  *string                                                  `json:"DataWorksBusinessName,omitempty" xml:"DataWorksBusinessName,omitempty"`
	DatahubTopicType       *string                                                  `json:"DatahubTopicType,omitempty" xml:"DatahubTopicType,omitempty"`
	MqPartition            *int32                                                   `json:"MqPartition,omitempty" xml:"MqPartition,omitempty"`
	MqPartitionMode        *string                                                  `json:"MqPartitionMode,omitempty" xml:"MqPartitionMode,omitempty"`
	MqSerializerType       *string                                                  `json:"MqSerializerType,omitempty" xml:"MqSerializerType,omitempty"`
	RocketMqEnableMsgTrace *bool                                                    `json:"RocketMqEnableMsgTrace,omitempty" xml:"RocketMqEnableMsgTrace,omitempty"`
	RocketMqMsgTags        *string                                                  `json:"RocketMqMsgTags,omitempty" xml:"RocketMqMsgTags,omitempty"`
	RocketMqProducerGroup  *string                                                  `json:"RocketMqProducerGroup,omitempty" xml:"RocketMqProducerGroup,omitempty"`
	RocketMqSendMsgTimeout *int64                                                   `json:"RocketMqSendMsgTimeout,omitempty" xml:"RocketMqSendMsgTimeout,omitempty"`
	SyncSchema             *bool                                                    `json:"SyncSchema,omitempty" xml:"SyncSchema,omitempty"`
	SyncSchemaColumnName   *string                                                  `json:"SyncSchemaColumnName,omitempty" xml:"SyncSchemaColumnName,omitempty"`
	TableCategory          *string                                                  `json:"TableCategory,omitempty" xml:"TableCategory,omitempty"`
}

func (s CreateProjectRequestCommonTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestCommonTransferConfig) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestCommonTransferConfig) SetActiveActive(v bool) *CreateProjectRequestCommonTransferConfig {
	s.ActiveActive = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetCustomColumns(v []*CreateProjectRequestCommonTransferConfigCustomColumns) *CreateProjectRequestCommonTransferConfig {
	s.CustomColumns = v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetDataWorksBusinessName(v string) *CreateProjectRequestCommonTransferConfig {
	s.DataWorksBusinessName = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetDatahubTopicType(v string) *CreateProjectRequestCommonTransferConfig {
	s.DatahubTopicType = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetMqPartition(v int32) *CreateProjectRequestCommonTransferConfig {
	s.MqPartition = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetMqPartitionMode(v string) *CreateProjectRequestCommonTransferConfig {
	s.MqPartitionMode = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetMqSerializerType(v string) *CreateProjectRequestCommonTransferConfig {
	s.MqSerializerType = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetRocketMqEnableMsgTrace(v bool) *CreateProjectRequestCommonTransferConfig {
	s.RocketMqEnableMsgTrace = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetRocketMqMsgTags(v string) *CreateProjectRequestCommonTransferConfig {
	s.RocketMqMsgTags = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetRocketMqProducerGroup(v string) *CreateProjectRequestCommonTransferConfig {
	s.RocketMqProducerGroup = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetRocketMqSendMsgTimeout(v int64) *CreateProjectRequestCommonTransferConfig {
	s.RocketMqSendMsgTimeout = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetSyncSchema(v bool) *CreateProjectRequestCommonTransferConfig {
	s.SyncSchema = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetSyncSchemaColumnName(v string) *CreateProjectRequestCommonTransferConfig {
	s.SyncSchemaColumnName = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfig) SetTableCategory(v string) *CreateProjectRequestCommonTransferConfig {
	s.TableCategory = &v
	return s
}

type CreateProjectRequestCommonTransferConfigCustomColumns struct {
	ColumnName *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
}

func (s CreateProjectRequestCommonTransferConfigCustomColumns) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestCommonTransferConfigCustomColumns) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestCommonTransferConfigCustomColumns) SetColumnName(v string) *CreateProjectRequestCommonTransferConfigCustomColumns {
	s.ColumnName = &v
	return s
}

func (s *CreateProjectRequestCommonTransferConfigCustomColumns) SetExpression(v string) *CreateProjectRequestCommonTransferConfigCustomColumns {
	s.Expression = &v
	return s
}

type CreateProjectRequestFullTransferConfig struct {
	AllowDestTableNotEmpty   *bool   `json:"AllowDestTableNotEmpty,omitempty" xml:"AllowDestTableNotEmpty,omitempty"`
	FullTransferSpeedMode    *string `json:"FullTransferSpeedMode,omitempty" xml:"FullTransferSpeedMode,omitempty"`
	FullVerifySpeedMode      *string `json:"FullVerifySpeedMode,omitempty" xml:"FullVerifySpeedMode,omitempty"`
	NonePkUkTruncateDstTable *bool   `json:"NonePkUkTruncateDstTable,omitempty" xml:"NonePkUkTruncateDstTable,omitempty"`
}

func (s CreateProjectRequestFullTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestFullTransferConfig) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestFullTransferConfig) SetAllowDestTableNotEmpty(v bool) *CreateProjectRequestFullTransferConfig {
	s.AllowDestTableNotEmpty = &v
	return s
}

func (s *CreateProjectRequestFullTransferConfig) SetFullTransferSpeedMode(v string) *CreateProjectRequestFullTransferConfig {
	s.FullTransferSpeedMode = &v
	return s
}

func (s *CreateProjectRequestFullTransferConfig) SetFullVerifySpeedMode(v string) *CreateProjectRequestFullTransferConfig {
	s.FullVerifySpeedMode = &v
	return s
}

func (s *CreateProjectRequestFullTransferConfig) SetNonePkUkTruncateDstTable(v bool) *CreateProjectRequestFullTransferConfig {
	s.NonePkUkTruncateDstTable = &v
	return s
}

type CreateProjectRequestIncrTransferConfig struct {
	EnableIncrSyncStatistics  *bool     `json:"EnableIncrSyncStatistics,omitempty" xml:"EnableIncrSyncStatistics,omitempty"`
	EnableSequencingWithinTxn *bool     `json:"EnableSequencingWithinTxn,omitempty" xml:"EnableSequencingWithinTxn,omitempty"`
	IncrSyncConcurrency       *int32    `json:"IncrSyncConcurrency,omitempty" xml:"IncrSyncConcurrency,omitempty"`
	RecordTypeWhiteList       []*string `json:"RecordTypeWhiteList,omitempty" xml:"RecordTypeWhiteList,omitempty" type:"Repeated"`
	StartTimestamp            *string   `json:"StartTimestamp,omitempty" xml:"StartTimestamp,omitempty"`
	StoreLogKeptHour          *int32    `json:"StoreLogKeptHour,omitempty" xml:"StoreLogKeptHour,omitempty"`
}

func (s CreateProjectRequestIncrTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestIncrTransferConfig) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestIncrTransferConfig) SetEnableIncrSyncStatistics(v bool) *CreateProjectRequestIncrTransferConfig {
	s.EnableIncrSyncStatistics = &v
	return s
}

func (s *CreateProjectRequestIncrTransferConfig) SetEnableSequencingWithinTxn(v bool) *CreateProjectRequestIncrTransferConfig {
	s.EnableSequencingWithinTxn = &v
	return s
}

func (s *CreateProjectRequestIncrTransferConfig) SetIncrSyncConcurrency(v int32) *CreateProjectRequestIncrTransferConfig {
	s.IncrSyncConcurrency = &v
	return s
}

func (s *CreateProjectRequestIncrTransferConfig) SetRecordTypeWhiteList(v []*string) *CreateProjectRequestIncrTransferConfig {
	s.RecordTypeWhiteList = v
	return s
}

func (s *CreateProjectRequestIncrTransferConfig) SetStartTimestamp(v string) *CreateProjectRequestIncrTransferConfig {
	s.StartTimestamp = &v
	return s
}

func (s *CreateProjectRequestIncrTransferConfig) SetStoreLogKeptHour(v int32) *CreateProjectRequestIncrTransferConfig {
	s.StoreLogKeptHour = &v
	return s
}

type CreateProjectRequestStructTransferConfig struct {
	ByteCharConvertStrategy *string `json:"ByteCharConvertStrategy,omitempty" xml:"ByteCharConvertStrategy,omitempty"`
	DeferIndexCreation      *bool   `json:"DeferIndexCreation,omitempty" xml:"DeferIndexCreation,omitempty"`
}

func (s CreateProjectRequestStructTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestStructTransferConfig) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestStructTransferConfig) SetByteCharConvertStrategy(v string) *CreateProjectRequestStructTransferConfig {
	s.ByteCharConvertStrategy = &v
	return s
}

func (s *CreateProjectRequestStructTransferConfig) SetDeferIndexCreation(v bool) *CreateProjectRequestStructTransferConfig {
	s.DeferIndexCreation = &v
	return s
}

type CreateProjectRequestTransferMapping struct {
	Databases             []*CreateProjectRequestTransferMappingDatabases      `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	DatabasesBlack        []*CreateProjectRequestTransferMappingDatabasesBlack `json:"DatabasesBlack,omitempty" xml:"DatabasesBlack,omitempty" type:"Repeated"`
	Mode                  *string                                              `json:"Mode,omitempty" xml:"Mode,omitempty"`
	TableAndViewBlackList []*string                                            `json:"TableAndViewBlackList,omitempty" xml:"TableAndViewBlackList,omitempty" type:"Repeated"`
	TableAndViewWhiteList []*string                                            `json:"TableAndViewWhiteList,omitempty" xml:"TableAndViewWhiteList,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMapping) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMapping) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMapping) SetDatabases(v []*CreateProjectRequestTransferMappingDatabases) *CreateProjectRequestTransferMapping {
	s.Databases = v
	return s
}

func (s *CreateProjectRequestTransferMapping) SetDatabasesBlack(v []*CreateProjectRequestTransferMappingDatabasesBlack) *CreateProjectRequestTransferMapping {
	s.DatabasesBlack = v
	return s
}

func (s *CreateProjectRequestTransferMapping) SetMode(v string) *CreateProjectRequestTransferMapping {
	s.Mode = &v
	return s
}

func (s *CreateProjectRequestTransferMapping) SetTableAndViewBlackList(v []*string) *CreateProjectRequestTransferMapping {
	s.TableAndViewBlackList = v
	return s
}

func (s *CreateProjectRequestTransferMapping) SetTableAndViewWhiteList(v []*string) *CreateProjectRequestTransferMapping {
	s.TableAndViewWhiteList = v
	return s
}

type CreateProjectRequestTransferMappingDatabases struct {
	ClusterName    *string                                                       `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	Id             *string                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                       `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	SpecificTables []*CreateProjectRequestTransferMappingDatabasesSpecificTables `json:"SpecificTables,omitempty" xml:"SpecificTables,omitempty" type:"Repeated"`
	SpecificViews  []*CreateProjectRequestTransferMappingDatabasesSpecificViews  `json:"SpecificViews,omitempty" xml:"SpecificViews,omitempty" type:"Repeated"`
	Tables         []*CreateProjectRequestTransferMappingDatabasesTables         `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	TenantName     *string                                                       `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	Views          []*CreateProjectRequestTransferMappingDatabasesViews          `json:"Views,omitempty" xml:"Views,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabases) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabases) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabases) SetClusterName(v string) *CreateProjectRequestTransferMappingDatabases {
	s.ClusterName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabases) SetId(v string) *CreateProjectRequestTransferMappingDatabases {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabases) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabases {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabases) SetName(v string) *CreateProjectRequestTransferMappingDatabases {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabases) SetSpecificTables(v []*CreateProjectRequestTransferMappingDatabasesSpecificTables) *CreateProjectRequestTransferMappingDatabases {
	s.SpecificTables = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabases) SetSpecificViews(v []*CreateProjectRequestTransferMappingDatabasesSpecificViews) *CreateProjectRequestTransferMappingDatabases {
	s.SpecificViews = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabases) SetTables(v []*CreateProjectRequestTransferMappingDatabasesTables) *CreateProjectRequestTransferMappingDatabases {
	s.Tables = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabases) SetTenantName(v string) *CreateProjectRequestTransferMappingDatabases {
	s.TenantName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabases) SetViews(v []*CreateProjectRequestTransferMappingDatabasesViews) *CreateProjectRequestTransferMappingDatabases {
	s.Views = v
	return s
}

type CreateProjectRequestTransferMappingDatabasesSpecificTables struct {
	AdbTableSchema *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                 `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                   `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                 `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                   `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectRequestTransferMappingDatabasesSpecificTables) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesSpecificTables) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTables) SetAdbTableSchema(v *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema) *CreateProjectRequestTransferMappingDatabasesSpecificTables {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTables) SetFilterColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesSpecificTables {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTables) SetId(v string) *CreateProjectRequestTransferMappingDatabasesSpecificTables {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTables) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabasesSpecificTables {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTables) SetName(v string) *CreateProjectRequestTransferMappingDatabasesSpecificTables {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTables) SetShardColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesSpecificTables {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTables) SetWhereClause(v string) *CreateProjectRequestTransferMappingDatabasesSpecificTables {
	s.WhereClause = &v
	return s
}

type CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema) SetPartitionStatement(v string) *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesSpecificTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectRequestTransferMappingDatabasesSpecificViews struct {
	AdbTableSchema *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                  `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                  `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectRequestTransferMappingDatabasesSpecificViews) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesSpecificViews) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViews) SetAdbTableSchema(v *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema) *CreateProjectRequestTransferMappingDatabasesSpecificViews {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViews) SetFilterColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesSpecificViews {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViews) SetId(v string) *CreateProjectRequestTransferMappingDatabasesSpecificViews {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViews) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabasesSpecificViews {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViews) SetName(v string) *CreateProjectRequestTransferMappingDatabasesSpecificViews {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViews) SetShardColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesSpecificViews {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViews) SetWhereClause(v string) *CreateProjectRequestTransferMappingDatabasesSpecificViews {
	s.WhereClause = &v
	return s
}

type CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema) SetPartitionStatement(v string) *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesSpecificViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectRequestTransferMappingDatabasesTables struct {
	AdbTableSchema *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                         `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                           `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                         `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                           `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectRequestTransferMappingDatabasesTables) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesTables) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesTables) SetAdbTableSchema(v *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema) *CreateProjectRequestTransferMappingDatabasesTables {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesTables) SetFilterColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesTables {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesTables) SetId(v string) *CreateProjectRequestTransferMappingDatabasesTables {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesTables) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabasesTables {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesTables) SetName(v string) *CreateProjectRequestTransferMappingDatabasesTables {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesTables) SetShardColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesTables {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesTables) SetWhereClause(v string) *CreateProjectRequestTransferMappingDatabasesTables {
	s.WhereClause = &v
	return s
}

type CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema) SetPartitionStatement(v string) *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectRequestTransferMappingDatabasesViews struct {
	AdbTableSchema *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                        `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                          `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                          `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                          `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                        `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                          `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectRequestTransferMappingDatabasesViews) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesViews) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesViews) SetAdbTableSchema(v *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema) *CreateProjectRequestTransferMappingDatabasesViews {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesViews) SetFilterColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesViews {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesViews) SetId(v string) *CreateProjectRequestTransferMappingDatabasesViews {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesViews) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabasesViews {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesViews) SetName(v string) *CreateProjectRequestTransferMappingDatabasesViews {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesViews) SetShardColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesViews {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesViews) SetWhereClause(v string) *CreateProjectRequestTransferMappingDatabasesViews {
	s.WhereClause = &v
	return s
}

type CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema) SetPartitionStatement(v string) *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectRequestTransferMappingDatabasesBlack struct {
	ClusterName    *string                                                            `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	Id             *string                                                            `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                            `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	SpecificTables []*CreateProjectRequestTransferMappingDatabasesBlackSpecificTables `json:"SpecificTables,omitempty" xml:"SpecificTables,omitempty" type:"Repeated"`
	SpecificViews  []*CreateProjectRequestTransferMappingDatabasesBlackSpecificViews  `json:"SpecificViews,omitempty" xml:"SpecificViews,omitempty" type:"Repeated"`
	Tables         []*CreateProjectRequestTransferMappingDatabasesBlackTables         `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	TenantName     *string                                                            `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	Views          []*CreateProjectRequestTransferMappingDatabasesBlackViews          `json:"Views,omitempty" xml:"Views,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabasesBlack) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesBlack) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesBlack) SetClusterName(v string) *CreateProjectRequestTransferMappingDatabasesBlack {
	s.ClusterName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlack) SetId(v string) *CreateProjectRequestTransferMappingDatabasesBlack {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlack) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabasesBlack {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlack) SetName(v string) *CreateProjectRequestTransferMappingDatabasesBlack {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlack) SetSpecificTables(v []*CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) *CreateProjectRequestTransferMappingDatabasesBlack {
	s.SpecificTables = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlack) SetSpecificViews(v []*CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) *CreateProjectRequestTransferMappingDatabasesBlack {
	s.SpecificViews = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlack) SetTables(v []*CreateProjectRequestTransferMappingDatabasesBlackTables) *CreateProjectRequestTransferMappingDatabasesBlack {
	s.Tables = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlack) SetTenantName(v string) *CreateProjectRequestTransferMappingDatabasesBlack {
	s.TenantName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlack) SetViews(v []*CreateProjectRequestTransferMappingDatabasesBlackViews) *CreateProjectRequestTransferMappingDatabasesBlack {
	s.Views = v
	return s
}

type CreateProjectRequestTransferMappingDatabasesBlackSpecificTables struct {
	AdbTableSchema *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                      `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                        `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                      `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                        `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) SetAdbTableSchema(v *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) SetFilterColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) SetId(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) SetName(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) SetShardColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables) SetWhereClause(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTables {
	s.WhereClause = &v
	return s
}

type CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) SetPartitionStatement(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectRequestTransferMappingDatabasesBlackSpecificViews struct {
	AdbTableSchema *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                     `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                       `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                     `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                       `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) SetAdbTableSchema(v *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) SetFilterColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) SetId(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) SetName(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) SetShardColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews) SetWhereClause(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViews {
	s.WhereClause = &v
	return s
}

type CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) SetPartitionStatement(v string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackSpecificViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectRequestTransferMappingDatabasesBlackTables struct {
	AdbTableSchema *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                              `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                              `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectRequestTransferMappingDatabasesBlackTables) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesBlackTables) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTables) SetAdbTableSchema(v *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema) *CreateProjectRequestTransferMappingDatabasesBlackTables {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTables) SetFilterColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackTables {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTables) SetId(v string) *CreateProjectRequestTransferMappingDatabasesBlackTables {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTables) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabasesBlackTables {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTables) SetName(v string) *CreateProjectRequestTransferMappingDatabasesBlackTables {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTables) SetShardColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackTables {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTables) SetWhereClause(v string) *CreateProjectRequestTransferMappingDatabasesBlackTables {
	s.WhereClause = &v
	return s
}

type CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema) SetPartitionStatement(v string) *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectRequestTransferMappingDatabasesBlackViews struct {
	AdbTableSchema *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                             `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                               `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                               `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                               `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                             `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                               `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectRequestTransferMappingDatabasesBlackViews) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesBlackViews) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViews) SetAdbTableSchema(v *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema) *CreateProjectRequestTransferMappingDatabasesBlackViews {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViews) SetFilterColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackViews {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViews) SetId(v string) *CreateProjectRequestTransferMappingDatabasesBlackViews {
	s.Id = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViews) SetMappedName(v string) *CreateProjectRequestTransferMappingDatabasesBlackViews {
	s.MappedName = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViews) SetName(v string) *CreateProjectRequestTransferMappingDatabasesBlackViews {
	s.Name = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViews) SetShardColumns(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackViews {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViews) SetWhereClause(v string) *CreateProjectRequestTransferMappingDatabasesBlackViews {
	s.WhereClause = &v
	return s
}

type CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema) SetPartitionStatement(v string) *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectRequestTransferMappingDatabasesBlackViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectShrinkRequest struct {
	CommonTransferConfigShrink *string `json:"CommonTransferConfig,omitempty" xml:"CommonTransferConfig,omitempty"`
	EnableFullTransfer         *bool   `json:"EnableFullTransfer,omitempty" xml:"EnableFullTransfer,omitempty"`
	EnableFullVerify           *bool   `json:"EnableFullVerify,omitempty" xml:"EnableFullVerify,omitempty"`
	EnableIncrTransfer         *bool   `json:"EnableIncrTransfer,omitempty" xml:"EnableIncrTransfer,omitempty"`
	EnableReverseIncrTransfer  *bool   `json:"EnableReverseIncrTransfer,omitempty" xml:"EnableReverseIncrTransfer,omitempty"`
	EnableStructTransfer       *bool   `json:"EnableStructTransfer,omitempty" xml:"EnableStructTransfer,omitempty"`
	FullTransferConfigShrink   *string `json:"FullTransferConfig,omitempty" xml:"FullTransferConfig,omitempty"`
	IncrTransferConfigShrink   *string `json:"IncrTransferConfig,omitempty" xml:"IncrTransferConfig,omitempty"`
	LabelIdsShrink             *string `json:"LabelIds,omitempty" xml:"LabelIds,omitempty"`
	Name                       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OssKey                     *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	SinkEndpointId             *string `json:"SinkEndpointId,omitempty" xml:"SinkEndpointId,omitempty"`
	SourceEndpointId           *string `json:"SourceEndpointId,omitempty" xml:"SourceEndpointId,omitempty"`
	StructTransferConfigShrink *string `json:"StructTransferConfig,omitempty" xml:"StructTransferConfig,omitempty"`
	TransferMappingShrink      *string `json:"TransferMapping,omitempty" xml:"TransferMapping,omitempty"`
	Type                       *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UseOss                     *bool   `json:"UseOss,omitempty" xml:"UseOss,omitempty"`
	WorkerGradeId              *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s CreateProjectShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectShrinkRequest) SetCommonTransferConfigShrink(v string) *CreateProjectShrinkRequest {
	s.CommonTransferConfigShrink = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetEnableFullTransfer(v bool) *CreateProjectShrinkRequest {
	s.EnableFullTransfer = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetEnableFullVerify(v bool) *CreateProjectShrinkRequest {
	s.EnableFullVerify = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetEnableIncrTransfer(v bool) *CreateProjectShrinkRequest {
	s.EnableIncrTransfer = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetEnableReverseIncrTransfer(v bool) *CreateProjectShrinkRequest {
	s.EnableReverseIncrTransfer = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetEnableStructTransfer(v bool) *CreateProjectShrinkRequest {
	s.EnableStructTransfer = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetFullTransferConfigShrink(v string) *CreateProjectShrinkRequest {
	s.FullTransferConfigShrink = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetIncrTransferConfigShrink(v string) *CreateProjectShrinkRequest {
	s.IncrTransferConfigShrink = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetLabelIdsShrink(v string) *CreateProjectShrinkRequest {
	s.LabelIdsShrink = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetName(v string) *CreateProjectShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetOssKey(v string) *CreateProjectShrinkRequest {
	s.OssKey = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetSinkEndpointId(v string) *CreateProjectShrinkRequest {
	s.SinkEndpointId = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetSourceEndpointId(v string) *CreateProjectShrinkRequest {
	s.SourceEndpointId = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetStructTransferConfigShrink(v string) *CreateProjectShrinkRequest {
	s.StructTransferConfigShrink = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetTransferMappingShrink(v string) *CreateProjectShrinkRequest {
	s.TransferMappingShrink = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetType(v string) *CreateProjectShrinkRequest {
	s.Type = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetUseOss(v bool) *CreateProjectShrinkRequest {
	s.UseOss = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetWorkerGradeId(v string) *CreateProjectShrinkRequest {
	s.WorkerGradeId = &v
	return s
}

type CreateProjectResponseBody struct {
	Advice      *string                               `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                               `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *string                               `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *CreateProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s CreateProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProjectResponseBody) SetAdvice(v string) *CreateProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *CreateProjectResponseBody) SetCode(v string) *CreateProjectResponseBody {
	s.Code = &v
	return s
}

func (s *CreateProjectResponseBody) SetCost(v string) *CreateProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *CreateProjectResponseBody) SetData(v string) *CreateProjectResponseBody {
	s.Data = &v
	return s
}

func (s *CreateProjectResponseBody) SetErrorDetail(v *CreateProjectResponseBodyErrorDetail) *CreateProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *CreateProjectResponseBody) SetMessage(v string) *CreateProjectResponseBody {
	s.Message = &v
	return s
}

func (s *CreateProjectResponseBody) SetPageNumber(v int32) *CreateProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *CreateProjectResponseBody) SetPageSize(v int32) *CreateProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *CreateProjectResponseBody) SetRequestId(v string) *CreateProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProjectResponseBody) SetSuccess(v bool) *CreateProjectResponseBody {
	s.Success = &v
	return s
}

func (s *CreateProjectResponseBody) SetTotalCount(v int64) *CreateProjectResponseBody {
	s.TotalCount = &v
	return s
}

type CreateProjectResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s CreateProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *CreateProjectResponseBodyErrorDetail) SetCode(v string) *CreateProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *CreateProjectResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetLevel(v string) *CreateProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetMessage(v string) *CreateProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *CreateProjectResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetMessageMcmsKey(v string) *CreateProjectResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetProposal(v string) *CreateProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *CreateProjectResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetProposalMcmsKey(v string) *CreateProjectResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetReason(v string) *CreateProjectResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *CreateProjectResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetReasonMcmsKey(v string) *CreateProjectResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *CreateProjectResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *CreateProjectResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type CreateProjectResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateProjectResponse) SetHeaders(v map[string]*string) *CreateProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateProjectResponse) SetStatusCode(v int32) *CreateProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProjectResponse) SetBody(v *CreateProjectResponseBody) *CreateProjectResponse {
	s.Body = v
	return s
}

type CreateProjectModifyRecordsRequest struct {
	Databases []*CreateProjectModifyRecordsRequestDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	Id        *string                                       `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateProjectModifyRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequest) SetDatabases(v []*CreateProjectModifyRecordsRequestDatabases) *CreateProjectModifyRecordsRequest {
	s.Databases = v
	return s
}

func (s *CreateProjectModifyRecordsRequest) SetId(v string) *CreateProjectModifyRecordsRequest {
	s.Id = &v
	return s
}

type CreateProjectModifyRecordsRequestDatabases struct {
	Id             *string                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                     `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	SpecificTables []*CreateProjectModifyRecordsRequestDatabasesSpecificTables `json:"SpecificTables,omitempty" xml:"SpecificTables,omitempty" type:"Repeated"`
	SpecificViews  []*CreateProjectModifyRecordsRequestDatabasesSpecificViews  `json:"SpecificViews,omitempty" xml:"SpecificViews,omitempty" type:"Repeated"`
	Tables         []*CreateProjectModifyRecordsRequestDatabasesTables         `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	Views          []*CreateProjectModifyRecordsRequestDatabasesViews          `json:"Views,omitempty" xml:"Views,omitempty" type:"Repeated"`
}

func (s CreateProjectModifyRecordsRequestDatabases) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequestDatabases) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequestDatabases) SetId(v string) *CreateProjectModifyRecordsRequestDatabases {
	s.Id = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabases) SetMappedName(v string) *CreateProjectModifyRecordsRequestDatabases {
	s.MappedName = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabases) SetName(v string) *CreateProjectModifyRecordsRequestDatabases {
	s.Name = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabases) SetSpecificTables(v []*CreateProjectModifyRecordsRequestDatabasesSpecificTables) *CreateProjectModifyRecordsRequestDatabases {
	s.SpecificTables = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabases) SetSpecificViews(v []*CreateProjectModifyRecordsRequestDatabasesSpecificViews) *CreateProjectModifyRecordsRequestDatabases {
	s.SpecificViews = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabases) SetTables(v []*CreateProjectModifyRecordsRequestDatabasesTables) *CreateProjectModifyRecordsRequestDatabases {
	s.Tables = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabases) SetViews(v []*CreateProjectModifyRecordsRequestDatabasesViews) *CreateProjectModifyRecordsRequestDatabases {
	s.Views = v
	return s
}

type CreateProjectModifyRecordsRequestDatabasesSpecificTables struct {
	AdbTableSchema *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                               `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                 `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                 `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                               `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                 `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectModifyRecordsRequestDatabasesSpecificTables) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequestDatabasesSpecificTables) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTables) SetAdbTableSchema(v *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema) *CreateProjectModifyRecordsRequestDatabasesSpecificTables {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTables) SetFilterColumns(v []*string) *CreateProjectModifyRecordsRequestDatabasesSpecificTables {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTables) SetId(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificTables {
	s.Id = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTables) SetMappedName(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificTables {
	s.MappedName = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTables) SetName(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificTables {
	s.Name = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTables) SetShardColumns(v []*string) *CreateProjectModifyRecordsRequestDatabasesSpecificTables {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTables) SetWhereClause(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificTables {
	s.WhereClause = &v
	return s
}

type CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema) SetPartitionStatement(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectModifyRecordsRequestDatabasesSpecificTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectModifyRecordsRequestDatabasesSpecificViews struct {
	AdbTableSchema *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                              `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                              `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectModifyRecordsRequestDatabasesSpecificViews) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequestDatabasesSpecificViews) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViews) SetAdbTableSchema(v *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema) *CreateProjectModifyRecordsRequestDatabasesSpecificViews {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViews) SetFilterColumns(v []*string) *CreateProjectModifyRecordsRequestDatabasesSpecificViews {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViews) SetId(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificViews {
	s.Id = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViews) SetMappedName(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificViews {
	s.MappedName = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViews) SetName(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificViews {
	s.Name = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViews) SetShardColumns(v []*string) *CreateProjectModifyRecordsRequestDatabasesSpecificViews {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViews) SetWhereClause(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificViews {
	s.WhereClause = &v
	return s
}

type CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema) SetPartitionStatement(v string) *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectModifyRecordsRequestDatabasesSpecificViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectModifyRecordsRequestDatabasesTables struct {
	AdbTableSchema *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                       `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                         `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                       `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                         `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectModifyRecordsRequestDatabasesTables) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequestDatabasesTables) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequestDatabasesTables) SetAdbTableSchema(v *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema) *CreateProjectModifyRecordsRequestDatabasesTables {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesTables) SetFilterColumns(v []*string) *CreateProjectModifyRecordsRequestDatabasesTables {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesTables) SetId(v string) *CreateProjectModifyRecordsRequestDatabasesTables {
	s.Id = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesTables) SetMappedName(v string) *CreateProjectModifyRecordsRequestDatabasesTables {
	s.MappedName = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesTables) SetName(v string) *CreateProjectModifyRecordsRequestDatabasesTables {
	s.Name = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesTables) SetShardColumns(v []*string) *CreateProjectModifyRecordsRequestDatabasesTables {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesTables) SetWhereClause(v string) *CreateProjectModifyRecordsRequestDatabasesTables {
	s.WhereClause = &v
	return s
}

type CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema) SetPartitionStatement(v string) *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectModifyRecordsRequestDatabasesTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectModifyRecordsRequestDatabasesViews struct {
	AdbTableSchema *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                      `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                        `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                      `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                        `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s CreateProjectModifyRecordsRequestDatabasesViews) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequestDatabasesViews) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequestDatabasesViews) SetAdbTableSchema(v *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema) *CreateProjectModifyRecordsRequestDatabasesViews {
	s.AdbTableSchema = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesViews) SetFilterColumns(v []*string) *CreateProjectModifyRecordsRequestDatabasesViews {
	s.FilterColumns = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesViews) SetId(v string) *CreateProjectModifyRecordsRequestDatabasesViews {
	s.Id = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesViews) SetMappedName(v string) *CreateProjectModifyRecordsRequestDatabasesViews {
	s.MappedName = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesViews) SetName(v string) *CreateProjectModifyRecordsRequestDatabasesViews {
	s.Name = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesViews) SetShardColumns(v []*string) *CreateProjectModifyRecordsRequestDatabasesViews {
	s.ShardColumns = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesViews) SetWhereClause(v string) *CreateProjectModifyRecordsRequestDatabasesViews {
	s.WhereClause = &v
	return s
}

type CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema) SetDistributedKeys(v []*string) *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema) SetPartitionLifeCycle(v string) *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema) SetPartitionStatement(v string) *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema) SetPrimaryKeys(v []*string) *CreateProjectModifyRecordsRequestDatabasesViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type CreateProjectModifyRecordsShrinkRequest struct {
	DatabasesShrink *string `json:"Databases,omitempty" xml:"Databases,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateProjectModifyRecordsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsShrinkRequest) SetDatabasesShrink(v string) *CreateProjectModifyRecordsShrinkRequest {
	s.DatabasesShrink = &v
	return s
}

func (s *CreateProjectModifyRecordsShrinkRequest) SetId(v string) *CreateProjectModifyRecordsShrinkRequest {
	s.Id = &v
	return s
}

type CreateProjectModifyRecordsResponseBody struct {
	Advice      *string                                            `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                            `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *int64                                             `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *CreateProjectModifyRecordsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s CreateProjectModifyRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsResponseBody) SetAdvice(v string) *CreateProjectModifyRecordsResponseBody {
	s.Advice = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetCode(v string) *CreateProjectModifyRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetCost(v string) *CreateProjectModifyRecordsResponseBody {
	s.Cost = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetData(v int64) *CreateProjectModifyRecordsResponseBody {
	s.Data = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetErrorDetail(v *CreateProjectModifyRecordsResponseBodyErrorDetail) *CreateProjectModifyRecordsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetMessage(v string) *CreateProjectModifyRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetPageNumber(v int32) *CreateProjectModifyRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetPageSize(v int32) *CreateProjectModifyRecordsResponseBody {
	s.PageSize = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetRequestId(v string) *CreateProjectModifyRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetSuccess(v bool) *CreateProjectModifyRecordsResponseBody {
	s.Success = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBody) SetTotalCount(v int64) *CreateProjectModifyRecordsResponseBody {
	s.TotalCount = &v
	return s
}

type CreateProjectModifyRecordsResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s CreateProjectModifyRecordsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetCode(v string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetLevel(v string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetMessage(v string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetMessageMcmsKey(v string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetProposal(v string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetProposalMcmsKey(v string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetReason(v string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetReasonMcmsKey(v string) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *CreateProjectModifyRecordsResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *CreateProjectModifyRecordsResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type CreateProjectModifyRecordsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProjectModifyRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProjectModifyRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectModifyRecordsResponse) GoString() string {
	return s.String()
}

func (s *CreateProjectModifyRecordsResponse) SetHeaders(v map[string]*string) *CreateProjectModifyRecordsResponse {
	s.Headers = v
	return s
}

func (s *CreateProjectModifyRecordsResponse) SetStatusCode(v int32) *CreateProjectModifyRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProjectModifyRecordsResponse) SetBody(v *CreateProjectModifyRecordsResponseBody) *CreateProjectModifyRecordsResponse {
	s.Body = v
	return s
}

type CreateRdsPostgreSQLDataSourceRequest struct {
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Password     *string `json:"Password,omitempty" xml:"Password,omitempty"`
	UserName     *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateRdsPostgreSQLDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRdsPostgreSQLDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateRdsPostgreSQLDataSourceRequest) SetDatabaseName(v string) *CreateRdsPostgreSQLDataSourceRequest {
	s.DatabaseName = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceRequest) SetDescription(v string) *CreateRdsPostgreSQLDataSourceRequest {
	s.Description = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceRequest) SetInstanceId(v string) *CreateRdsPostgreSQLDataSourceRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceRequest) SetName(v string) *CreateRdsPostgreSQLDataSourceRequest {
	s.Name = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceRequest) SetPassword(v string) *CreateRdsPostgreSQLDataSourceRequest {
	s.Password = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceRequest) SetUserName(v string) *CreateRdsPostgreSQLDataSourceRequest {
	s.UserName = &v
	return s
}

type CreateRdsPostgreSQLDataSourceResponseBody struct {
	Advice      *string                                               `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                               `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *string                                               `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s CreateRdsPostgreSQLDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRdsPostgreSQLDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetAdvice(v string) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.Advice = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetCode(v string) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetCost(v string) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.Cost = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetData(v string) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.Data = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetErrorDetail(v *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetMessage(v string) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetPageNumber(v int32) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetPageSize(v int32) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.PageSize = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetRequestId(v string) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetSuccess(v bool) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.Success = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBody) SetTotalCount(v int64) *CreateRdsPostgreSQLDataSourceResponseBody {
	s.TotalCount = &v
	return s
}

type CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetCode(v string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetLevel(v string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetMessage(v string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetMessageMcmsKey(v string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetProposal(v string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetProposalMcmsKey(v string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetReason(v string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetReasonMcmsKey(v string) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *CreateRdsPostgreSQLDataSourceResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type CreateRdsPostgreSQLDataSourceResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRdsPostgreSQLDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRdsPostgreSQLDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRdsPostgreSQLDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateRdsPostgreSQLDataSourceResponse) SetHeaders(v map[string]*string) *CreateRdsPostgreSQLDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponse) SetStatusCode(v int32) *CreateRdsPostgreSQLDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRdsPostgreSQLDataSourceResponse) SetBody(v *CreateRdsPostgreSQLDataSourceResponseBody) *CreateRdsPostgreSQLDataSourceResponse {
	s.Body = v
	return s
}

type CreateSecurityIpGroupRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the whitelist group.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	// The return result of the request.
	SecurityIps *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
}

func (s CreateSecurityIpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityIpGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSecurityIpGroupRequest) SetInstanceId(v string) *CreateSecurityIpGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSecurityIpGroupRequest) SetSecurityIpGroupName(v string) *CreateSecurityIpGroupRequest {
	s.SecurityIpGroupName = &v
	return s
}

func (s *CreateSecurityIpGroupRequest) SetSecurityIps(v string) *CreateSecurityIpGroupRequest {
	s.SecurityIps = &v
	return s
}

type CreateSecurityIpGroupResponseBody struct {
	// The IP addresses or CIDR blocks in the IP address whitelist group.
	// The return values of SecurityIps are strings that are separated with commas (,).
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The operation that you want to perform.
	// Set the value to **CreateSecurityIpGroup**.
	SecurityIpGroup *CreateSecurityIpGroupResponseBodySecurityIpGroup `json:"SecurityIpGroup,omitempty" xml:"SecurityIpGroup,omitempty" type:"Struct"`
}

func (s CreateSecurityIpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityIpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSecurityIpGroupResponseBody) SetRequestId(v string) *CreateSecurityIpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSecurityIpGroupResponseBody) SetSecurityIpGroup(v *CreateSecurityIpGroupResponseBodySecurityIpGroup) *CreateSecurityIpGroupResponseBody {
	s.SecurityIpGroup = v
	return s
}

type CreateSecurityIpGroupResponseBodySecurityIpGroup struct {
	// ```
	// http(s)://[Endpoint]/?Action=CreateSecurityIpGroup
	// &InstanceId=ob317v4uif****
	// &SecurityIps=192.168.1.1,192.168.0.0.1/8
	// &SecurityIpGroupName=pay_online
	// &Common request parameters
	// ```
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// You can call this operation to create an IP address whitelist group.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	SecurityIps         *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
}

func (s CreateSecurityIpGroupResponseBodySecurityIpGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityIpGroupResponseBodySecurityIpGroup) GoString() string {
	return s.String()
}

func (s *CreateSecurityIpGroupResponseBodySecurityIpGroup) SetInstanceId(v string) *CreateSecurityIpGroupResponseBodySecurityIpGroup {
	s.InstanceId = &v
	return s
}

func (s *CreateSecurityIpGroupResponseBodySecurityIpGroup) SetSecurityIpGroupName(v string) *CreateSecurityIpGroupResponseBodySecurityIpGroup {
	s.SecurityIpGroupName = &v
	return s
}

func (s *CreateSecurityIpGroupResponseBodySecurityIpGroup) SetSecurityIps(v string) *CreateSecurityIpGroupResponseBodySecurityIpGroup {
	s.SecurityIps = &v
	return s
}

type CreateSecurityIpGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSecurityIpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSecurityIpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityIpGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSecurityIpGroupResponse) SetHeaders(v map[string]*string) *CreateSecurityIpGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateSecurityIpGroupResponse) SetStatusCode(v int32) *CreateSecurityIpGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSecurityIpGroupResponse) SetBody(v *CreateSecurityIpGroupResponseBody) *CreateSecurityIpGroupResponse {
	s.Body = v
	return s
}

type CreateTenantRequest struct {
	// The character set.
	// For more information, see DescribeCharset.
	Charset *string `json:"Charset,omitempty" xml:"Charset,omitempty"`
	// The number of CPU cores of the tenant.
	//
	// > <br>The CPU specification of a single tenant cannot exceed that of the corresponding cluster. <br>For example, if the specification of the cluster is 14 CPU cores and 70 GB of memory, the CPU specification of the tenant cannot exceed 14 cores.
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The description of the database.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The size of the log disk allocated to the tenant, in GB.
	LogDisk *int64 `json:"LogDisk,omitempty" xml:"LogDisk,omitempty"`
	// The memory size of the tenant, in GB.
	//
	// > <br>The memory size of a single tenant cannot exceed that of the corresponding cluster. <br>For example, if the specification of the cluster is 14 CPU cores and 70 GB of memory, the memory size of the tenant cannot exceed 70 GB.
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The primary zone of the tenant.
	// It is one of the zones in which the cluster is deployed.
	PrimaryZone *string `json:"PrimaryZone,omitempty" xml:"PrimaryZone,omitempty"`
	// Specifies to create a read-only zone. Separate the names of multiple zones with commas (,).
	// ><notice><br>At present, this parameter is unavailable.></notice>
	ReadOnlyZoneList *string `json:"ReadOnlyZoneList,omitempty" xml:"ReadOnlyZoneList,omitempty"`
	// The tenant mode.
	// Valid values: Oracle and MySQL.
	// For more information, see [DescribeInstanceTenantModes](~~410354~~).
	TenantMode *string `json:"TenantMode,omitempty" xml:"TenantMode,omitempty"`
	// The name of the tenant.
	// It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_).  It cannot be set to sys.
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	// The time zone of the tenant. For more information, see [DescribeTimeZones](https://www.alibabacloud.com/help/en/apsaradb-for-oceanbase/latest/api-oceanbasepro-2019-09-01-describetimezones).
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
	// The number of resource distribution nodes in the tenant.
	// The number is determined by the deployment mode of the cluster. If the cluster is deployed in 2-2-2 mode, the maximum number of resource distribution nodes is 2.
	UnitNum *int32 `json:"UnitNum,omitempty" xml:"UnitNum,omitempty"`
	// The ID of the vSwitch.
	// If no suitable vSwitch is available, create a vSwitch as prompted.
	// For more information, see Use a vSwitch.
	UserVSwitchId *string `json:"UserVSwitchId,omitempty" xml:"UserVSwitchId,omitempty"`
	// The ID of the VPC.
	//  If no suitable VPC is available, create a VPC as prompted.
	// For more information, see "What is a VPC".
	UserVpcId *string `json:"UserVpcId,omitempty" xml:"UserVpcId,omitempty"`
}

func (s CreateTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantRequest) GoString() string {
	return s.String()
}

func (s *CreateTenantRequest) SetCharset(v string) *CreateTenantRequest {
	s.Charset = &v
	return s
}

func (s *CreateTenantRequest) SetCpu(v int32) *CreateTenantRequest {
	s.Cpu = &v
	return s
}

func (s *CreateTenantRequest) SetDescription(v string) *CreateTenantRequest {
	s.Description = &v
	return s
}

func (s *CreateTenantRequest) SetInstanceId(v string) *CreateTenantRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateTenantRequest) SetLogDisk(v int64) *CreateTenantRequest {
	s.LogDisk = &v
	return s
}

func (s *CreateTenantRequest) SetMemory(v int32) *CreateTenantRequest {
	s.Memory = &v
	return s
}

func (s *CreateTenantRequest) SetPrimaryZone(v string) *CreateTenantRequest {
	s.PrimaryZone = &v
	return s
}

func (s *CreateTenantRequest) SetReadOnlyZoneList(v string) *CreateTenantRequest {
	s.ReadOnlyZoneList = &v
	return s
}

func (s *CreateTenantRequest) SetTenantMode(v string) *CreateTenantRequest {
	s.TenantMode = &v
	return s
}

func (s *CreateTenantRequest) SetTenantName(v string) *CreateTenantRequest {
	s.TenantName = &v
	return s
}

func (s *CreateTenantRequest) SetTimeZone(v string) *CreateTenantRequest {
	s.TimeZone = &v
	return s
}

func (s *CreateTenantRequest) SetUnitNum(v int32) *CreateTenantRequest {
	s.UnitNum = &v
	return s
}

func (s *CreateTenantRequest) SetUserVSwitchId(v string) *CreateTenantRequest {
	s.UserVSwitchId = &v
	return s
}

func (s *CreateTenantRequest) SetUserVpcId(v string) *CreateTenantRequest {
	s.UserVpcId = &v
	return s
}

type CreateTenantResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s CreateTenantResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTenantResponseBody) SetRequestId(v string) *CreateTenantResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTenantResponseBody) SetTenantId(v string) *CreateTenantResponseBody {
	s.TenantId = &v
	return s
}

type CreateTenantResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTenantResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantResponse) GoString() string {
	return s.String()
}

func (s *CreateTenantResponse) SetHeaders(v map[string]*string) *CreateTenantResponse {
	s.Headers = v
	return s
}

func (s *CreateTenantResponse) SetStatusCode(v int32) *CreateTenantResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTenantResponse) SetBody(v *CreateTenantResponseBody) *CreateTenantResponse {
	s.Body = v
	return s
}

type CreateTenantReadOnlyConnectionRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TenantId   *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	VSwitchId  *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId      *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId     *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateTenantReadOnlyConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantReadOnlyConnectionRequest) GoString() string {
	return s.String()
}

func (s *CreateTenantReadOnlyConnectionRequest) SetInstanceId(v string) *CreateTenantReadOnlyConnectionRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateTenantReadOnlyConnectionRequest) SetTenantId(v string) *CreateTenantReadOnlyConnectionRequest {
	s.TenantId = &v
	return s
}

func (s *CreateTenantReadOnlyConnectionRequest) SetVSwitchId(v string) *CreateTenantReadOnlyConnectionRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateTenantReadOnlyConnectionRequest) SetVpcId(v string) *CreateTenantReadOnlyConnectionRequest {
	s.VpcId = &v
	return s
}

func (s *CreateTenantReadOnlyConnectionRequest) SetZoneId(v string) *CreateTenantReadOnlyConnectionRequest {
	s.ZoneId = &v
	return s
}

type CreateTenantReadOnlyConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateTenantReadOnlyConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantReadOnlyConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTenantReadOnlyConnectionResponseBody) SetRequestId(v string) *CreateTenantReadOnlyConnectionResponseBody {
	s.RequestId = &v
	return s
}

type CreateTenantReadOnlyConnectionResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTenantReadOnlyConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTenantReadOnlyConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantReadOnlyConnectionResponse) GoString() string {
	return s.String()
}

func (s *CreateTenantReadOnlyConnectionResponse) SetHeaders(v map[string]*string) *CreateTenantReadOnlyConnectionResponse {
	s.Headers = v
	return s
}

func (s *CreateTenantReadOnlyConnectionResponse) SetStatusCode(v int32) *CreateTenantReadOnlyConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTenantReadOnlyConnectionResponse) SetBody(v *CreateTenantReadOnlyConnectionResponseBody) *CreateTenantReadOnlyConnectionResponse {
	s.Body = v
	return s
}

type CreateTenantSecurityIpGroupRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The group name of the whitelist group of IP addresses.
	//
	// It starts with lowercase letters and ends with lowercase letters or numbers. It can only contain lowercase letters, numbers, and underscores, and should be 2~32 characters in length.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	// The list of IP addresses in the whitelist group.
	//
	// It is a JSON array. Each object in the array is an IP address or a CIDR block. You can have up to 40 whitelists.
	SecurityIps *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s CreateTenantSecurityIpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantSecurityIpGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateTenantSecurityIpGroupRequest) SetInstanceId(v string) *CreateTenantSecurityIpGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateTenantSecurityIpGroupRequest) SetSecurityIpGroupName(v string) *CreateTenantSecurityIpGroupRequest {
	s.SecurityIpGroupName = &v
	return s
}

func (s *CreateTenantSecurityIpGroupRequest) SetSecurityIps(v string) *CreateTenantSecurityIpGroupRequest {
	s.SecurityIps = &v
	return s
}

func (s *CreateTenantSecurityIpGroupRequest) SetTenantId(v string) *CreateTenantSecurityIpGroupRequest {
	s.TenantId = &v
	return s
}

type CreateTenantSecurityIpGroupResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information of the whitelist group.
	SecurityIpGroup *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup `json:"SecurityIpGroup,omitempty" xml:"SecurityIpGroup,omitempty" type:"Struct"`
}

func (s CreateTenantSecurityIpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantSecurityIpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTenantSecurityIpGroupResponseBody) SetRequestId(v string) *CreateTenantSecurityIpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTenantSecurityIpGroupResponseBody) SetSecurityIpGroup(v *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup) *CreateTenantSecurityIpGroupResponseBody {
	s.SecurityIpGroup = v
	return s
}

type CreateTenantSecurityIpGroupResponseBodySecurityIpGroup struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the whitelist group.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	// The list of IP addresses in the IP address whitelist group.
	//
	// It is a string separated by commas, and each object is an IP address or CIDR block.
	SecurityIps *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s CreateTenantSecurityIpGroupResponseBodySecurityIpGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantSecurityIpGroupResponseBodySecurityIpGroup) GoString() string {
	return s.String()
}

func (s *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup) SetInstanceId(v string) *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.InstanceId = &v
	return s
}

func (s *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup) SetSecurityIpGroupName(v string) *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.SecurityIpGroupName = &v
	return s
}

func (s *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup) SetSecurityIps(v string) *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.SecurityIps = &v
	return s
}

func (s *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup) SetTenantId(v string) *CreateTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.TenantId = &v
	return s
}

type CreateTenantSecurityIpGroupResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTenantSecurityIpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTenantSecurityIpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantSecurityIpGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateTenantSecurityIpGroupResponse) SetHeaders(v map[string]*string) *CreateTenantSecurityIpGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateTenantSecurityIpGroupResponse) SetStatusCode(v int32) *CreateTenantSecurityIpGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTenantSecurityIpGroupResponse) SetBody(v *CreateTenantSecurityIpGroupResponseBody) *CreateTenantSecurityIpGroupResponse {
	s.Body = v
	return s
}

type CreateTenantUserRequest struct {
	// The description of the database.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 加密方式。
	EncryptionType *string `json:"EncryptionType,omitempty" xml:"EncryptionType,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The role of the user account.  In Oracle mode, this parameter unspecified is left unspecified.  In MySQL mode, the super administrator account has ALL PRIVILEGES, and you can leave this parameter unspecified.  You need to specify the account information for a general user account. By default, the account information is a JSON array that contains the information of the role and the schema (Oracle mode) or database (MySQL mode).  Valid values: ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES. ReadOnly: a role that has only the read-only privilege SELECT. DDL: a role that has DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW. DML: a role that has DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.
	Roles *string `json:"Roles,omitempty" xml:"Roles,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The name of the database account.  You cannot use reserved keywords, such as SYS and root.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The password of the database account.  It must be 10 to 32 characters in length and contain three types of the following characters: uppercase letters, lowercase letters, digits, and special characters. The special characters are ! @ # $ % \ ^ \ & \ * ( ) _ + - =
	UserPassword *string `json:"UserPassword,omitempty" xml:"UserPassword,omitempty"`
	// The type of the database account. Valid values: Admin: the super administrator account. Normal: a general account.
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s CreateTenantUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantUserRequest) GoString() string {
	return s.String()
}

func (s *CreateTenantUserRequest) SetDescription(v string) *CreateTenantUserRequest {
	s.Description = &v
	return s
}

func (s *CreateTenantUserRequest) SetEncryptionType(v string) *CreateTenantUserRequest {
	s.EncryptionType = &v
	return s
}

func (s *CreateTenantUserRequest) SetInstanceId(v string) *CreateTenantUserRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateTenantUserRequest) SetRoles(v string) *CreateTenantUserRequest {
	s.Roles = &v
	return s
}

func (s *CreateTenantUserRequest) SetTenantId(v string) *CreateTenantUserRequest {
	s.TenantId = &v
	return s
}

func (s *CreateTenantUserRequest) SetUserName(v string) *CreateTenantUserRequest {
	s.UserName = &v
	return s
}

func (s *CreateTenantUserRequest) SetUserPassword(v string) *CreateTenantUserRequest {
	s.UserPassword = &v
	return s
}

func (s *CreateTenantUserRequest) SetUserType(v string) *CreateTenantUserRequest {
	s.UserType = &v
	return s
}

type CreateTenantUserResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of database accounts in the tenant.
	TenantUser *CreateTenantUserResponseBodyTenantUser `json:"TenantUser,omitempty" xml:"TenantUser,omitempty" type:"Struct"`
}

func (s CreateTenantUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTenantUserResponseBody) SetRequestId(v string) *CreateTenantUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTenantUserResponseBody) SetTenantUser(v *CreateTenantUserResponseBodyTenantUser) *CreateTenantUserResponseBody {
	s.TenantUser = v
	return s
}

type CreateTenantUserResponseBodyTenantUser struct {
	Roles      []*CreateTenantUserResponseBodyTenantUserRoles `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Repeated"`
	UserName   *string                                        `json:"UserName,omitempty" xml:"UserName,omitempty"`
	UserStatus *string                                        `json:"UserStatus,omitempty" xml:"UserStatus,omitempty"`
	UserType   *string                                        `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s CreateTenantUserResponseBodyTenantUser) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantUserResponseBodyTenantUser) GoString() string {
	return s.String()
}

func (s *CreateTenantUserResponseBodyTenantUser) SetRoles(v []*CreateTenantUserResponseBodyTenantUserRoles) *CreateTenantUserResponseBodyTenantUser {
	s.Roles = v
	return s
}

func (s *CreateTenantUserResponseBodyTenantUser) SetUserName(v string) *CreateTenantUserResponseBodyTenantUser {
	s.UserName = &v
	return s
}

func (s *CreateTenantUserResponseBodyTenantUser) SetUserStatus(v string) *CreateTenantUserResponseBodyTenantUser {
	s.UserStatus = &v
	return s
}

func (s *CreateTenantUserResponseBodyTenantUser) SetUserType(v string) *CreateTenantUserResponseBodyTenantUser {
	s.UserType = &v
	return s
}

type CreateTenantUserResponseBodyTenantUserRoles struct {
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	Role     *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s CreateTenantUserResponseBodyTenantUserRoles) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantUserResponseBodyTenantUserRoles) GoString() string {
	return s.String()
}

func (s *CreateTenantUserResponseBodyTenantUserRoles) SetDatabase(v string) *CreateTenantUserResponseBodyTenantUserRoles {
	s.Database = &v
	return s
}

func (s *CreateTenantUserResponseBodyTenantUserRoles) SetRole(v string) *CreateTenantUserResponseBodyTenantUserRoles {
	s.Role = &v
	return s
}

type CreateTenantUserResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTenantUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTenantUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTenantUserResponse) GoString() string {
	return s.String()
}

func (s *CreateTenantUserResponse) SetHeaders(v map[string]*string) *CreateTenantUserResponse {
	s.Headers = v
	return s
}

func (s *CreateTenantUserResponse) SetStatusCode(v int32) *CreateTenantUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTenantUserResponse) SetBody(v *CreateTenantUserResponseBody) *CreateTenantUserResponse {
	s.Body = v
	return s
}

type DeleteDataSourceRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceRequest) SetId(v string) *DeleteDataSourceRequest {
	s.Id = &v
	return s
}

type DeleteDataSourceResponseBody struct {
	Advice      *string                                  `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                  `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        interface{}                              `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *DeleteDataSourceResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DeleteDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponseBody) SetAdvice(v string) *DeleteDataSourceResponseBody {
	s.Advice = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetCode(v string) *DeleteDataSourceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetCost(v string) *DeleteDataSourceResponseBody {
	s.Cost = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetData(v interface{}) *DeleteDataSourceResponseBody {
	s.Data = v
	return s
}

func (s *DeleteDataSourceResponseBody) SetErrorDetail(v *DeleteDataSourceResponseBodyErrorDetail) *DeleteDataSourceResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DeleteDataSourceResponseBody) SetMessage(v string) *DeleteDataSourceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetPageNumber(v int32) *DeleteDataSourceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetPageSize(v int32) *DeleteDataSourceResponseBody {
	s.PageSize = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetRequestId(v string) *DeleteDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetSuccess(v bool) *DeleteDataSourceResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetTotalCount(v int64) *DeleteDataSourceResponseBody {
	s.TotalCount = &v
	return s
}

type DeleteDataSourceResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DeleteDataSourceResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetCode(v string) *DeleteDataSourceResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *DeleteDataSourceResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetLevel(v string) *DeleteDataSourceResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetMessage(v string) *DeleteDataSourceResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *DeleteDataSourceResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetMessageMcmsKey(v string) *DeleteDataSourceResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetProposal(v string) *DeleteDataSourceResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *DeleteDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetProposalMcmsKey(v string) *DeleteDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetReason(v string) *DeleteDataSourceResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *DeleteDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetReasonMcmsKey(v string) *DeleteDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DeleteDataSourceResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *DeleteDataSourceResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type DeleteDataSourceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponse) SetHeaders(v map[string]*string) *DeleteDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataSourceResponse) SetStatusCode(v int32) *DeleteDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDataSourceResponse) SetBody(v *DeleteDataSourceResponseBody) *DeleteDataSourceResponse {
	s.Body = v
	return s
}

type DeleteDatabasesRequest struct {
	DatabaseNames *string `json:"DatabaseNames,omitempty" xml:"DatabaseNames,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TenantId      *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DeleteDatabasesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabasesRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatabasesRequest) SetDatabaseNames(v string) *DeleteDatabasesRequest {
	s.DatabaseNames = &v
	return s
}

func (s *DeleteDatabasesRequest) SetInstanceId(v string) *DeleteDatabasesRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDatabasesRequest) SetTenantId(v string) *DeleteDatabasesRequest {
	s.TenantId = &v
	return s
}

type DeleteDatabasesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDatabasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabasesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatabasesResponseBody) SetRequestId(v string) *DeleteDatabasesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDatabasesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDatabasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDatabasesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabasesResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatabasesResponse) SetHeaders(v map[string]*string) *DeleteDatabasesResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatabasesResponse) SetStatusCode(v int32) *DeleteDatabasesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDatabasesResponse) SetBody(v *DeleteDatabasesResponseBody) *DeleteDatabasesResponse {
	s.Body = v
	return s
}

type DeleteInstancesRequest struct {
	// The backup retention strategy for cluster deletion. Valid values:
	// - receive_all: retains all backup sets.
	// - delete_all: deletes all backup sets.
	// - receive_last: retains the last backup set.
	//
	// > <br>Default value: delete_all.
	BackupRetainMode *string `json:"BackupRetainMode,omitempty" xml:"BackupRetainMode,omitempty"`
	// Specifies whether to perform only a dry run for the request. Default value: false. Valid values:
	// - true: Only a dry-run request is sent and the instance is not deleted. If the dry run succeeds, DryRunResult=true is returned. If the dry run fails, an error code is returned.
	// - false: The actual request is sent and no dry run is performed. The instance is deleted if the requirements are met. By default, false is returned for the parameter DryRunResult if you set DryRun to false.
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The ID of the cluster to be deleted.
	// The value is a string in the JSON format.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s DeleteInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstancesRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstancesRequest) SetBackupRetainMode(v string) *DeleteInstancesRequest {
	s.BackupRetainMode = &v
	return s
}

func (s *DeleteInstancesRequest) SetDryRun(v bool) *DeleteInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *DeleteInstancesRequest) SetInstanceIds(v string) *DeleteInstancesRequest {
	s.InstanceIds = &v
	return s
}

type DeleteInstancesResponseBody struct {
	// The returned data.
	Data *DeleteInstancesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstancesResponseBody) SetData(v *DeleteInstancesResponseBodyData) *DeleteInstancesResponseBody {
	s.Data = v
	return s
}

func (s *DeleteInstancesResponseBody) SetRequestId(v string) *DeleteInstancesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteInstancesResponseBodyData struct {
	// The result of the dry-run request.
	// - If the DryRun parameter is set to true and the dry run succeeds, the DryRunResult parameter returns true. Otherwise, an error code is returned.
	// - If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.
	DryRunResult *bool `json:"DryRunResult,omitempty" xml:"DryRunResult,omitempty"`
}

func (s DeleteInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteInstancesResponseBodyData) SetDryRunResult(v bool) *DeleteInstancesResponseBodyData {
	s.DryRunResult = &v
	return s
}

type DeleteInstancesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstancesResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstancesResponse) SetHeaders(v map[string]*string) *DeleteInstancesResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstancesResponse) SetStatusCode(v int32) *DeleteInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInstancesResponse) SetBody(v *DeleteInstancesResponseBody) *DeleteInstancesResponse {
	s.Body = v
	return s
}

type DeleteOmsOpenAPIProjectRequest struct {
	// The total count, which takes effect in a pagination query.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Contact the administrator.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The error level. Valid values: CRITICAL, ERROR, and WARN.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Indicates whether the call is successful.
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s DeleteOmsOpenAPIProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOmsOpenAPIProjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteOmsOpenAPIProjectRequest) SetPageNumber(v int32) *DeleteOmsOpenAPIProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectRequest) SetPageSize(v int32) *DeleteOmsOpenAPIProjectRequest {
	s.PageSize = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectRequest) SetProjectId(v string) *DeleteOmsOpenAPIProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectRequest) SetWorkerGradeId(v string) *DeleteOmsOpenAPIProjectRequest {
	s.WorkerGradeId = &v
	return s
}

type DeleteOmsOpenAPIProjectResponseBody struct {
	// You can call this operation to delete a data synchronization project.
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// Indicates whether the project has been deleted.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost *string `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	// The suggestions (new).
	ErrorDetail *DeleteOmsOpenAPIProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	// A system error occurred.
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The page number, which takes effect in a pagination query.
	Success    *bool  `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DeleteOmsOpenAPIProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteOmsOpenAPIProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetAdvice(v string) *DeleteOmsOpenAPIProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetCode(v string) *DeleteOmsOpenAPIProjectResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetCost(v string) *DeleteOmsOpenAPIProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetData(v bool) *DeleteOmsOpenAPIProjectResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetErrorDetail(v *DeleteOmsOpenAPIProjectResponseBodyErrorDetail) *DeleteOmsOpenAPIProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetMessage(v string) *DeleteOmsOpenAPIProjectResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetPageNumber(v int32) *DeleteOmsOpenAPIProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetPageSize(v int32) *DeleteOmsOpenAPIProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetRequestId(v string) *DeleteOmsOpenAPIProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetSuccess(v bool) *DeleteOmsOpenAPIProjectResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBody) SetTotalCount(v int64) *DeleteOmsOpenAPIProjectResponseBody {
	s.TotalCount = &v
	return s
}

type DeleteOmsOpenAPIProjectResponseBodyErrorDetail struct {
	// The operation that you want to perform. Set the value to **DeleteOmsOpenAPIProject**.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error description (old).
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The error code (new).
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number, which takes effect in a pagination query.
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s DeleteOmsOpenAPIProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DeleteOmsOpenAPIProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DeleteOmsOpenAPIProjectResponseBodyErrorDetail) SetCode(v string) *DeleteOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBodyErrorDetail) SetLevel(v string) *DeleteOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBodyErrorDetail) SetMessage(v string) *DeleteOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponseBodyErrorDetail) SetProposal(v string) *DeleteOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type DeleteOmsOpenAPIProjectResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteOmsOpenAPIProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteOmsOpenAPIProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOmsOpenAPIProjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteOmsOpenAPIProjectResponse) SetHeaders(v map[string]*string) *DeleteOmsOpenAPIProjectResponse {
	s.Headers = v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponse) SetStatusCode(v int32) *DeleteOmsOpenAPIProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteOmsOpenAPIProjectResponse) SetBody(v *DeleteOmsOpenAPIProjectResponseBody) *DeleteOmsOpenAPIProjectResponse {
	s.Body = v
	return s
}

type DeleteProjectRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteProjectRequest) SetId(v string) *DeleteProjectRequest {
	s.Id = &v
	return s
}

type DeleteProjectResponseBody struct {
	Advice      *string                               `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                               `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        interface{}                           `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *DeleteProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DeleteProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProjectResponseBody) SetAdvice(v string) *DeleteProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *DeleteProjectResponseBody) SetCode(v string) *DeleteProjectResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteProjectResponseBody) SetCost(v string) *DeleteProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *DeleteProjectResponseBody) SetData(v interface{}) *DeleteProjectResponseBody {
	s.Data = v
	return s
}

func (s *DeleteProjectResponseBody) SetErrorDetail(v *DeleteProjectResponseBodyErrorDetail) *DeleteProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DeleteProjectResponseBody) SetMessage(v string) *DeleteProjectResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteProjectResponseBody) SetPageNumber(v int32) *DeleteProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DeleteProjectResponseBody) SetPageSize(v int32) *DeleteProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *DeleteProjectResponseBody) SetRequestId(v string) *DeleteProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteProjectResponseBody) SetSuccess(v bool) *DeleteProjectResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteProjectResponseBody) SetTotalCount(v int64) *DeleteProjectResponseBody {
	s.TotalCount = &v
	return s
}

type DeleteProjectResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DeleteProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DeleteProjectResponseBodyErrorDetail) SetCode(v string) *DeleteProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *DeleteProjectResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetLevel(v string) *DeleteProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetMessage(v string) *DeleteProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *DeleteProjectResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetMessageMcmsKey(v string) *DeleteProjectResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetProposal(v string) *DeleteProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *DeleteProjectResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetProposalMcmsKey(v string) *DeleteProjectResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetReason(v string) *DeleteProjectResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *DeleteProjectResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetReasonMcmsKey(v string) *DeleteProjectResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DeleteProjectResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *DeleteProjectResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type DeleteProjectResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteProjectResponse) SetHeaders(v map[string]*string) *DeleteProjectResponse {
	s.Headers = v
	return s
}

func (s *DeleteProjectResponse) SetStatusCode(v int32) *DeleteProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteProjectResponse) SetBody(v *DeleteProjectResponseBody) *DeleteProjectResponse {
	s.Body = v
	return s
}

type DeleteSecurityIpGroupRequest struct {
	// The name of the IP address whitelist group.
	// It must be 2 to 32 characters in length, start with a lowercase letter, end with a lowercase letter or digit, and contain only lowercase letters, digits, and underscores (_).
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The information of the deleted IP whitelist group.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
}

func (s DeleteSecurityIpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityIpGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecurityIpGroupRequest) SetInstanceId(v string) *DeleteSecurityIpGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSecurityIpGroupRequest) SetSecurityIpGroupName(v string) *DeleteSecurityIpGroupRequest {
	s.SecurityIpGroupName = &v
	return s
}

type DeleteSecurityIpGroupResponseBody struct {
	// Example 1
	RequestId       *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityIpGroup *DeleteSecurityIpGroupResponseBodySecurityIpGroup `json:"SecurityIpGroup,omitempty" xml:"SecurityIpGroup,omitempty" type:"Struct"`
}

func (s DeleteSecurityIpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityIpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSecurityIpGroupResponseBody) SetRequestId(v string) *DeleteSecurityIpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSecurityIpGroupResponseBody) SetSecurityIpGroup(v *DeleteSecurityIpGroupResponseBodySecurityIpGroup) *DeleteSecurityIpGroupResponseBody {
	s.SecurityIpGroup = v
	return s
}

type DeleteSecurityIpGroupResponseBodySecurityIpGroup struct {
	InstanceId          *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
}

func (s DeleteSecurityIpGroupResponseBodySecurityIpGroup) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityIpGroupResponseBodySecurityIpGroup) GoString() string {
	return s.String()
}

func (s *DeleteSecurityIpGroupResponseBodySecurityIpGroup) SetInstanceId(v string) *DeleteSecurityIpGroupResponseBodySecurityIpGroup {
	s.InstanceId = &v
	return s
}

func (s *DeleteSecurityIpGroupResponseBodySecurityIpGroup) SetSecurityIpGroupName(v string) *DeleteSecurityIpGroupResponseBodySecurityIpGroup {
	s.SecurityIpGroupName = &v
	return s
}

type DeleteSecurityIpGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSecurityIpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSecurityIpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityIpGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecurityIpGroupResponse) SetHeaders(v map[string]*string) *DeleteSecurityIpGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteSecurityIpGroupResponse) SetStatusCode(v int32) *DeleteSecurityIpGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSecurityIpGroupResponse) SetBody(v *DeleteSecurityIpGroupResponseBody) *DeleteSecurityIpGroupResponse {
	s.Body = v
	return s
}

type DeleteTenantSecurityIpGroupRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The group name of the whitelist group of IP addresses.
	//
	// It starts with lowercase letters and ends with lowercase letters or numbers. It can only contain lowercase letters, numbers, and underscores, and should be 2~32 characters in length.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DeleteTenantSecurityIpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantSecurityIpGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteTenantSecurityIpGroupRequest) SetInstanceId(v string) *DeleteTenantSecurityIpGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteTenantSecurityIpGroupRequest) SetSecurityIpGroupName(v string) *DeleteTenantSecurityIpGroupRequest {
	s.SecurityIpGroupName = &v
	return s
}

func (s *DeleteTenantSecurityIpGroupRequest) SetTenantId(v string) *DeleteTenantSecurityIpGroupRequest {
	s.TenantId = &v
	return s
}

type DeleteTenantSecurityIpGroupResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information of the whitelist group.
	SecurityIpGroup *DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup `json:"SecurityIpGroup,omitempty" xml:"SecurityIpGroup,omitempty" type:"Struct"`
}

func (s DeleteTenantSecurityIpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantSecurityIpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTenantSecurityIpGroupResponseBody) SetRequestId(v string) *DeleteTenantSecurityIpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTenantSecurityIpGroupResponseBody) SetSecurityIpGroup(v *DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup) *DeleteTenantSecurityIpGroupResponseBody {
	s.SecurityIpGroup = v
	return s
}

type DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the whitelist group.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup) GoString() string {
	return s.String()
}

func (s *DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup) SetInstanceId(v string) *DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.InstanceId = &v
	return s
}

func (s *DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup) SetSecurityIpGroupName(v string) *DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.SecurityIpGroupName = &v
	return s
}

func (s *DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup) SetTenantId(v string) *DeleteTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.TenantId = &v
	return s
}

type DeleteTenantSecurityIpGroupResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTenantSecurityIpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTenantSecurityIpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantSecurityIpGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteTenantSecurityIpGroupResponse) SetHeaders(v map[string]*string) *DeleteTenantSecurityIpGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteTenantSecurityIpGroupResponse) SetStatusCode(v int32) *DeleteTenantSecurityIpGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTenantSecurityIpGroupResponse) SetBody(v *DeleteTenantSecurityIpGroupResponseBody) *DeleteTenantSecurityIpGroupResponse {
	s.Body = v
	return s
}

type DeleteTenantUsersRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// A list of usernames.
	Users *string `json:"Users,omitempty" xml:"Users,omitempty"`
}

func (s DeleteTenantUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantUsersRequest) GoString() string {
	return s.String()
}

func (s *DeleteTenantUsersRequest) SetInstanceId(v string) *DeleteTenantUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteTenantUsersRequest) SetTenantId(v string) *DeleteTenantUsersRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteTenantUsersRequest) SetUsers(v string) *DeleteTenantUsersRequest {
	s.Users = &v
	return s
}

type DeleteTenantUsersResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTenantUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantUsersResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTenantUsersResponseBody) SetRequestId(v string) *DeleteTenantUsersResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTenantUsersResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTenantUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTenantUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantUsersResponse) GoString() string {
	return s.String()
}

func (s *DeleteTenantUsersResponse) SetHeaders(v map[string]*string) *DeleteTenantUsersResponse {
	s.Headers = v
	return s
}

func (s *DeleteTenantUsersResponse) SetStatusCode(v int32) *DeleteTenantUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTenantUsersResponse) SetBody(v *DeleteTenantUsersResponseBody) *DeleteTenantUsersResponse {
	s.Body = v
	return s
}

type DeleteTenantsRequest struct {
	// You can call this operation to delete one or more tenants from an OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// ```
	// http(s)://[Endpoint]/?Action=DeleteTenants
	// &TenantIds=["ob2mr3oae0****", "ob2mr3oae1****"]
	// &InstanceId=ob317v4uif****
	// &Common request parameters
	// ```
	TenantIds *string `json:"TenantIds,omitempty" xml:"TenantIds,omitempty"`
}

func (s DeleteTenantsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantsRequest) GoString() string {
	return s.String()
}

func (s *DeleteTenantsRequest) SetInstanceId(v string) *DeleteTenantsRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteTenantsRequest) SetTenantIds(v string) *DeleteTenantsRequest {
	s.TenantIds = &v
	return s
}

type DeleteTenantsResponseBody struct {
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TenantIds []*string `json:"TenantIds,omitempty" xml:"TenantIds,omitempty" type:"Repeated"`
}

func (s DeleteTenantsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTenantsResponseBody) SetRequestId(v string) *DeleteTenantsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTenantsResponseBody) SetTenantIds(v []*string) *DeleteTenantsResponseBody {
	s.TenantIds = v
	return s
}

type DeleteTenantsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTenantsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTenantsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTenantsResponse) GoString() string {
	return s.String()
}

func (s *DeleteTenantsResponse) SetHeaders(v map[string]*string) *DeleteTenantsResponse {
	s.Headers = v
	return s
}

func (s *DeleteTenantsResponse) SetStatusCode(v int32) *DeleteTenantsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTenantsResponse) SetBody(v *DeleteTenantsResponseBody) *DeleteTenantsResponse {
	s.Body = v
	return s
}

type DescribeAnomalySQLListRequest struct {
	// The language of the returned data.
	// Default value: CN for a China site and EN for an International site.
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end time of the time range for querying suspicious SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter condition.
	// > <br> - All fields in OceanBase Database support filtering. <br> - You can write the key-value pair of a parameter in a JSON string in the JSON format to filter the parameter.
	FilterCondition map[string]interface{} `json:"FilterCondition,omitempty" xml:"FilterCondition,omitempty"`
	InstanceId      *string                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IP address of the node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The number of the page to return.
	// - Start value: 1
	// - Default value: 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of rows to return on each page.
	// - Maximum value: 100
	// - Default value: 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// SQLID.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The search keyword.
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// The search parameter.
	SearchParameter *string `json:"SearchParameter,omitempty" xml:"SearchParameter,omitempty"`
	// The search rule.
	// Valid values: "=", ">", ">=", "<", and "<="
	SearchRule *string `json:"SearchRule,omitempty" xml:"SearchRule,omitempty"`
	// The search value.
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	// The sorted column.
	SortColumn *string `json:"SortColumn,omitempty" xml:"SortColumn,omitempty"`
	// The sorting rule.
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// The start time of the time range for querying suspicious SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeAnomalySQLListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnomalySQLListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAnomalySQLListRequest) SetAcceptLanguage(v string) *DescribeAnomalySQLListRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetDbName(v string) *DescribeAnomalySQLListRequest {
	s.DbName = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetEndTime(v string) *DescribeAnomalySQLListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetFilterCondition(v map[string]interface{}) *DescribeAnomalySQLListRequest {
	s.FilterCondition = v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetInstanceId(v string) *DescribeAnomalySQLListRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetNodeIp(v string) *DescribeAnomalySQLListRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetPageNumber(v int32) *DescribeAnomalySQLListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetPageSize(v int32) *DescribeAnomalySQLListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetSQLId(v string) *DescribeAnomalySQLListRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetSearchKeyWord(v string) *DescribeAnomalySQLListRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetSearchParameter(v string) *DescribeAnomalySQLListRequest {
	s.SearchParameter = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetSearchRule(v string) *DescribeAnomalySQLListRequest {
	s.SearchRule = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetSearchValue(v string) *DescribeAnomalySQLListRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetSortColumn(v string) *DescribeAnomalySQLListRequest {
	s.SortColumn = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetSortOrder(v string) *DescribeAnomalySQLListRequest {
	s.SortOrder = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetStartTime(v string) *DescribeAnomalySQLListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeAnomalySQLListRequest) SetTenantId(v string) *DescribeAnomalySQLListRequest {
	s.TenantId = &v
	return s
}

type DescribeAnomalySQLListShrinkRequest struct {
	// The language of the returned data.
	// Default value: CN for a China site and EN for an International site.
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end time of the time range for querying suspicious SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter condition.
	// > <br> - All fields in OceanBase Database support filtering. <br> - You can write the key-value pair of a parameter in a JSON string in the JSON format to filter the parameter.
	FilterConditionShrink *string `json:"FilterCondition,omitempty" xml:"FilterCondition,omitempty"`
	InstanceId            *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IP address of the node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The number of the page to return.
	// - Start value: 1
	// - Default value: 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of rows to return on each page.
	// - Maximum value: 100
	// - Default value: 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// SQLID.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The search keyword.
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// The search parameter.
	SearchParameter *string `json:"SearchParameter,omitempty" xml:"SearchParameter,omitempty"`
	// The search rule.
	// Valid values: "=", ">", ">=", "<", and "<="
	SearchRule *string `json:"SearchRule,omitempty" xml:"SearchRule,omitempty"`
	// The search value.
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	// The sorted column.
	SortColumn *string `json:"SortColumn,omitempty" xml:"SortColumn,omitempty"`
	// The sorting rule.
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// The start time of the time range for querying suspicious SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeAnomalySQLListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnomalySQLListShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeAnomalySQLListShrinkRequest) SetAcceptLanguage(v string) *DescribeAnomalySQLListShrinkRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetDbName(v string) *DescribeAnomalySQLListShrinkRequest {
	s.DbName = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetEndTime(v string) *DescribeAnomalySQLListShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetFilterConditionShrink(v string) *DescribeAnomalySQLListShrinkRequest {
	s.FilterConditionShrink = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetInstanceId(v string) *DescribeAnomalySQLListShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetNodeIp(v string) *DescribeAnomalySQLListShrinkRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetPageNumber(v int32) *DescribeAnomalySQLListShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetPageSize(v int32) *DescribeAnomalySQLListShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetSQLId(v string) *DescribeAnomalySQLListShrinkRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetSearchKeyWord(v string) *DescribeAnomalySQLListShrinkRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetSearchParameter(v string) *DescribeAnomalySQLListShrinkRequest {
	s.SearchParameter = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetSearchRule(v string) *DescribeAnomalySQLListShrinkRequest {
	s.SearchRule = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetSearchValue(v string) *DescribeAnomalySQLListShrinkRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetSortColumn(v string) *DescribeAnomalySQLListShrinkRequest {
	s.SortColumn = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetSortOrder(v string) *DescribeAnomalySQLListShrinkRequest {
	s.SortOrder = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetStartTime(v string) *DescribeAnomalySQLListShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeAnomalySQLListShrinkRequest) SetTenantId(v string) *DescribeAnomalySQLListShrinkRequest {
	s.TenantId = &v
	return s
}

type DescribeAnomalySQLListResponseBody struct {
	// The list of suspicious SQL statements.
	AnomalySQLList []*DescribeAnomalySQLListResponseBodyAnomalySQLList `json:"AnomalySQLList,omitempty" xml:"AnomalySQLList,omitempty" type:"Repeated"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total count.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAnomalySQLListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnomalySQLListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAnomalySQLListResponseBody) SetAnomalySQLList(v []*DescribeAnomalySQLListResponseBodyAnomalySQLList) *DescribeAnomalySQLListResponseBody {
	s.AnomalySQLList = v
	return s
}

func (s *DescribeAnomalySQLListResponseBody) SetRequestId(v string) *DescribeAnomalySQLListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBody) SetTotalCount(v int64) *DescribeAnomalySQLListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAnomalySQLListResponseBodyAnomalySQLList struct {
	// The average CPU time, in ms.
	CpuTime *float32 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The diagnosis information.
	Diagnosis *string `json:"Diagnosis,omitempty" xml:"Diagnosis,omitempty"`
	// The diagnostic rule.
	DiagnosisRule *string `json:"DiagnosisRule,omitempty" xml:"DiagnosisRule,omitempty"`
	// The number of executions.
	Executions *int64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// The sequence number of the returned SQL statement.
	Key *int64 `json:"Key,omitempty" xml:"Key,omitempty"`
	// The request time, in ms.
	RequestTime *float32 `json:"RequestTime,omitempty" xml:"RequestTime,omitempty"`
	// The request time in UTC +0.
	RequestTimeUTCString *string `json:"RequestTimeUTCString,omitempty" xml:"RequestTimeUTCString,omitempty"`
	// SQLID.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The SQL text.
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// The suggestions.
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	// The username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeAnomalySQLListResponseBodyAnomalySQLList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnomalySQLListResponseBodyAnomalySQLList) GoString() string {
	return s.String()
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetCpuTime(v float32) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.CpuTime = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetDbName(v string) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.DbName = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetDiagnosis(v string) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.Diagnosis = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetDiagnosisRule(v string) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.DiagnosisRule = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetExecutions(v int64) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.Executions = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetKey(v int64) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.Key = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetRequestTime(v float32) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.RequestTime = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetRequestTimeUTCString(v string) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.RequestTimeUTCString = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetSQLId(v string) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.SQLId = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetSQLText(v string) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.SQLText = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetSuggestion(v string) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.Suggestion = &v
	return s
}

func (s *DescribeAnomalySQLListResponseBodyAnomalySQLList) SetUserName(v string) *DescribeAnomalySQLListResponseBodyAnomalySQLList {
	s.UserName = &v
	return s
}

type DescribeAnomalySQLListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAnomalySQLListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAnomalySQLListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnomalySQLListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAnomalySQLListResponse) SetHeaders(v map[string]*string) *DescribeAnomalySQLListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAnomalySQLListResponse) SetStatusCode(v int32) *DescribeAnomalySQLListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAnomalySQLListResponse) SetBody(v *DescribeAnomalySQLListResponseBody) *DescribeAnomalySQLListResponse {
	s.Body = v
	return s
}

type DescribeAvailableCpuResourceRequest struct {
	// The CPU resources available.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// ```
	// http(s)://[Endpoint]/?Action=DescribeAvailableCpuResource
	// &InstanceId=ob317v4uif****
	// &TenantId=ob2mr3oae0****
	// &ModifyType=update
	// &Common request parameters
	// ```
	ModifyType *string `json:"ModifyType,omitempty" xml:"ModifyType,omitempty"`
	// The operation that you want to perform.
	// Set the value to **DescribeAvailableCpuResource**.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeAvailableCpuResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCpuResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCpuResourceRequest) SetInstanceId(v string) *DescribeAvailableCpuResourceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAvailableCpuResourceRequest) SetModifyType(v string) *DescribeAvailableCpuResourceRequest {
	s.ModifyType = &v
	return s
}

func (s *DescribeAvailableCpuResourceRequest) SetTenantId(v string) *DescribeAvailableCpuResourceRequest {
	s.TenantId = &v
	return s
}

type DescribeAvailableCpuResourceResponseBody struct {
	Data      []*DescribeAvailableCpuResourceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAvailableCpuResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCpuResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCpuResourceResponseBody) SetData(v []*DescribeAvailableCpuResourceResponseBodyData) *DescribeAvailableCpuResourceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAvailableCpuResourceResponseBody) SetRequestId(v string) *DescribeAvailableCpuResourceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAvailableCpuResourceResponseBodyData struct {
	Comment    *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	MaxCpu     *int64  `json:"MaxCpu,omitempty" xml:"MaxCpu,omitempty"`
	MinCpu     *int64  `json:"MinCpu,omitempty" xml:"MinCpu,omitempty"`
	ReviewCode *string `json:"ReviewCode,omitempty" xml:"ReviewCode,omitempty"`
	UnitNum    *int64  `json:"UnitNum,omitempty" xml:"UnitNum,omitempty"`
}

func (s DescribeAvailableCpuResourceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCpuResourceResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCpuResourceResponseBodyData) SetComment(v string) *DescribeAvailableCpuResourceResponseBodyData {
	s.Comment = &v
	return s
}

func (s *DescribeAvailableCpuResourceResponseBodyData) SetMaxCpu(v int64) *DescribeAvailableCpuResourceResponseBodyData {
	s.MaxCpu = &v
	return s
}

func (s *DescribeAvailableCpuResourceResponseBodyData) SetMinCpu(v int64) *DescribeAvailableCpuResourceResponseBodyData {
	s.MinCpu = &v
	return s
}

func (s *DescribeAvailableCpuResourceResponseBodyData) SetReviewCode(v string) *DescribeAvailableCpuResourceResponseBodyData {
	s.ReviewCode = &v
	return s
}

func (s *DescribeAvailableCpuResourceResponseBodyData) SetUnitNum(v int64) *DescribeAvailableCpuResourceResponseBodyData {
	s.UnitNum = &v
	return s
}

type DescribeAvailableCpuResourceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAvailableCpuResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAvailableCpuResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCpuResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCpuResourceResponse) SetHeaders(v map[string]*string) *DescribeAvailableCpuResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableCpuResourceResponse) SetStatusCode(v int32) *DescribeAvailableCpuResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableCpuResourceResponse) SetBody(v *DescribeAvailableCpuResourceResponseBody) *DescribeAvailableCpuResourceResponse {
	s.Body = v
	return s
}

type DescribeAvailableMemResourceRequest struct {
	// The number of CPU cores.
	CpuNum *int64 `json:"CpuNum,omitempty" xml:"CpuNum,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The number of resource distribution nodes in the tenant.
	// The number is determined by the deployment mode of the cluster. If the cluster is deployed in 2-2-2 mode, the maximum number of resource distribution nodes is 2.
	UnitNum *int64 `json:"UnitNum,omitempty" xml:"UnitNum,omitempty"`
}

func (s DescribeAvailableMemResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableMemResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableMemResourceRequest) SetCpuNum(v int64) *DescribeAvailableMemResourceRequest {
	s.CpuNum = &v
	return s
}

func (s *DescribeAvailableMemResourceRequest) SetInstanceId(v string) *DescribeAvailableMemResourceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAvailableMemResourceRequest) SetTenantId(v string) *DescribeAvailableMemResourceRequest {
	s.TenantId = &v
	return s
}

func (s *DescribeAvailableMemResourceRequest) SetUnitNum(v int64) *DescribeAvailableMemResourceRequest {
	s.UnitNum = &v
	return s
}

type DescribeAvailableMemResourceResponseBody struct {
	// The available memory size.
	Data *DescribeAvailableMemResourceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAvailableMemResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableMemResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableMemResourceResponseBody) SetData(v *DescribeAvailableMemResourceResponseBodyData) *DescribeAvailableMemResourceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAvailableMemResourceResponseBody) SetRequestId(v string) *DescribeAvailableMemResourceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAvailableMemResourceResponseBodyData struct {
	// The maximum memory size for each resource unit, in GB.
	MaxMem *int64 `json:"MaxMem,omitempty" xml:"MaxMem,omitempty"`
	// The minimum memory size required for each resource unit, in GB.
	MinMem *int64 `json:"MinMem,omitempty" xml:"MinMem,omitempty"`
	// The maximum allowed memory usage, in GB.
	SafeMem *string `json:"SafeMem,omitempty" xml:"SafeMem,omitempty"`
	// The number of resource units in the tenant.
	UsedMem *int64 `json:"UsedMem,omitempty" xml:"UsedMem,omitempty"`
}

func (s DescribeAvailableMemResourceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableMemResourceResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAvailableMemResourceResponseBodyData) SetMaxMem(v int64) *DescribeAvailableMemResourceResponseBodyData {
	s.MaxMem = &v
	return s
}

func (s *DescribeAvailableMemResourceResponseBodyData) SetMinMem(v int64) *DescribeAvailableMemResourceResponseBodyData {
	s.MinMem = &v
	return s
}

func (s *DescribeAvailableMemResourceResponseBodyData) SetSafeMem(v string) *DescribeAvailableMemResourceResponseBodyData {
	s.SafeMem = &v
	return s
}

func (s *DescribeAvailableMemResourceResponseBodyData) SetUsedMem(v int64) *DescribeAvailableMemResourceResponseBodyData {
	s.UsedMem = &v
	return s
}

type DescribeAvailableMemResourceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAvailableMemResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAvailableMemResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableMemResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableMemResourceResponse) SetHeaders(v map[string]*string) *DescribeAvailableMemResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableMemResourceResponse) SetStatusCode(v int32) *DescribeAvailableMemResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableMemResourceResponse) SetBody(v *DescribeAvailableMemResourceResponseBody) *DescribeAvailableMemResourceResponse {
	s.Body = v
	return s
}

type DescribeAvailableSpecRequest struct {
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Spec        *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	UpgradeType *string `json:"UpgradeType,omitempty" xml:"UpgradeType,omitempty"`
}

func (s DescribeAvailableSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableSpecRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableSpecRequest) SetInstanceId(v string) *DescribeAvailableSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAvailableSpecRequest) SetSpec(v string) *DescribeAvailableSpecRequest {
	s.Spec = &v
	return s
}

func (s *DescribeAvailableSpecRequest) SetUpgradeType(v string) *DescribeAvailableSpecRequest {
	s.UpgradeType = &v
	return s
}

type DescribeAvailableSpecResponseBody struct {
	Data      *DescribeAvailableSpecResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAvailableSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableSpecResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableSpecResponseBody) SetData(v *DescribeAvailableSpecResponseBodyData) *DescribeAvailableSpecResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAvailableSpecResponseBody) SetRequestId(v string) *DescribeAvailableSpecResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAvailableSpecResponseBodyData struct {
	AvailableSpecifications []*DescribeAvailableSpecResponseBodyDataAvailableSpecifications `json:"AvailableSpecifications,omitempty" xml:"AvailableSpecifications,omitempty" type:"Repeated"`
}

func (s DescribeAvailableSpecResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableSpecResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAvailableSpecResponseBodyData) SetAvailableSpecifications(v []*DescribeAvailableSpecResponseBodyDataAvailableSpecifications) *DescribeAvailableSpecResponseBodyData {
	s.AvailableSpecifications = v
	return s
}

type DescribeAvailableSpecResponseBodyDataAvailableSpecifications struct {
	DiskSizeRange    *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange    `json:"DiskSizeRange,omitempty" xml:"DiskSizeRange,omitempty" type:"Struct"`
	DiskTypes        []*string                                                                     `json:"DiskTypes,omitempty" xml:"DiskTypes,omitempty" type:"Repeated"`
	InstanceClass    *string                                                                       `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	LogDiskSizeRange *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange `json:"LogDiskSizeRange,omitempty" xml:"LogDiskSizeRange,omitempty" type:"Struct"`
	NodeNum          []*int32                                                                      `json:"NodeNum,omitempty" xml:"NodeNum,omitempty" type:"Repeated"`
	Spec             *string                                                                       `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s DescribeAvailableSpecResponseBodyDataAvailableSpecifications) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableSpecResponseBodyDataAvailableSpecifications) GoString() string {
	return s.String()
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecifications) SetDiskSizeRange(v *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange) *DescribeAvailableSpecResponseBodyDataAvailableSpecifications {
	s.DiskSizeRange = v
	return s
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecifications) SetDiskTypes(v []*string) *DescribeAvailableSpecResponseBodyDataAvailableSpecifications {
	s.DiskTypes = v
	return s
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecifications) SetInstanceClass(v string) *DescribeAvailableSpecResponseBodyDataAvailableSpecifications {
	s.InstanceClass = &v
	return s
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecifications) SetLogDiskSizeRange(v *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange) *DescribeAvailableSpecResponseBodyDataAvailableSpecifications {
	s.LogDiskSizeRange = v
	return s
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecifications) SetNodeNum(v []*int32) *DescribeAvailableSpecResponseBodyDataAvailableSpecifications {
	s.NodeNum = v
	return s
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecifications) SetSpec(v string) *DescribeAvailableSpecResponseBodyDataAvailableSpecifications {
	s.Spec = &v
	return s
}

type DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange struct {
	Max  *int64 `json:"Max,omitempty" xml:"Max,omitempty"`
	Min  *int64 `json:"Min,omitempty" xml:"Min,omitempty"`
	Step *int64 `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange) GoString() string {
	return s.String()
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange) SetMax(v int64) *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange {
	s.Max = &v
	return s
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange) SetMin(v int64) *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange {
	s.Min = &v
	return s
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange) SetStep(v int64) *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsDiskSizeRange {
	s.Step = &v
	return s
}

type DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange struct {
	Max  *int64 `json:"Max,omitempty" xml:"Max,omitempty"`
	Min  *int64 `json:"Min,omitempty" xml:"Min,omitempty"`
	Step *int64 `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange) GoString() string {
	return s.String()
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange) SetMax(v int64) *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange {
	s.Max = &v
	return s
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange) SetMin(v int64) *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange {
	s.Min = &v
	return s
}

func (s *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange) SetStep(v int64) *DescribeAvailableSpecResponseBodyDataAvailableSpecificationsLogDiskSizeRange {
	s.Step = &v
	return s
}

type DescribeAvailableSpecResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAvailableSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAvailableSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableSpecResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableSpecResponse) SetHeaders(v map[string]*string) *DescribeAvailableSpecResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableSpecResponse) SetStatusCode(v int32) *DescribeAvailableSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableSpecResponse) SetBody(v *DescribeAvailableSpecResponseBody) *DescribeAvailableSpecResponse {
	s.Body = v
	return s
}

type DescribeAvailableZoneRequest struct {
	DeployType   *string `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	ObVersion    *string `json:"ObVersion,omitempty" xml:"ObVersion,omitempty"`
	Series       *string `json:"Series,omitempty" xml:"Series,omitempty"`
	Spec         *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s DescribeAvailableZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZoneRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZoneRequest) SetDeployType(v string) *DescribeAvailableZoneRequest {
	s.DeployType = &v
	return s
}

func (s *DescribeAvailableZoneRequest) SetInstanceType(v string) *DescribeAvailableZoneRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeAvailableZoneRequest) SetObVersion(v string) *DescribeAvailableZoneRequest {
	s.ObVersion = &v
	return s
}

func (s *DescribeAvailableZoneRequest) SetSeries(v string) *DescribeAvailableZoneRequest {
	s.Series = &v
	return s
}

func (s *DescribeAvailableZoneRequest) SetSpec(v string) *DescribeAvailableZoneRequest {
	s.Spec = &v
	return s
}

type DescribeAvailableZoneResponseBody struct {
	Data      *DescribeAvailableZoneResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAvailableZoneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZoneResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZoneResponseBody) SetData(v *DescribeAvailableZoneResponseBodyData) *DescribeAvailableZoneResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAvailableZoneResponseBody) SetRequestId(v string) *DescribeAvailableZoneResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAvailableZoneResponseBodyData struct {
	AvailableZones []*DescribeAvailableZoneResponseBodyDataAvailableZones `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" type:"Repeated"`
}

func (s DescribeAvailableZoneResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZoneResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZoneResponseBodyData) SetAvailableZones(v []*DescribeAvailableZoneResponseBodyDataAvailableZones) *DescribeAvailableZoneResponseBodyData {
	s.AvailableZones = v
	return s
}

type DescribeAvailableZoneResponseBodyDataAvailableZones struct {
	Channel               *string                                                                     `json:"Channel,omitempty" xml:"Channel,omitempty"`
	DeployType            *string                                                                     `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	InstanceType          *string                                                                     `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Region                *string                                                                     `json:"Region,omitempty" xml:"Region,omitempty"`
	Series                *string                                                                     `json:"Series,omitempty" xml:"Series,omitempty"`
	SupportSpecifications []*DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications `json:"SupportSpecifications,omitempty" xml:"SupportSpecifications,omitempty" type:"Repeated"`
	Zones                 *string                                                                     `json:"Zones,omitempty" xml:"Zones,omitempty"`
}

func (s DescribeAvailableZoneResponseBodyDataAvailableZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZoneResponseBodyDataAvailableZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZones) SetChannel(v string) *DescribeAvailableZoneResponseBodyDataAvailableZones {
	s.Channel = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZones) SetDeployType(v string) *DescribeAvailableZoneResponseBodyDataAvailableZones {
	s.DeployType = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZones) SetInstanceType(v string) *DescribeAvailableZoneResponseBodyDataAvailableZones {
	s.InstanceType = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZones) SetRegion(v string) *DescribeAvailableZoneResponseBodyDataAvailableZones {
	s.Region = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZones) SetSeries(v string) *DescribeAvailableZoneResponseBodyDataAvailableZones {
	s.Series = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZones) SetSupportSpecifications(v []*DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications) *DescribeAvailableZoneResponseBodyDataAvailableZones {
	s.SupportSpecifications = v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZones) SetZones(v string) *DescribeAvailableZoneResponseBodyDataAvailableZones {
	s.Zones = &v
	return s
}

type DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications struct {
	DiskSizeRange         *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange           `json:"DiskSizeRange,omitempty" xml:"DiskSizeRange,omitempty" type:"Struct"`
	DiskTypes             []*string                                                                                        `json:"DiskTypes,omitempty" xml:"DiskTypes,omitempty" type:"Repeated"`
	InstanceClass         *string                                                                                          `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	Spec                  *string                                                                                          `json:"Spec,omitempty" xml:"Spec,omitempty"`
	SupportEngineVersions []*DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions `json:"SupportEngineVersions,omitempty" xml:"SupportEngineVersions,omitempty" type:"Repeated"`
}

func (s DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications) SetDiskSizeRange(v *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications {
	s.DiskSizeRange = v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications) SetDiskTypes(v []*string) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications {
	s.DiskTypes = v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications) SetInstanceClass(v string) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications {
	s.InstanceClass = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications) SetSpec(v string) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications {
	s.Spec = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications) SetSupportEngineVersions(v []*DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecifications {
	s.SupportEngineVersions = v
	return s
}

type DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange struct {
	Max  *int64 `json:"Max,omitempty" xml:"Max,omitempty"`
	Min  *int64 `json:"Min,omitempty" xml:"Min,omitempty"`
	Step *int64 `json:"Step,omitempty" xml:"Step,omitempty"`
}

func (s DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange) SetMax(v int64) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange {
	s.Max = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange) SetMin(v int64) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange {
	s.Min = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange) SetStep(v int64) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsDiskSizeRange {
	s.Step = &v
	return s
}

type DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions struct {
	ObVersion                    *string   `json:"ObVersion,omitempty" xml:"ObVersion,omitempty"`
	SupportIsolationOptimization *bool     `json:"SupportIsolationOptimization,omitempty" xml:"SupportIsolationOptimization,omitempty"`
	SupportReplicaModes          []*string `json:"SupportReplicaModes,omitempty" xml:"SupportReplicaModes,omitempty" type:"Repeated"`
}

func (s DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions) SetObVersion(v string) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions {
	s.ObVersion = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions) SetSupportIsolationOptimization(v bool) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions {
	s.SupportIsolationOptimization = &v
	return s
}

func (s *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions) SetSupportReplicaModes(v []*string) *DescribeAvailableZoneResponseBodyDataAvailableZonesSupportSpecificationsSupportEngineVersions {
	s.SupportReplicaModes = v
	return s
}

type DescribeAvailableZoneResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAvailableZoneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAvailableZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZoneResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZoneResponse) SetHeaders(v map[string]*string) *DescribeAvailableZoneResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableZoneResponse) SetStatusCode(v int32) *DescribeAvailableZoneResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableZoneResponse) SetBody(v *DescribeAvailableZoneResponseBody) *DescribeAvailableZoneResponse {
	s.Body = v
	return s
}

type DescribeBackupSetDownloadLinkRequest struct {
	DownloadTaskId *string `json:"DownloadTaskId,omitempty" xml:"DownloadTaskId,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeBackupSetDownloadLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupSetDownloadLinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupSetDownloadLinkRequest) SetDownloadTaskId(v string) *DescribeBackupSetDownloadLinkRequest {
	s.DownloadTaskId = &v
	return s
}

func (s *DescribeBackupSetDownloadLinkRequest) SetInstanceId(v string) *DescribeBackupSetDownloadLinkRequest {
	s.InstanceId = &v
	return s
}

type DescribeBackupSetDownloadLinkResponseBody struct {
	Data      *DescribeBackupSetDownloadLinkResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupSetDownloadLinkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupSetDownloadLinkResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupSetDownloadLinkResponseBody) SetData(v *DescribeBackupSetDownloadLinkResponseBodyData) *DescribeBackupSetDownloadLinkResponseBody {
	s.Data = v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponseBody) SetRequestId(v string) *DescribeBackupSetDownloadLinkResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackupSetDownloadLinkResponseBodyData struct {
	BackupRestorableTime   *string `json:"BackupRestorableTime,omitempty" xml:"BackupRestorableTime,omitempty"`
	BackupSetId            *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	DownloadTaskCreateTime *string `json:"DownloadTaskCreateTime,omitempty" xml:"DownloadTaskCreateTime,omitempty"`
	DownloadTaskId         *int64  `json:"DownloadTaskId,omitempty" xml:"DownloadTaskId,omitempty"`
	DownloadTaskStatus     *string `json:"DownloadTaskStatus,omitempty" xml:"DownloadTaskStatus,omitempty"`
	InternalUrl            *string `json:"InternalUrl,omitempty" xml:"InternalUrl,omitempty"`
	UrlAliveTime           *int64  `json:"UrlAliveTime,omitempty" xml:"UrlAliveTime,omitempty"`
	UrlExpiredTime         *string `json:"UrlExpiredTime,omitempty" xml:"UrlExpiredTime,omitempty"`
}

func (s DescribeBackupSetDownloadLinkResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupSetDownloadLinkResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeBackupSetDownloadLinkResponseBodyData) SetBackupRestorableTime(v string) *DescribeBackupSetDownloadLinkResponseBodyData {
	s.BackupRestorableTime = &v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponseBodyData) SetBackupSetId(v string) *DescribeBackupSetDownloadLinkResponseBodyData {
	s.BackupSetId = &v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponseBodyData) SetDownloadTaskCreateTime(v string) *DescribeBackupSetDownloadLinkResponseBodyData {
	s.DownloadTaskCreateTime = &v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponseBodyData) SetDownloadTaskId(v int64) *DescribeBackupSetDownloadLinkResponseBodyData {
	s.DownloadTaskId = &v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponseBodyData) SetDownloadTaskStatus(v string) *DescribeBackupSetDownloadLinkResponseBodyData {
	s.DownloadTaskStatus = &v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponseBodyData) SetInternalUrl(v string) *DescribeBackupSetDownloadLinkResponseBodyData {
	s.InternalUrl = &v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponseBodyData) SetUrlAliveTime(v int64) *DescribeBackupSetDownloadLinkResponseBodyData {
	s.UrlAliveTime = &v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponseBodyData) SetUrlExpiredTime(v string) *DescribeBackupSetDownloadLinkResponseBodyData {
	s.UrlExpiredTime = &v
	return s
}

type DescribeBackupSetDownloadLinkResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBackupSetDownloadLinkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBackupSetDownloadLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupSetDownloadLinkResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupSetDownloadLinkResponse) SetHeaders(v map[string]*string) *DescribeBackupSetDownloadLinkResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponse) SetStatusCode(v int32) *DescribeBackupSetDownloadLinkResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupSetDownloadLinkResponse) SetBody(v *DescribeBackupSetDownloadLinkResponseBody) *DescribeBackupSetDownloadLinkResponse {
	s.Body = v
	return s
}

type DescribeCharsetRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// 实例的系列  - normal（默认）：标准集群版（云盘）  - normal_ssd：标准集群版（本地盘） - history：历史库集群版。
	Series *string `json:"Series,omitempty" xml:"Series,omitempty"`
	// The return result of the request.
	TenantMode *string `json:"TenantMode,omitempty" xml:"TenantMode,omitempty"`
}

func (s DescribeCharsetRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharsetRequest) GoString() string {
	return s.String()
}

func (s *DescribeCharsetRequest) SetInstanceId(v string) *DescribeCharsetRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeCharsetRequest) SetSeries(v string) *DescribeCharsetRequest {
	s.Series = &v
	return s
}

func (s *DescribeCharsetRequest) SetTenantMode(v string) *DescribeCharsetRequest {
	s.TenantMode = &v
	return s
}

type DescribeCharsetResponseBody struct {
	// ```
	// http(s)://[Endpoint]/?Action=DescribeCharset
	// &TenantMode=Oracle
	// &Common request parameters
	// ```
	Charset []*DescribeCharsetResponseBodyCharset `json:"Charset,omitempty" xml:"Charset,omitempty" type:"Repeated"`
	// The operation that you want to perform.
	// Set the value to **DescribeCharset**.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCharsetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharsetResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCharsetResponseBody) SetCharset(v []*DescribeCharsetResponseBodyCharset) *DescribeCharsetResponseBody {
	s.Charset = v
	return s
}

func (s *DescribeCharsetResponseBody) SetRequestId(v string) *DescribeCharsetResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCharsetResponseBodyCharset struct {
	// DescribeCharset
	Charset    *string   `json:"Charset,omitempty" xml:"Charset,omitempty"`
	Collations []*string `json:"Collations,omitempty" xml:"Collations,omitempty" type:"Repeated"`
}

func (s DescribeCharsetResponseBodyCharset) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharsetResponseBodyCharset) GoString() string {
	return s.String()
}

func (s *DescribeCharsetResponseBodyCharset) SetCharset(v string) *DescribeCharsetResponseBodyCharset {
	s.Charset = &v
	return s
}

func (s *DescribeCharsetResponseBodyCharset) SetCollations(v []*string) *DescribeCharsetResponseBodyCharset {
	s.Collations = v
	return s
}

type DescribeCharsetResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCharsetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCharsetResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharsetResponse) GoString() string {
	return s.String()
}

func (s *DescribeCharsetResponse) SetHeaders(v map[string]*string) *DescribeCharsetResponse {
	s.Headers = v
	return s
}

func (s *DescribeCharsetResponse) SetStatusCode(v int32) *DescribeCharsetResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCharsetResponse) SetBody(v *DescribeCharsetResponseBody) *DescribeCharsetResponse {
	s.Body = v
	return s
}

type DescribeDataBackupSetRequest struct {
	BackupObjectType *string `json:"BackupObjectType,omitempty" xml:"BackupObjectType,omitempty"`
	EndTime          *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber       *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime        *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDataBackupSetRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupSetRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupSetRequest) SetBackupObjectType(v string) *DescribeDataBackupSetRequest {
	s.BackupObjectType = &v
	return s
}

func (s *DescribeDataBackupSetRequest) SetEndTime(v string) *DescribeDataBackupSetRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDataBackupSetRequest) SetInstanceId(v string) *DescribeDataBackupSetRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeDataBackupSetRequest) SetPageNumber(v int32) *DescribeDataBackupSetRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataBackupSetRequest) SetPageSize(v int32) *DescribeDataBackupSetRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataBackupSetRequest) SetStartTime(v string) *DescribeDataBackupSetRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDataBackupSetRequest) SetStatus(v string) *DescribeDataBackupSetRequest {
	s.Status = &v
	return s
}

type DescribeDataBackupSetResponseBody struct {
	Data       []*DescribeDataBackupSetResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	RequestId  *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDataBackupSetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupSetResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupSetResponseBody) SetData(v []*DescribeDataBackupSetResponseBodyData) *DescribeDataBackupSetResponseBody {
	s.Data = v
	return s
}

func (s *DescribeDataBackupSetResponseBody) SetRequestId(v string) *DescribeDataBackupSetResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataBackupSetResponseBody) SetTotalCount(v int32) *DescribeDataBackupSetResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDataBackupSetResponseBodyData struct {
	BackupObjectType   *string                                               `json:"BackupObjectType,omitempty" xml:"BackupObjectType,omitempty"`
	BackupObjects      []*DescribeDataBackupSetResponseBodyDataBackupObjects `json:"BackupObjects,omitempty" xml:"BackupObjects,omitempty" type:"Repeated"`
	BackupResults      []*DescribeDataBackupSetResponseBodyDataBackupResults `json:"BackupResults,omitempty" xml:"BackupResults,omitempty" type:"Repeated"`
	Checkpoint         *string                                               `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	DataSize           *int32                                                `json:"DataSize,omitempty" xml:"DataSize,omitempty"`
	DataVersion        *int32                                                `json:"DataVersion,omitempty" xml:"DataVersion,omitempty"`
	DownloadTaskId     *int64                                                `json:"DownloadTaskId,omitempty" xml:"DownloadTaskId,omitempty"`
	DownloadTaskStatus *string                                               `json:"DownloadTaskStatus,omitempty" xml:"DownloadTaskStatus,omitempty"`
	EndTime            *string                                               `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Method             *string                                               `json:"Method,omitempty" xml:"Method,omitempty"`
	Policy             *string                                               `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Progress           *string                                               `json:"Progress,omitempty" xml:"Progress,omitempty"`
	SetId              *int32                                                `json:"SetId,omitempty" xml:"SetId,omitempty"`
	StartTime          *string                                               `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status             *string                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	StorageClass       *string                                               `json:"StorageClass,omitempty" xml:"StorageClass,omitempty"`
	Type               *string                                               `json:"Type,omitempty" xml:"Type,omitempty"`
	Validity           *string                                               `json:"Validity,omitempty" xml:"Validity,omitempty"`
}

func (s DescribeDataBackupSetResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupSetResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupSetResponseBodyData) SetBackupObjectType(v string) *DescribeDataBackupSetResponseBodyData {
	s.BackupObjectType = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetBackupObjects(v []*DescribeDataBackupSetResponseBodyDataBackupObjects) *DescribeDataBackupSetResponseBodyData {
	s.BackupObjects = v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetBackupResults(v []*DescribeDataBackupSetResponseBodyDataBackupResults) *DescribeDataBackupSetResponseBodyData {
	s.BackupResults = v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetCheckpoint(v string) *DescribeDataBackupSetResponseBodyData {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetDataSize(v int32) *DescribeDataBackupSetResponseBodyData {
	s.DataSize = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetDataVersion(v int32) *DescribeDataBackupSetResponseBodyData {
	s.DataVersion = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetDownloadTaskId(v int64) *DescribeDataBackupSetResponseBodyData {
	s.DownloadTaskId = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetDownloadTaskStatus(v string) *DescribeDataBackupSetResponseBodyData {
	s.DownloadTaskStatus = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetEndTime(v string) *DescribeDataBackupSetResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetMethod(v string) *DescribeDataBackupSetResponseBodyData {
	s.Method = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetPolicy(v string) *DescribeDataBackupSetResponseBodyData {
	s.Policy = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetProgress(v string) *DescribeDataBackupSetResponseBodyData {
	s.Progress = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetSetId(v int32) *DescribeDataBackupSetResponseBodyData {
	s.SetId = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetStartTime(v string) *DescribeDataBackupSetResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetStatus(v string) *DescribeDataBackupSetResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetStorageClass(v string) *DescribeDataBackupSetResponseBodyData {
	s.StorageClass = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetType(v string) *DescribeDataBackupSetResponseBodyData {
	s.Type = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyData) SetValidity(v string) *DescribeDataBackupSetResponseBodyData {
	s.Validity = &v
	return s
}

type DescribeDataBackupSetResponseBodyDataBackupObjects struct {
	ClusterName        *string                                                                 `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	DatabaseTablesList []*DescribeDataBackupSetResponseBodyDataBackupObjectsDatabaseTablesList `json:"DatabaseTablesList,omitempty" xml:"DatabaseTablesList,omitempty" type:"Repeated"`
	TenantName         *string                                                                 `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
}

func (s DescribeDataBackupSetResponseBodyDataBackupObjects) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupSetResponseBodyDataBackupObjects) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupSetResponseBodyDataBackupObjects) SetClusterName(v string) *DescribeDataBackupSetResponseBodyDataBackupObjects {
	s.ClusterName = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyDataBackupObjects) SetDatabaseTablesList(v []*DescribeDataBackupSetResponseBodyDataBackupObjectsDatabaseTablesList) *DescribeDataBackupSetResponseBodyDataBackupObjects {
	s.DatabaseTablesList = v
	return s
}

func (s *DescribeDataBackupSetResponseBodyDataBackupObjects) SetTenantName(v string) *DescribeDataBackupSetResponseBodyDataBackupObjects {
	s.TenantName = &v
	return s
}

type DescribeDataBackupSetResponseBodyDataBackupObjectsDatabaseTablesList struct {
	Database *string   `json:"Database,omitempty" xml:"Database,omitempty"`
	Tables   []*string `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
}

func (s DescribeDataBackupSetResponseBodyDataBackupObjectsDatabaseTablesList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupSetResponseBodyDataBackupObjectsDatabaseTablesList) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupSetResponseBodyDataBackupObjectsDatabaseTablesList) SetDatabase(v string) *DescribeDataBackupSetResponseBodyDataBackupObjectsDatabaseTablesList {
	s.Database = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyDataBackupObjectsDatabaseTablesList) SetTables(v []*string) *DescribeDataBackupSetResponseBodyDataBackupObjectsDatabaseTablesList {
	s.Tables = v
	return s
}

type DescribeDataBackupSetResponseBodyDataBackupResults struct {
	ClusterName        *string                                                                 `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	TableBackupResults []*DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults `json:"TableBackupResults,omitempty" xml:"TableBackupResults,omitempty" type:"Repeated"`
	TenantName         *string                                                                 `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
}

func (s DescribeDataBackupSetResponseBodyDataBackupResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupSetResponseBodyDataBackupResults) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupSetResponseBodyDataBackupResults) SetClusterName(v string) *DescribeDataBackupSetResponseBodyDataBackupResults {
	s.ClusterName = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyDataBackupResults) SetTableBackupResults(v []*DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults) *DescribeDataBackupSetResponseBodyDataBackupResults {
	s.TableBackupResults = v
	return s
}

func (s *DescribeDataBackupSetResponseBodyDataBackupResults) SetTenantName(v string) *DescribeDataBackupSetResponseBodyDataBackupResults {
	s.TenantName = &v
	return s
}

type DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults struct {
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	Message  *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Table    *string `json:"Table,omitempty" xml:"Table,omitempty"`
}

func (s DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults) SetDatabase(v string) *DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults {
	s.Database = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults) SetMessage(v string) *DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults {
	s.Message = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults) SetStatus(v string) *DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults {
	s.Status = &v
	return s
}

func (s *DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults) SetTable(v string) *DescribeDataBackupSetResponseBodyDataBackupResultsTableBackupResults {
	s.Table = &v
	return s
}

type DescribeDataBackupSetResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataBackupSetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataBackupSetResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataBackupSetResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataBackupSetResponse) SetHeaders(v map[string]*string) *DescribeDataBackupSetResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataBackupSetResponse) SetStatusCode(v int32) *DescribeDataBackupSetResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataBackupSetResponse) SetBody(v *DescribeDataBackupSetResponseBody) *DescribeDataBackupSetResponse {
	s.Body = v
	return s
}

type DescribeDatabasesRequest struct {
	// The name of the database.
	// You cannot use reserved keywords, such as test and mysql.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// Instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page returned.
	// - Start value: 1
	// - Default value: 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of rows returned on each page.
	// - Maximum value: 100.
	// - Default value: 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The search keyword.
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// Specifies whether to return the information of tables in the database.
	// Default value: false.
	WithTables *bool `json:"WithTables,omitempty" xml:"WithTables,omitempty"`
}

func (s DescribeDatabasesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesRequest) SetDatabaseName(v string) *DescribeDatabasesRequest {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDatabasesRequest) SetInstanceId(v string) *DescribeDatabasesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeDatabasesRequest) SetPageNumber(v int32) *DescribeDatabasesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatabasesRequest) SetPageSize(v int32) *DescribeDatabasesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatabasesRequest) SetSearchKey(v string) *DescribeDatabasesRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeDatabasesRequest) SetTenantId(v string) *DescribeDatabasesRequest {
	s.TenantId = &v
	return s
}

func (s *DescribeDatabasesRequest) SetWithTables(v bool) *DescribeDatabasesRequest {
	s.WithTables = &v
	return s
}

type DescribeDatabasesResponseBody struct {
	// The list of databases in the tenant.
	Databases []*DescribeDatabasesResponseBodyDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of databases in the tenant.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDatabasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseBody) SetDatabases(v []*DescribeDatabasesResponseBodyDatabases) *DescribeDatabasesResponseBody {
	s.Databases = v
	return s
}

func (s *DescribeDatabasesResponseBody) SetRequestId(v string) *DescribeDatabasesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatabasesResponseBody) SetTotalCount(v int32) *DescribeDatabasesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDatabasesResponseBodyDatabases struct {
	// The collation.
	Collation *string `json:"Collation,omitempty" xml:"Collation,omitempty"`
	// The time when the database was created.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The actual data size, in GB.
	DataSize *float64 `json:"DataSize,omitempty" xml:"DataSize,omitempty"`
	// The name of the database.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database type.
	DbType *string `json:"DbType,omitempty" xml:"DbType,omitempty"`
	// The description of the database.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The encoding standard of the database. Encoding standards such as utf8mb4 and GBK are supported.
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The ID of the cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The storage space required, in GB.
	RequiredSize *float64 `json:"RequiredSize,omitempty" xml:"RequiredSize,omitempty"`
	// The status of the database. Valid values:
	// - ONLINE: The database is running.
	// - DELETING: The database is being deleted.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The information about the database tables.
	Tables []*DescribeDatabasesResponseBodyDatabasesTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// Tenant name.
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	// The accounts that have privileges on the database.
	Users []*DescribeDatabasesResponseBodyDatabasesUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Repeated"`
}

func (s DescribeDatabasesResponseBodyDatabases) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseBodyDatabases) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseBodyDatabases) SetCollation(v string) *DescribeDatabasesResponseBodyDatabases {
	s.Collation = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetCreateTime(v string) *DescribeDatabasesResponseBodyDatabases {
	s.CreateTime = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetDataSize(v float64) *DescribeDatabasesResponseBodyDatabases {
	s.DataSize = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetDatabaseName(v string) *DescribeDatabasesResponseBodyDatabases {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetDbType(v string) *DescribeDatabasesResponseBodyDatabases {
	s.DbType = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetDescription(v string) *DescribeDatabasesResponseBodyDatabases {
	s.Description = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetEncoding(v string) *DescribeDatabasesResponseBodyDatabases {
	s.Encoding = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetInstanceId(v string) *DescribeDatabasesResponseBodyDatabases {
	s.InstanceId = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetRequiredSize(v float64) *DescribeDatabasesResponseBodyDatabases {
	s.RequiredSize = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetStatus(v string) *DescribeDatabasesResponseBodyDatabases {
	s.Status = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetTables(v []*DescribeDatabasesResponseBodyDatabasesTables) *DescribeDatabasesResponseBodyDatabases {
	s.Tables = v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetTenantId(v string) *DescribeDatabasesResponseBodyDatabases {
	s.TenantId = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetTenantName(v string) *DescribeDatabasesResponseBodyDatabases {
	s.TenantName = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabases) SetUsers(v []*DescribeDatabasesResponseBodyDatabasesUsers) *DescribeDatabasesResponseBodyDatabases {
	s.Users = v
	return s
}

type DescribeDatabasesResponseBodyDatabasesTables struct {
	// The name of the database table.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DescribeDatabasesResponseBodyDatabasesTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseBodyDatabasesTables) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseBodyDatabasesTables) SetTableName(v string) *DescribeDatabasesResponseBodyDatabasesTables {
	s.TableName = &v
	return s
}

type DescribeDatabasesResponseBodyDatabasesUsers struct {
	// If you have granted custom privileges on the database, this parameter indicates the custom privileges, separated by commas (,). Otherwise, no data is returned for this parameter.
	Privileges *string `json:"Privileges,omitempty" xml:"Privileges,omitempty"`
	// The role of the account.
	// In MySQL mode, a role is a database-level role. Valid values:
	// - ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.
	// - ReadOnly: a role that has only the read-only privilege SELECT.
	// - DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.
	// - DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The name of the account.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The type of the account. Valid values:  - Admin: the super administrator account. - Normal: a general account.
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s DescribeDatabasesResponseBodyDatabasesUsers) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseBodyDatabasesUsers) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseBodyDatabasesUsers) SetPrivileges(v string) *DescribeDatabasesResponseBodyDatabasesUsers {
	s.Privileges = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesUsers) SetRole(v string) *DescribeDatabasesResponseBodyDatabasesUsers {
	s.Role = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesUsers) SetUserName(v string) *DescribeDatabasesResponseBodyDatabasesUsers {
	s.UserName = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesUsers) SetUserType(v string) *DescribeDatabasesResponseBodyDatabasesUsers {
	s.UserType = &v
	return s
}

type DescribeDatabasesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatabasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatabasesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponse) SetHeaders(v map[string]*string) *DescribeDatabasesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatabasesResponse) SetStatusCode(v int32) *DescribeDatabasesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatabasesResponse) SetBody(v *DescribeDatabasesResponseBody) *DescribeDatabasesResponse {
	s.Body = v
	return s
}

type DescribeInstanceRequest struct {
	// The size of the data disk, in GB.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The information about the storage resources of the cluster.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRequest) SetInstanceId(v string) *DescribeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceRequest) SetPageNumber(v int32) *DescribeInstanceRequest {
	s.PageNumber = &v
	return s
}

type DescribeInstanceResponseBody struct {
	// The log disk space of each replica node in the cluster. Unit: GB.
	Instance *DescribeInstanceResponseBodyInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Struct"`
	// The total log disk space of the cluster, in GB.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBody) SetInstance(v *DescribeInstanceResponseBodyInstance) *DescribeInstanceResponseBody {
	s.Instance = v
	return s
}

func (s *DescribeInstanceResponseBody) SetRequestId(v string) *DescribeInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceResponseBodyInstance struct {
	// The operation that you want to perform. <br>Set the value to **DescribeInstance**.
	AutoRenewal *bool `json:"AutoRenewal,omitempty" xml:"AutoRenewal,omitempty"`
	// Example 1
	AutoUpgradeObVersion *bool     `json:"AutoUpgradeObVersion,omitempty" xml:"AutoUpgradeObVersion,omitempty"`
	AvailableZones       []*string `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" type:"Repeated"`
	CpuArchitecture      *string   `json:"CpuArchitecture,omitempty" xml:"CpuArchitecture,omitempty"`
	// Indicates whether the log disk specifications can be upgraded.
	CreateTime              *string                                                      `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataDiskAutoScale       *bool                                                        `json:"DataDiskAutoScale,omitempty" xml:"DataDiskAutoScale,omitempty"`
	DataDiskAutoScaleConfig *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig `json:"DataDiskAutoScaleConfig,omitempty" xml:"DataDiskAutoScaleConfig,omitempty" type:"Struct"`
	// The total number of CPU cores of the cluster.
	DataMergeTime *string `json:"DataMergeTime,omitempty" xml:"DataMergeTime,omitempty"`
	// Alibaba Cloud CLI
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.
	DeployType *string `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	// The total storage space of the cluster, in GB.
	DiskType                        *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	EnableIsolationOptimization     *bool   `json:"EnableIsolationOptimization,omitempty" xml:"EnableIsolationOptimization,omitempty"`
	EnableProxyService              *bool   `json:"EnableProxyService,omitempty" xml:"EnableProxyService,omitempty"`
	EnableReadOnlyReplica           *bool   `json:"EnableReadOnlyReplica,omitempty" xml:"EnableReadOnlyReplica,omitempty"`
	EnableReadOnlyReplicaManagement *bool   `json:"EnableReadOnlyReplicaManagement,omitempty" xml:"EnableReadOnlyReplicaManagement,omitempty"`
	EnableUpgradeLogDisk            *bool   `json:"EnableUpgradeLogDisk,omitempty" xml:"EnableUpgradeLogDisk,omitempty"`
	ExclusiveUnitNumLimit           *int32  `json:"ExclusiveUnitNumLimit,omitempty" xml:"ExclusiveUnitNumLimit,omitempty"`
	// The information of the OceanBase cluster.
	ExpireTime           *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	InTempCapacityStatus *bool   `json:"InTempCapacityStatus,omitempty" xml:"InTempCapacityStatus,omitempty"`
	// The detailed information of the OBServer version.
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// The information about the log disk space of the cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Indicates whether automatic upgrade of the OBServer version is enabled.
	InstanceName      *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceRole      *string `json:"InstanceRole,omitempty" xml:"InstanceRole,omitempty"`
	IsLatestObVersion *bool   `json:"IsLatestObVersion,omitempty" xml:"IsLatestObVersion,omitempty"`
	// The information about the CPU resources of the cluster.
	IsTrustEcs            *bool `json:"IsTrustEcs,omitempty" xml:"IsTrustEcs,omitempty"`
	IsolationOptimization *bool `json:"IsolationOptimization,omitempty" xml:"IsolationOptimization,omitempty"`
	// The time when the major compaction of cluster data is performed.
	MaintainTime *string `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty"`
	NodeNum      *string `json:"NodeNum,omitempty" xml:"NodeNum,omitempty"`
	ObRpmVersion *string `json:"ObRpmVersion,omitempty" xml:"ObRpmVersion,omitempty"`
	// The list of zones.
	PayType            *string                                               `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ProxyClusterId     *string                                               `json:"ProxyClusterId,omitempty" xml:"ProxyClusterId,omitempty"`
	ProxyServiceStatus *string                                               `json:"ProxyServiceStatus,omitempty" xml:"ProxyServiceStatus,omitempty"`
	ReadOnlyResource   *DescribeInstanceResponseBodyInstanceReadOnlyResource `json:"ReadOnlyResource,omitempty" xml:"ReadOnlyResource,omitempty" type:"Struct"`
	ReplicaMode        *string                                               `json:"ReplicaMode,omitempty" xml:"ReplicaMode,omitempty"`
	// The size of used memory in the cluster, in GB.
	Resource *DescribeInstanceResponseBodyInstanceResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// Indicates whether the OBServer version is the latest.
	Series             *string `json:"Series,omitempty" xml:"Series,omitempty"`
	SharedUnitNumLimit *int32  `json:"SharedUnitNumLimit,omitempty" xml:"SharedUnitNumLimit,omitempty"`
	// The information about cluster resources.
	Status          *string                                              `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantCreatable *DescribeInstanceResponseBodyInstanceTenantCreatable `json:"TenantCreatable,omitempty" xml:"TenantCreatable,omitempty" type:"Struct"`
	UnitSpec        *string                                              `json:"UnitSpec,omitempty" xml:"UnitSpec,omitempty"`
	// You can call this operation to query the detailed information of an OceanBase cluster.
	Version *string   `json:"Version,omitempty" xml:"Version,omitempty"`
	Zones   []*string `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Repeated"`
}

func (s DescribeInstanceResponseBodyInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstance) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstance) SetAutoRenewal(v bool) *DescribeInstanceResponseBodyInstance {
	s.AutoRenewal = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetAutoUpgradeObVersion(v bool) *DescribeInstanceResponseBodyInstance {
	s.AutoUpgradeObVersion = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetAvailableZones(v []*string) *DescribeInstanceResponseBodyInstance {
	s.AvailableZones = v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetCpuArchitecture(v string) *DescribeInstanceResponseBodyInstance {
	s.CpuArchitecture = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetCreateTime(v string) *DescribeInstanceResponseBodyInstance {
	s.CreateTime = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetDataDiskAutoScale(v bool) *DescribeInstanceResponseBodyInstance {
	s.DataDiskAutoScale = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetDataDiskAutoScaleConfig(v *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) *DescribeInstanceResponseBodyInstance {
	s.DataDiskAutoScaleConfig = v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetDataMergeTime(v string) *DescribeInstanceResponseBodyInstance {
	s.DataMergeTime = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetDeployMode(v string) *DescribeInstanceResponseBodyInstance {
	s.DeployMode = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetDeployType(v string) *DescribeInstanceResponseBodyInstance {
	s.DeployType = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetDiskType(v string) *DescribeInstanceResponseBodyInstance {
	s.DiskType = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetEnableIsolationOptimization(v bool) *DescribeInstanceResponseBodyInstance {
	s.EnableIsolationOptimization = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetEnableProxyService(v bool) *DescribeInstanceResponseBodyInstance {
	s.EnableProxyService = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetEnableReadOnlyReplica(v bool) *DescribeInstanceResponseBodyInstance {
	s.EnableReadOnlyReplica = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetEnableReadOnlyReplicaManagement(v bool) *DescribeInstanceResponseBodyInstance {
	s.EnableReadOnlyReplicaManagement = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetEnableUpgradeLogDisk(v bool) *DescribeInstanceResponseBodyInstance {
	s.EnableUpgradeLogDisk = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetExclusiveUnitNumLimit(v int32) *DescribeInstanceResponseBodyInstance {
	s.ExclusiveUnitNumLimit = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetExpireTime(v string) *DescribeInstanceResponseBodyInstance {
	s.ExpireTime = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetInTempCapacityStatus(v bool) *DescribeInstanceResponseBodyInstance {
	s.InTempCapacityStatus = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetInstanceClass(v string) *DescribeInstanceResponseBodyInstance {
	s.InstanceClass = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetInstanceId(v string) *DescribeInstanceResponseBodyInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetInstanceName(v string) *DescribeInstanceResponseBodyInstance {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetInstanceRole(v string) *DescribeInstanceResponseBodyInstance {
	s.InstanceRole = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetIsLatestObVersion(v bool) *DescribeInstanceResponseBodyInstance {
	s.IsLatestObVersion = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetIsTrustEcs(v bool) *DescribeInstanceResponseBodyInstance {
	s.IsTrustEcs = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetIsolationOptimization(v bool) *DescribeInstanceResponseBodyInstance {
	s.IsolationOptimization = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetMaintainTime(v string) *DescribeInstanceResponseBodyInstance {
	s.MaintainTime = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetNodeNum(v string) *DescribeInstanceResponseBodyInstance {
	s.NodeNum = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetObRpmVersion(v string) *DescribeInstanceResponseBodyInstance {
	s.ObRpmVersion = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetPayType(v string) *DescribeInstanceResponseBodyInstance {
	s.PayType = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetProxyClusterId(v string) *DescribeInstanceResponseBodyInstance {
	s.ProxyClusterId = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetProxyServiceStatus(v string) *DescribeInstanceResponseBodyInstance {
	s.ProxyServiceStatus = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetReadOnlyResource(v *DescribeInstanceResponseBodyInstanceReadOnlyResource) *DescribeInstanceResponseBodyInstance {
	s.ReadOnlyResource = v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetReplicaMode(v string) *DescribeInstanceResponseBodyInstance {
	s.ReplicaMode = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetResource(v *DescribeInstanceResponseBodyInstanceResource) *DescribeInstanceResponseBodyInstance {
	s.Resource = v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetSeries(v string) *DescribeInstanceResponseBodyInstance {
	s.Series = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetSharedUnitNumLimit(v int32) *DescribeInstanceResponseBodyInstance {
	s.SharedUnitNumLimit = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetStatus(v string) *DescribeInstanceResponseBodyInstance {
	s.Status = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetTenantCreatable(v *DescribeInstanceResponseBodyInstanceTenantCreatable) *DescribeInstanceResponseBodyInstance {
	s.TenantCreatable = v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetUnitSpec(v string) *DescribeInstanceResponseBodyInstance {
	s.UnitSpec = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetVersion(v string) *DescribeInstanceResponseBodyInstance {
	s.Version = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstance) SetZones(v []*string) *DescribeInstanceResponseBodyInstance {
	s.Zones = v
	return s
}

type DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig struct {
	AutoScale           *bool   `json:"AutoScale,omitempty" xml:"AutoScale,omitempty"`
	MaxDiskSize         *int64  `json:"MaxDiskSize,omitempty" xml:"MaxDiskSize,omitempty"`
	ScaleStepInMerge    *int64  `json:"ScaleStepInMerge,omitempty" xml:"ScaleStepInMerge,omitempty"`
	ScaleStepInNormal   *int64  `json:"ScaleStepInNormal,omitempty" xml:"ScaleStepInNormal,omitempty"`
	UpperMergeThreshold *int64  `json:"UpperMergeThreshold,omitempty" xml:"UpperMergeThreshold,omitempty"`
	UpperScaleStep      *string `json:"UpperScaleStep,omitempty" xml:"UpperScaleStep,omitempty"`
	UpperScaleStrategy  *string `json:"UpperScaleStrategy,omitempty" xml:"UpperScaleStrategy,omitempty"`
	UpperThreshold      *int64  `json:"UpperThreshold,omitempty" xml:"UpperThreshold,omitempty"`
	Upperbound          *int64  `json:"Upperbound,omitempty" xml:"Upperbound,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) SetAutoScale(v bool) *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig {
	s.AutoScale = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) SetMaxDiskSize(v int64) *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig {
	s.MaxDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) SetScaleStepInMerge(v int64) *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig {
	s.ScaleStepInMerge = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) SetScaleStepInNormal(v int64) *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig {
	s.ScaleStepInNormal = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) SetUpperMergeThreshold(v int64) *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig {
	s.UpperMergeThreshold = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) SetUpperScaleStep(v string) *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig {
	s.UpperScaleStep = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) SetUpperScaleStrategy(v string) *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig {
	s.UpperScaleStrategy = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) SetUpperThreshold(v int64) *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig {
	s.UpperThreshold = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig) SetUpperbound(v int64) *DescribeInstanceResponseBodyInstanceDataDiskAutoScaleConfig {
	s.Upperbound = &v
	return s
}

type DescribeInstanceResponseBodyInstanceReadOnlyResource struct {
	CapacityUnit *DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit `json:"CapacityUnit,omitempty" xml:"CapacityUnit,omitempty" type:"Struct"`
	Cpu          *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu          `json:"Cpu,omitempty" xml:"Cpu,omitempty" type:"Struct"`
	DiskSize     *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize     `json:"DiskSize,omitempty" xml:"DiskSize,omitempty" type:"Struct"`
	LogDiskSize  *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize  `json:"LogDiskSize,omitempty" xml:"LogDiskSize,omitempty" type:"Struct"`
	Memory       *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory       `json:"Memory,omitempty" xml:"Memory,omitempty" type:"Struct"`
	UnitCount    *int64                                                            `json:"UnitCount,omitempty" xml:"UnitCount,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResource) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResource) SetCapacityUnit(v *DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit) *DescribeInstanceResponseBodyInstanceReadOnlyResource {
	s.CapacityUnit = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResource) SetCpu(v *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu) *DescribeInstanceResponseBodyInstanceReadOnlyResource {
	s.Cpu = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResource) SetDiskSize(v *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) *DescribeInstanceResponseBodyInstanceReadOnlyResource {
	s.DiskSize = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResource) SetLogDiskSize(v *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize) *DescribeInstanceResponseBodyInstanceReadOnlyResource {
	s.LogDiskSize = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResource) SetMemory(v *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory) *DescribeInstanceResponseBodyInstanceReadOnlyResource {
	s.Memory = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResource) SetUnitCount(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResource {
	s.UnitCount = &v
	return s
}

type DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit struct {
	MaxCapacityUnit  *int32  `json:"MaxCapacityUnit,omitempty" xml:"MaxCapacityUnit,omitempty"`
	MinCapacityUnit  *int32  `json:"MinCapacityUnit,omitempty" xml:"MinCapacityUnit,omitempty"`
	UsedCapacityUnit *string `json:"UsedCapacityUnit,omitempty" xml:"UsedCapacityUnit,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit) SetMaxCapacityUnit(v int32) *DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit {
	s.MaxCapacityUnit = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit) SetMinCapacityUnit(v int32) *DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit {
	s.MinCapacityUnit = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit) SetUsedCapacityUnit(v string) *DescribeInstanceResponseBodyInstanceReadOnlyResourceCapacityUnit {
	s.UsedCapacityUnit = &v
	return s
}

type DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu struct {
	OriginalTotalCpu *int64 `json:"OriginalTotalCpu,omitempty" xml:"OriginalTotalCpu,omitempty"`
	TotalCpu         *int64 `json:"TotalCpu,omitempty" xml:"TotalCpu,omitempty"`
	UnitCpu          *int64 `json:"UnitCpu,omitempty" xml:"UnitCpu,omitempty"`
	UsedCpu          *int64 `json:"UsedCpu,omitempty" xml:"UsedCpu,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu) SetOriginalTotalCpu(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu {
	s.OriginalTotalCpu = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu) SetTotalCpu(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu {
	s.TotalCpu = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu) SetUnitCpu(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu {
	s.UnitCpu = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu) SetUsedCpu(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceCpu {
	s.UsedCpu = &v
	return s
}

type DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize struct {
	DataUsedSize          *float64  `json:"DataUsedSize,omitempty" xml:"DataUsedSize,omitempty"`
	MaxDiskSize           *float64  `json:"MaxDiskSize,omitempty" xml:"MaxDiskSize,omitempty"`
	MaxDiskUsedObServer   []*string `json:"MaxDiskUsedObServer,omitempty" xml:"MaxDiskUsedObServer,omitempty" type:"Repeated"`
	MaxDiskUsedPercent    *float64  `json:"MaxDiskUsedPercent,omitempty" xml:"MaxDiskUsedPercent,omitempty"`
	OriginalTotalDiskSize *int64    `json:"OriginalTotalDiskSize,omitempty" xml:"OriginalTotalDiskSize,omitempty"`
	TotalDiskSize         *int64    `json:"TotalDiskSize,omitempty" xml:"TotalDiskSize,omitempty"`
	UnitDiskSize          *int64    `json:"UnitDiskSize,omitempty" xml:"UnitDiskSize,omitempty"`
	UsedDiskSize          *int64    `json:"UsedDiskSize,omitempty" xml:"UsedDiskSize,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) SetDataUsedSize(v float64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize {
	s.DataUsedSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) SetMaxDiskSize(v float64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize {
	s.MaxDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) SetMaxDiskUsedObServer(v []*string) *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize {
	s.MaxDiskUsedObServer = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) SetMaxDiskUsedPercent(v float64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize {
	s.MaxDiskUsedPercent = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) SetOriginalTotalDiskSize(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize {
	s.OriginalTotalDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) SetTotalDiskSize(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize {
	s.TotalDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) SetUnitDiskSize(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize {
	s.UnitDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize) SetUsedDiskSize(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceDiskSize {
	s.UsedDiskSize = &v
	return s
}

type DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize struct {
	LogAssignedSize        *string   `json:"LogAssignedSize,omitempty" xml:"LogAssignedSize,omitempty"`
	MaxLogAssignedObServer []*string `json:"MaxLogAssignedObServer,omitempty" xml:"MaxLogAssignedObServer,omitempty" type:"Repeated"`
	MaxLogAssignedPercent  *string   `json:"MaxLogAssignedPercent,omitempty" xml:"MaxLogAssignedPercent,omitempty"`
	TotalDiskSize          *int64    `json:"TotalDiskSize,omitempty" xml:"TotalDiskSize,omitempty"`
	UnitDiskSize           *int64    `json:"UnitDiskSize,omitempty" xml:"UnitDiskSize,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize) SetLogAssignedSize(v string) *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize {
	s.LogAssignedSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize) SetMaxLogAssignedObServer(v []*string) *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize {
	s.MaxLogAssignedObServer = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize) SetMaxLogAssignedPercent(v string) *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize {
	s.MaxLogAssignedPercent = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize) SetTotalDiskSize(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize {
	s.TotalDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize) SetUnitDiskSize(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceLogDiskSize {
	s.UnitDiskSize = &v
	return s
}

type DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory struct {
	OriginalTotalMemory *int64 `json:"OriginalTotalMemory,omitempty" xml:"OriginalTotalMemory,omitempty"`
	TotalMemory         *int64 `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	UnitMemory          *int64 `json:"UnitMemory,omitempty" xml:"UnitMemory,omitempty"`
	UsedMemory          *int64 `json:"UsedMemory,omitempty" xml:"UsedMemory,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory) SetOriginalTotalMemory(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory {
	s.OriginalTotalMemory = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory) SetTotalMemory(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory {
	s.TotalMemory = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory) SetUnitMemory(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory {
	s.UnitMemory = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory) SetUsedMemory(v int64) *DescribeInstanceResponseBodyInstanceReadOnlyResourceMemory {
	s.UsedMemory = &v
	return s
}

type DescribeInstanceResponseBodyInstanceResource struct {
	CapacityUnit *DescribeInstanceResponseBodyInstanceResourceCapacityUnit `json:"CapacityUnit,omitempty" xml:"CapacityUnit,omitempty" type:"Struct"`
	// The information of the OceanBase cluster.
	Cpu *DescribeInstanceResponseBodyInstanceResourceCpu `json:"Cpu,omitempty" xml:"Cpu,omitempty" type:"Struct"`
	// The number of the page to return.
	// - Start value: 1
	// - Default value: 1
	DiskSize *DescribeInstanceResponseBodyInstanceResourceDiskSize `json:"DiskSize,omitempty" xml:"DiskSize,omitempty" type:"Struct"`
	// The server with the highest disk usage.
	LogDiskSize *DescribeInstanceResponseBodyInstanceResourceLogDiskSize `json:"LogDiskSize,omitempty" xml:"LogDiskSize,omitempty" type:"Struct"`
	// The name of the OceanBase cluster.
	Memory *DescribeInstanceResponseBodyInstanceResourceMemory `json:"Memory,omitempty" xml:"Memory,omitempty" type:"Struct"`
	// The number of CPU cores used in the cluster.
	UnitCount *int64 `json:"UnitCount,omitempty" xml:"UnitCount,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceResource) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceResource) SetCapacityUnit(v *DescribeInstanceResponseBodyInstanceResourceCapacityUnit) *DescribeInstanceResponseBodyInstanceResource {
	s.CapacityUnit = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResource) SetCpu(v *DescribeInstanceResponseBodyInstanceResourceCpu) *DescribeInstanceResponseBodyInstanceResource {
	s.Cpu = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResource) SetDiskSize(v *DescribeInstanceResponseBodyInstanceResourceDiskSize) *DescribeInstanceResponseBodyInstanceResource {
	s.DiskSize = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResource) SetLogDiskSize(v *DescribeInstanceResponseBodyInstanceResourceLogDiskSize) *DescribeInstanceResponseBodyInstanceResource {
	s.LogDiskSize = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResource) SetMemory(v *DescribeInstanceResponseBodyInstanceResourceMemory) *DescribeInstanceResponseBodyInstanceResource {
	s.Memory = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResource) SetUnitCount(v int64) *DescribeInstanceResponseBodyInstanceResource {
	s.UnitCount = &v
	return s
}

type DescribeInstanceResponseBodyInstanceResourceCapacityUnit struct {
	MaxCapacityUnit  *int32  `json:"MaxCapacityUnit,omitempty" xml:"MaxCapacityUnit,omitempty"`
	MinCapacityUnit  *int32  `json:"MinCapacityUnit,omitempty" xml:"MinCapacityUnit,omitempty"`
	UsedCapacityUnit *string `json:"UsedCapacityUnit,omitempty" xml:"UsedCapacityUnit,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceResourceCapacityUnit) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceResourceCapacityUnit) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceResourceCapacityUnit) SetMaxCapacityUnit(v int32) *DescribeInstanceResponseBodyInstanceResourceCapacityUnit {
	s.MaxCapacityUnit = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceCapacityUnit) SetMinCapacityUnit(v int32) *DescribeInstanceResponseBodyInstanceResourceCapacityUnit {
	s.MinCapacityUnit = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceCapacityUnit) SetUsedCapacityUnit(v string) *DescribeInstanceResponseBodyInstanceResourceCapacityUnit {
	s.UsedCapacityUnit = &v
	return s
}

type DescribeInstanceResponseBodyInstanceResourceCpu struct {
	OriginalTotalCpu *int64 `json:"OriginalTotalCpu,omitempty" xml:"OriginalTotalCpu,omitempty"`
	// The series of the OceanBase cluster. Valid values:
	// - NORMAL: the high availability edition.
	// - BASIC: the basic edition.
	TotalCpu *int64 `json:"TotalCpu,omitempty" xml:"TotalCpu,omitempty"`
	// The type of the storage disk where the cluster is deployed.
	//
	// The default value is cloud_essd_pl1, which indicates an ESSD cloud disk.
	UnitCpu *int64 `json:"UnitCpu,omitempty" xml:"UnitCpu,omitempty"`
	// Indicates whether automatic upgrade of the OBServer version is enabled.
	UsedCpu *int64 `json:"UsedCpu,omitempty" xml:"UsedCpu,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceResourceCpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceResourceCpu) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceResourceCpu) SetOriginalTotalCpu(v int64) *DescribeInstanceResponseBodyInstanceResourceCpu {
	s.OriginalTotalCpu = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceCpu) SetTotalCpu(v int64) *DescribeInstanceResponseBodyInstanceResourceCpu {
	s.TotalCpu = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceCpu) SetUnitCpu(v int64) *DescribeInstanceResponseBodyInstanceResourceCpu {
	s.UnitCpu = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceCpu) SetUsedCpu(v int64) *DescribeInstanceResponseBodyInstanceResourceCpu {
	s.UsedCpu = &v
	return s
}

type DescribeInstanceResponseBodyInstanceResourceDiskSize struct {
	// The ID of the OceanBase cluster.
	DataUsedSize *float64 `json:"DataUsedSize,omitempty" xml:"DataUsedSize,omitempty"`
	MaxDiskSize  *float64 `json:"MaxDiskSize,omitempty" xml:"MaxDiskSize,omitempty"`
	// The time in UTC when the cluster expires.
	MaxDiskUsedObServer []*string `json:"MaxDiskUsedObServer,omitempty" xml:"MaxDiskUsedObServer,omitempty" type:"Repeated"`
	// The maximum disk usage, in percentage.
	MaxDiskUsedPercent    *float64 `json:"MaxDiskUsedPercent,omitempty" xml:"MaxDiskUsedPercent,omitempty"`
	OriginalTotalDiskSize *int64   `json:"OriginalTotalDiskSize,omitempty" xml:"OriginalTotalDiskSize,omitempty"`
	// The data replica distribution mode of the cluster. Valid values:
	// - n: indicates the single-IDC mode.
	// - n-n: indicates the dual-IDC mode.
	// - n-n-n: indicates the multi-IDC mode.
	//
	// > <br>The integer n represents the number of OBServer nodes in each IDC.
	TotalDiskSize *int64 `json:"TotalDiskSize,omitempty" xml:"TotalDiskSize,omitempty"`
	// The list of zones.
	UnitDiskSize *int64 `json:"UnitDiskSize,omitempty" xml:"UnitDiskSize,omitempty"`
	// The specifications of the cluster.  You can specify one of the following four plans:
	// - 8C32G: indicates 8 CPU cores and 32 GB of memory.
	// - 14C70G: indicates 14 CPU cores and 70 GB of memory.
	// - 30C180G: indicates 30 CPU cores and 180 GB of memory.
	// - 62C400G: indicates 62 CPU cores and 400 GB of memory.
	UsedDiskSize *int64 `json:"UsedDiskSize,omitempty" xml:"UsedDiskSize,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceResourceDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceResourceDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceResourceDiskSize) SetDataUsedSize(v float64) *DescribeInstanceResponseBodyInstanceResourceDiskSize {
	s.DataUsedSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceDiskSize) SetMaxDiskSize(v float64) *DescribeInstanceResponseBodyInstanceResourceDiskSize {
	s.MaxDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceDiskSize) SetMaxDiskUsedObServer(v []*string) *DescribeInstanceResponseBodyInstanceResourceDiskSize {
	s.MaxDiskUsedObServer = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceDiskSize) SetMaxDiskUsedPercent(v float64) *DescribeInstanceResponseBodyInstanceResourceDiskSize {
	s.MaxDiskUsedPercent = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceDiskSize) SetOriginalTotalDiskSize(v int64) *DescribeInstanceResponseBodyInstanceResourceDiskSize {
	s.OriginalTotalDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceDiskSize) SetTotalDiskSize(v int64) *DescribeInstanceResponseBodyInstanceResourceDiskSize {
	s.TotalDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceDiskSize) SetUnitDiskSize(v int64) *DescribeInstanceResponseBodyInstanceResourceDiskSize {
	s.UnitDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceDiskSize) SetUsedDiskSize(v int64) *DescribeInstanceResponseBodyInstanceResourceDiskSize {
	s.UsedDiskSize = &v
	return s
}

type DescribeInstanceResponseBodyInstanceResourceLogDiskSize struct {
	LogAssignedSize        *string   `json:"LogAssignedSize,omitempty" xml:"LogAssignedSize,omitempty"`
	MaxLogAssignedObServer []*string `json:"MaxLogAssignedObServer,omitempty" xml:"MaxLogAssignedObServer,omitempty" type:"Repeated"`
	MaxLogAssignedPercent  *string   `json:"MaxLogAssignedPercent,omitempty" xml:"MaxLogAssignedPercent,omitempty"`
	OriginalTotalDiskSize  *int32    `json:"OriginalTotalDiskSize,omitempty" xml:"OriginalTotalDiskSize,omitempty"`
	// The ID of the region.
	TotalDiskSize *int64 `json:"TotalDiskSize,omitempty" xml:"TotalDiskSize,omitempty"`
	// The request ID.
	UnitDiskSize *int64 `json:"UnitDiskSize,omitempty" xml:"UnitDiskSize,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceResourceLogDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceResourceLogDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceResourceLogDiskSize) SetLogAssignedSize(v string) *DescribeInstanceResponseBodyInstanceResourceLogDiskSize {
	s.LogAssignedSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceLogDiskSize) SetMaxLogAssignedObServer(v []*string) *DescribeInstanceResponseBodyInstanceResourceLogDiskSize {
	s.MaxLogAssignedObServer = v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceLogDiskSize) SetMaxLogAssignedPercent(v string) *DescribeInstanceResponseBodyInstanceResourceLogDiskSize {
	s.MaxLogAssignedPercent = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceLogDiskSize) SetOriginalTotalDiskSize(v int32) *DescribeInstanceResponseBodyInstanceResourceLogDiskSize {
	s.OriginalTotalDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceLogDiskSize) SetTotalDiskSize(v int64) *DescribeInstanceResponseBodyInstanceResourceLogDiskSize {
	s.TotalDiskSize = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceLogDiskSize) SetUnitDiskSize(v int64) *DescribeInstanceResponseBodyInstanceResourceLogDiskSize {
	s.UnitDiskSize = &v
	return s
}

type DescribeInstanceResponseBodyInstanceResourceMemory struct {
	OriginalTotalMemory *int64 `json:"OriginalTotalMemory,omitempty" xml:"OriginalTotalMemory,omitempty"`
	// Indicates whether trusted ECS instances are used.
	TotalMemory *int64 `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	// The log disk space of each replica node in the cluster. Unit: GB.
	UnitMemory *int64 `json:"UnitMemory,omitempty" xml:"UnitMemory,omitempty"`
	// The time in UTC when the cluster was created.
	UsedMemory *int64 `json:"UsedMemory,omitempty" xml:"UsedMemory,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceResourceMemory) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceResourceMemory) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceResourceMemory) SetOriginalTotalMemory(v int64) *DescribeInstanceResponseBodyInstanceResourceMemory {
	s.OriginalTotalMemory = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceMemory) SetTotalMemory(v int64) *DescribeInstanceResponseBodyInstanceResourceMemory {
	s.TotalMemory = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceMemory) SetUnitMemory(v int64) *DescribeInstanceResponseBodyInstanceResourceMemory {
	s.UnitMemory = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceResourceMemory) SetUsedMemory(v int64) *DescribeInstanceResponseBodyInstanceResourceMemory {
	s.UsedMemory = &v
	return s
}

type DescribeInstanceResponseBodyInstanceTenantCreatable struct {
	DisableCreateTenantReason *string `json:"DisableCreateTenantReason,omitempty" xml:"DisableCreateTenantReason,omitempty"`
	EnableCreateTenant        *bool   `json:"EnableCreateTenant,omitempty" xml:"EnableCreateTenant,omitempty"`
}

func (s DescribeInstanceResponseBodyInstanceTenantCreatable) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponseBodyInstanceTenantCreatable) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponseBodyInstanceTenantCreatable) SetDisableCreateTenantReason(v string) *DescribeInstanceResponseBodyInstanceTenantCreatable {
	s.DisableCreateTenantReason = &v
	return s
}

func (s *DescribeInstanceResponseBodyInstanceTenantCreatable) SetEnableCreateTenant(v bool) *DescribeInstanceResponseBodyInstanceTenantCreatable {
	s.EnableCreateTenant = &v
	return s
}

type DescribeInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceResponse) SetHeaders(v map[string]*string) *DescribeInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceResponse) SetStatusCode(v int32) *DescribeInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceResponse) SetBody(v *DescribeInstanceResponseBody) *DescribeInstanceResponse {
	s.Body = v
	return s
}

type DescribeInstanceCreatableZoneRequest struct {
	// The ID of the zone.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceCreatableZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceCreatableZoneRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceCreatableZoneRequest) SetInstanceId(v string) *DescribeInstanceCreatableZoneRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceCreatableZoneResponseBody struct {
	// Indicates whether the cluster is deployed in the zone.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The operation that you want to perform.
	// Set the value to **DescribeInstanceCreatableZone**.
	ZoneList []*DescribeInstanceCreatableZoneResponseBodyZoneList `json:"ZoneList,omitempty" xml:"ZoneList,omitempty" type:"Repeated"`
}

func (s DescribeInstanceCreatableZoneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceCreatableZoneResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceCreatableZoneResponseBody) SetRequestId(v string) *DescribeInstanceCreatableZoneResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceCreatableZoneResponseBody) SetZoneList(v []*DescribeInstanceCreatableZoneResponseBodyZoneList) *DescribeInstanceCreatableZoneResponseBody {
	s.ZoneList = v
	return s
}

type DescribeInstanceCreatableZoneResponseBodyZoneList struct {
	IsInCluster *bool `json:"IsInCluster,omitempty" xml:"IsInCluster,omitempty"`
	// DescribeInstanceCreatableZone
	Zone *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s DescribeInstanceCreatableZoneResponseBodyZoneList) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceCreatableZoneResponseBodyZoneList) GoString() string {
	return s.String()
}

func (s *DescribeInstanceCreatableZoneResponseBodyZoneList) SetIsInCluster(v bool) *DescribeInstanceCreatableZoneResponseBodyZoneList {
	s.IsInCluster = &v
	return s
}

func (s *DescribeInstanceCreatableZoneResponseBodyZoneList) SetZone(v string) *DescribeInstanceCreatableZoneResponseBodyZoneList {
	s.Zone = &v
	return s
}

type DescribeInstanceCreatableZoneResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceCreatableZoneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceCreatableZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceCreatableZoneResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceCreatableZoneResponse) SetHeaders(v map[string]*string) *DescribeInstanceCreatableZoneResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceCreatableZoneResponse) SetStatusCode(v int32) *DescribeInstanceCreatableZoneResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceCreatableZoneResponse) SetBody(v *DescribeInstanceCreatableZoneResponseBody) *DescribeInstanceCreatableZoneResponse {
	s.Body = v
	return s
}

type DescribeInstanceSSLRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceSSLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSSLRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSSLRequest) SetInstanceId(v string) *DescribeInstanceSSLRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceSSLResponseBody struct {
	InstanceSSL *DescribeInstanceSSLResponseBodyInstanceSSL `json:"InstanceSSL,omitempty" xml:"InstanceSSL,omitempty" type:"Struct"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceSSLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSSLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSSLResponseBody) SetInstanceSSL(v *DescribeInstanceSSLResponseBodyInstanceSSL) *DescribeInstanceSSLResponseBody {
	s.InstanceSSL = v
	return s
}

func (s *DescribeInstanceSSLResponseBody) SetRequestId(v string) *DescribeInstanceSSLResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceSSLResponseBodyInstanceSSL struct {
	CaUrl           *string `json:"CaUrl,omitempty" xml:"CaUrl,omitempty"`
	EnableSSL       *string `json:"EnableSSL,omitempty" xml:"EnableSSL,omitempty"`
	ForceSSL        *string `json:"ForceSSL,omitempty" xml:"ForceSSL,omitempty"`
	ForceSSLSupport *bool   `json:"ForceSSLSupport,omitempty" xml:"ForceSSLSupport,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ValidPeriod     *string `json:"ValidPeriod,omitempty" xml:"ValidPeriod,omitempty"`
}

func (s DescribeInstanceSSLResponseBodyInstanceSSL) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSSLResponseBodyInstanceSSL) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSSLResponseBodyInstanceSSL) SetCaUrl(v string) *DescribeInstanceSSLResponseBodyInstanceSSL {
	s.CaUrl = &v
	return s
}

func (s *DescribeInstanceSSLResponseBodyInstanceSSL) SetEnableSSL(v string) *DescribeInstanceSSLResponseBodyInstanceSSL {
	s.EnableSSL = &v
	return s
}

func (s *DescribeInstanceSSLResponseBodyInstanceSSL) SetForceSSL(v string) *DescribeInstanceSSLResponseBodyInstanceSSL {
	s.ForceSSL = &v
	return s
}

func (s *DescribeInstanceSSLResponseBodyInstanceSSL) SetForceSSLSupport(v bool) *DescribeInstanceSSLResponseBodyInstanceSSL {
	s.ForceSSLSupport = &v
	return s
}

func (s *DescribeInstanceSSLResponseBodyInstanceSSL) SetInstanceId(v string) *DescribeInstanceSSLResponseBodyInstanceSSL {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceSSLResponseBodyInstanceSSL) SetStatus(v string) *DescribeInstanceSSLResponseBodyInstanceSSL {
	s.Status = &v
	return s
}

func (s *DescribeInstanceSSLResponseBodyInstanceSSL) SetValidPeriod(v string) *DescribeInstanceSSLResponseBodyInstanceSSL {
	s.ValidPeriod = &v
	return s
}

type DescribeInstanceSSLResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceSSLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceSSLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSSLResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSSLResponse) SetHeaders(v map[string]*string) *DescribeInstanceSSLResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceSSLResponse) SetStatusCode(v int32) *DescribeInstanceSSLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceSSLResponse) SetBody(v *DescribeInstanceSSLResponseBody) *DescribeInstanceSSLResponse {
	s.Body = v
	return s
}

type DescribeInstanceSecurityConfigsRequest struct {
	// The unique identifier of the check.
	CheckId *string `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceSecurityConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSecurityConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSecurityConfigsRequest) SetCheckId(v string) *DescribeInstanceSecurityConfigsRequest {
	s.CheckId = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsRequest) SetInstanceId(v string) *DescribeInstanceSecurityConfigsRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceSecurityConfigsResponseBody struct {
	// The return result of the request.
	InstanceSecurityConfigs *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs `json:"InstanceSecurityConfigs,omitempty" xml:"InstanceSecurityConfigs,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceSecurityConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSecurityConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSecurityConfigsResponseBody) SetInstanceSecurityConfigs(v *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs) *DescribeInstanceSecurityConfigsResponseBody {
	s.InstanceSecurityConfigs = v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBody) SetRequestId(v string) *DescribeInstanceSecurityConfigsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs struct {
	// The unique identifier of the check.
	CheckId *string `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The time when the check was performed.
	CheckTime *string `json:"CheckTime,omitempty" xml:"CheckTime,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The list of check items.
	SecurityConfigs []*DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs `json:"SecurityConfigs,omitempty" xml:"SecurityConfigs,omitempty" type:"Repeated"`
	// The total number of security check items for the cluster.
	TotalCheckCount *int32 `json:"TotalCheckCount,omitempty" xml:"TotalCheckCount,omitempty"`
	// The total number of detected cluster security risks.
	TotalRiskCount *int32 `json:"TotalRiskCount,omitempty" xml:"TotalRiskCount,omitempty"`
}

func (s DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs) SetCheckId(v string) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs {
	s.CheckId = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs) SetCheckTime(v string) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs {
	s.CheckTime = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs) SetInstanceId(v string) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs) SetSecurityConfigs(v []*DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs {
	s.SecurityConfigs = v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs) SetTotalCheckCount(v int32) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs {
	s.TotalCheckCount = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs) SetTotalRiskCount(v int32) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigs {
	s.TotalRiskCount = &v
	return s
}

type DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs struct {
	// The name of the check item.
	ConfigDescription *string `json:"ConfigDescription,omitempty" xml:"ConfigDescription,omitempty"`
	// The group of the check.
	ConfigGroup *string `json:"ConfigGroup,omitempty" xml:"ConfigGroup,omitempty"`
	// The name of the specific check item.
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	// Specifies whether a risk is detected.
	Risk *bool `json:"Risk,omitempty" xml:"Risk,omitempty"`
	// Security recommendations.
	RiskDescription *string `json:"RiskDescription,omitempty" xml:"RiskDescription,omitempty"`
}

func (s DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs) SetConfigDescription(v string) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs {
	s.ConfigDescription = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs) SetConfigGroup(v string) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs {
	s.ConfigGroup = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs) SetConfigName(v string) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs {
	s.ConfigName = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs) SetRisk(v bool) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs {
	s.Risk = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs) SetRiskDescription(v string) *DescribeInstanceSecurityConfigsResponseBodyInstanceSecurityConfigsSecurityConfigs {
	s.RiskDescription = &v
	return s
}

type DescribeInstanceSecurityConfigsResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceSecurityConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceSecurityConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSecurityConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSecurityConfigsResponse) SetHeaders(v map[string]*string) *DescribeInstanceSecurityConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponse) SetStatusCode(v int32) *DescribeInstanceSecurityConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceSecurityConfigsResponse) SetBody(v *DescribeInstanceSecurityConfigsResponseBody) *DescribeInstanceSecurityConfigsResponse {
	s.Body = v
	return s
}

type DescribeInstanceTagsRequest struct {
	// The list of tags.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The returned response.
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s DescribeInstanceTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTagsRequest) SetInstanceIds(v string) *DescribeInstanceTagsRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstanceTagsRequest) SetTags(v string) *DescribeInstanceTagsRequest {
	s.Tags = &v
	return s
}

type DescribeInstanceTagsResponseBody struct {
	// The resource ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The request ID.
	TagResources []*DescribeInstanceTagsResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTagsResponseBody) SetRequestId(v string) *DescribeInstanceTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceTagsResponseBody) SetTagResources(v []*DescribeInstanceTagsResponseBodyTagResources) *DescribeInstanceTagsResponseBody {
	s.TagResources = v
	return s
}

type DescribeInstanceTagsResponseBodyTagResources struct {
	// You can call this operation to view the tag value of a cluster.
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s DescribeInstanceTagsResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTagsResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTagsResponseBodyTagResources) SetResourceId(v string) *DescribeInstanceTagsResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *DescribeInstanceTagsResponseBodyTagResources) SetResourceType(v string) *DescribeInstanceTagsResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *DescribeInstanceTagsResponseBodyTagResources) SetTag(v string) *DescribeInstanceTagsResponseBodyTagResources {
	s.Tag = &v
	return s
}

type DescribeInstanceTagsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTagsResponse) SetHeaders(v map[string]*string) *DescribeInstanceTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTagsResponse) SetStatusCode(v int32) *DescribeInstanceTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceTagsResponse) SetBody(v *DescribeInstanceTagsResponseBody) *DescribeInstanceTagsResponse {
	s.Body = v
	return s
}

type DescribeInstanceTenantModesRequest struct {
	// The operation that you want to perform.
	// Set the value to **DescribeInstanceTenantModes**.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceTenantModesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTenantModesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTenantModesRequest) SetInstanceId(v string) *DescribeInstanceTenantModesRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceTenantModesResponseBody struct {
	InstanceModes []*string `json:"InstanceModes,omitempty" xml:"InstanceModes,omitempty" type:"Repeated"`
	RequestId     *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceTenantModesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTenantModesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTenantModesResponseBody) SetInstanceModes(v []*string) *DescribeInstanceTenantModesResponseBody {
	s.InstanceModes = v
	return s
}

func (s *DescribeInstanceTenantModesResponseBody) SetRequestId(v string) *DescribeInstanceTenantModesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceTenantModesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceTenantModesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceTenantModesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTenantModesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTenantModesResponse) SetHeaders(v map[string]*string) *DescribeInstanceTenantModesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTenantModesResponse) SetStatusCode(v int32) *DescribeInstanceTenantModesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceTenantModesResponse) SetBody(v *DescribeInstanceTenantModesResponseBody) *DescribeInstanceTenantModesResponse {
	s.Body = v
	return s
}

type DescribeInstanceTopologyRequest struct {
	// The status of the node.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyRequest) SetInstanceId(v string) *DescribeInstanceTopologyRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceTopologyResponseBody struct {
	// The number of CPU cores used by the node.
	InstanceTopology *DescribeInstanceTopologyResponseBodyInstanceTopology `json:"InstanceTopology,omitempty" xml:"InstanceTopology,omitempty" type:"Struct"`
	// The information about the CPU resources of the node.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceTopologyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBody) SetInstanceTopology(v *DescribeInstanceTopologyResponseBodyInstanceTopology) *DescribeInstanceTopologyResponseBody {
	s.InstanceTopology = v
	return s
}

func (s *DescribeInstanceTopologyResponseBody) SetRequestId(v string) *DescribeInstanceTopologyResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopology struct {
	// The total number of CPU cores for the node.
	Tenants []*DescribeInstanceTopologyResponseBodyInstanceTopologyTenants `json:"Tenants,omitempty" xml:"Tenants,omitempty" type:"Repeated"`
	// The information about resource units.
	Zones []*DescribeInstanceTopologyResponseBodyInstanceTopologyZones `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopology) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopology) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopology) SetTenants(v []*DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) *DescribeInstanceTopologyResponseBodyInstanceTopology {
	s.Tenants = v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopology) SetZones(v []*DescribeInstanceTopologyResponseBodyInstanceTopologyZones) *DescribeInstanceTopologyResponseBodyInstanceTopology {
	s.Zones = v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyTenants struct {
	// The server with the highest disk usage.
	PrimaryZoneDeployType *string `json:"PrimaryZoneDeployType,omitempty" xml:"PrimaryZoneDeployType,omitempty"`
	// The information about the memory resources of the node.
	TenantCpu *float32 `json:"TenantCpu,omitempty" xml:"TenantCpu,omitempty"`
	// The name of the tenant.
	TenantDeployType *string `json:"TenantDeployType,omitempty" xml:"TenantDeployType,omitempty"`
	// The size of used memory of the node, in GB.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The total storage space of the node, in GB.
	TenantMemory *float32 `json:"TenantMemory,omitempty" xml:"TenantMemory,omitempty"`
	// The size of used storage space of the node, in GB.
	TenantMode *string `json:"TenantMode,omitempty" xml:"TenantMode,omitempty"`
	// The total memory size of the node, in GB.
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	// The size of used memory of the node, in GB.
	TenantStatus *string `json:"TenantStatus,omitempty" xml:"TenantStatus,omitempty"`
	// The number of CPU cores of the tenant.
	TenantUnitNum *int32 `json:"TenantUnitNum,omitempty" xml:"TenantUnitNum,omitempty"`
	// The information about the storage resources of the node.
	TenantZones []*DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones `json:"TenantZones,omitempty" xml:"TenantZones,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetPrimaryZoneDeployType(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.PrimaryZoneDeployType = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetTenantCpu(v float32) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.TenantCpu = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetTenantDeployType(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.TenantDeployType = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetTenantId(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.TenantId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetTenantMemory(v float32) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.TenantMemory = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetTenantMode(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.TenantMode = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetTenantName(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.TenantName = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetTenantStatus(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.TenantStatus = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetTenantUnitNum(v int32) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.TenantUnitNum = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants) SetTenantZones(v []*DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenants {
	s.TenantZones = v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones struct {
	// The maximum disk usage, in percentage.
	IsPrimaryTenantZone *string `json:"IsPrimaryTenantZone,omitempty" xml:"IsPrimaryTenantZone,omitempty"`
	// The server with the highest disk usage.
	TenantZoneId *string `json:"TenantZoneId,omitempty" xml:"TenantZoneId,omitempty"`
	// The information of zones.
	TenantZoneRole *string `json:"TenantZoneRole,omitempty" xml:"TenantZoneRole,omitempty"`
	// The information about the storage resources.
	Units []*DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits `json:"Units,omitempty" xml:"Units,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones) SetIsPrimaryTenantZone(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones {
	s.IsPrimaryTenantZone = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones) SetTenantZoneId(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones {
	s.TenantZoneId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones) SetTenantZoneRole(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones {
	s.TenantZoneRole = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones) SetUnits(v []*DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZones {
	s.Units = v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits struct {
	// Indicates whether the migration can be canceled.
	// This field is valid only for units that are being manually immigrated or emigrated.
	EnableCancelMigrateUnit *bool `json:"EnableCancelMigrateUnit,omitempty" xml:"EnableCancelMigrateUnit,omitempty"`
	// The return result of the request.
	EnableMigrateUnit *bool `json:"EnableMigrateUnit,omitempty" xml:"EnableMigrateUnit,omitempty"`
	// The return result of the request.
	ManualMigrate *bool `json:"ManualMigrate,omitempty" xml:"ManualMigrate,omitempty"`
	// It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.
	NodeId      *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ReplicaType *string `json:"ReplicaType,omitempty" xml:"ReplicaType,omitempty"`
	// Alibaba Cloud CLI
	UnitCpu *float32 `json:"UnitCpu,omitempty" xml:"UnitCpu,omitempty"`
	// The operation that you want to perform.
	// Set the value to **DescribeInstanceTopology**.
	UnitDataSize *int64 `json:"UnitDataSize,omitempty" xml:"UnitDataSize,omitempty"`
	// The topology of the cluster.
	UnitId *string `json:"UnitId,omitempty" xml:"UnitId,omitempty"`
	// The ID of the tenant.
	UnitMemory *float32 `json:"UnitMemory,omitempty" xml:"UnitMemory,omitempty"`
	// You can call this operation to query the topology of an OceanBase cluster.
	UnitStatus *string `json:"UnitStatus,omitempty" xml:"UnitStatus,omitempty"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetEnableCancelMigrateUnit(v bool) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.EnableCancelMigrateUnit = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetEnableMigrateUnit(v bool) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.EnableMigrateUnit = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetManualMigrate(v bool) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.ManualMigrate = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetNodeId(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.NodeId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetReplicaType(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.ReplicaType = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetUnitCpu(v float32) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.UnitCpu = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetUnitDataSize(v int64) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.UnitDataSize = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetUnitId(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.UnitId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetUnitMemory(v float32) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.UnitMemory = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits) SetUnitStatus(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyTenantsTenantZonesUnits {
	s.UnitStatus = &v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyZones struct {
	// The ID of the region.
	Nodes []*DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	// The zone information of the cluster.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The information about the memory resources of the node.
	ZoneDisk *string `json:"ZoneDisk,omitempty" xml:"ZoneDisk,omitempty"`
	// The information of the tenant.
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	// Example 1
	ZoneResource *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResource `json:"ZoneResource,omitempty" xml:"ZoneResource,omitempty" type:"Struct"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZones) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZones) SetNodes(v []*DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) *DescribeInstanceTopologyResponseBodyInstanceTopologyZones {
	s.Nodes = v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZones) SetRegion(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyZones {
	s.Region = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZones) SetZoneDisk(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyZones {
	s.ZoneDisk = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZones) SetZoneId(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyZones {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZones) SetZoneResource(v *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResource) *DescribeInstanceTopologyResponseBodyInstanceTopologyZones {
	s.ZoneResource = v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes struct {
	FullCopyId *int64 `json:"FullCopyId,omitempty" xml:"FullCopyId,omitempty"`
	// The information of zones.
	NodeCopyId *int64 `json:"NodeCopyId,omitempty" xml:"NodeCopyId,omitempty"`
	// The ID of the resource unit.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The ID of the node.
	NodeResource []*DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource `json:"NodeResource,omitempty" xml:"NodeResource,omitempty" type:"Repeated"`
	// The ID of the OBServer where the resource unit resides.
	NodeStatus     *string `json:"NodeStatus,omitempty" xml:"NodeStatus,omitempty"`
	ReadOnlyCopyId *int64  `json:"ReadOnlyCopyId,omitempty" xml:"ReadOnlyCopyId,omitempty"`
	ReplicaType    *string `json:"ReplicaType,omitempty" xml:"ReplicaType,omitempty"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) SetFullCopyId(v int64) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes {
	s.FullCopyId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) SetNodeCopyId(v int64) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes {
	s.NodeCopyId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) SetNodeId(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes {
	s.NodeId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) SetNodeResource(v []*DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes {
	s.NodeResource = v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) SetNodeStatus(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes {
	s.NodeStatus = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) SetReadOnlyCopyId(v int64) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes {
	s.ReadOnlyCopyId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes) SetReplicaType(v string) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodes {
	s.ReplicaType = &v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource struct {
	// The memory size of the tenant, in GB.
	Cpu *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceCpu `json:"Cpu,omitempty" xml:"Cpu,omitempty" type:"Struct"`
	// The information about the CPU resources of the node.
	DiskSize *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceDiskSize `json:"DiskSize,omitempty" xml:"DiskSize,omitempty" type:"Struct"`
	// The role to access the zone. Valid values:
	//  - ReadWrite: a role that has the read and write privileges.
	//  - ReadOnly: a role that has only the read-only privilege.
	Memory *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceMemory `json:"Memory,omitempty" xml:"Memory,omitempty" type:"Struct"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource) SetCpu(v *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceCpu) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource {
	s.Cpu = v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource) SetDiskSize(v *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceDiskSize) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource {
	s.DiskSize = v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource) SetMemory(v *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceMemory) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResource {
	s.Memory = v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceCpu struct {
	// The size of used storage space of the node, in GB.
	TotalCpu *int32 `json:"TotalCpu,omitempty" xml:"TotalCpu,omitempty"`
	// Indicates whether migration can be performed.
	UsedCpu *float32 `json:"UsedCpu,omitempty" xml:"UsedCpu,omitempty"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceCpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceCpu) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceCpu) SetTotalCpu(v int32) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceCpu {
	s.TotalCpu = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceCpu) SetUsedCpu(v float32) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceCpu {
	s.UsedCpu = &v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceDiskSize struct {
	// The deployment type of the primary zone.
	TotalDiskSize *float64 `json:"TotalDiskSize,omitempty" xml:"TotalDiskSize,omitempty"`
	// The status of the tenant.
	// - PENDING_CREATE: The tenant is being created.
	// - RESTORE: The tenant is being recovered.
	// - ONLINE: The tenant is running.
	// - SPEC_MODIFYING: The specification of the tenant is being modified.
	// - ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.
	// - PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.
	// - PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.
	// - PARAMETER_MODIFYING: Parameters are being modified.
	// - WHITE_LIST_MODIFYING: The whitelist is being modified.
	UsedDiskSize *float64 `json:"UsedDiskSize,omitempty" xml:"UsedDiskSize,omitempty"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceDiskSize) SetTotalDiskSize(v float64) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceDiskSize {
	s.TotalDiskSize = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceDiskSize) SetUsedDiskSize(v float64) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceDiskSize {
	s.UsedDiskSize = &v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceMemory struct {
	// The ID of the replica node.
	TotalMemory *int64 `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	// The information of node resources.
	UsedMemory *float32 `json:"UsedMemory,omitempty" xml:"UsedMemory,omitempty"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceMemory) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceMemory) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceMemory) SetTotalMemory(v int64) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceMemory {
	s.TotalMemory = &v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceMemory) SetUsedMemory(v float32) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesNodesNodeResourceMemory {
	s.UsedMemory = &v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResource struct {
	DiskSize *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResourceDiskSize `json:"DiskSize,omitempty" xml:"DiskSize,omitempty" type:"Struct"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResource) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResource) SetDiskSize(v *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResourceDiskSize) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResource {
	s.DiskSize = v
	return s
}

type DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResourceDiskSize struct {
	MaxDiskUsedObServer []*string `json:"MaxDiskUsedObServer,omitempty" xml:"MaxDiskUsedObServer,omitempty" type:"Repeated"`
	// DescribeInstanceTopology
	MaxDiskUsedPercent *float64 `json:"MaxDiskUsedPercent,omitempty" xml:"MaxDiskUsedPercent,omitempty"`
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResourceDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResourceDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResourceDiskSize) SetMaxDiskUsedObServer(v []*string) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResourceDiskSize {
	s.MaxDiskUsedObServer = v
	return s
}

func (s *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResourceDiskSize) SetMaxDiskUsedPercent(v float64) *DescribeInstanceTopologyResponseBodyInstanceTopologyZonesZoneResourceDiskSize {
	s.MaxDiskUsedPercent = &v
	return s
}

type DescribeInstanceTopologyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceTopologyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponse) SetHeaders(v map[string]*string) *DescribeInstanceTopologyResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTopologyResponse) SetStatusCode(v int32) *DescribeInstanceTopologyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceTopologyResponse) SetBody(v *DescribeInstanceTopologyResponseBody) *DescribeInstanceTopologyResponse {
	s.Body = v
	return s
}

type DescribeInstancesRequest struct {
	// The number of CPU cores used in the cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The size of used memory in the cluster, in GB.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The total memory size of the cluster, in GB.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The information about the memory resources of the cluster.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The number of CPU cores of each replica node in the cluster.
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The memory size of each replica node in the cluster, in GB.
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
}

func (s DescribeInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequest) SetInstanceId(v string) *DescribeInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceName(v string) *DescribeInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageNumber(v int32) *DescribeInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageSize(v int32) *DescribeInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesRequest) SetResourceGroupId(v string) *DescribeInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeInstancesRequest) SetSearchKey(v string) *DescribeInstancesRequest {
	s.SearchKey = &v
	return s
}

type DescribeInstancesResponseBody struct {
	// The total storage space of the cluster, in GB.
	Instances  []*DescribeInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBody) SetInstances(v []*DescribeInstancesResponseBodyInstances) *DescribeInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeInstancesResponseBody) SetRequestId(v string) *DescribeInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetTotalCount(v int32) *DescribeInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstancesResponseBodyInstances struct {
	// The time in UTC when the cluster expires.
	AvailableZones []*string `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" type:"Repeated"`
	// The storage space of each replica node in the cluster, in GB.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The product code of the OceanBase cluster.
	// - oceanbase_oceanbasepre_public_cn: indicates an OceanBase cluster that is billed based on the subscription plan and that is deployed in a China site.
	// - oceanbase_oceanbasepost_public_cn: indicates an OceanBase cluster that is billed based on the pay-as-you-go plan and that is deployed in a China site.
	// - oceanbase_obpre_public_intl: indicates an OceanBase cluster that is billed based on the subscription plan and that is deployed in an international site.
	Cpu             *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CpuArchitecture *string `json:"CpuArchitecture,omitempty" xml:"CpuArchitecture,omitempty"`
	// The number of OceanBase clusters queried.
	CreateTime              *string                                                        `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataDiskAutoScaleConfig *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig `json:"DataDiskAutoScaleConfig,omitempty" xml:"DataDiskAutoScaleConfig,omitempty" type:"Struct"`
	// The request ID.
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.
	DeployType *string `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	// The information about the memory resources of the cluster.
	DiskSize *string `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// The number of CPU cores used in the cluster.
	DiskType                        *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	EnableReadOnlyReplicaManagement *bool   `json:"EnableReadOnlyReplicaManagement,omitempty" xml:"EnableReadOnlyReplicaManagement,omitempty"`
	// The ID of the OceanBase cluster.
	EnableUpgradeNodes *bool `json:"EnableUpgradeNodes,omitempty" xml:"EnableUpgradeNodes,omitempty"`
	// The whitelist information of the cluster.
	ExpireSeconds *int32 `json:"ExpireSeconds,omitempty" xml:"ExpireSeconds,omitempty"`
	// The information about the storage resources of the cluster.
	ExpireTime           *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	InTempCapacityStatus *bool   `json:"InTempCapacityStatus,omitempty" xml:"InTempCapacityStatus,omitempty"`
	// The instance type.
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// The total storage space of the cluster, in GB.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The return result of the request.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceRole *string `json:"InstanceRole,omitempty" xml:"InstanceRole,omitempty"`
	// You can call this operation to obtain the list of OceanBase clusters.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The return result of the request.
	MaintainTime *string `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty"`
	// The information about the CPU resources of the cluster.
	Mem *int64 `json:"Mem,omitempty" xml:"Mem,omitempty"`
	// It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The type of the storage disk where the cluster is deployed.
	// The default value is cloud_essd_pl1, which indicates an ESSD cloud disk.
	Resource *DescribeInstancesResponseBodyInstancesResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// The number of OceanBase clusters queried.
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The billing method for the OceanBase cluster. Valid values:
	// - PREPAY: the subscription billing method.
	// - POSTPAY: the pay-as-you-go billing method.
	Series *string `json:"Series,omitempty" xml:"Series,omitempty"`
	// The number of resource units in the cluster.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The number of resource units in the cluster.
	UsedDiskSize *int64 `json:"UsedDiskSize,omitempty" xml:"UsedDiskSize,omitempty"`
	// The total number of CPU cores of the cluster.
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
	// vpcId
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstances) SetAvailableZones(v []*string) *DescribeInstancesResponseBodyInstances {
	s.AvailableZones = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetCommodityCode(v string) *DescribeInstancesResponseBodyInstances {
	s.CommodityCode = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetCpu(v int32) *DescribeInstancesResponseBodyInstances {
	s.Cpu = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetCpuArchitecture(v string) *DescribeInstancesResponseBodyInstances {
	s.CpuArchitecture = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetCreateTime(v string) *DescribeInstancesResponseBodyInstances {
	s.CreateTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDataDiskAutoScaleConfig(v *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) *DescribeInstancesResponseBodyInstances {
	s.DataDiskAutoScaleConfig = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDeployMode(v string) *DescribeInstancesResponseBodyInstances {
	s.DeployMode = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDeployType(v string) *DescribeInstancesResponseBodyInstances {
	s.DeployType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDiskSize(v string) *DescribeInstancesResponseBodyInstances {
	s.DiskSize = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetDiskType(v string) *DescribeInstancesResponseBodyInstances {
	s.DiskType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetEnableReadOnlyReplicaManagement(v bool) *DescribeInstancesResponseBodyInstances {
	s.EnableReadOnlyReplicaManagement = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetEnableUpgradeNodes(v bool) *DescribeInstancesResponseBodyInstances {
	s.EnableUpgradeNodes = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetExpireSeconds(v int32) *DescribeInstancesResponseBodyInstances {
	s.ExpireSeconds = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetExpireTime(v string) *DescribeInstancesResponseBodyInstances {
	s.ExpireTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInTempCapacityStatus(v bool) *DescribeInstancesResponseBodyInstances {
	s.InTempCapacityStatus = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceClass(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceClass = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceId(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceName(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceRole(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceRole = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceType(v string) *DescribeInstancesResponseBodyInstances {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetMaintainTime(v string) *DescribeInstancesResponseBodyInstances {
	s.MaintainTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetMem(v int64) *DescribeInstancesResponseBodyInstances {
	s.Mem = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetPayType(v string) *DescribeInstancesResponseBodyInstances {
	s.PayType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetResource(v *DescribeInstancesResponseBodyInstancesResource) *DescribeInstancesResponseBodyInstances {
	s.Resource = v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetResourceGroupId(v string) *DescribeInstancesResponseBodyInstances {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetSeries(v string) *DescribeInstancesResponseBodyInstances {
	s.Series = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetState(v string) *DescribeInstancesResponseBodyInstances {
	s.State = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetUsedDiskSize(v int64) *DescribeInstancesResponseBodyInstances {
	s.UsedDiskSize = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetVersion(v string) *DescribeInstancesResponseBodyInstances {
	s.Version = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstances) SetVpcId(v string) *DescribeInstancesResponseBodyInstances {
	s.VpcId = &v
	return s
}

type DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig struct {
	AutoScale           *bool   `json:"AutoScale,omitempty" xml:"AutoScale,omitempty"`
	MaxDiskSize         *int64  `json:"MaxDiskSize,omitempty" xml:"MaxDiskSize,omitempty"`
	ScaleStepInMerge    *int64  `json:"ScaleStepInMerge,omitempty" xml:"ScaleStepInMerge,omitempty"`
	ScaleStepInNormal   *int64  `json:"ScaleStepInNormal,omitempty" xml:"ScaleStepInNormal,omitempty"`
	UpperMergeThreshold *int64  `json:"UpperMergeThreshold,omitempty" xml:"UpperMergeThreshold,omitempty"`
	UpperScaleStrategy  *string `json:"UpperScaleStrategy,omitempty" xml:"UpperScaleStrategy,omitempty"`
	UpperThreshold      *int64  `json:"UpperThreshold,omitempty" xml:"UpperThreshold,omitempty"`
	Upperbound          *int64  `json:"Upperbound,omitempty" xml:"Upperbound,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) SetAutoScale(v bool) *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig {
	s.AutoScale = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) SetMaxDiskSize(v int64) *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig {
	s.MaxDiskSize = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) SetScaleStepInMerge(v int64) *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig {
	s.ScaleStepInMerge = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) SetScaleStepInNormal(v int64) *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig {
	s.ScaleStepInNormal = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) SetUpperMergeThreshold(v int64) *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig {
	s.UpperMergeThreshold = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) SetUpperScaleStrategy(v string) *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig {
	s.UpperScaleStrategy = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) SetUpperThreshold(v int64) *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig {
	s.UpperThreshold = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig) SetUpperbound(v int64) *DescribeInstancesResponseBodyInstancesDataDiskAutoScaleConfig {
	s.Upperbound = &v
	return s
}

type DescribeInstancesResponseBodyInstancesResource struct {
	CapacityUnit *DescribeInstancesResponseBodyInstancesResourceCapacityUnit `json:"CapacityUnit,omitempty" xml:"CapacityUnit,omitempty" type:"Struct"`
	// Indicates whether new nodes can be added.
	Cpu *DescribeInstancesResponseBodyInstancesResourceCpu `json:"Cpu,omitempty" xml:"Cpu,omitempty" type:"Struct"`
	// The time elapsed since the expiration of the cluster, in seconds.
	DiskSize *DescribeInstancesResponseBodyInstancesResourceDiskSize `json:"DiskSize,omitempty" xml:"DiskSize,omitempty" type:"Struct"`
	// The status of the cluster. Valid values:
	// - PENDING_CREATE: The cluster is being created.
	// - ONLINE: The cluster is running.
	// - TENANT_CREATING: The tenant is being created.
	// - TENANT_SPEC_MODIFYING: The tenant specifications are being modified.
	// - EXPANDING: Nodes are being added to the cluster to increase its capacity.
	// - REDUCING: Nodes are being removed from the cluster to reduce its capacity.
	// - SPEC_UPGRADING: The service plan is being upgraded.
	// - DISK_UPGRADING: The storage space is being expanded.
	// - WHITE_LIST_MODIFYING: The whitelist is being modified.
	// - PARAMETER_MODIFYING: Parameters are being modified.
	// - SSL_MODIFYING: The SSL certificate is being changed.
	// - PREPAID_EXPIRE_CLOSED: The payment is overdue. This parameter is valid for a cluster whose billing method is set to PREPAY.
	// - ARREARS_CLOSED: The payment is overdue. This parameter is valid for a cluster whose billing method is set to POSTPAY.
	// - PENDING_DELETE: The cluster is being deleted.
	// Generally, the cluster is in the ONLINE state.
	Memory    *DescribeInstancesResponseBodyInstancesResourceMemory `json:"Memory,omitempty" xml:"Memory,omitempty" type:"Struct"`
	UnitCount *int64                                                `json:"UnitCount,omitempty" xml:"UnitCount,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesResource) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesResource) SetCapacityUnit(v *DescribeInstancesResponseBodyInstancesResourceCapacityUnit) *DescribeInstancesResponseBodyInstancesResource {
	s.CapacityUnit = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResource) SetCpu(v *DescribeInstancesResponseBodyInstancesResourceCpu) *DescribeInstancesResponseBodyInstancesResource {
	s.Cpu = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResource) SetDiskSize(v *DescribeInstancesResponseBodyInstancesResourceDiskSize) *DescribeInstancesResponseBodyInstancesResource {
	s.DiskSize = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResource) SetMemory(v *DescribeInstancesResponseBodyInstancesResourceMemory) *DescribeInstancesResponseBodyInstancesResource {
	s.Memory = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResource) SetUnitCount(v int64) *DescribeInstancesResponseBodyInstancesResource {
	s.UnitCount = &v
	return s
}

type DescribeInstancesResponseBodyInstancesResourceCapacityUnit struct {
	MaxCapacityUnit  *int32 `json:"MaxCapacityUnit,omitempty" xml:"MaxCapacityUnit,omitempty"`
	MinCapacityUnit  *int32 `json:"MinCapacityUnit,omitempty" xml:"MinCapacityUnit,omitempty"`
	UsedCapacityUnit *int32 `json:"UsedCapacityUnit,omitempty" xml:"UsedCapacityUnit,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesResourceCapacityUnit) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesResourceCapacityUnit) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesResourceCapacityUnit) SetMaxCapacityUnit(v int32) *DescribeInstancesResponseBodyInstancesResourceCapacityUnit {
	s.MaxCapacityUnit = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceCapacityUnit) SetMinCapacityUnit(v int32) *DescribeInstancesResponseBodyInstancesResourceCapacityUnit {
	s.MinCapacityUnit = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceCapacityUnit) SetUsedCapacityUnit(v int32) *DescribeInstancesResponseBodyInstancesResourceCapacityUnit {
	s.UsedCapacityUnit = &v
	return s
}

type DescribeInstancesResponseBodyInstancesResourceCpu struct {
	OriginalTotalCpu *int64 `json:"OriginalTotalCpu,omitempty" xml:"OriginalTotalCpu,omitempty"`
	// The name of the OceanBase cluster.
	// It must be 1 to 20 characters in length.
	// If this parameter is not specified, the value is the instance ID of the cluster by default.
	TotalCpu *int64 `json:"TotalCpu,omitempty" xml:"TotalCpu,omitempty"`
	// The data replica distribution mode of the cluster. Valid values:
	//
	// - n: indicates the single-IDC mode.
	// - n-n: indicates the dual-IDC mode.
	// - n-n-n: indicates the multi-IDC mode. The integer n represents the number of OBServer nodes in each IDC.
	UnitCpu *int64 `json:"UnitCpu,omitempty" xml:"UnitCpu,omitempty"`
	// The search keyword.
	UsedCpu *int64 `json:"UsedCpu,omitempty" xml:"UsedCpu,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesResourceCpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesResourceCpu) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesResourceCpu) SetOriginalTotalCpu(v int64) *DescribeInstancesResponseBodyInstancesResourceCpu {
	s.OriginalTotalCpu = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceCpu) SetTotalCpu(v int64) *DescribeInstancesResponseBodyInstancesResourceCpu {
	s.TotalCpu = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceCpu) SetUnitCpu(v int64) *DescribeInstancesResponseBodyInstancesResourceCpu {
	s.UnitCpu = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceCpu) SetUsedCpu(v int64) *DescribeInstancesResponseBodyInstancesResourceCpu {
	s.UsedCpu = &v
	return s
}

type DescribeInstancesResponseBodyInstancesResourceDiskSize struct {
	OriginalTotalDiskSize *int64 `json:"OriginalTotalDiskSize,omitempty" xml:"OriginalTotalDiskSize,omitempty"`
	// The request ID.
	TotalDiskSize *int64 `json:"TotalDiskSize,omitempty" xml:"TotalDiskSize,omitempty"`
	// Example 1
	UnitDiskSize *int64 `json:"UnitDiskSize,omitempty" xml:"UnitDiskSize,omitempty"`
	// $.parameters[7].schema.example
	UsedDiskSize *int64 `json:"UsedDiskSize,omitempty" xml:"UsedDiskSize,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesResourceDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesResourceDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesResourceDiskSize) SetOriginalTotalDiskSize(v int64) *DescribeInstancesResponseBodyInstancesResourceDiskSize {
	s.OriginalTotalDiskSize = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceDiskSize) SetTotalDiskSize(v int64) *DescribeInstancesResponseBodyInstancesResourceDiskSize {
	s.TotalDiskSize = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceDiskSize) SetUnitDiskSize(v int64) *DescribeInstancesResponseBodyInstancesResourceDiskSize {
	s.UnitDiskSize = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceDiskSize) SetUsedDiskSize(v int64) *DescribeInstancesResponseBodyInstancesResourceDiskSize {
	s.UsedDiskSize = &v
	return s
}

type DescribeInstancesResponseBodyInstancesResourceMemory struct {
	OriginalTotalMemory *int64 `json:"OriginalTotalMemory,omitempty" xml:"OriginalTotalMemory,omitempty"`
	// The number of CPU cores of the cluster.
	TotalMemory *int64 `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	// The size of used storage space of the cluster, in GB.
	UnitMemory *int64 `json:"UnitMemory,omitempty" xml:"UnitMemory,omitempty"`
	// The size of used memory in the cluster, in GB.
	UsedMemory *int64 `json:"UsedMemory,omitempty" xml:"UsedMemory,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesResourceMemory) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesResourceMemory) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesResourceMemory) SetOriginalTotalMemory(v int64) *DescribeInstancesResponseBodyInstancesResourceMemory {
	s.OriginalTotalMemory = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceMemory) SetTotalMemory(v int64) *DescribeInstancesResponseBodyInstancesResourceMemory {
	s.TotalMemory = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceMemory) SetUnitMemory(v int64) *DescribeInstancesResponseBodyInstancesResourceMemory {
	s.UnitMemory = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesResourceMemory) SetUsedMemory(v int64) *DescribeInstancesResponseBodyInstancesResourceMemory {
	s.UsedMemory = &v
	return s
}

type DescribeInstancesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponse) SetHeaders(v map[string]*string) *DescribeInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancesResponse) SetStatusCode(v int32) *DescribeInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancesResponse) SetBody(v *DescribeInstancesResponseBody) *DescribeInstancesResponse {
	s.Body = v
	return s
}

type DescribeMetricsDataRequest struct {
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	GroupByLabels *string `json:"GroupByLabels,omitempty" xml:"GroupByLabels,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Labels        *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	Limit         *string `json:"Limit,omitempty" xml:"Limit,omitempty"`
	Metrics       *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	ReplicaType   *string `json:"ReplicaType,omitempty" xml:"ReplicaType,omitempty"`
	SortMetricKey *string `json:"SortMetricKey,omitempty" xml:"SortMetricKey,omitempty"`
	SortOrder     *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeMetricsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricsDataRequest) SetEndTime(v string) *DescribeMetricsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMetricsDataRequest) SetGroupByLabels(v string) *DescribeMetricsDataRequest {
	s.GroupByLabels = &v
	return s
}

func (s *DescribeMetricsDataRequest) SetInstanceId(v string) *DescribeMetricsDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeMetricsDataRequest) SetLabels(v string) *DescribeMetricsDataRequest {
	s.Labels = &v
	return s
}

func (s *DescribeMetricsDataRequest) SetLimit(v string) *DescribeMetricsDataRequest {
	s.Limit = &v
	return s
}

func (s *DescribeMetricsDataRequest) SetMetrics(v string) *DescribeMetricsDataRequest {
	s.Metrics = &v
	return s
}

func (s *DescribeMetricsDataRequest) SetReplicaType(v string) *DescribeMetricsDataRequest {
	s.ReplicaType = &v
	return s
}

func (s *DescribeMetricsDataRequest) SetSortMetricKey(v string) *DescribeMetricsDataRequest {
	s.SortMetricKey = &v
	return s
}

func (s *DescribeMetricsDataRequest) SetSortOrder(v string) *DescribeMetricsDataRequest {
	s.SortOrder = &v
	return s
}

func (s *DescribeMetricsDataRequest) SetStartTime(v string) *DescribeMetricsDataRequest {
	s.StartTime = &v
	return s
}

type DescribeMetricsDataResponseBody struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMetricsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricsDataResponseBody) SetData(v string) *DescribeMetricsDataResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeMetricsDataResponseBody) SetRequestId(v string) *DescribeMetricsDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMetricsDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricsDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricsDataResponse) SetHeaders(v map[string]*string) *DescribeMetricsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricsDataResponse) SetStatusCode(v int32) *DescribeMetricsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricsDataResponse) SetBody(v *DescribeMetricsDataResponseBody) *DescribeMetricsDataResponse {
	s.Body = v
	return s
}

type DescribeNodeMetricsRequest struct {
	// $.parameters[7].schema.description
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The list of nodes.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// $.parameters[7].schema.enumValueTitles
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// $.parameters[10].schema.description
	NodeIdList *string `json:"NodeIdList,omitempty" xml:"NodeIdList,omitempty"`
	// $.parameters[8].schema.example
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	// $.parameters[6].schema.description
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the tenant.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// $.parameters[9].schema.example
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// $.parameters[6].schema.enumValueTitles
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeNodeMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNodeMetricsRequest) GoString() string {
	return s.String()
}

func (s *DescribeNodeMetricsRequest) SetEndTime(v string) *DescribeNodeMetricsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeNodeMetricsRequest) SetInstanceId(v string) *DescribeNodeMetricsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeNodeMetricsRequest) SetMetrics(v string) *DescribeNodeMetricsRequest {
	s.Metrics = &v
	return s
}

func (s *DescribeNodeMetricsRequest) SetNodeIdList(v string) *DescribeNodeMetricsRequest {
	s.NodeIdList = &v
	return s
}

func (s *DescribeNodeMetricsRequest) SetNodeName(v string) *DescribeNodeMetricsRequest {
	s.NodeName = &v
	return s
}

func (s *DescribeNodeMetricsRequest) SetPageNumber(v int32) *DescribeNodeMetricsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNodeMetricsRequest) SetPageSize(v int32) *DescribeNodeMetricsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNodeMetricsRequest) SetStartTime(v string) *DescribeNodeMetricsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeNodeMetricsRequest) SetTenantId(v string) *DescribeNodeMetricsRequest {
	s.TenantId = &v
	return s
}

type DescribeNodeMetricsResponseBody struct {
	NodeMetrics *string `json:"NodeMetrics,omitempty" xml:"NodeMetrics,omitempty"`
	// You can call this operation to query the detailed metrics information of an OceanBase Database node.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// ```
	// http(s)://[Endpoint]/?Action=DescribeNodeMetrics
	// &InstanceId=ob317v4uif****
	// &PageSize=10
	// &PageNumber=1
	// &TenantId=ob2mr3oae0****
	// &StartTime=2021-06-13 15:40:43
	// &EndTime=2021-09-13 15:40:43
	// &Metrics=tps
	// &NodeName=i-bp16niirq4zdmgvm****
	// &NodeIdList=["i-bp19y05uq6xpacyqnlrc","i-bp1blcr3htr3g3u2vqvu","i-bp1392ikhayhr3hi4fli"]
	// &Common request parameters
	// ```
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNodeMetricsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNodeMetricsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNodeMetricsResponseBody) SetNodeMetrics(v string) *DescribeNodeMetricsResponseBody {
	s.NodeMetrics = &v
	return s
}

func (s *DescribeNodeMetricsResponseBody) SetRequestId(v string) *DescribeNodeMetricsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNodeMetricsResponseBody) SetTotalCount(v int32) *DescribeNodeMetricsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNodeMetricsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNodeMetricsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNodeMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNodeMetricsResponse) GoString() string {
	return s.String()
}

func (s *DescribeNodeMetricsResponse) SetHeaders(v map[string]*string) *DescribeNodeMetricsResponse {
	s.Headers = v
	return s
}

func (s *DescribeNodeMetricsResponse) SetStatusCode(v int32) *DescribeNodeMetricsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNodeMetricsResponse) SetBody(v *DescribeNodeMetricsResponseBody) *DescribeNodeMetricsResponse {
	s.Body = v
	return s
}

type DescribeOasAnomalySQLListRequest struct {
	// The language of the response. Valid values:
	// - zh: Chinese
	// - en: English
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The current page.
	Current *int64 `json:"Current,omitempty" xml:"Current,omitempty"`
	// The name of the database.
	DbName     *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DynamicSql *bool   `json:"DynamicSql,omitempty" xml:"DynamicSql,omitempty"`
	// The end time of the monitoring data.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// All parameters are referenced by the symbol @. For a list of available parameters, refer to the returned parameters in [Query performance indicators of an SQL statement](https://en.oceanbase.com/docs/community-ocp-en-10000000000840290).
	FilterCondition *string `json:"FilterCondition,omitempty" xml:"FilterCondition,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MergeDynamicSql *bool   `json:"MergeDynamicSql,omitempty" xml:"MergeDynamicSql,omitempty"`
	// The node IP.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// Page size.
	// - Start value: 1
	// - Default value: 1
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The search keyword.
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// The search parameter.
	SearchParam *string `json:"SearchParam,omitempty" xml:"SearchParam,omitempty"`
	// The search rule.
	// Valid values: "=", ">", ">=", "<", and "<="
	SearchRule *string `json:"SearchRule,omitempty" xml:"SearchRule,omitempty"`
	// The search value.
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	// SQL ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// Max length of the returned SQL text.
	SqlTextLength *int64 `json:"SqlTextLength,omitempty" xml:"SqlTextLength,omitempty"`
	// The start time of the monitoring data.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeOasAnomalySQLListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasAnomalySQLListRequest) GoString() string {
	return s.String()
}

func (s *DescribeOasAnomalySQLListRequest) SetAcceptLanguage(v string) *DescribeOasAnomalySQLListRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetCurrent(v int64) *DescribeOasAnomalySQLListRequest {
	s.Current = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetDbName(v string) *DescribeOasAnomalySQLListRequest {
	s.DbName = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetDynamicSql(v bool) *DescribeOasAnomalySQLListRequest {
	s.DynamicSql = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetEndTime(v string) *DescribeOasAnomalySQLListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetFilterCondition(v string) *DescribeOasAnomalySQLListRequest {
	s.FilterCondition = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetInstanceId(v string) *DescribeOasAnomalySQLListRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetMergeDynamicSql(v bool) *DescribeOasAnomalySQLListRequest {
	s.MergeDynamicSql = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetNodeIp(v string) *DescribeOasAnomalySQLListRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetPageSize(v int64) *DescribeOasAnomalySQLListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetSearchKeyWord(v string) *DescribeOasAnomalySQLListRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetSearchParam(v string) *DescribeOasAnomalySQLListRequest {
	s.SearchParam = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetSearchRule(v string) *DescribeOasAnomalySQLListRequest {
	s.SearchRule = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetSearchValue(v string) *DescribeOasAnomalySQLListRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetSqlId(v string) *DescribeOasAnomalySQLListRequest {
	s.SqlId = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetSqlTextLength(v int64) *DescribeOasAnomalySQLListRequest {
	s.SqlTextLength = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetStartTime(v string) *DescribeOasAnomalySQLListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListRequest) SetTenantId(v string) *DescribeOasAnomalySQLListRequest {
	s.TenantId = &v
	return s
}

type DescribeOasAnomalySQLListResponseBody struct {
	// The list of suspicious SQLs.
	Data []*DescribeOasAnomalySQLListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total count.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeOasAnomalySQLListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasAnomalySQLListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOasAnomalySQLListResponseBody) SetData(v []*DescribeOasAnomalySQLListResponseBodyData) *DescribeOasAnomalySQLListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBody) SetRequestId(v string) *DescribeOasAnomalySQLListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBody) SetTotalCount(v int64) *DescribeOasAnomalySQLListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeOasAnomalySQLListResponseBodyData struct {
	// Average CPU time of the suspicious SQL.
	AvgCpuTime *float64 `json:"AvgCpuTime,omitempty" xml:"AvgCpuTime,omitempty"`
	AvgDbTime  *float64 `json:"AvgDbTime,omitempty" xml:"AvgDbTime,omitempty"`
	// Average response time of the suspicious SQL.
	AvgElapsedTime *float64 `json:"AvgElapsedTime,omitempty" xml:"AvgElapsedTime,omitempty"`
	// Average time to obtain the execution plan of the suspicious SQL.
	AvgGetPlanTime  *float64 `json:"AvgGetPlanTime,omitempty" xml:"AvgGetPlanTime,omitempty"`
	AvgLogicalReads *float32 `json:"AvgLogicalReads,omitempty" xml:"AvgLogicalReads,omitempty"`
	AvgRetryCount   *float32 `json:"AvgRetryCount,omitempty" xml:"AvgRetryCount,omitempty"`
	// CPU time of the suspicious SQL.
	CpuTime *float64 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The type of the diagnosis.
	DiagTypes []*string `json:"DiagTypes,omitempty" xml:"DiagTypes,omitempty" type:"Repeated"`
	// The details of diagnosis.
	Diagnosis  *string `json:"Diagnosis,omitempty" xml:"Diagnosis,omitempty"`
	DynamicSql *bool   `json:"DynamicSql,omitempty" xml:"DynamicSql,omitempty"`
	// Total execution count of the suspicious SQL.
	Executions *float64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// Last execution time of the suspicious SQL.
	LastExecutedTime *float64 `json:"LastExecutedTime,omitempty" xml:"LastExecutedTime,omitempty"`
	// Risk level.
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// SQL ID.
	SqlId   *string                                             `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	SqlList []*DescribeOasAnomalySQLListResponseBodyDataSqlList `json:"SqlList,omitempty" xml:"SqlList,omitempty" type:"Repeated"`
	// Prefix of the SQL text.
	SqlTextShort *string `json:"SqlTextShort,omitempty" xml:"SqlTextShort,omitempty"`
	// Suggestion for the suspicious SQL.
	Suggestion *string  `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	SumDbTime  *float64 `json:"SumDbTime,omitempty" xml:"SumDbTime,omitempty"`
	// Total response time of the suspicious SQL.
	SumElapsedTime *string  `json:"SumElapsedTime,omitempty" xml:"SumElapsedTime,omitempty"`
	SumRetryCount  *float32 `json:"SumRetryCount,omitempty" xml:"SumRetryCount,omitempty"`
	// Username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeOasAnomalySQLListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasAnomalySQLListResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetAvgCpuTime(v float64) *DescribeOasAnomalySQLListResponseBodyData {
	s.AvgCpuTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetAvgDbTime(v float64) *DescribeOasAnomalySQLListResponseBodyData {
	s.AvgDbTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetAvgElapsedTime(v float64) *DescribeOasAnomalySQLListResponseBodyData {
	s.AvgElapsedTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetAvgGetPlanTime(v float64) *DescribeOasAnomalySQLListResponseBodyData {
	s.AvgGetPlanTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetAvgLogicalReads(v float32) *DescribeOasAnomalySQLListResponseBodyData {
	s.AvgLogicalReads = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetAvgRetryCount(v float32) *DescribeOasAnomalySQLListResponseBodyData {
	s.AvgRetryCount = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetCpuTime(v float64) *DescribeOasAnomalySQLListResponseBodyData {
	s.CpuTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetDbName(v string) *DescribeOasAnomalySQLListResponseBodyData {
	s.DbName = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetDiagTypes(v []*string) *DescribeOasAnomalySQLListResponseBodyData {
	s.DiagTypes = v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetDiagnosis(v string) *DescribeOasAnomalySQLListResponseBodyData {
	s.Diagnosis = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetDynamicSql(v bool) *DescribeOasAnomalySQLListResponseBodyData {
	s.DynamicSql = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetExecutions(v float64) *DescribeOasAnomalySQLListResponseBodyData {
	s.Executions = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetLastExecutedTime(v float64) *DescribeOasAnomalySQLListResponseBodyData {
	s.LastExecutedTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetRiskLevel(v string) *DescribeOasAnomalySQLListResponseBodyData {
	s.RiskLevel = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetSqlId(v string) *DescribeOasAnomalySQLListResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetSqlList(v []*DescribeOasAnomalySQLListResponseBodyDataSqlList) *DescribeOasAnomalySQLListResponseBodyData {
	s.SqlList = v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetSqlTextShort(v string) *DescribeOasAnomalySQLListResponseBodyData {
	s.SqlTextShort = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetSuggestion(v string) *DescribeOasAnomalySQLListResponseBodyData {
	s.Suggestion = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetSumDbTime(v float64) *DescribeOasAnomalySQLListResponseBodyData {
	s.SumDbTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetSumElapsedTime(v string) *DescribeOasAnomalySQLListResponseBodyData {
	s.SumElapsedTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetSumRetryCount(v float32) *DescribeOasAnomalySQLListResponseBodyData {
	s.SumRetryCount = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyData) SetUserName(v string) *DescribeOasAnomalySQLListResponseBodyData {
	s.UserName = &v
	return s
}

type DescribeOasAnomalySQLListResponseBodyDataSqlList struct {
	AvgCpuTime       *float64  `json:"AvgCpuTime,omitempty" xml:"AvgCpuTime,omitempty"`
	AvgDbTime        *float64  `json:"AvgDbTime,omitempty" xml:"AvgDbTime,omitempty"`
	AvgElapsedTime   *float64  `json:"AvgElapsedTime,omitempty" xml:"AvgElapsedTime,omitempty"`
	AvgGetPlanTime   *float64  `json:"AvgGetPlanTime,omitempty" xml:"AvgGetPlanTime,omitempty"`
	AvgLogicalReads  *float32  `json:"AvgLogicalReads,omitempty" xml:"AvgLogicalReads,omitempty"`
	AvgRetryCount    *float32  `json:"AvgRetryCount,omitempty" xml:"AvgRetryCount,omitempty"`
	CpuTime          *float64  `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	DbName           *string   `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DiagTypes        []*string `json:"DiagTypes,omitempty" xml:"DiagTypes,omitempty" type:"Repeated"`
	Diagnosis        *string   `json:"Diagnosis,omitempty" xml:"Diagnosis,omitempty"`
	Executions       *float64  `json:"Executions,omitempty" xml:"Executions,omitempty"`
	LastExecutedTime *float64  `json:"LastExecutedTime,omitempty" xml:"LastExecutedTime,omitempty"`
	RiskLevel        *string   `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	SqlId            *string   `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	SqlTextShort     *string   `json:"SqlTextShort,omitempty" xml:"SqlTextShort,omitempty"`
	Suggestion       *string   `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	SumDbTime        *float64  `json:"SumDbTime,omitempty" xml:"SumDbTime,omitempty"`
	SumElapsedTime   *string   `json:"SumElapsedTime,omitempty" xml:"SumElapsedTime,omitempty"`
	SumRetryCount    *float32  `json:"SumRetryCount,omitempty" xml:"SumRetryCount,omitempty"`
	UserName         *string   `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeOasAnomalySQLListResponseBodyDataSqlList) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasAnomalySQLListResponseBodyDataSqlList) GoString() string {
	return s.String()
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetAvgCpuTime(v float64) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.AvgCpuTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetAvgDbTime(v float64) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.AvgDbTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetAvgElapsedTime(v float64) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.AvgElapsedTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetAvgGetPlanTime(v float64) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.AvgGetPlanTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetAvgLogicalReads(v float32) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.AvgLogicalReads = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetAvgRetryCount(v float32) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.AvgRetryCount = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetCpuTime(v float64) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.CpuTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetDbName(v string) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.DbName = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetDiagTypes(v []*string) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.DiagTypes = v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetDiagnosis(v string) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.Diagnosis = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetExecutions(v float64) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.Executions = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetLastExecutedTime(v float64) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.LastExecutedTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetRiskLevel(v string) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.RiskLevel = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetSqlId(v string) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.SqlId = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetSqlTextShort(v string) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.SqlTextShort = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetSuggestion(v string) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.Suggestion = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetSumDbTime(v float64) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.SumDbTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetSumElapsedTime(v string) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.SumElapsedTime = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetSumRetryCount(v float32) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.SumRetryCount = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponseBodyDataSqlList) SetUserName(v string) *DescribeOasAnomalySQLListResponseBodyDataSqlList {
	s.UserName = &v
	return s
}

type DescribeOasAnomalySQLListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOasAnomalySQLListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOasAnomalySQLListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasAnomalySQLListResponse) GoString() string {
	return s.String()
}

func (s *DescribeOasAnomalySQLListResponse) SetHeaders(v map[string]*string) *DescribeOasAnomalySQLListResponse {
	s.Headers = v
	return s
}

func (s *DescribeOasAnomalySQLListResponse) SetStatusCode(v int32) *DescribeOasAnomalySQLListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOasAnomalySQLListResponse) SetBody(v *DescribeOasAnomalySQLListResponseBody) *DescribeOasAnomalySQLListResponse {
	s.Body = v
	return s
}

type DescribeOasSQLDetailsRequest struct {
	// The name of the database.
	DbName     *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DynamicSql *bool   `json:"DynamicSql,omitempty" xml:"DynamicSql,omitempty"`
	// The end time of querying the SQL execution plan.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// SQL ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The start time of querying the SQL execution plan.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeOasSQLDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLDetailsRequest) SetDbName(v string) *DescribeOasSQLDetailsRequest {
	s.DbName = &v
	return s
}

func (s *DescribeOasSQLDetailsRequest) SetDynamicSql(v bool) *DescribeOasSQLDetailsRequest {
	s.DynamicSql = &v
	return s
}

func (s *DescribeOasSQLDetailsRequest) SetEndTime(v string) *DescribeOasSQLDetailsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeOasSQLDetailsRequest) SetInstanceId(v string) *DescribeOasSQLDetailsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeOasSQLDetailsRequest) SetSqlId(v string) *DescribeOasSQLDetailsRequest {
	s.SqlId = &v
	return s
}

func (s *DescribeOasSQLDetailsRequest) SetStartTime(v string) *DescribeOasSQLDetailsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeOasSQLDetailsRequest) SetTenantId(v string) *DescribeOasSQLDetailsRequest {
	s.TenantId = &v
	return s
}

type DescribeOasSQLDetailsResponseBody struct {
	// The list of the SQL execution plan.
	Data *DescribeOasSQLDetailsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeOasSQLDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLDetailsResponseBody) SetData(v *DescribeOasSQLDetailsResponseBodyData) *DescribeOasSQLDetailsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeOasSQLDetailsResponseBody) SetRequestId(v string) *DescribeOasSQLDetailsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeOasSQLDetailsResponseBodyData struct {
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// SQL text.
	Fulltext *string `json:"Fulltext,omitempty" xml:"Fulltext,omitempty"`
	// Parameterized text.
	Statement *string `json:"Statement,omitempty" xml:"Statement,omitempty"`
	// The table name related to the SQL.
	Tables []*string `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeOasSQLDetailsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLDetailsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLDetailsResponseBodyData) SetDbName(v string) *DescribeOasSQLDetailsResponseBodyData {
	s.DbName = &v
	return s
}

func (s *DescribeOasSQLDetailsResponseBodyData) SetFulltext(v string) *DescribeOasSQLDetailsResponseBodyData {
	s.Fulltext = &v
	return s
}

func (s *DescribeOasSQLDetailsResponseBodyData) SetStatement(v string) *DescribeOasSQLDetailsResponseBodyData {
	s.Statement = &v
	return s
}

func (s *DescribeOasSQLDetailsResponseBodyData) SetTables(v []*string) *DescribeOasSQLDetailsResponseBodyData {
	s.Tables = v
	return s
}

func (s *DescribeOasSQLDetailsResponseBodyData) SetUserName(v string) *DescribeOasSQLDetailsResponseBodyData {
	s.UserName = &v
	return s
}

type DescribeOasSQLDetailsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOasSQLDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOasSQLDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLDetailsResponse) SetHeaders(v map[string]*string) *DescribeOasSQLDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeOasSQLDetailsResponse) SetStatusCode(v int32) *DescribeOasSQLDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOasSQLDetailsResponse) SetBody(v *DescribeOasSQLDetailsResponseBody) *DescribeOasSQLDetailsResponse {
	s.Body = v
	return s
}

type DescribeOasSQLHistoryListRequest struct {
	// The language of the response. Valid values:
	// - zh: Chinese
	// - en: English
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The name of the database.
	DbName     *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DynamicSql *bool   `json:"DynamicSql,omitempty" xml:"DynamicSql,omitempty"`
	// The end time of querying the execution history of the SQL statement.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IP address of the node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// SQL ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The start time of querying the execution history of the SQL statement.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeOasSQLHistoryListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLHistoryListRequest) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLHistoryListRequest) SetAcceptLanguage(v string) *DescribeOasSQLHistoryListRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeOasSQLHistoryListRequest) SetDbName(v string) *DescribeOasSQLHistoryListRequest {
	s.DbName = &v
	return s
}

func (s *DescribeOasSQLHistoryListRequest) SetDynamicSql(v bool) *DescribeOasSQLHistoryListRequest {
	s.DynamicSql = &v
	return s
}

func (s *DescribeOasSQLHistoryListRequest) SetEndTime(v string) *DescribeOasSQLHistoryListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListRequest) SetInstanceId(v string) *DescribeOasSQLHistoryListRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeOasSQLHistoryListRequest) SetNodeIp(v string) *DescribeOasSQLHistoryListRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeOasSQLHistoryListRequest) SetSqlId(v string) *DescribeOasSQLHistoryListRequest {
	s.SqlId = &v
	return s
}

func (s *DescribeOasSQLHistoryListRequest) SetStartTime(v string) *DescribeOasSQLHistoryListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListRequest) SetTenantId(v string) *DescribeOasSQLHistoryListRequest {
	s.TenantId = &v
	return s
}

type DescribeOasSQLHistoryListResponseBody struct {
	// The list of SQL execution history.
	Data []*DescribeOasSQLHistoryListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeOasSQLHistoryListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLHistoryListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLHistoryListResponseBody) SetData(v []*DescribeOasSQLHistoryListResponseBodyData) *DescribeOasSQLHistoryListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBody) SetRequestId(v string) *DescribeOasSQLHistoryListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeOasSQLHistoryListResponseBodyData struct {
	// Average updated rows during the execution period.
	AvgAffectedRows *int64 `json:"AvgAffectedRows,omitempty" xml:"AvgAffectedRows,omitempty"`
	// Average Application event wait time (in milliseconds) during the client waiting period.
	AvgApplicationWaitTime *float64 `json:"AvgApplicationWaitTime,omitempty" xml:"AvgApplicationWaitTime,omitempty"`
	// Average BlockCache hit count during the execution period.
	AvgBlockCacheHit *int64 `json:"AvgBlockCacheHit,omitempty" xml:"AvgBlockCacheHit,omitempty"`
	// Average BlockIndexCache hit count during the execution period.
	AvgBlockIndexCacheHit *int64 `json:"AvgBlockIndexCacheHit,omitempty" xml:"AvgBlockIndexCacheHit,omitempty"`
	// Average BloomFilterCache hit count during the execution period.
	AvgBloomFilterCacheHit *int64 `json:"AvgBloomFilterCacheHit,omitempty" xml:"AvgBloomFilterCacheHit,omitempty"`
	// Average Concurrency event wait time (in milliseconds) during the execution period.
	AvgConcurrencyWaitTime *float64 `json:"AvgConcurrencyWaitTime,omitempty" xml:"AvgConcurrencyWaitTime,omitempty"`
	// Average CPU time (in milliseconds) during the execution period.
	AvgCpuTime *float64 `json:"AvgCpuTime,omitempty" xml:"AvgCpuTime,omitempty"`
	AvgDbTime  *float64 `json:"AvgDbTime,omitempty" xml:"AvgDbTime,omitempty"`
	// Average syntax parsing time (in milliseconds) during the execution period.
	AvgDecodeTime *float64 `json:"AvgDecodeTime,omitempty" xml:"AvgDecodeTime,omitempty"`
	// Average physical read count during the execution period.
	AvgDiskReads *int64 `json:"AvgDiskReads,omitempty" xml:"AvgDiskReads,omitempty"`
	// Average response time (in milliseconds) during the execution period.
	AvgElapsedTime *float64 `json:"AvgElapsedTime,omitempty" xml:"AvgElapsedTime,omitempty"`
	// Average plan execution time (in milliseconds) during the execution period.
	AvgExecuteTime *float64 `json:"AvgExecuteTime,omitempty" xml:"AvgExecuteTime,omitempty"`
	// Average number of RPC requests executed during the execution period.
	AvgExecutorRpcCount *float64 `json:"AvgExecutorRpcCount,omitempty" xml:"AvgExecutorRpcCount,omitempty"`
	// Average degree of parallelism during the execution period.
	AvgExpectedWorkerCount *float64 `json:"AvgExpectedWorkerCount,omitempty" xml:"AvgExpectedWorkerCount,omitempty"`
	// Average plan generation time (in milliseconds) during the execution period.
	AvgGetPlanTime *float64 `json:"AvgGetPlanTime,omitempty" xml:"AvgGetPlanTime,omitempty"`
	// Average logical reads during the execution period.
	AvgLogicalReads *int64 `json:"AvgLogicalReads,omitempty" xml:"AvgLogicalReads,omitempty"`
	// Average Memstore read rows during the execution period.
	AvgMemstoreReadRows *int64 `json:"AvgMemstoreReadRows,omitempty" xml:"AvgMemstoreReadRows,omitempty"`
	// Average network transmission time (in milliseconds) during the execution period.
	AvgNetTime *float64 `json:"AvgNetTime,omitempty" xml:"AvgNetTime,omitempty"`
	// Average network enqueue time (in milliseconds) during the network waiting period.
	AvgNetWaitTime *float64 `json:"AvgNetWaitTime,omitempty" xml:"AvgNetWaitTime,omitempty"`
	// Average number of partition accessed during the execution period.
	AvgPartitionCount *float64 `json:"AvgPartitionCount,omitempty" xml:"AvgPartitionCount,omitempty"`
	// Average queueing time (in milliseconds) during the execution period.
	AvgQueueTime *float64 `json:"AvgQueueTime,omitempty" xml:"AvgQueueTime,omitempty"`
	// Average number of rows returned during the execution period.
	AvgReturnRows *int64 `json:"AvgReturnRows,omitempty" xml:"AvgReturnRows,omitempty"`
	// Average RowCache hit count during the execution period.
	AvgRowCacheHit *int64 `json:"AvgRowCacheHit,omitempty" xml:"AvgRowCacheHit,omitempty"`
	// Average number of RPC sent during the execution.
	AvgRpcCount *int64 `json:"AvgRpcCount,omitempty" xml:"AvgRpcCount,omitempty"`
	// Average Schedule event wait time (in milliseconds) during the scheduling period.
	AvgScheduleTime *float64 `json:"AvgScheduleTime,omitempty" xml:"AvgScheduleTime,omitempty"`
	// Average Ssstore read rows during the execution period.
	AvgSsstoreReadRows *int64 `json:"AvgSsstoreReadRows,omitempty" xml:"AvgSsstoreReadRows,omitempty"`
	// Average number of threads used of the SQL during the execution period.
	AvgUsedWorkerCount *float64 `json:"AvgUsedWorkerCount,omitempty" xml:"AvgUsedWorkerCount,omitempty"`
	// Average UserIO event wait time (in milliseconds) during the execution period.
	AvgUserIoWaitTime *float64 `json:"AvgUserIoWaitTime,omitempty" xml:"AvgUserIoWaitTime,omitempty"`
	// Average number of waits during the execution period.
	AvgWaitCount *float64 `json:"AvgWaitCount,omitempty" xml:"AvgWaitCount,omitempty"`
	// Average wait time (in milliseconds) during the execution period.
	AvgWaitTime *float64 `json:"AvgWaitTime,omitempty" xml:"AvgWaitTime,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// Distributed plan percentage during the execution period.
	DistPlanPercentage *float64 `json:"DistPlanPercentage,omitempty" xml:"DistPlanPercentage,omitempty"`
	// Average execution count per second during the execution period.
	ExecPs *float64 `json:"ExecPs,omitempty" xml:"ExecPs,omitempty"`
	// Total number of executions during the execution period.
	Executions *int64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// The total number of errors during the execution period.
	FailCount *int64 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// Error percentage during the execution period.
	FailPercentage *float64 `json:"FailPercentage,omitempty" xml:"FailPercentage,omitempty"`
	// Local plan percentage during the execution period.
	LocalPlanPercentage *float64 `json:"LocalPlanPercentage,omitempty" xml:"LocalPlanPercentage,omitempty"`
	// Max updated rows during the execution period.
	MaxAffectedRows *float64 `json:"MaxAffectedRows,omitempty" xml:"MaxAffectedRows,omitempty"`
	// Max Application event wait time (in milliseconds) during the execution period
	MaxApplicationWaitTime *float64 `json:"MaxApplicationWaitTime,omitempty" xml:"MaxApplicationWaitTime,omitempty"`
	// Max Concurrency event wait time (in milliseconds) during the execution period
	MaxConcurrencyWaitTime *float64 `json:"MaxConcurrencyWaitTime,omitempty" xml:"MaxConcurrencyWaitTime,omitempty"`
	// Max CPU time.
	MaxCpuTime *float64 `json:"MaxCpuTime,omitempty" xml:"MaxCpuTime,omitempty"`
	// Max physical read count during the execution period.
	MaxDiskReads *float64 `json:"MaxDiskReads,omitempty" xml:"MaxDiskReads,omitempty"`
	// Max response time.
	MaxElapsedTime *float64 `json:"MaxElapsedTime,omitempty" xml:"MaxElapsedTime,omitempty"`
	// Max returned rows during the execution period.
	MaxReturnRows *float64 `json:"MaxReturnRows,omitempty" xml:"MaxReturnRows,omitempty"`
	// Max UserIO event wait time (in milliseconds) during the execution period
	MaxUserIoWaitTime *float64 `json:"MaxUserIoWaitTime,omitempty" xml:"MaxUserIoWaitTime,omitempty"`
	// Max wait time (in milliseconds) during the execution period.
	MaxWaitTime *float64 `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	// Plan hit rage during the execution period.
	MissPlanPercentage *float64 `json:"MissPlanPercentage,omitempty" xml:"MissPlanPercentage,omitempty"`
	// Missed plan count.
	MissPlans *int64 `json:"MissPlans,omitempty" xml:"MissPlans,omitempty"`
	// Remote plan percentage during the execution period.
	RemotePlanPercentage *float64 `json:"RemotePlanPercentage,omitempty" xml:"RemotePlanPercentage,omitempty"`
	// Remote plan count.
	RemotePlans *int64 `json:"RemotePlans,omitempty" xml:"RemotePlans,omitempty"`
	// Number of occurrences of code 4012 during the execution period.
	RetCode4012Count *float64 `json:"RetCode4012Count,omitempty" xml:"RetCode4012Count,omitempty"`
	// Number of occurrences of code 4013 during the execution period.
	RetCode4013Count *float64 `json:"RetCode4013Count,omitempty" xml:"RetCode4013Count,omitempty"`
	// Number of occurrences of code 5001 during the execution period.
	RetCode5001Count *float64 `json:"RetCode5001Count,omitempty" xml:"RetCode5001Count,omitempty"`
	// Number of occurrences of code 5024 during the execution period.
	RetCode5024Count *float64 `json:"RetCode5024Count,omitempty" xml:"RetCode5024Count,omitempty"`
	// Number of occurrences of code 5167 during the execution period.
	RetCode5167Count *float64 `json:"RetCode5167Count,omitempty" xml:"RetCode5167Count,omitempty"`
	// Number of occurrences of code 5217 during the execution period.
	RetCode5217Count *float64 `json:"RetCode5217Count,omitempty" xml:"RetCode5217Count,omitempty"`
	// Number of occurrences of code 6002 during the execution period.
	RetCode6002Count *float64 `json:"RetCode6002Count,omitempty" xml:"RetCode6002Count,omitempty"`
	// Total number of retries during the execution period.
	RetryCount *int64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// SQL ID.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The server where the SQL is executed.
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// Strong consistent transaction percentage during the execution period.
	StrongConsistencyPercentage *float64 `json:"StrongConsistencyPercentage,omitempty" xml:"StrongConsistencyPercentage,omitempty"`
	SumDbTime                   *float64 `json:"SumDbTime,omitempty" xml:"SumDbTime,omitempty"`
	// Total response time (in milliseconds) during the execution period.
	SumElapsedTime *float64 `json:"SumElapsedTime,omitempty" xml:"SumElapsedTime,omitempty"`
	// Total logical reads.
	SumLogicalReads *float64 `json:"SumLogicalReads,omitempty" xml:"SumLogicalReads,omitempty"`
	// The total wait time (in milliseconds) during the internal waiting period.
	SumWaitTime *float64 `json:"SumWaitTime,omitempty" xml:"SumWaitTime,omitempty"`
	// Table scan percentage during the execution period.
	TableScanPercentage *float64 `json:"TableScanPercentage,omitempty" xml:"TableScanPercentage,omitempty"`
	// Timestamp for the sample.
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// Username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// Eventually consistent transaction percentage during the execution period.
	WeakConsistencyPercentage *float64 `json:"WeakConsistencyPercentage,omitempty" xml:"WeakConsistencyPercentage,omitempty"`
}

func (s DescribeOasSQLHistoryListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLHistoryListResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgAffectedRows(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgAffectedRows = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgApplicationWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgApplicationWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgBlockCacheHit(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgBlockCacheHit = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgBlockIndexCacheHit(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgBlockIndexCacheHit = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgBloomFilterCacheHit(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgBloomFilterCacheHit = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgConcurrencyWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgCpuTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgCpuTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgDbTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgDbTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgDecodeTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgDecodeTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgDiskReads(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgDiskReads = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgElapsedTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgElapsedTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgExecuteTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgExecuteTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgExecutorRpcCount(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgExecutorRpcCount = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgExpectedWorkerCount(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgExpectedWorkerCount = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgGetPlanTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgGetPlanTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgLogicalReads(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgLogicalReads = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgMemstoreReadRows(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgMemstoreReadRows = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgNetTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgNetTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgNetWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgNetWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgPartitionCount(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgPartitionCount = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgQueueTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgQueueTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgReturnRows(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgReturnRows = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgRowCacheHit(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgRowCacheHit = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgRpcCount(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgRpcCount = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgScheduleTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgScheduleTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgSsstoreReadRows(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgSsstoreReadRows = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgUsedWorkerCount(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgUsedWorkerCount = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgUserIoWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgUserIoWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgWaitCount(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgWaitCount = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetAvgWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.AvgWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetDbName(v string) *DescribeOasSQLHistoryListResponseBodyData {
	s.DbName = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetDistPlanPercentage(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.DistPlanPercentage = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetExecPs(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.ExecPs = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetExecutions(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.Executions = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetFailCount(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.FailCount = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetFailPercentage(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.FailPercentage = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetLocalPlanPercentage(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.LocalPlanPercentage = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMaxAffectedRows(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MaxAffectedRows = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMaxApplicationWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MaxApplicationWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMaxConcurrencyWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MaxConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMaxCpuTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MaxCpuTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMaxDiskReads(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MaxDiskReads = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMaxElapsedTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MaxElapsedTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMaxReturnRows(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MaxReturnRows = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMaxUserIoWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MaxUserIoWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMaxWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MaxWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMissPlanPercentage(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MissPlanPercentage = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetMissPlans(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.MissPlans = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRemotePlanPercentage(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RemotePlanPercentage = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRemotePlans(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RemotePlans = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRetCode4012Count(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RetCode4012Count = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRetCode4013Count(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RetCode4013Count = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRetCode5001Count(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RetCode5001Count = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRetCode5024Count(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RetCode5024Count = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRetCode5167Count(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RetCode5167Count = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRetCode5217Count(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RetCode5217Count = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRetCode6002Count(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RetCode6002Count = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetRetryCount(v int64) *DescribeOasSQLHistoryListResponseBodyData {
	s.RetryCount = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetSQLId(v string) *DescribeOasSQLHistoryListResponseBodyData {
	s.SQLId = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetServer(v string) *DescribeOasSQLHistoryListResponseBodyData {
	s.Server = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetStrongConsistencyPercentage(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.StrongConsistencyPercentage = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetSumDbTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.SumDbTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetSumElapsedTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.SumElapsedTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetSumLogicalReads(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.SumLogicalReads = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetSumWaitTime(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.SumWaitTime = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetTableScanPercentage(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.TableScanPercentage = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetTimestamp(v string) *DescribeOasSQLHistoryListResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetUserName(v string) *DescribeOasSQLHistoryListResponseBodyData {
	s.UserName = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponseBodyData) SetWeakConsistencyPercentage(v float64) *DescribeOasSQLHistoryListResponseBodyData {
	s.WeakConsistencyPercentage = &v
	return s
}

type DescribeOasSQLHistoryListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOasSQLHistoryListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOasSQLHistoryListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLHistoryListResponse) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLHistoryListResponse) SetHeaders(v map[string]*string) *DescribeOasSQLHistoryListResponse {
	s.Headers = v
	return s
}

func (s *DescribeOasSQLHistoryListResponse) SetStatusCode(v int32) *DescribeOasSQLHistoryListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOasSQLHistoryListResponse) SetBody(v *DescribeOasSQLHistoryListResponseBody) *DescribeOasSQLHistoryListResponse {
	s.Body = v
	return s
}

type DescribeOasSQLPlansRequest struct {
	// Supported language. Valid values:
	// - zh-CN: Chinese
	// - en-US: English
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The name of the database.
	DbName     *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DynamicSql *bool   `json:"DynamicSql,omitempty" xml:"DynamicSql,omitempty"`
	// The end time of querying the SQL execution plan.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// SQL ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The start time of querying the SQL execution plan.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeOasSQLPlansRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLPlansRequest) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLPlansRequest) SetAcceptLanguage(v string) *DescribeOasSQLPlansRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeOasSQLPlansRequest) SetDbName(v string) *DescribeOasSQLPlansRequest {
	s.DbName = &v
	return s
}

func (s *DescribeOasSQLPlansRequest) SetDynamicSql(v bool) *DescribeOasSQLPlansRequest {
	s.DynamicSql = &v
	return s
}

func (s *DescribeOasSQLPlansRequest) SetEndTime(v string) *DescribeOasSQLPlansRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeOasSQLPlansRequest) SetInstanceId(v string) *DescribeOasSQLPlansRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeOasSQLPlansRequest) SetSqlId(v string) *DescribeOasSQLPlansRequest {
	s.SqlId = &v
	return s
}

func (s *DescribeOasSQLPlansRequest) SetStartTime(v string) *DescribeOasSQLPlansRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeOasSQLPlansRequest) SetTenantId(v string) *DescribeOasSQLPlansRequest {
	s.TenantId = &v
	return s
}

type DescribeOasSQLPlansResponseBody struct {
	// The list of SQL execution plan.
	Data []*DescribeOasSQLPlansResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeOasSQLPlansResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLPlansResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLPlansResponseBody) SetData(v []*DescribeOasSQLPlansResponseBodyData) *DescribeOasSQLPlansResponseBody {
	s.Data = v
	return s
}

func (s *DescribeOasSQLPlansResponseBody) SetRequestId(v string) *DescribeOasSQLPlansResponseBody {
	s.RequestId = &v
	return s
}

type DescribeOasSQLPlansResponseBodyData struct {
	// Average CPU time (in milliseconds) during the execution period.
	AvgCpuTime *float64 `json:"AvgCpuTime,omitempty" xml:"AvgCpuTime,omitempty"`
	// Whether to bind the execution plan.
	Bounded *bool `json:"Bounded,omitempty" xml:"Bounded,omitempty"`
	// Execution count.
	Executions *int64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// First loading time.
	FirstLoadTime *string `json:"FirstLoadTime,omitempty" xml:"FirstLoadTime,omitempty"`
	// Whether to hit the diagnosis.
	HitDiagnosis *bool `json:"HitDiagnosis,omitempty" xml:"HitDiagnosis,omitempty"`
	// Hit rate.
	HitPercentage *float64 `json:"HitPercentage,omitempty" xml:"HitPercentage,omitempty"`
	// Merge version.
	MergedVersion *int64 `json:"MergedVersion,omitempty" xml:"MergedVersion,omitempty"`
	// Execution plan.
	PlanExplain *DescribeOasSQLPlansResponseBodyDataPlanExplain `json:"PlanExplain,omitempty" xml:"PlanExplain,omitempty" type:"Struct"`
	// The internal identifier of the SQL execution plan in the diagnostic system.
	PlanHash *string `json:"PlanHash,omitempty" xml:"PlanHash,omitempty"`
	// Execution plan type.
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	// The internal unique identifier of the SQL execution plan in the diagnostic system.
	PlanUnionHash *string `json:"PlanUnionHash,omitempty" xml:"PlanUnionHash,omitempty"`
	// The list of the execution plan.
	Plans []*DescribeOasSQLPlansResponseBodyDataPlans `json:"Plans,omitempty" xml:"Plans,omitempty" type:"Repeated"`
	// The SQL for the query.
	QuerySql *string `json:"QuerySql,omitempty" xml:"QuerySql,omitempty"`
}

func (s DescribeOasSQLPlansResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLPlansResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLPlansResponseBodyData) SetAvgCpuTime(v float64) *DescribeOasSQLPlansResponseBodyData {
	s.AvgCpuTime = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetBounded(v bool) *DescribeOasSQLPlansResponseBodyData {
	s.Bounded = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetExecutions(v int64) *DescribeOasSQLPlansResponseBodyData {
	s.Executions = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetFirstLoadTime(v string) *DescribeOasSQLPlansResponseBodyData {
	s.FirstLoadTime = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetHitDiagnosis(v bool) *DescribeOasSQLPlansResponseBodyData {
	s.HitDiagnosis = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetHitPercentage(v float64) *DescribeOasSQLPlansResponseBodyData {
	s.HitPercentage = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetMergedVersion(v int64) *DescribeOasSQLPlansResponseBodyData {
	s.MergedVersion = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetPlanExplain(v *DescribeOasSQLPlansResponseBodyDataPlanExplain) *DescribeOasSQLPlansResponseBodyData {
	s.PlanExplain = v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetPlanHash(v string) *DescribeOasSQLPlansResponseBodyData {
	s.PlanHash = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetPlanType(v string) *DescribeOasSQLPlansResponseBodyData {
	s.PlanType = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetPlanUnionHash(v string) *DescribeOasSQLPlansResponseBodyData {
	s.PlanUnionHash = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetPlans(v []*DescribeOasSQLPlansResponseBodyDataPlans) *DescribeOasSQLPlansResponseBodyData {
	s.Plans = v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyData) SetQuerySql(v string) *DescribeOasSQLPlansResponseBodyData {
	s.QuerySql = &v
	return s
}

type DescribeOasSQLPlansResponseBodyDataPlanExplain struct {
	// JSON string of the SQL execution plan.
	PlanJsonString *string `json:"PlanJsonString,omitempty" xml:"PlanJsonString,omitempty"`
}

func (s DescribeOasSQLPlansResponseBodyDataPlanExplain) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLPlansResponseBodyDataPlanExplain) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLPlansResponseBodyDataPlanExplain) SetPlanJsonString(v string) *DescribeOasSQLPlansResponseBodyDataPlanExplain {
	s.PlanJsonString = &v
	return s
}

type DescribeOasSQLPlansResponseBodyDataPlans struct {
	// Average Application event waiting time (in milliseconds) during the execution period.
	AvgApplicationWaitTime *float64 `json:"AvgApplicationWaitTime,omitempty" xml:"AvgApplicationWaitTime,omitempty"`
	// Average cache read count during the execution period.
	AvgBufferGets *float64 `json:"AvgBufferGets,omitempty" xml:"AvgBufferGets,omitempty"`
	// Average Concurrency event waiting time (in milliseconds) during the execution period.
	AvgConcurrencyWaitTime *float64 `json:"AvgConcurrencyWaitTime,omitempty" xml:"AvgConcurrencyWaitTime,omitempty"`
	// Average CPU time (in milliseconds) during the execution period.
	AvgCpuTime *float64 `json:"AvgCpuTime,omitempty" xml:"AvgCpuTime,omitempty"`
	// The average physical read count during the execution period.
	AvgDiskReads *float64 `json:"AvgDiskReads,omitempty" xml:"AvgDiskReads,omitempty"`
	// The average physical write count during the execution period.
	AvgDiskWrites *float64 `json:"AvgDiskWrites,omitempty" xml:"AvgDiskWrites,omitempty"`
	// Average interval waiting time (in milliseconds) during the execution period.
	AvgElapsedTime *float64 `json:"AvgElapsedTime,omitempty" xml:"AvgElapsedTime,omitempty"`
	// Average row processing waiting time (in milliseconds) during the execution period.
	AvgRowProcessed *float64 `json:"AvgRowProcessed,omitempty" xml:"AvgRowProcessed,omitempty"`
	// Average UserIo event waiting time (in milliseconds) during the execution period.
	AvgUserIoWaitTime *float64 `json:"AvgUserIoWaitTime,omitempty" xml:"AvgUserIoWaitTime,omitempty"`
	// Collection time.
	CollectTimeUs *int64 `json:"CollectTimeUs,omitempty" xml:"CollectTimeUs,omitempty"`
	// Percentage of delayed long-running queries.
	DelayedLargeQueryPercentage *float64 `json:"DelayedLargeQueryPercentage,omitempty" xml:"DelayedLargeQueryPercentage,omitempty"`
	// The average execution count per second during the execution period.
	ExecPs *float64 `json:"ExecPs,omitempty" xml:"ExecPs,omitempty"`
	// The total number of executions during the execution period.
	Executions *int64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// First time to load the plan.
	FirstLoadTime *string `json:"FirstLoadTime,omitempty" xml:"FirstLoadTime,omitempty"`
	// First loading time.
	FirstLoadTimeUs *int64 `json:"FirstLoadTimeUs,omitempty" xml:"FirstLoadTimeUs,omitempty"`
	// Whether to hit the diagnosis.
	HitDiagnosis *bool `json:"HitDiagnosis,omitempty" xml:"HitDiagnosis,omitempty"`
	// Hit rate.
	HitPercentage *float64 `json:"HitPercentage,omitempty" xml:"HitPercentage,omitempty"`
	// Percentage of completed long-running queries.
	LargeQueryPercentage *float64 `json:"LargeQueryPercentage,omitempty" xml:"LargeQueryPercentage,omitempty"`
	// Merge version.
	MergedVersion *int64 `json:"MergedVersion,omitempty" xml:"MergedVersion,omitempty"`
	// Database ID.
	ObDbId *int64 `json:"ObDbId,omitempty" xml:"ObDbId,omitempty"`
	// Server ID.
	ObServerId *int64 `json:"ObServerId,omitempty" xml:"ObServerId,omitempty"`
	// The outline_data parameter of the SQL execution plan.
	OutlineData *string `json:"OutlineData,omitempty" xml:"OutlineData,omitempty"`
	// Outline ID.
	OutlineId *int64 `json:"OutlineId,omitempty" xml:"OutlineId,omitempty"`
	// The internal identifier of the SQL execution plan in the diagnostic system.
	PlanHash *string `json:"PlanHash,omitempty" xml:"PlanHash,omitempty"`
	// The ID of the plan.
	PlanId *int64 `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// Plan size.
	PlanSize *int64 `json:"PlanSize,omitempty" xml:"PlanSize,omitempty"`
	// Plan type, including LOCAL, REMOTE, DIST.
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	// The internal unique identifier of the SQL execution plan in the diagnostic system.
	PlanUnionHash *string `json:"PlanUnionHash,omitempty" xml:"PlanUnionHash,omitempty"`
	// Schema version.
	SchemaVersion *int64 `json:"SchemaVersion,omitempty" xml:"SchemaVersion,omitempty"`
	// The server where the SQL is executed.
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// The ID of the backend server instance.
	ServerId *int64  `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	SqlId    *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// Whether a full table scan is performed.
	TableScan *bool `json:"TableScan,omitempty" xml:"TableScan,omitempty"`
	// Percentage of timeouts.
	TimeoutPercentage *float64 `json:"TimeoutPercentage,omitempty" xml:"TimeoutPercentage,omitempty"`
	// The unique identifier of the plan.
	Uid *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s DescribeOasSQLPlansResponseBodyDataPlans) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLPlansResponseBodyDataPlans) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetAvgApplicationWaitTime(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.AvgApplicationWaitTime = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetAvgBufferGets(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.AvgBufferGets = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetAvgConcurrencyWaitTime(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.AvgConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetAvgCpuTime(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.AvgCpuTime = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetAvgDiskReads(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.AvgDiskReads = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetAvgDiskWrites(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.AvgDiskWrites = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetAvgElapsedTime(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.AvgElapsedTime = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetAvgRowProcessed(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.AvgRowProcessed = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetAvgUserIoWaitTime(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.AvgUserIoWaitTime = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetCollectTimeUs(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.CollectTimeUs = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetDelayedLargeQueryPercentage(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.DelayedLargeQueryPercentage = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetExecPs(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.ExecPs = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetExecutions(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.Executions = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetFirstLoadTime(v string) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.FirstLoadTime = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetFirstLoadTimeUs(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.FirstLoadTimeUs = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetHitDiagnosis(v bool) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.HitDiagnosis = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetHitPercentage(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.HitPercentage = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetLargeQueryPercentage(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.LargeQueryPercentage = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetMergedVersion(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.MergedVersion = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetObDbId(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.ObDbId = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetObServerId(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.ObServerId = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetOutlineData(v string) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.OutlineData = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetOutlineId(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.OutlineId = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetPlanHash(v string) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.PlanHash = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetPlanId(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.PlanId = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetPlanSize(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.PlanSize = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetPlanType(v string) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.PlanType = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetPlanUnionHash(v string) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.PlanUnionHash = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetSchemaVersion(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.SchemaVersion = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetServer(v string) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.Server = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetServerId(v int64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.ServerId = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetSqlId(v string) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.SqlId = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetTableScan(v bool) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.TableScan = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetTimeoutPercentage(v float64) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.TimeoutPercentage = &v
	return s
}

func (s *DescribeOasSQLPlansResponseBodyDataPlans) SetUid(v string) *DescribeOasSQLPlansResponseBodyDataPlans {
	s.Uid = &v
	return s
}

type DescribeOasSQLPlansResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOasSQLPlansResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOasSQLPlansResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSQLPlansResponse) GoString() string {
	return s.String()
}

func (s *DescribeOasSQLPlansResponse) SetHeaders(v map[string]*string) *DescribeOasSQLPlansResponse {
	s.Headers = v
	return s
}

func (s *DescribeOasSQLPlansResponse) SetStatusCode(v int32) *DescribeOasSQLPlansResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOasSQLPlansResponse) SetBody(v *DescribeOasSQLPlansResponseBody) *DescribeOasSQLPlansResponse {
	s.Body = v
	return s
}

type DescribeOasSlowSQLListRequest struct {
	// The language of the response.
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The name of the database.
	DbName     *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DynamicSql *bool   `json:"DynamicSql,omitempty" xml:"DynamicSql,omitempty"`
	// The end time of querying slow SQL historical parameters.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// All parameters are referenced by the symbol @. For a list of available parameters, refer to the returned parameters in [Query performance indicators of an SQL statement](https://en.oceanbase.com/docs/community-ocp-en-10000000000840290).
	FilterCondition *string `json:"FilterCondition,omitempty" xml:"FilterCondition,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MergeDynamicSql *bool   `json:"MergeDynamicSql,omitempty" xml:"MergeDynamicSql,omitempty"`
	// The IP of the database node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The search keyword.
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// The search parameter.
	SearchParam *string `json:"SearchParam,omitempty" xml:"SearchParam,omitempty"`
	// The search rule.
	SearchRule *string `json:"SearchRule,omitempty" xml:"SearchRule,omitempty"`
	// The search value.
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	// SQL ID, the unique identifier of the SQL.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// Max length of the returned SQL text.
	SqlTextLength *int64 `json:"SqlTextLength,omitempty" xml:"SqlTextLength,omitempty"`
	// The start time of querying slow SQL historical parameters.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeOasSlowSQLListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSlowSQLListRequest) GoString() string {
	return s.String()
}

func (s *DescribeOasSlowSQLListRequest) SetAcceptLanguage(v string) *DescribeOasSlowSQLListRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetDbName(v string) *DescribeOasSlowSQLListRequest {
	s.DbName = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetDynamicSql(v bool) *DescribeOasSlowSQLListRequest {
	s.DynamicSql = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetEndTime(v string) *DescribeOasSlowSQLListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetFilterCondition(v string) *DescribeOasSlowSQLListRequest {
	s.FilterCondition = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetInstanceId(v string) *DescribeOasSlowSQLListRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetMergeDynamicSql(v bool) *DescribeOasSlowSQLListRequest {
	s.MergeDynamicSql = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetNodeIp(v string) *DescribeOasSlowSQLListRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetSearchKeyWord(v string) *DescribeOasSlowSQLListRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetSearchParam(v string) *DescribeOasSlowSQLListRequest {
	s.SearchParam = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetSearchRule(v string) *DescribeOasSlowSQLListRequest {
	s.SearchRule = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetSearchValue(v string) *DescribeOasSlowSQLListRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetSqlId(v string) *DescribeOasSlowSQLListRequest {
	s.SqlId = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetSqlTextLength(v int64) *DescribeOasSlowSQLListRequest {
	s.SqlTextLength = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetStartTime(v string) *DescribeOasSlowSQLListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeOasSlowSQLListRequest) SetTenantId(v string) *DescribeOasSlowSQLListRequest {
	s.TenantId = &v
	return s
}

type DescribeOasSlowSQLListResponseBody struct {
	// The list of slow queries.
	Data []*DescribeOasSlowSQLListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeOasSlowSQLListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSlowSQLListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOasSlowSQLListResponseBody) SetData(v []*DescribeOasSlowSQLListResponseBodyData) *DescribeOasSlowSQLListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeOasSlowSQLListResponseBody) SetRequestId(v string) *DescribeOasSlowSQLListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeOasSlowSQLListResponseBodyData struct {
	// Average updated rows during the execution period.
	AvgAffectedRows *float64 `json:"AvgAffectedRows,omitempty" xml:"AvgAffectedRows,omitempty"`
	// Average Application event wait time (in milliseconds) during the client waiting period.
	AvgApplicationWaitTime *float64 `json:"AvgApplicationWaitTime,omitempty" xml:"AvgApplicationWaitTime,omitempty"`
	// Average BlockCache hit count during the execution period.
	AvgBlockCacheHit *float64 `json:"AvgBlockCacheHit,omitempty" xml:"AvgBlockCacheHit,omitempty"`
	// Average BlockIndexCache hit count during the execution period.
	AvgBlockIndexCacheHit *float64 `json:"AvgBlockIndexCacheHit,omitempty" xml:"AvgBlockIndexCacheHit,omitempty"`
	// Average BloomFilterCache hit count during the execution period.
	AvgBloomFilterCacheHit *float64 `json:"AvgBloomFilterCacheHit,omitempty" xml:"AvgBloomFilterCacheHit,omitempty"`
	// Average Concurrency event wait time (in milliseconds) during the execution period.
	AvgConcurrencyWaitTime *float64 `json:"AvgConcurrencyWaitTime,omitempty" xml:"AvgConcurrencyWaitTime,omitempty"`
	// Average CPU time (in milliseconds) during the execution period.
	AvgCpuTime *float64 `json:"AvgCpuTime,omitempty" xml:"AvgCpuTime,omitempty"`
	AvgDbTime  *float64 `json:"AvgDbTime,omitempty" xml:"AvgDbTime,omitempty"`
	// Average syntax parsing time (in milliseconds) during the execution period.
	AvgDecodeTime *float64 `json:"AvgDecodeTime,omitempty" xml:"AvgDecodeTime,omitempty"`
	// Average physical read count during the execution period.
	AvgDiskReads *float64 `json:"AvgDiskReads,omitempty" xml:"AvgDiskReads,omitempty"`
	// Average response time (in milliseconds) during the execution period.
	AvgElapsedTime *float64 `json:"AvgElapsedTime,omitempty" xml:"AvgElapsedTime,omitempty"`
	// Average plan execution time (in milliseconds) during the execution period.
	AvgExecuteTime *float64 `json:"AvgExecuteTime,omitempty" xml:"AvgExecuteTime,omitempty"`
	// Average number of RPC requests executed during the execution period.
	AvgExecutorRpcCount *float64 `json:"AvgExecutorRpcCount,omitempty" xml:"AvgExecutorRpcCount,omitempty"`
	// Average degree of parallelism during the execution period.
	AvgExpectedWorkerCount *float64 `json:"AvgExpectedWorkerCount,omitempty" xml:"AvgExpectedWorkerCount,omitempty"`
	// Average plan generation time (in milliseconds) during the execution period.
	AvgGetPlanTime *float64 `json:"AvgGetPlanTime,omitempty" xml:"AvgGetPlanTime,omitempty"`
	// Average logical reads of the SQL during the execution period.
	AvgLogicalReads *float64 `json:"AvgLogicalReads,omitempty" xml:"AvgLogicalReads,omitempty"`
	// Strong consistent transaction percentage during the execution period.
	AvgMemstoreReadRows *float64 `json:"AvgMemstoreReadRows,omitempty" xml:"AvgMemstoreReadRows,omitempty"`
	// Average network transmission time (in milliseconds) during the execution period.
	AvgNetTime *float64 `json:"AvgNetTime,omitempty" xml:"AvgNetTime,omitempty"`
	// Average network enqueue time (in milliseconds) during the network waiting period.
	AvgNetWaitTime *float64 `json:"AvgNetWaitTime,omitempty" xml:"AvgNetWaitTime,omitempty"`
	// Average number of partition accessed during the execution period.
	AvgPartitionCount *float64 `json:"AvgPartitionCount,omitempty" xml:"AvgPartitionCount,omitempty"`
	// Average queueing time (in milliseconds) during the execution period.
	AvgQueueTime *float64 `json:"AvgQueueTime,omitempty" xml:"AvgQueueTime,omitempty"`
	// Average number of rows returned during the execution period.
	AvgReturnRows *float64 `json:"AvgReturnRows,omitempty" xml:"AvgReturnRows,omitempty"`
	// Average RowCache hit count during the execution period.
	AvgRowCacheHit *float64 `json:"AvgRowCacheHit,omitempty" xml:"AvgRowCacheHit,omitempty"`
	// Average number of RPC sent during the execution.
	AvgRpcCount *float64 `json:"AvgRpcCount,omitempty" xml:"AvgRpcCount,omitempty"`
	// Average Schedule event wait time (in milliseconds) during the scheduling period.
	AvgScheduleTime *float64 `json:"AvgScheduleTime,omitempty" xml:"AvgScheduleTime,omitempty"`
	// Eventually consistent transaction percentage during the execution period.
	AvgSsstoreReadRows *float64 `json:"AvgSsstoreReadRows,omitempty" xml:"AvgSsstoreReadRows,omitempty"`
	// Average number of threads used of the SQL during the execution period.
	AvgUsedWorkerCount *float64 `json:"AvgUsedWorkerCount,omitempty" xml:"AvgUsedWorkerCount,omitempty"`
	// Average UserIO event wait time (in milliseconds) during the execution period.
	AvgUserIoWaitTime *float64 `json:"AvgUserIoWaitTime,omitempty" xml:"AvgUserIoWaitTime,omitempty"`
	// Average number of waits during the execution period.
	AvgWaitCount *float64 `json:"AvgWaitCount,omitempty" xml:"AvgWaitCount,omitempty"`
	// Average wait time (in milliseconds) during the execution period.
	AvgWaitTime *float64 `json:"AvgWaitTime,omitempty" xml:"AvgWaitTime,omitempty"`
	// Client IP.
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// Distributed plan percentage during the execution period.
	DistPlanPercentage *float64 `json:"DistPlanPercentage,omitempty" xml:"DistPlanPercentage,omitempty"`
	DynamicSql         *bool    `json:"DynamicSql,omitempty" xml:"DynamicSql,omitempty"`
	// Average execution count per second during the execution period.
	ExecPs *float64 `json:"ExecPs,omitempty" xml:"ExecPs,omitempty"`
	// Total number of executions during the execution period.
	Executions *float64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// Average number of partition accessed during the execution period.
	FailCount *float64 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// Error percentage during the execution period.
	FailPercentage *float64 `json:"FailPercentage,omitempty" xml:"FailPercentage,omitempty"`
	// Whether an internal SQL.
	Inner *bool `json:"Inner,omitempty" xml:"Inner,omitempty"`
	// Local plan percentage during the execution period.
	LocalPlanPercentage *float64 `json:"LocalPlanPercentage,omitempty" xml:"LocalPlanPercentage,omitempty"`
	// Max affected rows during the execution period.
	MaxAffectedRows *float64 `json:"MaxAffectedRows,omitempty" xml:"MaxAffectedRows,omitempty"`
	// Max Application event wait time (in milliseconds) during the execution period
	MaxApplicationWaitTime *float64 `json:"MaxApplicationWaitTime,omitempty" xml:"MaxApplicationWaitTime,omitempty"`
	// Max Concurrency event wait time (in milliseconds) during the execution period
	MaxConcurrencyWaitTime *float64 `json:"MaxConcurrencyWaitTime,omitempty" xml:"MaxConcurrencyWaitTime,omitempty"`
	// Max CPU time.
	MaxCpuTime *float64 `json:"MaxCpuTime,omitempty" xml:"MaxCpuTime,omitempty"`
	// Max physical read count during the execution period.
	MaxDiskReads *float64 `json:"MaxDiskReads,omitempty" xml:"MaxDiskReads,omitempty"`
	// Max response time during the execution period.
	MaxElapsedTime *float64 `json:"MaxElapsedTime,omitempty" xml:"MaxElapsedTime,omitempty"`
	// Max returned rows during the execution period.
	MaxReturnRows *float64 `json:"MaxReturnRows,omitempty" xml:"MaxReturnRows,omitempty"`
	// Max UserIO event wait time (in milliseconds) during the execution period.
	MaxUserIoWaitTime *float64 `json:"MaxUserIoWaitTime,omitempty" xml:"MaxUserIoWaitTime,omitempty"`
	// Max wait time (in milliseconds) during the execution period.
	MaxWaitTime *float64 `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	// Plan hit rage during the execution period.
	MissPlanPercentage *float64 `json:"MissPlanPercentage,omitempty" xml:"MissPlanPercentage,omitempty"`
	// Missed hit count of the execution plan during the execution period.
	MissPlans *float64 `json:"MissPlans,omitempty" xml:"MissPlans,omitempty"`
	// Remote plan percentage during the execution period.
	RemotePlanPercentage *float64 `json:"RemotePlanPercentage,omitempty" xml:"RemotePlanPercentage,omitempty"`
	// Remote execution count during the execution period.
	RemotePlans *float64 `json:"RemotePlans,omitempty" xml:"RemotePlans,omitempty"`
	// Number of occurrences of code 4012 during the execution period.
	RetCode4012Count *int64 `json:"RetCode4012Count,omitempty" xml:"RetCode4012Count,omitempty"`
	// Number of occurrences of code 4013 during the execution period.
	RetCode4013Count *int64 `json:"RetCode4013Count,omitempty" xml:"RetCode4013Count,omitempty"`
	// Number of occurrences of code 5001 during the execution period.
	RetCode5001Count *int64 `json:"RetCode5001Count,omitempty" xml:"RetCode5001Count,omitempty"`
	// Number of occurrences of code 5024 during the execution period.
	RetCode5024Count *int64 `json:"RetCode5024Count,omitempty" xml:"RetCode5024Count,omitempty"`
	// Number of occurrences of code 5167 during the execution period.
	RetCode5167Count *int64 `json:"RetCode5167Count,omitempty" xml:"RetCode5167Count,omitempty"`
	// Number of occurrences of code 5217 during the execution period.
	RetCode5217Count *int64 `json:"RetCode5217Count,omitempty" xml:"RetCode5217Count,omitempty"`
	// Number of occurrences of code 6002 during the execution period.
	RetCode6002Count *int64 `json:"RetCode6002Count,omitempty" xml:"RetCode6002Count,omitempty"`
	// Total number of retries during the execution period.
	RetryCount *float64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// RPC count during the execution period.
	RpcCount *float64 `json:"RpcCount,omitempty" xml:"RpcCount,omitempty"`
	// The server where the SQL is executed.
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// The IP address of the server.
	ServerIp *string `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	// The server port where the SQL is executed.
	ServerPort *int64 `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	// SQL ID.
	SqlId   *string                                          `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	SqlList []*DescribeOasSlowSQLListResponseBodyDataSqlList `json:"SqlList,omitempty" xml:"SqlList,omitempty" type:"Repeated"`
	// SQL text (the first 100 characters).
	SqlTextShort *string `json:"SqlTextShort,omitempty" xml:"SqlTextShort,omitempty"`
	// SQL type.
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// Strong consistent transaction percentage during the execution period.
	StrongConsistencyPercentage *float64 `json:"StrongConsistencyPercentage,omitempty" xml:"StrongConsistencyPercentage,omitempty"`
	SumDbTime                   *float64 `json:"SumDbTime,omitempty" xml:"SumDbTime,omitempty"`
	// Total response time (in milliseconds) during the execution period.
	SumElapsedTime *float64 `json:"SumElapsedTime,omitempty" xml:"SumElapsedTime,omitempty"`
	// Total logical reads of the SQL during the execution period.
	SumLogicalReads *float64 `json:"SumLogicalReads,omitempty" xml:"SumLogicalReads,omitempty"`
	// The total wait time (in milliseconds) during the internal waiting period.
	SumWaitTime *float64 `json:"SumWaitTime,omitempty" xml:"SumWaitTime,omitempty"`
	// Table scan percentage during the execution period.
	TableScanPercentage *float64 `json:"TableScanPercentage,omitempty" xml:"TableScanPercentage,omitempty"`
	// Total wait time during the execution period.
	TotalWaitTime *float64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// Username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// Longest wait event during the execution period.
	WaitEvent *string `json:"WaitEvent,omitempty" xml:"WaitEvent,omitempty"`
	// Eventually consistent transaction percentage during the execution period.
	WeakConsistencyPercentage *float64 `json:"WeakConsistencyPercentage,omitempty" xml:"WeakConsistencyPercentage,omitempty"`
}

func (s DescribeOasSlowSQLListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSlowSQLListResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgAffectedRows(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgAffectedRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgApplicationWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgApplicationWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgBlockCacheHit(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgBlockCacheHit = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgBlockIndexCacheHit(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgBlockIndexCacheHit = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgBloomFilterCacheHit(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgBloomFilterCacheHit = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgConcurrencyWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgCpuTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgCpuTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgDbTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgDbTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgDecodeTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgDecodeTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgDiskReads(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgDiskReads = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgElapsedTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgElapsedTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgExecuteTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgExecuteTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgExecutorRpcCount(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgExecutorRpcCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgExpectedWorkerCount(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgExpectedWorkerCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgGetPlanTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgGetPlanTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgLogicalReads(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgLogicalReads = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgMemstoreReadRows(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgMemstoreReadRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgNetTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgNetTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgNetWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgNetWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgPartitionCount(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgPartitionCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgQueueTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgQueueTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgReturnRows(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgReturnRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgRowCacheHit(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgRowCacheHit = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgRpcCount(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgRpcCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgScheduleTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgScheduleTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgSsstoreReadRows(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgSsstoreReadRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgUsedWorkerCount(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgUsedWorkerCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgUserIoWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgUserIoWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgWaitCount(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgWaitCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetAvgWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.AvgWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetClientIp(v string) *DescribeOasSlowSQLListResponseBodyData {
	s.ClientIp = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetDbName(v string) *DescribeOasSlowSQLListResponseBodyData {
	s.DbName = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetDistPlanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.DistPlanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetDynamicSql(v bool) *DescribeOasSlowSQLListResponseBodyData {
	s.DynamicSql = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetExecPs(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.ExecPs = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetExecutions(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.Executions = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetFailCount(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.FailCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetFailPercentage(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.FailPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetInner(v bool) *DescribeOasSlowSQLListResponseBodyData {
	s.Inner = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetLocalPlanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.LocalPlanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMaxAffectedRows(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MaxAffectedRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMaxApplicationWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MaxApplicationWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMaxConcurrencyWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MaxConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMaxCpuTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MaxCpuTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMaxDiskReads(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MaxDiskReads = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMaxElapsedTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MaxElapsedTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMaxReturnRows(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MaxReturnRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMaxUserIoWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MaxUserIoWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMaxWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MaxWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMissPlanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MissPlanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetMissPlans(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.MissPlans = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRemotePlanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.RemotePlanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRemotePlans(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.RemotePlans = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRetCode4012Count(v int64) *DescribeOasSlowSQLListResponseBodyData {
	s.RetCode4012Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRetCode4013Count(v int64) *DescribeOasSlowSQLListResponseBodyData {
	s.RetCode4013Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRetCode5001Count(v int64) *DescribeOasSlowSQLListResponseBodyData {
	s.RetCode5001Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRetCode5024Count(v int64) *DescribeOasSlowSQLListResponseBodyData {
	s.RetCode5024Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRetCode5167Count(v int64) *DescribeOasSlowSQLListResponseBodyData {
	s.RetCode5167Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRetCode5217Count(v int64) *DescribeOasSlowSQLListResponseBodyData {
	s.RetCode5217Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRetCode6002Count(v int64) *DescribeOasSlowSQLListResponseBodyData {
	s.RetCode6002Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRetryCount(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.RetryCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetRpcCount(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.RpcCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetServer(v string) *DescribeOasSlowSQLListResponseBodyData {
	s.Server = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetServerIp(v string) *DescribeOasSlowSQLListResponseBodyData {
	s.ServerIp = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetServerPort(v int64) *DescribeOasSlowSQLListResponseBodyData {
	s.ServerPort = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetSqlId(v string) *DescribeOasSlowSQLListResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetSqlList(v []*DescribeOasSlowSQLListResponseBodyDataSqlList) *DescribeOasSlowSQLListResponseBodyData {
	s.SqlList = v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetSqlTextShort(v string) *DescribeOasSlowSQLListResponseBodyData {
	s.SqlTextShort = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetSqlType(v string) *DescribeOasSlowSQLListResponseBodyData {
	s.SqlType = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetStrongConsistencyPercentage(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.StrongConsistencyPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetSumDbTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.SumDbTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetSumElapsedTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.SumElapsedTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetSumLogicalReads(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.SumLogicalReads = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetSumWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.SumWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetTableScanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.TableScanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetTotalWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.TotalWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetUserName(v string) *DescribeOasSlowSQLListResponseBodyData {
	s.UserName = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetWaitEvent(v string) *DescribeOasSlowSQLListResponseBodyData {
	s.WaitEvent = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyData) SetWeakConsistencyPercentage(v float64) *DescribeOasSlowSQLListResponseBodyData {
	s.WeakConsistencyPercentage = &v
	return s
}

type DescribeOasSlowSQLListResponseBodyDataSqlList struct {
	AvgAffectedRows             *float64 `json:"AvgAffectedRows,omitempty" xml:"AvgAffectedRows,omitempty"`
	AvgApplicationWaitTime      *float64 `json:"AvgApplicationWaitTime,omitempty" xml:"AvgApplicationWaitTime,omitempty"`
	AvgBlockCacheHit            *float64 `json:"AvgBlockCacheHit,omitempty" xml:"AvgBlockCacheHit,omitempty"`
	AvgBlockIndexCacheHit       *float64 `json:"AvgBlockIndexCacheHit,omitempty" xml:"AvgBlockIndexCacheHit,omitempty"`
	AvgBloomFilterCacheHit      *float64 `json:"AvgBloomFilterCacheHit,omitempty" xml:"AvgBloomFilterCacheHit,omitempty"`
	AvgConcurrencyWaitTime      *float64 `json:"AvgConcurrencyWaitTime,omitempty" xml:"AvgConcurrencyWaitTime,omitempty"`
	AvgCpuTime                  *float64 `json:"AvgCpuTime,omitempty" xml:"AvgCpuTime,omitempty"`
	AvgDbTime                   *float64 `json:"AvgDbTime,omitempty" xml:"AvgDbTime,omitempty"`
	AvgDecodeTime               *float64 `json:"AvgDecodeTime,omitempty" xml:"AvgDecodeTime,omitempty"`
	AvgDiskReads                *float64 `json:"AvgDiskReads,omitempty" xml:"AvgDiskReads,omitempty"`
	AvgElapsedTime              *float64 `json:"AvgElapsedTime,omitempty" xml:"AvgElapsedTime,omitempty"`
	AvgExecuteTime              *float64 `json:"AvgExecuteTime,omitempty" xml:"AvgExecuteTime,omitempty"`
	AvgExecutorRpcCount         *float64 `json:"AvgExecutorRpcCount,omitempty" xml:"AvgExecutorRpcCount,omitempty"`
	AvgExpectedWorkerCount      *float64 `json:"AvgExpectedWorkerCount,omitempty" xml:"AvgExpectedWorkerCount,omitempty"`
	AvgGetPlanTime              *float64 `json:"AvgGetPlanTime,omitempty" xml:"AvgGetPlanTime,omitempty"`
	AvgLogicalReads             *float64 `json:"AvgLogicalReads,omitempty" xml:"AvgLogicalReads,omitempty"`
	AvgMemstoreReadRows         *float64 `json:"AvgMemstoreReadRows,omitempty" xml:"AvgMemstoreReadRows,omitempty"`
	AvgNetTime                  *float64 `json:"AvgNetTime,omitempty" xml:"AvgNetTime,omitempty"`
	AvgNetWaitTime              *float64 `json:"AvgNetWaitTime,omitempty" xml:"AvgNetWaitTime,omitempty"`
	AvgPartitionCount           *float64 `json:"AvgPartitionCount,omitempty" xml:"AvgPartitionCount,omitempty"`
	AvgQueueTime                *float64 `json:"AvgQueueTime,omitempty" xml:"AvgQueueTime,omitempty"`
	AvgReturnRows               *float64 `json:"AvgReturnRows,omitempty" xml:"AvgReturnRows,omitempty"`
	AvgRowCacheHit              *float64 `json:"AvgRowCacheHit,omitempty" xml:"AvgRowCacheHit,omitempty"`
	AvgRpcCount                 *float64 `json:"AvgRpcCount,omitempty" xml:"AvgRpcCount,omitempty"`
	AvgScheduleTime             *float64 `json:"AvgScheduleTime,omitempty" xml:"AvgScheduleTime,omitempty"`
	AvgSsstoreReadRows          *float64 `json:"AvgSsstoreReadRows,omitempty" xml:"AvgSsstoreReadRows,omitempty"`
	AvgUsedWorkerCount          *float64 `json:"AvgUsedWorkerCount,omitempty" xml:"AvgUsedWorkerCount,omitempty"`
	AvgUserIoWaitTime           *float64 `json:"AvgUserIoWaitTime,omitempty" xml:"AvgUserIoWaitTime,omitempty"`
	AvgWaitCount                *float64 `json:"AvgWaitCount,omitempty" xml:"AvgWaitCount,omitempty"`
	AvgWaitTime                 *float64 `json:"AvgWaitTime,omitempty" xml:"AvgWaitTime,omitempty"`
	ClientIp                    *string  `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	DbName                      *string  `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DistPlanPercentage          *float64 `json:"DistPlanPercentage,omitempty" xml:"DistPlanPercentage,omitempty"`
	ExecPs                      *float64 `json:"ExecPs,omitempty" xml:"ExecPs,omitempty"`
	Executions                  *float64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	FailCount                   *float64 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	FailPercentage              *float64 `json:"FailPercentage,omitempty" xml:"FailPercentage,omitempty"`
	Inner                       *bool    `json:"Inner,omitempty" xml:"Inner,omitempty"`
	LocalPlanPercentage         *float64 `json:"LocalPlanPercentage,omitempty" xml:"LocalPlanPercentage,omitempty"`
	MaxAffectedRows             *float64 `json:"MaxAffectedRows,omitempty" xml:"MaxAffectedRows,omitempty"`
	MaxApplicationWaitTime      *float64 `json:"MaxApplicationWaitTime,omitempty" xml:"MaxApplicationWaitTime,omitempty"`
	MaxConcurrencyWaitTime      *float64 `json:"MaxConcurrencyWaitTime,omitempty" xml:"MaxConcurrencyWaitTime,omitempty"`
	MaxCpuTime                  *float64 `json:"MaxCpuTime,omitempty" xml:"MaxCpuTime,omitempty"`
	MaxDiskReads                *float64 `json:"MaxDiskReads,omitempty" xml:"MaxDiskReads,omitempty"`
	MaxElapsedTime              *float64 `json:"MaxElapsedTime,omitempty" xml:"MaxElapsedTime,omitempty"`
	MaxReturnRows               *float64 `json:"MaxReturnRows,omitempty" xml:"MaxReturnRows,omitempty"`
	MaxUserIoWaitTime           *float64 `json:"MaxUserIoWaitTime,omitempty" xml:"MaxUserIoWaitTime,omitempty"`
	MaxWaitTime                 *float64 `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	MissPlanPercentage          *float64 `json:"MissPlanPercentage,omitempty" xml:"MissPlanPercentage,omitempty"`
	MissPlans                   *float64 `json:"MissPlans,omitempty" xml:"MissPlans,omitempty"`
	RemotePlanPercentage        *float64 `json:"RemotePlanPercentage,omitempty" xml:"RemotePlanPercentage,omitempty"`
	RemotePlans                 *float64 `json:"RemotePlans,omitempty" xml:"RemotePlans,omitempty"`
	RetCode4012Count            *int64   `json:"RetCode4012Count,omitempty" xml:"RetCode4012Count,omitempty"`
	RetCode4013Count            *int64   `json:"RetCode4013Count,omitempty" xml:"RetCode4013Count,omitempty"`
	RetCode5001Count            *int64   `json:"RetCode5001Count,omitempty" xml:"RetCode5001Count,omitempty"`
	RetCode5024Count            *int64   `json:"RetCode5024Count,omitempty" xml:"RetCode5024Count,omitempty"`
	RetCode5167Count            *int64   `json:"RetCode5167Count,omitempty" xml:"RetCode5167Count,omitempty"`
	RetCode5217Count            *int64   `json:"RetCode5217Count,omitempty" xml:"RetCode5217Count,omitempty"`
	RetCode6002Count            *int64   `json:"RetCode6002Count,omitempty" xml:"RetCode6002Count,omitempty"`
	RetryCount                  *float64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	RpcCount                    *float64 `json:"RpcCount,omitempty" xml:"RpcCount,omitempty"`
	Server                      *string  `json:"Server,omitempty" xml:"Server,omitempty"`
	ServerIp                    *string  `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerPort                  *int64   `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	SqlId                       *string  `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	SqlTextShort                *string  `json:"SqlTextShort,omitempty" xml:"SqlTextShort,omitempty"`
	SqlType                     *string  `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	StrongConsistencyPercentage *float64 `json:"StrongConsistencyPercentage,omitempty" xml:"StrongConsistencyPercentage,omitempty"`
	SumDbTime                   *float64 `json:"SumDbTime,omitempty" xml:"SumDbTime,omitempty"`
	SumElapsedTime              *float64 `json:"SumElapsedTime,omitempty" xml:"SumElapsedTime,omitempty"`
	SumLogicalReads             *float64 `json:"SumLogicalReads,omitempty" xml:"SumLogicalReads,omitempty"`
	SumWaitTime                 *float64 `json:"SumWaitTime,omitempty" xml:"SumWaitTime,omitempty"`
	TableScanPercentage         *float64 `json:"TableScanPercentage,omitempty" xml:"TableScanPercentage,omitempty"`
	TotalWaitTime               *float64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	UserName                    *string  `json:"UserName,omitempty" xml:"UserName,omitempty"`
	WaitEvent                   *string  `json:"WaitEvent,omitempty" xml:"WaitEvent,omitempty"`
	WeakConsistencyPercentage   *float64 `json:"WeakConsistencyPercentage,omitempty" xml:"WeakConsistencyPercentage,omitempty"`
}

func (s DescribeOasSlowSQLListResponseBodyDataSqlList) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSlowSQLListResponseBodyDataSqlList) GoString() string {
	return s.String()
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgAffectedRows(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgAffectedRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgApplicationWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgApplicationWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgBlockCacheHit(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgBlockCacheHit = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgBlockIndexCacheHit(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgBlockIndexCacheHit = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgBloomFilterCacheHit(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgBloomFilterCacheHit = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgConcurrencyWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgCpuTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgCpuTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgDbTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgDbTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgDecodeTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgDecodeTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgDiskReads(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgDiskReads = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgElapsedTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgElapsedTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgExecuteTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgExecuteTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgExecutorRpcCount(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgExecutorRpcCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgExpectedWorkerCount(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgExpectedWorkerCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgGetPlanTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgGetPlanTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgLogicalReads(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgLogicalReads = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgMemstoreReadRows(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgMemstoreReadRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgNetTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgNetTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgNetWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgNetWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgPartitionCount(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgPartitionCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgQueueTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgQueueTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgReturnRows(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgReturnRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgRowCacheHit(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgRowCacheHit = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgRpcCount(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgRpcCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgScheduleTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgScheduleTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgSsstoreReadRows(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgSsstoreReadRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgUsedWorkerCount(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgUsedWorkerCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgUserIoWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgUserIoWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgWaitCount(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgWaitCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetAvgWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.AvgWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetClientIp(v string) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.ClientIp = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetDbName(v string) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.DbName = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetDistPlanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.DistPlanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetExecPs(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.ExecPs = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetExecutions(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.Executions = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetFailCount(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.FailCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetFailPercentage(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.FailPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetInner(v bool) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.Inner = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetLocalPlanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.LocalPlanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMaxAffectedRows(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MaxAffectedRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMaxApplicationWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MaxApplicationWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMaxConcurrencyWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MaxConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMaxCpuTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MaxCpuTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMaxDiskReads(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MaxDiskReads = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMaxElapsedTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MaxElapsedTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMaxReturnRows(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MaxReturnRows = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMaxUserIoWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MaxUserIoWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMaxWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MaxWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMissPlanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MissPlanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetMissPlans(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.MissPlans = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRemotePlanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RemotePlanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRemotePlans(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RemotePlans = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRetCode4012Count(v int64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RetCode4012Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRetCode4013Count(v int64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RetCode4013Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRetCode5001Count(v int64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RetCode5001Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRetCode5024Count(v int64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RetCode5024Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRetCode5167Count(v int64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RetCode5167Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRetCode5217Count(v int64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RetCode5217Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRetCode6002Count(v int64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RetCode6002Count = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRetryCount(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RetryCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetRpcCount(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.RpcCount = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetServer(v string) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.Server = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetServerIp(v string) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.ServerIp = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetServerPort(v int64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.ServerPort = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetSqlId(v string) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.SqlId = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetSqlTextShort(v string) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.SqlTextShort = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetSqlType(v string) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.SqlType = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetStrongConsistencyPercentage(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.StrongConsistencyPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetSumDbTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.SumDbTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetSumElapsedTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.SumElapsedTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetSumLogicalReads(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.SumLogicalReads = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetSumWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.SumWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetTableScanPercentage(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.TableScanPercentage = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetTotalWaitTime(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.TotalWaitTime = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetUserName(v string) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.UserName = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetWaitEvent(v string) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.WaitEvent = &v
	return s
}

func (s *DescribeOasSlowSQLListResponseBodyDataSqlList) SetWeakConsistencyPercentage(v float64) *DescribeOasSlowSQLListResponseBodyDataSqlList {
	s.WeakConsistencyPercentage = &v
	return s
}

type DescribeOasSlowSQLListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOasSlowSQLListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOasSlowSQLListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasSlowSQLListResponse) GoString() string {
	return s.String()
}

func (s *DescribeOasSlowSQLListResponse) SetHeaders(v map[string]*string) *DescribeOasSlowSQLListResponse {
	s.Headers = v
	return s
}

func (s *DescribeOasSlowSQLListResponse) SetStatusCode(v int32) *DescribeOasSlowSQLListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOasSlowSQLListResponse) SetBody(v *DescribeOasSlowSQLListResponseBody) *DescribeOasSlowSQLListResponse {
	s.Body = v
	return s
}

type DescribeOasTopSQLListRequest struct {
	// The language of the response. Valid values:
	//
	// - zh: Chinese
	// - en: English
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The name of the database.
	DbName     *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DynamicSql *bool   `json:"DynamicSql,omitempty" xml:"DynamicSql,omitempty"`
	// The end time of querying the TOPSQL parameter.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// All parameters are referenced by the symbol @. For a list of available parameters, refer to the returned parameters in [Query performance indicators of an SQL statement](https://en.oceanbase.com/docs/community-ocp-en-10000000000840290).
	FilterCondition *string `json:"FilterCondition,omitempty" xml:"FilterCondition,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MergeDynamicSql *bool   `json:"MergeDynamicSql,omitempty" xml:"MergeDynamicSql,omitempty"`
	// The node IP.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The search keyword.
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// The search parameter.
	SearchParam *string `json:"SearchParam,omitempty" xml:"SearchParam,omitempty"`
	// The search rule.
	SearchRule *string `json:"SearchRule,omitempty" xml:"SearchRule,omitempty"`
	// The search value.
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	// SQL ID.
	// > When the SQL ID is provided, the system collects all the request data for the target SQL ID. When the SQL ID is empty, the system collects all the request data for the entire database instance.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// Max length of the returned SQL text.
	SqlTextLength *int64 `json:"SqlTextLength,omitempty" xml:"SqlTextLength,omitempty"`
	// The start time of querying the TOPSQL parameter.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeOasTopSQLListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasTopSQLListRequest) GoString() string {
	return s.String()
}

func (s *DescribeOasTopSQLListRequest) SetAcceptLanguage(v string) *DescribeOasTopSQLListRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetDbName(v string) *DescribeOasTopSQLListRequest {
	s.DbName = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetDynamicSql(v bool) *DescribeOasTopSQLListRequest {
	s.DynamicSql = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetEndTime(v string) *DescribeOasTopSQLListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetFilterCondition(v string) *DescribeOasTopSQLListRequest {
	s.FilterCondition = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetInstanceId(v string) *DescribeOasTopSQLListRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetMergeDynamicSql(v bool) *DescribeOasTopSQLListRequest {
	s.MergeDynamicSql = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetNodeIp(v string) *DescribeOasTopSQLListRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetSearchKeyWord(v string) *DescribeOasTopSQLListRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetSearchParam(v string) *DescribeOasTopSQLListRequest {
	s.SearchParam = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetSearchRule(v string) *DescribeOasTopSQLListRequest {
	s.SearchRule = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetSearchValue(v string) *DescribeOasTopSQLListRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetSqlId(v string) *DescribeOasTopSQLListRequest {
	s.SqlId = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetSqlTextLength(v int64) *DescribeOasTopSQLListRequest {
	s.SqlTextLength = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetStartTime(v string) *DescribeOasTopSQLListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeOasTopSQLListRequest) SetTenantId(v string) *DescribeOasTopSQLListRequest {
	s.TenantId = &v
	return s
}

type DescribeOasTopSQLListResponseBody struct {
	// The list of Top SQL.
	Data []*DescribeOasTopSQLListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeOasTopSQLListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasTopSQLListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOasTopSQLListResponseBody) SetData(v []*DescribeOasTopSQLListResponseBodyData) *DescribeOasTopSQLListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeOasTopSQLListResponseBody) SetRequestId(v string) *DescribeOasTopSQLListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeOasTopSQLListResponseBodyData struct {
	// Average updated rows during the execution period.
	AvgAffectedRows *float64 `json:"AvgAffectedRows,omitempty" xml:"AvgAffectedRows,omitempty"`
	// Average Application event wait time (in milliseconds) during the execution period.
	AvgApplicationWaitTime *float64 `json:"AvgApplicationWaitTime,omitempty" xml:"AvgApplicationWaitTime,omitempty"`
	// Average BlockCache hit count during the execution period.
	AvgBlockCacheHit *float64 `json:"AvgBlockCacheHit,omitempty" xml:"AvgBlockCacheHit,omitempty"`
	// Average BlockIndexCache hit count during the execution period.
	AvgBlockIndexCacheHit *float64 `json:"AvgBlockIndexCacheHit,omitempty" xml:"AvgBlockIndexCacheHit,omitempty"`
	// Average BloomFilterCache hit count during the execution period.
	AvgBloomFilterCacheHit *float64 `json:"AvgBloomFilterCacheHit,omitempty" xml:"AvgBloomFilterCacheHit,omitempty"`
	// Average Concurrency event wait time (in milliseconds) during the execution period.
	AvgConcurrencyWaitTime *float64 `json:"AvgConcurrencyWaitTime,omitempty" xml:"AvgConcurrencyWaitTime,omitempty"`
	// Average CPU time (in milliseconds) during the execution period.
	AvgCpuTime *float64 `json:"AvgCpuTime,omitempty" xml:"AvgCpuTime,omitempty"`
	AvgDbTime  *float64 `json:"AvgDbTime,omitempty" xml:"AvgDbTime,omitempty"`
	// Average syntax parsing time (in milliseconds) during the execution period.
	AvgDecodeTime *float64 `json:"AvgDecodeTime,omitempty" xml:"AvgDecodeTime,omitempty"`
	// Average physical read count during the execution period.
	AvgDiskReads *float64 `json:"AvgDiskReads,omitempty" xml:"AvgDiskReads,omitempty"`
	// Average response time (in milliseconds) during the execution period.
	AvgElapsedTime *float64 `json:"AvgElapsedTime,omitempty" xml:"AvgElapsedTime,omitempty"`
	// Average plan execution time (in milliseconds) during the execution period.
	AvgExecuteTime *float64 `json:"AvgExecuteTime,omitempty" xml:"AvgExecuteTime,omitempty"`
	// Average number of RPC requests executed during the execution period.
	AvgExecutorRpcCount *float64 `json:"AvgExecutorRpcCount,omitempty" xml:"AvgExecutorRpcCount,omitempty"`
	// Average degree of parallelism during the execution period.
	AvgExpectedWorkerCount *float64 `json:"AvgExpectedWorkerCount,omitempty" xml:"AvgExpectedWorkerCount,omitempty"`
	// Average plan generation time (in milliseconds) during the execution period.
	AvgGetPlanTime *float64 `json:"AvgGetPlanTime,omitempty" xml:"AvgGetPlanTime,omitempty"`
	// Average logical reads of the SQL during the execution period.
	AvgLogicalReads *float64 `json:"AvgLogicalReads,omitempty" xml:"AvgLogicalReads,omitempty"`
	// Strong consistent transaction percentage during the execution period.
	AvgMemstoreReadRows *float64 `json:"AvgMemstoreReadRows,omitempty" xml:"AvgMemstoreReadRows,omitempty"`
	// Average network transmission time (in milliseconds) during the execution period.
	AvgNetTime *float64 `json:"AvgNetTime,omitempty" xml:"AvgNetTime,omitempty"`
	// Average network enqueue time (in milliseconds) during the execution period.
	AvgNetWaitTime *float64 `json:"AvgNetWaitTime,omitempty" xml:"AvgNetWaitTime,omitempty"`
	// Average number of partition accessed during the execution period.
	AvgPartitionCount *float64 `json:"AvgPartitionCount,omitempty" xml:"AvgPartitionCount,omitempty"`
	// Average queueing time (in milliseconds) during the execution period.
	AvgQueueTime *float64 `json:"AvgQueueTime,omitempty" xml:"AvgQueueTime,omitempty"`
	// Average returned rows during the execution period.
	AvgReturnRows *float64 `json:"AvgReturnRows,omitempty" xml:"AvgReturnRows,omitempty"`
	// Average RowCache hit count during the execution period.
	AvgRowCacheHit *float64 `json:"AvgRowCacheHit,omitempty" xml:"AvgRowCacheHit,omitempty"`
	// Average count of RPC sent during the execution period.
	AvgRpcCount *float64 `json:"AvgRpcCount,omitempty" xml:"AvgRpcCount,omitempty"`
	// Average Schedule event wait time (in milliseconds) during the execution period.
	AvgScheduleTime *float64 `json:"AvgScheduleTime,omitempty" xml:"AvgScheduleTime,omitempty"`
	// Eventually consistent transaction percentage during the execution period.
	AvgSsstoreReadRows *float64 `json:"AvgSsstoreReadRows,omitempty" xml:"AvgSsstoreReadRows,omitempty"`
	// Average number of threads used of the SQL during the execution period.
	AvgUsedWorkerCount *float64 `json:"AvgUsedWorkerCount,omitempty" xml:"AvgUsedWorkerCount,omitempty"`
	// Average UserIO event wait time (in milliseconds) during the execution period.
	AvgUserIoWaitTime *float64 `json:"AvgUserIoWaitTime,omitempty" xml:"AvgUserIoWaitTime,omitempty"`
	// Average wait count during the execution period.
	AvgWaitCount *float64 `json:"AvgWaitCount,omitempty" xml:"AvgWaitCount,omitempty"`
	// Average wait time (in milliseconds) during the execution period.
	AvgWaitTime *float64 `json:"AvgWaitTime,omitempty" xml:"AvgWaitTime,omitempty"`
	// Client IP.
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// CPU percentage.
	CpuPercentage *float64 `json:"CpuPercentage,omitempty" xml:"CpuPercentage,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// Distributed plan percentage during the execution period.
	DistPlanPercentage *float64 `json:"DistPlanPercentage,omitempty" xml:"DistPlanPercentage,omitempty"`
	DynamicSql         *bool    `json:"DynamicSql,omitempty" xml:"DynamicSql,omitempty"`
	// Average execution count per second during the execution period.
	ExecPs *float64 `json:"ExecPs,omitempty" xml:"ExecPs,omitempty"`
	// Total number of executions during the execution period.
	Executions *float64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// Average number of partition accessed during the execution period.
	FailCount *float64 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// Error percentage during the execution period.
	FailPercentage *float64 `json:"FailPercentage,omitempty" xml:"FailPercentage,omitempty"`
	// Whether a internal SQL.
	Inner        *bool  `json:"Inner,omitempty" xml:"Inner,omitempty"`
	LastFailCode *int64 `json:"LastFailCode,omitempty" xml:"LastFailCode,omitempty"`
	// Local plan percentage during the execution period.
	LocalPlanPercentage *float64 `json:"LocalPlanPercentage,omitempty" xml:"LocalPlanPercentage,omitempty"`
	// Max affected rows during the execution period.
	MaxAffectedRows *float64 `json:"MaxAffectedRows,omitempty" xml:"MaxAffectedRows,omitempty"`
	// Max Application event wait time (in milliseconds) during the execution period.
	MaxApplicationWaitTime *float64 `json:"MaxApplicationWaitTime,omitempty" xml:"MaxApplicationWaitTime,omitempty"`
	// Max Concurrency event wait time (in milliseconds) during the execution period.
	MaxConcurrencyWaitTime *float64 `json:"MaxConcurrencyWaitTime,omitempty" xml:"MaxConcurrencyWaitTime,omitempty"`
	// Max CPU time (in milliseconds).
	MaxCpuTime *float64 `json:"MaxCpuTime,omitempty" xml:"MaxCpuTime,omitempty"`
	// Max physical read count during the execution period.
	MaxDiskReads *float64 `json:"MaxDiskReads,omitempty" xml:"MaxDiskReads,omitempty"`
	// Max response time during the execution period.
	MaxElapsedTime *float64 `json:"MaxElapsedTime,omitempty" xml:"MaxElapsedTime,omitempty"`
	// Max returned rows during the execution period.
	MaxReturnRows *float64 `json:"MaxReturnRows,omitempty" xml:"MaxReturnRows,omitempty"`
	// Max UserIO event wait time (in milliseconds) during the execution period.
	MaxUserIoWaitTime *float64 `json:"MaxUserIoWaitTime,omitempty" xml:"MaxUserIoWaitTime,omitempty"`
	// Max wait time (in milliseconds) during the execution period.
	MaxWaitTime *float64 `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	// Plan hit rage during the execution period.
	MissPlanPercentage *float64 `json:"MissPlanPercentage,omitempty" xml:"MissPlanPercentage,omitempty"`
	// Missed hit count of the execution plan during the execution period.
	MissPlans *float64 `json:"MissPlans,omitempty" xml:"MissPlans,omitempty"`
	// Remote plan percentage during the execution period.
	RemotePlanPercentage *float64 `json:"RemotePlanPercentage,omitempty" xml:"RemotePlanPercentage,omitempty"`
	// Remote execution count during the execution period.
	RemotePlans *float64 `json:"RemotePlans,omitempty" xml:"RemotePlans,omitempty"`
	// Number of occurrences of the code 4012 during the execution period.
	RetCode4012Count *int64 `json:"RetCode4012Count,omitempty" xml:"RetCode4012Count,omitempty"`
	// Number of occurrences of the code 4013 during the execution period.
	RetCode4013Count *int64 `json:"RetCode4013Count,omitempty" xml:"RetCode4013Count,omitempty"`
	// Number of occurrences of the code 5001 during the execution period.
	RetCode5001Count *int64 `json:"RetCode5001Count,omitempty" xml:"RetCode5001Count,omitempty"`
	// Number of occurrences of the code 5024 during the execution period.
	RetCode5024Count *int64 `json:"RetCode5024Count,omitempty" xml:"RetCode5024Count,omitempty"`
	// Number of occurrences of the code 5167 during the execution period.
	RetCode5167Count *int64 `json:"RetCode5167Count,omitempty" xml:"RetCode5167Count,omitempty"`
	// Number of occurrences of the code 5217 during the execution period.
	RetCode5217Count *int64 `json:"RetCode5217Count,omitempty" xml:"RetCode5217Count,omitempty"`
	// Number of occurrences of the code 6002 during the execution period.
	RetCode6002Count *int64 `json:"RetCode6002Count,omitempty" xml:"RetCode6002Count,omitempty"`
	// Total retry count during the execution period.
	RetryCount *float64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// RPC count during the execution period.
	RpcCount *float64 `json:"RpcCount,omitempty" xml:"RpcCount,omitempty"`
	// The server where the SQL is executed.
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// The server IP where the SQL is executed.
	ServerIp *string `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	// The server port where the SQL is executed.
	ServerPort *int64 `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	// SQL ID.
	SqlId   *string                                         `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	SqlList []*DescribeOasTopSQLListResponseBodyDataSqlList `json:"SqlList,omitempty" xml:"SqlList,omitempty" type:"Repeated"`
	// SQL text (the first 100 characters).
	SqlTextShort *string `json:"SqlTextShort,omitempty" xml:"SqlTextShort,omitempty"`
	// SQL type.
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// Strong consistent transaction percentage during the execution period.
	StrongConsistencyPercentage *float64 `json:"StrongConsistencyPercentage,omitempty" xml:"StrongConsistencyPercentage,omitempty"`
	SumDbTime                   *float64 `json:"SumDbTime,omitempty" xml:"SumDbTime,omitempty"`
	// Total response time (in milliseconds) during the execution period.
	SumElapsedTime *float64 `json:"SumElapsedTime,omitempty" xml:"SumElapsedTime,omitempty"`
	// Total logical reads.
	SumLogicalReads *float64 `json:"SumLogicalReads,omitempty" xml:"SumLogicalReads,omitempty"`
	// Total wait time (in milliseconds) during the execution period.
	SumWaitTime *float64 `json:"SumWaitTime,omitempty" xml:"SumWaitTime,omitempty"`
	// Table scan percentage during the execution period.
	TableScanPercentage *float64 `json:"TableScanPercentage,omitempty" xml:"TableScanPercentage,omitempty"`
	// Total wait time (in milliseconds) during the execution period.
	TotalWaitTime *float64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// Username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// Longest wait event during the execution period.
	WaitEvent *string `json:"WaitEvent,omitempty" xml:"WaitEvent,omitempty"`
	// Eventually consistent transaction percentage during the execution period.
	WeakConsistencyPercentage *float64 `json:"WeakConsistencyPercentage,omitempty" xml:"WeakConsistencyPercentage,omitempty"`
}

func (s DescribeOasTopSQLListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasTopSQLListResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgAffectedRows(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgAffectedRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgApplicationWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgApplicationWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgBlockCacheHit(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgBlockCacheHit = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgBlockIndexCacheHit(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgBlockIndexCacheHit = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgBloomFilterCacheHit(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgBloomFilterCacheHit = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgConcurrencyWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgCpuTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgCpuTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgDbTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgDbTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgDecodeTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgDecodeTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgDiskReads(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgDiskReads = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgElapsedTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgElapsedTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgExecuteTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgExecuteTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgExecutorRpcCount(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgExecutorRpcCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgExpectedWorkerCount(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgExpectedWorkerCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgGetPlanTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgGetPlanTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgLogicalReads(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgLogicalReads = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgMemstoreReadRows(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgMemstoreReadRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgNetTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgNetTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgNetWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgNetWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgPartitionCount(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgPartitionCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgQueueTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgQueueTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgReturnRows(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgReturnRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgRowCacheHit(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgRowCacheHit = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgRpcCount(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgRpcCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgScheduleTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgScheduleTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgSsstoreReadRows(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgSsstoreReadRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgUsedWorkerCount(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgUsedWorkerCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgUserIoWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgUserIoWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgWaitCount(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgWaitCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetAvgWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.AvgWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetClientIp(v string) *DescribeOasTopSQLListResponseBodyData {
	s.ClientIp = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetCpuPercentage(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.CpuPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetDbName(v string) *DescribeOasTopSQLListResponseBodyData {
	s.DbName = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetDistPlanPercentage(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.DistPlanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetDynamicSql(v bool) *DescribeOasTopSQLListResponseBodyData {
	s.DynamicSql = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetExecPs(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.ExecPs = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetExecutions(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.Executions = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetFailCount(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.FailCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetFailPercentage(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.FailPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetInner(v bool) *DescribeOasTopSQLListResponseBodyData {
	s.Inner = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetLastFailCode(v int64) *DescribeOasTopSQLListResponseBodyData {
	s.LastFailCode = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetLocalPlanPercentage(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.LocalPlanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMaxAffectedRows(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MaxAffectedRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMaxApplicationWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MaxApplicationWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMaxConcurrencyWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MaxConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMaxCpuTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MaxCpuTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMaxDiskReads(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MaxDiskReads = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMaxElapsedTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MaxElapsedTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMaxReturnRows(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MaxReturnRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMaxUserIoWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MaxUserIoWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMaxWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MaxWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMissPlanPercentage(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MissPlanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetMissPlans(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.MissPlans = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRemotePlanPercentage(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.RemotePlanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRemotePlans(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.RemotePlans = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRetCode4012Count(v int64) *DescribeOasTopSQLListResponseBodyData {
	s.RetCode4012Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRetCode4013Count(v int64) *DescribeOasTopSQLListResponseBodyData {
	s.RetCode4013Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRetCode5001Count(v int64) *DescribeOasTopSQLListResponseBodyData {
	s.RetCode5001Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRetCode5024Count(v int64) *DescribeOasTopSQLListResponseBodyData {
	s.RetCode5024Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRetCode5167Count(v int64) *DescribeOasTopSQLListResponseBodyData {
	s.RetCode5167Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRetCode5217Count(v int64) *DescribeOasTopSQLListResponseBodyData {
	s.RetCode5217Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRetCode6002Count(v int64) *DescribeOasTopSQLListResponseBodyData {
	s.RetCode6002Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRetryCount(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.RetryCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetRpcCount(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.RpcCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetServer(v string) *DescribeOasTopSQLListResponseBodyData {
	s.Server = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetServerIp(v string) *DescribeOasTopSQLListResponseBodyData {
	s.ServerIp = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetServerPort(v int64) *DescribeOasTopSQLListResponseBodyData {
	s.ServerPort = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetSqlId(v string) *DescribeOasTopSQLListResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetSqlList(v []*DescribeOasTopSQLListResponseBodyDataSqlList) *DescribeOasTopSQLListResponseBodyData {
	s.SqlList = v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetSqlTextShort(v string) *DescribeOasTopSQLListResponseBodyData {
	s.SqlTextShort = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetSqlType(v string) *DescribeOasTopSQLListResponseBodyData {
	s.SqlType = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetStrongConsistencyPercentage(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.StrongConsistencyPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetSumDbTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.SumDbTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetSumElapsedTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.SumElapsedTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetSumLogicalReads(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.SumLogicalReads = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetSumWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.SumWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetTableScanPercentage(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.TableScanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetTotalWaitTime(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.TotalWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetUserName(v string) *DescribeOasTopSQLListResponseBodyData {
	s.UserName = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetWaitEvent(v string) *DescribeOasTopSQLListResponseBodyData {
	s.WaitEvent = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyData) SetWeakConsistencyPercentage(v float64) *DescribeOasTopSQLListResponseBodyData {
	s.WeakConsistencyPercentage = &v
	return s
}

type DescribeOasTopSQLListResponseBodyDataSqlList struct {
	AvgAffectedRows             *float64 `json:"AvgAffectedRows,omitempty" xml:"AvgAffectedRows,omitempty"`
	AvgApplicationWaitTime      *float64 `json:"AvgApplicationWaitTime,omitempty" xml:"AvgApplicationWaitTime,omitempty"`
	AvgBlockCacheHit            *float64 `json:"AvgBlockCacheHit,omitempty" xml:"AvgBlockCacheHit,omitempty"`
	AvgBlockIndexCacheHit       *float64 `json:"AvgBlockIndexCacheHit,omitempty" xml:"AvgBlockIndexCacheHit,omitempty"`
	AvgBloomFilterCacheHit      *float64 `json:"AvgBloomFilterCacheHit,omitempty" xml:"AvgBloomFilterCacheHit,omitempty"`
	AvgConcurrencyWaitTime      *float64 `json:"AvgConcurrencyWaitTime,omitempty" xml:"AvgConcurrencyWaitTime,omitempty"`
	AvgCpuTime                  *float64 `json:"AvgCpuTime,omitempty" xml:"AvgCpuTime,omitempty"`
	AvgDbTime                   *float64 `json:"AvgDbTime,omitempty" xml:"AvgDbTime,omitempty"`
	AvgDecodeTime               *float64 `json:"AvgDecodeTime,omitempty" xml:"AvgDecodeTime,omitempty"`
	AvgDiskReads                *float64 `json:"AvgDiskReads,omitempty" xml:"AvgDiskReads,omitempty"`
	AvgElapsedTime              *float64 `json:"AvgElapsedTime,omitempty" xml:"AvgElapsedTime,omitempty"`
	AvgExecuteTime              *float64 `json:"AvgExecuteTime,omitempty" xml:"AvgExecuteTime,omitempty"`
	AvgExecutorRpcCount         *float64 `json:"AvgExecutorRpcCount,omitempty" xml:"AvgExecutorRpcCount,omitempty"`
	AvgExpectedWorkerCount      *float64 `json:"AvgExpectedWorkerCount,omitempty" xml:"AvgExpectedWorkerCount,omitempty"`
	AvgGetPlanTime              *float64 `json:"AvgGetPlanTime,omitempty" xml:"AvgGetPlanTime,omitempty"`
	AvgLogicalReads             *float64 `json:"AvgLogicalReads,omitempty" xml:"AvgLogicalReads,omitempty"`
	AvgMemstoreReadRows         *float64 `json:"AvgMemstoreReadRows,omitempty" xml:"AvgMemstoreReadRows,omitempty"`
	AvgNetTime                  *float64 `json:"AvgNetTime,omitempty" xml:"AvgNetTime,omitempty"`
	AvgNetWaitTime              *float64 `json:"AvgNetWaitTime,omitempty" xml:"AvgNetWaitTime,omitempty"`
	AvgPartitionCount           *float64 `json:"AvgPartitionCount,omitempty" xml:"AvgPartitionCount,omitempty"`
	AvgQueueTime                *float64 `json:"AvgQueueTime,omitempty" xml:"AvgQueueTime,omitempty"`
	AvgReturnRows               *float64 `json:"AvgReturnRows,omitempty" xml:"AvgReturnRows,omitempty"`
	AvgRowCacheHit              *float64 `json:"AvgRowCacheHit,omitempty" xml:"AvgRowCacheHit,omitempty"`
	AvgRpcCount                 *float64 `json:"AvgRpcCount,omitempty" xml:"AvgRpcCount,omitempty"`
	AvgScheduleTime             *float64 `json:"AvgScheduleTime,omitempty" xml:"AvgScheduleTime,omitempty"`
	AvgSsstoreReadRows          *float64 `json:"AvgSsstoreReadRows,omitempty" xml:"AvgSsstoreReadRows,omitempty"`
	AvgUsedWorkerCount          *float64 `json:"AvgUsedWorkerCount,omitempty" xml:"AvgUsedWorkerCount,omitempty"`
	AvgUserIoWaitTime           *float64 `json:"AvgUserIoWaitTime,omitempty" xml:"AvgUserIoWaitTime,omitempty"`
	AvgWaitCount                *float64 `json:"AvgWaitCount,omitempty" xml:"AvgWaitCount,omitempty"`
	AvgWaitTime                 *float64 `json:"AvgWaitTime,omitempty" xml:"AvgWaitTime,omitempty"`
	ClientIp                    *string  `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	CpuPercentage               *float64 `json:"CpuPercentage,omitempty" xml:"CpuPercentage,omitempty"`
	DbName                      *string  `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DistPlanPercentage          *float64 `json:"DistPlanPercentage,omitempty" xml:"DistPlanPercentage,omitempty"`
	ExecPs                      *float64 `json:"ExecPs,omitempty" xml:"ExecPs,omitempty"`
	Executions                  *float64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	FailCount                   *float64 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	FailPercentage              *float64 `json:"FailPercentage,omitempty" xml:"FailPercentage,omitempty"`
	Inner                       *bool    `json:"Inner,omitempty" xml:"Inner,omitempty"`
	LocalPlanPercentage         *float64 `json:"LocalPlanPercentage,omitempty" xml:"LocalPlanPercentage,omitempty"`
	MaxAffectedRows             *float64 `json:"MaxAffectedRows,omitempty" xml:"MaxAffectedRows,omitempty"`
	MaxApplicationWaitTime      *float64 `json:"MaxApplicationWaitTime,omitempty" xml:"MaxApplicationWaitTime,omitempty"`
	MaxConcurrencyWaitTime      *float64 `json:"MaxConcurrencyWaitTime,omitempty" xml:"MaxConcurrencyWaitTime,omitempty"`
	MaxCpuTime                  *float64 `json:"MaxCpuTime,omitempty" xml:"MaxCpuTime,omitempty"`
	MaxDiskReads                *float64 `json:"MaxDiskReads,omitempty" xml:"MaxDiskReads,omitempty"`
	MaxElapsedTime              *float64 `json:"MaxElapsedTime,omitempty" xml:"MaxElapsedTime,omitempty"`
	MaxReturnRows               *float64 `json:"MaxReturnRows,omitempty" xml:"MaxReturnRows,omitempty"`
	MaxUserIoWaitTime           *float64 `json:"MaxUserIoWaitTime,omitempty" xml:"MaxUserIoWaitTime,omitempty"`
	MaxWaitTime                 *float64 `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	MissPlanPercentage          *float64 `json:"MissPlanPercentage,omitempty" xml:"MissPlanPercentage,omitempty"`
	MissPlans                   *float64 `json:"MissPlans,omitempty" xml:"MissPlans,omitempty"`
	RemotePlanPercentage        *float64 `json:"RemotePlanPercentage,omitempty" xml:"RemotePlanPercentage,omitempty"`
	RemotePlans                 *float64 `json:"RemotePlans,omitempty" xml:"RemotePlans,omitempty"`
	RetCode4012Count            *int64   `json:"RetCode4012Count,omitempty" xml:"RetCode4012Count,omitempty"`
	RetCode4013Count            *int64   `json:"RetCode4013Count,omitempty" xml:"RetCode4013Count,omitempty"`
	RetCode5001Count            *int64   `json:"RetCode5001Count,omitempty" xml:"RetCode5001Count,omitempty"`
	RetCode5024Count            *int64   `json:"RetCode5024Count,omitempty" xml:"RetCode5024Count,omitempty"`
	RetCode5167Count            *int64   `json:"RetCode5167Count,omitempty" xml:"RetCode5167Count,omitempty"`
	RetCode5217Count            *int64   `json:"RetCode5217Count,omitempty" xml:"RetCode5217Count,omitempty"`
	RetCode6002Count            *int64   `json:"RetCode6002Count,omitempty" xml:"RetCode6002Count,omitempty"`
	RetryCount                  *float64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	RpcCount                    *float64 `json:"RpcCount,omitempty" xml:"RpcCount,omitempty"`
	Server                      *string  `json:"Server,omitempty" xml:"Server,omitempty"`
	ServerIp                    *string  `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	ServerPort                  *int64   `json:"ServerPort,omitempty" xml:"ServerPort,omitempty"`
	SqlId                       *string  `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	SqlTextShort                *string  `json:"SqlTextShort,omitempty" xml:"SqlTextShort,omitempty"`
	SqlType                     *string  `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	StrongConsistencyPercentage *float64 `json:"StrongConsistencyPercentage,omitempty" xml:"StrongConsistencyPercentage,omitempty"`
	SumDbTime                   *float64 `json:"SumDbTime,omitempty" xml:"SumDbTime,omitempty"`
	SumElapsedTime              *float64 `json:"SumElapsedTime,omitempty" xml:"SumElapsedTime,omitempty"`
	SumLogicalReads             *float64 `json:"SumLogicalReads,omitempty" xml:"SumLogicalReads,omitempty"`
	SumWaitTime                 *float64 `json:"SumWaitTime,omitempty" xml:"SumWaitTime,omitempty"`
	TableScanPercentage         *float64 `json:"TableScanPercentage,omitempty" xml:"TableScanPercentage,omitempty"`
	TotalWaitTime               *float64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	UserName                    *string  `json:"UserName,omitempty" xml:"UserName,omitempty"`
	WaitEvent                   *string  `json:"WaitEvent,omitempty" xml:"WaitEvent,omitempty"`
	WeakConsistencyPercentage   *float64 `json:"WeakConsistencyPercentage,omitempty" xml:"WeakConsistencyPercentage,omitempty"`
}

func (s DescribeOasTopSQLListResponseBodyDataSqlList) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasTopSQLListResponseBodyDataSqlList) GoString() string {
	return s.String()
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgAffectedRows(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgAffectedRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgApplicationWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgApplicationWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgBlockCacheHit(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgBlockCacheHit = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgBlockIndexCacheHit(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgBlockIndexCacheHit = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgBloomFilterCacheHit(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgBloomFilterCacheHit = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgConcurrencyWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgCpuTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgCpuTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgDbTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgDbTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgDecodeTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgDecodeTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgDiskReads(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgDiskReads = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgElapsedTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgElapsedTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgExecuteTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgExecuteTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgExecutorRpcCount(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgExecutorRpcCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgExpectedWorkerCount(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgExpectedWorkerCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgGetPlanTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgGetPlanTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgLogicalReads(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgLogicalReads = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgMemstoreReadRows(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgMemstoreReadRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgNetTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgNetTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgNetWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgNetWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgPartitionCount(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgPartitionCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgQueueTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgQueueTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgReturnRows(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgReturnRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgRowCacheHit(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgRowCacheHit = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgRpcCount(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgRpcCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgScheduleTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgScheduleTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgSsstoreReadRows(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgSsstoreReadRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgUsedWorkerCount(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgUsedWorkerCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgUserIoWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgUserIoWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgWaitCount(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgWaitCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetAvgWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.AvgWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetClientIp(v string) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.ClientIp = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetCpuPercentage(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.CpuPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetDbName(v string) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.DbName = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetDistPlanPercentage(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.DistPlanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetExecPs(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.ExecPs = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetExecutions(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.Executions = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetFailCount(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.FailCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetFailPercentage(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.FailPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetInner(v bool) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.Inner = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetLocalPlanPercentage(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.LocalPlanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMaxAffectedRows(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MaxAffectedRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMaxApplicationWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MaxApplicationWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMaxConcurrencyWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MaxConcurrencyWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMaxCpuTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MaxCpuTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMaxDiskReads(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MaxDiskReads = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMaxElapsedTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MaxElapsedTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMaxReturnRows(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MaxReturnRows = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMaxUserIoWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MaxUserIoWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMaxWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MaxWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMissPlanPercentage(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MissPlanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetMissPlans(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.MissPlans = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRemotePlanPercentage(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RemotePlanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRemotePlans(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RemotePlans = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRetCode4012Count(v int64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RetCode4012Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRetCode4013Count(v int64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RetCode4013Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRetCode5001Count(v int64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RetCode5001Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRetCode5024Count(v int64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RetCode5024Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRetCode5167Count(v int64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RetCode5167Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRetCode5217Count(v int64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RetCode5217Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRetCode6002Count(v int64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RetCode6002Count = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRetryCount(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RetryCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetRpcCount(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.RpcCount = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetServer(v string) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.Server = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetServerIp(v string) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.ServerIp = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetServerPort(v int64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.ServerPort = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetSqlId(v string) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.SqlId = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetSqlTextShort(v string) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.SqlTextShort = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetSqlType(v string) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.SqlType = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetStrongConsistencyPercentage(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.StrongConsistencyPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetSumDbTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.SumDbTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetSumElapsedTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.SumElapsedTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetSumLogicalReads(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.SumLogicalReads = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetSumWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.SumWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetTableScanPercentage(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.TableScanPercentage = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetTotalWaitTime(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.TotalWaitTime = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetUserName(v string) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.UserName = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetWaitEvent(v string) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.WaitEvent = &v
	return s
}

func (s *DescribeOasTopSQLListResponseBodyDataSqlList) SetWeakConsistencyPercentage(v float64) *DescribeOasTopSQLListResponseBodyDataSqlList {
	s.WeakConsistencyPercentage = &v
	return s
}

type DescribeOasTopSQLListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOasTopSQLListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOasTopSQLListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOasTopSQLListResponse) GoString() string {
	return s.String()
}

func (s *DescribeOasTopSQLListResponse) SetHeaders(v map[string]*string) *DescribeOasTopSQLListResponse {
	s.Headers = v
	return s
}

func (s *DescribeOasTopSQLListResponse) SetStatusCode(v int32) *DescribeOasTopSQLListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOasTopSQLListResponse) SetBody(v *DescribeOasTopSQLListResponseBody) *DescribeOasTopSQLListResponse {
	s.Body = v
	return s
}

type DescribeOmsOpenAPIProjectRequest struct {
	// The page number, which takes effect in a pagination query.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page size, which takes effect in a pagination query.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The project ID.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s DescribeOmsOpenAPIProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectRequest) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectRequest) SetPageNumber(v int32) *DescribeOmsOpenAPIProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectRequest) SetPageSize(v int32) *DescribeOmsOpenAPIProjectRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectRequest) SetProjectId(v string) *DescribeOmsOpenAPIProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectRequest) SetWorkerGradeId(v string) *DescribeOmsOpenAPIProjectRequest {
	s.WorkerGradeId = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBody struct {
	// The suggestions (old).
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// The error code (old).
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time spent in processing the request, in seconds.
	Cost *string `json:"Cost,omitempty" xml:"Cost,omitempty"`
	// The business data returned.
	Data *DescribeOmsOpenAPIProjectResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error details.
	ErrorDetail *DescribeOmsOpenAPIProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	// The error description (old).
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number, which takes effect in a pagination query.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page size, which takes effect in a pagination query.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total count, which takes effect in a pagination query.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetAdvice(v string) *DescribeOmsOpenAPIProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetCode(v string) *DescribeOmsOpenAPIProjectResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetCost(v string) *DescribeOmsOpenAPIProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetData(v *DescribeOmsOpenAPIProjectResponseBodyData) *DescribeOmsOpenAPIProjectResponseBody {
	s.Data = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetErrorDetail(v *DescribeOmsOpenAPIProjectResponseBodyErrorDetail) *DescribeOmsOpenAPIProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetMessage(v string) *DescribeOmsOpenAPIProjectResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetPageNumber(v int32) *DescribeOmsOpenAPIProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetPageSize(v int32) *DescribeOmsOpenAPIProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetRequestId(v string) *DescribeOmsOpenAPIProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetSuccess(v bool) *DescribeOmsOpenAPIProjectResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBody) SetTotalCount(v int64) *DescribeOmsOpenAPIProjectResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyData struct {
	// The business system identifier, which is optional and is a specific field of the Post message.
	BusinessName *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	// The settings of the destination data source.
	DestConfig *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig `json:"DestConfig,omitempty" xml:"DestConfig,omitempty" type:"Struct"`
	// A collection of label IDs.
	Labels []*DescribeOmsOpenAPIProjectResponseBodyDataLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The project ID.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The name of the project.
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	// The project owner.
	ProjectOwner *string `json:"ProjectOwner,omitempty" xml:"ProjectOwner,omitempty"`
	// The settings of the source data source.
	SourceConfig *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty" type:"Struct"`
	// The detailed project steps.
	Steps []*DescribeOmsOpenAPIProjectResponseBodyDataSteps `json:"Steps,omitempty" xml:"Steps,omitempty" type:"Repeated"`
	// The mappings for the synchronization objects.
	TransferMapping *DescribeOmsOpenAPIProjectResponseBodyDataTransferMapping `json:"TransferMapping,omitempty" xml:"TransferMapping,omitempty" type:"Struct"`
	// The settings of synchronization steps
	TransferStepConfig *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig `json:"TransferStepConfig,omitempty" xml:"TransferStepConfig,omitempty" type:"Struct"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetBusinessName(v string) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.BusinessName = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetDestConfig(v *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.DestConfig = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetLabels(v []*DescribeOmsOpenAPIProjectResponseBodyDataLabels) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.Labels = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetProjectId(v string) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetProjectName(v string) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetProjectOwner(v string) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.ProjectOwner = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetSourceConfig(v *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.SourceConfig = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetSteps(v []*DescribeOmsOpenAPIProjectResponseBodyDataSteps) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.Steps = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetTransferMapping(v *DescribeOmsOpenAPIProjectResponseBodyDataTransferMapping) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.TransferMapping = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyData) SetTransferStepConfig(v *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig) *DescribeOmsOpenAPIProjectResponseBodyData {
	s.TransferStepConfig = v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataDestConfig struct {
	// Indicates whether message tracing is enabled when the destination data source is RocketMQ.
	EnableMsgTrace *bool `json:"EnableMsgTrace,omitempty" xml:"EnableMsgTrace,omitempty"`
	// The ID of the data source.
	EndpointId *string `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	// The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.
	EndpointType *string `json:"EndpointType,omitempty" xml:"EndpointType,omitempty"`
	// The tag of the Post message when the destination data source is RocketMQ.
	MsgTags *string `json:"MsgTags,omitempty" xml:"MsgTags,omitempty"`
	// The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.
	Partition *int32 `json:"Partition,omitempty" xml:"Partition,omitempty"`
	// The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.
	PartitionMode *string `json:"PartitionMode,omitempty" xml:"PartitionMode,omitempty"`
	// The producer group of the Post message when the destination data source is RocketMQ.
	ProducerGroup *string `json:"ProducerGroup,omitempty" xml:"ProducerGroup,omitempty"`
	// The timeout period in seconds for a single Post message when the destination data source is RocketMQ.
	SendMsgTimeout *int64 `json:"SendMsgTimeout,omitempty" xml:"SendMsgTimeout,omitempty"`
	// Indicates whether message sequencing is enabled when the destination data source is DataHub.
	SequenceEnable *bool `json:"SequenceEnable,omitempty" xml:"SequenceEnable,omitempty"`
	// The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.
	SequenceStartTimestamp *int64 `json:"SequenceStartTimestamp,omitempty" xml:"SequenceStartTimestamp,omitempty"`
	// The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.
	SerializerType *string `json:"SerializerType,omitempty" xml:"SerializerType,omitempty"`
	// The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.
	TopicType *string `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetEnableMsgTrace(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.EnableMsgTrace = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetEndpointId(v string) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.EndpointId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetEndpointType(v string) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.EndpointType = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetMsgTags(v string) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.MsgTags = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetPartition(v int32) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.Partition = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetPartitionMode(v string) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.PartitionMode = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetProducerGroup(v string) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.ProducerGroup = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetSendMsgTimeout(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.SendMsgTimeout = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetSequenceEnable(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.SequenceEnable = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetSequenceStartTimestamp(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.SequenceStartTimestamp = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetSerializerType(v string) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.SerializerType = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig) SetTopicType(v string) *DescribeOmsOpenAPIProjectResponseBodyDataDestConfig {
	s.TopicType = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataLabels struct {
	// The number of projects that use this label.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The creator. This parameter value is returned only when you log on as the administrator.
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The ID of a label.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the label.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataLabels) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataLabels) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataLabels) SetCount(v int32) *DescribeOmsOpenAPIProjectResponseBodyDataLabels {
	s.Count = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataLabels) SetCreator(v string) *DescribeOmsOpenAPIProjectResponseBodyDataLabels {
	s.Creator = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataLabels) SetId(v string) *DescribeOmsOpenAPIProjectResponseBodyDataLabels {
	s.Id = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataLabels) SetName(v string) *DescribeOmsOpenAPIProjectResponseBodyDataLabels {
	s.Name = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig struct {
	// Indicates whether message tracing is enabled when the destination data source is RocketMQ.
	EnableMsgTrace *bool `json:"EnableMsgTrace,omitempty" xml:"EnableMsgTrace,omitempty"`
	// The ID of the data source.
	EndpointId *string `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	// The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.
	EndpointType *string `json:"EndpointType,omitempty" xml:"EndpointType,omitempty"`
	// The tag of the Post message when the destination data source is RocketMQ.
	MsgTags *string `json:"MsgTags,omitempty" xml:"MsgTags,omitempty"`
	// The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.
	Partition *int32 `json:"Partition,omitempty" xml:"Partition,omitempty"`
	// The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.
	PartitionMode *string `json:"PartitionMode,omitempty" xml:"PartitionMode,omitempty"`
	// The producer group of the Post message when the destination data source is RocketMQ.
	ProducerGroup *string `json:"ProducerGroup,omitempty" xml:"ProducerGroup,omitempty"`
	// The timeout period in seconds for a single Post message when the destination data source is RocketMQ.
	SendMsgTimeout *int64 `json:"SendMsgTimeout,omitempty" xml:"SendMsgTimeout,omitempty"`
	// Indicates whether message sequencing is enabled when the destination data source is DataHub.
	SequenceEnable *bool `json:"SequenceEnable,omitempty" xml:"SequenceEnable,omitempty"`
	// The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.
	SequenceStartTimestamp *int64 `json:"SequenceStartTimestamp,omitempty" xml:"SequenceStartTimestamp,omitempty"`
	// The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.
	SerializerType *string `json:"SerializerType,omitempty" xml:"SerializerType,omitempty"`
	// The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.
	TopicType *string `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetEnableMsgTrace(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.EnableMsgTrace = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetEndpointId(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.EndpointId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetEndpointType(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.EndpointType = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetMsgTags(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.MsgTags = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetPartition(v int32) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.Partition = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetPartitionMode(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.PartitionMode = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetProducerGroup(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.ProducerGroup = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetSendMsgTimeout(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.SendMsgTimeout = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetSequenceEnable(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.SequenceEnable = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetSequenceStartTimestamp(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.SequenceStartTimestamp = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetSerializerType(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.SerializerType = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig) SetTopicType(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSourceConfig {
	s.TopicType = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataSteps struct {
	// The estimated time remained.
	EstimatedRemainingSeconds *int64 `json:"EstimatedRemainingSeconds,omitempty" xml:"EstimatedRemainingSeconds,omitempty"`
	// The additional information. The value is a JSON string.
	ExtraInfo *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty" type:"Struct"`
	// The end time, in the format of "2020-05-22T17:04:18".
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// Indicates whether the current step must be confirmed by the user, rather than scheduled in the backend.
	Interactive *bool `json:"Interactive,omitempty" xml:"Interactive,omitempty"`
	// The start time, in the format of "2020-05-22T17:04:18".
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The description of the step, for example, schema migration, full migration, full verification, incremental log pull, incremental synchronization, or incremental verification.
	StepDescription *string `json:"StepDescription,omitempty" xml:"StepDescription,omitempty"`
	// The step details. The value is a JSON string.
	StepInfo *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo `json:"StepInfo,omitempty" xml:"StepInfo,omitempty" type:"Struct"`
	// The step name. Valid values: struct_migration, full_migration, full_validation, incr_log_pull, incr_sync/incr_validation, PRE_CHECK, PREPARE, STRUCT_MIGRATION, INDEX_MIGRATION, STRUCT_SYNC, FULL_MIGRATION, APP_SWITCH, REVERSE_INCR_SYNC, FULL_VALIDATION, INCR_LOG_PULL, INCR_SYNC, INCR_VALIDATION, SYNC_PREPARE, SYNC_INCR_LOG_PULL, CONNECTOR_FULL_SYNC, or CONNECTOR_INCR_SYNC.
	StepName *string `json:"StepName,omitempty" xml:"StepName,omitempty"`
	// The sequence of steps.
	StepOrder *int32 `json:"StepOrder,omitempty" xml:"StepOrder,omitempty"`
	// The step progress.
	StepProgress *int32 `json:"StepProgress,omitempty" xml:"StepProgress,omitempty"`
	// The step status. Valid values: INIT, RUNNING, FAILED, FINISHED, SUSPEND, and MONITORING. The value MONITORING indicates the continuous monitoring of incremental synchronization and incremental verification.
	StepStatus *string `json:"StepStatus,omitempty" xml:"StepStatus,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataSteps) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataSteps) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetEstimatedRemainingSeconds(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.EstimatedRemainingSeconds = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetExtraInfo(v *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.ExtraInfo = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetFinishTime(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.FinishTime = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetInteractive(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.Interactive = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetStartTime(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.StartTime = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetStepDescription(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.StepDescription = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetStepInfo(v *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.StepInfo = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetStepName(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.StepName = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetStepOrder(v int32) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.StepOrder = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetStepProgress(v int32) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.StepProgress = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataSteps) SetStepStatus(v string) *DescribeOmsOpenAPIProjectResponseBodyDataSteps {
	s.StepStatus = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo struct {
	// The error code, such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error details.
	ErrorDetails []*DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	// The error message.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The error related parameters.
	ErrorParam map[string]*string `json:"ErrorParam,omitempty" xml:"ErrorParam,omitempty"`
	// The time when the error occurred.
	FailedTime *string `json:"FailedTime,omitempty" xml:"FailedTime,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo) SetErrorCode(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo) SetErrorDetails(v []*DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails) *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo {
	s.ErrorDetails = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo) SetErrorMsg(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo) SetErrorParam(v map[string]*string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo {
	s.ErrorParam = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo) SetFailedTime(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfo {
	s.FailedTime = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails struct {
	// The error code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Valid values: CRITICAL, ERROR, and WARN.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The error message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The suggestions (new).
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails) SetCode(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails) SetLevel(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails) SetMessage(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails) SetProposal(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.Proposal = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo struct {
	// The estimated total number of rows.
	Capacity *int64 `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	// The checkpoint. The value is a unix timestamp in seconds.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The full synchronization progress.
	ConnectorFullProgressOverview *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview `json:"ConnectorFullProgressOverview,omitempty" xml:"ConnectorFullProgressOverview,omitempty" type:"Struct"`
	// The resource deployment ID.
	DeployId *string `json:"DeployId,omitempty" xml:"DeployId,omitempty"`
	// The read/write throughput of the destination data source, in bytes per second.
	DstIops *int64 `json:"DstIops,omitempty" xml:"DstIops,omitempty"`
	// The read/write RPS of the destination data source.
	DstRps *int64 `json:"DstRps,omitempty" xml:"DstRps,omitempty"`
	// The read/write RPS baseline of the destination data source.
	DstRpsRef *int64 `json:"DstRpsRef,omitempty" xml:"DstRpsRef,omitempty"`
	// The read/write RT per record of the destination data source, in ms.
	DstRt *int64 `json:"DstRt,omitempty" xml:"DstRt,omitempty"`
	// The read/write RT baseline of the destination data source.
	DstRtRef *int64 `json:"DstRtRef,omitempty" xml:"DstRtRef,omitempty"`
	// The checkpoint collection time. The value is a unix timestamp in seconds.
	Gmt *int64 `json:"Gmt,omitempty" xml:"Gmt,omitempty"`
	// The amount of inconsistent data found during full verification.
	Inconsistencies *int64 `json:"Inconsistencies,omitempty" xml:"Inconsistencies,omitempty"`
	// The checkpoint in incremental synchronization. The value is a unix timestamp in seconds.
	IncrTimestampCheckpoint *int64 `json:"IncrTimestampCheckpoint,omitempty" xml:"IncrTimestampCheckpoint,omitempty"`
	// The job ID.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The number of migrated rows.
	ProcessedRecords *int64 `json:"ProcessedRecords,omitempty" xml:"ProcessedRecords,omitempty"`
	// A sub-status that indicates whether this step is skipped.
	Skipped *bool `json:"Skipped,omitempty" xml:"Skipped,omitempty"`
	// The read throughput of the source data source, in bytes per second.
	SrcIops *int64 `json:"SrcIops,omitempty" xml:"SrcIops,omitempty"`
	// The read throughput baseline of the source data source.
	SrcIopsRef *int64 `json:"SrcIopsRef,omitempty" xml:"SrcIopsRef,omitempty"`
	// The read requests per second (RPS) of the source data source.
	SrcRps *int64 `json:"SrcRps,omitempty" xml:"SrcRps,omitempty"`
	// The read RPS baseline of the source data source.
	SrcRpsRef *int64 `json:"SrcRpsRef,omitempty" xml:"SrcRpsRef,omitempty"`
	// The read response time (RT) per record of the source data source, in ms.
	SrcRt *int64 `json:"SrcRt,omitempty" xml:"SrcRt,omitempty"`
	// The read RT baseline of the source data source.
	SrcRtRef *int64 `json:"SrcRtRef,omitempty" xml:"SrcRtRef,omitempty"`
	// A sub-status that indicates whether the checker has completed full verification.
	Validated *bool `json:"Validated,omitempty" xml:"Validated,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetCapacity(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.Capacity = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetCheckpoint(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.Checkpoint = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetConnectorFullProgressOverview(v *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.ConnectorFullProgressOverview = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetDeployId(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.DeployId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetDstIops(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.DstIops = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetDstRps(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.DstRps = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetDstRpsRef(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.DstRpsRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetDstRt(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.DstRt = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetDstRtRef(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.DstRtRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetGmt(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.Gmt = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetInconsistencies(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.Inconsistencies = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetIncrTimestampCheckpoint(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.IncrTimestampCheckpoint = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetJobId(v string) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.JobId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetProcessedRecords(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.ProcessedRecords = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetSkipped(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.Skipped = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetSrcIops(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.SrcIops = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetSrcIopsRef(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.SrcIopsRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetSrcRps(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.SrcRps = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetSrcRpsRef(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.SrcRpsRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetSrcRt(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.SrcRt = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetSrcRtRef(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.SrcRtRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo) SetValidated(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfo {
	s.Validated = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview struct {
	// The estimated maximum time remained, in seconds.
	EstimatedRemainingTimeOfSec *int64 `json:"EstimatedRemainingTimeOfSec,omitempty" xml:"EstimatedRemainingTimeOfSec,omitempty"`
	// The estimated amount of data to migrate.
	EstimatedTotalCount *int64 `json:"EstimatedTotalCount,omitempty" xml:"EstimatedTotalCount,omitempty"`
	// The amount of data migrated.
	FinishedCount *int64 `json:"FinishedCount,omitempty" xml:"FinishedCount,omitempty"`
	// finishedCount / estimatedTotalCount
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview) SetEstimatedRemainingTimeOfSec(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview {
	s.EstimatedRemainingTimeOfSec = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview) SetEstimatedTotalCount(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview {
	s.EstimatedTotalCount = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview) SetFinishedCount(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview {
	s.FinishedCount = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview) SetProgress(v int32) *DescribeOmsOpenAPIProjectResponseBodyDataStepsStepInfoConnectorFullProgressOverview {
	s.Progress = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataTransferMapping struct {
	// The table mapping in the source data source, which is a conventional mapping scheme and takes effect only when Mode is set to NORMAL.
	Databases []*DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The mapping type. Valid values: \"NORMAL\" and \"WHITE_AND_BLACK_LIST\".
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferMapping) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferMapping) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMapping) SetDatabases(v []*DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMapping {
	s.Databases = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMapping) SetMode(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMapping {
	s.Mode = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases struct {
	// The ID of the database. This parameter takes effect when the source data source is IDB.
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The name of the database.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The mapped-to database. This parameter takes effect when the destination data source is a database.
	MappedName *string `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	// The settings for the target table objects in the current database.
	Tables []*DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The mapped-to tenant. This parameter takes effect when the source data source is OceanBase Database.
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	// Valid values: DATABASE and TABLE.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases) SetDatabaseId(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases {
	s.DatabaseId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases) SetDatabaseName(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases {
	s.DatabaseName = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases) SetMappedName(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases {
	s.MappedName = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases) SetTables(v []*DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases {
	s.Tables = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases) SetTenantName(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases {
	s.TenantName = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases) SetType(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabases {
	s.Type = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables struct {
	// The schema of the ADB table. If the destination data source is ADB, you need to configure additional information for schema synchronization.
	AdbTableSchema *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	// The list of filter columns, which are the columns to be synchronized.
	FilterColumns []*string `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	// The name of the mapped-to table or topic. If the destination data source is a database, this parameter specifies the name of the mapped-to table. If the destination data source is a message queue system, this parameter specifies the name of the mapped-to topic.
	MappedName *string `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	// The list of sharding key columns. This parameter applies to scenarios where the destination data source is a message queue system.
	ShardColumns []*string `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	// The ID of the table. This parameter takes effect when the source data source is IDB.
	TableId *string `json:"TableId,omitempty" xml:"TableId,omitempty"`
	// The name of the table.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// Valid values: DATABASE and TABLE.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The row filter conditions.
	WhereClause *string `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) SetAdbTableSchema(v *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables {
	s.AdbTableSchema = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) SetFilterColumns(v []*string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables {
	s.FilterColumns = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) SetMappedName(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables {
	s.MappedName = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) SetShardColumns(v []*string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables {
	s.ShardColumns = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) SetTableId(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables {
	s.TableId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) SetTableName(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables {
	s.TableName = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) SetType(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables {
	s.Type = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables) SetWhereClause(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTables {
	s.WhereClause = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema struct {
	// The list of distribution key columns.
	DistributedKeys []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	// The lifecycle of the table.
	PartitionLifeCycle *int32 `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	// The partitioning expression.
	PartitionStatement *string `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	// The list of primary key columns.
	PrimaryKeys []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetDistributedKeys(v []*string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetPartitionLifeCycle(v int32) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetPartitionStatement(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetPrimaryKeys(v []*string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig struct {
	// Indicates whether full migration is enabled.
	EnableFullSync *bool `json:"EnableFullSync,omitempty" xml:"EnableFullSync,omitempty"`
	// Indicates whether incremental synchronization is enabled.
	EnableIncrSync *bool `json:"EnableIncrSync,omitempty" xml:"EnableIncrSync,omitempty"`
	// Indicates whether schema synchronization is enabled.
	EnableStructSync *bool `json:"EnableStructSync,omitempty" xml:"EnableStructSync,omitempty"`
	// The settings of incremental synchronization steps.
	IncrSyncStepTransferConfig *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig `json:"IncrSyncStepTransferConfig,omitempty" xml:"IncrSyncStepTransferConfig,omitempty" type:"Struct"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig) SetEnableFullSync(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig {
	s.EnableFullSync = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig) SetEnableIncrSync(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig {
	s.EnableIncrSync = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig) SetEnableStructSync(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig {
	s.EnableStructSync = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig) SetIncrSyncStepTransferConfig(v *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfig {
	s.IncrSyncStepTransferConfig = v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig struct {
	// The list of data types of incremental data synchronized in incremental synchronization.
	RecordTypeList []*string `json:"RecordTypeList,omitempty" xml:"RecordTypeList,omitempty" type:"Repeated"`
	// The start time for incremental synchronization. The value is a timestamp in seconds.
	StartTimestamp *int64 `json:"StartTimestamp,omitempty" xml:"StartTimestamp,omitempty"`
	// The retention time of logs when incremental synchronization is enabled and the incremental log pull component is Store.
	StoreLogKeptHour *int64 `json:"StoreLogKeptHour,omitempty" xml:"StoreLogKeptHour,omitempty"`
	// Indicates whether intra-transaction sequencing is enabled when incremental synchronization is enabled and the incremental log pull component is Store.
	StoreTransactionEnabled *bool `json:"StoreTransactionEnabled,omitempty" xml:"StoreTransactionEnabled,omitempty"`
	// Valid values: STRUCT, FULL, and INCR.
	TransferStepType *string `json:"TransferStepType,omitempty" xml:"TransferStepType,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetRecordTypeList(v []*string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.RecordTypeList = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetStartTimestamp(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.StartTimestamp = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetStoreLogKeptHour(v int64) *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.StoreLogKeptHour = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetStoreTransactionEnabled(v bool) *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.StoreTransactionEnabled = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetTransferStepType(v string) *DescribeOmsOpenAPIProjectResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.TransferStepType = &v
	return s
}

type DescribeOmsOpenAPIProjectResponseBodyErrorDetail struct {
	// The error code (new).
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error level. Valid values: CRITICAL, ERROR, and WARN.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The error description (new).
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The suggestions (new).
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponseBodyErrorDetail) SetCode(v string) *DescribeOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyErrorDetail) SetLevel(v string) *DescribeOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyErrorDetail) SetMessage(v string) *DescribeOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponseBodyErrorDetail) SetProposal(v string) *DescribeOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type DescribeOmsOpenAPIProjectResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOmsOpenAPIProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOmsOpenAPIProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectResponse) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectResponse) SetHeaders(v map[string]*string) *DescribeOmsOpenAPIProjectResponse {
	s.Headers = v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponse) SetStatusCode(v int32) *DescribeOmsOpenAPIProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectResponse) SetBody(v *DescribeOmsOpenAPIProjectResponseBody) *DescribeOmsOpenAPIProjectResponse {
	s.Body = v
	return s
}

type DescribeOmsOpenAPIProjectStepsRequest struct {
	// The read RT baseline of the source data source.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The read/write RPS baseline of the destination data source.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The read/write RT baseline of the destination data source.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The read RT baseline of the source data source.
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s DescribeOmsOpenAPIProjectStepsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectStepsRequest) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectStepsRequest) SetPageNumber(v int32) *DescribeOmsOpenAPIProjectStepsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsRequest) SetPageSize(v int32) *DescribeOmsOpenAPIProjectStepsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsRequest) SetProjectId(v string) *DescribeOmsOpenAPIProjectStepsRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsRequest) SetWorkerGradeId(v string) *DescribeOmsOpenAPIProjectStepsRequest {
	s.WorkerGradeId = &v
	return s
}

type DescribeOmsOpenAPIProjectStepsResponseBody struct {
	// The error related parameters.
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// The error code (old), such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The step end time, in the format of "yyyy-MM-ddTHH:mm:ss".
	Cost *string `json:"Cost,omitempty" xml:"Cost,omitempty"`
	// Indicates whether the current step must be confirmed by the user, rather than scheduled in the backend.
	Data []*DescribeOmsOpenAPIProjectStepsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The step details. The value is a JSON string.
	ErrorDetail *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	// A system error occurred.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The additional information. The value is a JSON string.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The step start time, in the format of "yyyy-MM-ddTHH:mm:ss".
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The time when the error occurred.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The read throughput baseline of the source data source.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The estimated remaining time. This parameter takes effect in full synchronization.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeOmsOpenAPIProjectStepsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectStepsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetAdvice(v string) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.Advice = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetCode(v string) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetCost(v string) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.Cost = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetData(v []*DescribeOmsOpenAPIProjectStepsResponseBodyData) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetErrorDetail(v *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetMessage(v string) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetPageNumber(v int32) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetPageSize(v int32) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetRequestId(v string) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetSuccess(v bool) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBody) SetTotalCount(v int64) *DescribeOmsOpenAPIProjectStepsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeOmsOpenAPIProjectStepsResponseBodyData struct {
	// The request ID.
	EstimatedRemainingSeconds *int64 `json:"EstimatedRemainingSeconds,omitempty" xml:"EstimatedRemainingSeconds,omitempty"`
	// A system error occurred.
	ExtraInfo *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty" type:"Struct"`
	// $.parameters[3].schema.example
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// $.parameters[5].schema.description
	Interactive *bool `json:"Interactive,omitempty" xml:"Interactive,omitempty"`
	// The error details.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.
	StepDescription *string `json:"StepDescription,omitempty" xml:"StepDescription,omitempty"`
	// The error related parameters.
	StepInfo *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo `json:"StepInfo,omitempty" xml:"StepInfo,omitempty" type:"Struct"`
	// Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.
	StepName *string `json:"StepName,omitempty" xml:"StepName,omitempty"`
	// DescribeOmsOpenAPIProjectSteps
	StepOrder *int32 `json:"StepOrder,omitempty" xml:"StepOrder,omitempty"`
	// cn-hangzhou
	StepProgress *int32 `json:"StepProgress,omitempty" xml:"StepProgress,omitempty"`
	// Indicates whether the call is successful.
	StepStatus *string `json:"StepStatus,omitempty" xml:"StepStatus,omitempty"`
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetEstimatedRemainingSeconds(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.EstimatedRemainingSeconds = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetExtraInfo(v *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.ExtraInfo = v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetFinishTime(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.FinishTime = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetInteractive(v bool) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.Interactive = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetStartTime(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetStepDescription(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.StepDescription = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetStepInfo(v *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.StepInfo = v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetStepName(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.StepName = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetStepOrder(v int32) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.StepOrder = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetStepProgress(v int32) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.StepProgress = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyData) SetStepStatus(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyData {
	s.StepStatus = &v
	return s
}

type DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo struct {
	// The job ID.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// Schema migration
	ErrorDetails []*DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	// The resource deployment ID.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The error code (new).
	ErrorParam map[string]*string `json:"ErrorParam,omitempty" xml:"ErrorParam,omitempty"`
	// The additional information. The value is a JSON string.
	FailedTime *string `json:"FailedTime,omitempty" xml:"FailedTime,omitempty"`
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo) SetErrorCode(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo) SetErrorDetails(v []*DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails) *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo {
	s.ErrorDetails = v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo) SetErrorMsg(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo) SetErrorParam(v map[string]*string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo {
	s.ErrorParam = v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo) SetFailedTime(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfo {
	s.FailedTime = &v
	return s
}

type DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails struct {
	// The suggestions (old).
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Contact the administrator.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// A sub-status that indicates whether the checker has completed full verification.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The amount of data migrated.
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails) SetCode(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails) SetLevel(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails) SetMessage(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails) SetProposal(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.Proposal = &v
	return s
}

type DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo struct {
	// The total count, which takes effect in a pagination query.
	Capacity *int64 `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	// The operation that you want to perform. Set the value to **DescribeOmsOpenAPIProjectSteps**.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The error code, such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.
	ConnectorFullProgressOverview *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview `json:"ConnectorFullProgressOverview,omitempty" xml:"ConnectorFullProgressOverview,omitempty" type:"Struct"`
	// The page size, which takes effect in a pagination query.
	DeployId *string `json:"DeployId,omitempty" xml:"DeployId,omitempty"`
	// The error description (old).
	DstIops *int64 `json:"DstIops,omitempty" xml:"DstIops,omitempty"`
	// The estimated amount of data to migrate.
	DstRps *int64 `json:"DstRps,omitempty" xml:"DstRps,omitempty"`
	// The step progress.
	DstRpsRef *int64 `json:"DstRpsRef,omitempty" xml:"DstRpsRef,omitempty"`
	// The read requests per second (RPS) of the source data source.
	DstRt *int64 `json:"DstRt,omitempty" xml:"DstRt,omitempty"`
	// A system error occurred.
	DstRtRef *int64 `json:"DstRtRef,omitempty" xml:"DstRtRef,omitempty"`
	// The full synchronization progress.
	Gmt *int64 `json:"Gmt,omitempty" xml:"Gmt,omitempty"`
	// The read/write throughput of the destination data source, in bytes per second.
	Inconsistencies *int64 `json:"Inconsistencies,omitempty" xml:"Inconsistencies,omitempty"`
	// The read throughput of the source data source, in bytes per second.
	IncrTimestampCheckpoint *int64 `json:"IncrTimestampCheckpoint,omitempty" xml:"IncrTimestampCheckpoint,omitempty"`
	// The error code (old).
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The error related parameters.
	ProcessedRecords *int64 `json:"ProcessedRecords,omitempty" xml:"ProcessedRecords,omitempty"`
	// The time spent in processing the request, in seconds.
	Skipped *bool `json:"Skipped,omitempty" xml:"Skipped,omitempty"`
	// finishedCount / estimatedTotalCount
	SrcIops *int64 `json:"SrcIops,omitempty" xml:"SrcIops,omitempty"`
	// The end time, in the format of "2020-05-22T17:04:18".
	SrcIopsRef *int64 `json:"SrcIopsRef,omitempty" xml:"SrcIopsRef,omitempty"`
	// The error level. Valid values: CRITICAL, ERROR, and WARN.
	SrcRps *int64 `json:"SrcRps,omitempty" xml:"SrcRps,omitempty"`
	// The checkpoint. The value is a unix timestamp in seconds.
	SrcRpsRef *int64 `json:"SrcRpsRef,omitempty" xml:"SrcRpsRef,omitempty"`
	// The error code.
	SrcRt *int64 `json:"SrcRt,omitempty" xml:"SrcRt,omitempty"`
	// The checkpoint collection time. The value is a unix timestamp in seconds.
	SrcRtRef *int64 `json:"SrcRtRef,omitempty" xml:"SrcRtRef,omitempty"`
	// The read/write RPS of the destination data source.
	Validated *bool `json:"Validated,omitempty" xml:"Validated,omitempty"`
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetCapacity(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.Capacity = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetCheckpoint(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.Checkpoint = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetConnectorFullProgressOverview(v *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.ConnectorFullProgressOverview = v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetDeployId(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.DeployId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetDstIops(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.DstIops = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetDstRps(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.DstRps = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetDstRpsRef(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.DstRpsRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetDstRt(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.DstRt = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetDstRtRef(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.DstRtRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetGmt(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.Gmt = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetInconsistencies(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.Inconsistencies = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetIncrTimestampCheckpoint(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.IncrTimestampCheckpoint = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetJobId(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.JobId = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetProcessedRecords(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.ProcessedRecords = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetSkipped(v bool) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.Skipped = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetSrcIops(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.SrcIops = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetSrcIopsRef(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.SrcIopsRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetSrcRps(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.SrcRps = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetSrcRpsRef(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.SrcRpsRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetSrcRt(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.SrcRt = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetSrcRtRef(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.SrcRtRef = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo) SetValidated(v bool) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfo {
	s.Validated = &v
	return s
}

type DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview struct {
	// A sub-status that indicates whether this step is skipped.
	EstimatedRemainingTimeOfSec *int64 `json:"EstimatedRemainingTimeOfSec,omitempty" xml:"EstimatedRemainingTimeOfSec,omitempty"`
	// The read RPS baseline of the source data source.
	EstimatedTotalCount *int64 `json:"EstimatedTotalCount,omitempty" xml:"EstimatedTotalCount,omitempty"`
	// The read/write RT per record of the destination data source, in ms.
	FinishedCount *int64 `json:"FinishedCount,omitempty" xml:"FinishedCount,omitempty"`
	// The business data returned.
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview) SetEstimatedRemainingTimeOfSec(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview {
	s.EstimatedRemainingTimeOfSec = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview) SetEstimatedTotalCount(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview {
	s.EstimatedTotalCount = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview) SetFinishedCount(v int64) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview {
	s.FinishedCount = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview) SetProgress(v int32) *DescribeOmsOpenAPIProjectStepsResponseBodyDataStepInfoConnectorFullProgressOverview {
	s.Progress = &v
	return s
}

type DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail struct {
	// The error details.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Valid values: CRITICAL, ERROR, and WARN.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// A system error occurred.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Contact the administrator.
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail) SetCode(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail) SetLevel(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail) SetMessage(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail) SetProposal(v string) *DescribeOmsOpenAPIProjectStepsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type DescribeOmsOpenAPIProjectStepsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOmsOpenAPIProjectStepsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOmsOpenAPIProjectStepsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOmsOpenAPIProjectStepsResponse) GoString() string {
	return s.String()
}

func (s *DescribeOmsOpenAPIProjectStepsResponse) SetHeaders(v map[string]*string) *DescribeOmsOpenAPIProjectStepsResponse {
	s.Headers = v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponse) SetStatusCode(v int32) *DescribeOmsOpenAPIProjectStepsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOmsOpenAPIProjectStepsResponse) SetBody(v *DescribeOmsOpenAPIProjectStepsResponseBody) *DescribeOmsOpenAPIProjectStepsResponse {
	s.Body = v
	return s
}

type DescribeOutlineBindingRequest struct {
	// The name of the database.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// - When the value is set to True, the throttling information in the database is queried based on the SQL ID.
	// - When the value is set to False, the bound index or execution plan in the database is queried based on the SQL ID.
	IsConcurrentLimit *bool `json:"IsConcurrentLimit,omitempty" xml:"IsConcurrentLimit,omitempty"`
	// SQLID.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The name of the tenant.
	// It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_). It cannot be set to SYS.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeOutlineBindingRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOutlineBindingRequest) GoString() string {
	return s.String()
}

func (s *DescribeOutlineBindingRequest) SetDatabaseName(v string) *DescribeOutlineBindingRequest {
	s.DatabaseName = &v
	return s
}

func (s *DescribeOutlineBindingRequest) SetInstanceId(v string) *DescribeOutlineBindingRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeOutlineBindingRequest) SetIsConcurrentLimit(v bool) *DescribeOutlineBindingRequest {
	s.IsConcurrentLimit = &v
	return s
}

func (s *DescribeOutlineBindingRequest) SetSQLId(v string) *DescribeOutlineBindingRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeOutlineBindingRequest) SetTableName(v string) *DescribeOutlineBindingRequest {
	s.TableName = &v
	return s
}

func (s *DescribeOutlineBindingRequest) SetTenantId(v string) *DescribeOutlineBindingRequest {
	s.TenantId = &v
	return s
}

type DescribeOutlineBindingResponseBody struct {
	// The binding information.
	OutlineBinding *DescribeOutlineBindingResponseBodyOutlineBinding `json:"OutlineBinding,omitempty" xml:"OutlineBinding,omitempty" type:"Struct"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeOutlineBindingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOutlineBindingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOutlineBindingResponseBody) SetOutlineBinding(v *DescribeOutlineBindingResponseBodyOutlineBinding) *DescribeOutlineBindingResponseBody {
	s.OutlineBinding = v
	return s
}

func (s *DescribeOutlineBindingResponseBody) SetRequestId(v string) *DescribeOutlineBindingResponseBody {
	s.RequestId = &v
	return s
}

type DescribeOutlineBindingResponseBodyOutlineBinding struct {
	// The bound index.
	BindIndex *string `json:"BindIndex,omitempty" xml:"BindIndex,omitempty"`
	// The bound plan.
	BindPlan *string `json:"BindPlan,omitempty" xml:"BindPlan,omitempty"`
	// The maximum number of concurrent tasks.
	MaxConcurrent *int32 `json:"MaxConcurrent,omitempty" xml:"MaxConcurrent,omitempty"`
	// OutlineID.
	OutlineId *int64 `json:"OutlineId,omitempty" xml:"OutlineId,omitempty"`
	// 表名称
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DescribeOutlineBindingResponseBodyOutlineBinding) String() string {
	return tea.Prettify(s)
}

func (s DescribeOutlineBindingResponseBodyOutlineBinding) GoString() string {
	return s.String()
}

func (s *DescribeOutlineBindingResponseBodyOutlineBinding) SetBindIndex(v string) *DescribeOutlineBindingResponseBodyOutlineBinding {
	s.BindIndex = &v
	return s
}

func (s *DescribeOutlineBindingResponseBodyOutlineBinding) SetBindPlan(v string) *DescribeOutlineBindingResponseBodyOutlineBinding {
	s.BindPlan = &v
	return s
}

func (s *DescribeOutlineBindingResponseBodyOutlineBinding) SetMaxConcurrent(v int32) *DescribeOutlineBindingResponseBodyOutlineBinding {
	s.MaxConcurrent = &v
	return s
}

func (s *DescribeOutlineBindingResponseBodyOutlineBinding) SetOutlineId(v int64) *DescribeOutlineBindingResponseBodyOutlineBinding {
	s.OutlineId = &v
	return s
}

func (s *DescribeOutlineBindingResponseBodyOutlineBinding) SetTableName(v string) *DescribeOutlineBindingResponseBodyOutlineBinding {
	s.TableName = &v
	return s
}

type DescribeOutlineBindingResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOutlineBindingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOutlineBindingResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOutlineBindingResponse) GoString() string {
	return s.String()
}

func (s *DescribeOutlineBindingResponse) SetHeaders(v map[string]*string) *DescribeOutlineBindingResponse {
	s.Headers = v
	return s
}

func (s *DescribeOutlineBindingResponse) SetStatusCode(v int32) *DescribeOutlineBindingResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOutlineBindingResponse) SetBody(v *DescribeOutlineBindingResponseBody) *DescribeOutlineBindingResponse {
	s.Body = v
	return s
}

type DescribeParametersRequest struct {
	// It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.
	Dimension *string `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// Alibaba Cloud CLI
	DimensionValue *string `json:"DimensionValue,omitempty" xml:"DimensionValue,omitempty"`
	// 498529
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersRequest) GoString() string {
	return s.String()
}

func (s *DescribeParametersRequest) SetDimension(v string) *DescribeParametersRequest {
	s.Dimension = &v
	return s
}

func (s *DescribeParametersRequest) SetDimensionValue(v string) *DescribeParametersRequest {
	s.DimensionValue = &v
	return s
}

func (s *DescribeParametersRequest) SetInstanceId(v string) *DescribeParametersRequest {
	s.InstanceId = &v
	return s
}

type DescribeParametersResponseBody struct {
	// Indicates whether a restart is required for changes to the parameter to take effect. Valid values:
	// - true: A restart is required.
	// - false: A restart is not required.
	Parameters []*DescribeParametersResponseBodyParameters `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Repeated"`
	// The return result of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBody) SetParameters(v []*DescribeParametersResponseBodyParameters) *DescribeParametersResponseBody {
	s.Parameters = v
	return s
}

func (s *DescribeParametersResponseBody) SetRequestId(v string) *DescribeParametersResponseBody {
	s.RequestId = &v
	return s
}

type DescribeParametersResponseBodyParameters struct {
	// DescribeParameters
	AcceptableValue []*string `json:"AcceptableValue,omitempty" xml:"AcceptableValue,omitempty" type:"Repeated"`
	// The ID of the OceanBase cluster.
	CurrentValue *string `json:"CurrentValue,omitempty" xml:"CurrentValue,omitempty"`
	// ```
	// http(s)://[Endpoint]/?Action=DescribeParameters
	// &InstanceId=ob317v4uif****
	// &Dimension=TENANT
	// &DimensionValue=ob2mr3oae0****
	// &Common request parameters
	// ```
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The request ID.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The name of the parameter.
	NeedReboot *bool `json:"NeedReboot,omitempty" xml:"NeedReboot,omitempty"`
	// 参数是否只读
	Readonly *bool `json:"Readonly,omitempty" xml:"Readonly,omitempty"`
	// {
	//     "RequestId": "EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C",
	//     "Parameters": [
	//         {
	//             "Description": "The maximum delay allowed in weak-consistency reads.",
	//             "ValueType": "CAPACITY",
	//             "CurrentValue": "600",
	//             "NeedReboot": false,
	//             "Name": "connect_timeout",
	//             "DefaultValue": "600s",
	//             "RejectedValue": [
	//                 "1s"
	//             ],
	//             "AcceptableValue": [
	//                 "1s"
	//             ]
	//         }
	//     ]
	// }
	RejectedValue []*string `json:"RejectedValue,omitempty" xml:"RejectedValue,omitempty" type:"Repeated"`
	Unit          *string   `json:"Unit,omitempty" xml:"Unit,omitempty"`
	// The invalid value range of the parameter.
	// It is an array with two string elements, which represents a range. The first element represents the minimum value and the second element represents the maximum value.
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
}

func (s DescribeParametersResponseBodyParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseBodyParameters) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBodyParameters) SetAcceptableValue(v []*string) *DescribeParametersResponseBodyParameters {
	s.AcceptableValue = v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetCurrentValue(v string) *DescribeParametersResponseBodyParameters {
	s.CurrentValue = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetDefaultValue(v string) *DescribeParametersResponseBodyParameters {
	s.DefaultValue = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetDescription(v string) *DescribeParametersResponseBodyParameters {
	s.Description = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetName(v string) *DescribeParametersResponseBodyParameters {
	s.Name = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetNeedReboot(v bool) *DescribeParametersResponseBodyParameters {
	s.NeedReboot = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetReadonly(v bool) *DescribeParametersResponseBodyParameters {
	s.Readonly = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetRejectedValue(v []*string) *DescribeParametersResponseBodyParameters {
	s.RejectedValue = v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetUnit(v string) *DescribeParametersResponseBodyParameters {
	s.Unit = &v
	return s
}

func (s *DescribeParametersResponseBodyParameters) SetValueType(v string) *DescribeParametersResponseBodyParameters {
	s.ValueType = &v
	return s
}

type DescribeParametersResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponse) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponse) SetHeaders(v map[string]*string) *DescribeParametersResponse {
	s.Headers = v
	return s
}

func (s *DescribeParametersResponse) SetStatusCode(v int32) *DescribeParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeParametersResponse) SetBody(v *DescribeParametersResponseBody) *DescribeParametersResponse {
	s.Body = v
	return s
}

type DescribeParametersHistoryRequest struct {
	// The type of the parameter.
	// Valid values: CLUSTER and TENANT.
	Dimension *string `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The resource ID of the parameter type.
	// You can leave this parameter unspecified when you call this operation to query the modification history of cluster parameters. In the case of tenant parameters, pass the tenant ID.
	DimensionValue *string `json:"DimensionValue,omitempty" xml:"DimensionValue,omitempty"`
	// The end time for the query of parameter modification history.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return.
	// - Start value: 1
	// - Default value: 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of rows to return on each page.
	// - Maximum value: 100
	// - Default value: 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The start time of the time range for querying the parameter modification history.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeParametersHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeParametersHistoryRequest) SetDimension(v string) *DescribeParametersHistoryRequest {
	s.Dimension = &v
	return s
}

func (s *DescribeParametersHistoryRequest) SetDimensionValue(v string) *DescribeParametersHistoryRequest {
	s.DimensionValue = &v
	return s
}

func (s *DescribeParametersHistoryRequest) SetEndTime(v string) *DescribeParametersHistoryRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeParametersHistoryRequest) SetInstanceId(v string) *DescribeParametersHistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeParametersHistoryRequest) SetPageNumber(v int32) *DescribeParametersHistoryRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeParametersHistoryRequest) SetPageSize(v int32) *DescribeParametersHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeParametersHistoryRequest) SetStartTime(v string) *DescribeParametersHistoryRequest {
	s.StartTime = &v
	return s
}

type DescribeParametersHistoryResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of parameter modification records.
	Respond []*DescribeParametersHistoryResponseBodyRespond `json:"Respond,omitempty" xml:"Respond,omitempty" type:"Repeated"`
}

func (s DescribeParametersHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParametersHistoryResponseBody) SetRequestId(v string) *DescribeParametersHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParametersHistoryResponseBody) SetRespond(v []*DescribeParametersHistoryResponseBodyRespond) *DescribeParametersHistoryResponseBody {
	s.Respond = v
	return s
}

type DescribeParametersHistoryResponseBodyRespond struct {
	// The number of returned entries on each page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The parameter modification history.
	Parameters []*DescribeParametersHistoryResponseBodyRespondParameters `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Repeated"`
	// The number of parameter modification records.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeParametersHistoryResponseBodyRespond) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersHistoryResponseBodyRespond) GoString() string {
	return s.String()
}

func (s *DescribeParametersHistoryResponseBodyRespond) SetPageNumber(v int32) *DescribeParametersHistoryResponseBodyRespond {
	s.PageNumber = &v
	return s
}

func (s *DescribeParametersHistoryResponseBodyRespond) SetParameters(v []*DescribeParametersHistoryResponseBodyRespondParameters) *DescribeParametersHistoryResponseBodyRespond {
	s.Parameters = v
	return s
}

func (s *DescribeParametersHistoryResponseBodyRespond) SetTotalCount(v int32) *DescribeParametersHistoryResponseBodyRespond {
	s.TotalCount = &v
	return s
}

type DescribeParametersHistoryResponseBodyRespondParameters struct {
	// The time when the parameter modification was initiated.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The resource ID of the parameter type.
	// - When you called this operation to query the modification history of cluster parameters, the value is DEFAULT_DIMENSION_VALUE.
	// - When you called this operation to query the modification history of tenant parameters, the value is the tenant ID.
	DimensionValue *string `json:"DimensionValue,omitempty" xml:"DimensionValue,omitempty"`
	// The name of the parameter.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the parameter after the modification.
	NewValue *string `json:"NewValue,omitempty" xml:"NewValue,omitempty"`
	// The parameter value before modification.
	OldValue *string `json:"OldValue,omitempty" xml:"OldValue,omitempty"`
	// The modification status. Valid values:
	// - APPLIED: The modification was successful.
	// - SCHEDULING: The modification was to be made.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the parameter modification took effect.
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeParametersHistoryResponseBodyRespondParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersHistoryResponseBodyRespondParameters) GoString() string {
	return s.String()
}

func (s *DescribeParametersHistoryResponseBodyRespondParameters) SetCreateTime(v string) *DescribeParametersHistoryResponseBodyRespondParameters {
	s.CreateTime = &v
	return s
}

func (s *DescribeParametersHistoryResponseBodyRespondParameters) SetDimensionValue(v string) *DescribeParametersHistoryResponseBodyRespondParameters {
	s.DimensionValue = &v
	return s
}

func (s *DescribeParametersHistoryResponseBodyRespondParameters) SetName(v string) *DescribeParametersHistoryResponseBodyRespondParameters {
	s.Name = &v
	return s
}

func (s *DescribeParametersHistoryResponseBodyRespondParameters) SetNewValue(v string) *DescribeParametersHistoryResponseBodyRespondParameters {
	s.NewValue = &v
	return s
}

func (s *DescribeParametersHistoryResponseBodyRespondParameters) SetOldValue(v string) *DescribeParametersHistoryResponseBodyRespondParameters {
	s.OldValue = &v
	return s
}

func (s *DescribeParametersHistoryResponseBodyRespondParameters) SetStatus(v string) *DescribeParametersHistoryResponseBodyRespondParameters {
	s.Status = &v
	return s
}

func (s *DescribeParametersHistoryResponseBodyRespondParameters) SetUpdateTime(v string) *DescribeParametersHistoryResponseBodyRespondParameters {
	s.UpdateTime = &v
	return s
}

type DescribeParametersHistoryResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeParametersHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeParametersHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeParametersHistoryResponse) SetHeaders(v map[string]*string) *DescribeParametersHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeParametersHistoryResponse) SetStatusCode(v int32) *DescribeParametersHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeParametersHistoryResponse) SetBody(v *DescribeParametersHistoryResponseBody) *DescribeParametersHistoryResponse {
	s.Body = v
	return s
}

type DescribeProjectRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectRequest) GoString() string {
	return s.String()
}

func (s *DescribeProjectRequest) SetId(v string) *DescribeProjectRequest {
	s.Id = &v
	return s
}

type DescribeProjectResponseBody struct {
	Advice      *string                                 `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                 `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *DescribeProjectResponseBodyData        `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorDetail *DescribeProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBody) SetAdvice(v string) *DescribeProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *DescribeProjectResponseBody) SetCode(v string) *DescribeProjectResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProjectResponseBody) SetCost(v string) *DescribeProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *DescribeProjectResponseBody) SetData(v *DescribeProjectResponseBodyData) *DescribeProjectResponseBody {
	s.Data = v
	return s
}

func (s *DescribeProjectResponseBody) SetErrorDetail(v *DescribeProjectResponseBodyErrorDetail) *DescribeProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DescribeProjectResponseBody) SetMessage(v string) *DescribeProjectResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProjectResponseBody) SetPageNumber(v int32) *DescribeProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeProjectResponseBody) SetPageSize(v int32) *DescribeProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeProjectResponseBody) SetRequestId(v string) *DescribeProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProjectResponseBody) SetSuccess(v bool) *DescribeProjectResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeProjectResponseBody) SetTotalCount(v int64) *DescribeProjectResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeProjectResponseBodyData struct {
	AlarmStats                *DescribeProjectResponseBodyDataAlarmStats           `json:"AlarmStats,omitempty" xml:"AlarmStats,omitempty" type:"Struct"`
	CommonTransferConfig      *DescribeProjectResponseBodyDataCommonTransferConfig `json:"CommonTransferConfig,omitempty" xml:"CommonTransferConfig,omitempty" type:"Struct"`
	DestConnId                *string                                              `json:"DestConnId,omitempty" xml:"DestConnId,omitempty"`
	EnableFullTransfer        *bool                                                `json:"EnableFullTransfer,omitempty" xml:"EnableFullTransfer,omitempty"`
	EnableFullVerify          *bool                                                `json:"EnableFullVerify,omitempty" xml:"EnableFullVerify,omitempty"`
	EnableIncrTransfer        *bool                                                `json:"EnableIncrTransfer,omitempty" xml:"EnableIncrTransfer,omitempty"`
	EnableIncrVerify          *bool                                                `json:"EnableIncrVerify,omitempty" xml:"EnableIncrVerify,omitempty"`
	EnableReverseIncrTransfer *bool                                                `json:"EnableReverseIncrTransfer,omitempty" xml:"EnableReverseIncrTransfer,omitempty"`
	EnableStructTransfer      *bool                                                `json:"EnableStructTransfer,omitempty" xml:"EnableStructTransfer,omitempty"`
	ExtraInfo                 *DescribeProjectResponseBodyDataExtraInfo            `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty" type:"Struct"`
	FullTransferConfig        *DescribeProjectResponseBodyDataFullTransferConfig   `json:"FullTransferConfig,omitempty" xml:"FullTransferConfig,omitempty" type:"Struct"`
	GmtCreate                 *string                                              `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtFinish                 *string                                              `json:"GmtFinish,omitempty" xml:"GmtFinish,omitempty"`
	GmtModified               *string                                              `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtStart                  *string                                              `json:"GmtStart,omitempty" xml:"GmtStart,omitempty"`
	Id                        *string                                              `json:"Id,omitempty" xml:"Id,omitempty"`
	Importance                *string                                              `json:"Importance,omitempty" xml:"Importance,omitempty"`
	IncrTransferConfig        *DescribeProjectResponseBodyDataIncrTransferConfig   `json:"IncrTransferConfig,omitempty" xml:"IncrTransferConfig,omitempty" type:"Struct"`
	IsMerging                 *bool                                                `json:"IsMerging,omitempty" xml:"IsMerging,omitempty"`
	IsModifying               *bool                                                `json:"IsModifying,omitempty" xml:"IsModifying,omitempty"`
	IsSubProject              *bool                                                `json:"IsSubProject,omitempty" xml:"IsSubProject,omitempty"`
	Labels                    []*DescribeProjectResponseBodyDataLabels             `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	Name                      *string                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	Owner                     *string                                              `json:"Owner,omitempty" xml:"Owner,omitempty"`
	SinkConnectInfo           *DescribeProjectResponseBodyDataSinkConnectInfo      `json:"SinkConnectInfo,omitempty" xml:"SinkConnectInfo,omitempty" type:"Struct"`
	SinkEndpointType          *string                                              `json:"SinkEndpointType,omitempty" xml:"SinkEndpointType,omitempty"`
	SourceConnectInfo         *DescribeProjectResponseBodyDataSourceConnectInfo    `json:"SourceConnectInfo,omitempty" xml:"SourceConnectInfo,omitempty" type:"Struct"`
	SourceEndpointType        *string                                              `json:"SourceEndpointType,omitempty" xml:"SourceEndpointType,omitempty"`
	Status                    *string                                              `json:"Status,omitempty" xml:"Status,omitempty"`
	Steps                     []*DescribeProjectResponseBodyDataSteps              `json:"Steps,omitempty" xml:"Steps,omitempty" type:"Repeated"`
	StructTransferConfig      *DescribeProjectResponseBodyDataStructTransferConfig `json:"StructTransferConfig,omitempty" xml:"StructTransferConfig,omitempty" type:"Struct"`
	TransferMapping           *DescribeProjectResponseBodyDataTransferMapping      `json:"TransferMapping,omitempty" xml:"TransferMapping,omitempty" type:"Struct"`
	Type                      *string                                              `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkerGradeId             *string                                              `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s DescribeProjectResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyData) SetAlarmStats(v *DescribeProjectResponseBodyDataAlarmStats) *DescribeProjectResponseBodyData {
	s.AlarmStats = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetCommonTransferConfig(v *DescribeProjectResponseBodyDataCommonTransferConfig) *DescribeProjectResponseBodyData {
	s.CommonTransferConfig = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetDestConnId(v string) *DescribeProjectResponseBodyData {
	s.DestConnId = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetEnableFullTransfer(v bool) *DescribeProjectResponseBodyData {
	s.EnableFullTransfer = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetEnableFullVerify(v bool) *DescribeProjectResponseBodyData {
	s.EnableFullVerify = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetEnableIncrTransfer(v bool) *DescribeProjectResponseBodyData {
	s.EnableIncrTransfer = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetEnableIncrVerify(v bool) *DescribeProjectResponseBodyData {
	s.EnableIncrVerify = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetEnableReverseIncrTransfer(v bool) *DescribeProjectResponseBodyData {
	s.EnableReverseIncrTransfer = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetEnableStructTransfer(v bool) *DescribeProjectResponseBodyData {
	s.EnableStructTransfer = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetExtraInfo(v *DescribeProjectResponseBodyDataExtraInfo) *DescribeProjectResponseBodyData {
	s.ExtraInfo = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetFullTransferConfig(v *DescribeProjectResponseBodyDataFullTransferConfig) *DescribeProjectResponseBodyData {
	s.FullTransferConfig = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetGmtCreate(v string) *DescribeProjectResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetGmtFinish(v string) *DescribeProjectResponseBodyData {
	s.GmtFinish = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetGmtModified(v string) *DescribeProjectResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetGmtStart(v string) *DescribeProjectResponseBodyData {
	s.GmtStart = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetId(v string) *DescribeProjectResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetImportance(v string) *DescribeProjectResponseBodyData {
	s.Importance = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetIncrTransferConfig(v *DescribeProjectResponseBodyDataIncrTransferConfig) *DescribeProjectResponseBodyData {
	s.IncrTransferConfig = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetIsMerging(v bool) *DescribeProjectResponseBodyData {
	s.IsMerging = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetIsModifying(v bool) *DescribeProjectResponseBodyData {
	s.IsModifying = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetIsSubProject(v bool) *DescribeProjectResponseBodyData {
	s.IsSubProject = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetLabels(v []*DescribeProjectResponseBodyDataLabels) *DescribeProjectResponseBodyData {
	s.Labels = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetName(v string) *DescribeProjectResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetOwner(v string) *DescribeProjectResponseBodyData {
	s.Owner = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetSinkConnectInfo(v *DescribeProjectResponseBodyDataSinkConnectInfo) *DescribeProjectResponseBodyData {
	s.SinkConnectInfo = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetSinkEndpointType(v string) *DescribeProjectResponseBodyData {
	s.SinkEndpointType = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetSourceConnectInfo(v *DescribeProjectResponseBodyDataSourceConnectInfo) *DescribeProjectResponseBodyData {
	s.SourceConnectInfo = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetSourceEndpointType(v string) *DescribeProjectResponseBodyData {
	s.SourceEndpointType = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetStatus(v string) *DescribeProjectResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetSteps(v []*DescribeProjectResponseBodyDataSteps) *DescribeProjectResponseBodyData {
	s.Steps = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetStructTransferConfig(v *DescribeProjectResponseBodyDataStructTransferConfig) *DescribeProjectResponseBodyData {
	s.StructTransferConfig = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetTransferMapping(v *DescribeProjectResponseBodyDataTransferMapping) *DescribeProjectResponseBodyData {
	s.TransferMapping = v
	return s
}

func (s *DescribeProjectResponseBodyData) SetType(v string) *DescribeProjectResponseBodyData {
	s.Type = &v
	return s
}

func (s *DescribeProjectResponseBodyData) SetWorkerGradeId(v string) *DescribeProjectResponseBodyData {
	s.WorkerGradeId = &v
	return s
}

type DescribeProjectResponseBodyDataAlarmStats struct {
	AlarmContent               *string           `json:"AlarmContent,omitempty" xml:"AlarmContent,omitempty"`
	Alarming                   *bool             `json:"Alarming,omitempty" xml:"Alarming,omitempty"`
	OpenMonitor                *bool             `json:"OpenMonitor,omitempty" xml:"OpenMonitor,omitempty"`
	RecentlyTriggerCount       *int32            `json:"RecentlyTriggerCount,omitempty" xml:"RecentlyTriggerCount,omitempty"`
	RuleToRecentlyTriggerCount map[string]*int32 `json:"RuleToRecentlyTriggerCount,omitempty" xml:"RuleToRecentlyTriggerCount,omitempty"`
	Target                     *string           `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s DescribeProjectResponseBodyDataAlarmStats) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataAlarmStats) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataAlarmStats) SetAlarmContent(v string) *DescribeProjectResponseBodyDataAlarmStats {
	s.AlarmContent = &v
	return s
}

func (s *DescribeProjectResponseBodyDataAlarmStats) SetAlarming(v bool) *DescribeProjectResponseBodyDataAlarmStats {
	s.Alarming = &v
	return s
}

func (s *DescribeProjectResponseBodyDataAlarmStats) SetOpenMonitor(v bool) *DescribeProjectResponseBodyDataAlarmStats {
	s.OpenMonitor = &v
	return s
}

func (s *DescribeProjectResponseBodyDataAlarmStats) SetRecentlyTriggerCount(v int32) *DescribeProjectResponseBodyDataAlarmStats {
	s.RecentlyTriggerCount = &v
	return s
}

func (s *DescribeProjectResponseBodyDataAlarmStats) SetRuleToRecentlyTriggerCount(v map[string]*int32) *DescribeProjectResponseBodyDataAlarmStats {
	s.RuleToRecentlyTriggerCount = v
	return s
}

func (s *DescribeProjectResponseBodyDataAlarmStats) SetTarget(v string) *DescribeProjectResponseBodyDataAlarmStats {
	s.Target = &v
	return s
}

type DescribeProjectResponseBodyDataCommonTransferConfig struct {
	ActiveActive           *bool   `json:"ActiveActive,omitempty" xml:"ActiveActive,omitempty"`
	DataWorksBusinessName  *string `json:"DataWorksBusinessName,omitempty" xml:"DataWorksBusinessName,omitempty"`
	DatahubTopicType       *string `json:"DatahubTopicType,omitempty" xml:"DatahubTopicType,omitempty"`
	MqPartition            *int32  `json:"MqPartition,omitempty" xml:"MqPartition,omitempty"`
	MqPartitionMode        *string `json:"MqPartitionMode,omitempty" xml:"MqPartitionMode,omitempty"`
	MqSerializerType       *string `json:"MqSerializerType,omitempty" xml:"MqSerializerType,omitempty"`
	RocketMqEnableMsgTrace *bool   `json:"RocketMqEnableMsgTrace,omitempty" xml:"RocketMqEnableMsgTrace,omitempty"`
	RocketMqMsgTags        *string `json:"RocketMqMsgTags,omitempty" xml:"RocketMqMsgTags,omitempty"`
	RocketMqProducerGroup  *string `json:"RocketMqProducerGroup,omitempty" xml:"RocketMqProducerGroup,omitempty"`
	RocketMqSendMsgTimeout *int64  `json:"RocketMqSendMsgTimeout,omitempty" xml:"RocketMqSendMsgTimeout,omitempty"`
	TableCategory          *string `json:"TableCategory,omitempty" xml:"TableCategory,omitempty"`
}

func (s DescribeProjectResponseBodyDataCommonTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataCommonTransferConfig) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetActiveActive(v bool) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.ActiveActive = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetDataWorksBusinessName(v string) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.DataWorksBusinessName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetDatahubTopicType(v string) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.DatahubTopicType = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetMqPartition(v int32) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.MqPartition = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetMqPartitionMode(v string) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.MqPartitionMode = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetMqSerializerType(v string) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.MqSerializerType = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetRocketMqEnableMsgTrace(v bool) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.RocketMqEnableMsgTrace = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetRocketMqMsgTags(v string) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.RocketMqMsgTags = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetRocketMqProducerGroup(v string) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.RocketMqProducerGroup = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetRocketMqSendMsgTimeout(v int64) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.RocketMqSendMsgTimeout = &v
	return s
}

func (s *DescribeProjectResponseBodyDataCommonTransferConfig) SetTableCategory(v string) *DescribeProjectResponseBodyDataCommonTransferConfig {
	s.TableCategory = &v
	return s
}

type DescribeProjectResponseBodyDataExtraInfo struct {
	AccessObSource            *bool                                    `json:"AccessObSource,omitempty" xml:"AccessObSource,omitempty"`
	IgnoreUnsupportDdl        *bool                                    `json:"IgnoreUnsupportDdl,omitempty" xml:"IgnoreUnsupportDdl,omitempty"`
	IncrSyncTimestamp         *int64                                   `json:"IncrSyncTimestamp,omitempty" xml:"IncrSyncTimestamp,omitempty"`
	LogServiceStartCheckpoint *int64                                   `json:"LogServiceStartCheckpoint,omitempty" xml:"LogServiceStartCheckpoint,omitempty"`
	MaxConnectorCount         *int32                                   `json:"MaxConnectorCount,omitempty" xml:"MaxConnectorCount,omitempty"`
	MonitoringIncr            *bool                                    `json:"MonitoringIncr,omitempty" xml:"MonitoringIncr,omitempty"`
	OverwriteConfig           *bool                                    `json:"OverwriteConfig,omitempty" xml:"OverwriteConfig,omitempty"`
	ReverseSubtopics          []*string                                `json:"ReverseSubtopics,omitempty" xml:"ReverseSubtopics,omitempty" type:"Repeated"`
	RunningProgress           *int32                                   `json:"RunningProgress,omitempty" xml:"RunningProgress,omitempty"`
	RunningStep               *string                                  `json:"RunningStep,omitempty" xml:"RunningStep,omitempty"`
	SourceStoreKeptHour       *int32                                   `json:"SourceStoreKeptHour,omitempty" xml:"SourceStoreKeptHour,omitempty"`
	StoreIncr                 *bool                                    `json:"StoreIncr,omitempty" xml:"StoreIncr,omitempty"`
	SubConds                  map[string][]*DataExtraInfoSubCondsValue `json:"SubConds,omitempty" xml:"SubConds,omitempty"`
	SubDbs                    map[string][]*DataExtraInfoSubDbsValue   `json:"SubDbs,omitempty" xml:"SubDbs,omitempty"`
	SubIds                    map[string]*string                       `json:"SubIds,omitempty" xml:"SubIds,omitempty"`
	Subtopics                 []*string                                `json:"Subtopics,omitempty" xml:"Subtopics,omitempty" type:"Repeated"`
	SyncDelay                 *int64                                   `json:"SyncDelay,omitempty" xml:"SyncDelay,omitempty"`
	SyncDelaySampleTimestamp  *int64                                   `json:"SyncDelaySampleTimestamp,omitempty" xml:"SyncDelaySampleTimestamp,omitempty"`
}

func (s DescribeProjectResponseBodyDataExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataExtraInfo) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetAccessObSource(v bool) *DescribeProjectResponseBodyDataExtraInfo {
	s.AccessObSource = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetIgnoreUnsupportDdl(v bool) *DescribeProjectResponseBodyDataExtraInfo {
	s.IgnoreUnsupportDdl = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetIncrSyncTimestamp(v int64) *DescribeProjectResponseBodyDataExtraInfo {
	s.IncrSyncTimestamp = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetLogServiceStartCheckpoint(v int64) *DescribeProjectResponseBodyDataExtraInfo {
	s.LogServiceStartCheckpoint = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetMaxConnectorCount(v int32) *DescribeProjectResponseBodyDataExtraInfo {
	s.MaxConnectorCount = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetMonitoringIncr(v bool) *DescribeProjectResponseBodyDataExtraInfo {
	s.MonitoringIncr = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetOverwriteConfig(v bool) *DescribeProjectResponseBodyDataExtraInfo {
	s.OverwriteConfig = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetReverseSubtopics(v []*string) *DescribeProjectResponseBodyDataExtraInfo {
	s.ReverseSubtopics = v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetRunningProgress(v int32) *DescribeProjectResponseBodyDataExtraInfo {
	s.RunningProgress = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetRunningStep(v string) *DescribeProjectResponseBodyDataExtraInfo {
	s.RunningStep = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetSourceStoreKeptHour(v int32) *DescribeProjectResponseBodyDataExtraInfo {
	s.SourceStoreKeptHour = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetStoreIncr(v bool) *DescribeProjectResponseBodyDataExtraInfo {
	s.StoreIncr = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetSubConds(v map[string][]*DataExtraInfoSubCondsValue) *DescribeProjectResponseBodyDataExtraInfo {
	s.SubConds = v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetSubDbs(v map[string][]*DataExtraInfoSubDbsValue) *DescribeProjectResponseBodyDataExtraInfo {
	s.SubDbs = v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetSubIds(v map[string]*string) *DescribeProjectResponseBodyDataExtraInfo {
	s.SubIds = v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetSubtopics(v []*string) *DescribeProjectResponseBodyDataExtraInfo {
	s.Subtopics = v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetSyncDelay(v int64) *DescribeProjectResponseBodyDataExtraInfo {
	s.SyncDelay = &v
	return s
}

func (s *DescribeProjectResponseBodyDataExtraInfo) SetSyncDelaySampleTimestamp(v int64) *DescribeProjectResponseBodyDataExtraInfo {
	s.SyncDelaySampleTimestamp = &v
	return s
}

type DescribeProjectResponseBodyDataFullTransferConfig struct {
	AllowDestTableNotEmpty   *bool   `json:"AllowDestTableNotEmpty,omitempty" xml:"AllowDestTableNotEmpty,omitempty"`
	FullTransferSpeedMode    *string `json:"FullTransferSpeedMode,omitempty" xml:"FullTransferSpeedMode,omitempty"`
	FullVerifySpeedMode      *string `json:"FullVerifySpeedMode,omitempty" xml:"FullVerifySpeedMode,omitempty"`
	NonePkUkTruncateDstTable *bool   `json:"NonePkUkTruncateDstTable,omitempty" xml:"NonePkUkTruncateDstTable,omitempty"`
}

func (s DescribeProjectResponseBodyDataFullTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataFullTransferConfig) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataFullTransferConfig) SetAllowDestTableNotEmpty(v bool) *DescribeProjectResponseBodyDataFullTransferConfig {
	s.AllowDestTableNotEmpty = &v
	return s
}

func (s *DescribeProjectResponseBodyDataFullTransferConfig) SetFullTransferSpeedMode(v string) *DescribeProjectResponseBodyDataFullTransferConfig {
	s.FullTransferSpeedMode = &v
	return s
}

func (s *DescribeProjectResponseBodyDataFullTransferConfig) SetFullVerifySpeedMode(v string) *DescribeProjectResponseBodyDataFullTransferConfig {
	s.FullVerifySpeedMode = &v
	return s
}

func (s *DescribeProjectResponseBodyDataFullTransferConfig) SetNonePkUkTruncateDstTable(v bool) *DescribeProjectResponseBodyDataFullTransferConfig {
	s.NonePkUkTruncateDstTable = &v
	return s
}

type DescribeProjectResponseBodyDataIncrTransferConfig struct {
	EnableIncrSyncStatistics  *bool     `json:"EnableIncrSyncStatistics,omitempty" xml:"EnableIncrSyncStatistics,omitempty"`
	EnableSequencingWithinTxn *bool     `json:"EnableSequencingWithinTxn,omitempty" xml:"EnableSequencingWithinTxn,omitempty"`
	IncrSyncConcurrency       *int32    `json:"IncrSyncConcurrency,omitempty" xml:"IncrSyncConcurrency,omitempty"`
	RecordTypeWhiteList       []*string `json:"RecordTypeWhiteList,omitempty" xml:"RecordTypeWhiteList,omitempty" type:"Repeated"`
	StartTimestamp            *int64    `json:"StartTimestamp,omitempty" xml:"StartTimestamp,omitempty"`
	StoreLogKeptHour          *int32    `json:"StoreLogKeptHour,omitempty" xml:"StoreLogKeptHour,omitempty"`
}

func (s DescribeProjectResponseBodyDataIncrTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataIncrTransferConfig) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataIncrTransferConfig) SetEnableIncrSyncStatistics(v bool) *DescribeProjectResponseBodyDataIncrTransferConfig {
	s.EnableIncrSyncStatistics = &v
	return s
}

func (s *DescribeProjectResponseBodyDataIncrTransferConfig) SetEnableSequencingWithinTxn(v bool) *DescribeProjectResponseBodyDataIncrTransferConfig {
	s.EnableSequencingWithinTxn = &v
	return s
}

func (s *DescribeProjectResponseBodyDataIncrTransferConfig) SetIncrSyncConcurrency(v int32) *DescribeProjectResponseBodyDataIncrTransferConfig {
	s.IncrSyncConcurrency = &v
	return s
}

func (s *DescribeProjectResponseBodyDataIncrTransferConfig) SetRecordTypeWhiteList(v []*string) *DescribeProjectResponseBodyDataIncrTransferConfig {
	s.RecordTypeWhiteList = v
	return s
}

func (s *DescribeProjectResponseBodyDataIncrTransferConfig) SetStartTimestamp(v int64) *DescribeProjectResponseBodyDataIncrTransferConfig {
	s.StartTimestamp = &v
	return s
}

func (s *DescribeProjectResponseBodyDataIncrTransferConfig) SetStoreLogKeptHour(v int32) *DescribeProjectResponseBodyDataIncrTransferConfig {
	s.StoreLogKeptHour = &v
	return s
}

type DescribeProjectResponseBodyDataLabels struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeProjectResponseBodyDataLabels) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataLabels) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataLabels) SetId(v string) *DescribeProjectResponseBodyDataLabels {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataLabels) SetName(v string) *DescribeProjectResponseBodyDataLabels {
	s.Name = &v
	return s
}

type DescribeProjectResponseBodyDataSinkConnectInfo struct {
	Charset             *string     `json:"Charset,omitempty" xml:"Charset,omitempty"`
	ConnExtraAttributes interface{} `json:"ConnExtraAttributes,omitempty" xml:"ConnExtraAttributes,omitempty"`
	ConnectionInfo      *string     `json:"ConnectionInfo,omitempty" xml:"ConnectionInfo,omitempty"`
	DbEngine            *string     `json:"DbEngine,omitempty" xml:"DbEngine,omitempty"`
	EndpointId          *string     `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	EndpointName        *string     `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	EndpointSide        *string     `json:"EndpointSide,omitempty" xml:"EndpointSide,omitempty"`
	Host                *string     `json:"Host,omitempty" xml:"Host,omitempty"`
	Id                  *string     `json:"Id,omitempty" xml:"Id,omitempty"`
	NlsLengthSemantics  *string     `json:"NlsLengthSemantics,omitempty" xml:"NlsLengthSemantics,omitempty"`
	OcpName             *string     `json:"OcpName,omitempty" xml:"OcpName,omitempty"`
	OperatingSystem     *string     `json:"OperatingSystem,omitempty" xml:"OperatingSystem,omitempty"`
	// Owner。
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	Region        *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceOwner *string `json:"ResourceOwner,omitempty" xml:"ResourceOwner,omitempty"`
	Timezone      *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	Username      *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeProjectResponseBodyDataSinkConnectInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataSinkConnectInfo) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetCharset(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.Charset = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetConnExtraAttributes(v interface{}) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.ConnExtraAttributes = v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetConnectionInfo(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.ConnectionInfo = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetDbEngine(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.DbEngine = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetEndpointId(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.EndpointId = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetEndpointName(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.EndpointName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetEndpointSide(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.EndpointSide = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetHost(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.Host = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetId(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetNlsLengthSemantics(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.NlsLengthSemantics = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetOcpName(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.OcpName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetOperatingSystem(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.OperatingSystem = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetOwner(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.Owner = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetPort(v int32) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.Port = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetRegion(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.Region = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetResourceOwner(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.ResourceOwner = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetTimezone(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.Timezone = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetUsername(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.Username = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSinkConnectInfo) SetVersion(v string) *DescribeProjectResponseBodyDataSinkConnectInfo {
	s.Version = &v
	return s
}

type DescribeProjectResponseBodyDataSourceConnectInfo struct {
	Charset             *string     `json:"Charset,omitempty" xml:"Charset,omitempty"`
	ConnExtraAttributes interface{} `json:"ConnExtraAttributes,omitempty" xml:"ConnExtraAttributes,omitempty"`
	ConnectionInfo      *string     `json:"ConnectionInfo,omitempty" xml:"ConnectionInfo,omitempty"`
	DbEngine            *string     `json:"DbEngine,omitempty" xml:"DbEngine,omitempty"`
	EndpointId          *string     `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	EndpointName        *string     `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	EndpointSide        *string     `json:"EndpointSide,omitempty" xml:"EndpointSide,omitempty"`
	Host                *string     `json:"Host,omitempty" xml:"Host,omitempty"`
	Id                  *string     `json:"Id,omitempty" xml:"Id,omitempty"`
	NlsLengthSemantics  *string     `json:"NlsLengthSemantics,omitempty" xml:"NlsLengthSemantics,omitempty"`
	OcpName             *string     `json:"OcpName,omitempty" xml:"OcpName,omitempty"`
	OperatingSystem     *string     `json:"OperatingSystem,omitempty" xml:"OperatingSystem,omitempty"`
	// Owner。
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	Region        *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceOwner *string `json:"ResourceOwner,omitempty" xml:"ResourceOwner,omitempty"`
	Timezone      *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	Username      *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeProjectResponseBodyDataSourceConnectInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataSourceConnectInfo) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetCharset(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.Charset = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetConnExtraAttributes(v interface{}) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.ConnExtraAttributes = v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetConnectionInfo(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.ConnectionInfo = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetDbEngine(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.DbEngine = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetEndpointId(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.EndpointId = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetEndpointName(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.EndpointName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetEndpointSide(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.EndpointSide = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetHost(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.Host = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetId(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetNlsLengthSemantics(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.NlsLengthSemantics = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetOcpName(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.OcpName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetOperatingSystem(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.OperatingSystem = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetOwner(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.Owner = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetPort(v int32) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.Port = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetRegion(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.Region = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetResourceOwner(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.ResourceOwner = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetTimezone(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.Timezone = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetUsername(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.Username = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSourceConnectInfo) SetVersion(v string) *DescribeProjectResponseBodyDataSourceConnectInfo {
	s.Version = &v
	return s
}

type DescribeProjectResponseBodyDataSteps struct {
	Description *string                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	ExtraInfo   *DescribeProjectResponseBodyDataStepsExtraInfo `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty" type:"Struct"`
	FinishTime  *string                                        `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Name        *string                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	Order       *int32                                         `json:"Order,omitempty" xml:"Order,omitempty"`
	Progress    *int32                                         `json:"Progress,omitempty" xml:"Progress,omitempty"`
	StartTime   *string                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status      *string                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	StepInfo    map[string]interface{}                         `json:"StepInfo,omitempty" xml:"StepInfo,omitempty"`
}

func (s DescribeProjectResponseBodyDataSteps) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataSteps) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataSteps) SetDescription(v string) *DescribeProjectResponseBodyDataSteps {
	s.Description = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSteps) SetExtraInfo(v *DescribeProjectResponseBodyDataStepsExtraInfo) *DescribeProjectResponseBodyDataSteps {
	s.ExtraInfo = v
	return s
}

func (s *DescribeProjectResponseBodyDataSteps) SetFinishTime(v string) *DescribeProjectResponseBodyDataSteps {
	s.FinishTime = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSteps) SetName(v string) *DescribeProjectResponseBodyDataSteps {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSteps) SetOrder(v int32) *DescribeProjectResponseBodyDataSteps {
	s.Order = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSteps) SetProgress(v int32) *DescribeProjectResponseBodyDataSteps {
	s.Progress = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSteps) SetStartTime(v string) *DescribeProjectResponseBodyDataSteps {
	s.StartTime = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSteps) SetStatus(v string) *DescribeProjectResponseBodyDataSteps {
	s.Status = &v
	return s
}

func (s *DescribeProjectResponseBodyDataSteps) SetStepInfo(v map[string]interface{}) *DescribeProjectResponseBodyDataSteps {
	s.StepInfo = v
	return s
}

type DescribeProjectResponseBodyDataStepsExtraInfo struct {
	ErrorCode    *string                                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorDetails []*DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	ErrorMsg     *string                                                      `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	ErrorParam   map[string]*string                                           `json:"ErrorParam,omitempty" xml:"ErrorParam,omitempty"`
	FailedTime   *string                                                      `json:"FailedTime,omitempty" xml:"FailedTime,omitempty"`
}

func (s DescribeProjectResponseBodyDataStepsExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataStepsExtraInfo) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfo) SetErrorCode(v string) *DescribeProjectResponseBodyDataStepsExtraInfo {
	s.ErrorCode = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfo) SetErrorDetails(v []*DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) *DescribeProjectResponseBodyDataStepsExtraInfo {
	s.ErrorDetails = v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfo) SetErrorMsg(v string) *DescribeProjectResponseBodyDataStepsExtraInfo {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfo) SetErrorParam(v map[string]*string) *DescribeProjectResponseBodyDataStepsExtraInfo {
	s.ErrorParam = v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfo) SetFailedTime(v string) *DescribeProjectResponseBodyDataStepsExtraInfo {
	s.FailedTime = &v
	return s
}

type DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails struct {
	Code         *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	// FATAL, ERROR, WARNING, CRITICAL
	Level               *string            `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string            `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string            `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string            `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string            `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string            `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string            `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}        `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetCode(v string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetExtraContext(v map[string]interface{}) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetLevel(v string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetMessage(v string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetMessageMcmsContext(v map[string]*string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetMessageMcmsKey(v string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetProposal(v string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetProposalMcmsContext(v map[string]*string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetProposalMcmsKey(v string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetReason(v string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.Reason = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetReasonMcmsContext(v map[string]*string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetReasonMcmsKey(v string) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails) SetUpstreamErrorDetail(v interface{}) *DescribeProjectResponseBodyDataStepsExtraInfoErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectResponseBodyDataStructTransferConfig struct {
	ByteCharConvertStrategy *string `json:"ByteCharConvertStrategy,omitempty" xml:"ByteCharConvertStrategy,omitempty"`
	DeferIndexCreation      *bool   `json:"DeferIndexCreation,omitempty" xml:"DeferIndexCreation,omitempty"`
}

func (s DescribeProjectResponseBodyDataStructTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataStructTransferConfig) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataStructTransferConfig) SetByteCharConvertStrategy(v string) *DescribeProjectResponseBodyDataStructTransferConfig {
	s.ByteCharConvertStrategy = &v
	return s
}

func (s *DescribeProjectResponseBodyDataStructTransferConfig) SetDeferIndexCreation(v bool) *DescribeProjectResponseBodyDataStructTransferConfig {
	s.DeferIndexCreation = &v
	return s
}

type DescribeProjectResponseBodyDataTransferMapping struct {
	Databases             []*DescribeProjectResponseBodyDataTransferMappingDatabases      `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	DatabasesBlack        []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlack `json:"DatabasesBlack,omitempty" xml:"DatabasesBlack,omitempty" type:"Repeated"`
	Mode                  *string                                                         `json:"Mode,omitempty" xml:"Mode,omitempty"`
	TableAndViewBlackList []*string                                                       `json:"TableAndViewBlackList,omitempty" xml:"TableAndViewBlackList,omitempty" type:"Repeated"`
	TableAndViewWhiteList []*string                                                       `json:"TableAndViewWhiteList,omitempty" xml:"TableAndViewWhiteList,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMapping) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMapping) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMapping) SetDatabases(v []*DescribeProjectResponseBodyDataTransferMappingDatabases) *DescribeProjectResponseBodyDataTransferMapping {
	s.Databases = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMapping) SetDatabasesBlack(v []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) *DescribeProjectResponseBodyDataTransferMapping {
	s.DatabasesBlack = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMapping) SetMode(v string) *DescribeProjectResponseBodyDataTransferMapping {
	s.Mode = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMapping) SetTableAndViewBlackList(v []*string) *DescribeProjectResponseBodyDataTransferMapping {
	s.TableAndViewBlackList = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMapping) SetTableAndViewWhiteList(v []*string) *DescribeProjectResponseBodyDataTransferMapping {
	s.TableAndViewWhiteList = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabases struct {
	Id             *string                                                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                  `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	SpecificTables []*DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables `json:"SpecificTables,omitempty" xml:"SpecificTables,omitempty" type:"Repeated"`
	SpecificViews  []*DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews  `json:"SpecificViews,omitempty" xml:"SpecificViews,omitempty" type:"Repeated"`
	Tables         []*DescribeProjectResponseBodyDataTransferMappingDatabasesTables         `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	TenantName     *string                                                                  `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	Type           *string                                                                  `json:"Type,omitempty" xml:"Type,omitempty"`
	Views          []*DescribeProjectResponseBodyDataTransferMappingDatabasesViews          `json:"Views,omitempty" xml:"Views,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabases) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabases) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabases) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabases {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabases) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabases {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabases) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabases {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabases) SetSpecificTables(v []*DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) *DescribeProjectResponseBodyDataTransferMappingDatabases {
	s.SpecificTables = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabases) SetSpecificViews(v []*DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) *DescribeProjectResponseBodyDataTransferMappingDatabases {
	s.SpecificViews = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabases) SetTables(v []*DescribeProjectResponseBodyDataTransferMappingDatabasesTables) *DescribeProjectResponseBodyDataTransferMappingDatabases {
	s.Tables = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabases) SetTenantName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabases {
	s.TenantName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabases) SetType(v string) *DescribeProjectResponseBodyDataTransferMappingDatabases {
	s.Type = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabases) SetViews(v []*DescribeProjectResponseBodyDataTransferMappingDatabasesViews) *DescribeProjectResponseBodyDataTransferMappingDatabases {
	s.Views = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables struct {
	AdbTableSchema *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                            `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                              `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                              `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                            `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                              `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) SetAdbTableSchema(v *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables {
	s.AdbTableSchema = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) SetFilterColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables {
	s.FilterColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) SetShardColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables {
	s.ShardColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables) SetWhereClause(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTables {
	s.WhereClause = &v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema) SetDistributedKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema) SetPartitionLifeCycle(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema) SetPartitionStatement(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema) SetPrimaryKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews struct {
	AdbTableSchema *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                           `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                             `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                             `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                           `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                             `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) SetAdbTableSchema(v *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews {
	s.AdbTableSchema = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) SetFilterColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews {
	s.FilterColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) SetShardColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews {
	s.ShardColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews) SetWhereClause(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViews {
	s.WhereClause = &v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema) SetDistributedKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema) SetPartitionLifeCycle(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema) SetPartitionStatement(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema) SetPrimaryKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesSpecificViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesTables struct {
	AdbTableSchema *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                    `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                      `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                    `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                      `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesTables) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTables) SetAdbTableSchema(v *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) *DescribeProjectResponseBodyDataTransferMappingDatabasesTables {
	s.AdbTableSchema = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTables) SetFilterColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTables {
	s.FilterColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTables) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTables {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTables) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTables {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTables) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTables {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTables) SetShardColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTables {
	s.ShardColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTables) SetWhereClause(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTables {
	s.WhereClause = &v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetDistributedKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetPartitionLifeCycle(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetPartitionStatement(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetPrimaryKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesViews struct {
	AdbTableSchema *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                   `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                     `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                   `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                     `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesViews) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesViews) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViews) SetAdbTableSchema(v *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema) *DescribeProjectResponseBodyDataTransferMappingDatabasesViews {
	s.AdbTableSchema = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViews) SetFilterColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViews {
	s.FilterColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViews) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViews {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViews) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViews {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViews) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViews {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViews) SetShardColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViews {
	s.ShardColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViews) SetWhereClause(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViews {
	s.WhereClause = &v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema) SetDistributedKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema) SetPartitionLifeCycle(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema) SetPartitionStatement(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema) SetPrimaryKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesBlack struct {
	Id             *string                                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                       `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	SpecificTables []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables `json:"SpecificTables,omitempty" xml:"SpecificTables,omitempty" type:"Repeated"`
	SpecificViews  []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews  `json:"SpecificViews,omitempty" xml:"SpecificViews,omitempty" type:"Repeated"`
	Tables         []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables         `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	TenantName     *string                                                                       `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	Type           *string                                                                       `json:"Type,omitempty" xml:"Type,omitempty"`
	Views          []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews          `json:"Views,omitempty" xml:"Views,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) SetSpecificTables(v []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack {
	s.SpecificTables = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) SetSpecificViews(v []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack {
	s.SpecificViews = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) SetTables(v []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack {
	s.Tables = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) SetTenantName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack {
	s.TenantName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) SetType(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack {
	s.Type = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack) SetViews(v []*DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlack {
	s.Views = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables struct {
	AdbTableSchema *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                                 `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                                   `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                                 `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                                   `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) SetAdbTableSchema(v *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables {
	s.AdbTableSchema = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) SetFilterColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables {
	s.FilterColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) SetShardColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables {
	s.ShardColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables) SetWhereClause(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTables {
	s.WhereClause = &v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) SetDistributedKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) SetPartitionLifeCycle(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) SetPartitionStatement(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema) SetPrimaryKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews struct {
	AdbTableSchema *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                                `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                                  `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                                `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                                  `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) SetAdbTableSchema(v *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews {
	s.AdbTableSchema = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) SetFilterColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews {
	s.FilterColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) SetShardColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews {
	s.ShardColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews) SetWhereClause(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViews {
	s.WhereClause = &v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) SetDistributedKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) SetPartitionLifeCycle(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) SetPartitionStatement(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema) SetPrimaryKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackSpecificViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables struct {
	AdbTableSchema *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                         `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                           `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                         `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                           `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) SetAdbTableSchema(v *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables {
	s.AdbTableSchema = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) SetFilterColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables {
	s.FilterColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) SetShardColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables {
	s.ShardColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables) SetWhereClause(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTables {
	s.WhereClause = &v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema) SetDistributedKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema) SetPartitionLifeCycle(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema) SetPartitionStatement(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema) SetPrimaryKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews struct {
	AdbTableSchema *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	FilterColumns  []*string                                                                        `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                          `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                          `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                          `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                        `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                          `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) SetAdbTableSchema(v *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews {
	s.AdbTableSchema = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) SetFilterColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews {
	s.FilterColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) SetId(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews {
	s.Id = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) SetMappedName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews {
	s.MappedName = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) SetName(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews {
	s.Name = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) SetShardColumns(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews {
	s.ShardColumns = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews) SetWhereClause(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViews {
	s.WhereClause = &v
	return s
}

type DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *string   `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema) SetDistributedKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema) SetPartitionLifeCycle(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema) SetPartitionStatement(v string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema) SetPrimaryKeys(v []*string) *DescribeProjectResponseBodyDataTransferMappingDatabasesBlackViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type DescribeProjectResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponseBodyErrorDetail) SetCode(v string) *DescribeProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *DescribeProjectResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetLevel(v string) *DescribeProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetMessage(v string) *DescribeProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *DescribeProjectResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetMessageMcmsKey(v string) *DescribeProjectResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetProposal(v string) *DescribeProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *DescribeProjectResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetProposalMcmsKey(v string) *DescribeProjectResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetReason(v string) *DescribeProjectResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *DescribeProjectResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetReasonMcmsKey(v string) *DescribeProjectResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *DescribeProjectResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectResponse) GoString() string {
	return s.String()
}

func (s *DescribeProjectResponse) SetHeaders(v map[string]*string) *DescribeProjectResponse {
	s.Headers = v
	return s
}

func (s *DescribeProjectResponse) SetStatusCode(v int32) *DescribeProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProjectResponse) SetBody(v *DescribeProjectResponseBody) *DescribeProjectResponse {
	s.Body = v
	return s
}

type DescribeProjectComponentsRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeProjectComponentsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsRequest) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsRequest) SetId(v string) *DescribeProjectComponentsRequest {
	s.Id = &v
	return s
}

type DescribeProjectComponentsResponseBody struct {
	Advice      *string                                           `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                           `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *DescribeProjectComponentsResponseBodyData        `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorDetail *DescribeProjectComponentsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeProjectComponentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBody) SetAdvice(v string) *DescribeProjectComponentsResponseBody {
	s.Advice = &v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetCode(v string) *DescribeProjectComponentsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetCost(v string) *DescribeProjectComponentsResponseBody {
	s.Cost = &v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetData(v *DescribeProjectComponentsResponseBodyData) *DescribeProjectComponentsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetErrorDetail(v *DescribeProjectComponentsResponseBodyErrorDetail) *DescribeProjectComponentsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetMessage(v string) *DescribeProjectComponentsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetPageNumber(v int32) *DescribeProjectComponentsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetPageSize(v int32) *DescribeProjectComponentsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetRequestId(v string) *DescribeProjectComponentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetSuccess(v bool) *DescribeProjectComponentsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeProjectComponentsResponseBody) SetTotalCount(v int64) *DescribeProjectComponentsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeProjectComponentsResponseBodyData struct {
	FullImportComponents      []*DescribeProjectComponentsResponseBodyDataFullImportComponents      `json:"FullImportComponents,omitempty" xml:"FullImportComponents,omitempty" type:"Repeated"`
	FullVerifyComponents      []*DescribeProjectComponentsResponseBodyDataFullVerifyComponents      `json:"FullVerifyComponents,omitempty" xml:"FullVerifyComponents,omitempty" type:"Repeated"`
	IncrSyncComponents        []*DescribeProjectComponentsResponseBodyDataIncrSyncComponents        `json:"IncrSyncComponents,omitempty" xml:"IncrSyncComponents,omitempty" type:"Repeated"`
	ReverseIncrSyncComponents []*DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents `json:"ReverseIncrSyncComponents,omitempty" xml:"ReverseIncrSyncComponents,omitempty" type:"Repeated"`
	ReverseStoreList          []*DescribeProjectComponentsResponseBodyDataReverseStoreList          `json:"ReverseStoreList,omitempty" xml:"ReverseStoreList,omitempty" type:"Repeated"`
	StoreList                 []*DescribeProjectComponentsResponseBodyDataStoreList                 `json:"StoreList,omitempty" xml:"StoreList,omitempty" type:"Repeated"`
}

func (s DescribeProjectComponentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyData) SetFullImportComponents(v []*DescribeProjectComponentsResponseBodyDataFullImportComponents) *DescribeProjectComponentsResponseBodyData {
	s.FullImportComponents = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyData) SetFullVerifyComponents(v []*DescribeProjectComponentsResponseBodyDataFullVerifyComponents) *DescribeProjectComponentsResponseBodyData {
	s.FullVerifyComponents = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyData) SetIncrSyncComponents(v []*DescribeProjectComponentsResponseBodyDataIncrSyncComponents) *DescribeProjectComponentsResponseBodyData {
	s.IncrSyncComponents = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyData) SetReverseIncrSyncComponents(v []*DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) *DescribeProjectComponentsResponseBodyData {
	s.ReverseIncrSyncComponents = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyData) SetReverseStoreList(v []*DescribeProjectComponentsResponseBodyDataReverseStoreList) *DescribeProjectComponentsResponseBodyData {
	s.ReverseStoreList = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyData) SetStoreList(v []*DescribeProjectComponentsResponseBodyDataStoreList) *DescribeProjectComponentsResponseBodyData {
	s.StoreList = v
	return s
}

type DescribeProjectComponentsResponseBodyDataFullImportComponents struct {
	ErrorDetails []*DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	GmtCreate    *string                                                                      `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModify    *string                                                                      `json:"GmtModify,omitempty" xml:"GmtModify,omitempty"`
	Identity     *string                                                                      `json:"Identity,omitempty" xml:"Identity,omitempty"`
	Ip           *string                                                                      `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name         *string                                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Progress     *int32                                                                       `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Region       *string                                                                      `json:"Region,omitempty" xml:"Region,omitempty"`
	Status       *string                                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataFullImportComponents) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataFullImportComponents) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponents) SetErrorDetails(v []*DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) *DescribeProjectComponentsResponseBodyDataFullImportComponents {
	s.ErrorDetails = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponents) SetGmtCreate(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponents {
	s.GmtCreate = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponents) SetGmtModify(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponents {
	s.GmtModify = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponents) SetIdentity(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponents {
	s.Identity = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponents) SetIp(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponents {
	s.Ip = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponents) SetName(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponents {
	s.Name = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponents) SetProgress(v int32) *DescribeProjectComponentsResponseBodyDataFullImportComponents {
	s.Progress = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponents) SetRegion(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponents {
	s.Region = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponents) SetStatus(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponents {
	s.Status = &v
	return s
}

type DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetCode(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetExtraContext(v map[string]interface{}) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetLevel(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetMessage(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetMessageMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetMessageMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetProposal(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetProposalMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetProposalMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetReason(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.Reason = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetReasonMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetReasonMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails) SetUpstreamErrorDetail(v interface{}) *DescribeProjectComponentsResponseBodyDataFullImportComponentsErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectComponentsResponseBodyDataFullVerifyComponents struct {
	ConsistentQuantity   *int64                                                                       `json:"ConsistentQuantity,omitempty" xml:"ConsistentQuantity,omitempty"`
	ErrorDetails         []*DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	InconsistentQuantity *int64                                                                       `json:"InconsistentQuantity,omitempty" xml:"InconsistentQuantity,omitempty"`
	Ip                   *string                                                                      `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name                 *string                                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Progress             *string                                                                      `json:"Progress,omitempty" xml:"Progress,omitempty"`
	RecordProgress       *int32                                                                       `json:"RecordProgress,omitempty" xml:"RecordProgress,omitempty"`
	Region               *string                                                                      `json:"Region,omitempty" xml:"Region,omitempty"`
	Status               *string                                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId               *int64                                                                       `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataFullVerifyComponents) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataFullVerifyComponents) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetConsistentQuantity(v int64) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.ConsistentQuantity = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetErrorDetails(v []*DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.ErrorDetails = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetInconsistentQuantity(v int64) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.InconsistentQuantity = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetIp(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.Ip = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetName(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.Name = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetProgress(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.Progress = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetRecordProgress(v int32) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.RecordProgress = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetRegion(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.Region = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetStatus(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.Status = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponents) SetTaskId(v int64) *DescribeProjectComponentsResponseBodyDataFullVerifyComponents {
	s.TaskId = &v
	return s
}

type DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetCode(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetExtraContext(v map[string]interface{}) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetLevel(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetMessage(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetMessageMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetMessageMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetProposal(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetProposalMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetProposalMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetReason(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.Reason = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetReasonMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetReasonMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails) SetUpstreamErrorDetail(v interface{}) *DescribeProjectComponentsResponseBodyDataFullVerifyComponentsErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectComponentsResponseBodyDataIncrSyncComponents struct {
	Checkpoint                *string                                                                    `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	CheckpointSampleTimestamp *int64                                                                     `json:"CheckpointSampleTimestamp,omitempty" xml:"CheckpointSampleTimestamp,omitempty"`
	Delay                     *int64                                                                     `json:"Delay,omitempty" xml:"Delay,omitempty"`
	ErrorDetails              []*DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	GmtCreate                 *string                                                                    `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModify                 *string                                                                    `json:"GmtModify,omitempty" xml:"GmtModify,omitempty"`
	Identity                  *string                                                                    `json:"Identity,omitempty" xml:"Identity,omitempty"`
	Ip                        *string                                                                    `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name                      *string                                                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Region                    *string                                                                    `json:"Region,omitempty" xml:"Region,omitempty"`
	Status                    *string                                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	Subtopics                 []*string                                                                  `json:"Subtopics,omitempty" xml:"Subtopics,omitempty" type:"Repeated"`
	Tps                       *int64                                                                     `json:"Tps,omitempty" xml:"Tps,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataIncrSyncComponents) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataIncrSyncComponents) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetCheckpoint(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.Checkpoint = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetCheckpointSampleTimestamp(v int64) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.CheckpointSampleTimestamp = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetDelay(v int64) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.Delay = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetErrorDetails(v []*DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.ErrorDetails = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetGmtCreate(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.GmtCreate = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetGmtModify(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.GmtModify = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetIdentity(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.Identity = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetIp(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.Ip = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetName(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.Name = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetRegion(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.Region = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetStatus(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.Status = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetSubtopics(v []*string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.Subtopics = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponents) SetTps(v int64) *DescribeProjectComponentsResponseBodyDataIncrSyncComponents {
	s.Tps = &v
	return s
}

type DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetCode(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetExtraContext(v map[string]interface{}) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetLevel(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetMessage(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetMessageMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetMessageMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetProposal(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetProposalMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetProposalMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetReason(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.Reason = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetReasonMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetReasonMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails) SetUpstreamErrorDetail(v interface{}) *DescribeProjectComponentsResponseBodyDataIncrSyncComponentsErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents struct {
	Checkpoint                *string                                                                           `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	CheckpointSampleTimestamp *int64                                                                            `json:"CheckpointSampleTimestamp,omitempty" xml:"CheckpointSampleTimestamp,omitempty"`
	Delay                     *int64                                                                            `json:"Delay,omitempty" xml:"Delay,omitempty"`
	ErrorDetails              []*DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	GmtCreate                 *string                                                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModify                 *string                                                                           `json:"GmtModify,omitempty" xml:"GmtModify,omitempty"`
	Identity                  *string                                                                           `json:"Identity,omitempty" xml:"Identity,omitempty"`
	Ip                        *string                                                                           `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name                      *string                                                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	Region                    *string                                                                           `json:"Region,omitempty" xml:"Region,omitempty"`
	Status                    *string                                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	Subtopics                 []*string                                                                         `json:"Subtopics,omitempty" xml:"Subtopics,omitempty" type:"Repeated"`
	Tps                       *int64                                                                            `json:"Tps,omitempty" xml:"Tps,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetCheckpoint(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.Checkpoint = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetCheckpointSampleTimestamp(v int64) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.CheckpointSampleTimestamp = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetDelay(v int64) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.Delay = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetErrorDetails(v []*DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.ErrorDetails = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetGmtCreate(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.GmtCreate = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetGmtModify(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.GmtModify = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetIdentity(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.Identity = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetIp(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.Ip = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetName(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.Name = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetRegion(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.Region = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetStatus(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.Status = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetSubtopics(v []*string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.Subtopics = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents) SetTps(v int64) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponents {
	s.Tps = &v
	return s
}

type DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetCode(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetExtraContext(v map[string]interface{}) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetLevel(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetMessage(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetMessageMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetMessageMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetProposal(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetProposalMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetProposalMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetReason(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.Reason = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetReasonMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetReasonMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails) SetUpstreamErrorDetail(v interface{}) *DescribeProjectComponentsResponseBodyDataReverseIncrSyncComponentsErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectComponentsResponseBodyDataReverseStoreList struct {
	BeginCheckpoint        *string                                                                  `json:"BeginCheckpoint,omitempty" xml:"BeginCheckpoint,omitempty"`
	Conn                   *int64                                                                   `json:"Conn,omitempty" xml:"Conn,omitempty"`
	Delay                  *int64                                                                   `json:"Delay,omitempty" xml:"Delay,omitempty"`
	EndCheckpoint          *string                                                                  `json:"EndCheckpoint,omitempty" xml:"EndCheckpoint,omitempty"`
	ErrMsg                 *string                                                                  `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	ErrorDetails           []*DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	Gmt                    *int64                                                                   `json:"Gmt,omitempty" xml:"Gmt,omitempty"`
	GmtCreate              *string                                                                  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified            *string                                                                  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Ip                     *string                                                                  `json:"Ip,omitempty" xml:"Ip,omitempty"`
	LatelyHeartbeatTimeSec *int64                                                                   `json:"LatelyHeartbeatTimeSec,omitempty" xml:"LatelyHeartbeatTimeSec,omitempty"`
	Name                   *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	Port                   *int32                                                                   `json:"Port,omitempty" xml:"Port,omitempty"`
	Region                 *string                                                                  `json:"Region,omitempty" xml:"Region,omitempty"`
	Status                 *string                                                                  `json:"Status,omitempty" xml:"Status,omitempty"`
	StorePort              *int32                                                                   `json:"StorePort,omitempty" xml:"StorePort,omitempty"`
	// SubTopic。
	Subtopic *string `json:"Subtopic,omitempty" xml:"Subtopic,omitempty"`
	ToSwitch *bool   `json:"ToSwitch,omitempty" xml:"ToSwitch,omitempty"`
	// Topic。
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Tps   *int64  `json:"Tps,omitempty" xml:"Tps,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataReverseStoreList) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataReverseStoreList) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetBeginCheckpoint(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.BeginCheckpoint = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetConn(v int64) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Conn = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetDelay(v int64) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Delay = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetEndCheckpoint(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.EndCheckpoint = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetErrMsg(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.ErrMsg = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetErrorDetails(v []*DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.ErrorDetails = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetGmt(v int64) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Gmt = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetGmtCreate(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetGmtModified(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.GmtModified = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetIp(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Ip = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetLatelyHeartbeatTimeSec(v int64) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.LatelyHeartbeatTimeSec = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetName(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Name = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetPort(v int32) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Port = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetRegion(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Region = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetStatus(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Status = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetStorePort(v int32) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.StorePort = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetSubtopic(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Subtopic = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetToSwitch(v bool) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.ToSwitch = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetTopic(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Topic = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreList) SetTps(v int64) *DescribeProjectComponentsResponseBodyDataReverseStoreList {
	s.Tps = &v
	return s
}

type DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetCode(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetExtraContext(v map[string]interface{}) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetLevel(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetMessage(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetMessageMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetMessageMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetProposal(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetProposalMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetProposalMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetReason(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.Reason = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetReasonMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetReasonMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails) SetUpstreamErrorDetail(v interface{}) *DescribeProjectComponentsResponseBodyDataReverseStoreListErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectComponentsResponseBodyDataStoreList struct {
	BeginCheckpoint        *string                                                           `json:"BeginCheckpoint,omitempty" xml:"BeginCheckpoint,omitempty"`
	Conn                   *int64                                                            `json:"Conn,omitempty" xml:"Conn,omitempty"`
	Delay                  *int64                                                            `json:"Delay,omitempty" xml:"Delay,omitempty"`
	EndCheckpoint          *string                                                           `json:"EndCheckpoint,omitempty" xml:"EndCheckpoint,omitempty"`
	ErrMsg                 *string                                                           `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	ErrorDetails           []*DescribeProjectComponentsResponseBodyDataStoreListErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	Gmt                    *int64                                                            `json:"Gmt,omitempty" xml:"Gmt,omitempty"`
	GmtCreate              *string                                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified            *string                                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Ip                     *string                                                           `json:"Ip,omitempty" xml:"Ip,omitempty"`
	LatelyHeartbeatTimeSec *int64                                                            `json:"LatelyHeartbeatTimeSec,omitempty" xml:"LatelyHeartbeatTimeSec,omitempty"`
	Name                   *string                                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	Port                   *int32                                                            `json:"Port,omitempty" xml:"Port,omitempty"`
	Region                 *string                                                           `json:"Region,omitempty" xml:"Region,omitempty"`
	Status                 *string                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	StorePort              *int32                                                            `json:"StorePort,omitempty" xml:"StorePort,omitempty"`
	// SubTopic。
	Subtopic *string `json:"Subtopic,omitempty" xml:"Subtopic,omitempty"`
	ToSwitch *bool   `json:"ToSwitch,omitempty" xml:"ToSwitch,omitempty"`
	// Topic。
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Tps   *int64  `json:"Tps,omitempty" xml:"Tps,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataStoreList) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataStoreList) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetBeginCheckpoint(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.BeginCheckpoint = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetConn(v int64) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Conn = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetDelay(v int64) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Delay = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetEndCheckpoint(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.EndCheckpoint = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetErrMsg(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.ErrMsg = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetErrorDetails(v []*DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.ErrorDetails = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetGmt(v int64) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Gmt = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetGmtCreate(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetGmtModified(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.GmtModified = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetIp(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Ip = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetLatelyHeartbeatTimeSec(v int64) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.LatelyHeartbeatTimeSec = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetName(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Name = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetPort(v int32) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Port = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetRegion(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Region = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetStatus(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Status = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetStorePort(v int32) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.StorePort = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetSubtopic(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Subtopic = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetToSwitch(v bool) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.ToSwitch = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetTopic(v string) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Topic = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreList) SetTps(v int64) *DescribeProjectComponentsResponseBodyDataStoreList {
	s.Tps = &v
	return s
}

type DescribeProjectComponentsResponseBodyDataStoreListErrorDetails struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetCode(v string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetExtraContext(v map[string]interface{}) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetLevel(v string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetMessage(v string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetMessageMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetMessageMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetProposal(v string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetProposalMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetProposalMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetReason(v string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.Reason = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetReasonMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetReasonMcmsKey(v string) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails) SetUpstreamErrorDetail(v interface{}) *DescribeProjectComponentsResponseBodyDataStoreListErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectComponentsResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectComponentsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetCode(v string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetLevel(v string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetMessage(v string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetMessageMcmsKey(v string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetProposal(v string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetProposalMcmsKey(v string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetReason(v string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetReasonMcmsKey(v string) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectComponentsResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *DescribeProjectComponentsResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectComponentsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProjectComponentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProjectComponentsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectComponentsResponse) GoString() string {
	return s.String()
}

func (s *DescribeProjectComponentsResponse) SetHeaders(v map[string]*string) *DescribeProjectComponentsResponse {
	s.Headers = v
	return s
}

func (s *DescribeProjectComponentsResponse) SetStatusCode(v int32) *DescribeProjectComponentsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProjectComponentsResponse) SetBody(v *DescribeProjectComponentsResponseBody) *DescribeProjectComponentsResponse {
	s.Body = v
	return s
}

type DescribeProjectProgressRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeProjectProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectProgressRequest) GoString() string {
	return s.String()
}

func (s *DescribeProjectProgressRequest) SetId(v string) *DescribeProjectProgressRequest {
	s.Id = &v
	return s
}

type DescribeProjectProgressResponseBody struct {
	Advice      *string                                         `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                         `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *DescribeProjectProgressResponseBodyData        `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorDetail *DescribeProjectProgressResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeProjectProgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectProgressResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProjectProgressResponseBody) SetAdvice(v string) *DescribeProjectProgressResponseBody {
	s.Advice = &v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetCode(v string) *DescribeProjectProgressResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetCost(v string) *DescribeProjectProgressResponseBody {
	s.Cost = &v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetData(v *DescribeProjectProgressResponseBodyData) *DescribeProjectProgressResponseBody {
	s.Data = v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetErrorDetail(v *DescribeProjectProgressResponseBodyErrorDetail) *DescribeProjectProgressResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetMessage(v string) *DescribeProjectProgressResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetPageNumber(v int32) *DescribeProjectProgressResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetPageSize(v int32) *DescribeProjectProgressResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetRequestId(v string) *DescribeProjectProgressResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetSuccess(v bool) *DescribeProjectProgressResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeProjectProgressResponseBody) SetTotalCount(v int64) *DescribeProjectProgressResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeProjectProgressResponseBodyData struct {
	AlarmLevel                    *string `json:"AlarmLevel,omitempty" xml:"AlarmLevel,omitempty"`
	CurrentStep                   *string `json:"CurrentStep,omitempty" xml:"CurrentStep,omitempty"`
	EnableFullTransfer            *bool   `json:"EnableFullTransfer,omitempty" xml:"EnableFullTransfer,omitempty"`
	EnableIncrSync                *bool   `json:"EnableIncrSync,omitempty" xml:"EnableIncrSync,omitempty"`
	EnableReverseIncrTransfer     *bool   `json:"EnableReverseIncrTransfer,omitempty" xml:"EnableReverseIncrTransfer,omitempty"`
	EnableStructTransfer          *bool   `json:"EnableStructTransfer,omitempty" xml:"EnableStructTransfer,omitempty"`
	FullTransferProgress          *int32  `json:"FullTransferProgress,omitempty" xml:"FullTransferProgress,omitempty"`
	IncrSyncCheckpoint            *int64  `json:"IncrSyncCheckpoint,omitempty" xml:"IncrSyncCheckpoint,omitempty"`
	ProjectId                     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ReverseIncrTransferCheckpoint *int64  `json:"ReverseIncrTransferCheckpoint,omitempty" xml:"ReverseIncrTransferCheckpoint,omitempty"`
	Status                        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StructTransferProgress        *int32  `json:"StructTransferProgress,omitempty" xml:"StructTransferProgress,omitempty"`
}

func (s DescribeProjectProgressResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectProgressResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeProjectProgressResponseBodyData) SetAlarmLevel(v string) *DescribeProjectProgressResponseBodyData {
	s.AlarmLevel = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetCurrentStep(v string) *DescribeProjectProgressResponseBodyData {
	s.CurrentStep = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetEnableFullTransfer(v bool) *DescribeProjectProgressResponseBodyData {
	s.EnableFullTransfer = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetEnableIncrSync(v bool) *DescribeProjectProgressResponseBodyData {
	s.EnableIncrSync = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetEnableReverseIncrTransfer(v bool) *DescribeProjectProgressResponseBodyData {
	s.EnableReverseIncrTransfer = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetEnableStructTransfer(v bool) *DescribeProjectProgressResponseBodyData {
	s.EnableStructTransfer = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetFullTransferProgress(v int32) *DescribeProjectProgressResponseBodyData {
	s.FullTransferProgress = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetIncrSyncCheckpoint(v int64) *DescribeProjectProgressResponseBodyData {
	s.IncrSyncCheckpoint = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetProjectId(v string) *DescribeProjectProgressResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetReverseIncrTransferCheckpoint(v int64) *DescribeProjectProgressResponseBodyData {
	s.ReverseIncrTransferCheckpoint = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetStatus(v string) *DescribeProjectProgressResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyData) SetStructTransferProgress(v int32) *DescribeProjectProgressResponseBodyData {
	s.StructTransferProgress = &v
	return s
}

type DescribeProjectProgressResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectProgressResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectProgressResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetCode(v string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *DescribeProjectProgressResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetLevel(v string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetMessage(v string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetMessageMcmsKey(v string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetProposal(v string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetProposalMcmsKey(v string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetReason(v string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetReasonMcmsKey(v string) *DescribeProjectProgressResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectProgressResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *DescribeProjectProgressResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectProgressResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProjectProgressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProjectProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectProgressResponse) GoString() string {
	return s.String()
}

func (s *DescribeProjectProgressResponse) SetHeaders(v map[string]*string) *DescribeProjectProgressResponse {
	s.Headers = v
	return s
}

func (s *DescribeProjectProgressResponse) SetStatusCode(v int32) *DescribeProjectProgressResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProjectProgressResponse) SetBody(v *DescribeProjectProgressResponseBody) *DescribeProjectProgressResponse {
	s.Body = v
	return s
}

type DescribeProjectStepMetricRequest struct {
	Aggregator     *string `json:"Aggregator,omitempty" xml:"Aggregator,omitempty"`
	BeginTimestamp *int64  `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	EndTimestamp   *int64  `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	MaxPointNum    *int32  `json:"MaxPointNum,omitempty" xml:"MaxPointNum,omitempty"`
	MetricType     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StepName       *string `json:"StepName,omitempty" xml:"StepName,omitempty"`
}

func (s DescribeProjectStepMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepMetricRequest) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepMetricRequest) SetAggregator(v string) *DescribeProjectStepMetricRequest {
	s.Aggregator = &v
	return s
}

func (s *DescribeProjectStepMetricRequest) SetBeginTimestamp(v int64) *DescribeProjectStepMetricRequest {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeProjectStepMetricRequest) SetEndTimestamp(v int64) *DescribeProjectStepMetricRequest {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeProjectStepMetricRequest) SetMaxPointNum(v int32) *DescribeProjectStepMetricRequest {
	s.MaxPointNum = &v
	return s
}

func (s *DescribeProjectStepMetricRequest) SetMetricType(v string) *DescribeProjectStepMetricRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeProjectStepMetricRequest) SetProjectId(v string) *DescribeProjectStepMetricRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeProjectStepMetricRequest) SetStepName(v string) *DescribeProjectStepMetricRequest {
	s.StepName = &v
	return s
}

type DescribeProjectStepMetricResponseBody struct {
	Advice      *string                                           `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                           `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *DescribeProjectStepMetricResponseBodyData        `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorDetail *DescribeProjectStepMetricResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeProjectStepMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepMetricResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepMetricResponseBody) SetAdvice(v string) *DescribeProjectStepMetricResponseBody {
	s.Advice = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetCode(v string) *DescribeProjectStepMetricResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetCost(v string) *DescribeProjectStepMetricResponseBody {
	s.Cost = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetData(v *DescribeProjectStepMetricResponseBodyData) *DescribeProjectStepMetricResponseBody {
	s.Data = v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetErrorDetail(v *DescribeProjectStepMetricResponseBodyErrorDetail) *DescribeProjectStepMetricResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetMessage(v string) *DescribeProjectStepMetricResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetPageNumber(v int32) *DescribeProjectStepMetricResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetPageSize(v int32) *DescribeProjectStepMetricResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetRequestId(v string) *DescribeProjectStepMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetSuccess(v bool) *DescribeProjectStepMetricResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBody) SetTotalCount(v int64) *DescribeProjectStepMetricResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeProjectStepMetricResponseBodyData struct {
	Aggregator     *string                                             `json:"Aggregator,omitempty" xml:"Aggregator,omitempty"`
	Metrics        []*DescribeProjectStepMetricResponseBodyDataMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	ReferenceValue *int64                                              `json:"ReferenceValue,omitempty" xml:"ReferenceValue,omitempty"`
}

func (s DescribeProjectStepMetricResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepMetricResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepMetricResponseBodyData) SetAggregator(v string) *DescribeProjectStepMetricResponseBodyData {
	s.Aggregator = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyData) SetMetrics(v []*DescribeProjectStepMetricResponseBodyDataMetrics) *DescribeProjectStepMetricResponseBodyData {
	s.Metrics = v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyData) SetReferenceValue(v int64) *DescribeProjectStepMetricResponseBodyData {
	s.ReferenceValue = &v
	return s
}

type DescribeProjectStepMetricResponseBodyDataMetrics struct {
	DataPoints []*DescribeProjectStepMetricResponseBodyDataMetricsDataPoints `json:"DataPoints,omitempty" xml:"DataPoints,omitempty" type:"Repeated"`
	Name       *string                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	Tags       map[string]*string                                            `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s DescribeProjectStepMetricResponseBodyDataMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepMetricResponseBodyDataMetrics) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepMetricResponseBodyDataMetrics) SetDataPoints(v []*DescribeProjectStepMetricResponseBodyDataMetricsDataPoints) *DescribeProjectStepMetricResponseBodyDataMetrics {
	s.DataPoints = v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyDataMetrics) SetName(v string) *DescribeProjectStepMetricResponseBodyDataMetrics {
	s.Name = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyDataMetrics) SetTags(v map[string]*string) *DescribeProjectStepMetricResponseBodyDataMetrics {
	s.Tags = v
	return s
}

type DescribeProjectStepMetricResponseBodyDataMetricsDataPoints struct {
	Timestamp *int64   `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Value     *float64 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeProjectStepMetricResponseBodyDataMetricsDataPoints) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepMetricResponseBodyDataMetricsDataPoints) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepMetricResponseBodyDataMetricsDataPoints) SetTimestamp(v int64) *DescribeProjectStepMetricResponseBodyDataMetricsDataPoints {
	s.Timestamp = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyDataMetricsDataPoints) SetValue(v float64) *DescribeProjectStepMetricResponseBodyDataMetricsDataPoints {
	s.Value = &v
	return s
}

type DescribeProjectStepMetricResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectStepMetricResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepMetricResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetCode(v string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetLevel(v string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetMessage(v string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetMessageMcmsKey(v string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetProposal(v string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetProposalMcmsKey(v string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetReason(v string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetReasonMcmsKey(v string) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectStepMetricResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *DescribeProjectStepMetricResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectStepMetricResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProjectStepMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProjectStepMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepMetricResponse) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepMetricResponse) SetHeaders(v map[string]*string) *DescribeProjectStepMetricResponse {
	s.Headers = v
	return s
}

func (s *DescribeProjectStepMetricResponse) SetStatusCode(v int32) *DescribeProjectStepMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProjectStepMetricResponse) SetBody(v *DescribeProjectStepMetricResponseBody) *DescribeProjectStepMetricResponse {
	s.Body = v
	return s
}

type DescribeProjectStepsRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeProjectStepsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepsRequest) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepsRequest) SetId(v string) *DescribeProjectStepsRequest {
	s.Id = &v
	return s
}

type DescribeProjectStepsResponseBody struct {
	Advice      *string                                      `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                      `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        []*DescribeProjectStepsResponseBodyData      `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorDetail *DescribeProjectStepsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeProjectStepsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepsResponseBody) SetAdvice(v string) *DescribeProjectStepsResponseBody {
	s.Advice = &v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetCode(v string) *DescribeProjectStepsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetCost(v string) *DescribeProjectStepsResponseBody {
	s.Cost = &v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetData(v []*DescribeProjectStepsResponseBodyData) *DescribeProjectStepsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetErrorDetail(v *DescribeProjectStepsResponseBodyErrorDetail) *DescribeProjectStepsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetMessage(v string) *DescribeProjectStepsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetPageNumber(v int32) *DescribeProjectStepsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetPageSize(v int32) *DescribeProjectStepsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetRequestId(v string) *DescribeProjectStepsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetSuccess(v bool) *DescribeProjectStepsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeProjectStepsResponseBody) SetTotalCount(v int64) *DescribeProjectStepsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeProjectStepsResponseBodyData struct {
	Description *string                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	ExtraInfo   *DescribeProjectStepsResponseBodyDataExtraInfo `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty" type:"Struct"`
	FinishTime  *string                                        `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Name        *string                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	Order       *int32                                         `json:"Order,omitempty" xml:"Order,omitempty"`
	Progress    *int32                                         `json:"Progress,omitempty" xml:"Progress,omitempty"`
	StartTime   *string                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status      *string                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	StepInfo    map[string]interface{}                         `json:"StepInfo,omitempty" xml:"StepInfo,omitempty"`
}

func (s DescribeProjectStepsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepsResponseBodyData) SetDescription(v string) *DescribeProjectStepsResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyData) SetExtraInfo(v *DescribeProjectStepsResponseBodyDataExtraInfo) *DescribeProjectStepsResponseBodyData {
	s.ExtraInfo = v
	return s
}

func (s *DescribeProjectStepsResponseBodyData) SetFinishTime(v string) *DescribeProjectStepsResponseBodyData {
	s.FinishTime = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyData) SetName(v string) *DescribeProjectStepsResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyData) SetOrder(v int32) *DescribeProjectStepsResponseBodyData {
	s.Order = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyData) SetProgress(v int32) *DescribeProjectStepsResponseBodyData {
	s.Progress = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyData) SetStartTime(v string) *DescribeProjectStepsResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyData) SetStatus(v string) *DescribeProjectStepsResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyData) SetStepInfo(v map[string]interface{}) *DescribeProjectStepsResponseBodyData {
	s.StepInfo = v
	return s
}

type DescribeProjectStepsResponseBodyDataExtraInfo struct {
	ErrorCode    *string                                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorDetails []*DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	ErrorMsg     *string                                                      `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	ErrorParam   map[string]*string                                           `json:"ErrorParam,omitempty" xml:"ErrorParam,omitempty"`
	FailedTime   *string                                                      `json:"FailedTime,omitempty" xml:"FailedTime,omitempty"`
}

func (s DescribeProjectStepsResponseBodyDataExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepsResponseBodyDataExtraInfo) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfo) SetErrorCode(v string) *DescribeProjectStepsResponseBodyDataExtraInfo {
	s.ErrorCode = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfo) SetErrorDetails(v []*DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) *DescribeProjectStepsResponseBodyDataExtraInfo {
	s.ErrorDetails = v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfo) SetErrorMsg(v string) *DescribeProjectStepsResponseBodyDataExtraInfo {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfo) SetErrorParam(v map[string]*string) *DescribeProjectStepsResponseBodyDataExtraInfo {
	s.ErrorParam = v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfo) SetFailedTime(v string) *DescribeProjectStepsResponseBodyDataExtraInfo {
	s.FailedTime = &v
	return s
}

type DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetCode(v string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.Code = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetExtraContext(v map[string]interface{}) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetLevel(v string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.Level = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetMessage(v string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.Message = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetMessageMcmsContext(v map[string]*string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetMessageMcmsKey(v string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetProposal(v string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetProposalMcmsContext(v map[string]*string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetProposalMcmsKey(v string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetReason(v string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.Reason = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetReasonMcmsContext(v map[string]*string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetReasonMcmsKey(v string) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails) SetUpstreamErrorDetail(v interface{}) *DescribeProjectStepsResponseBodyDataExtraInfoErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectStepsResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s DescribeProjectStepsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetCode(v string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *DescribeProjectStepsResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetLevel(v string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetMessage(v string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetMessageMcmsKey(v string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetProposal(v string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetProposalMcmsKey(v string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetReason(v string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetReasonMcmsKey(v string) *DescribeProjectStepsResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *DescribeProjectStepsResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *DescribeProjectStepsResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type DescribeProjectStepsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProjectStepsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProjectStepsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectStepsResponse) GoString() string {
	return s.String()
}

func (s *DescribeProjectStepsResponse) SetHeaders(v map[string]*string) *DescribeProjectStepsResponse {
	s.Headers = v
	return s
}

func (s *DescribeProjectStepsResponse) SetStatusCode(v int32) *DescribeProjectStepsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProjectStepsResponse) SetBody(v *DescribeProjectStepsResponseBody) *DescribeProjectStepsResponse {
	s.Body = v
	return s
}

type DescribeRecommendIndexRequest struct {
	// The return result of the request.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the OceanBase cluster.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The index recommended for the SQL statement after calculation by the diagnostic system.
	// - If the recommended index is the primary key, PRIMARY is returned.
	// - If an index created by the user is recommended, the index name is returned.
	// The system recommends only one index for an SQL statement. You can call the DescribeIndexes operation to view the indexes of a table.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeRecommendIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendIndexRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecommendIndexRequest) SetInstanceId(v string) *DescribeRecommendIndexRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeRecommendIndexRequest) SetSQLId(v string) *DescribeRecommendIndexRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeRecommendIndexRequest) SetTenantId(v string) *DescribeRecommendIndexRequest {
	s.TenantId = &v
	return s
}

type DescribeRecommendIndexResponseBody struct {
	// The information about the recommended index.
	RecommendIndex *DescribeRecommendIndexResponseBodyRecommendIndex `json:"RecommendIndex,omitempty" xml:"RecommendIndex,omitempty" type:"Struct"`
	// The tenant mode.   Valid values:
	// Oracle
	// MySQL
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRecommendIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendIndexResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecommendIndexResponseBody) SetRecommendIndex(v *DescribeRecommendIndexResponseBodyRecommendIndex) *DescribeRecommendIndexResponseBody {
	s.RecommendIndex = v
	return s
}

func (s *DescribeRecommendIndexResponseBody) SetRequestId(v string) *DescribeRecommendIndexResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRecommendIndexResponseBodyRecommendIndex struct {
	// Example 1
	SuggestIndex *string `json:"SuggestIndex,omitempty" xml:"SuggestIndex,omitempty"`
	TableList    *string `json:"TableList,omitempty" xml:"TableList,omitempty"`
	TenantMode   *string `json:"TenantMode,omitempty" xml:"TenantMode,omitempty"`
}

func (s DescribeRecommendIndexResponseBodyRecommendIndex) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendIndexResponseBodyRecommendIndex) GoString() string {
	return s.String()
}

func (s *DescribeRecommendIndexResponseBodyRecommendIndex) SetSuggestIndex(v string) *DescribeRecommendIndexResponseBodyRecommendIndex {
	s.SuggestIndex = &v
	return s
}

func (s *DescribeRecommendIndexResponseBodyRecommendIndex) SetTableList(v string) *DescribeRecommendIndexResponseBodyRecommendIndex {
	s.TableList = &v
	return s
}

func (s *DescribeRecommendIndexResponseBodyRecommendIndex) SetTenantMode(v string) *DescribeRecommendIndexResponseBodyRecommendIndex {
	s.TenantMode = &v
	return s
}

type DescribeRecommendIndexResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRecommendIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRecommendIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendIndexResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecommendIndexResponse) SetHeaders(v map[string]*string) *DescribeRecommendIndexResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecommendIndexResponse) SetStatusCode(v int32) *DescribeRecommendIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRecommendIndexResponse) SetBody(v *DescribeRecommendIndexResponseBody) *DescribeRecommendIndexResponse {
	s.Body = v
	return s
}

type DescribeSQLDetailsRequest struct {
	// The SQL text.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// SQLID.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeSQLDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLDetailsRequest) SetSQLId(v string) *DescribeSQLDetailsRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeSQLDetailsRequest) SetTenantId(v string) *DescribeSQLDetailsRequest {
	s.TenantId = &v
	return s
}

type DescribeSQLDetailsResponseBody struct {
	// The operation that you want to perform.
	// Set the value to **DescribeSQLDetails**.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// ```
	// http(s)://[Endpoint]/?Action=DescribeSQLDetails
	// &TenantId=t2mr3oae0****
	// &SQLId=8D6E84****0B8FB1823D199E2CA1****
	// &Common request parameters
	// ```
	SQLDetails []*DescribeSQLDetailsResponseBodySQLDetails `json:"SQLDetails,omitempty" xml:"SQLDetails,omitempty" type:"Repeated"`
}

func (s DescribeSQLDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLDetailsResponseBody) SetRequestId(v string) *DescribeSQLDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLDetailsResponseBody) SetSQLDetails(v []*DescribeSQLDetailsResponseBodySQLDetails) *DescribeSQLDetailsResponseBody {
	s.SQLDetails = v
	return s
}

type DescribeSQLDetailsResponseBodySQLDetails struct {
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// {"name":"DescribeSQLDetails","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"POST|GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\"name\":\"Action\",\"position\":\"Query\",\"required\":true,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"description\":\"\",\"example\":\"DescribeSQLDetails\"},{\"name\":\"TenantId\",\"position\":\"Body\",\"required\":true,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"t2mr3oae0****\"},{\"name\":\"SQLId\",\"position\":\"Body\",\"required\":true,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"SQLID\",\"description\":\"SQLID。\",\"example\":\"8D6E84****0B8FB1823D199E2CA1****\"}]","response_headers":"[]","response":"{\"type\":\"Object\",\"children\":[{\"name\":\"RequestId\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E\"},{\"name\":\"SQLDetails\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"Array\",\"subType\":\"Object\",\"description\":\"  \",\"children\":[{\"name\":\"SQLText\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"SELECT  ****   FROM ****   WHERE **** = ? AND **** = ?   ORDER BY **** ASC\"},{\"name\":\"DbName\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"testdb\"},{\"name\":\"UserName\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"tester\"}],\"title\":\"\"}],\"title\":\"\",\"description\":\"\"}","errors":"{}"}
	SQLText  *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSQLDetailsResponseBodySQLDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLDetailsResponseBodySQLDetails) GoString() string {
	return s.String()
}

func (s *DescribeSQLDetailsResponseBodySQLDetails) SetDbName(v string) *DescribeSQLDetailsResponseBodySQLDetails {
	s.DbName = &v
	return s
}

func (s *DescribeSQLDetailsResponseBodySQLDetails) SetSQLText(v string) *DescribeSQLDetailsResponseBodySQLDetails {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLDetailsResponseBodySQLDetails) SetUserName(v string) *DescribeSQLDetailsResponseBodySQLDetails {
	s.UserName = &v
	return s
}

type DescribeSQLDetailsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLDetailsResponse) SetHeaders(v map[string]*string) *DescribeSQLDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLDetailsResponse) SetStatusCode(v int32) *DescribeSQLDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLDetailsResponse) SetBody(v *DescribeSQLDetailsResponseBody) *DescribeSQLDetailsResponse {
	s.Body = v
	return s
}

type DescribeSQLHistoryListRequest struct {
	// The end time of the time range for querying the SQL execution history.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	// Default value: 10.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// SQLID.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The start time of the time range for querying the SQL execution history.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeSQLHistoryListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLHistoryListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLHistoryListRequest) SetEndTime(v string) *DescribeSQLHistoryListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLHistoryListRequest) SetPageNumber(v int32) *DescribeSQLHistoryListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLHistoryListRequest) SetPageSize(v int32) *DescribeSQLHistoryListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLHistoryListRequest) SetSQLId(v string) *DescribeSQLHistoryListRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeSQLHistoryListRequest) SetStartTime(v string) *DescribeSQLHistoryListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLHistoryListRequest) SetTenantId(v string) *DescribeSQLHistoryListRequest {
	s.TenantId = &v
	return s
}

type DescribeSQLHistoryListResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The execution history of the SQL statement.
	SQLHistoryList *DescribeSQLHistoryListResponseBodySQLHistoryList `json:"SQLHistoryList,omitempty" xml:"SQLHistoryList,omitempty" type:"Struct"`
}

func (s DescribeSQLHistoryListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLHistoryListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLHistoryListResponseBody) SetRequestId(v string) *DescribeSQLHistoryListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBody) SetSQLHistoryList(v *DescribeSQLHistoryListResponseBodySQLHistoryList) *DescribeSQLHistoryListResponseBody {
	s.SQLHistoryList = v
	return s
}

type DescribeSQLHistoryListResponseBodySQLHistoryList struct {
	// The quantity.
	Count *int64                                                  `json:"Count,omitempty" xml:"Count,omitempty"`
	List  []*DescribeSQLHistoryListResponseBodySQLHistoryListList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
}

func (s DescribeSQLHistoryListResponseBodySQLHistoryList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLHistoryListResponseBodySQLHistoryList) GoString() string {
	return s.String()
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryList) SetCount(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryList {
	s.Count = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryList) SetList(v []*DescribeSQLHistoryListResponseBodySQLHistoryListList) *DescribeSQLHistoryListResponseBodySQLHistoryList {
	s.List = v
	return s
}

type DescribeSQLHistoryListResponseBodySQLHistoryListList struct {
	// The number of rows affected.
	AffectedRows *int64 `json:"AffectedRows,omitempty" xml:"AffectedRows,omitempty"`
	// The wait time of the client.
	AppWaitTime *float32 `json:"AppWaitTime,omitempty" xml:"AppWaitTime,omitempty"`
	// The number of block cache hits.
	BlockCacheHit *int64 `json:"BlockCacheHit,omitempty" xml:"BlockCacheHit,omitempty"`
	// The number of block index cache hits.
	BlockIndexCacheHit *int64 `json:"BlockIndexCacheHit,omitempty" xml:"BlockIndexCacheHit,omitempty"`
	// The number of Bloom filter cache hits.
	BloomFilterCacheHit *int64 `json:"BloomFilterCacheHit,omitempty" xml:"BloomFilterCacheHit,omitempty"`
	// The IP address of the client.
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The wait time in concurrent execution.
	ConcurrencyWaitTime *float32 `json:"ConcurrencyWaitTime,omitempty" xml:"ConcurrencyWaitTime,omitempty"`
	// The average CPU time.
	CpuTime *float32 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The time to wait for decoding.
	DecodeTime *float32 `json:"DecodeTime,omitempty" xml:"DecodeTime,omitempty"`
	// The number of physical reads.
	DiskRead *int64 `json:"DiskRead,omitempty" xml:"DiskRead,omitempty"`
	// The average response time.
	ElapsedTime *float32 `json:"ElapsedTime,omitempty" xml:"ElapsedTime,omitempty"`
	// The end time.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The end time in UTC +0.
	EndTimeUTCString *string `json:"EndTimeUTCString,omitempty" xml:"EndTimeUTCString,omitempty"`
	// The wait event.
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// The number of executions per second.
	ExecPerSecond *int64 `json:"ExecPerSecond,omitempty" xml:"ExecPerSecond,omitempty"`
	// The internal execution time.
	ExecuteTime *float32 `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// The number of executions.
	Executions *int64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// The number of failures.
	FailTimes *int64 `json:"FailTimes,omitempty" xml:"FailTimes,omitempty"`
	// The time spent in hard parsing.
	GetPlanTime *float32 `json:"GetPlanTime,omitempty" xml:"GetPlanTime,omitempty"`
	// The I/O wait time.
	IOWaitTime *float32 `json:"IOWaitTime,omitempty" xml:"IOWaitTime,omitempty"`
	// The number of logical reads.
	LogicalRead *int64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// The maximum CPU time.
	MaxCpuTime *float32 `json:"MaxCpuTime,omitempty" xml:"MaxCpuTime,omitempty"`
	// The maximum response time.
	MaxElapsedTime *float32 `json:"MaxElapsedTime,omitempty" xml:"MaxElapsedTime,omitempty"`
	// The number of rows read from the memory.
	MemstoreReadRowCount *int64 `json:"MemstoreReadRowCount,omitempty" xml:"MemstoreReadRowCount,omitempty"`
	// The number of plan misses.
	MissPlans *int64 `json:"MissPlans,omitempty" xml:"MissPlans,omitempty"`
	// The network latency.
	NetWaitTime *float32 `json:"NetWaitTime,omitempty" xml:"NetWaitTime,omitempty"`
	// The IP address of the node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The queuing time.
	QueueTime *float32 `json:"QueueTime,omitempty" xml:"QueueTime,omitempty"`
	// The number of RPCs.
	RPCCount *int64 `json:"RPCCount,omitempty" xml:"RPCCount,omitempty"`
	// The number of remote plans.
	RemotePlans *int64 `json:"RemotePlans,omitempty" xml:"RemotePlans,omitempty"`
	// The number of retries.
	RetryCount *int64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// The number of rows returned.
	ReturnRows *int64 `json:"ReturnRows,omitempty" xml:"ReturnRows,omitempty"`
	// The number of row cache hits.
	RowCacheHit *int64 `json:"RowCacheHit,omitempty" xml:"RowCacheHit,omitempty"`
	// The scheduling duration.
	ScheduleTime *float32 `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	// The number of rows read from the disk.
	SsstoreReadRowCount *int64 `json:"SsstoreReadRowCount,omitempty" xml:"SsstoreReadRowCount,omitempty"`
	// The internal wait time.
	TotalWaitTime *float32 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// The username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSQLHistoryListResponseBodySQLHistoryListList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLHistoryListResponseBodySQLHistoryListList) GoString() string {
	return s.String()
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetAffectedRows(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.AffectedRows = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetAppWaitTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.AppWaitTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetBlockCacheHit(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.BlockCacheHit = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetBlockIndexCacheHit(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.BlockIndexCacheHit = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetBloomFilterCacheHit(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.BloomFilterCacheHit = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetClientIp(v string) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.ClientIp = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetConcurrencyWaitTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.ConcurrencyWaitTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetCpuTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.CpuTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetDbName(v string) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.DbName = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetDecodeTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.DecodeTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetDiskRead(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.DiskRead = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetElapsedTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.ElapsedTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetEndTime(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetEndTimeUTCString(v string) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.EndTimeUTCString = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetEvent(v string) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.Event = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetExecPerSecond(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.ExecPerSecond = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetExecuteTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetExecutions(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.Executions = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetFailTimes(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.FailTimes = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetGetPlanTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.GetPlanTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetIOWaitTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.IOWaitTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetLogicalRead(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.LogicalRead = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetMaxCpuTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.MaxCpuTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetMaxElapsedTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.MaxElapsedTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetMemstoreReadRowCount(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.MemstoreReadRowCount = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetMissPlans(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.MissPlans = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetNetWaitTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.NetWaitTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetNodeIp(v string) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.NodeIp = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetQueueTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.QueueTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetRPCCount(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.RPCCount = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetRemotePlans(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.RemotePlans = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetRetryCount(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.RetryCount = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetReturnRows(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.ReturnRows = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetRowCacheHit(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.RowCacheHit = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetScheduleTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.ScheduleTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetSsstoreReadRowCount(v int64) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.SsstoreReadRowCount = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetTotalWaitTime(v float32) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.TotalWaitTime = &v
	return s
}

func (s *DescribeSQLHistoryListResponseBodySQLHistoryListList) SetUserName(v string) *DescribeSQLHistoryListResponseBodySQLHistoryListList {
	s.UserName = &v
	return s
}

type DescribeSQLHistoryListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLHistoryListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLHistoryListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLHistoryListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLHistoryListResponse) SetHeaders(v map[string]*string) *DescribeSQLHistoryListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLHistoryListResponse) SetStatusCode(v int32) *DescribeSQLHistoryListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLHistoryListResponse) SetBody(v *DescribeSQLHistoryListResponseBody) *DescribeSQLHistoryListResponse {
	s.Body = v
	return s
}

type DescribeSQLPlansRequest struct {
	// SQLID.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeSQLPlansRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLPlansRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLPlansRequest) SetSQLId(v string) *DescribeSQLPlansRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeSQLPlansRequest) SetTenantId(v string) *DescribeSQLPlansRequest {
	s.TenantId = &v
	return s
}

type DescribeSQLPlansResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the execution plan.
	SQLPlans []*DescribeSQLPlansResponseBodySQLPlans `json:"SQLPlans,omitempty" xml:"SQLPlans,omitempty" type:"Repeated"`
}

func (s DescribeSQLPlansResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLPlansResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLPlansResponseBody) SetRequestId(v string) *DescribeSQLPlansResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLPlansResponseBody) SetSQLPlans(v []*DescribeSQLPlansResponseBodySQLPlans) *DescribeSQLPlansResponseBody {
	s.SQLPlans = v
	return s
}

type DescribeSQLPlansResponseBodySQLPlans struct {
	// The average execution duration, in ms.
	AvgExecutionMS *float32 `json:"AvgExecutionMS,omitempty" xml:"AvgExecutionMS,omitempty"`
	// The average execution duration when the database uses this execution plan, in ms.
	AvgExecutionTimeMS *int64 `json:"AvgExecutionTimeMS,omitempty" xml:"AvgExecutionTimeMS,omitempty"`
	// The time when the plan was loaded for the first time, .
	FirstLoadTime *int64 `json:"FirstLoadTime,omitempty" xml:"FirstLoadTime,omitempty"`
	// The time when the plan was loaded for the first time, in UTC +0.
	FirstLoadTimeUTCString *string `json:"FirstLoadTimeUTCString,omitempty" xml:"FirstLoadTimeUTCString,omitempty"`
	// The number of hits.
	HitCount *int32 `json:"HitCount,omitempty" xml:"HitCount,omitempty"`
	// The major compaction version.
	MergedVersion *int32 `json:"MergedVersion,omitempty" xml:"MergedVersion,omitempty"`
	// The IP address of the node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The outline data.
	OutlineData *string `json:"OutlineData,omitempty" xml:"OutlineData,omitempty"`
	// OutlineID.
	OutlineId *int64 `json:"OutlineId,omitempty" xml:"OutlineId,omitempty"`
	// The time when the plan was bound.
	OutlineTime *int64 `json:"OutlineTime,omitempty" xml:"OutlineTime,omitempty"`
	// The time when the plan was bound, in UTC +0.
	OutlineTimeUTCString *string `json:"OutlineTimeUTCString,omitempty" xml:"OutlineTimeUTCString,omitempty"`
	// The complete execution plan of the SQL statement.
	PlanFull *string `json:"PlanFull,omitempty" xml:"PlanFull,omitempty"`
	// The ID of the SQL execution plan in the database.
	PlanId *int32 `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// The information about the plan.
	PlanInfo *string `json:"PlanInfo,omitempty" xml:"PlanInfo,omitempty"`
	// The unique identifier of the SQL execution plan in the diagnostic system.
	PlanUnionHash *string `json:"PlanUnionHash,omitempty" xml:"PlanUnionHash,omitempty"`
	// The query SQL statement.
	QuerySQL *string `json:"QuerySQL,omitempty" xml:"QuerySQL,omitempty"`
}

func (s DescribeSQLPlansResponseBodySQLPlans) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLPlansResponseBodySQLPlans) GoString() string {
	return s.String()
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetAvgExecutionMS(v float32) *DescribeSQLPlansResponseBodySQLPlans {
	s.AvgExecutionMS = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetAvgExecutionTimeMS(v int64) *DescribeSQLPlansResponseBodySQLPlans {
	s.AvgExecutionTimeMS = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetFirstLoadTime(v int64) *DescribeSQLPlansResponseBodySQLPlans {
	s.FirstLoadTime = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetFirstLoadTimeUTCString(v string) *DescribeSQLPlansResponseBodySQLPlans {
	s.FirstLoadTimeUTCString = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetHitCount(v int32) *DescribeSQLPlansResponseBodySQLPlans {
	s.HitCount = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetMergedVersion(v int32) *DescribeSQLPlansResponseBodySQLPlans {
	s.MergedVersion = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetNodeIp(v string) *DescribeSQLPlansResponseBodySQLPlans {
	s.NodeIp = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetOutlineData(v string) *DescribeSQLPlansResponseBodySQLPlans {
	s.OutlineData = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetOutlineId(v int64) *DescribeSQLPlansResponseBodySQLPlans {
	s.OutlineId = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetOutlineTime(v int64) *DescribeSQLPlansResponseBodySQLPlans {
	s.OutlineTime = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetOutlineTimeUTCString(v string) *DescribeSQLPlansResponseBodySQLPlans {
	s.OutlineTimeUTCString = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetPlanFull(v string) *DescribeSQLPlansResponseBodySQLPlans {
	s.PlanFull = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetPlanId(v int32) *DescribeSQLPlansResponseBodySQLPlans {
	s.PlanId = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetPlanInfo(v string) *DescribeSQLPlansResponseBodySQLPlans {
	s.PlanInfo = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetPlanUnionHash(v string) *DescribeSQLPlansResponseBodySQLPlans {
	s.PlanUnionHash = &v
	return s
}

func (s *DescribeSQLPlansResponseBodySQLPlans) SetQuerySQL(v string) *DescribeSQLPlansResponseBodySQLPlans {
	s.QuerySQL = &v
	return s
}

type DescribeSQLPlansResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLPlansResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLPlansResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLPlansResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLPlansResponse) SetHeaders(v map[string]*string) *DescribeSQLPlansResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLPlansResponse) SetStatusCode(v int32) *DescribeSQLPlansResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLPlansResponse) SetBody(v *DescribeSQLPlansResponseBody) *DescribeSQLPlansResponse {
	s.Body = v
	return s
}

type DescribeSQLSamplesRequest struct {
	// The database name.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end time of querying the slow query execution.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// SQL ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The start time of querying the slow query execution.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The tenant ID.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeSQLSamplesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLSamplesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLSamplesRequest) SetDbName(v string) *DescribeSQLSamplesRequest {
	s.DbName = &v
	return s
}

func (s *DescribeSQLSamplesRequest) SetEndTime(v string) *DescribeSQLSamplesRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLSamplesRequest) SetInstanceId(v string) *DescribeSQLSamplesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSQLSamplesRequest) SetSqlId(v string) *DescribeSQLSamplesRequest {
	s.SqlId = &v
	return s
}

func (s *DescribeSQLSamplesRequest) SetStartTime(v string) *DescribeSQLSamplesRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLSamplesRequest) SetTenantId(v string) *DescribeSQLSamplesRequest {
	s.TenantId = &v
	return s
}

type DescribeSQLSamplesResponseBody struct {
	// The list of sample data of slow query execution details.
	Data []*DescribeSQLSamplesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSQLSamplesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLSamplesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLSamplesResponseBody) SetData(v []*DescribeSQLSamplesResponseBodyData) *DescribeSQLSamplesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSQLSamplesResponseBody) SetRequestId(v string) *DescribeSQLSamplesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSQLSamplesResponseBodyData struct {
	// Average updated rows during the execution period.
	AffectedRows *float64 `json:"AffectedRows,omitempty" xml:"AffectedRows,omitempty"`
	// Application event waiting time (in milliseconds).
	ApplicationWaitTime *float64 `json:"ApplicationWaitTime,omitempty" xml:"ApplicationWaitTime,omitempty"`
	// BlockCache hit count
	BlockCacheHit *float64 `json:"BlockCacheHit,omitempty" xml:"BlockCacheHit,omitempty"`
	// BlockIndexCache hit count
	BlockIndexCacheHit *float64 `json:"BlockIndexCacheHit,omitempty" xml:"BlockIndexCacheHit,omitempty"`
	// BloomFilterCache hit count.
	BloomFilterCacheHit *float64 `json:"BloomFilterCacheHit,omitempty" xml:"BloomFilterCacheHit,omitempty"`
	// Client IP.
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// Client port.
	ClientPort *string `json:"ClientPort,omitempty" xml:"ClientPort,omitempty"`
	// Concurrency event waiting time (in milliseconds).
	ConcurrencyWaitTime *float64 `json:"ConcurrencyWaitTime,omitempty" xml:"ConcurrencyWaitTime,omitempty"`
	// Consistency level.
	ConsistencyLevel *string `json:"ConsistencyLevel,omitempty" xml:"ConsistencyLevel,omitempty"`
	// CPU time (in milliseconds).
	CpuTime *float64 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// Database name.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// Syntax parsing time (in milliseconds).
	DecodeTime *float64 `json:"DecodeTime,omitempty" xml:"DecodeTime,omitempty"`
	// Disk read count.
	DiskReads *float64 `json:"DiskReads,omitempty" xml:"DiskReads,omitempty"`
	// Response time (in milliseconds).
	ElapsedTime *float64 `json:"ElapsedTime,omitempty" xml:"ElapsedTime,omitempty"`
	// Plan execution time (in milliseconds).
	ExecuteTime *float64 `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// Whether to initiate RPC.
	ExecutorRpc *bool `json:"ExecutorRpc,omitempty" xml:"ExecutorRpc,omitempty"`
	// Degree of parallelism.
	ExpectedWorkerCount *float64 `json:"ExpectedWorkerCount,omitempty" xml:"ExpectedWorkerCount,omitempty"`
	FullSqlText         *string  `json:"FullSqlText,omitempty" xml:"FullSqlText,omitempty"`
	// Plan generation time (in milliseconds).
	GetPlanTime *float64 `json:"GetPlanTime,omitempty" xml:"GetPlanTime,omitempty"`
	// Whether to hit the execution plan.
	HitPlan *bool `json:"HitPlan,omitempty" xml:"HitPlan,omitempty"`
	// Whether an internal SQL.
	Inner *bool `json:"Inner,omitempty" xml:"Inner,omitempty"`
	// Memstore read row count.
	MemstoreReadRows *float64 `json:"MemstoreReadRows,omitempty" xml:"MemstoreReadRows,omitempty"`
	// Network transmission time (in milliseconds).
	NetTime *float64 `json:"NetTime,omitempty" xml:"NetTime,omitempty"`
	// Network enqueue time (in milliseconds).
	NetWaitTime *float64 `json:"NetWaitTime,omitempty" xml:"NetWaitTime,omitempty"`
	// Database ID.
	ObDbId *float64 `json:"ObDbId,omitempty" xml:"ObDbId,omitempty"`
	// Server  ID.
	ObServerId *float64 `json:"ObServerId,omitempty" xml:"ObServerId,omitempty"`
	// User ID.
	ObUserId *float64 `json:"ObUserId,omitempty" xml:"ObUserId,omitempty"`
	// Average number of partition accessed during the execution period.
	PartitionCount *float64 `json:"PartitionCount,omitempty" xml:"PartitionCount,omitempty"`
	// The execution plan ID.
	PlanId *float64 `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	// Plan type.
	PlanType *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	// Queueing time (in milliseconds).
	QueueTime *float64 `json:"QueueTime,omitempty" xml:"QueueTime,omitempty"`
	// Request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// SQL request time.
	RequestTime *string `json:"RequestTime,omitempty" xml:"RequestTime,omitempty"`
	// Result code.
	RetCode *float64 `json:"RetCode,omitempty" xml:"RetCode,omitempty"`
	// Retry count.
	RetryCount *float64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// Average returned rows during the execution period.
	ReturnRows *float64 `json:"ReturnRows,omitempty" xml:"ReturnRows,omitempty"`
	// RowCache hit count.
	RowCacheHit *float64 `json:"RowCacheHit,omitempty" xml:"RowCacheHit,omitempty"`
	// Number of RPC sent.
	RpcCount *float64 `json:"RpcCount,omitempty" xml:"RpcCount,omitempty"`
	// Schedule event waiting time (in milliseconds).
	ScheduleTime *float64 `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	// The server where the SQL is executed.
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// SQL type.
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// Ssstore read row count.
	SsstoreReadRows *float64 `json:"SsstoreReadRows,omitempty" xml:"SsstoreReadRows,omitempty"`
	// Parameterized SQL text.
	Statement *string `json:"Statement,omitempty" xml:"Statement,omitempty"`
	// Whether to perform full table scan.
	TableScan *bool `json:"TableScan,omitempty" xml:"TableScan,omitempty"`
	// Trace ID.
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	// Transaction hash.
	TransHash *string `json:"TransHash,omitempty" xml:"TransHash,omitempty"`
	// Actual number of SQL execution threads.
	UsedWorkerCount *float64 `json:"UsedWorkerCount,omitempty" xml:"UsedWorkerCount,omitempty"`
	// UserIO event waiting time (in milliseconds).
	UserIoWaitTime *float64 `json:"UserIoWaitTime,omitempty" xml:"UserIoWaitTime,omitempty"`
	// Username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// Wait count.
	WaitCount *float64 `json:"WaitCount,omitempty" xml:"WaitCount,omitempty"`
	// Longest wait event during the execution period.
	WaitEvent *string `json:"WaitEvent,omitempty" xml:"WaitEvent,omitempty"`
	// Wait time (in milliseconds).
	WaitTime *float64 `json:"WaitTime,omitempty" xml:"WaitTime,omitempty"`
}

func (s DescribeSQLSamplesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLSamplesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSQLSamplesResponseBodyData) SetAffectedRows(v float64) *DescribeSQLSamplesResponseBodyData {
	s.AffectedRows = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetApplicationWaitTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ApplicationWaitTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetBlockCacheHit(v float64) *DescribeSQLSamplesResponseBodyData {
	s.BlockCacheHit = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetBlockIndexCacheHit(v float64) *DescribeSQLSamplesResponseBodyData {
	s.BlockIndexCacheHit = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetBloomFilterCacheHit(v float64) *DescribeSQLSamplesResponseBodyData {
	s.BloomFilterCacheHit = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetClientIp(v string) *DescribeSQLSamplesResponseBodyData {
	s.ClientIp = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetClientPort(v string) *DescribeSQLSamplesResponseBodyData {
	s.ClientPort = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetConcurrencyWaitTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ConcurrencyWaitTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetConsistencyLevel(v string) *DescribeSQLSamplesResponseBodyData {
	s.ConsistencyLevel = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetCpuTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.CpuTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetDbName(v string) *DescribeSQLSamplesResponseBodyData {
	s.DbName = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetDecodeTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.DecodeTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetDiskReads(v float64) *DescribeSQLSamplesResponseBodyData {
	s.DiskReads = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetElapsedTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ElapsedTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetExecuteTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetExecutorRpc(v bool) *DescribeSQLSamplesResponseBodyData {
	s.ExecutorRpc = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetExpectedWorkerCount(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ExpectedWorkerCount = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetFullSqlText(v string) *DescribeSQLSamplesResponseBodyData {
	s.FullSqlText = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetGetPlanTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.GetPlanTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetHitPlan(v bool) *DescribeSQLSamplesResponseBodyData {
	s.HitPlan = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetInner(v bool) *DescribeSQLSamplesResponseBodyData {
	s.Inner = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetMemstoreReadRows(v float64) *DescribeSQLSamplesResponseBodyData {
	s.MemstoreReadRows = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetNetTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.NetTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetNetWaitTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.NetWaitTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetObDbId(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ObDbId = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetObServerId(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ObServerId = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetObUserId(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ObUserId = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetPartitionCount(v float64) *DescribeSQLSamplesResponseBodyData {
	s.PartitionCount = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetPlanId(v float64) *DescribeSQLSamplesResponseBodyData {
	s.PlanId = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetPlanType(v string) *DescribeSQLSamplesResponseBodyData {
	s.PlanType = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetQueueTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.QueueTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetRequestId(v string) *DescribeSQLSamplesResponseBodyData {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetRequestTime(v string) *DescribeSQLSamplesResponseBodyData {
	s.RequestTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetRetCode(v float64) *DescribeSQLSamplesResponseBodyData {
	s.RetCode = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetRetryCount(v float64) *DescribeSQLSamplesResponseBodyData {
	s.RetryCount = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetReturnRows(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ReturnRows = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetRowCacheHit(v float64) *DescribeSQLSamplesResponseBodyData {
	s.RowCacheHit = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetRpcCount(v float64) *DescribeSQLSamplesResponseBodyData {
	s.RpcCount = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetScheduleTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.ScheduleTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetServer(v string) *DescribeSQLSamplesResponseBodyData {
	s.Server = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetSqlType(v string) *DescribeSQLSamplesResponseBodyData {
	s.SqlType = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetSsstoreReadRows(v float64) *DescribeSQLSamplesResponseBodyData {
	s.SsstoreReadRows = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetStatement(v string) *DescribeSQLSamplesResponseBodyData {
	s.Statement = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetTableScan(v bool) *DescribeSQLSamplesResponseBodyData {
	s.TableScan = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetTraceId(v string) *DescribeSQLSamplesResponseBodyData {
	s.TraceId = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetTransHash(v string) *DescribeSQLSamplesResponseBodyData {
	s.TransHash = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetUsedWorkerCount(v float64) *DescribeSQLSamplesResponseBodyData {
	s.UsedWorkerCount = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetUserIoWaitTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.UserIoWaitTime = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetUserName(v string) *DescribeSQLSamplesResponseBodyData {
	s.UserName = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetWaitCount(v float64) *DescribeSQLSamplesResponseBodyData {
	s.WaitCount = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetWaitEvent(v string) *DescribeSQLSamplesResponseBodyData {
	s.WaitEvent = &v
	return s
}

func (s *DescribeSQLSamplesResponseBodyData) SetWaitTime(v float64) *DescribeSQLSamplesResponseBodyData {
	s.WaitTime = &v
	return s
}

type DescribeSQLSamplesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSQLSamplesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSQLSamplesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLSamplesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLSamplesResponse) SetHeaders(v map[string]*string) *DescribeSQLSamplesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLSamplesResponse) SetStatusCode(v int32) *DescribeSQLSamplesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSQLSamplesResponse) SetBody(v *DescribeSQLSamplesResponseBody) *DescribeSQLSamplesResponse {
	s.Body = v
	return s
}

type DescribeSampleSqlRawTextsRequest struct {
	DbName     *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Limit      *string `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// SQL ID。
	SqlId     *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantId  *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	TraceId   *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribeSampleSqlRawTextsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleSqlRawTextsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSampleSqlRawTextsRequest) SetDbName(v string) *DescribeSampleSqlRawTextsRequest {
	s.DbName = &v
	return s
}

func (s *DescribeSampleSqlRawTextsRequest) SetEndTime(v string) *DescribeSampleSqlRawTextsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSampleSqlRawTextsRequest) SetInstanceId(v string) *DescribeSampleSqlRawTextsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSampleSqlRawTextsRequest) SetLimit(v string) *DescribeSampleSqlRawTextsRequest {
	s.Limit = &v
	return s
}

func (s *DescribeSampleSqlRawTextsRequest) SetSqlId(v string) *DescribeSampleSqlRawTextsRequest {
	s.SqlId = &v
	return s
}

func (s *DescribeSampleSqlRawTextsRequest) SetStartTime(v string) *DescribeSampleSqlRawTextsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSampleSqlRawTextsRequest) SetTenantId(v string) *DescribeSampleSqlRawTextsRequest {
	s.TenantId = &v
	return s
}

func (s *DescribeSampleSqlRawTextsRequest) SetTraceId(v string) *DescribeSampleSqlRawTextsRequest {
	s.TraceId = &v
	return s
}

type DescribeSampleSqlRawTextsResponseBody struct {
	Data      *DescribeSampleSqlRawTextsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSampleSqlRawTextsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleSqlRawTextsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSampleSqlRawTextsResponseBody) SetData(v *DescribeSampleSqlRawTextsResponseBodyData) *DescribeSampleSqlRawTextsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSampleSqlRawTextsResponseBody) SetRequestId(v string) *DescribeSampleSqlRawTextsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSampleSqlRawTextsResponseBodyData struct {
	SqlText []*string `json:"SqlText,omitempty" xml:"SqlText,omitempty" type:"Repeated"`
}

func (s DescribeSampleSqlRawTextsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleSqlRawTextsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSampleSqlRawTextsResponseBodyData) SetSqlText(v []*string) *DescribeSampleSqlRawTextsResponseBodyData {
	s.SqlText = v
	return s
}

type DescribeSampleSqlRawTextsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSampleSqlRawTextsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSampleSqlRawTextsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSampleSqlRawTextsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSampleSqlRawTextsResponse) SetHeaders(v map[string]*string) *DescribeSampleSqlRawTextsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSampleSqlRawTextsResponse) SetStatusCode(v int32) *DescribeSampleSqlRawTextsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSampleSqlRawTextsResponse) SetBody(v *DescribeSampleSqlRawTextsResponseBody) *DescribeSampleSqlRawTextsResponse {
	s.Body = v
	return s
}

type DescribeSecurityIpGroupsRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeSecurityIpGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityIpGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityIpGroupsRequest) SetInstanceId(v string) *DescribeSecurityIpGroupsRequest {
	s.InstanceId = &v
	return s
}

type DescribeSecurityIpGroupsResponseBody struct {
	// The request ID.
	RequestId        *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityIpGroups []*DescribeSecurityIpGroupsResponseBodySecurityIpGroups `json:"SecurityIpGroups,omitempty" xml:"SecurityIpGroups,omitempty" type:"Repeated"`
	// Example 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSecurityIpGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityIpGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityIpGroupsResponseBody) SetRequestId(v string) *DescribeSecurityIpGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityIpGroupsResponseBody) SetSecurityIpGroups(v []*DescribeSecurityIpGroupsResponseBodySecurityIpGroups) *DescribeSecurityIpGroupsResponseBody {
	s.SecurityIpGroups = v
	return s
}

func (s *DescribeSecurityIpGroupsResponseBody) SetTotalCount(v int32) *DescribeSecurityIpGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSecurityIpGroupsResponseBodySecurityIpGroups struct {
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	SecurityIps         *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
}

func (s DescribeSecurityIpGroupsResponseBodySecurityIpGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityIpGroupsResponseBodySecurityIpGroups) GoString() string {
	return s.String()
}

func (s *DescribeSecurityIpGroupsResponseBodySecurityIpGroups) SetSecurityIpGroupName(v string) *DescribeSecurityIpGroupsResponseBodySecurityIpGroups {
	s.SecurityIpGroupName = &v
	return s
}

func (s *DescribeSecurityIpGroupsResponseBodySecurityIpGroups) SetSecurityIps(v string) *DescribeSecurityIpGroupsResponseBodySecurityIpGroups {
	s.SecurityIps = &v
	return s
}

type DescribeSecurityIpGroupsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSecurityIpGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSecurityIpGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityIpGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityIpGroupsResponse) SetHeaders(v map[string]*string) *DescribeSecurityIpGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityIpGroupsResponse) SetStatusCode(v int32) *DescribeSecurityIpGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityIpGroupsResponse) SetBody(v *DescribeSecurityIpGroupsResponseBody) *DescribeSecurityIpGroupsResponse {
	s.Body = v
	return s
}

type DescribeSlowSQLHistoryListRequest struct {
	// The end time of the time range for querying the execution history of the slow SQL statement.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The number of the page to return.
	// - Start value: 1
	// - Default value: 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of rows to return on each page.
	// - Maximum value: 100
	// - Default value: 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The SQL ID, which uniquely identifies an SQL statement.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The start time of the time range for querying the execution history of the slow SQL statement.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeSlowSQLHistoryListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLHistoryListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLHistoryListRequest) SetEndTime(v string) *DescribeSlowSQLHistoryListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListRequest) SetPageNumber(v int32) *DescribeSlowSQLHistoryListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowSQLHistoryListRequest) SetPageSize(v int32) *DescribeSlowSQLHistoryListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSlowSQLHistoryListRequest) SetSQLId(v string) *DescribeSlowSQLHistoryListRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeSlowSQLHistoryListRequest) SetStartTime(v string) *DescribeSlowSQLHistoryListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListRequest) SetTenantId(v string) *DescribeSlowSQLHistoryListRequest {
	s.TenantId = &v
	return s
}

type DescribeSlowSQLHistoryListResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The execution history of the slow SQL statement.
	SlowSQLHistoryList *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryList `json:"SlowSQLHistoryList,omitempty" xml:"SlowSQLHistoryList,omitempty" type:"Struct"`
}

func (s DescribeSlowSQLHistoryListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLHistoryListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLHistoryListResponseBody) SetRequestId(v string) *DescribeSlowSQLHistoryListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBody) SetSlowSQLHistoryList(v *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryList) *DescribeSlowSQLHistoryListResponseBody {
	s.SlowSQLHistoryList = v
	return s
}

type DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryList struct {
	// The quantity.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The return result of the request.
	List []*DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
}

func (s DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryList) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryList) SetCount(v int64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryList {
	s.Count = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryList) SetList(v []*DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryList {
	s.List = v
	return s
}

type DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList struct {
	// The number of rows affected.
	AffectedRows *float64 `json:"AffectedRows,omitempty" xml:"AffectedRows,omitempty"`
	// The wait time of the client.
	AppWaitTime *float64 `json:"AppWaitTime,omitempty" xml:"AppWaitTime,omitempty"`
	// The number of block cache hits.
	BlockCacheHit *float64 `json:"BlockCacheHit,omitempty" xml:"BlockCacheHit,omitempty"`
	// The number of block index cache hits.
	BlockIndexCacheHit *float64 `json:"BlockIndexCacheHit,omitempty" xml:"BlockIndexCacheHit,omitempty"`
	// The number of Bloom filter cache hits.
	BloomFilterCacheHit *float64 `json:"BloomFilterCacheHit,omitempty" xml:"BloomFilterCacheHit,omitempty"`
	// The IP address of the client.
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The wait time in concurrent execution.
	ConcurrencyWaitTime *float64 `json:"ConcurrencyWaitTime,omitempty" xml:"ConcurrencyWaitTime,omitempty"`
	// The average CPU time.
	CpuTime *float64 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The time to wait for decoding.
	DecodeTime *float64 `json:"DecodeTime,omitempty" xml:"DecodeTime,omitempty"`
	// The number of physical reads.
	DiskRead *float64 `json:"DiskRead,omitempty" xml:"DiskRead,omitempty"`
	// The average response time.
	ElapsedTime *float64 `json:"ElapsedTime,omitempty" xml:"ElapsedTime,omitempty"`
	// The end time.
	EndTimeUTCString *string `json:"EndTimeUTCString,omitempty" xml:"EndTimeUTCString,omitempty"`
	// The wait event.
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// The number of executions per second.
	ExecPerSecond *float64 `json:"ExecPerSecond,omitempty" xml:"ExecPerSecond,omitempty"`
	// The internal execution time.
	ExecuteTime *float64 `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// The number of executions.
	Executions *float64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// The number of failures.
	FailTimes *float64 `json:"FailTimes,omitempty" xml:"FailTimes,omitempty"`
	// Hard parsing time.
	GetPlanTime *float64 `json:"GetPlanTime,omitempty" xml:"GetPlanTime,omitempty"`
	// The I/O wait time.
	IOWaitTime *float64 `json:"IOWaitTime,omitempty" xml:"IOWaitTime,omitempty"`
	// The number of logical reads.
	LogicalRead *float64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// The maximum CPU time.
	MaxCpuTime *float64 `json:"MaxCpuTime,omitempty" xml:"MaxCpuTime,omitempty"`
	// The maximum response time.
	MaxElapsedTime *float64 `json:"MaxElapsedTime,omitempty" xml:"MaxElapsedTime,omitempty"`
	// The number of rows read from the memory.
	MemstoreReadRowCount *float64 `json:"MemstoreReadRowCount,omitempty" xml:"MemstoreReadRowCount,omitempty"`
	// The number of plan misses.
	MissPlans *float64 `json:"MissPlans,omitempty" xml:"MissPlans,omitempty"`
	// The wait time for network.
	NetWaitTime *float64 `json:"NetWaitTime,omitempty" xml:"NetWaitTime,omitempty"`
	// The IP address of the node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The queuing time.
	QueueTime *float64 `json:"QueueTime,omitempty" xml:"QueueTime,omitempty"`
	// The number of RPCs.
	RPCCount *float64 `json:"RPCCount,omitempty" xml:"RPCCount,omitempty"`
	// The number of remote plans.
	RemotePlans *float64 `json:"RemotePlans,omitempty" xml:"RemotePlans,omitempty"`
	// The number of retries.
	RetryCount *float64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// The number of rows returned.
	ReturnRows *float64 `json:"ReturnRows,omitempty" xml:"ReturnRows,omitempty"`
	// The number of row cache hits.
	RowCacheHit *float64 `json:"RowCacheHit,omitempty" xml:"RowCacheHit,omitempty"`
	// The scheduling duration.
	ScheduleTime *float64 `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	// SQLID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The SQL type.
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The number of rows read from the disk.
	SsstoreReadRowCount *float64 `json:"SsstoreReadRowCount,omitempty" xml:"SsstoreReadRowCount,omitempty"`
	// The name of the tenant.
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	// The internal wait time.
	TotalWaitTime *float64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// The username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetAffectedRows(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.AffectedRows = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetAppWaitTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.AppWaitTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetBlockCacheHit(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.BlockCacheHit = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetBlockIndexCacheHit(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.BlockIndexCacheHit = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetBloomFilterCacheHit(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.BloomFilterCacheHit = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetClientIp(v string) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.ClientIp = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetConcurrencyWaitTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.ConcurrencyWaitTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetCpuTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.CpuTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetDbName(v string) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.DbName = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetDecodeTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.DecodeTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetDiskRead(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.DiskRead = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetElapsedTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.ElapsedTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetEndTimeUTCString(v string) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.EndTimeUTCString = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetEvent(v string) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.Event = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetExecPerSecond(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.ExecPerSecond = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetExecuteTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetExecutions(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.Executions = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetFailTimes(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.FailTimes = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetGetPlanTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.GetPlanTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetIOWaitTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.IOWaitTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetLogicalRead(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.LogicalRead = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetMaxCpuTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.MaxCpuTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetMaxElapsedTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.MaxElapsedTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetMemstoreReadRowCount(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.MemstoreReadRowCount = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetMissPlans(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.MissPlans = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetNetWaitTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.NetWaitTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetNodeIp(v string) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.NodeIp = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetQueueTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.QueueTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetRPCCount(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.RPCCount = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetRemotePlans(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.RemotePlans = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetRetryCount(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.RetryCount = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetReturnRows(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.ReturnRows = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetRowCacheHit(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.RowCacheHit = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetScheduleTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.ScheduleTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetSqlId(v string) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.SqlId = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetSqlType(v string) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.SqlType = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetSsstoreReadRowCount(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.SsstoreReadRowCount = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetTenantName(v string) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.TenantName = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetTotalWaitTime(v float64) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.TotalWaitTime = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList) SetUserName(v string) *DescribeSlowSQLHistoryListResponseBodySlowSQLHistoryListList {
	s.UserName = &v
	return s
}

type DescribeSlowSQLHistoryListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSlowSQLHistoryListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSlowSQLHistoryListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLHistoryListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLHistoryListResponse) SetHeaders(v map[string]*string) *DescribeSlowSQLHistoryListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSlowSQLHistoryListResponse) SetStatusCode(v int32) *DescribeSlowSQLHistoryListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSlowSQLHistoryListResponse) SetBody(v *DescribeSlowSQLHistoryListResponseBody) *DescribeSlowSQLHistoryListResponse {
	s.Body = v
	return s
}

type DescribeSlowSQLListRequest struct {
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end time of the time range for querying slow SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter condition.
	FilterCondition map[string]interface{} `json:"FilterCondition,omitempty" xml:"FilterCondition,omitempty"`
	// The IP address of the database node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The number of rows to return on each page.
	// - Maximum value: 100
	// - Default value: 10
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of the page to return.
	// - Start value: 1
	// - Default value: 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The SQL ID, which uniquely identifies an SQL statement.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The search keyword.
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// The search parameter.
	SearchParameter *string `json:"SearchParameter,omitempty" xml:"SearchParameter,omitempty"`
	// The search rule.
	SearchRule *string `json:"SearchRule,omitempty" xml:"SearchRule,omitempty"`
	// The search value.
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	// The sorted column.
	SortColumn *string `json:"SortColumn,omitempty" xml:"SortColumn,omitempty"`
	// The sorting rule.
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// The start time of the time range for querying slow SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeSlowSQLListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLListRequest) SetDbName(v string) *DescribeSlowSQLListRequest {
	s.DbName = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetEndTime(v string) *DescribeSlowSQLListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetFilterCondition(v map[string]interface{}) *DescribeSlowSQLListRequest {
	s.FilterCondition = v
	return s
}

func (s *DescribeSlowSQLListRequest) SetNodeIp(v string) *DescribeSlowSQLListRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetPageNumber(v int32) *DescribeSlowSQLListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetPageSize(v int32) *DescribeSlowSQLListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetSQLId(v string) *DescribeSlowSQLListRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetSearchKeyWord(v string) *DescribeSlowSQLListRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetSearchParameter(v string) *DescribeSlowSQLListRequest {
	s.SearchParameter = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetSearchRule(v string) *DescribeSlowSQLListRequest {
	s.SearchRule = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetSearchValue(v string) *DescribeSlowSQLListRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetSortColumn(v string) *DescribeSlowSQLListRequest {
	s.SortColumn = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetSortOrder(v string) *DescribeSlowSQLListRequest {
	s.SortOrder = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetStartTime(v string) *DescribeSlowSQLListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowSQLListRequest) SetTenantId(v string) *DescribeSlowSQLListRequest {
	s.TenantId = &v
	return s
}

type DescribeSlowSQLListShrinkRequest struct {
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end time of the time range for querying slow SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter condition.
	FilterConditionShrink *string `json:"FilterCondition,omitempty" xml:"FilterCondition,omitempty"`
	// The IP address of the database node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The number of rows to return on each page.
	// - Maximum value: 100
	// - Default value: 10
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of the page to return.
	// - Start value: 1
	// - Default value: 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The SQL ID, which uniquely identifies an SQL statement.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The search keyword.
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// The search parameter.
	SearchParameter *string `json:"SearchParameter,omitempty" xml:"SearchParameter,omitempty"`
	// The search rule.
	SearchRule *string `json:"SearchRule,omitempty" xml:"SearchRule,omitempty"`
	// The search value.
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	// The sorted column.
	SortColumn *string `json:"SortColumn,omitempty" xml:"SortColumn,omitempty"`
	// The sorting rule.
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// The start time of the time range for querying slow SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeSlowSQLListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLListShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLListShrinkRequest) SetDbName(v string) *DescribeSlowSQLListShrinkRequest {
	s.DbName = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetEndTime(v string) *DescribeSlowSQLListShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetFilterConditionShrink(v string) *DescribeSlowSQLListShrinkRequest {
	s.FilterConditionShrink = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetNodeIp(v string) *DescribeSlowSQLListShrinkRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetPageNumber(v int32) *DescribeSlowSQLListShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetPageSize(v int32) *DescribeSlowSQLListShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetSQLId(v string) *DescribeSlowSQLListShrinkRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetSearchKeyWord(v string) *DescribeSlowSQLListShrinkRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetSearchParameter(v string) *DescribeSlowSQLListShrinkRequest {
	s.SearchParameter = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetSearchRule(v string) *DescribeSlowSQLListShrinkRequest {
	s.SearchRule = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetSearchValue(v string) *DescribeSlowSQLListShrinkRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetSortColumn(v string) *DescribeSlowSQLListShrinkRequest {
	s.SortColumn = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetSortOrder(v string) *DescribeSlowSQLListShrinkRequest {
	s.SortOrder = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetStartTime(v string) *DescribeSlowSQLListShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowSQLListShrinkRequest) SetTenantId(v string) *DescribeSlowSQLListShrinkRequest {
	s.TenantId = &v
	return s
}

type DescribeSlowSQLListResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of slow SQL statements.
	SlowSQLList []*DescribeSlowSQLListResponseBodySlowSQLList `json:"SlowSQLList,omitempty" xml:"SlowSQLList,omitempty" type:"Repeated"`
	// The total count.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSlowSQLListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLListResponseBody) SetRequestId(v string) *DescribeSlowSQLListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSlowSQLListResponseBody) SetSlowSQLList(v []*DescribeSlowSQLListResponseBodySlowSQLList) *DescribeSlowSQLListResponseBody {
	s.SlowSQLList = v
	return s
}

func (s *DescribeSlowSQLListResponseBody) SetTotalCount(v int64) *DescribeSlowSQLListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSlowSQLListResponseBodySlowSQLList struct {
	// The number of rows affected.
	AffectedRows *int64 `json:"AffectedRows,omitempty" xml:"AffectedRows,omitempty"`
	// The wait time of the client.
	AppWaitTime *float32 `json:"AppWaitTime,omitempty" xml:"AppWaitTime,omitempty"`
	// The number of block cache hits.
	BlockCacheHit *int64 `json:"BlockCacheHit,omitempty" xml:"BlockCacheHit,omitempty"`
	// The number of block index cache hits.
	BlockIndexCacheHit *int64 `json:"BlockIndexCacheHit,omitempty" xml:"BlockIndexCacheHit,omitempty"`
	// The number of Bloom filter cache hits.
	BloomFilterCacheHit *int64 `json:"BloomFilterCacheHit,omitempty" xml:"BloomFilterCacheHit,omitempty"`
	// The IP address of the client.
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The wait time in concurrent execution.
	ConcurrencyWaitTime *float32 `json:"ConcurrencyWaitTime,omitempty" xml:"ConcurrencyWaitTime,omitempty"`
	// The average CPU time.
	CpuTime *float32 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The time to wait for decoding.
	DecodeTime *float32 `json:"DecodeTime,omitempty" xml:"DecodeTime,omitempty"`
	// The number of physical reads.
	DiskRead *int64 `json:"DiskRead,omitempty" xml:"DiskRead,omitempty"`
	// The average response time.
	ElapsedTime *float32 `json:"ElapsedTime,omitempty" xml:"ElapsedTime,omitempty"`
	// The wait event.
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// The number of executions per second.
	ExecPerSecond *float32 `json:"ExecPerSecond,omitempty" xml:"ExecPerSecond,omitempty"`
	// The internal execution time.
	ExecuteTime *float32 `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// The number of executions.
	Executions *int64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// The number of failures.
	FailTimes *int64 `json:"FailTimes,omitempty" xml:"FailTimes,omitempty"`
	// The time spent in hard parsing.
	GetPlanTime *float32 `json:"GetPlanTime,omitempty" xml:"GetPlanTime,omitempty"`
	// The I/O wait time.
	IOWaitTime *float32 `json:"IOWaitTime,omitempty" xml:"IOWaitTime,omitempty"`
	// The sequence number of the returned SQL statement.
	Key *int64 `json:"Key,omitempty" xml:"Key,omitempty"`
	// The number of logical reads.
	LogicalRead *int64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// The maximum CPU time.
	MaxCpuTime *float32 `json:"MaxCpuTime,omitempty" xml:"MaxCpuTime,omitempty"`
	// The maximum response time.
	MaxElapsedTime *float32 `json:"MaxElapsedTime,omitempty" xml:"MaxElapsedTime,omitempty"`
	// The number of rows read from the memory.
	MemstoreReadRowCount *int64 `json:"MemstoreReadRowCount,omitempty" xml:"MemstoreReadRowCount,omitempty"`
	// The number of plan misses.
	MissPlans *int64 `json:"MissPlans,omitempty" xml:"MissPlans,omitempty"`
	// The network latency.
	NetWaitTime *float32 `json:"NetWaitTime,omitempty" xml:"NetWaitTime,omitempty"`
	// The IP address of the node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The queuing time.
	QueueTime *float32 `json:"QueueTime,omitempty" xml:"QueueTime,omitempty"`
	// The number of RPCs.
	RPCCount *int64 `json:"RPCCount,omitempty" xml:"RPCCount,omitempty"`
	// The number of remote plans.
	RemotePlans *int64 `json:"RemotePlans,omitempty" xml:"RemotePlans,omitempty"`
	// The number of retries.
	RetryCount *int64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// The number of rows returned.
	ReturnRows *int64 `json:"ReturnRows,omitempty" xml:"ReturnRows,omitempty"`
	// The number of row cache hits.
	RowCacheHit *int64 `json:"RowCacheHit,omitempty" xml:"RowCacheHit,omitempty"`
	// SQLID.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The SQL text.
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// The SQL type.
	SQLType *int64 `json:"SQLType,omitempty" xml:"SQLType,omitempty"`
	// The scheduling duration.
	ScheduleTime *float32 `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	// The number of rows read from the disk.
	SsstoreReadRowCount *int64 `json:"SsstoreReadRowCount,omitempty" xml:"SsstoreReadRowCount,omitempty"`
	// The internal wait time.
	TotalWaitTime *float32 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// The username.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSlowSQLListResponseBodySlowSQLList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLListResponseBodySlowSQLList) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetAffectedRows(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.AffectedRows = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetAppWaitTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.AppWaitTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetBlockCacheHit(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.BlockCacheHit = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetBlockIndexCacheHit(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.BlockIndexCacheHit = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetBloomFilterCacheHit(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.BloomFilterCacheHit = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetClientIp(v string) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.ClientIp = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetConcurrencyWaitTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.ConcurrencyWaitTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetCpuTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.CpuTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetDbName(v string) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.DbName = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetDecodeTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.DecodeTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetDiskRead(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.DiskRead = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetElapsedTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.ElapsedTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetEvent(v string) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.Event = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetExecPerSecond(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.ExecPerSecond = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetExecuteTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetExecutions(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.Executions = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetFailTimes(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.FailTimes = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetGetPlanTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.GetPlanTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetIOWaitTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.IOWaitTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetKey(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.Key = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetLogicalRead(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.LogicalRead = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetMaxCpuTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.MaxCpuTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetMaxElapsedTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.MaxElapsedTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetMemstoreReadRowCount(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.MemstoreReadRowCount = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetMissPlans(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.MissPlans = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetNetWaitTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.NetWaitTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetNodeIp(v string) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.NodeIp = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetQueueTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.QueueTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetRPCCount(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.RPCCount = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetRemotePlans(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.RemotePlans = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetRetryCount(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.RetryCount = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetReturnRows(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.ReturnRows = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetRowCacheHit(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.RowCacheHit = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetSQLId(v string) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.SQLId = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetSQLText(v string) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.SQLText = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetSQLType(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.SQLType = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetScheduleTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.ScheduleTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetSsstoreReadRowCount(v int64) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.SsstoreReadRowCount = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetTotalWaitTime(v float32) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.TotalWaitTime = &v
	return s
}

func (s *DescribeSlowSQLListResponseBodySlowSQLList) SetUserName(v string) *DescribeSlowSQLListResponseBodySlowSQLList {
	s.UserName = &v
	return s
}

type DescribeSlowSQLListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSlowSQLListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSlowSQLListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowSQLListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSlowSQLListResponse) SetHeaders(v map[string]*string) *DescribeSlowSQLListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSlowSQLListResponse) SetStatusCode(v int32) *DescribeSlowSQLListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSlowSQLListResponse) SetBody(v *DescribeSlowSQLListResponseBody) *DescribeSlowSQLListResponse {
	s.Body = v
	return s
}

type DescribeTenantRequest struct {
	// The status of the Internet address for accessing the tenant. Valid values:
	// - CLOSED: The address is disabled.
	// - ALLOCATING_INTERNET_ADDRESS: An address is being applied for.
	// - PENDING_OFFLINE_INTERNET_ADDRESS: The address is being disabled.
	// - ONLINE: The address is in service.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Indicates whether to enable transaction splitting.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeTenantRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantRequest) SetInstanceId(v string) *DescribeTenantRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantRequest) SetTenantId(v string) *DescribeTenantRequest {
	s.TenantId = &v
	return s
}

type DescribeTenantResponseBody struct {
	// The zone information of the tenant.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the zone.
	Tenant *DescribeTenantResponseBodyTenant `json:"Tenant,omitempty" xml:"Tenant,omitempty" type:"Struct"`
}

func (s DescribeTenantResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBody) SetRequestId(v string) *DescribeTenantResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantResponseBody) SetTenant(v *DescribeTenantResponseBodyTenant) *DescribeTenantResponseBody {
	s.Tenant = v
	return s
}

type DescribeTenantResponseBodyTenant struct {
	// DescribeTenant
	AvailableZones []*string `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" type:"Repeated"`
	// The number of CPU cores in each resource unit of the tenant.
	Charset *string `json:"Charset,omitempty" xml:"Charset,omitempty"`
	// 地址类型
	ClogServiceStatus *string `json:"ClogServiceStatus,omitempty" xml:"ClogServiceStatus,omitempty"`
	// The request ID.
	Collation *string `json:"Collation,omitempty" xml:"Collation,omitempty"`
	// You can call this operation to create a single tenant in a specific cluster.
	CreateTime    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataMergeTime *string `json:"DataMergeTime,omitempty" xml:"DataMergeTime,omitempty"`
	// The list of zones.
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// The series of the instance.
	DeployType *string `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	// Indicates whether to enable read/write splitting endpoint.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// You can call this operation to query the information of a specific tenant in a specific cluster.
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// 是否可以申请Binlog服务
	EnableBinlogService *bool `json:"EnableBinlogService,omitempty" xml:"EnableBinlogService,omitempty"`
	// The intranet address for accessing the tenant.
	EnableClogService *bool `json:"EnableClogService,omitempty" xml:"EnableClogService,omitempty"`
	// The deployment type of the primary zone.
	EnableInternetAddressService *bool `json:"EnableInternetAddressService,omitempty" xml:"EnableInternetAddressService,omitempty"`
	EnableParallelQuery          *bool `json:"EnableParallelQuery,omitempty" xml:"EnableParallelQuery,omitempty"`
	EnableReadOnlyReplica        *bool `json:"EnableReadOnlyReplica,omitempty" xml:"EnableReadOnlyReplica,omitempty"`
	EnableReadWriteSplit         *bool `json:"EnableReadWriteSplit,omitempty" xml:"EnableReadWriteSplit,omitempty"`
	// {
	//     "RequestId": "EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C",
	//     "Tenant": {
	//         "TenantId": "t33h8y08k****",
	//         "TenantName": "pay_online",
	//         "TenantMode": "Oracle",
	//         "VpcId": "vpc-bp1d2q3mhg9i23ofi****",
	//         "Status": "ONLINE",
	//         "PrimaryZone": "cn-hangzhou-i",
	//         "DeployType": "multiple",
	//         "DeployMode": "1-1-1",
	//         "Description": "PayCore business database",
	//         "CreateTime": "2021-09-17 15:52:17",
	//         "TenantResource": {
	//             "UnitNum": 1,
	//             "Cpu": {
	//                 "UsedCpu": 8,
	//                 "TotalCpu": 10,
	//                 "UnitCpu": 8
	//             },
	//             "Memory": {
	//                 "UsedMemory": 30,
	//                 "TotalMemory": 64,
	//                 "UnitMemory": 32
	//             },
	//             "DiskSize": {
	//                 "UsedDiskSize": 86
	//             }
	//         },
	//         "TenantConnections": [
	//             {
	//                 "ConnectionRole": "ReadWrite",
	//                 "IntranetAddress": "t32a7ru5u****.oceanbase.aliyuncs.com",
	//                 "IntranetPort": 3306,
	//                 "InternetAddress": "t32a7ru5u****mo.oceanbase.aliyuncs.com",
	//                 "InternetPort": 3306,
	//                 "VpcId": "vpc-bp1qiail1asmfe23t****",
	//                 "VSwitchId": "vsw-bp11k1aypnzu1l3whi****",
	//                 "IntranetAddressMasterZoneId": "cn-hangzhou-i",
	//                 "IntranetAddressSlaveZoneId": "cn-hangzhou-j",
	//                 "IntranetAddressStatus": "ONLINE",
	//                 "ConnectionZones": [
	//                     "cn-hangzhou-i"
	//                 ],
	//                 "InternetAddressStatus": "CLOSED"
	//             }
	//         ],
	//         "TenantZones": [
	//             {
	//                 "TenantZoneId": "cn-hangzhou-i",
	//                 "Region": "cn-hangzhou",
	//                 "TenantZoneRole": "ReadOnly"
	//             }
	//         ],
	//         "ClogServiceStatus": "CLOSED"
	//     }
	// }
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// ```
	// http(s)://[Endpoint]/?Action=DescribeTenant
	// &InstanceId=ob317v4uif****
	// &TenantId=ob2mr3oae0****
	// &Common request parameters
	// ```
	MasterIntranetAddressZone *string `json:"MasterIntranetAddressZone,omitempty" xml:"MasterIntranetAddressZone,omitempty"`
	MaxParallelQueryDegree    *int64  `json:"MaxParallelQueryDegree,omitempty" xml:"MaxParallelQueryDegree,omitempty"`
	PayType                   *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The type of the payment.
	PrimaryZone *string `json:"PrimaryZone,omitempty" xml:"PrimaryZone,omitempty"`
	// Example 1
	PrimaryZoneDeployType *string                                           `json:"PrimaryZoneDeployType,omitempty" xml:"PrimaryZoneDeployType,omitempty"`
	ReadOnlyResource      *DescribeTenantResponseBodyTenantReadOnlyResource `json:"ReadOnlyResource,omitempty" xml:"ReadOnlyResource,omitempty" type:"Struct"`
	// <DescribeTenantResponse>
	//     <RequestId>EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C</RequestId>
	//     <Tenant>
	//         <TenantId>t33h8y08k****</TenantId>
	//         <TenantName>pay_online</TenantName>
	//         <TenantMode>Oracle</TenantMode>
	//         <VpcId>vpc-bp1d2q3mhg9i23ofi****</VpcId>
	//         <Status>ONLINE</Status>
	//         <PrimaryZone>cn-hangzhou-i</PrimaryZone>
	//         <DeployType>multiple</DeployType>
	//         <DeployMode>1-1-1</DeployMode>
	//         <Description>PayCore business database</Description>
	//         <CreateTime>2021-09-17 15:52:17</CreateTime>
	//         <TenantResource>
	//             <UnitNum>1</UnitNum>
	//             <Cpu>
	//                 <UsedCpu>8</UsedCpu>
	//                 <TotalCpu>10</TotalCpu>
	//                 <UnitCpu>8</UnitCpu>
	//             </Cpu>
	//             <Memory>
	//                 <UsedMemory>30</UsedMemory>
	//                 <TotalMemory>64</TotalMemory>
	//                 <UnitMemory>32</UnitMemory>
	//             </Memory>
	//             <DiskSize>
	//                 <UsedDiskSize>86</UsedDiskSize>
	//             </DiskSize>
	//         </TenantResource>
	//         <TenantConnections>
	//             <ConnectionRole>ReadWrite</ConnectionRole>
	//             <IntranetAddress>t32a7ru5u****.oceanbase.aliyuncs.com</IntranetAddress>
	//             <IntranetPort>3306</IntranetPort>
	//             <InternetAddress>t32a7ru5u****mo.oceanbase.aliyuncs.com</InternetAddress>
	//             <InternetPort>3306</InternetPort>
	//             <VpcId>vpc-bp1qiail1asmfe23t****</VpcId>
	//             <VSwitchId>vsw-bp11k1aypnzu1l3whi****</VSwitchId>
	//             <IntranetAddressMasterZoneId>cn-hangzhou-i</IntranetAddressMasterZoneId>
	//             <IntranetAddressSlaveZoneId>cn-hangzhou-j</IntranetAddressSlaveZoneId>
	//             <IntranetAddressStatus>ONLINE</IntranetAddressStatus>
	//             <ConnectionZones>cn-hangzhou-i</ConnectionZones>
	//             <InternetAddressStatus>CLOSED</InternetAddressStatus>
	//         </TenantConnections>
	//         <TenantZones>
	//             <TenantZoneId>cn-hangzhou-i</TenantZoneId>
	//             <Region>cn-hangzhou</Region>
	//             <TenantZoneRole>ReadOnly</TenantZoneRole>
	//         </TenantZones>
	//         <ClogServiceStatus>CLOSED</ClogServiceStatus>
	//     </Tenant>
	// </DescribeTenantResponse>
	Series *string `json:"Series,omitempty" xml:"Series,omitempty"`
	// The character set.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The status of the tenant.
	// - PENDING_CREATE: The tenant is being created.
	// - RESTORE: The tenant is being recovered.
	// - ONLINE: The tenant is running.
	// - SPEC_MODIFYING: The specification of the tenant is being modified.
	// - ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.
	// - PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.
	// - PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.
	// - PARAMETER_MODIFYING: Parameters are being modified.
	// - WHITE_LIST_MODIFYING: The whitelist is being modified.
	TenantConnections []*DescribeTenantResponseBodyTenantTenantConnections `json:"TenantConnections,omitempty" xml:"TenantConnections,omitempty" type:"Repeated"`
	// The region where the zone of the tenant resides.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The enabling status of the clog service.
	// - CLOSED: The clog service is disabled.
	// - ONLINE: The clog service is running.
	TenantMode *string `json:"TenantMode,omitempty" xml:"TenantMode,omitempty"`
	// The request type of the zone of the tenant.  ReadWrite: The zone supports data reads and writes. ReadOnly: The zone supports only data reads. For a high availability cluster with multiple IDCs, the primary zone provides ReadWrite services, and the standby zone provides ReadOnly services. For a high availability cluster with a single IDC, all zones provide ReadWrite services.
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	// It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.
	TenantResource *DescribeTenantResponseBodyTenantTenantResource `json:"TenantResource,omitempty" xml:"TenantResource,omitempty" type:"Struct"`
	// The standby zone corresponding to the address for accessing the tenant.
	TenantZones []*DescribeTenantResponseBodyTenantTenantZones `json:"TenantZones,omitempty" xml:"TenantZones,omitempty" type:"Repeated"`
	TimeZone    *string                                        `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
	// Indicates whether the clog service is available. To enable the clog service, submit a ticket.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeTenantResponseBodyTenant) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenant) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenant) SetAvailableZones(v []*string) *DescribeTenantResponseBodyTenant {
	s.AvailableZones = v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetCharset(v string) *DescribeTenantResponseBodyTenant {
	s.Charset = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetClogServiceStatus(v string) *DescribeTenantResponseBodyTenant {
	s.ClogServiceStatus = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetCollation(v string) *DescribeTenantResponseBodyTenant {
	s.Collation = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetCreateTime(v string) *DescribeTenantResponseBodyTenant {
	s.CreateTime = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetDataMergeTime(v string) *DescribeTenantResponseBodyTenant {
	s.DataMergeTime = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetDeployMode(v string) *DescribeTenantResponseBodyTenant {
	s.DeployMode = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetDeployType(v string) *DescribeTenantResponseBodyTenant {
	s.DeployType = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetDescription(v string) *DescribeTenantResponseBodyTenant {
	s.Description = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetDiskType(v string) *DescribeTenantResponseBodyTenant {
	s.DiskType = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetEnableBinlogService(v bool) *DescribeTenantResponseBodyTenant {
	s.EnableBinlogService = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetEnableClogService(v bool) *DescribeTenantResponseBodyTenant {
	s.EnableClogService = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetEnableInternetAddressService(v bool) *DescribeTenantResponseBodyTenant {
	s.EnableInternetAddressService = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetEnableParallelQuery(v bool) *DescribeTenantResponseBodyTenant {
	s.EnableParallelQuery = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetEnableReadOnlyReplica(v bool) *DescribeTenantResponseBodyTenant {
	s.EnableReadOnlyReplica = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetEnableReadWriteSplit(v bool) *DescribeTenantResponseBodyTenant {
	s.EnableReadWriteSplit = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetInstanceType(v string) *DescribeTenantResponseBodyTenant {
	s.InstanceType = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetMasterIntranetAddressZone(v string) *DescribeTenantResponseBodyTenant {
	s.MasterIntranetAddressZone = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetMaxParallelQueryDegree(v int64) *DescribeTenantResponseBodyTenant {
	s.MaxParallelQueryDegree = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetPayType(v string) *DescribeTenantResponseBodyTenant {
	s.PayType = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetPrimaryZone(v string) *DescribeTenantResponseBodyTenant {
	s.PrimaryZone = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetPrimaryZoneDeployType(v string) *DescribeTenantResponseBodyTenant {
	s.PrimaryZoneDeployType = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetReadOnlyResource(v *DescribeTenantResponseBodyTenantReadOnlyResource) *DescribeTenantResponseBodyTenant {
	s.ReadOnlyResource = v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetSeries(v string) *DescribeTenantResponseBodyTenant {
	s.Series = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetStatus(v string) *DescribeTenantResponseBodyTenant {
	s.Status = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetTenantConnections(v []*DescribeTenantResponseBodyTenantTenantConnections) *DescribeTenantResponseBodyTenant {
	s.TenantConnections = v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetTenantId(v string) *DescribeTenantResponseBodyTenant {
	s.TenantId = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetTenantMode(v string) *DescribeTenantResponseBodyTenant {
	s.TenantMode = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetTenantName(v string) *DescribeTenantResponseBodyTenant {
	s.TenantName = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetTenantResource(v *DescribeTenantResponseBodyTenantTenantResource) *DescribeTenantResponseBodyTenant {
	s.TenantResource = v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetTenantZones(v []*DescribeTenantResponseBodyTenantTenantZones) *DescribeTenantResponseBodyTenant {
	s.TenantZones = v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetTimeZone(v string) *DescribeTenantResponseBodyTenant {
	s.TimeZone = &v
	return s
}

func (s *DescribeTenantResponseBodyTenant) SetVpcId(v string) *DescribeTenantResponseBodyTenant {
	s.VpcId = &v
	return s
}

type DescribeTenantResponseBodyTenantReadOnlyResource struct {
	CapacityUnit *DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit `json:"CapacityUnit,omitempty" xml:"CapacityUnit,omitempty" type:"Struct"`
	Cpu          *DescribeTenantResponseBodyTenantReadOnlyResourceCpu          `json:"Cpu,omitempty" xml:"Cpu,omitempty" type:"Struct"`
	DiskSize     *DescribeTenantResponseBodyTenantReadOnlyResourceDiskSize     `json:"DiskSize,omitempty" xml:"DiskSize,omitempty" type:"Struct"`
	LogDiskSize  *DescribeTenantResponseBodyTenantReadOnlyResourceLogDiskSize  `json:"LogDiskSize,omitempty" xml:"LogDiskSize,omitempty" type:"Struct"`
	Memory       *DescribeTenantResponseBodyTenantReadOnlyResourceMemory       `json:"Memory,omitempty" xml:"Memory,omitempty" type:"Struct"`
	UnitNum      *int32                                                        `json:"UnitNum,omitempty" xml:"UnitNum,omitempty"`
}

func (s DescribeTenantResponseBodyTenantReadOnlyResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantReadOnlyResource) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResource) SetCapacityUnit(v *DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit) *DescribeTenantResponseBodyTenantReadOnlyResource {
	s.CapacityUnit = v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResource) SetCpu(v *DescribeTenantResponseBodyTenantReadOnlyResourceCpu) *DescribeTenantResponseBodyTenantReadOnlyResource {
	s.Cpu = v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResource) SetDiskSize(v *DescribeTenantResponseBodyTenantReadOnlyResourceDiskSize) *DescribeTenantResponseBodyTenantReadOnlyResource {
	s.DiskSize = v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResource) SetLogDiskSize(v *DescribeTenantResponseBodyTenantReadOnlyResourceLogDiskSize) *DescribeTenantResponseBodyTenantReadOnlyResource {
	s.LogDiskSize = v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResource) SetMemory(v *DescribeTenantResponseBodyTenantReadOnlyResourceMemory) *DescribeTenantResponseBodyTenantReadOnlyResource {
	s.Memory = v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResource) SetUnitNum(v int32) *DescribeTenantResponseBodyTenantReadOnlyResource {
	s.UnitNum = &v
	return s
}

type DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit struct {
	MaxCapacityUnit *int32 `json:"MaxCapacityUnit,omitempty" xml:"MaxCapacityUnit,omitempty"`
	MinCapacityUnit *int32 `json:"MinCapacityUnit,omitempty" xml:"MinCapacityUnit,omitempty"`
	UsedCapacit     *int32 `json:"UsedCapacit,omitempty" xml:"UsedCapacit,omitempty"`
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit) SetMaxCapacityUnit(v int32) *DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit {
	s.MaxCapacityUnit = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit) SetMinCapacityUnit(v int32) *DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit {
	s.MinCapacityUnit = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit) SetUsedCapacit(v int32) *DescribeTenantResponseBodyTenantReadOnlyResourceCapacityUnit {
	s.UsedCapacit = &v
	return s
}

type DescribeTenantResponseBodyTenantReadOnlyResourceCpu struct {
	TotalCpu *float32 `json:"TotalCpu,omitempty" xml:"TotalCpu,omitempty"`
	UnitCpu  *float32 `json:"UnitCpu,omitempty" xml:"UnitCpu,omitempty"`
	UsedCpu  *float32 `json:"UsedCpu,omitempty" xml:"UsedCpu,omitempty"`
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceCpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceCpu) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceCpu) SetTotalCpu(v float32) *DescribeTenantResponseBodyTenantReadOnlyResourceCpu {
	s.TotalCpu = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceCpu) SetUnitCpu(v float32) *DescribeTenantResponseBodyTenantReadOnlyResourceCpu {
	s.UnitCpu = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceCpu) SetUsedCpu(v float32) *DescribeTenantResponseBodyTenantReadOnlyResourceCpu {
	s.UsedCpu = &v
	return s
}

type DescribeTenantResponseBodyTenantReadOnlyResourceDiskSize struct {
	UsedDiskSize *float32 `json:"UsedDiskSize,omitempty" xml:"UsedDiskSize,omitempty"`
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceDiskSize) SetUsedDiskSize(v float32) *DescribeTenantResponseBodyTenantReadOnlyResourceDiskSize {
	s.UsedDiskSize = &v
	return s
}

type DescribeTenantResponseBodyTenantReadOnlyResourceLogDiskSize struct {
	TotalLogDisk *int32 `json:"TotalLogDisk,omitempty" xml:"TotalLogDisk,omitempty"`
	UnitLogDisk  *int32 `json:"UnitLogDisk,omitempty" xml:"UnitLogDisk,omitempty"`
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceLogDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceLogDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceLogDiskSize) SetTotalLogDisk(v int32) *DescribeTenantResponseBodyTenantReadOnlyResourceLogDiskSize {
	s.TotalLogDisk = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceLogDiskSize) SetUnitLogDisk(v int32) *DescribeTenantResponseBodyTenantReadOnlyResourceLogDiskSize {
	s.UnitLogDisk = &v
	return s
}

type DescribeTenantResponseBodyTenantReadOnlyResourceMemory struct {
	TotalMemory *float32 `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	UnitMemory  *float32 `json:"UnitMemory,omitempty" xml:"UnitMemory,omitempty"`
	UsedMemory  *float32 `json:"UsedMemory,omitempty" xml:"UsedMemory,omitempty"`
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceMemory) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantReadOnlyResourceMemory) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceMemory) SetTotalMemory(v float32) *DescribeTenantResponseBodyTenantReadOnlyResourceMemory {
	s.TotalMemory = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceMemory) SetUnitMemory(v float32) *DescribeTenantResponseBodyTenantReadOnlyResourceMemory {
	s.UnitMemory = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantReadOnlyResourceMemory) SetUsedMemory(v float32) *DescribeTenantResponseBodyTenantReadOnlyResourceMemory {
	s.UsedMemory = &v
	return s
}

type DescribeTenantResponseBodyTenantTenantConnections struct {
	// The primary zone of the tenant.
	AddressType           *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	ConnectionReplicaType *string `json:"ConnectionReplicaType,omitempty" xml:"ConnectionReplicaType,omitempty"`
	// The Internet address for accessing the tenant.
	ConnectionZones        []*string `json:"ConnectionZones,omitempty" xml:"ConnectionZones,omitempty" type:"Repeated"`
	EnableTransactionSplit *bool     `json:"EnableTransactionSplit,omitempty" xml:"EnableTransactionSplit,omitempty"`
	// The ID of the VPC.
	InternetAddress *string `json:"InternetAddress,omitempty" xml:"InternetAddress,omitempty"`
	// 实例系列
	InternetAddressStatus *string `json:"InternetAddressStatus,omitempty" xml:"InternetAddressStatus,omitempty"`
	// 实例类型
	InternetPort *int32 `json:"InternetPort,omitempty" xml:"InternetPort,omitempty"`
	// The deployment type of the cluster. Valid values:
	// - multiple: multi-IDC deployment
	// - single: single-IDC deployment
	// - dual: dual-IDC deployment
	IntranetAddress *string `json:"IntranetAddress,omitempty" xml:"IntranetAddress,omitempty"`
	// PayCore business database
	IntranetAddressMasterZoneId *string `json:"IntranetAddressMasterZoneId,omitempty" xml:"IntranetAddressMasterZoneId,omitempty"`
	// The total number of CPU cores of the tenant.
	IntranetAddressSlaveZoneId *string `json:"IntranetAddressSlaveZoneId,omitempty" xml:"IntranetAddressSlaveZoneId,omitempty"`
	// 付费类型
	IntranetAddressStatus *string `json:"IntranetAddressStatus,omitempty" xml:"IntranetAddressStatus,omitempty"`
	// The ID of the tenant.
	IntranetPort        *int32  `json:"IntranetPort,omitempty" xml:"IntranetPort,omitempty"`
	MaxConnectionNum    *int64  `json:"MaxConnectionNum,omitempty" xml:"MaxConnectionNum,omitempty"`
	ParallelQueryDegree *int64  `json:"ParallelQueryDegree,omitempty" xml:"ParallelQueryDegree,omitempty"`
	TenantEndpointId    *string `json:"TenantEndpointId,omitempty" xml:"TenantEndpointId,omitempty"`
	// The primary zone corresponding to the address for accessing the tenant.
	TransactionSplit *bool `json:"TransactionSplit,omitempty" xml:"TransactionSplit,omitempty"`
	// The connection access information of the tenant.
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The service mode of the connection address. Valid values:
	// ReadWrite: provides strong-consistency read and write services.
	// ReadOnly: provides the read-only service to ensure ultimate consistency of data.
	// Clog: provides transaction log services.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeTenantResponseBodyTenantTenantConnections) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantTenantConnections) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetAddressType(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.AddressType = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetConnectionReplicaType(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.ConnectionReplicaType = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetConnectionZones(v []*string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.ConnectionZones = v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetEnableTransactionSplit(v bool) *DescribeTenantResponseBodyTenantTenantConnections {
	s.EnableTransactionSplit = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetInternetAddress(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.InternetAddress = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetInternetAddressStatus(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.InternetAddressStatus = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetInternetPort(v int32) *DescribeTenantResponseBodyTenantTenantConnections {
	s.InternetPort = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetIntranetAddress(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.IntranetAddress = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetIntranetAddressMasterZoneId(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.IntranetAddressMasterZoneId = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetIntranetAddressSlaveZoneId(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.IntranetAddressSlaveZoneId = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetIntranetAddressStatus(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.IntranetAddressStatus = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetIntranetPort(v int32) *DescribeTenantResponseBodyTenantTenantConnections {
	s.IntranetPort = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetMaxConnectionNum(v int64) *DescribeTenantResponseBodyTenantTenantConnections {
	s.MaxConnectionNum = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetParallelQueryDegree(v int64) *DescribeTenantResponseBodyTenantTenantConnections {
	s.ParallelQueryDegree = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetTenantEndpointId(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.TenantEndpointId = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetTransactionSplit(v bool) *DescribeTenantResponseBodyTenantTenantConnections {
	s.TransactionSplit = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetVSwitchId(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.VSwitchId = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantConnections) SetVpcId(v string) *DescribeTenantResponseBodyTenantTenantConnections {
	s.VpcId = &v
	return s
}

type DescribeTenantResponseBodyTenantTenantResource struct {
	CapacityUnit *DescribeTenantResponseBodyTenantTenantResourceCapacityUnit `json:"CapacityUnit,omitempty" xml:"CapacityUnit,omitempty" type:"Struct"`
	// The enabling status of the Clog service.
	// CLOSED: The Clog service is disabled.
	// - ONLINE: The Clog service is running.
	Cpu *DescribeTenantResponseBodyTenantTenantResourceCpu `json:"Cpu,omitempty" xml:"Cpu,omitempty" type:"Struct"`
	// The status of the intranet address for accessing the tenant.
	// The value ONLINE indicates that the address is in service.
	DiskSize    *DescribeTenantResponseBodyTenantTenantResourceDiskSize    `json:"DiskSize,omitempty" xml:"DiskSize,omitempty" type:"Struct"`
	LogDiskSize *DescribeTenantResponseBodyTenantTenantResourceLogDiskSize `json:"LogDiskSize,omitempty" xml:"LogDiskSize,omitempty" type:"Struct"`
	// The description of the tenant.
	Memory *DescribeTenantResponseBodyTenantTenantResourceMemory `json:"Memory,omitempty" xml:"Memory,omitempty" type:"Struct"`
	// Alibaba Cloud CLI
	UnitNum *int32 `json:"UnitNum,omitempty" xml:"UnitNum,omitempty"`
}

func (s DescribeTenantResponseBodyTenantTenantResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantTenantResource) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantTenantResource) SetCapacityUnit(v *DescribeTenantResponseBodyTenantTenantResourceCapacityUnit) *DescribeTenantResponseBodyTenantTenantResource {
	s.CapacityUnit = v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResource) SetCpu(v *DescribeTenantResponseBodyTenantTenantResourceCpu) *DescribeTenantResponseBodyTenantTenantResource {
	s.Cpu = v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResource) SetDiskSize(v *DescribeTenantResponseBodyTenantTenantResourceDiskSize) *DescribeTenantResponseBodyTenantTenantResource {
	s.DiskSize = v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResource) SetLogDiskSize(v *DescribeTenantResponseBodyTenantTenantResourceLogDiskSize) *DescribeTenantResponseBodyTenantTenantResource {
	s.LogDiskSize = v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResource) SetMemory(v *DescribeTenantResponseBodyTenantTenantResourceMemory) *DescribeTenantResponseBodyTenantTenantResource {
	s.Memory = v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResource) SetUnitNum(v int32) *DescribeTenantResponseBodyTenantTenantResource {
	s.UnitNum = &v
	return s
}

type DescribeTenantResponseBodyTenantTenantResourceCapacityUnit struct {
	MaxCapacityUnit *int32 `json:"MaxCapacityUnit,omitempty" xml:"MaxCapacityUnit,omitempty"`
	MinCapacityUnit *int32 `json:"MinCapacityUnit,omitempty" xml:"MinCapacityUnit,omitempty"`
	UsedCapacit     *int32 `json:"UsedCapacit,omitempty" xml:"UsedCapacit,omitempty"`
}

func (s DescribeTenantResponseBodyTenantTenantResourceCapacityUnit) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantTenantResourceCapacityUnit) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantTenantResourceCapacityUnit) SetMaxCapacityUnit(v int32) *DescribeTenantResponseBodyTenantTenantResourceCapacityUnit {
	s.MaxCapacityUnit = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResourceCapacityUnit) SetMinCapacityUnit(v int32) *DescribeTenantResponseBodyTenantTenantResourceCapacityUnit {
	s.MinCapacityUnit = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResourceCapacityUnit) SetUsedCapacit(v int32) *DescribeTenantResponseBodyTenantTenantResourceCapacityUnit {
	s.UsedCapacit = &v
	return s
}

type DescribeTenantResponseBodyTenantTenantResourceCpu struct {
	// The data replica distribution mode of the tenant.
	//
	// - For the high availability version, N-N-N indicates the three-zone mode, and N-N indicates the dual-zone or single-zone mode.
	// - For the basic version, N indicates the single-zone mode.
	//
	// > <br>N represents the number of nodes in a single zone.
	TotalCpu *float32 `json:"TotalCpu,omitempty" xml:"TotalCpu,omitempty"`
	// The zone corresponding to the tenant connection.
	UnitCpu *float32 `json:"UnitCpu,omitempty" xml:"UnitCpu,omitempty"`
	// The tenant mode.
	// Valid values:
	// Oracle
	// MySQL
	UsedCpu *float32 `json:"UsedCpu,omitempty" xml:"UsedCpu,omitempty"`
}

func (s DescribeTenantResponseBodyTenantTenantResourceCpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantTenantResourceCpu) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantTenantResourceCpu) SetTotalCpu(v float32) *DescribeTenantResponseBodyTenantTenantResourceCpu {
	s.TotalCpu = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResourceCpu) SetUnitCpu(v float32) *DescribeTenantResponseBodyTenantTenantResourceCpu {
	s.UnitCpu = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResourceCpu) SetUsedCpu(v float32) *DescribeTenantResponseBodyTenantTenantResourceCpu {
	s.UsedCpu = &v
	return s
}

type DescribeTenantResponseBodyTenantTenantResourceDiskSize struct {
	// The total memory size of the tenant, in GB.
	UsedDiskSize *float32 `json:"UsedDiskSize,omitempty" xml:"UsedDiskSize,omitempty"`
}

func (s DescribeTenantResponseBodyTenantTenantResourceDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantTenantResourceDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantTenantResourceDiskSize) SetUsedDiskSize(v float32) *DescribeTenantResponseBodyTenantTenantResourceDiskSize {
	s.UsedDiskSize = &v
	return s
}

type DescribeTenantResponseBodyTenantTenantResourceLogDiskSize struct {
	TotalLogDisk *int32 `json:"TotalLogDisk,omitempty" xml:"TotalLogDisk,omitempty"`
	UnitLogDisk  *int32 `json:"UnitLogDisk,omitempty" xml:"UnitLogDisk,omitempty"`
}

func (s DescribeTenantResponseBodyTenantTenantResourceLogDiskSize) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantTenantResourceLogDiskSize) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantTenantResourceLogDiskSize) SetTotalLogDisk(v int32) *DescribeTenantResponseBodyTenantTenantResourceLogDiskSize {
	s.TotalLogDisk = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResourceLogDiskSize) SetUnitLogDisk(v int32) *DescribeTenantResponseBodyTenantTenantResourceLogDiskSize {
	s.UnitLogDisk = &v
	return s
}

type DescribeTenantResponseBodyTenantTenantResourceMemory struct {
	// The information about the memory resources of the tenant.
	TotalMemory *float32 `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	// The time when the tenant was created.
	UnitMemory *float32 `json:"UnitMemory,omitempty" xml:"UnitMemory,omitempty"`
	// The status of the Internet address for accessing the tenant. Valid values:
	// Closed: The address is disabled.
	// - ALLOCATING_INTERNET_ADDRESS: An address is being applied for.
	// - PENDING_OFFLINE_INTERNET_ADDRESS: The address is being disabled.
	// - ONLINE: The address is in service.
	UsedMemory *float32 `json:"UsedMemory,omitempty" xml:"UsedMemory,omitempty"`
}

func (s DescribeTenantResponseBodyTenantTenantResourceMemory) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantTenantResourceMemory) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantTenantResourceMemory) SetTotalMemory(v float32) *DescribeTenantResponseBodyTenantTenantResourceMemory {
	s.TotalMemory = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResourceMemory) SetUnitMemory(v float32) *DescribeTenantResponseBodyTenantTenantResourceMemory {
	s.UnitMemory = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantResourceMemory) SetUsedMemory(v float32) *DescribeTenantResponseBodyTenantTenantResourceMemory {
	s.UsedMemory = &v
	return s
}

type DescribeTenantResponseBodyTenantTenantZones struct {
	// 是否允许开启读写分离地址
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The intranet port for accessing the tenant.
	TenantZoneId       *string                                                          `json:"TenantZoneId,omitempty" xml:"TenantZoneId,omitempty"`
	TenantZoneReplicas []*DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas `json:"TenantZoneReplicas,omitempty" xml:"TenantZoneReplicas,omitempty" type:"Repeated"`
	// The character set.
	TenantZoneRole *string `json:"TenantZoneRole,omitempty" xml:"TenantZoneRole,omitempty"`
}

func (s DescribeTenantResponseBodyTenantTenantZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantTenantZones) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantTenantZones) SetRegion(v string) *DescribeTenantResponseBodyTenantTenantZones {
	s.Region = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantZones) SetTenantZoneId(v string) *DescribeTenantResponseBodyTenantTenantZones {
	s.TenantZoneId = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantZones) SetTenantZoneReplicas(v []*DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas) *DescribeTenantResponseBodyTenantTenantZones {
	s.TenantZoneReplicas = v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantZones) SetTenantZoneRole(v string) *DescribeTenantResponseBodyTenantTenantZones {
	s.TenantZoneRole = &v
	return s
}

type DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas struct {
	FullCopyId      *int32  `json:"FullCopyId,omitempty" xml:"FullCopyId,omitempty"`
	LogicZoneName   *string `json:"LogicZoneName,omitempty" xml:"LogicZoneName,omitempty"`
	ReadOnlyCopyId  *string `json:"ReadOnlyCopyId,omitempty" xml:"ReadOnlyCopyId,omitempty"`
	ZoneCopyId      *int32  `json:"ZoneCopyId,omitempty" xml:"ZoneCopyId,omitempty"`
	ZoneNodes       *string `json:"ZoneNodes,omitempty" xml:"ZoneNodes,omitempty"`
	ZoneReplicaType *string `json:"ZoneReplicaType,omitempty" xml:"ZoneReplicaType,omitempty"`
}

func (s DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas) SetFullCopyId(v int32) *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas {
	s.FullCopyId = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas) SetLogicZoneName(v string) *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas {
	s.LogicZoneName = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas) SetReadOnlyCopyId(v string) *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas {
	s.ReadOnlyCopyId = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas) SetZoneCopyId(v int32) *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas {
	s.ZoneCopyId = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas) SetZoneNodes(v string) *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas {
	s.ZoneNodes = &v
	return s
}

func (s *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas) SetZoneReplicaType(v string) *DescribeTenantResponseBodyTenantTenantZonesTenantZoneReplicas {
	s.ZoneReplicaType = &v
	return s
}

type DescribeTenantResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantResponse) SetHeaders(v map[string]*string) *DescribeTenantResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantResponse) SetStatusCode(v int32) *DescribeTenantResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantResponse) SetBody(v *DescribeTenantResponseBody) *DescribeTenantResponse {
	s.Body = v
	return s
}

type DescribeTenantEncryptionRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TenantId   *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
}

func (s DescribeTenantEncryptionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantEncryptionRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantEncryptionRequest) SetInstanceId(v string) *DescribeTenantEncryptionRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantEncryptionRequest) SetPageNumber(v int64) *DescribeTenantEncryptionRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTenantEncryptionRequest) SetPageSize(v int64) *DescribeTenantEncryptionRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTenantEncryptionRequest) SetTenantId(v string) *DescribeTenantEncryptionRequest {
	s.TenantId = &v
	return s
}

func (s *DescribeTenantEncryptionRequest) SetTenantName(v string) *DescribeTenantEncryptionRequest {
	s.TenantName = &v
	return s
}

type DescribeTenantEncryptionResponseBody struct {
	RequestId         *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TenantEncryptions []*DescribeTenantEncryptionResponseBodyTenantEncryptions `json:"TenantEncryptions,omitempty" xml:"TenantEncryptions,omitempty" type:"Repeated"`
	TotalCount        *int32                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTenantEncryptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantEncryptionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantEncryptionResponseBody) SetRequestId(v string) *DescribeTenantEncryptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantEncryptionResponseBody) SetTenantEncryptions(v []*DescribeTenantEncryptionResponseBodyTenantEncryptions) *DescribeTenantEncryptionResponseBody {
	s.TenantEncryptions = v
	return s
}

func (s *DescribeTenantEncryptionResponseBody) SetTotalCount(v int32) *DescribeTenantEncryptionResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTenantEncryptionResponseBodyTenantEncryptions struct {
	EnableEncryption *bool   `json:"EnableEncryption,omitempty" xml:"EnableEncryption,omitempty"`
	EncryptionKeyId  *string `json:"EncryptionKeyId,omitempty" xml:"EncryptionKeyId,omitempty"`
	EncryptionType   *string `json:"EncryptionType,omitempty" xml:"EncryptionType,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId         *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	TenantMode       *string `json:"TenantMode,omitempty" xml:"TenantMode,omitempty"`
	TenantName       *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	TenantStatus     *string `json:"TenantStatus,omitempty" xml:"TenantStatus,omitempty"`
}

func (s DescribeTenantEncryptionResponseBodyTenantEncryptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantEncryptionResponseBodyTenantEncryptions) GoString() string {
	return s.String()
}

func (s *DescribeTenantEncryptionResponseBodyTenantEncryptions) SetEnableEncryption(v bool) *DescribeTenantEncryptionResponseBodyTenantEncryptions {
	s.EnableEncryption = &v
	return s
}

func (s *DescribeTenantEncryptionResponseBodyTenantEncryptions) SetEncryptionKeyId(v string) *DescribeTenantEncryptionResponseBodyTenantEncryptions {
	s.EncryptionKeyId = &v
	return s
}

func (s *DescribeTenantEncryptionResponseBodyTenantEncryptions) SetEncryptionType(v string) *DescribeTenantEncryptionResponseBodyTenantEncryptions {
	s.EncryptionType = &v
	return s
}

func (s *DescribeTenantEncryptionResponseBodyTenantEncryptions) SetStatus(v string) *DescribeTenantEncryptionResponseBodyTenantEncryptions {
	s.Status = &v
	return s
}

func (s *DescribeTenantEncryptionResponseBodyTenantEncryptions) SetTenantId(v string) *DescribeTenantEncryptionResponseBodyTenantEncryptions {
	s.TenantId = &v
	return s
}

func (s *DescribeTenantEncryptionResponseBodyTenantEncryptions) SetTenantMode(v string) *DescribeTenantEncryptionResponseBodyTenantEncryptions {
	s.TenantMode = &v
	return s
}

func (s *DescribeTenantEncryptionResponseBodyTenantEncryptions) SetTenantName(v string) *DescribeTenantEncryptionResponseBodyTenantEncryptions {
	s.TenantName = &v
	return s
}

func (s *DescribeTenantEncryptionResponseBodyTenantEncryptions) SetTenantStatus(v string) *DescribeTenantEncryptionResponseBodyTenantEncryptions {
	s.TenantStatus = &v
	return s
}

type DescribeTenantEncryptionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantEncryptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantEncryptionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantEncryptionResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantEncryptionResponse) SetHeaders(v map[string]*string) *DescribeTenantEncryptionResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantEncryptionResponse) SetStatusCode(v int32) *DescribeTenantEncryptionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantEncryptionResponse) SetBody(v *DescribeTenantEncryptionResponseBody) *DescribeTenantEncryptionResponse {
	s.Body = v
	return s
}

type DescribeTenantMetricsRequest struct {
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// 2021-06-13T15:40:43Z
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// {"name":"DescribeTenantMetrics","product":"OceanBasePro","version":"2019-09-01","path":"/","deprecated":0,"method":"POST|GET","protocol":"HTTP|HTTPS","hidden":0,"timeout":10000,"parameter_type":"Single","params":"[{\"name\":\"Action\",\"position\":\"Query\",\"required\":true,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"description\":\"\",\"example\":\"DescribeTenantMetrics\"},{\"name\":\"InstanceId\",\"position\":\"Body\",\"required\":true,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"ob317v4uif****\"},{\"name\":\"PageSize\",\"position\":\"Body\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"Integer\",\"title\":\"\",\"description\":\"\",\"example\":\"10\"},{\"name\":\"PageNumber\",\"position\":\"Body\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"Integer\",\"title\":\"\",\"description\":\"\",\"example\":\"1\"},{\"name\":\"TenantName\",\"position\":\"Body\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":true,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"pay_online\"},{\"name\":\"StartTime\",\"position\":\"Body\",\"required\":true,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"2021-06-13T15:40:43Z\"},{\"name\":\"EndTime\",\"position\":\"Body\",\"required\":true,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"2021-06-13T15:45:43Z\"},{\"name\":\"Metrics\",\"position\":\"Body\",\"required\":true,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"tps\"},{\"name\":\"TenantId\",\"position\":\"Body\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":true,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"tfafd34fs****\"},{\"name\":\"TenantIdList\",\"position\":\"Body\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"[tdak3nac****,tdakc42df****]\"}]","response_headers":"[]","response":"{\"type\":\"Object\",\"children\":[{\"name\":\"TotalCount\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"Integer\",\"title\":\"\",\"description\":\"\",\"example\":\"9\"},{\"name\":\"RequestId\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C\"},{\"name\":\"TenantMetrics\",\"required\":false,\"checkBlank\":false,\"visibility\":\"Public\",\"deprecated\":false,\"type\":\"String\",\"title\":\"\",\"description\":\"\",\"example\":\"\\\"Metrics\\\":[ {\\\"request_queue_rt\\\":0.0,\\\"TimeStamp\\\":\\\"2022-02-23T01:58:00Z\\\"}]\"}],\"title\":\"\",\"description\":\"\"}","errors":"{}"}
	Metrics *string `json:"Metrics,omitempty" xml:"Metrics,omitempty"`
	// The ID of the OceanBase cluster.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// tfafd34fs****
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Example 1
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// Deprecated
	TenantId     *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	TenantIdList *string `json:"TenantIdList,omitempty" xml:"TenantIdList,omitempty"`
	// Deprecated
	// 2021-06-13T15:45:43Z
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
}

func (s DescribeTenantMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantMetricsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantMetricsRequest) SetEndTime(v string) *DescribeTenantMetricsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTenantMetricsRequest) SetInstanceId(v string) *DescribeTenantMetricsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantMetricsRequest) SetMetrics(v string) *DescribeTenantMetricsRequest {
	s.Metrics = &v
	return s
}

func (s *DescribeTenantMetricsRequest) SetPageNumber(v int32) *DescribeTenantMetricsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTenantMetricsRequest) SetPageSize(v int32) *DescribeTenantMetricsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTenantMetricsRequest) SetStartTime(v string) *DescribeTenantMetricsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeTenantMetricsRequest) SetTenantId(v string) *DescribeTenantMetricsRequest {
	s.TenantId = &v
	return s
}

func (s *DescribeTenantMetricsRequest) SetTenantIdList(v string) *DescribeTenantMetricsRequest {
	s.TenantIdList = &v
	return s
}

func (s *DescribeTenantMetricsRequest) SetTenantName(v string) *DescribeTenantMetricsRequest {
	s.TenantName = &v
	return s
}

type DescribeTenantMetricsResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TenantMetrics *string `json:"TenantMetrics,omitempty" xml:"TenantMetrics,omitempty"`
	TotalCount    *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTenantMetricsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantMetricsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantMetricsResponseBody) SetRequestId(v string) *DescribeTenantMetricsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantMetricsResponseBody) SetTenantMetrics(v string) *DescribeTenantMetricsResponseBody {
	s.TenantMetrics = &v
	return s
}

func (s *DescribeTenantMetricsResponseBody) SetTotalCount(v int32) *DescribeTenantMetricsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTenantMetricsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantMetricsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantMetricsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantMetricsResponse) SetHeaders(v map[string]*string) *DescribeTenantMetricsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantMetricsResponse) SetStatusCode(v int32) *DescribeTenantMetricsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantMetricsResponse) SetBody(v *DescribeTenantMetricsResponseBody) *DescribeTenantMetricsResponse {
	s.Body = v
	return s
}

type DescribeTenantSecurityConfigsRequest struct {
	// The unique identifier of the security check.
	CheckId *string `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeTenantSecurityConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityConfigsRequest) SetCheckId(v string) *DescribeTenantSecurityConfigsRequest {
	s.CheckId = &v
	return s
}

func (s *DescribeTenantSecurityConfigsRequest) SetInstanceId(v string) *DescribeTenantSecurityConfigsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantSecurityConfigsRequest) SetTenantId(v string) *DescribeTenantSecurityConfigsRequest {
	s.TenantId = &v
	return s
}

type DescribeTenantSecurityConfigsResponseBody struct {
	// The list of parameters.
	Configs *DescribeTenantSecurityConfigsResponseBodyConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeTenantSecurityConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityConfigsResponseBody) SetConfigs(v *DescribeTenantSecurityConfigsResponseBodyConfigs) *DescribeTenantSecurityConfigsResponseBody {
	s.Configs = v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBody) SetRequestId(v string) *DescribeTenantSecurityConfigsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeTenantSecurityConfigsResponseBodyConfigs struct {
	// The unique identifier of the check.
	CheckId *string `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The time when the check was performed.
	CheckTime *string `json:"CheckTime,omitempty" xml:"CheckTime,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The check result.
	TenantSecurityConfigs []*DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs `json:"TenantSecurityConfigs,omitempty" xml:"TenantSecurityConfigs,omitempty" type:"Repeated"`
	// The total number of security check items.
	TotalCheckCount *int32 `json:"TotalCheckCount,omitempty" xml:"TotalCheckCount,omitempty"`
	// The total number of detected security risks.
	TotalRiskCount *int32 `json:"TotalRiskCount,omitempty" xml:"TotalRiskCount,omitempty"`
}

func (s DescribeTenantSecurityConfigsResponseBodyConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityConfigsResponseBodyConfigs) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigs) SetCheckId(v string) *DescribeTenantSecurityConfigsResponseBodyConfigs {
	s.CheckId = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigs) SetCheckTime(v string) *DescribeTenantSecurityConfigsResponseBodyConfigs {
	s.CheckTime = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigs) SetInstanceId(v string) *DescribeTenantSecurityConfigsResponseBodyConfigs {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigs) SetTenantSecurityConfigs(v []*DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs) *DescribeTenantSecurityConfigsResponseBodyConfigs {
	s.TenantSecurityConfigs = v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigs) SetTotalCheckCount(v int32) *DescribeTenantSecurityConfigsResponseBodyConfigs {
	s.TotalCheckCount = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigs) SetTotalRiskCount(v int32) *DescribeTenantSecurityConfigsResponseBodyConfigs {
	s.TotalRiskCount = &v
	return s
}

type DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs struct {
	// The number of detected tenant security risks.
	RiskCount *int32 `json:"RiskCount,omitempty" xml:"RiskCount,omitempty"`
	// The list of risks.
	SecurityConfigs []*DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs `json:"SecurityConfigs,omitempty" xml:"SecurityConfigs,omitempty" type:"Repeated"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The name of the tenant.
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
}

func (s DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs) SetRiskCount(v int32) *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs {
	s.RiskCount = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs) SetSecurityConfigs(v []*DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs) *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs {
	s.SecurityConfigs = v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs) SetTenantId(v string) *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs {
	s.TenantId = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs) SetTenantName(v string) *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigs {
	s.TenantName = &v
	return s
}

type DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs struct {
	// The name of the check item.
	ConfigDescription *string `json:"ConfigDescription,omitempty" xml:"ConfigDescription,omitempty"`
	// The group of the risk.
	ConfigGroup *string `json:"ConfigGroup,omitempty" xml:"ConfigGroup,omitempty"`
	// The name of the risk.
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	// Indicates whether the risk causes security issues.
	Risk *bool `json:"Risk,omitempty" xml:"Risk,omitempty"`
	// The description of the risk.
	RiskDescription *string `json:"RiskDescription,omitempty" xml:"RiskDescription,omitempty"`
}

func (s DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs) SetConfigDescription(v string) *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs {
	s.ConfigDescription = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs) SetConfigGroup(v string) *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs {
	s.ConfigGroup = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs) SetConfigName(v string) *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs {
	s.ConfigName = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs) SetRisk(v bool) *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs {
	s.Risk = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs) SetRiskDescription(v string) *DescribeTenantSecurityConfigsResponseBodyConfigsTenantSecurityConfigsSecurityConfigs {
	s.RiskDescription = &v
	return s
}

type DescribeTenantSecurityConfigsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantSecurityConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantSecurityConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityConfigsResponse) SetHeaders(v map[string]*string) *DescribeTenantSecurityConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantSecurityConfigsResponse) SetStatusCode(v int32) *DescribeTenantSecurityConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantSecurityConfigsResponse) SetBody(v *DescribeTenantSecurityConfigsResponseBody) *DescribeTenantSecurityConfigsResponse {
	s.Body = v
	return s
}

type DescribeTenantSecurityIpGroupsRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeTenantSecurityIpGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityIpGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityIpGroupsRequest) SetInstanceId(v string) *DescribeTenantSecurityIpGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantSecurityIpGroupsRequest) SetTenantId(v string) *DescribeTenantSecurityIpGroupsRequest {
	s.TenantId = &v
	return s
}

type DescribeTenantSecurityIpGroupsResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of the whitelist groups.
	SecurityIpGroups []*DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups `json:"SecurityIpGroups,omitempty" xml:"SecurityIpGroups,omitempty" type:"Repeated"`
	// The total number of the whitelist groups.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTenantSecurityIpGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityIpGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityIpGroupsResponseBody) SetRequestId(v string) *DescribeTenantSecurityIpGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantSecurityIpGroupsResponseBody) SetSecurityIpGroups(v []*DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups) *DescribeTenantSecurityIpGroupsResponseBody {
	s.SecurityIpGroups = v
	return s
}

func (s *DescribeTenantSecurityIpGroupsResponseBody) SetTotalCount(v int32) *DescribeTenantSecurityIpGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups struct {
	// The group name.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	// The whitelist group type.
	// - instance: the whitelist group from the cluster.
	// - tenant: the whitelist group of the current tenant.
	SecurityIpGroupType *string `json:"SecurityIpGroupType,omitempty" xml:"SecurityIpGroupType,omitempty"`
	// The whitelist of IP addresses. It is a string separated by commas, and each object is an IP string or a CIDR block.
	SecurityIps *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups) SetSecurityIpGroupName(v string) *DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups {
	s.SecurityIpGroupName = &v
	return s
}

func (s *DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups) SetSecurityIpGroupType(v string) *DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups {
	s.SecurityIpGroupType = &v
	return s
}

func (s *DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups) SetSecurityIps(v string) *DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups {
	s.SecurityIps = &v
	return s
}

func (s *DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups) SetTenantId(v string) *DescribeTenantSecurityIpGroupsResponseBodySecurityIpGroups {
	s.TenantId = &v
	return s
}

type DescribeTenantSecurityIpGroupsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantSecurityIpGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantSecurityIpGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantSecurityIpGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantSecurityIpGroupsResponse) SetHeaders(v map[string]*string) *DescribeTenantSecurityIpGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantSecurityIpGroupsResponse) SetStatusCode(v int32) *DescribeTenantSecurityIpGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantSecurityIpGroupsResponse) SetBody(v *DescribeTenantSecurityIpGroupsResponseBody) *DescribeTenantSecurityIpGroupsResponse {
	s.Body = v
	return s
}

type DescribeTenantTagsRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The tags.
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The JSON string of the tenant ID.
	TenantIds *string `json:"TenantIds,omitempty" xml:"TenantIds,omitempty"`
}

func (s DescribeTenantTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantTagsRequest) SetInstanceId(v string) *DescribeTenantTagsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantTagsRequest) SetTags(v string) *DescribeTenantTagsRequest {
	s.Tags = &v
	return s
}

func (s *DescribeTenantTagsRequest) SetTenantIds(v string) *DescribeTenantTagsRequest {
	s.TenantIds = &v
	return s
}

type DescribeTenantTagsResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of tags.
	TagResources []*DescribeTenantTagsResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s DescribeTenantTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantTagsResponseBody) SetRequestId(v string) *DescribeTenantTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantTagsResponseBody) SetTagResources(v []*DescribeTenantTagsResponseBodyTagResources) *DescribeTenantTagsResponseBody {
	s.TagResources = v
	return s
}

type DescribeTenantTagsResponseBodyTagResources struct {
	// The resource ID.
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag of the resource.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s DescribeTenantTagsResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantTagsResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *DescribeTenantTagsResponseBodyTagResources) SetResourceId(v string) *DescribeTenantTagsResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *DescribeTenantTagsResponseBodyTagResources) SetResourceType(v string) *DescribeTenantTagsResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *DescribeTenantTagsResponseBodyTagResources) SetTag(v string) *DescribeTenantTagsResponseBodyTagResources {
	s.Tag = &v
	return s
}

type DescribeTenantTagsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantTagsResponse) SetHeaders(v map[string]*string) *DescribeTenantTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantTagsResponse) SetStatusCode(v int32) *DescribeTenantTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantTagsResponse) SetBody(v *DescribeTenantTagsResponseBody) *DescribeTenantTagsResponse {
	s.Body = v
	return s
}

type DescribeTenantUserRolesRequest struct {
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeTenantUserRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantUserRolesRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantUserRolesRequest) SetTenantId(v string) *DescribeTenantUserRolesRequest {
	s.TenantId = &v
	return s
}

type DescribeTenantUserRolesResponseBody struct {
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Role      []*string `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s DescribeTenantUserRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantUserRolesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantUserRolesResponseBody) SetRequestId(v string) *DescribeTenantUserRolesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantUserRolesResponseBody) SetRole(v []*string) *DescribeTenantUserRolesResponseBody {
	s.Role = v
	return s
}

type DescribeTenantUserRolesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantUserRolesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantUserRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantUserRolesResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantUserRolesResponse) SetHeaders(v map[string]*string) *DescribeTenantUserRolesResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantUserRolesResponse) SetStatusCode(v int32) *DescribeTenantUserRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantUserRolesResponse) SetBody(v *DescribeTenantUserRolesResponseBody) *DescribeTenantUserRolesResponse {
	s.Body = v
	return s
}

type DescribeTenantUsersRequest struct {
	// The database privileges of the account.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The return result of the request.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The return result of the request.
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The return result of the request.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The operation that you want to perform.
	// Set the value to **DescribeTenantUsers**.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeTenantUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantUsersRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantUsersRequest) SetPageNumber(v int32) *DescribeTenantUsersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTenantUsersRequest) SetPageSize(v int32) *DescribeTenantUsersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTenantUsersRequest) SetSearchKey(v string) *DescribeTenantUsersRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeTenantUsersRequest) SetTenantId(v string) *DescribeTenantUsersRequest {
	s.TenantId = &v
	return s
}

func (s *DescribeTenantUsersRequest) SetUserName(v string) *DescribeTenantUsersRequest {
	s.UserName = &v
	return s
}

type DescribeTenantUsersResponseBody struct {
	// The name of the database account.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The type of the database account. Valid values:
	// - Admin: the super administrator account.
	// - NORMAL: a general account.
	TenantUsers []*DescribeTenantUsersResponseBodyTenantUsers `json:"TenantUsers,omitempty" xml:"TenantUsers,omitempty" type:"Repeated"`
	// The role of the account.
	// In Oracle mode, a role is a schema-level role. Valid values:
	// - ReadWrite: a role that has the read and write privileges, including: CREATE TABLE, CREATE VIEW, CREATE PROCEDURE, CREATE SYNONYM, CREATE SEQUENCE, CREATE TRIGGER, CREATE TYPE, CREATE SESSION, EXECUTE ANY PROCEDURE, CREATE ANY OUTLINE, ALTER ANY OUTLINE, DROP ANY OUTLINE, CREATE ANY PROCEDURE, ALTER ANY PROCEDURE, DROP ANY PROCEDURE, CREATE ANY SEQUENCE, ALTER ANY SEQUENCE, DROP ANY SEQUENCE, CREATE ANY TYPE, ALTER ANY TYPE, DROP ANY TYPE, SYSKM, CREATE ANY TRIGGER, ALTER ANY TRIGGER, DROP ANY TRIGGER, CREATE PROFILE, ALTER PROFILE, and DROP PROFILE.
	// - ReadOnly: a role that has only the read-only privilege SELECT.
	// In MySQL mode, a role is a database-level role. Valid values:
	// - ReadWrite: a role that has the read and write privileges, namely ALL PRIVILEGES.
	// - ReadOnly: a role that has only the read-only privilege SELECT.
	// - DDL: a role that has the DDL privileges such as CREATE, DROP, ALTER, SHOW VIEW, and CREATE VIEW.
	// - DML: a role that has the DML privileges such as SELECT, INSERT, UPDATE, DELETE, and SHOW VIEW.
	//
	// > <br>By default, an Oracle account has the read and write privileges on its own schema, which are not listed here.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTenantUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantUsersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantUsersResponseBody) SetRequestId(v string) *DescribeTenantUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantUsersResponseBody) SetTenantUsers(v []*DescribeTenantUsersResponseBodyTenantUsers) *DescribeTenantUsersResponseBody {
	s.TenantUsers = v
	return s
}

func (s *DescribeTenantUsersResponseBody) SetTotalCount(v int32) *DescribeTenantUsersResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTenantUsersResponseBodyTenantUsers struct {
	Databases   []*DescribeTenantUsersResponseBodyTenantUsersDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	Description *string                                                `json:"Description,omitempty" xml:"Description,omitempty"`
	// 所属集群Id
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// 所属租户Id
	TenantId   *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UserName   *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	UserStatus *string `json:"UserStatus,omitempty" xml:"UserStatus,omitempty"`
	UserType   *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s DescribeTenantUsersResponseBodyTenantUsers) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantUsersResponseBodyTenantUsers) GoString() string {
	return s.String()
}

func (s *DescribeTenantUsersResponseBodyTenantUsers) SetDatabases(v []*DescribeTenantUsersResponseBodyTenantUsersDatabases) *DescribeTenantUsersResponseBodyTenantUsers {
	s.Databases = v
	return s
}

func (s *DescribeTenantUsersResponseBodyTenantUsers) SetDescription(v string) *DescribeTenantUsersResponseBodyTenantUsers {
	s.Description = &v
	return s
}

func (s *DescribeTenantUsersResponseBodyTenantUsers) SetInstanceId(v string) *DescribeTenantUsersResponseBodyTenantUsers {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantUsersResponseBodyTenantUsers) SetTenantId(v string) *DescribeTenantUsersResponseBodyTenantUsers {
	s.TenantId = &v
	return s
}

func (s *DescribeTenantUsersResponseBodyTenantUsers) SetUserName(v string) *DescribeTenantUsersResponseBodyTenantUsers {
	s.UserName = &v
	return s
}

func (s *DescribeTenantUsersResponseBodyTenantUsers) SetUserStatus(v string) *DescribeTenantUsersResponseBodyTenantUsers {
	s.UserStatus = &v
	return s
}

func (s *DescribeTenantUsersResponseBodyTenantUsers) SetUserType(v string) *DescribeTenantUsersResponseBodyTenantUsers {
	s.UserType = &v
	return s
}

type DescribeTenantUsersResponseBodyTenantUsersDatabases struct {
	Database   *string `json:"Database,omitempty" xml:"Database,omitempty"`
	Privileges *string `json:"Privileges,omitempty" xml:"Privileges,omitempty"`
	Role       *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Table      *string `json:"Table,omitempty" xml:"Table,omitempty"`
}

func (s DescribeTenantUsersResponseBodyTenantUsersDatabases) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantUsersResponseBodyTenantUsersDatabases) GoString() string {
	return s.String()
}

func (s *DescribeTenantUsersResponseBodyTenantUsersDatabases) SetDatabase(v string) *DescribeTenantUsersResponseBodyTenantUsersDatabases {
	s.Database = &v
	return s
}

func (s *DescribeTenantUsersResponseBodyTenantUsersDatabases) SetPrivileges(v string) *DescribeTenantUsersResponseBodyTenantUsersDatabases {
	s.Privileges = &v
	return s
}

func (s *DescribeTenantUsersResponseBodyTenantUsersDatabases) SetRole(v string) *DescribeTenantUsersResponseBodyTenantUsersDatabases {
	s.Role = &v
	return s
}

func (s *DescribeTenantUsersResponseBodyTenantUsersDatabases) SetTable(v string) *DescribeTenantUsersResponseBodyTenantUsersDatabases {
	s.Table = &v
	return s
}

type DescribeTenantUsersResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantUsersResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantUsersResponse) SetHeaders(v map[string]*string) *DescribeTenantUsersResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantUsersResponse) SetStatusCode(v int32) *DescribeTenantUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantUsersResponse) SetBody(v *DescribeTenantUsersResponseBody) *DescribeTenantUsersResponse {
	s.Body = v
	return s
}

type DescribeTenantZonesReadRequest struct {
	// The zone information of the tenant.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The return result of the request.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeTenantZonesReadRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantZonesReadRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantZonesReadRequest) SetInstanceId(v string) *DescribeTenantZonesReadRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantZonesReadRequest) SetTenantId(v string) *DescribeTenantZonesReadRequest {
	s.TenantId = &v
	return s
}

type DescribeTenantZonesReadResponseBody struct {
	// Indicates whether a read-only connection needs to be created for the zone.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The request ID.
	TenantZones []*DescribeTenantZonesReadResponseBodyTenantZones `json:"TenantZones,omitempty" xml:"TenantZones,omitempty" type:"Repeated"`
}

func (s DescribeTenantZonesReadResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantZonesReadResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantZonesReadResponseBody) SetRequestId(v string) *DescribeTenantZonesReadResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantZonesReadResponseBody) SetTenantZones(v []*DescribeTenantZonesReadResponseBodyTenantZones) *DescribeTenantZonesReadResponseBody {
	s.TenantZones = v
	return s
}

type DescribeTenantZonesReadResponseBodyTenantZones struct {
	// Example 1
	IsElectable *bool   `json:"IsElectable,omitempty" xml:"IsElectable,omitempty"`
	IsPrimary   *bool   `json:"IsPrimary,omitempty" xml:"IsPrimary,omitempty"`
	IsReadable  *string `json:"IsReadable,omitempty" xml:"IsReadable,omitempty"`
	Zone        *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s DescribeTenantZonesReadResponseBodyTenantZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantZonesReadResponseBodyTenantZones) GoString() string {
	return s.String()
}

func (s *DescribeTenantZonesReadResponseBodyTenantZones) SetIsElectable(v bool) *DescribeTenantZonesReadResponseBodyTenantZones {
	s.IsElectable = &v
	return s
}

func (s *DescribeTenantZonesReadResponseBodyTenantZones) SetIsPrimary(v bool) *DescribeTenantZonesReadResponseBodyTenantZones {
	s.IsPrimary = &v
	return s
}

func (s *DescribeTenantZonesReadResponseBodyTenantZones) SetIsReadable(v string) *DescribeTenantZonesReadResponseBodyTenantZones {
	s.IsReadable = &v
	return s
}

func (s *DescribeTenantZonesReadResponseBodyTenantZones) SetZone(v string) *DescribeTenantZonesReadResponseBodyTenantZones {
	s.Zone = &v
	return s
}

type DescribeTenantZonesReadResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantZonesReadResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantZonesReadResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantZonesReadResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantZonesReadResponse) SetHeaders(v map[string]*string) *DescribeTenantZonesReadResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantZonesReadResponse) SetStatusCode(v int32) *DescribeTenantZonesReadResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantZonesReadResponse) SetBody(v *DescribeTenantZonesReadResponseBody) *DescribeTenantZonesReadResponse {
	s.Body = v
	return s
}

type DescribeTenantsRequest struct {
	// The number of used disks of the tenant.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// You can call this operation to query the tenants in an OceanBase cluster.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The primary zone of the tenant.
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// Alibaba Cloud CLI
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The information of tenants.
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
}

func (s DescribeTenantsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTenantsRequest) SetInstanceId(v string) *DescribeTenantsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTenantsRequest) SetPageNumber(v int32) *DescribeTenantsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTenantsRequest) SetPageSize(v int32) *DescribeTenantsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTenantsRequest) SetSearchKey(v string) *DescribeTenantsRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeTenantsRequest) SetTenantId(v string) *DescribeTenantsRequest {
	s.TenantId = &v
	return s
}

func (s *DescribeTenantsRequest) SetTenantName(v string) *DescribeTenantsRequest {
	s.TenantName = &v
	return s
}

type DescribeTenantsResponseBody struct {
	// The ID of the tenant.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the OceanBase cluster.
	Tenants []*DescribeTenantsResponseBodyTenants `json:"Tenants,omitempty" xml:"Tenants,omitempty" type:"Repeated"`
	// The total memory size of the tenant, in GB.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTenantsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTenantsResponseBody) SetRequestId(v string) *DescribeTenantsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTenantsResponseBody) SetTenants(v []*DescribeTenantsResponseBodyTenants) *DescribeTenantsResponseBody {
	s.Tenants = v
	return s
}

func (s *DescribeTenantsResponseBody) SetTotalCount(v int32) *DescribeTenantsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTenantsResponseBodyTenants struct {
	Charset   *string `json:"Charset,omitempty" xml:"Charset,omitempty"`
	Collation *string `json:"Collation,omitempty" xml:"Collation,omitempty"`
	// The total number of CPU cores of the tenant.
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The number of CPU cores in each resource unit of the tenant.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The search keyword.
	DeployMode *string `json:"DeployMode,omitempty" xml:"DeployMode,omitempty"`
	// The name of the tenant.
	// It must start with a letter or an underscore (_), and contain 2 to 20 characters, which can be uppercase letters, lowercase letters, digits, and underscores (_).  It cannot be set to sys.
	DeployType *string `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	// Example 1
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnableReadOnlyReplica *bool   `json:"EnableReadOnlyReplica,omitempty" xml:"EnableReadOnlyReplica,omitempty"`
	// The number of the page to return.
	// Start value: 1
	// - Default value: 1
	Mem *int32 `json:"Mem,omitempty" xml:"Mem,omitempty"`
	// The return result of the request.
	PrimaryZone *string `json:"PrimaryZone,omitempty" xml:"PrimaryZone,omitempty"`
	// The status of the tenant.  <br>
	// - PENDING_CREATE: The tenant is being created.
	// - RESTORE: The tenant is being recovered.
	// - ONLINE: The tenant is running.
	// - SPEC_MODIFYING: The specification of the tenant is being modified.
	// ALLOCATING_INTERNET_ADDRESS: An Internet address is being allocated.
	// PENDING_OFFLINE_INTERNET_ADDRESS: The Internet address is being disabled.
	// - PRIMARY_ZONE_MODIFYING: The tenant is switching to a new primary zone.
	// - PARAMETER_MODIFYING: Parameters are being modified.
	// - WHITE_LIST_MODIFYING: The whitelist is being modified.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// You can call this operation to query the tenants in an OceanBase cluster.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// {
	//     "TotalCount": 1,
	//     "RequestId": "EE205C00-30E4-XXXX-XXXX-87E3A8A2AA0C",
	//     "Tenants": [
	//         {
	//             "VpcId": "vpc-bp1d2q3mhg9i23ofi****",
	//             "Status": "ONLINE",
	//             "PrimaryZone": "cn-hangzhou-i",
	//             "DeployType": "multiple",
	//             "DeployMode": "1-1-1",
	//             "CreateTime": "2021-09-17 15:52:17.0",
	//             "TenantName": "pay_online",
	//             "Mem": 20,
	//             "Cpu": 10,
	//             "Description": "PayCore business database",
	//             "TenantMode": "Oracle",
	//             "TenantId": "t33h8y08k****",
	//             "UnitCpu": 5,
	//             "UnitMem": 10,
	//             "UnitNum": 2,
	//             "UsedDiskSize": 10
	//         }
	//     ]
	// }
	TenantMode *string `json:"TenantMode,omitempty" xml:"TenantMode,omitempty"`
	// The information of tenants.
	TenantName   *string  `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	UnitCpu      *int32   `json:"UnitCpu,omitempty" xml:"UnitCpu,omitempty"`
	UnitMem      *int32   `json:"UnitMem,omitempty" xml:"UnitMem,omitempty"`
	UnitNum      *int32   `json:"UnitNum,omitempty" xml:"UnitNum,omitempty"`
	UsedDiskSize *float64 `json:"UsedDiskSize,omitempty" xml:"UsedDiskSize,omitempty"`
	// The time when the tenant was created.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeTenantsResponseBodyTenants) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantsResponseBodyTenants) GoString() string {
	return s.String()
}

func (s *DescribeTenantsResponseBodyTenants) SetCharset(v string) *DescribeTenantsResponseBodyTenants {
	s.Charset = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetCollation(v string) *DescribeTenantsResponseBodyTenants {
	s.Collation = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetCpu(v int32) *DescribeTenantsResponseBodyTenants {
	s.Cpu = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetCreateTime(v string) *DescribeTenantsResponseBodyTenants {
	s.CreateTime = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetDeployMode(v string) *DescribeTenantsResponseBodyTenants {
	s.DeployMode = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetDeployType(v string) *DescribeTenantsResponseBodyTenants {
	s.DeployType = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetDescription(v string) *DescribeTenantsResponseBodyTenants {
	s.Description = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetEnableReadOnlyReplica(v bool) *DescribeTenantsResponseBodyTenants {
	s.EnableReadOnlyReplica = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetMem(v int32) *DescribeTenantsResponseBodyTenants {
	s.Mem = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetPrimaryZone(v string) *DescribeTenantsResponseBodyTenants {
	s.PrimaryZone = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetStatus(v string) *DescribeTenantsResponseBodyTenants {
	s.Status = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetTenantId(v string) *DescribeTenantsResponseBodyTenants {
	s.TenantId = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetTenantMode(v string) *DescribeTenantsResponseBodyTenants {
	s.TenantMode = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetTenantName(v string) *DescribeTenantsResponseBodyTenants {
	s.TenantName = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetUnitCpu(v int32) *DescribeTenantsResponseBodyTenants {
	s.UnitCpu = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetUnitMem(v int32) *DescribeTenantsResponseBodyTenants {
	s.UnitMem = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetUnitNum(v int32) *DescribeTenantsResponseBodyTenants {
	s.UnitNum = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetUsedDiskSize(v float64) *DescribeTenantsResponseBodyTenants {
	s.UsedDiskSize = &v
	return s
}

func (s *DescribeTenantsResponseBodyTenants) SetVpcId(v string) *DescribeTenantsResponseBodyTenants {
	s.VpcId = &v
	return s
}

type DescribeTenantsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTenantsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTenantsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTenantsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTenantsResponse) SetHeaders(v map[string]*string) *DescribeTenantsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTenantsResponse) SetStatusCode(v int32) *DescribeTenantsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTenantsResponse) SetBody(v *DescribeTenantsResponseBody) *DescribeTenantsResponse {
	s.Body = v
	return s
}

type DescribeTimeZonesResponseBody struct {
	// DescribeTimeZones
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The description of the time zone.
	TimeZones *DescribeTimeZonesResponseBodyTimeZones `json:"TimeZones,omitempty" xml:"TimeZones,omitempty" type:"Struct"`
}

func (s DescribeTimeZonesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTimeZonesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTimeZonesResponseBody) SetRequestId(v string) *DescribeTimeZonesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTimeZonesResponseBody) SetTimeZones(v *DescribeTimeZonesResponseBodyTimeZones) *DescribeTimeZonesResponseBody {
	s.TimeZones = v
	return s
}

type DescribeTimeZonesResponseBodyTimeZones struct {
	Default *string `json:"Default,omitempty" xml:"Default,omitempty"`
	// The list of time zones.
	List []*DescribeTimeZonesResponseBodyTimeZonesList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
}

func (s DescribeTimeZonesResponseBodyTimeZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeTimeZonesResponseBodyTimeZones) GoString() string {
	return s.String()
}

func (s *DescribeTimeZonesResponseBodyTimeZones) SetDefault(v string) *DescribeTimeZonesResponseBodyTimeZones {
	s.Default = &v
	return s
}

func (s *DescribeTimeZonesResponseBodyTimeZones) SetList(v []*DescribeTimeZonesResponseBodyTimeZonesList) *DescribeTimeZonesResponseBodyTimeZones {
	s.List = v
	return s
}

type DescribeTimeZonesResponseBodyTimeZonesList struct {
	// Example 1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The operation that you want to perform.
	// Set the value to **DescribeTimeZones**.
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s DescribeTimeZonesResponseBodyTimeZonesList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTimeZonesResponseBodyTimeZonesList) GoString() string {
	return s.String()
}

func (s *DescribeTimeZonesResponseBodyTimeZonesList) SetDescription(v string) *DescribeTimeZonesResponseBodyTimeZonesList {
	s.Description = &v
	return s
}

func (s *DescribeTimeZonesResponseBodyTimeZonesList) SetTimeZone(v string) *DescribeTimeZonesResponseBodyTimeZonesList {
	s.TimeZone = &v
	return s
}

type DescribeTimeZonesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTimeZonesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTimeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTimeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeTimeZonesResponse) SetHeaders(v map[string]*string) *DescribeTimeZonesResponse {
	s.Headers = v
	return s
}

func (s *DescribeTimeZonesResponse) SetStatusCode(v int32) *DescribeTimeZonesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTimeZonesResponse) SetBody(v *DescribeTimeZonesResponseBody) *DescribeTimeZonesResponse {
	s.Body = v
	return s
}

type DescribeTopSQLListRequest struct {
	// The number of block index cache hits.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The SQL type.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The average number of logical reads of the SQL statement during the specified period of time.
	// The value covers the numbers of reads of different caches and the number of disk I/Os. It is an important metric for measuring the SQL filtering performance.
	//
	// > <br> A higher ratio of the number of logical reads to the number of returned rows indicates poorer filtering performance. General causes include non-standard content written by SQL statements, non-standard table indexes created, and non-standard SQL execution plans.
	FilterCondition map[string]interface{} `json:"FilterCondition,omitempty" xml:"FilterCondition,omitempty"`
	// The number of failures.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The queuing time, in ms.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of row cache hits.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The I/O wait time, in ms.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The number of retries.
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// SQLID.
	SearchParameter *string `json:"SearchParameter,omitempty" xml:"SearchParameter,omitempty"`
	// The IP address of the client.
	SearchRule *string `json:"SearchRule,omitempty" xml:"SearchRule,omitempty"`
	// The number of Bloom filter cache hits.
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	// The number of rows read from the disk.
	SortColumn *string `json:"SortColumn,omitempty" xml:"SortColumn,omitempty"`
	// The list of top SQL statements.
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// The maximum response time, in ms.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The average CPU time, in ms.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeTopSQLListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopSQLListRequest) GoString() string {
	return s.String()
}

func (s *DescribeTopSQLListRequest) SetDbName(v string) *DescribeTopSQLListRequest {
	s.DbName = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetEndTime(v string) *DescribeTopSQLListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetFilterCondition(v map[string]interface{}) *DescribeTopSQLListRequest {
	s.FilterCondition = v
	return s
}

func (s *DescribeTopSQLListRequest) SetNodeIp(v string) *DescribeTopSQLListRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetPageNumber(v int32) *DescribeTopSQLListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetPageSize(v int32) *DescribeTopSQLListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetSQLId(v string) *DescribeTopSQLListRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetSearchKeyWord(v string) *DescribeTopSQLListRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetSearchParameter(v string) *DescribeTopSQLListRequest {
	s.SearchParameter = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetSearchRule(v string) *DescribeTopSQLListRequest {
	s.SearchRule = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetSearchValue(v string) *DescribeTopSQLListRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetSortColumn(v string) *DescribeTopSQLListRequest {
	s.SortColumn = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetSortOrder(v string) *DescribeTopSQLListRequest {
	s.SortOrder = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetStartTime(v string) *DescribeTopSQLListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeTopSQLListRequest) SetTenantId(v string) *DescribeTopSQLListRequest {
	s.TenantId = &v
	return s
}

type DescribeTopSQLListShrinkRequest struct {
	// The number of block index cache hits.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The SQL type.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The average number of logical reads of the SQL statement during the specified period of time.
	// The value covers the numbers of reads of different caches and the number of disk I/Os. It is an important metric for measuring the SQL filtering performance.
	//
	// > <br> A higher ratio of the number of logical reads to the number of returned rows indicates poorer filtering performance. General causes include non-standard content written by SQL statements, non-standard table indexes created, and non-standard SQL execution plans.
	FilterConditionShrink *string `json:"FilterCondition,omitempty" xml:"FilterCondition,omitempty"`
	// The number of failures.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The queuing time, in ms.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of row cache hits.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The I/O wait time, in ms.
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The number of retries.
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// SQLID.
	SearchParameter *string `json:"SearchParameter,omitempty" xml:"SearchParameter,omitempty"`
	// The IP address of the client.
	SearchRule *string `json:"SearchRule,omitempty" xml:"SearchRule,omitempty"`
	// The number of Bloom filter cache hits.
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	// The number of rows read from the disk.
	SortColumn *string `json:"SortColumn,omitempty" xml:"SortColumn,omitempty"`
	// The list of top SQL statements.
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// The maximum response time, in ms.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The average CPU time, in ms.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DescribeTopSQLListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopSQLListShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeTopSQLListShrinkRequest) SetDbName(v string) *DescribeTopSQLListShrinkRequest {
	s.DbName = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetEndTime(v string) *DescribeTopSQLListShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetFilterConditionShrink(v string) *DescribeTopSQLListShrinkRequest {
	s.FilterConditionShrink = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetNodeIp(v string) *DescribeTopSQLListShrinkRequest {
	s.NodeIp = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetPageNumber(v int32) *DescribeTopSQLListShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetPageSize(v int32) *DescribeTopSQLListShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetSQLId(v string) *DescribeTopSQLListShrinkRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetSearchKeyWord(v string) *DescribeTopSQLListShrinkRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetSearchParameter(v string) *DescribeTopSQLListShrinkRequest {
	s.SearchParameter = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetSearchRule(v string) *DescribeTopSQLListShrinkRequest {
	s.SearchRule = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetSearchValue(v string) *DescribeTopSQLListShrinkRequest {
	s.SearchValue = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetSortColumn(v string) *DescribeTopSQLListShrinkRequest {
	s.SortColumn = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetSortOrder(v string) *DescribeTopSQLListShrinkRequest {
	s.SortOrder = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetStartTime(v string) *DescribeTopSQLListShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeTopSQLListShrinkRequest) SetTenantId(v string) *DescribeTopSQLListShrinkRequest {
	s.TenantId = &v
	return s
}

type DescribeTopSQLListResponseBody struct {
	// Alibaba Cloud CLI
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The I/O wait time, in ms.
	TopSQLList []*DescribeTopSQLListResponseBodyTopSQLList `json:"TopSQLList,omitempty" xml:"TopSQLList,omitempty" type:"Repeated"`
	// It is an online CLI tool that allows you to quickly retrieve and debug APIs. It can dynamically generate executable SDK code samples.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTopSQLListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopSQLListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTopSQLListResponseBody) SetRequestId(v string) *DescribeTopSQLListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTopSQLListResponseBody) SetTopSQLList(v []*DescribeTopSQLListResponseBodyTopSQLList) *DescribeTopSQLListResponseBody {
	s.TopSQLList = v
	return s
}

func (s *DescribeTopSQLListResponseBody) SetTotalCount(v int64) *DescribeTopSQLListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTopSQLListResponseBodyTopSQLList struct {
	// The internal wait time, in ms.
	AffectedRows *int64 `json:"AffectedRows,omitempty" xml:"AffectedRows,omitempty"`
	// The wait time in concurrent execution, in ms.
	AppWaitTime *float32 `json:"AppWaitTime,omitempty" xml:"AppWaitTime,omitempty"`
	// The average CPU time, in ms.
	BlockCacheHit *int64 `json:"BlockCacheHit,omitempty" xml:"BlockCacheHit,omitempty"`
	// $.parameters[16].schema.example
	BlockIndexCacheHit *int64 `json:"BlockIndexCacheHit,omitempty" xml:"BlockIndexCacheHit,omitempty"`
	// $.parameters[14].schema.enumValueTitles
	BloomFilterCacheHit *int64 `json:"BloomFilterCacheHit,omitempty" xml:"BloomFilterCacheHit,omitempty"`
	// $.parameters[14].schema.description
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The number of rows returned.
	ConcurrencyWaitTime *float32 `json:"ConcurrencyWaitTime,omitempty" xml:"ConcurrencyWaitTime,omitempty"`
	// The maximum CPU time, in ms.
	CpuTime *float32 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The number of remote plans.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The number of rows to return on each page.
	// - Maximum value: 100
	// - Default value: 10
	DecodeTime *float32 `json:"DecodeTime,omitempty" xml:"DecodeTime,omitempty"`
	// The IP address of the client.
	DiskRead *int64 `json:"DiskRead,omitempty" xml:"DiskRead,omitempty"`
	// The sorting rule.
	ElapsedTime *float32 `json:"ElapsedTime,omitempty" xml:"ElapsedTime,omitempty"`
	// The number of rows read from the disk.
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// The operation that you want to perform.
	// Set the value to **DescribeTopSQLList**.
	ExecPerSecond *float32 `json:"ExecPerSecond,omitempty" xml:"ExecPerSecond,omitempty"`
	// The number of rows read from the memory.
	ExecuteTime *float32 `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// The number of executions per second.
	Executions *int64 `json:"Executions,omitempty" xml:"Executions,omitempty"`
	// $.parameters[12].schema.description
	FailTimes *int64 `json:"FailTimes,omitempty" xml:"FailTimes,omitempty"`
	// The queuing time, in ms.
	GetPlanTime *float32 `json:"GetPlanTime,omitempty" xml:"GetPlanTime,omitempty"`
	// $.parameters[15].schema.example
	IOWaitTime *float32 `json:"IOWaitTime,omitempty" xml:"IOWaitTime,omitempty"`
	// The name of the database.
	Key *int64 `json:"Key,omitempty" xml:"Key,omitempty"`
	// You can call this operation to query SQL execution performance data collected by the diagnostic system.
	LogicalRead *int64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// SQLID.
	MaxCpuTime *float32 `json:"MaxCpuTime,omitempty" xml:"MaxCpuTime,omitempty"`
	// The sequence number of the returned SQL statement.
	MaxElapsedTime *float32 `json:"MaxElapsedTime,omitempty" xml:"MaxElapsedTime,omitempty"`
	// The name of the database.
	MemstoreReadRowCount *int64 `json:"MemstoreReadRowCount,omitempty" xml:"MemstoreReadRowCount,omitempty"`
	// The total count.
	MissPlans *int64 `json:"MissPlans,omitempty" xml:"MissPlans,omitempty"`
	// The end time of the time range for querying TOP SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	NetWaitTime *float32 `json:"NetWaitTime,omitempty" xml:"NetWaitTime,omitempty"`
	// The username.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// $.parameters[12].schema.enumValueTitles
	QueueTime *float32 `json:"QueueTime,omitempty" xml:"QueueTime,omitempty"`
	// The start time of the time range for querying TOP SQL statements.
	// The value must be UTC time in the format of YYYY-MM-DDThh:mm:ssZ.
	RPCCount *int64 `json:"RPCCount,omitempty" xml:"RPCCount,omitempty"`
	// The return result of the request.
	RemotePlans *int64 `json:"RemotePlans,omitempty" xml:"RemotePlans,omitempty"`
	// $.parameters[13].schema.description
	RetryCount *int64 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// The wait event.
	ReturnRows *int64 `json:"ReturnRows,omitempty" xml:"ReturnRows,omitempty"`
	// ```
	// http(s)://[Endpoint]/?Action=DescribeTopSQLList
	// &TenantId=t2mr3oae0****
	// &StartTime=2021-06-13 15:40:43
	// &EndTime=2021-09-13 15:40:43
	// &DbName=testdb
	// &SearchKeyWord=update
	// &SearchParameter=cputime
	// &SearchRule=>
	// &SearchValue=0.01
	// &SQLId=8D6E84****0B8FB1823D199E2CA1****
	// &NodeIp=i-bp19y05uq6xpacyqnlrc
	// &PageNumber=1
	// &PageSize=10
	// &SortColumn=cputime
	// &SortOrder=desc
	// &Common request parameters
	// ```
	RowCacheHit *int64 `json:"RowCacheHit,omitempty" xml:"RowCacheHit,omitempty"`
	// $.parameters[13].schema.example
	SQLId *string `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	// The list of top SQL statements.
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// The request ID.
	SQLType *int64 `json:"SQLType,omitempty" xml:"SQLType,omitempty"`
	// The search keyword.
	ScheduleTime        *float32 `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	SsstoreReadRowCount *int64   `json:"SsstoreReadRowCount,omitempty" xml:"SsstoreReadRowCount,omitempty"`
	// -
	TotalWaitTime *float32 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// The number of Bloom filter cache hits.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeTopSQLListResponseBodyTopSQLList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopSQLListResponseBodyTopSQLList) GoString() string {
	return s.String()
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetAffectedRows(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.AffectedRows = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetAppWaitTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.AppWaitTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetBlockCacheHit(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.BlockCacheHit = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetBlockIndexCacheHit(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.BlockIndexCacheHit = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetBloomFilterCacheHit(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.BloomFilterCacheHit = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetClientIp(v string) *DescribeTopSQLListResponseBodyTopSQLList {
	s.ClientIp = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetConcurrencyWaitTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.ConcurrencyWaitTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetCpuTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.CpuTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetDbName(v string) *DescribeTopSQLListResponseBodyTopSQLList {
	s.DbName = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetDecodeTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.DecodeTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetDiskRead(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.DiskRead = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetElapsedTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.ElapsedTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetEvent(v string) *DescribeTopSQLListResponseBodyTopSQLList {
	s.Event = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetExecPerSecond(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.ExecPerSecond = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetExecuteTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetExecutions(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.Executions = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetFailTimes(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.FailTimes = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetGetPlanTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.GetPlanTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetIOWaitTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.IOWaitTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetKey(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.Key = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetLogicalRead(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.LogicalRead = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetMaxCpuTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.MaxCpuTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetMaxElapsedTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.MaxElapsedTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetMemstoreReadRowCount(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.MemstoreReadRowCount = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetMissPlans(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.MissPlans = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetNetWaitTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.NetWaitTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetNodeIp(v string) *DescribeTopSQLListResponseBodyTopSQLList {
	s.NodeIp = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetQueueTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.QueueTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetRPCCount(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.RPCCount = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetRemotePlans(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.RemotePlans = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetRetryCount(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.RetryCount = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetReturnRows(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.ReturnRows = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetRowCacheHit(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.RowCacheHit = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetSQLId(v string) *DescribeTopSQLListResponseBodyTopSQLList {
	s.SQLId = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetSQLText(v string) *DescribeTopSQLListResponseBodyTopSQLList {
	s.SQLText = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetSQLType(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.SQLType = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetScheduleTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.ScheduleTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetSsstoreReadRowCount(v int64) *DescribeTopSQLListResponseBodyTopSQLList {
	s.SsstoreReadRowCount = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetTotalWaitTime(v float32) *DescribeTopSQLListResponseBodyTopSQLList {
	s.TotalWaitTime = &v
	return s
}

func (s *DescribeTopSQLListResponseBodyTopSQLList) SetUserName(v string) *DescribeTopSQLListResponseBodyTopSQLList {
	s.UserName = &v
	return s
}

type DescribeTopSQLListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTopSQLListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTopSQLListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopSQLListResponse) GoString() string {
	return s.String()
}

func (s *DescribeTopSQLListResponse) SetHeaders(v map[string]*string) *DescribeTopSQLListResponse {
	s.Headers = v
	return s
}

func (s *DescribeTopSQLListResponse) SetStatusCode(v int32) *DescribeTopSQLListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTopSQLListResponse) SetBody(v *DescribeTopSQLListResponseBody) *DescribeTopSQLListResponse {
	s.Body = v
	return s
}

type DescribeZonesRequest struct {
	// The operation that you want to perform.
	// Set the value to **DescribeZones**.
	DeployType *string `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	// The deployment mode.
	Series *string `json:"Series,omitempty" xml:"Series,omitempty"`
}

func (s DescribeZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeZonesRequest) SetDeployType(v string) *DescribeZonesRequest {
	s.DeployType = &v
	return s
}

func (s *DescribeZonesRequest) SetSeries(v string) *DescribeZonesRequest {
	s.Series = &v
	return s
}

type DescribeZonesResponseBody struct {
	// ```
	// http(s)://[Endpoint]/?Action=DescribeZones
	// &Series=normal
	// &DeployType=single
	// &Common request parameters
	// ```
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// You can call this operation to learn of zones where a cluster can be created in an Alibaba Cloud region.
	Zones []*DescribeZonesResponseBodyZones `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Repeated"`
}

func (s DescribeZonesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBody) SetRequestId(v string) *DescribeZonesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeZonesResponseBody) SetZones(v []*DescribeZonesResponseBodyZones) *DescribeZonesResponseBody {
	s.Zones = v
	return s
}

type DescribeZonesResponseBodyZones struct {
	DeployType *string `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	Series     *string `json:"Series,omitempty" xml:"Series,omitempty"`
	ZoneId     *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ZoneName   *string `json:"ZoneName,omitempty" xml:"ZoneName,omitempty"`
}

func (s DescribeZonesResponseBodyZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBodyZones) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBodyZones) SetDeployType(v string) *DescribeZonesResponseBodyZones {
	s.DeployType = &v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetSeries(v string) *DescribeZonesResponseBodyZones {
	s.Series = &v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetZoneId(v string) *DescribeZonesResponseBodyZones {
	s.ZoneId = &v
	return s
}

func (s *DescribeZonesResponseBodyZones) SetZoneName(v string) *DescribeZonesResponseBodyZones {
	s.ZoneName = &v
	return s
}

type DescribeZonesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeZonesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponse) SetHeaders(v map[string]*string) *DescribeZonesResponse {
	s.Headers = v
	return s
}

func (s *DescribeZonesResponse) SetStatusCode(v int32) *DescribeZonesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeZonesResponse) SetBody(v *DescribeZonesResponseBody) *DescribeZonesResponse {
	s.Body = v
	return s
}

type GetUploadOssUrlRequest struct {
	EffectiveTimeMinutes *int32  `json:"EffectiveTimeMinutes,omitempty" xml:"EffectiveTimeMinutes,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetUploadOssUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUploadOssUrlRequest) GoString() string {
	return s.String()
}

func (s *GetUploadOssUrlRequest) SetEffectiveTimeMinutes(v int32) *GetUploadOssUrlRequest {
	s.EffectiveTimeMinutes = &v
	return s
}

func (s *GetUploadOssUrlRequest) SetType(v string) *GetUploadOssUrlRequest {
	s.Type = &v
	return s
}

type GetUploadOssUrlResponseBody struct {
	Advice      *string                                 `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                 `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *GetUploadOssUrlResponseBodyData        `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorDetail *GetUploadOssUrlResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetUploadOssUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUploadOssUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetUploadOssUrlResponseBody) SetAdvice(v string) *GetUploadOssUrlResponseBody {
	s.Advice = &v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetCode(v string) *GetUploadOssUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetCost(v string) *GetUploadOssUrlResponseBody {
	s.Cost = &v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetData(v *GetUploadOssUrlResponseBodyData) *GetUploadOssUrlResponseBody {
	s.Data = v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetErrorDetail(v *GetUploadOssUrlResponseBodyErrorDetail) *GetUploadOssUrlResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetMessage(v string) *GetUploadOssUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetPageNumber(v int32) *GetUploadOssUrlResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetPageSize(v int32) *GetUploadOssUrlResponseBody {
	s.PageSize = &v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetRequestId(v string) *GetUploadOssUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetSuccess(v bool) *GetUploadOssUrlResponseBody {
	s.Success = &v
	return s
}

func (s *GetUploadOssUrlResponseBody) SetTotalCount(v int64) *GetUploadOssUrlResponseBody {
	s.TotalCount = &v
	return s
}

type GetUploadOssUrlResponseBodyData struct {
	ExpectedExpirationTime *string `json:"ExpectedExpirationTime,omitempty" xml:"ExpectedExpirationTime,omitempty"`
	OssKey                 *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	OssUrl                 *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
}

func (s GetUploadOssUrlResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetUploadOssUrlResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetUploadOssUrlResponseBodyData) SetExpectedExpirationTime(v string) *GetUploadOssUrlResponseBodyData {
	s.ExpectedExpirationTime = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyData) SetOssKey(v string) *GetUploadOssUrlResponseBodyData {
	s.OssKey = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyData) SetOssUrl(v string) *GetUploadOssUrlResponseBodyData {
	s.OssUrl = &v
	return s
}

type GetUploadOssUrlResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s GetUploadOssUrlResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s GetUploadOssUrlResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetCode(v string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *GetUploadOssUrlResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetLevel(v string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetMessage(v string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetMessageMcmsKey(v string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetProposal(v string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetProposalMcmsKey(v string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetReason(v string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetReasonMcmsKey(v string) *GetUploadOssUrlResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *GetUploadOssUrlResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *GetUploadOssUrlResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type GetUploadOssUrlResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUploadOssUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUploadOssUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUploadOssUrlResponse) GoString() string {
	return s.String()
}

func (s *GetUploadOssUrlResponse) SetHeaders(v map[string]*string) *GetUploadOssUrlResponse {
	s.Headers = v
	return s
}

func (s *GetUploadOssUrlResponse) SetStatusCode(v int32) *GetUploadOssUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUploadOssUrlResponse) SetBody(v *GetUploadOssUrlResponseBody) *GetUploadOssUrlResponse {
	s.Body = v
	return s
}

type KillProcessListRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The list of the sessions that need to be closed.
	SessionList *string `json:"SessionList,omitempty" xml:"SessionList,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s KillProcessListRequest) String() string {
	return tea.Prettify(s)
}

func (s KillProcessListRequest) GoString() string {
	return s.String()
}

func (s *KillProcessListRequest) SetInstanceId(v string) *KillProcessListRequest {
	s.InstanceId = &v
	return s
}

func (s *KillProcessListRequest) SetSessionList(v string) *KillProcessListRequest {
	s.SessionList = &v
	return s
}

func (s *KillProcessListRequest) SetTenantId(v string) *KillProcessListRequest {
	s.TenantId = &v
	return s
}

type KillProcessListResponseBody struct {
	// The data returned.
	Data []*KillProcessListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s KillProcessListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s KillProcessListResponseBody) GoString() string {
	return s.String()
}

func (s *KillProcessListResponseBody) SetData(v []*KillProcessListResponseBodyData) *KillProcessListResponseBody {
	s.Data = v
	return s
}

func (s *KillProcessListResponseBody) SetRequestId(v string) *KillProcessListResponseBody {
	s.RequestId = &v
	return s
}

type KillProcessListResponseBodyData struct {
	// The client IP address.
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The start command for the container of the application.
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The name of the database.
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The error message.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Execution time (UTC+8). If it is left empty, it means to execute immediately.
	ExecuteTime *string `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// The IP address of the server.
	ServerIp *string `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	// The ID of the session.
	SessionId *int64 `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// The SQL statement.
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The status of the task.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The database username.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s KillProcessListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s KillProcessListResponseBodyData) GoString() string {
	return s.String()
}

func (s *KillProcessListResponseBodyData) SetClientIp(v string) *KillProcessListResponseBodyData {
	s.ClientIp = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetCommand(v string) *KillProcessListResponseBodyData {
	s.Command = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetDatabase(v string) *KillProcessListResponseBodyData {
	s.Database = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetErrorMessage(v string) *KillProcessListResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetExecuteTime(v string) *KillProcessListResponseBodyData {
	s.ExecuteTime = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetServerIp(v string) *KillProcessListResponseBodyData {
	s.ServerIp = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetSessionId(v int64) *KillProcessListResponseBodyData {
	s.SessionId = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetSqlText(v string) *KillProcessListResponseBodyData {
	s.SqlText = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetStatus(v string) *KillProcessListResponseBodyData {
	s.Status = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetTenantId(v string) *KillProcessListResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *KillProcessListResponseBodyData) SetUser(v string) *KillProcessListResponseBodyData {
	s.User = &v
	return s
}

type KillProcessListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *KillProcessListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s KillProcessListResponse) String() string {
	return tea.Prettify(s)
}

func (s KillProcessListResponse) GoString() string {
	return s.String()
}

func (s *KillProcessListResponse) SetHeaders(v map[string]*string) *KillProcessListResponse {
	s.Headers = v
	return s
}

func (s *KillProcessListResponse) SetStatusCode(v int32) *KillProcessListResponse {
	s.StatusCode = &v
	return s
}

func (s *KillProcessListResponse) SetBody(v *KillProcessListResponseBody) *KillProcessListResponse {
	s.Body = v
	return s
}

type ListAllLabelsResponseBody struct {
	Advice      *string                               `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                               `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        []*ListAllLabelsResponseBodyData      `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorDetail *ListAllLabelsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAllLabelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllLabelsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllLabelsResponseBody) SetAdvice(v string) *ListAllLabelsResponseBody {
	s.Advice = &v
	return s
}

func (s *ListAllLabelsResponseBody) SetCode(v string) *ListAllLabelsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAllLabelsResponseBody) SetCost(v string) *ListAllLabelsResponseBody {
	s.Cost = &v
	return s
}

func (s *ListAllLabelsResponseBody) SetData(v []*ListAllLabelsResponseBodyData) *ListAllLabelsResponseBody {
	s.Data = v
	return s
}

func (s *ListAllLabelsResponseBody) SetErrorDetail(v *ListAllLabelsResponseBodyErrorDetail) *ListAllLabelsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ListAllLabelsResponseBody) SetMessage(v string) *ListAllLabelsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAllLabelsResponseBody) SetPageNumber(v int32) *ListAllLabelsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListAllLabelsResponseBody) SetPageSize(v int32) *ListAllLabelsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListAllLabelsResponseBody) SetRequestId(v string) *ListAllLabelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAllLabelsResponseBody) SetSuccess(v bool) *ListAllLabelsResponseBody {
	s.Success = &v
	return s
}

func (s *ListAllLabelsResponseBody) SetTotalCount(v int64) *ListAllLabelsResponseBody {
	s.TotalCount = &v
	return s
}

type ListAllLabelsResponseBodyData struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListAllLabelsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAllLabelsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAllLabelsResponseBodyData) SetId(v string) *ListAllLabelsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListAllLabelsResponseBodyData) SetName(v string) *ListAllLabelsResponseBodyData {
	s.Name = &v
	return s
}

type ListAllLabelsResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ListAllLabelsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ListAllLabelsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetCode(v string) *ListAllLabelsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *ListAllLabelsResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetLevel(v string) *ListAllLabelsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetMessage(v string) *ListAllLabelsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *ListAllLabelsResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetMessageMcmsKey(v string) *ListAllLabelsResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetProposal(v string) *ListAllLabelsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *ListAllLabelsResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetProposalMcmsKey(v string) *ListAllLabelsResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetReason(v string) *ListAllLabelsResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *ListAllLabelsResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetReasonMcmsKey(v string) *ListAllLabelsResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ListAllLabelsResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *ListAllLabelsResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ListAllLabelsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAllLabelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAllLabelsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllLabelsResponse) GoString() string {
	return s.String()
}

func (s *ListAllLabelsResponse) SetHeaders(v map[string]*string) *ListAllLabelsResponse {
	s.Headers = v
	return s
}

func (s *ListAllLabelsResponse) SetStatusCode(v int32) *ListAllLabelsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAllLabelsResponse) SetBody(v *ListAllLabelsResponseBody) *ListAllLabelsResponse {
	s.Body = v
	return s
}

type ListDataSourceRequest struct {
	Order      *string   `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNumber *string   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *string   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchKey  *string   `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	SortField  *string   `json:"SortField,omitempty" xml:"SortField,omitempty"`
	Types      []*string `json:"Types,omitempty" xml:"Types,omitempty" type:"Repeated"`
}

func (s ListDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ListDataSourceRequest) SetOrder(v string) *ListDataSourceRequest {
	s.Order = &v
	return s
}

func (s *ListDataSourceRequest) SetPageNumber(v string) *ListDataSourceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourceRequest) SetPageSize(v string) *ListDataSourceRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataSourceRequest) SetSearchKey(v string) *ListDataSourceRequest {
	s.SearchKey = &v
	return s
}

func (s *ListDataSourceRequest) SetSortField(v string) *ListDataSourceRequest {
	s.SortField = &v
	return s
}

func (s *ListDataSourceRequest) SetTypes(v []*string) *ListDataSourceRequest {
	s.Types = v
	return s
}

type ListDataSourceShrinkRequest struct {
	Order       *string `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNumber  *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchKey   *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	SortField   *string `json:"SortField,omitempty" xml:"SortField,omitempty"`
	TypesShrink *string `json:"Types,omitempty" xml:"Types,omitempty"`
}

func (s ListDataSourceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDataSourceShrinkRequest) SetOrder(v string) *ListDataSourceShrinkRequest {
	s.Order = &v
	return s
}

func (s *ListDataSourceShrinkRequest) SetPageNumber(v string) *ListDataSourceShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourceShrinkRequest) SetPageSize(v string) *ListDataSourceShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataSourceShrinkRequest) SetSearchKey(v string) *ListDataSourceShrinkRequest {
	s.SearchKey = &v
	return s
}

func (s *ListDataSourceShrinkRequest) SetSortField(v string) *ListDataSourceShrinkRequest {
	s.SortField = &v
	return s
}

func (s *ListDataSourceShrinkRequest) SetTypesShrink(v string) *ListDataSourceShrinkRequest {
	s.TypesShrink = &v
	return s
}

type ListDataSourceResponseBody struct {
	Advice      *string                                `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        []*ListDataSourceResponseBodyData      `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorDetail *ListDataSourceResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataSourceResponseBody) SetAdvice(v string) *ListDataSourceResponseBody {
	s.Advice = &v
	return s
}

func (s *ListDataSourceResponseBody) SetCode(v string) *ListDataSourceResponseBody {
	s.Code = &v
	return s
}

func (s *ListDataSourceResponseBody) SetCost(v string) *ListDataSourceResponseBody {
	s.Cost = &v
	return s
}

func (s *ListDataSourceResponseBody) SetData(v []*ListDataSourceResponseBodyData) *ListDataSourceResponseBody {
	s.Data = v
	return s
}

func (s *ListDataSourceResponseBody) SetErrorDetail(v *ListDataSourceResponseBodyErrorDetail) *ListDataSourceResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ListDataSourceResponseBody) SetMessage(v string) *ListDataSourceResponseBody {
	s.Message = &v
	return s
}

func (s *ListDataSourceResponseBody) SetPageNumber(v int32) *ListDataSourceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourceResponseBody) SetPageSize(v int32) *ListDataSourceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListDataSourceResponseBody) SetRequestId(v string) *ListDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDataSourceResponseBody) SetSuccess(v bool) *ListDataSourceResponseBody {
	s.Success = &v
	return s
}

func (s *ListDataSourceResponseBody) SetTotalCount(v int64) *ListDataSourceResponseBody {
	s.TotalCount = &v
	return s
}

type ListDataSourceResponseBodyData struct {
	Charset                  *string     `json:"Charset,omitempty" xml:"Charset,omitempty"`
	Cluster                  *string     `json:"Cluster,omitempty" xml:"Cluster,omitempty"`
	ConnExtraAttributes      interface{} `json:"ConnExtraAttributes,omitempty" xml:"ConnExtraAttributes,omitempty"`
	Description              *string     `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate                *string     `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified              *string     `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id                       *string     `json:"Id,omitempty" xml:"Id,omitempty"`
	Ip                       *string     `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name                     *string     `json:"Name,omitempty" xml:"Name,omitempty"`
	OperatingSystem          *string     `json:"OperatingSystem,omitempty" xml:"OperatingSystem,omitempty"`
	OracleNlsLengthSemantics *string     `json:"OracleNlsLengthSemantics,omitempty" xml:"OracleNlsLengthSemantics,omitempty"`
	OracleSid                *string     `json:"OracleSid,omitempty" xml:"OracleSid,omitempty"`
	Owner                    *string     `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PartnerId                *string     `json:"PartnerId,omitempty" xml:"PartnerId,omitempty"`
	Port                     *int32      `json:"Port,omitempty" xml:"Port,omitempty"`
	Region                   *string     `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceOwner            *string     `json:"ResourceOwner,omitempty" xml:"ResourceOwner,omitempty"`
	Role                     *string     `json:"Role,omitempty" xml:"Role,omitempty"`
	Schema                   *string     `json:"Schema,omitempty" xml:"Schema,omitempty"`
	Tenant                   *string     `json:"Tenant,omitempty" xml:"Tenant,omitempty"`
	Timezone                 *string     `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	Type                     *string     `json:"Type,omitempty" xml:"Type,omitempty"`
	UserName                 *string     `json:"UserName,omitempty" xml:"UserName,omitempty"`
	Version                  *string     `json:"Version,omitempty" xml:"Version,omitempty"`
	VpcId                    *string     `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ListDataSourceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDataSourceResponseBodyData) SetCharset(v string) *ListDataSourceResponseBodyData {
	s.Charset = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetCluster(v string) *ListDataSourceResponseBodyData {
	s.Cluster = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetConnExtraAttributes(v interface{}) *ListDataSourceResponseBodyData {
	s.ConnExtraAttributes = v
	return s
}

func (s *ListDataSourceResponseBodyData) SetDescription(v string) *ListDataSourceResponseBodyData {
	s.Description = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetGmtCreate(v string) *ListDataSourceResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetGmtModified(v string) *ListDataSourceResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetId(v string) *ListDataSourceResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetIp(v string) *ListDataSourceResponseBodyData {
	s.Ip = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetName(v string) *ListDataSourceResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetOperatingSystem(v string) *ListDataSourceResponseBodyData {
	s.OperatingSystem = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetOracleNlsLengthSemantics(v string) *ListDataSourceResponseBodyData {
	s.OracleNlsLengthSemantics = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetOracleSid(v string) *ListDataSourceResponseBodyData {
	s.OracleSid = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetOwner(v string) *ListDataSourceResponseBodyData {
	s.Owner = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetPartnerId(v string) *ListDataSourceResponseBodyData {
	s.PartnerId = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetPort(v int32) *ListDataSourceResponseBodyData {
	s.Port = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetRegion(v string) *ListDataSourceResponseBodyData {
	s.Region = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetResourceOwner(v string) *ListDataSourceResponseBodyData {
	s.ResourceOwner = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetRole(v string) *ListDataSourceResponseBodyData {
	s.Role = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetSchema(v string) *ListDataSourceResponseBodyData {
	s.Schema = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetTenant(v string) *ListDataSourceResponseBodyData {
	s.Tenant = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetTimezone(v string) *ListDataSourceResponseBodyData {
	s.Timezone = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetType(v string) *ListDataSourceResponseBodyData {
	s.Type = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetUserName(v string) *ListDataSourceResponseBodyData {
	s.UserName = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetVersion(v string) *ListDataSourceResponseBodyData {
	s.Version = &v
	return s
}

func (s *ListDataSourceResponseBodyData) SetVpcId(v string) *ListDataSourceResponseBodyData {
	s.VpcId = &v
	return s
}

type ListDataSourceResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ListDataSourceResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ListDataSourceResponseBodyErrorDetail) SetCode(v string) *ListDataSourceResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *ListDataSourceResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetLevel(v string) *ListDataSourceResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetMessage(v string) *ListDataSourceResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *ListDataSourceResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetMessageMcmsKey(v string) *ListDataSourceResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetProposal(v string) *ListDataSourceResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *ListDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetProposalMcmsKey(v string) *ListDataSourceResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetReason(v string) *ListDataSourceResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *ListDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetReasonMcmsKey(v string) *ListDataSourceResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ListDataSourceResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *ListDataSourceResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ListDataSourceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ListDataSourceResponse) SetHeaders(v map[string]*string) *ListDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ListDataSourceResponse) SetStatusCode(v int32) *ListDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataSourceResponse) SetBody(v *ListDataSourceResponseBody) *ListDataSourceResponse {
	s.Body = v
	return s
}

type ListProjectFullVerifyResultRequest struct {
	DestSchemas   []*string `json:"DestSchemas,omitempty" xml:"DestSchemas,omitempty" type:"Repeated"`
	PageNumber    *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId     *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SourceSchemas []*string `json:"SourceSchemas,omitempty" xml:"SourceSchemas,omitempty" type:"Repeated"`
	Status        *string   `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListProjectFullVerifyResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectFullVerifyResultRequest) GoString() string {
	return s.String()
}

func (s *ListProjectFullVerifyResultRequest) SetDestSchemas(v []*string) *ListProjectFullVerifyResultRequest {
	s.DestSchemas = v
	return s
}

func (s *ListProjectFullVerifyResultRequest) SetPageNumber(v int32) *ListProjectFullVerifyResultRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectFullVerifyResultRequest) SetPageSize(v int32) *ListProjectFullVerifyResultRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectFullVerifyResultRequest) SetProjectId(v string) *ListProjectFullVerifyResultRequest {
	s.ProjectId = &v
	return s
}

func (s *ListProjectFullVerifyResultRequest) SetSourceSchemas(v []*string) *ListProjectFullVerifyResultRequest {
	s.SourceSchemas = v
	return s
}

func (s *ListProjectFullVerifyResultRequest) SetStatus(v string) *ListProjectFullVerifyResultRequest {
	s.Status = &v
	return s
}

type ListProjectFullVerifyResultShrinkRequest struct {
	DestSchemasShrink   *string `json:"DestSchemas,omitempty" xml:"DestSchemas,omitempty"`
	PageNumber          *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId           *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SourceSchemasShrink *string `json:"SourceSchemas,omitempty" xml:"SourceSchemas,omitempty"`
	Status              *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListProjectFullVerifyResultShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectFullVerifyResultShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListProjectFullVerifyResultShrinkRequest) SetDestSchemasShrink(v string) *ListProjectFullVerifyResultShrinkRequest {
	s.DestSchemasShrink = &v
	return s
}

func (s *ListProjectFullVerifyResultShrinkRequest) SetPageNumber(v int32) *ListProjectFullVerifyResultShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectFullVerifyResultShrinkRequest) SetPageSize(v int32) *ListProjectFullVerifyResultShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectFullVerifyResultShrinkRequest) SetProjectId(v string) *ListProjectFullVerifyResultShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListProjectFullVerifyResultShrinkRequest) SetSourceSchemasShrink(v string) *ListProjectFullVerifyResultShrinkRequest {
	s.SourceSchemasShrink = &v
	return s
}

func (s *ListProjectFullVerifyResultShrinkRequest) SetStatus(v string) *ListProjectFullVerifyResultShrinkRequest {
	s.Status = &v
	return s
}

type ListProjectFullVerifyResultResponseBody struct {
	Advice      *string                                             `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                             `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *ListProjectFullVerifyResultResponseBodyData        `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorDetail *ListProjectFullVerifyResultResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProjectFullVerifyResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectFullVerifyResultResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectFullVerifyResultResponseBody) SetAdvice(v string) *ListProjectFullVerifyResultResponseBody {
	s.Advice = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetCode(v string) *ListProjectFullVerifyResultResponseBody {
	s.Code = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetCost(v string) *ListProjectFullVerifyResultResponseBody {
	s.Cost = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetData(v *ListProjectFullVerifyResultResponseBodyData) *ListProjectFullVerifyResultResponseBody {
	s.Data = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetErrorDetail(v *ListProjectFullVerifyResultResponseBodyErrorDetail) *ListProjectFullVerifyResultResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetMessage(v string) *ListProjectFullVerifyResultResponseBody {
	s.Message = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetPageNumber(v int32) *ListProjectFullVerifyResultResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetPageSize(v int32) *ListProjectFullVerifyResultResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetRequestId(v string) *ListProjectFullVerifyResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetSuccess(v bool) *ListProjectFullVerifyResultResponseBody {
	s.Success = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBody) SetTotalCount(v int64) *ListProjectFullVerifyResultResponseBody {
	s.TotalCount = &v
	return s
}

type ListProjectFullVerifyResultResponseBodyData struct {
	DifferentNumber           *int64                                                                  `json:"DifferentNumber,omitempty" xml:"DifferentNumber,omitempty"`
	FullVerifyTableStatistics []*ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics `json:"FullVerifyTableStatistics,omitempty" xml:"FullVerifyTableStatistics,omitempty" type:"Repeated"`
}

func (s ListProjectFullVerifyResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListProjectFullVerifyResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListProjectFullVerifyResultResponseBodyData) SetDifferentNumber(v int64) *ListProjectFullVerifyResultResponseBodyData {
	s.DifferentNumber = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyData) SetFullVerifyTableStatistics(v []*ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) *ListProjectFullVerifyResultResponseBodyData {
	s.FullVerifyTableStatistics = v
	return s
}

type ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics struct {
	ConsistentCount  *int64                                                                              `json:"ConsistentCount,omitempty" xml:"ConsistentCount,omitempty"`
	DestOnlyCount    *int64                                                                              `json:"DestOnlyCount,omitempty" xml:"DestOnlyCount,omitempty"`
	DestSchemaName   *string                                                                             `json:"DestSchemaName,omitempty" xml:"DestSchemaName,omitempty"`
	ErrorDetails     []*ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	Message          *string                                                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	MismatchedCount  *int64                                                                              `json:"MismatchedCount,omitempty" xml:"MismatchedCount,omitempty"`
	Progress         *string                                                                             `json:"Progress,omitempty" xml:"Progress,omitempty"`
	ResultDesc       *string                                                                             `json:"ResultDesc,omitempty" xml:"ResultDesc,omitempty"`
	ResultType       *string                                                                             `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	SourceOnlyCount  *int64                                                                              `json:"SourceOnlyCount,omitempty" xml:"SourceOnlyCount,omitempty"`
	SourceSchemaName *string                                                                             `json:"SourceSchemaName,omitempty" xml:"SourceSchemaName,omitempty"`
	SourceTableName  *string                                                                             `json:"SourceTableName,omitempty" xml:"SourceTableName,omitempty"`
	Status           *string                                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) String() string {
	return tea.Prettify(s)
}

func (s ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) GoString() string {
	return s.String()
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetConsistentCount(v int64) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.ConsistentCount = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetDestOnlyCount(v int64) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.DestOnlyCount = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetDestSchemaName(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.DestSchemaName = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetErrorDetails(v []*ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.ErrorDetails = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetMessage(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.Message = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetMismatchedCount(v int64) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.MismatchedCount = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetProgress(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.Progress = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetResultDesc(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.ResultDesc = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetResultType(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.ResultType = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetSourceOnlyCount(v int64) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.SourceOnlyCount = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetSourceSchemaName(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.SourceSchemaName = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetSourceTableName(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.SourceTableName = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics) SetStatus(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatistics {
	s.Status = &v
	return s
}

type ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) GoString() string {
	return s.String()
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetCode(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.Code = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetExtraContext(v map[string]interface{}) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetLevel(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.Level = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetMessage(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.Message = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetMessageMcmsContext(v map[string]*string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetMessageMcmsKey(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetProposal(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.Proposal = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetProposalMcmsContext(v map[string]*string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetProposalMcmsKey(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetReason(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.Reason = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetReasonMcmsContext(v map[string]*string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetReasonMcmsKey(v string) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails) SetUpstreamErrorDetail(v interface{}) *ListProjectFullVerifyResultResponseBodyDataFullVerifyTableStatisticsErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type ListProjectFullVerifyResultResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ListProjectFullVerifyResultResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ListProjectFullVerifyResultResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetCode(v string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetLevel(v string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetMessage(v string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetMessageMcmsKey(v string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetProposal(v string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetProposalMcmsKey(v string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetReason(v string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetReasonMcmsKey(v string) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ListProjectFullVerifyResultResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *ListProjectFullVerifyResultResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ListProjectFullVerifyResultResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectFullVerifyResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectFullVerifyResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectFullVerifyResultResponse) GoString() string {
	return s.String()
}

func (s *ListProjectFullVerifyResultResponse) SetHeaders(v map[string]*string) *ListProjectFullVerifyResultResponse {
	s.Headers = v
	return s
}

func (s *ListProjectFullVerifyResultResponse) SetStatusCode(v int32) *ListProjectFullVerifyResultResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectFullVerifyResultResponse) SetBody(v *ListProjectFullVerifyResultResponseBody) *ListProjectFullVerifyResultResponse {
	s.Body = v
	return s
}

type ListProjectModifyRecordsRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListProjectModifyRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsRequest) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsRequest) SetId(v string) *ListProjectModifyRecordsRequest {
	s.Id = &v
	return s
}

type ListProjectModifyRecordsResponseBody struct {
	Advice      *string                                          `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                          `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        []*ListProjectModifyRecordsResponseBodyData      `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorDetail *ListProjectModifyRecordsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProjectModifyRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBody) SetAdvice(v string) *ListProjectModifyRecordsResponseBody {
	s.Advice = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetCode(v string) *ListProjectModifyRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetCost(v string) *ListProjectModifyRecordsResponseBody {
	s.Cost = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetData(v []*ListProjectModifyRecordsResponseBodyData) *ListProjectModifyRecordsResponseBody {
	s.Data = v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetErrorDetail(v *ListProjectModifyRecordsResponseBodyErrorDetail) *ListProjectModifyRecordsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetMessage(v string) *ListProjectModifyRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetPageNumber(v int32) *ListProjectModifyRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetPageSize(v int32) *ListProjectModifyRecordsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetRequestId(v string) *ListProjectModifyRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetSuccess(v bool) *ListProjectModifyRecordsResponseBody {
	s.Success = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBody) SetTotalCount(v int64) *ListProjectModifyRecordsResponseBody {
	s.TotalCount = &v
	return s
}

type ListProjectModifyRecordsResponseBodyData struct {
	Databases             []*ListProjectModifyRecordsResponseBodyDataDatabases           `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	ErrorDetail           *ListProjectModifyRecordsResponseBodyDataErrorDetail           `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	GmtModified           *string                                                        `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id                    *int64                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	MergeRequestId        *int64                                                         `json:"MergeRequestId,omitempty" xml:"MergeRequestId,omitempty"`
	MigrationObjectsInfo  *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo  `json:"MigrationObjectsInfo,omitempty" xml:"MigrationObjectsInfo,omitempty" type:"Struct"`
	OmsProjectMappingInfo *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo `json:"OmsProjectMappingInfo,omitempty" xml:"OmsProjectMappingInfo,omitempty" type:"Struct"`
	Status                *string                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	SubProjectId          *string                                                        `json:"SubProjectId,omitempty" xml:"SubProjectId,omitempty"`
	TableEtlList          []*ListProjectModifyRecordsResponseBodyDataTableEtlList        `json:"TableEtlList,omitempty" xml:"TableEtlList,omitempty" type:"Repeated"`
	Type                  *string                                                        `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateRequestId       *int64                                                         `json:"UpdateRequestId,omitempty" xml:"UpdateRequestId,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyData) SetDatabases(v []*ListProjectModifyRecordsResponseBodyDataDatabases) *ListProjectModifyRecordsResponseBodyData {
	s.Databases = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetErrorDetail(v *ListProjectModifyRecordsResponseBodyDataErrorDetail) *ListProjectModifyRecordsResponseBodyData {
	s.ErrorDetail = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetGmtModified(v string) *ListProjectModifyRecordsResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetId(v int64) *ListProjectModifyRecordsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetMergeRequestId(v int64) *ListProjectModifyRecordsResponseBodyData {
	s.MergeRequestId = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetMigrationObjectsInfo(v *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo) *ListProjectModifyRecordsResponseBodyData {
	s.MigrationObjectsInfo = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetOmsProjectMappingInfo(v *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo) *ListProjectModifyRecordsResponseBodyData {
	s.OmsProjectMappingInfo = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetStatus(v string) *ListProjectModifyRecordsResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetSubProjectId(v string) *ListProjectModifyRecordsResponseBodyData {
	s.SubProjectId = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetTableEtlList(v []*ListProjectModifyRecordsResponseBodyDataTableEtlList) *ListProjectModifyRecordsResponseBodyData {
	s.TableEtlList = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetType(v string) *ListProjectModifyRecordsResponseBodyData {
	s.Type = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyData) SetUpdateRequestId(v int64) *ListProjectModifyRecordsResponseBodyData {
	s.UpdateRequestId = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabases struct {
	Id             *string                                                            `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                            `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	SpecificTables []*ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables `json:"SpecificTables,omitempty" xml:"SpecificTables,omitempty" type:"Repeated"`
	SpecificViews  []*ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews  `json:"SpecificViews,omitempty" xml:"SpecificViews,omitempty" type:"Repeated"`
	Tables         []*ListProjectModifyRecordsResponseBodyDataDatabasesTables         `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	Views          []*ListProjectModifyRecordsResponseBodyDataDatabasesViews          `json:"Views,omitempty" xml:"Views,omitempty" type:"Repeated"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabases) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabases) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabases) SetId(v string) *ListProjectModifyRecordsResponseBodyDataDatabases {
	s.Id = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabases) SetMappedName(v string) *ListProjectModifyRecordsResponseBodyDataDatabases {
	s.MappedName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabases) SetName(v string) *ListProjectModifyRecordsResponseBodyDataDatabases {
	s.Name = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabases) SetSpecificTables(v []*ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) *ListProjectModifyRecordsResponseBodyDataDatabases {
	s.SpecificTables = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabases) SetSpecificViews(v []*ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) *ListProjectModifyRecordsResponseBodyDataDatabases {
	s.SpecificViews = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabases) SetTables(v []*ListProjectModifyRecordsResponseBodyDataDatabasesTables) *ListProjectModifyRecordsResponseBodyDataDatabases {
	s.Tables = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabases) SetViews(v []*ListProjectModifyRecordsResponseBodyDataDatabasesViews) *ListProjectModifyRecordsResponseBodyDataDatabases {
	s.Views = v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables struct {
	AdbTableSchema *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	Columns        []*ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns      `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	FilterColumns  []*string                                                                      `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                        `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                      `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                        `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) SetAdbTableSchema(v *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables {
	s.AdbTableSchema = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) SetColumns(v []*ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables {
	s.Columns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) SetFilterColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables {
	s.FilterColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) SetId(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables {
	s.Id = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) SetMappedName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables {
	s.MappedName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) SetName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables {
	s.Name = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) SetShardColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables {
	s.ShardColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables) SetWhereClause(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTables {
	s.WhereClause = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *int32    `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema) SetDistributedKeys(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema) SetPartitionLifeCycle(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema) SetPartitionStatement(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema) SetPrimaryKeys(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns struct {
	ColumnComment   *string `json:"ColumnComment,omitempty" xml:"ColumnComment,omitempty"`
	ColumnKey       *string `json:"ColumnKey,omitempty" xml:"ColumnKey,omitempty"`
	ColumnName      *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnType      *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	DataLength      *int64  `json:"DataLength,omitempty" xml:"DataLength,omitempty"`
	DataPrecision   *int32  `json:"DataPrecision,omitempty" xml:"DataPrecision,omitempty"`
	DataScale       *int32  `json:"DataScale,omitempty" xml:"DataScale,omitempty"`
	DefaultValue    *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	Encoding        *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	IsGenerateField *bool   `json:"IsGenerateField,omitempty" xml:"IsGenerateField,omitempty"`
	MappedName      *string `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Nullable        *bool   `json:"Nullable,omitempty" xml:"Nullable,omitempty"`
	Position        *int32  `json:"Position,omitempty" xml:"Position,omitempty"`
	RawColumnType   *string `json:"RawColumnType,omitempty" xml:"RawColumnType,omitempty"`
	RecordFieldType *string `json:"RecordFieldType,omitempty" xml:"RecordFieldType,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetColumnComment(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.ColumnComment = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetColumnKey(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.ColumnKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetColumnName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.ColumnName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetColumnType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.ColumnType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetDataLength(v int64) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.DataLength = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetDataPrecision(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.DataPrecision = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetDataScale(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.DataScale = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetDefaultValue(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.DefaultValue = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetEncoding(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.Encoding = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetIsGenerateField(v bool) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.IsGenerateField = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetMappedName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.MappedName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetNullable(v bool) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.Nullable = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetPosition(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.Position = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetRawColumnType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.RawColumnType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetRecordFieldType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.RecordFieldType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns) SetType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificTablesColumns {
	s.Type = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews struct {
	AdbTableSchema *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	Columns        []*ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns      `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	FilterColumns  []*string                                                                     `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                       `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                                     `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                       `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) SetAdbTableSchema(v *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews {
	s.AdbTableSchema = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) SetColumns(v []*ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews {
	s.Columns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) SetFilterColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews {
	s.FilterColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) SetId(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews {
	s.Id = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) SetMappedName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews {
	s.MappedName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) SetName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews {
	s.Name = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) SetShardColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews {
	s.ShardColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews) SetWhereClause(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViews {
	s.WhereClause = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *int32    `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema) SetDistributedKeys(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema) SetPartitionLifeCycle(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema) SetPartitionStatement(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema) SetPrimaryKeys(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns struct {
	ColumnComment   *string `json:"ColumnComment,omitempty" xml:"ColumnComment,omitempty"`
	ColumnKey       *string `json:"ColumnKey,omitempty" xml:"ColumnKey,omitempty"`
	ColumnName      *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnType      *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	DataLength      *int64  `json:"DataLength,omitempty" xml:"DataLength,omitempty"`
	DataPrecision   *int32  `json:"DataPrecision,omitempty" xml:"DataPrecision,omitempty"`
	DataScale       *int32  `json:"DataScale,omitempty" xml:"DataScale,omitempty"`
	DefaultValue    *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	Encoding        *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	IsGenerateField *bool   `json:"IsGenerateField,omitempty" xml:"IsGenerateField,omitempty"`
	MappedName      *string `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Nullable        *bool   `json:"Nullable,omitempty" xml:"Nullable,omitempty"`
	Position        *int32  `json:"Position,omitempty" xml:"Position,omitempty"`
	RawColumnType   *string `json:"RawColumnType,omitempty" xml:"RawColumnType,omitempty"`
	RecordFieldType *string `json:"RecordFieldType,omitempty" xml:"RecordFieldType,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetColumnComment(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.ColumnComment = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetColumnKey(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.ColumnKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetColumnName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.ColumnName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetColumnType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.ColumnType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetDataLength(v int64) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.DataLength = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetDataPrecision(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.DataPrecision = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetDataScale(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.DataScale = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetDefaultValue(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.DefaultValue = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetEncoding(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.Encoding = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetIsGenerateField(v bool) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.IsGenerateField = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetMappedName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.MappedName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetNullable(v bool) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.Nullable = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetPosition(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.Position = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetRawColumnType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.RawColumnType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetRecordFieldType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.RecordFieldType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns) SetType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesSpecificViewsColumns {
	s.Type = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesTables struct {
	AdbTableSchema *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	Columns        []*ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns      `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	FilterColumns  []*string                                                              `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                                `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                                `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                              `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                                `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesTables) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesTables) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTables) SetAdbTableSchema(v *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema) *ListProjectModifyRecordsResponseBodyDataDatabasesTables {
	s.AdbTableSchema = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTables) SetColumns(v []*ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) *ListProjectModifyRecordsResponseBodyDataDatabasesTables {
	s.Columns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTables) SetFilterColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesTables {
	s.FilterColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTables) SetId(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTables {
	s.Id = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTables) SetMappedName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTables {
	s.MappedName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTables) SetName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTables {
	s.Name = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTables) SetShardColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesTables {
	s.ShardColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTables) SetWhereClause(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTables {
	s.WhereClause = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *int32    `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema) SetDistributedKeys(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema) SetPartitionLifeCycle(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema) SetPartitionStatement(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema) SetPrimaryKeys(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns struct {
	ColumnComment   *string `json:"ColumnComment,omitempty" xml:"ColumnComment,omitempty"`
	ColumnKey       *string `json:"ColumnKey,omitempty" xml:"ColumnKey,omitempty"`
	ColumnName      *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnType      *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	DataLength      *int64  `json:"DataLength,omitempty" xml:"DataLength,omitempty"`
	DataPrecision   *int32  `json:"DataPrecision,omitempty" xml:"DataPrecision,omitempty"`
	DataScale       *int32  `json:"DataScale,omitempty" xml:"DataScale,omitempty"`
	DefaultValue    *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	Encoding        *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	IsGenerateField *bool   `json:"IsGenerateField,omitempty" xml:"IsGenerateField,omitempty"`
	MappedName      *string `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Nullable        *bool   `json:"Nullable,omitempty" xml:"Nullable,omitempty"`
	Position        *int32  `json:"Position,omitempty" xml:"Position,omitempty"`
	RawColumnType   *string `json:"RawColumnType,omitempty" xml:"RawColumnType,omitempty"`
	RecordFieldType *string `json:"RecordFieldType,omitempty" xml:"RecordFieldType,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetColumnComment(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.ColumnComment = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetColumnKey(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.ColumnKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetColumnName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.ColumnName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetColumnType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.ColumnType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetDataLength(v int64) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.DataLength = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetDataPrecision(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.DataPrecision = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetDataScale(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.DataScale = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetDefaultValue(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.DefaultValue = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetEncoding(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.Encoding = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetIsGenerateField(v bool) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.IsGenerateField = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetMappedName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.MappedName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetNullable(v bool) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.Nullable = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetPosition(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.Position = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetRawColumnType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.RawColumnType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetRecordFieldType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.RecordFieldType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns) SetType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesTablesColumns {
	s.Type = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesViews struct {
	AdbTableSchema *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	Columns        []*ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns      `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	FilterColumns  []*string                                                             `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	Id             *string                                                               `json:"Id,omitempty" xml:"Id,omitempty"`
	MappedName     *string                                                               `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Name           *string                                                               `json:"Name,omitempty" xml:"Name,omitempty"`
	ShardColumns   []*string                                                             `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	WhereClause    *string                                                               `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesViews) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesViews) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViews) SetAdbTableSchema(v *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema) *ListProjectModifyRecordsResponseBodyDataDatabasesViews {
	s.AdbTableSchema = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViews) SetColumns(v []*ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) *ListProjectModifyRecordsResponseBodyDataDatabasesViews {
	s.Columns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViews) SetFilterColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesViews {
	s.FilterColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViews) SetId(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViews {
	s.Id = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViews) SetMappedName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViews {
	s.MappedName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViews) SetName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViews {
	s.Name = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViews) SetShardColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesViews {
	s.ShardColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViews) SetWhereClause(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViews {
	s.WhereClause = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema struct {
	DistributedKeys    []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	PartitionLifeCycle *int32    `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	PartitionStatement *string   `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	PrimaryKeys        []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema) SetDistributedKeys(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema) SetPartitionLifeCycle(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema) SetPartitionStatement(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema) SetPrimaryKeys(v []*string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns struct {
	ColumnComment   *string `json:"ColumnComment,omitempty" xml:"ColumnComment,omitempty"`
	ColumnKey       *string `json:"ColumnKey,omitempty" xml:"ColumnKey,omitempty"`
	ColumnName      *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnType      *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	DataLength      *int64  `json:"DataLength,omitempty" xml:"DataLength,omitempty"`
	DataPrecision   *int32  `json:"DataPrecision,omitempty" xml:"DataPrecision,omitempty"`
	DataScale       *int32  `json:"DataScale,omitempty" xml:"DataScale,omitempty"`
	DefaultValue    *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	Encoding        *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	IsGenerateField *bool   `json:"IsGenerateField,omitempty" xml:"IsGenerateField,omitempty"`
	MappedName      *string `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	Nullable        *bool   `json:"Nullable,omitempty" xml:"Nullable,omitempty"`
	Position        *int32  `json:"Position,omitempty" xml:"Position,omitempty"`
	RawColumnType   *string `json:"RawColumnType,omitempty" xml:"RawColumnType,omitempty"`
	RecordFieldType *string `json:"RecordFieldType,omitempty" xml:"RecordFieldType,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetColumnComment(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.ColumnComment = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetColumnKey(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.ColumnKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetColumnName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.ColumnName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetColumnType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.ColumnType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetDataLength(v int64) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.DataLength = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetDataPrecision(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.DataPrecision = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetDataScale(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.DataScale = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetDefaultValue(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.DefaultValue = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetEncoding(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.Encoding = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetIsGenerateField(v bool) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.IsGenerateField = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetMappedName(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.MappedName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetNullable(v bool) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.Nullable = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetPosition(v int32) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.Position = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetRawColumnType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.RawColumnType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetRecordFieldType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.RecordFieldType = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns) SetType(v string) *ListProjectModifyRecordsResponseBodyDataDatabasesViewsColumns {
	s.Type = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataErrorDetail) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetCode(v string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.Code = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetExtraContext(v map[string]interface{}) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetLevel(v string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.Level = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetMessage(v string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.Message = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetMessageMcmsContext(v map[string]*string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetMessageMcmsKey(v string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetProposal(v string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetProposalMcmsContext(v map[string]*string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetProposalMcmsKey(v string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetReason(v string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.Reason = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetReasonMcmsContext(v map[string]*string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetReasonMcmsKey(v string) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataErrorDetail) SetUpstreamErrorDetail(v interface{}) *ListProjectModifyRecordsResponseBodyDataErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo struct {
	Tables       []*ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTables      `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	TablesBlack  []*ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTablesBlack `json:"TablesBlack,omitempty" xml:"TablesBlack,omitempty" type:"Repeated"`
	Views        []*ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViews       `json:"Views,omitempty" xml:"Views,omitempty" type:"Repeated"`
	ViewsBlack   []*ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViewsBlack  `json:"ViewsBlack,omitempty" xml:"ViewsBlack,omitempty" type:"Repeated"`
	WildcardMode *bool                                                                      `json:"WildcardMode,omitempty" xml:"WildcardMode,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo) SetTables(v []*ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTables) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo {
	s.Tables = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo) SetTablesBlack(v []*ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTablesBlack) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo {
	s.TablesBlack = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo) SetViews(v []*ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViews) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo {
	s.Views = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo) SetViewsBlack(v []*ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViewsBlack) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo {
	s.ViewsBlack = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo) SetWildcardMode(v bool) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfo {
	s.WildcardMode = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTables struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTables) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTables) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTables) SetName(v string) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTables {
	s.Name = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTables) SetSchema(v string) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTables {
	s.Schema = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTablesBlack struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTablesBlack) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTablesBlack) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTablesBlack) SetName(v string) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTablesBlack {
	s.Name = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTablesBlack) SetSchema(v string) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoTablesBlack {
	s.Schema = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViews struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViews) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViews) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViews) SetName(v string) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViews {
	s.Name = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViews) SetSchema(v string) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViews {
	s.Schema = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViewsBlack struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViewsBlack) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViewsBlack) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViewsBlack) SetName(v string) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViewsBlack {
	s.Name = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViewsBlack) SetSchema(v string) *ListProjectModifyRecordsResponseBodyDataMigrationObjectsInfoViewsBlack {
	s.Schema = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo struct {
	ColumnMappings []*ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings `json:"ColumnMappings,omitempty" xml:"ColumnMappings,omitempty" type:"Repeated"`
	SchemaMappings []*ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoSchemaMappings `json:"SchemaMappings,omitempty" xml:"SchemaMappings,omitempty" type:"Repeated"`
	TableMappings  []*ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings  `json:"TableMappings,omitempty" xml:"TableMappings,omitempty" type:"Repeated"`
	ViewMappings   []*ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings   `json:"ViewMappings,omitempty" xml:"ViewMappings,omitempty" type:"Repeated"`
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo) SetColumnMappings(v []*ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo {
	s.ColumnMappings = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo) SetSchemaMappings(v []*ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoSchemaMappings) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo {
	s.SchemaMappings = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo) SetTableMappings(v []*ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo {
	s.TableMappings = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo) SetViewMappings(v []*ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfo {
	s.ViewMappings = v
	return s
}

type ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings struct {
	DestName     *string `json:"DestName,omitempty" xml:"DestName,omitempty"`
	SourceName   *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceSchema *string `json:"SourceSchema,omitempty" xml:"SourceSchema,omitempty"`
	SourceTable  *string `json:"SourceTable,omitempty" xml:"SourceTable,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings) SetDestName(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings {
	s.DestName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings) SetSourceName(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings {
	s.SourceName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings) SetSourceSchema(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings {
	s.SourceSchema = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings) SetSourceTable(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoColumnMappings {
	s.SourceTable = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoSchemaMappings struct {
	DestName   *string `json:"DestName,omitempty" xml:"DestName,omitempty"`
	SourceName *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoSchemaMappings) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoSchemaMappings) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoSchemaMappings) SetDestName(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoSchemaMappings {
	s.DestName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoSchemaMappings) SetSourceName(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoSchemaMappings {
	s.SourceName = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings struct {
	DestName     *string `json:"DestName,omitempty" xml:"DestName,omitempty"`
	SourceName   *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceSchema *string `json:"SourceSchema,omitempty" xml:"SourceSchema,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings) SetDestName(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings {
	s.DestName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings) SetSourceName(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings {
	s.SourceName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings) SetSourceSchema(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoTableMappings {
	s.SourceSchema = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings struct {
	DestName     *string `json:"DestName,omitempty" xml:"DestName,omitempty"`
	SourceName   *string `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceSchema *string `json:"SourceSchema,omitempty" xml:"SourceSchema,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings) SetDestName(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings {
	s.DestName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings) SetSourceName(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings {
	s.SourceName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings) SetSourceSchema(v string) *ListProjectModifyRecordsResponseBodyDataOmsProjectMappingInfoViewMappings {
	s.SourceSchema = &v
	return s
}

type ListProjectModifyRecordsResponseBodyDataTableEtlList struct {
	Database         *string   `json:"Database,omitempty" xml:"Database,omitempty"`
	DestDatabase     *string   `json:"DestDatabase,omitempty" xml:"DestDatabase,omitempty"`
	DestName         *string   `json:"DestName,omitempty" xml:"DestName,omitempty"`
	FilterColumns    []*string `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	LogicTableId     *string   `json:"LogicTableId,omitempty" xml:"LogicTableId,omitempty"`
	ShardColumns     []*string `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	SourceEndpointId *string   `json:"SourceEndpointId,omitempty" xml:"SourceEndpointId,omitempty"`
	TableName        *string   `json:"TableName,omitempty" xml:"TableName,omitempty"`
	TenantName       *string   `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	WhereClause      *string   `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyDataTableEtlList) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyDataTableEtlList) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetDatabase(v string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.Database = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetDestDatabase(v string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.DestDatabase = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetDestName(v string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.DestName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetFilterColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.FilterColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetLogicTableId(v string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.LogicTableId = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetShardColumns(v []*string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.ShardColumns = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetSourceEndpointId(v string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.SourceEndpointId = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetTableName(v string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.TableName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetTenantName(v string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.TenantName = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyDataTableEtlList) SetWhereClause(v string) *ListProjectModifyRecordsResponseBodyDataTableEtlList {
	s.WhereClause = &v
	return s
}

type ListProjectModifyRecordsResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ListProjectModifyRecordsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetCode(v string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetLevel(v string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetMessage(v string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetMessageMcmsKey(v string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetProposal(v string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetProposalMcmsKey(v string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetReason(v string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetReasonMcmsKey(v string) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ListProjectModifyRecordsResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *ListProjectModifyRecordsResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ListProjectModifyRecordsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectModifyRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectModifyRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectModifyRecordsResponse) GoString() string {
	return s.String()
}

func (s *ListProjectModifyRecordsResponse) SetHeaders(v map[string]*string) *ListProjectModifyRecordsResponse {
	s.Headers = v
	return s
}

func (s *ListProjectModifyRecordsResponse) SetStatusCode(v int32) *ListProjectModifyRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectModifyRecordsResponse) SetBody(v *ListProjectModifyRecordsResponseBody) *ListProjectModifyRecordsResponse {
	s.Body = v
	return s
}

type ListProjectsRequest struct {
	LabelIds            []*string `json:"LabelIds,omitempty" xml:"LabelIds,omitempty" type:"Repeated"`
	Order               *string   `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNumber          *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchKey           *string   `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	SinkEndpointTypes   []*string `json:"SinkEndpointTypes,omitempty" xml:"SinkEndpointTypes,omitempty" type:"Repeated"`
	SortField           *string   `json:"SortField,omitempty" xml:"SortField,omitempty"`
	SourceEndpointTypes []*string `json:"SourceEndpointTypes,omitempty" xml:"SourceEndpointTypes,omitempty" type:"Repeated"`
	Status              []*string `json:"Status,omitempty" xml:"Status,omitempty" type:"Repeated"`
	Type                *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	VisibleSubProject   *bool     `json:"VisibleSubProject,omitempty" xml:"VisibleSubProject,omitempty"`
}

func (s ListProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsRequest) GoString() string {
	return s.String()
}

func (s *ListProjectsRequest) SetLabelIds(v []*string) *ListProjectsRequest {
	s.LabelIds = v
	return s
}

func (s *ListProjectsRequest) SetOrder(v string) *ListProjectsRequest {
	s.Order = &v
	return s
}

func (s *ListProjectsRequest) SetPageNumber(v int32) *ListProjectsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectsRequest) SetPageSize(v int32) *ListProjectsRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectsRequest) SetSearchKey(v string) *ListProjectsRequest {
	s.SearchKey = &v
	return s
}

func (s *ListProjectsRequest) SetSinkEndpointTypes(v []*string) *ListProjectsRequest {
	s.SinkEndpointTypes = v
	return s
}

func (s *ListProjectsRequest) SetSortField(v string) *ListProjectsRequest {
	s.SortField = &v
	return s
}

func (s *ListProjectsRequest) SetSourceEndpointTypes(v []*string) *ListProjectsRequest {
	s.SourceEndpointTypes = v
	return s
}

func (s *ListProjectsRequest) SetStatus(v []*string) *ListProjectsRequest {
	s.Status = v
	return s
}

func (s *ListProjectsRequest) SetType(v string) *ListProjectsRequest {
	s.Type = &v
	return s
}

func (s *ListProjectsRequest) SetVisibleSubProject(v bool) *ListProjectsRequest {
	s.VisibleSubProject = &v
	return s
}

type ListProjectsShrinkRequest struct {
	LabelIdsShrink            *string `json:"LabelIds,omitempty" xml:"LabelIds,omitempty"`
	Order                     *string `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNumber                *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchKey                 *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	SinkEndpointTypesShrink   *string `json:"SinkEndpointTypes,omitempty" xml:"SinkEndpointTypes,omitempty"`
	SortField                 *string `json:"SortField,omitempty" xml:"SortField,omitempty"`
	SourceEndpointTypesShrink *string `json:"SourceEndpointTypes,omitempty" xml:"SourceEndpointTypes,omitempty"`
	StatusShrink              *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	VisibleSubProject         *bool   `json:"VisibleSubProject,omitempty" xml:"VisibleSubProject,omitempty"`
}

func (s ListProjectsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListProjectsShrinkRequest) SetLabelIdsShrink(v string) *ListProjectsShrinkRequest {
	s.LabelIdsShrink = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetOrder(v string) *ListProjectsShrinkRequest {
	s.Order = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetPageNumber(v int32) *ListProjectsShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetPageSize(v int32) *ListProjectsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetSearchKey(v string) *ListProjectsShrinkRequest {
	s.SearchKey = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetSinkEndpointTypesShrink(v string) *ListProjectsShrinkRequest {
	s.SinkEndpointTypesShrink = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetSortField(v string) *ListProjectsShrinkRequest {
	s.SortField = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetSourceEndpointTypesShrink(v string) *ListProjectsShrinkRequest {
	s.SourceEndpointTypesShrink = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetStatusShrink(v string) *ListProjectsShrinkRequest {
	s.StatusShrink = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetType(v string) *ListProjectsShrinkRequest {
	s.Type = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetVisibleSubProject(v bool) *ListProjectsShrinkRequest {
	s.VisibleSubProject = &v
	return s
}

type ListProjectsResponseBody struct {
	Advice      *string                              `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                              `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        []*ListProjectsResponseBodyData      `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorDetail *ListProjectsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBody) SetAdvice(v string) *ListProjectsResponseBody {
	s.Advice = &v
	return s
}

func (s *ListProjectsResponseBody) SetCode(v string) *ListProjectsResponseBody {
	s.Code = &v
	return s
}

func (s *ListProjectsResponseBody) SetCost(v string) *ListProjectsResponseBody {
	s.Cost = &v
	return s
}

func (s *ListProjectsResponseBody) SetData(v []*ListProjectsResponseBodyData) *ListProjectsResponseBody {
	s.Data = v
	return s
}

func (s *ListProjectsResponseBody) SetErrorDetail(v *ListProjectsResponseBodyErrorDetail) *ListProjectsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ListProjectsResponseBody) SetMessage(v string) *ListProjectsResponseBody {
	s.Message = &v
	return s
}

func (s *ListProjectsResponseBody) SetPageNumber(v int32) *ListProjectsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListProjectsResponseBody) SetPageSize(v int32) *ListProjectsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListProjectsResponseBody) SetRequestId(v string) *ListProjectsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProjectsResponseBody) SetSuccess(v bool) *ListProjectsResponseBody {
	s.Success = &v
	return s
}

func (s *ListProjectsResponseBody) SetTotalCount(v int64) *ListProjectsResponseBody {
	s.TotalCount = &v
	return s
}

type ListProjectsResponseBodyData struct {
	AlarmStats                *ListProjectsResponseBodyDataAlarmStats           `json:"AlarmStats,omitempty" xml:"AlarmStats,omitempty" type:"Struct"`
	CommonTransferConfig      *ListProjectsResponseBodyDataCommonTransferConfig `json:"CommonTransferConfig,omitempty" xml:"CommonTransferConfig,omitempty" type:"Struct"`
	DestConnId                *string                                           `json:"DestConnId,omitempty" xml:"DestConnId,omitempty"`
	EnableFullTransfer        *bool                                             `json:"EnableFullTransfer,omitempty" xml:"EnableFullTransfer,omitempty"`
	EnableFullVerify          *bool                                             `json:"EnableFullVerify,omitempty" xml:"EnableFullVerify,omitempty"`
	EnableIncrTransfer        *bool                                             `json:"EnableIncrTransfer,omitempty" xml:"EnableIncrTransfer,omitempty"`
	EnableIncrVerify          *bool                                             `json:"EnableIncrVerify,omitempty" xml:"EnableIncrVerify,omitempty"`
	EnableReverseIncrTransfer *bool                                             `json:"EnableReverseIncrTransfer,omitempty" xml:"EnableReverseIncrTransfer,omitempty"`
	EnableStructTransfer      *bool                                             `json:"EnableStructTransfer,omitempty" xml:"EnableStructTransfer,omitempty"`
	ExtraInfo                 *ListProjectsResponseBodyDataExtraInfo            `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty" type:"Struct"`
	FullTransferConfig        *ListProjectsResponseBodyDataFullTransferConfig   `json:"FullTransferConfig,omitempty" xml:"FullTransferConfig,omitempty" type:"Struct"`
	GmtCreate                 *string                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtFinish                 *string                                           `json:"GmtFinish,omitempty" xml:"GmtFinish,omitempty"`
	GmtModified               *string                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtStart                  *string                                           `json:"GmtStart,omitempty" xml:"GmtStart,omitempty"`
	Id                        *string                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	Importance                *string                                           `json:"Importance,omitempty" xml:"Importance,omitempty"`
	IncrTransferConfig        *ListProjectsResponseBodyDataIncrTransferConfig   `json:"IncrTransferConfig,omitempty" xml:"IncrTransferConfig,omitempty" type:"Struct"`
	IsMerging                 *bool                                             `json:"IsMerging,omitempty" xml:"IsMerging,omitempty"`
	IsModifying               *bool                                             `json:"IsModifying,omitempty" xml:"IsModifying,omitempty"`
	IsSubProject              *bool                                             `json:"IsSubProject,omitempty" xml:"IsSubProject,omitempty"`
	Labels                    []*ListProjectsResponseBodyDataLabels             `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	Name                      *string                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	Owner                     *string                                           `json:"Owner,omitempty" xml:"Owner,omitempty"`
	SinkConnectInfo           *ListProjectsResponseBodyDataSinkConnectInfo      `json:"SinkConnectInfo,omitempty" xml:"SinkConnectInfo,omitempty" type:"Struct"`
	SinkEndpointType          *string                                           `json:"SinkEndpointType,omitempty" xml:"SinkEndpointType,omitempty"`
	SourceConnectInfo         *ListProjectsResponseBodyDataSourceConnectInfo    `json:"SourceConnectInfo,omitempty" xml:"SourceConnectInfo,omitempty" type:"Struct"`
	SourceEndpointType        *string                                           `json:"SourceEndpointType,omitempty" xml:"SourceEndpointType,omitempty"`
	Status                    *string                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	Steps                     []*ListProjectsResponseBodyDataSteps              `json:"Steps,omitempty" xml:"Steps,omitempty" type:"Repeated"`
	StructTransferConfig      *ListProjectsResponseBodyDataStructTransferConfig `json:"StructTransferConfig,omitempty" xml:"StructTransferConfig,omitempty" type:"Struct"`
	TransferMapping           *ListProjectsResponseBodyDataTransferMapping      `json:"TransferMapping,omitempty" xml:"TransferMapping,omitempty" type:"Struct"`
	Type                      *string                                           `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkerGradeId             *string                                           `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s ListProjectsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyData) SetAlarmStats(v *ListProjectsResponseBodyDataAlarmStats) *ListProjectsResponseBodyData {
	s.AlarmStats = v
	return s
}

func (s *ListProjectsResponseBodyData) SetCommonTransferConfig(v *ListProjectsResponseBodyDataCommonTransferConfig) *ListProjectsResponseBodyData {
	s.CommonTransferConfig = v
	return s
}

func (s *ListProjectsResponseBodyData) SetDestConnId(v string) *ListProjectsResponseBodyData {
	s.DestConnId = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetEnableFullTransfer(v bool) *ListProjectsResponseBodyData {
	s.EnableFullTransfer = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetEnableFullVerify(v bool) *ListProjectsResponseBodyData {
	s.EnableFullVerify = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetEnableIncrTransfer(v bool) *ListProjectsResponseBodyData {
	s.EnableIncrTransfer = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetEnableIncrVerify(v bool) *ListProjectsResponseBodyData {
	s.EnableIncrVerify = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetEnableReverseIncrTransfer(v bool) *ListProjectsResponseBodyData {
	s.EnableReverseIncrTransfer = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetEnableStructTransfer(v bool) *ListProjectsResponseBodyData {
	s.EnableStructTransfer = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetExtraInfo(v *ListProjectsResponseBodyDataExtraInfo) *ListProjectsResponseBodyData {
	s.ExtraInfo = v
	return s
}

func (s *ListProjectsResponseBodyData) SetFullTransferConfig(v *ListProjectsResponseBodyDataFullTransferConfig) *ListProjectsResponseBodyData {
	s.FullTransferConfig = v
	return s
}

func (s *ListProjectsResponseBodyData) SetGmtCreate(v string) *ListProjectsResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetGmtFinish(v string) *ListProjectsResponseBodyData {
	s.GmtFinish = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetGmtModified(v string) *ListProjectsResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetGmtStart(v string) *ListProjectsResponseBodyData {
	s.GmtStart = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetId(v string) *ListProjectsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetImportance(v string) *ListProjectsResponseBodyData {
	s.Importance = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetIncrTransferConfig(v *ListProjectsResponseBodyDataIncrTransferConfig) *ListProjectsResponseBodyData {
	s.IncrTransferConfig = v
	return s
}

func (s *ListProjectsResponseBodyData) SetIsMerging(v bool) *ListProjectsResponseBodyData {
	s.IsMerging = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetIsModifying(v bool) *ListProjectsResponseBodyData {
	s.IsModifying = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetIsSubProject(v bool) *ListProjectsResponseBodyData {
	s.IsSubProject = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetLabels(v []*ListProjectsResponseBodyDataLabels) *ListProjectsResponseBodyData {
	s.Labels = v
	return s
}

func (s *ListProjectsResponseBodyData) SetName(v string) *ListProjectsResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetOwner(v string) *ListProjectsResponseBodyData {
	s.Owner = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetSinkConnectInfo(v *ListProjectsResponseBodyDataSinkConnectInfo) *ListProjectsResponseBodyData {
	s.SinkConnectInfo = v
	return s
}

func (s *ListProjectsResponseBodyData) SetSinkEndpointType(v string) *ListProjectsResponseBodyData {
	s.SinkEndpointType = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetSourceConnectInfo(v *ListProjectsResponseBodyDataSourceConnectInfo) *ListProjectsResponseBodyData {
	s.SourceConnectInfo = v
	return s
}

func (s *ListProjectsResponseBodyData) SetSourceEndpointType(v string) *ListProjectsResponseBodyData {
	s.SourceEndpointType = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetStatus(v string) *ListProjectsResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetSteps(v []*ListProjectsResponseBodyDataSteps) *ListProjectsResponseBodyData {
	s.Steps = v
	return s
}

func (s *ListProjectsResponseBodyData) SetStructTransferConfig(v *ListProjectsResponseBodyDataStructTransferConfig) *ListProjectsResponseBodyData {
	s.StructTransferConfig = v
	return s
}

func (s *ListProjectsResponseBodyData) SetTransferMapping(v *ListProjectsResponseBodyDataTransferMapping) *ListProjectsResponseBodyData {
	s.TransferMapping = v
	return s
}

func (s *ListProjectsResponseBodyData) SetType(v string) *ListProjectsResponseBodyData {
	s.Type = &v
	return s
}

func (s *ListProjectsResponseBodyData) SetWorkerGradeId(v string) *ListProjectsResponseBodyData {
	s.WorkerGradeId = &v
	return s
}

type ListProjectsResponseBodyDataAlarmStats struct {
	AlarmContent               *string           `json:"AlarmContent,omitempty" xml:"AlarmContent,omitempty"`
	Alarming                   *bool             `json:"Alarming,omitempty" xml:"Alarming,omitempty"`
	OpenMonitor                *bool             `json:"OpenMonitor,omitempty" xml:"OpenMonitor,omitempty"`
	RecentlyTriggerCount       *int32            `json:"RecentlyTriggerCount,omitempty" xml:"RecentlyTriggerCount,omitempty"`
	RuleToRecentlyTriggerCount map[string]*int32 `json:"RuleToRecentlyTriggerCount,omitempty" xml:"RuleToRecentlyTriggerCount,omitempty"`
	Target                     *string           `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s ListProjectsResponseBodyDataAlarmStats) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataAlarmStats) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataAlarmStats) SetAlarmContent(v string) *ListProjectsResponseBodyDataAlarmStats {
	s.AlarmContent = &v
	return s
}

func (s *ListProjectsResponseBodyDataAlarmStats) SetAlarming(v bool) *ListProjectsResponseBodyDataAlarmStats {
	s.Alarming = &v
	return s
}

func (s *ListProjectsResponseBodyDataAlarmStats) SetOpenMonitor(v bool) *ListProjectsResponseBodyDataAlarmStats {
	s.OpenMonitor = &v
	return s
}

func (s *ListProjectsResponseBodyDataAlarmStats) SetRecentlyTriggerCount(v int32) *ListProjectsResponseBodyDataAlarmStats {
	s.RecentlyTriggerCount = &v
	return s
}

func (s *ListProjectsResponseBodyDataAlarmStats) SetRuleToRecentlyTriggerCount(v map[string]*int32) *ListProjectsResponseBodyDataAlarmStats {
	s.RuleToRecentlyTriggerCount = v
	return s
}

func (s *ListProjectsResponseBodyDataAlarmStats) SetTarget(v string) *ListProjectsResponseBodyDataAlarmStats {
	s.Target = &v
	return s
}

type ListProjectsResponseBodyDataCommonTransferConfig struct {
	ActiveActive           *bool   `json:"ActiveActive,omitempty" xml:"ActiveActive,omitempty"`
	DataWorksBusinessName  *string `json:"DataWorksBusinessName,omitempty" xml:"DataWorksBusinessName,omitempty"`
	DatahubTopicType       *string `json:"DatahubTopicType,omitempty" xml:"DatahubTopicType,omitempty"`
	MqPartition            *int32  `json:"MqPartition,omitempty" xml:"MqPartition,omitempty"`
	MqPartitionMode        *string `json:"MqPartitionMode,omitempty" xml:"MqPartitionMode,omitempty"`
	MqSerializerType       *string `json:"MqSerializerType,omitempty" xml:"MqSerializerType,omitempty"`
	RocketMqEnableMsgTrace *bool   `json:"RocketMqEnableMsgTrace,omitempty" xml:"RocketMqEnableMsgTrace,omitempty"`
	RocketMqMsgTags        *string `json:"RocketMqMsgTags,omitempty" xml:"RocketMqMsgTags,omitempty"`
	RocketMqProducerGroup  *string `json:"RocketMqProducerGroup,omitempty" xml:"RocketMqProducerGroup,omitempty"`
	RocketMqSendMsgTimeout *int64  `json:"RocketMqSendMsgTimeout,omitempty" xml:"RocketMqSendMsgTimeout,omitempty"`
	TableCategory          *string `json:"TableCategory,omitempty" xml:"TableCategory,omitempty"`
}

func (s ListProjectsResponseBodyDataCommonTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataCommonTransferConfig) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetActiveActive(v bool) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.ActiveActive = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetDataWorksBusinessName(v string) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.DataWorksBusinessName = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetDatahubTopicType(v string) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.DatahubTopicType = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetMqPartition(v int32) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.MqPartition = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetMqPartitionMode(v string) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.MqPartitionMode = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetMqSerializerType(v string) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.MqSerializerType = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetRocketMqEnableMsgTrace(v bool) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.RocketMqEnableMsgTrace = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetRocketMqMsgTags(v string) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.RocketMqMsgTags = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetRocketMqProducerGroup(v string) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.RocketMqProducerGroup = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetRocketMqSendMsgTimeout(v int64) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.RocketMqSendMsgTimeout = &v
	return s
}

func (s *ListProjectsResponseBodyDataCommonTransferConfig) SetTableCategory(v string) *ListProjectsResponseBodyDataCommonTransferConfig {
	s.TableCategory = &v
	return s
}

type ListProjectsResponseBodyDataExtraInfo struct {
	AccessObSource            *bool                                    `json:"AccessObSource,omitempty" xml:"AccessObSource,omitempty"`
	IgnoreUnsupportDdl        *bool                                    `json:"IgnoreUnsupportDdl,omitempty" xml:"IgnoreUnsupportDdl,omitempty"`
	IncrSyncTimestamp         *int64                                   `json:"IncrSyncTimestamp,omitempty" xml:"IncrSyncTimestamp,omitempty"`
	LogServiceStartCheckpoint *int64                                   `json:"LogServiceStartCheckpoint,omitempty" xml:"LogServiceStartCheckpoint,omitempty"`
	MaxConnectorCount         *int32                                   `json:"MaxConnectorCount,omitempty" xml:"MaxConnectorCount,omitempty"`
	MonitoringIncr            *bool                                    `json:"MonitoringIncr,omitempty" xml:"MonitoringIncr,omitempty"`
	OverwriteConfig           *bool                                    `json:"OverwriteConfig,omitempty" xml:"OverwriteConfig,omitempty"`
	ReverseSubtopics          []*string                                `json:"ReverseSubtopics,omitempty" xml:"ReverseSubtopics,omitempty" type:"Repeated"`
	RunningProgress           *int32                                   `json:"RunningProgress,omitempty" xml:"RunningProgress,omitempty"`
	RunningStep               *string                                  `json:"RunningStep,omitempty" xml:"RunningStep,omitempty"`
	SourceStoreKeptHour       *int32                                   `json:"SourceStoreKeptHour,omitempty" xml:"SourceStoreKeptHour,omitempty"`
	StoreIncr                 *bool                                    `json:"StoreIncr,omitempty" xml:"StoreIncr,omitempty"`
	SubConds                  map[string][]*DataExtraInfoSubCondsValue `json:"SubConds,omitempty" xml:"SubConds,omitempty"`
	SubDbs                    map[string][]*DataExtraInfoSubDbsValue   `json:"SubDbs,omitempty" xml:"SubDbs,omitempty"`
	SubIds                    map[string]*string                       `json:"SubIds,omitempty" xml:"SubIds,omitempty"`
	Subtopics                 []*string                                `json:"Subtopics,omitempty" xml:"Subtopics,omitempty" type:"Repeated"`
	SyncDelay                 *int64                                   `json:"SyncDelay,omitempty" xml:"SyncDelay,omitempty"`
	SyncDelaySampleTimestamp  *int64                                   `json:"SyncDelaySampleTimestamp,omitempty" xml:"SyncDelaySampleTimestamp,omitempty"`
}

func (s ListProjectsResponseBodyDataExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataExtraInfo) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetAccessObSource(v bool) *ListProjectsResponseBodyDataExtraInfo {
	s.AccessObSource = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetIgnoreUnsupportDdl(v bool) *ListProjectsResponseBodyDataExtraInfo {
	s.IgnoreUnsupportDdl = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetIncrSyncTimestamp(v int64) *ListProjectsResponseBodyDataExtraInfo {
	s.IncrSyncTimestamp = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetLogServiceStartCheckpoint(v int64) *ListProjectsResponseBodyDataExtraInfo {
	s.LogServiceStartCheckpoint = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetMaxConnectorCount(v int32) *ListProjectsResponseBodyDataExtraInfo {
	s.MaxConnectorCount = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetMonitoringIncr(v bool) *ListProjectsResponseBodyDataExtraInfo {
	s.MonitoringIncr = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetOverwriteConfig(v bool) *ListProjectsResponseBodyDataExtraInfo {
	s.OverwriteConfig = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetReverseSubtopics(v []*string) *ListProjectsResponseBodyDataExtraInfo {
	s.ReverseSubtopics = v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetRunningProgress(v int32) *ListProjectsResponseBodyDataExtraInfo {
	s.RunningProgress = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetRunningStep(v string) *ListProjectsResponseBodyDataExtraInfo {
	s.RunningStep = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetSourceStoreKeptHour(v int32) *ListProjectsResponseBodyDataExtraInfo {
	s.SourceStoreKeptHour = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetStoreIncr(v bool) *ListProjectsResponseBodyDataExtraInfo {
	s.StoreIncr = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetSubConds(v map[string][]*DataExtraInfoSubCondsValue) *ListProjectsResponseBodyDataExtraInfo {
	s.SubConds = v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetSubDbs(v map[string][]*DataExtraInfoSubDbsValue) *ListProjectsResponseBodyDataExtraInfo {
	s.SubDbs = v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetSubIds(v map[string]*string) *ListProjectsResponseBodyDataExtraInfo {
	s.SubIds = v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetSubtopics(v []*string) *ListProjectsResponseBodyDataExtraInfo {
	s.Subtopics = v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetSyncDelay(v int64) *ListProjectsResponseBodyDataExtraInfo {
	s.SyncDelay = &v
	return s
}

func (s *ListProjectsResponseBodyDataExtraInfo) SetSyncDelaySampleTimestamp(v int64) *ListProjectsResponseBodyDataExtraInfo {
	s.SyncDelaySampleTimestamp = &v
	return s
}

type ListProjectsResponseBodyDataFullTransferConfig struct {
	AllowDestTableNotEmpty   *bool   `json:"AllowDestTableNotEmpty,omitempty" xml:"AllowDestTableNotEmpty,omitempty"`
	FullTransferSpeedMode    *string `json:"FullTransferSpeedMode,omitempty" xml:"FullTransferSpeedMode,omitempty"`
	FullVerifySpeedMode      *string `json:"FullVerifySpeedMode,omitempty" xml:"FullVerifySpeedMode,omitempty"`
	NonePkUkTruncateDstTable *bool   `json:"NonePkUkTruncateDstTable,omitempty" xml:"NonePkUkTruncateDstTable,omitempty"`
}

func (s ListProjectsResponseBodyDataFullTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataFullTransferConfig) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataFullTransferConfig) SetAllowDestTableNotEmpty(v bool) *ListProjectsResponseBodyDataFullTransferConfig {
	s.AllowDestTableNotEmpty = &v
	return s
}

func (s *ListProjectsResponseBodyDataFullTransferConfig) SetFullTransferSpeedMode(v string) *ListProjectsResponseBodyDataFullTransferConfig {
	s.FullTransferSpeedMode = &v
	return s
}

func (s *ListProjectsResponseBodyDataFullTransferConfig) SetFullVerifySpeedMode(v string) *ListProjectsResponseBodyDataFullTransferConfig {
	s.FullVerifySpeedMode = &v
	return s
}

func (s *ListProjectsResponseBodyDataFullTransferConfig) SetNonePkUkTruncateDstTable(v bool) *ListProjectsResponseBodyDataFullTransferConfig {
	s.NonePkUkTruncateDstTable = &v
	return s
}

type ListProjectsResponseBodyDataIncrTransferConfig struct {
	EnableIncrSyncStatistics  *bool     `json:"EnableIncrSyncStatistics,omitempty" xml:"EnableIncrSyncStatistics,omitempty"`
	EnableSequencingWithinTxn *bool     `json:"EnableSequencingWithinTxn,omitempty" xml:"EnableSequencingWithinTxn,omitempty"`
	IncrSyncConcurrency       *int32    `json:"IncrSyncConcurrency,omitempty" xml:"IncrSyncConcurrency,omitempty"`
	RecordTypeWhiteList       []*string `json:"RecordTypeWhiteList,omitempty" xml:"RecordTypeWhiteList,omitempty" type:"Repeated"`
	StartTimestamp            *int64    `json:"StartTimestamp,omitempty" xml:"StartTimestamp,omitempty"`
	StoreLogKeptHour          *int32    `json:"StoreLogKeptHour,omitempty" xml:"StoreLogKeptHour,omitempty"`
}

func (s ListProjectsResponseBodyDataIncrTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataIncrTransferConfig) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataIncrTransferConfig) SetEnableIncrSyncStatistics(v bool) *ListProjectsResponseBodyDataIncrTransferConfig {
	s.EnableIncrSyncStatistics = &v
	return s
}

func (s *ListProjectsResponseBodyDataIncrTransferConfig) SetEnableSequencingWithinTxn(v bool) *ListProjectsResponseBodyDataIncrTransferConfig {
	s.EnableSequencingWithinTxn = &v
	return s
}

func (s *ListProjectsResponseBodyDataIncrTransferConfig) SetIncrSyncConcurrency(v int32) *ListProjectsResponseBodyDataIncrTransferConfig {
	s.IncrSyncConcurrency = &v
	return s
}

func (s *ListProjectsResponseBodyDataIncrTransferConfig) SetRecordTypeWhiteList(v []*string) *ListProjectsResponseBodyDataIncrTransferConfig {
	s.RecordTypeWhiteList = v
	return s
}

func (s *ListProjectsResponseBodyDataIncrTransferConfig) SetStartTimestamp(v int64) *ListProjectsResponseBodyDataIncrTransferConfig {
	s.StartTimestamp = &v
	return s
}

func (s *ListProjectsResponseBodyDataIncrTransferConfig) SetStoreLogKeptHour(v int32) *ListProjectsResponseBodyDataIncrTransferConfig {
	s.StoreLogKeptHour = &v
	return s
}

type ListProjectsResponseBodyDataLabels struct {
	Count   *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type    *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProjectsResponseBodyDataLabels) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataLabels) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataLabels) SetCount(v int32) *ListProjectsResponseBodyDataLabels {
	s.Count = &v
	return s
}

func (s *ListProjectsResponseBodyDataLabels) SetCreator(v string) *ListProjectsResponseBodyDataLabels {
	s.Creator = &v
	return s
}

func (s *ListProjectsResponseBodyDataLabels) SetId(v string) *ListProjectsResponseBodyDataLabels {
	s.Id = &v
	return s
}

func (s *ListProjectsResponseBodyDataLabels) SetName(v string) *ListProjectsResponseBodyDataLabels {
	s.Name = &v
	return s
}

func (s *ListProjectsResponseBodyDataLabels) SetType(v int32) *ListProjectsResponseBodyDataLabels {
	s.Type = &v
	return s
}

type ListProjectsResponseBodyDataSinkConnectInfo struct {
	Charset             *string     `json:"Charset,omitempty" xml:"Charset,omitempty"`
	ConnExtraAttributes interface{} `json:"ConnExtraAttributes,omitempty" xml:"ConnExtraAttributes,omitempty"`
	ConnectionInfo      *string     `json:"ConnectionInfo,omitempty" xml:"ConnectionInfo,omitempty"`
	DbEngine            *string     `json:"DbEngine,omitempty" xml:"DbEngine,omitempty"`
	EndpointId          *string     `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	EndpointName        *string     `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	EndpointSide        *string     `json:"EndpointSide,omitempty" xml:"EndpointSide,omitempty"`
	Host                *string     `json:"Host,omitempty" xml:"Host,omitempty"`
	Id                  *string     `json:"Id,omitempty" xml:"Id,omitempty"`
	NlsLengthSemantics  *string     `json:"NlsLengthSemantics,omitempty" xml:"NlsLengthSemantics,omitempty"`
	OcpName             *string     `json:"OcpName,omitempty" xml:"OcpName,omitempty"`
	OperatingSystem     *string     `json:"OperatingSystem,omitempty" xml:"OperatingSystem,omitempty"`
	// Owner。
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	Region        *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceOwner *string `json:"ResourceOwner,omitempty" xml:"ResourceOwner,omitempty"`
	Timezone      *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	Username      *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListProjectsResponseBodyDataSinkConnectInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataSinkConnectInfo) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetCharset(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.Charset = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetConnExtraAttributes(v interface{}) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.ConnExtraAttributes = v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetConnectionInfo(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.ConnectionInfo = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetDbEngine(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.DbEngine = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetEndpointId(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.EndpointId = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetEndpointName(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.EndpointName = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetEndpointSide(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.EndpointSide = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetHost(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.Host = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetId(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.Id = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetNlsLengthSemantics(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.NlsLengthSemantics = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetOcpName(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.OcpName = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetOperatingSystem(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.OperatingSystem = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetOwner(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.Owner = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetPort(v int32) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.Port = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetRegion(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.Region = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetResourceOwner(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.ResourceOwner = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetTimezone(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.Timezone = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetUsername(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.Username = &v
	return s
}

func (s *ListProjectsResponseBodyDataSinkConnectInfo) SetVersion(v string) *ListProjectsResponseBodyDataSinkConnectInfo {
	s.Version = &v
	return s
}

type ListProjectsResponseBodyDataSourceConnectInfo struct {
	Charset             *string     `json:"Charset,omitempty" xml:"Charset,omitempty"`
	ConnExtraAttributes interface{} `json:"ConnExtraAttributes,omitempty" xml:"ConnExtraAttributes,omitempty"`
	ConnectionInfo      *string     `json:"ConnectionInfo,omitempty" xml:"ConnectionInfo,omitempty"`
	DbEngine            *string     `json:"DbEngine,omitempty" xml:"DbEngine,omitempty"`
	EndpointId          *string     `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	EndpointName        *string     `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	EndpointSide        *string     `json:"EndpointSide,omitempty" xml:"EndpointSide,omitempty"`
	Host                *string     `json:"Host,omitempty" xml:"Host,omitempty"`
	Id                  *string     `json:"Id,omitempty" xml:"Id,omitempty"`
	NlsLengthSemantics  *string     `json:"NlsLengthSemantics,omitempty" xml:"NlsLengthSemantics,omitempty"`
	OcpName             *string     `json:"OcpName,omitempty" xml:"OcpName,omitempty"`
	OperatingSystem     *string     `json:"OperatingSystem,omitempty" xml:"OperatingSystem,omitempty"`
	// Owner。
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	Region        *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceOwner *string `json:"ResourceOwner,omitempty" xml:"ResourceOwner,omitempty"`
	Timezone      *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	Username      *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListProjectsResponseBodyDataSourceConnectInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataSourceConnectInfo) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetCharset(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.Charset = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetConnExtraAttributes(v interface{}) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.ConnExtraAttributes = v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetConnectionInfo(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.ConnectionInfo = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetDbEngine(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.DbEngine = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetEndpointId(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.EndpointId = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetEndpointName(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.EndpointName = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetEndpointSide(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.EndpointSide = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetHost(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.Host = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetId(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.Id = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetNlsLengthSemantics(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.NlsLengthSemantics = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetOcpName(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.OcpName = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetOperatingSystem(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.OperatingSystem = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetOwner(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.Owner = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetPort(v int32) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.Port = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetRegion(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.Region = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetResourceOwner(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.ResourceOwner = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetTimezone(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.Timezone = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetUsername(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.Username = &v
	return s
}

func (s *ListProjectsResponseBodyDataSourceConnectInfo) SetVersion(v string) *ListProjectsResponseBodyDataSourceConnectInfo {
	s.Version = &v
	return s
}

type ListProjectsResponseBodyDataSteps struct {
	Description *string                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	ExtraInfo   *ListProjectsResponseBodyDataStepsExtraInfo `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty" type:"Struct"`
	FinishTime  *string                                     `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Name        *string                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Order       *int32                                      `json:"Order,omitempty" xml:"Order,omitempty"`
	Progress    *int32                                      `json:"Progress,omitempty" xml:"Progress,omitempty"`
	StartTime   *string                                     `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status      *string                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	StepInfo    map[string]interface{}                      `json:"StepInfo,omitempty" xml:"StepInfo,omitempty"`
}

func (s ListProjectsResponseBodyDataSteps) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataSteps) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataSteps) SetDescription(v string) *ListProjectsResponseBodyDataSteps {
	s.Description = &v
	return s
}

func (s *ListProjectsResponseBodyDataSteps) SetExtraInfo(v *ListProjectsResponseBodyDataStepsExtraInfo) *ListProjectsResponseBodyDataSteps {
	s.ExtraInfo = v
	return s
}

func (s *ListProjectsResponseBodyDataSteps) SetFinishTime(v string) *ListProjectsResponseBodyDataSteps {
	s.FinishTime = &v
	return s
}

func (s *ListProjectsResponseBodyDataSteps) SetName(v string) *ListProjectsResponseBodyDataSteps {
	s.Name = &v
	return s
}

func (s *ListProjectsResponseBodyDataSteps) SetOrder(v int32) *ListProjectsResponseBodyDataSteps {
	s.Order = &v
	return s
}

func (s *ListProjectsResponseBodyDataSteps) SetProgress(v int32) *ListProjectsResponseBodyDataSteps {
	s.Progress = &v
	return s
}

func (s *ListProjectsResponseBodyDataSteps) SetStartTime(v string) *ListProjectsResponseBodyDataSteps {
	s.StartTime = &v
	return s
}

func (s *ListProjectsResponseBodyDataSteps) SetStatus(v string) *ListProjectsResponseBodyDataSteps {
	s.Status = &v
	return s
}

func (s *ListProjectsResponseBodyDataSteps) SetStepInfo(v map[string]interface{}) *ListProjectsResponseBodyDataSteps {
	s.StepInfo = v
	return s
}

type ListProjectsResponseBodyDataStepsExtraInfo struct {
	ErrorCode    *string                                                   `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorDetails []*ListProjectsResponseBodyDataStepsExtraInfoErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	ErrorMsg     *string                                                   `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	ErrorParam   map[string]*string                                        `json:"ErrorParam,omitempty" xml:"ErrorParam,omitempty"`
	FailedTime   *string                                                   `json:"FailedTime,omitempty" xml:"FailedTime,omitempty"`
}

func (s ListProjectsResponseBodyDataStepsExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataStepsExtraInfo) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataStepsExtraInfo) SetErrorCode(v string) *ListProjectsResponseBodyDataStepsExtraInfo {
	s.ErrorCode = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfo) SetErrorDetails(v []*ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) *ListProjectsResponseBodyDataStepsExtraInfo {
	s.ErrorDetails = v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfo) SetErrorMsg(v string) *ListProjectsResponseBodyDataStepsExtraInfo {
	s.ErrorMsg = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfo) SetErrorParam(v map[string]*string) *ListProjectsResponseBodyDataStepsExtraInfo {
	s.ErrorParam = v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfo) SetFailedTime(v string) *ListProjectsResponseBodyDataStepsExtraInfo {
	s.FailedTime = &v
	return s
}

type ListProjectsResponseBodyDataStepsExtraInfoErrorDetails struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetCode(v string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.Code = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetExtraContext(v map[string]interface{}) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.ExtraContext = v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetLevel(v string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.Level = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetMessage(v string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.Message = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetMessageMcmsContext(v map[string]*string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.MessageMcmsContext = v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetMessageMcmsKey(v string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.MessageMcmsKey = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetProposal(v string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.Proposal = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetProposalMcmsContext(v map[string]*string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.ProposalMcmsContext = v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetProposalMcmsKey(v string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetReason(v string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.Reason = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetReasonMcmsContext(v map[string]*string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.ReasonMcmsContext = v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetReasonMcmsKey(v string) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetUpstreamErrorDetail(v interface{}) *ListProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.UpstreamErrorDetail = v
	return s
}

type ListProjectsResponseBodyDataStructTransferConfig struct {
	ByteCharConvertStrategy *string `json:"ByteCharConvertStrategy,omitempty" xml:"ByteCharConvertStrategy,omitempty"`
	DeferIndexCreation      *bool   `json:"DeferIndexCreation,omitempty" xml:"DeferIndexCreation,omitempty"`
}

func (s ListProjectsResponseBodyDataStructTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataStructTransferConfig) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataStructTransferConfig) SetByteCharConvertStrategy(v string) *ListProjectsResponseBodyDataStructTransferConfig {
	s.ByteCharConvertStrategy = &v
	return s
}

func (s *ListProjectsResponseBodyDataStructTransferConfig) SetDeferIndexCreation(v bool) *ListProjectsResponseBodyDataStructTransferConfig {
	s.DeferIndexCreation = &v
	return s
}

type ListProjectsResponseBodyDataTransferMapping struct {
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s ListProjectsResponseBodyDataTransferMapping) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyDataTransferMapping) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyDataTransferMapping) SetMode(v string) *ListProjectsResponseBodyDataTransferMapping {
	s.Mode = &v
	return s
}

type ListProjectsResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ListProjectsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyErrorDetail) SetCode(v string) *ListProjectsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *ListProjectsResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetLevel(v string) *ListProjectsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetMessage(v string) *ListProjectsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *ListProjectsResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetMessageMcmsKey(v string) *ListProjectsResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetProposal(v string) *ListProjectsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *ListProjectsResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetProposalMcmsKey(v string) *ListProjectsResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetReason(v string) *ListProjectsResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *ListProjectsResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetReasonMcmsKey(v string) *ListProjectsResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ListProjectsResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *ListProjectsResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ListProjectsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponse) GoString() string {
	return s.String()
}

func (s *ListProjectsResponse) SetHeaders(v map[string]*string) *ListProjectsResponse {
	s.Headers = v
	return s
}

func (s *ListProjectsResponse) SetStatusCode(v int32) *ListProjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectsResponse) SetBody(v *ListProjectsResponseBody) *ListProjectsResponse {
	s.Body = v
	return s
}

type ListWorkerInstancesRequest struct {
	DestType     *string   `json:"DestType,omitempty" xml:"DestType,omitempty"`
	InstanceName *string   `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	OnlyBindable *bool     `json:"OnlyBindable,omitempty" xml:"OnlyBindable,omitempty"`
	PageNumber   *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SourceType   *string   `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Specs        []*string `json:"Specs,omitempty" xml:"Specs,omitempty" type:"Repeated"`
}

func (s ListWorkerInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkerInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListWorkerInstancesRequest) SetDestType(v string) *ListWorkerInstancesRequest {
	s.DestType = &v
	return s
}

func (s *ListWorkerInstancesRequest) SetInstanceName(v string) *ListWorkerInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *ListWorkerInstancesRequest) SetOnlyBindable(v bool) *ListWorkerInstancesRequest {
	s.OnlyBindable = &v
	return s
}

func (s *ListWorkerInstancesRequest) SetPageNumber(v int32) *ListWorkerInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListWorkerInstancesRequest) SetPageSize(v int32) *ListWorkerInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ListWorkerInstancesRequest) SetSourceType(v string) *ListWorkerInstancesRequest {
	s.SourceType = &v
	return s
}

func (s *ListWorkerInstancesRequest) SetSpecs(v []*string) *ListWorkerInstancesRequest {
	s.Specs = v
	return s
}

type ListWorkerInstancesShrinkRequest struct {
	DestType     *string `json:"DestType,omitempty" xml:"DestType,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	OnlyBindable *bool   `json:"OnlyBindable,omitempty" xml:"OnlyBindable,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SourceType   *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	SpecsShrink  *string `json:"Specs,omitempty" xml:"Specs,omitempty"`
}

func (s ListWorkerInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkerInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListWorkerInstancesShrinkRequest) SetDestType(v string) *ListWorkerInstancesShrinkRequest {
	s.DestType = &v
	return s
}

func (s *ListWorkerInstancesShrinkRequest) SetInstanceName(v string) *ListWorkerInstancesShrinkRequest {
	s.InstanceName = &v
	return s
}

func (s *ListWorkerInstancesShrinkRequest) SetOnlyBindable(v bool) *ListWorkerInstancesShrinkRequest {
	s.OnlyBindable = &v
	return s
}

func (s *ListWorkerInstancesShrinkRequest) SetPageNumber(v int32) *ListWorkerInstancesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListWorkerInstancesShrinkRequest) SetPageSize(v int32) *ListWorkerInstancesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListWorkerInstancesShrinkRequest) SetSourceType(v string) *ListWorkerInstancesShrinkRequest {
	s.SourceType = &v
	return s
}

func (s *ListWorkerInstancesShrinkRequest) SetSpecsShrink(v string) *ListWorkerInstancesShrinkRequest {
	s.SpecsShrink = &v
	return s
}

type ListWorkerInstancesResponseBody struct {
	Advice      *string                                     `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                     `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        []*ListWorkerInstancesResponseBodyData      `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorDetail *ListWorkerInstancesResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListWorkerInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkerInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkerInstancesResponseBody) SetAdvice(v string) *ListWorkerInstancesResponseBody {
	s.Advice = &v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetCode(v string) *ListWorkerInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetCost(v string) *ListWorkerInstancesResponseBody {
	s.Cost = &v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetData(v []*ListWorkerInstancesResponseBodyData) *ListWorkerInstancesResponseBody {
	s.Data = v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetErrorDetail(v *ListWorkerInstancesResponseBodyErrorDetail) *ListWorkerInstancesResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetMessage(v string) *ListWorkerInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetPageNumber(v int32) *ListWorkerInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetPageSize(v int32) *ListWorkerInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetRequestId(v string) *ListWorkerInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetSuccess(v bool) *ListWorkerInstancesResponseBody {
	s.Success = &v
	return s
}

func (s *ListWorkerInstancesResponseBody) SetTotalCount(v int64) *ListWorkerInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type ListWorkerInstancesResponseBodyData struct {
	GmtCreate   *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId   *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	Region      *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Spec        *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListWorkerInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListWorkerInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListWorkerInstancesResponseBodyData) SetGmtCreate(v string) *ListWorkerInstancesResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyData) SetId(v string) *ListWorkerInstancesResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyData) SetName(v string) *ListWorkerInstancesResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyData) SetProjectId(v string) *ListWorkerInstancesResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyData) SetProjectName(v string) *ListWorkerInstancesResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyData) SetProjectType(v string) *ListWorkerInstancesResponseBodyData {
	s.ProjectType = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyData) SetRegion(v string) *ListWorkerInstancesResponseBodyData {
	s.Region = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyData) SetSpec(v string) *ListWorkerInstancesResponseBodyData {
	s.Spec = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyData) SetStatus(v string) *ListWorkerInstancesResponseBodyData {
	s.Status = &v
	return s
}

type ListWorkerInstancesResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ListWorkerInstancesResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ListWorkerInstancesResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetCode(v string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *ListWorkerInstancesResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetLevel(v string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetMessage(v string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetMessageMcmsKey(v string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetProposal(v string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetProposalMcmsKey(v string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetReason(v string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetReasonMcmsKey(v string) *ListWorkerInstancesResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ListWorkerInstancesResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *ListWorkerInstancesResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ListWorkerInstancesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkerInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkerInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkerInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListWorkerInstancesResponse) SetHeaders(v map[string]*string) *ListWorkerInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListWorkerInstancesResponse) SetStatusCode(v int32) *ListWorkerInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkerInstancesResponse) SetBody(v *ListWorkerInstancesResponseBody) *ListWorkerInstancesResponse {
	s.Body = v
	return s
}

type ModifyDatabaseDescriptionRequest struct {
	// Example 1
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The description of the database.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The operation that you want to perform.
	// Set the value to **ModifyDatabaseDescription**.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ModifyDatabaseDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseDescriptionRequest) SetDatabaseName(v string) *ModifyDatabaseDescriptionRequest {
	s.DatabaseName = &v
	return s
}

func (s *ModifyDatabaseDescriptionRequest) SetDescription(v string) *ModifyDatabaseDescriptionRequest {
	s.Description = &v
	return s
}

func (s *ModifyDatabaseDescriptionRequest) SetInstanceId(v string) *ModifyDatabaseDescriptionRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyDatabaseDescriptionRequest) SetTenantId(v string) *ModifyDatabaseDescriptionRequest {
	s.TenantId = &v
	return s
}

type ModifyDatabaseDescriptionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDatabaseDescriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseDescriptionResponseBody) SetRequestId(v string) *ModifyDatabaseDescriptionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDatabaseDescriptionResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDatabaseDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDatabaseDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseDescriptionResponse) SetHeaders(v map[string]*string) *ModifyDatabaseDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatabaseDescriptionResponse) SetStatusCode(v int32) *ModifyDatabaseDescriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatabaseDescriptionResponse) SetBody(v *ModifyDatabaseDescriptionResponseBody) *ModifyDatabaseDescriptionResponse {
	s.Body = v
	return s
}

type ModifyDatabaseUserRolesRequest struct {
	// The ID of the tenant.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The account information.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// A list of usernames and their respective roles.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The ID of the OceanBase cluster.
	Users *string `json:"Users,omitempty" xml:"Users,omitempty"`
}

func (s ModifyDatabaseUserRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseUserRolesRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseUserRolesRequest) SetDatabaseName(v string) *ModifyDatabaseUserRolesRequest {
	s.DatabaseName = &v
	return s
}

func (s *ModifyDatabaseUserRolesRequest) SetInstanceId(v string) *ModifyDatabaseUserRolesRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyDatabaseUserRolesRequest) SetTenantId(v string) *ModifyDatabaseUserRolesRequest {
	s.TenantId = &v
	return s
}

func (s *ModifyDatabaseUserRolesRequest) SetUsers(v string) *ModifyDatabaseUserRolesRequest {
	s.Users = &v
	return s
}

type ModifyDatabaseUserRolesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The name of the database.
	TenantUser *ModifyDatabaseUserRolesResponseBodyTenantUser `json:"TenantUser,omitempty" xml:"TenantUser,omitempty" type:"Struct"`
}

func (s ModifyDatabaseUserRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseUserRolesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseUserRolesResponseBody) SetRequestId(v string) *ModifyDatabaseUserRolesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDatabaseUserRolesResponseBody) SetTenantUser(v *ModifyDatabaseUserRolesResponseBodyTenantUser) *ModifyDatabaseUserRolesResponseBody {
	s.TenantUser = v
	return s
}

type ModifyDatabaseUserRolesResponseBodyTenantUser struct {
	// Example 1
	DatabaseName *string                                               `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	TenantId     *string                                               `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Users        []*ModifyDatabaseUserRolesResponseBodyTenantUserUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Repeated"`
}

func (s ModifyDatabaseUserRolesResponseBodyTenantUser) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseUserRolesResponseBodyTenantUser) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseUserRolesResponseBodyTenantUser) SetDatabaseName(v string) *ModifyDatabaseUserRolesResponseBodyTenantUser {
	s.DatabaseName = &v
	return s
}

func (s *ModifyDatabaseUserRolesResponseBodyTenantUser) SetTenantId(v string) *ModifyDatabaseUserRolesResponseBodyTenantUser {
	s.TenantId = &v
	return s
}

func (s *ModifyDatabaseUserRolesResponseBodyTenantUser) SetUsers(v []*ModifyDatabaseUserRolesResponseBodyTenantUserUsers) *ModifyDatabaseUserRolesResponseBodyTenantUser {
	s.Users = v
	return s
}

type ModifyDatabaseUserRolesResponseBodyTenantUserUsers struct {
	Role     *string `json:"Role,omitempty" xml:"Role,omitempty"`
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ModifyDatabaseUserRolesResponseBodyTenantUserUsers) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseUserRolesResponseBodyTenantUserUsers) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseUserRolesResponseBodyTenantUserUsers) SetRole(v string) *ModifyDatabaseUserRolesResponseBodyTenantUserUsers {
	s.Role = &v
	return s
}

func (s *ModifyDatabaseUserRolesResponseBodyTenantUserUsers) SetUserName(v string) *ModifyDatabaseUserRolesResponseBodyTenantUserUsers {
	s.UserName = &v
	return s
}

type ModifyDatabaseUserRolesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDatabaseUserRolesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDatabaseUserRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatabaseUserRolesResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatabaseUserRolesResponse) SetHeaders(v map[string]*string) *ModifyDatabaseUserRolesResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatabaseUserRolesResponse) SetStatusCode(v int32) *ModifyDatabaseUserRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatabaseUserRolesResponse) SetBody(v *ModifyDatabaseUserRolesResponseBody) *ModifyDatabaseUserRolesResponse {
	s.Body = v
	return s
}

type ModifyInstanceNameRequest struct {
	// It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
}

func (s ModifyInstanceNameRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNameRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNameRequest) SetInstanceId(v string) *ModifyInstanceNameRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceNameRequest) SetInstanceName(v string) *ModifyInstanceNameRequest {
	s.InstanceName = &v
	return s
}

type ModifyInstanceNameResponseBody struct {
	// The operation that you want to perform.
	// Set the value to **ModifyInstanceName**.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNameResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNameResponseBody) SetRequestId(v string) *ModifyInstanceNameResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceNameResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceNameResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNameResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNameResponse) SetHeaders(v map[string]*string) *ModifyInstanceNameResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceNameResponse) SetStatusCode(v int32) *ModifyInstanceNameResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceNameResponse) SetBody(v *ModifyInstanceNameResponseBody) *ModifyInstanceNameResponse {
	s.Body = v
	return s
}

type ModifyInstanceNodeNumRequest struct {
	// Specifies whether to perform only a dry run for the request. Default value: false. Valid values:
	// - true: Only a dry-run request is sent and the number of nodes in the instance is not modified. If the dry run succeeds, DryRunResult=true is returned. If the dry run fails, an error code is returned.
	// - false: The actual request is sent and no dry run is performed. The number of nodes is changed if the requirements are met. By default, the DryRunResult parameter returns false if you set DryRun to false.
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of nodes in the cluster. If the cluster is deployed in n-n-n mode, the number of nodes in the cluster equals n × 3.
	NodeNum *string `json:"NodeNum,omitempty" xml:"NodeNum,omitempty"`
}

func (s ModifyInstanceNodeNumRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNodeNumRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNodeNumRequest) SetDryRun(v bool) *ModifyInstanceNodeNumRequest {
	s.DryRun = &v
	return s
}

func (s *ModifyInstanceNodeNumRequest) SetInstanceId(v string) *ModifyInstanceNodeNumRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceNodeNumRequest) SetNodeNum(v string) *ModifyInstanceNodeNumRequest {
	s.NodeNum = &v
	return s
}

type ModifyInstanceNodeNumResponseBody struct {
	// The return result of the request.
	Data *ModifyInstanceNodeNumResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceNodeNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNodeNumResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNodeNumResponseBody) SetData(v *ModifyInstanceNodeNumResponseBodyData) *ModifyInstanceNodeNumResponseBody {
	s.Data = v
	return s
}

func (s *ModifyInstanceNodeNumResponseBody) SetRequestId(v string) *ModifyInstanceNodeNumResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceNodeNumResponseBodyData struct {
	// The result of the dry-run request.
	// - If the DryRun parameter is set to true and the dry run succeeds, the DryRunResult parameter returns true. Otherwise, an error code is returned.
	// - If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.
	DryRunResult *bool `json:"DryRunResult,omitempty" xml:"DryRunResult,omitempty"`
	// The ID of the order.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyInstanceNodeNumResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNodeNumResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNodeNumResponseBodyData) SetDryRunResult(v bool) *ModifyInstanceNodeNumResponseBodyData {
	s.DryRunResult = &v
	return s
}

func (s *ModifyInstanceNodeNumResponseBodyData) SetOrderId(v string) *ModifyInstanceNodeNumResponseBodyData {
	s.OrderId = &v
	return s
}

type ModifyInstanceNodeNumResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceNodeNumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceNodeNumResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNodeNumResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNodeNumResponse) SetHeaders(v map[string]*string) *ModifyInstanceNodeNumResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceNodeNumResponse) SetStatusCode(v int32) *ModifyInstanceNodeNumResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceNodeNumResponse) SetBody(v *ModifyInstanceNodeNumResponseBody) *ModifyInstanceNodeNumResponse {
	s.Body = v
	return s
}

type ModifyInstanceSpecRequest struct {
	// The size of the storage space, in GB. The required storage space varies based on the cluster specifications:
	// - 8C32G: 100 GB to 10 TB.
	// - 14C70G: 200 GB to 10 TB.
	// - 30C180G: 400 GB to 10 TB.
	// - 62C400G: 800 GB to 10 TB. The preceding minimum storage space sizes are the default storage space sizes of the corresponding cluster specification plans.
	DiskSize *int64 `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// Disk type.
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// Specifies whether to perform only a dry run for the request. Default value: false. Valid values:
	// - true: Only a dry-run request is sent and the instance settings are not modified. If the dry run succeeds, DryRunResult=true is returned. If the dry run fails, an error code is returned.
	// - false: If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The specifications of the cluster. You can specify one of the following four plans:
	// - 8C32GB: indicates 8 CPU cores and 32 GB of memory.
	// - 14C70GB: indicates 14 CPU cores and 70 GB of memory. This is the default value.
	// - 30C180GB: indicates 30 CPU cores and 180 GB of memory.
	// - 62C400GB: indicates 62 CPU cores and 400 GB of memory.
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ModifyInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecRequest) SetDiskSize(v int64) *ModifyInstanceSpecRequest {
	s.DiskSize = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetDiskType(v string) *ModifyInstanceSpecRequest {
	s.DiskType = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetDryRun(v bool) *ModifyInstanceSpecRequest {
	s.DryRun = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceClass(v string) *ModifyInstanceSpecRequest {
	s.InstanceClass = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceId(v string) *ModifyInstanceSpecRequest {
	s.InstanceId = &v
	return s
}

type ModifyInstanceSpecResponseBody struct {
	// The return data of the request.
	Data *ModifyInstanceSpecResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponseBody) SetData(v *ModifyInstanceSpecResponseBodyData) *ModifyInstanceSpecResponseBody {
	s.Data = v
	return s
}

func (s *ModifyInstanceSpecResponseBody) SetRequestId(v string) *ModifyInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceSpecResponseBodyData struct {
	// The result of the dry-run request.
	// - If the DryRun parameter is set to true and the dry run succeeds, the DryRunResult parameter returns true. Otherwise, an error code is returned.
	// - If the DryRun parameter is set to false, no dry run is performed and the DryRunResult parameter returns false.
	DryRunResult *bool `json:"DryRunResult,omitempty" xml:"DryRunResult,omitempty"`
	// The ID of the order that you have placed.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyInstanceSpecResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponseBodyData) SetDryRunResult(v bool) *ModifyInstanceSpecResponseBodyData {
	s.DryRunResult = &v
	return s
}

func (s *ModifyInstanceSpecResponseBodyData) SetOrderId(v string) *ModifyInstanceSpecResponseBodyData {
	s.OrderId = &v
	return s
}

type ModifyInstanceSpecResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponse) SetHeaders(v map[string]*string) *ModifyInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceSpecResponse) SetStatusCode(v int32) *ModifyInstanceSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceSpecResponse) SetBody(v *ModifyInstanceSpecResponseBody) *ModifyInstanceSpecResponse {
	s.Body = v
	return s
}

type ModifyInstanceTagsRequest struct {
	// The tags.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// You can call this operation to modify the value of the cluster tags.
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ModifyInstanceTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceTagsRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceTagsRequest) SetInstanceId(v string) *ModifyInstanceTagsRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceTagsRequest) SetTags(v string) *ModifyInstanceTagsRequest {
	s.Tags = &v
	return s
}

type ModifyInstanceTagsResponseBody struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceTagsResponseBody) SetMessage(v string) *ModifyInstanceTagsResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyInstanceTagsResponseBody) SetRequestId(v string) *ModifyInstanceTagsResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceTagsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceTagsResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceTagsResponse) SetHeaders(v map[string]*string) *ModifyInstanceTagsResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceTagsResponse) SetStatusCode(v int32) *ModifyInstanceTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceTagsResponse) SetBody(v *ModifyInstanceTagsResponseBody) *ModifyInstanceTagsResponse {
	s.Body = v
	return s
}

type ModifyInstanceTemporaryCapacityRequest struct {
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The disk size. Unit: GB.
	DiskSize *string `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specification.
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s ModifyInstanceTemporaryCapacityRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceTemporaryCapacityRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceTemporaryCapacityRequest) SetAcceptLanguage(v string) *ModifyInstanceTemporaryCapacityRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *ModifyInstanceTemporaryCapacityRequest) SetDiskSize(v string) *ModifyInstanceTemporaryCapacityRequest {
	s.DiskSize = &v
	return s
}

func (s *ModifyInstanceTemporaryCapacityRequest) SetInstanceId(v string) *ModifyInstanceTemporaryCapacityRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceTemporaryCapacityRequest) SetSpec(v string) *ModifyInstanceTemporaryCapacityRequest {
	s.Spec = &v
	return s
}

type ModifyInstanceTemporaryCapacityResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceTemporaryCapacityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceTemporaryCapacityResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceTemporaryCapacityResponseBody) SetRequestId(v string) *ModifyInstanceTemporaryCapacityResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceTemporaryCapacityResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceTemporaryCapacityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceTemporaryCapacityResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceTemporaryCapacityResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceTemporaryCapacityResponse) SetHeaders(v map[string]*string) *ModifyInstanceTemporaryCapacityResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceTemporaryCapacityResponse) SetStatusCode(v int32) *ModifyInstanceTemporaryCapacityResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceTemporaryCapacityResponse) SetBody(v *ModifyInstanceTemporaryCapacityResponseBody) *ModifyInstanceTemporaryCapacityResponse {
	s.Body = v
	return s
}

type ModifyParametersRequest struct {
	// The ID of the OceanBase cluster.
	Dimension *string `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The cause of the modification failure.
	DimensionValue *string `json:"DimensionValue,omitempty" xml:"DimensionValue,omitempty"`
	// Alibaba Cloud CLI
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The resource ID of the parameter type.
	// You can leave this parameter unspecified when you call this operation to modify cluster parameters. In the case of tenant parameters, pass the tenant ID.
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
}

func (s ModifyParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyParametersRequest) GoString() string {
	return s.String()
}

func (s *ModifyParametersRequest) SetDimension(v string) *ModifyParametersRequest {
	s.Dimension = &v
	return s
}

func (s *ModifyParametersRequest) SetDimensionValue(v string) *ModifyParametersRequest {
	s.DimensionValue = &v
	return s
}

func (s *ModifyParametersRequest) SetInstanceId(v string) *ModifyParametersRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyParametersRequest) SetParameters(v string) *ModifyParametersRequest {
	s.Parameters = &v
	return s
}

type ModifyParametersResponseBody struct {
	// The operation that you want to perform.
	// Set the value to **ModifyParameters**.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Example 1
	Results *ModifyParametersResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
}

func (s ModifyParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyParametersResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyParametersResponseBody) SetRequestId(v string) *ModifyParametersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyParametersResponseBody) SetResults(v *ModifyParametersResponseBodyResults) *ModifyParametersResponseBody {
	s.Results = v
	return s
}

type ModifyParametersResponseBodyResults struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyParametersResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s ModifyParametersResponseBodyResults) GoString() string {
	return s.String()
}

func (s *ModifyParametersResponseBodyResults) SetMessage(v string) *ModifyParametersResponseBodyResults {
	s.Message = &v
	return s
}

func (s *ModifyParametersResponseBodyResults) SetSuccess(v bool) *ModifyParametersResponseBodyResults {
	s.Success = &v
	return s
}

type ModifyParametersResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyParametersResponse) GoString() string {
	return s.String()
}

func (s *ModifyParametersResponse) SetHeaders(v map[string]*string) *ModifyParametersResponse {
	s.Headers = v
	return s
}

func (s *ModifyParametersResponse) SetStatusCode(v int32) *ModifyParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyParametersResponse) SetBody(v *ModifyParametersResponseBody) *ModifyParametersResponse {
	s.Body = v
	return s
}

type ModifySecurityIpsRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The information of the IP address whitelist group.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	// The list of IP addresses and CIDR blocks in the whitelist.
	// It is a JSON array. Each object in the array is an IP address or CIDR block. You can specify at most 40 IP addresses or CIDR blocks.
	SecurityIps *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
}

func (s ModifySecurityIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsRequest) SetInstanceId(v string) *ModifySecurityIpsRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetSecurityIpGroupName(v string) *ModifySecurityIpsRequest {
	s.SecurityIpGroupName = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetSecurityIps(v string) *ModifySecurityIpsRequest {
	s.SecurityIps = &v
	return s
}

type ModifySecurityIpsResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Example 1
	SecurityIpGroup *ModifySecurityIpsResponseBodySecurityIpGroup `json:"SecurityIpGroup,omitempty" xml:"SecurityIpGroup,omitempty" type:"Struct"`
}

func (s ModifySecurityIpsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponseBody) SetRequestId(v string) *ModifySecurityIpsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySecurityIpsResponseBody) SetSecurityIpGroup(v *ModifySecurityIpsResponseBodySecurityIpGroup) *ModifySecurityIpsResponseBody {
	s.SecurityIpGroup = v
	return s
}

type ModifySecurityIpsResponseBodySecurityIpGroup struct {
	InstanceId          *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	SecurityIps         *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
}

func (s ModifySecurityIpsResponseBodySecurityIpGroup) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsResponseBodySecurityIpGroup) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponseBodySecurityIpGroup) SetInstanceId(v string) *ModifySecurityIpsResponseBodySecurityIpGroup {
	s.InstanceId = &v
	return s
}

func (s *ModifySecurityIpsResponseBodySecurityIpGroup) SetSecurityIpGroupName(v string) *ModifySecurityIpsResponseBodySecurityIpGroup {
	s.SecurityIpGroupName = &v
	return s
}

func (s *ModifySecurityIpsResponseBodySecurityIpGroup) SetSecurityIps(v string) *ModifySecurityIpsResponseBodySecurityIpGroup {
	s.SecurityIps = &v
	return s
}

type ModifySecurityIpsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySecurityIpsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySecurityIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponse) SetHeaders(v map[string]*string) *ModifySecurityIpsResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityIpsResponse) SetStatusCode(v int32) *ModifySecurityIpsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySecurityIpsResponse) SetBody(v *ModifySecurityIpsResponseBody) *ModifySecurityIpsResponse {
	s.Body = v
	return s
}

type ModifyTenantEncryptionRequest struct {
	EncryptionKeyId *string `json:"EncryptionKeyId,omitempty" xml:"EncryptionKeyId,omitempty"`
	EncryptionType  *string `json:"EncryptionType,omitempty" xml:"EncryptionType,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TenantId        *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ModifyTenantEncryptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantEncryptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyTenantEncryptionRequest) SetEncryptionKeyId(v string) *ModifyTenantEncryptionRequest {
	s.EncryptionKeyId = &v
	return s
}

func (s *ModifyTenantEncryptionRequest) SetEncryptionType(v string) *ModifyTenantEncryptionRequest {
	s.EncryptionType = &v
	return s
}

func (s *ModifyTenantEncryptionRequest) SetInstanceId(v string) *ModifyTenantEncryptionRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantEncryptionRequest) SetTenantId(v string) *ModifyTenantEncryptionRequest {
	s.TenantId = &v
	return s
}

type ModifyTenantEncryptionResponseBody struct {
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// job
	TenantEncryption *ModifyTenantEncryptionResponseBodyTenantEncryption `json:"TenantEncryption,omitempty" xml:"TenantEncryption,omitempty" type:"Struct"`
}

func (s ModifyTenantEncryptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantEncryptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTenantEncryptionResponseBody) SetRequestId(v string) *ModifyTenantEncryptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTenantEncryptionResponseBody) SetTenantEncryption(v *ModifyTenantEncryptionResponseBodyTenantEncryption) *ModifyTenantEncryptionResponseBody {
	s.TenantEncryption = v
	return s
}

type ModifyTenantEncryptionResponseBodyTenantEncryption struct {
	EncryptionType *string `json:"EncryptionType,omitempty" xml:"EncryptionType,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TenantId       *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ModifyTenantEncryptionResponseBodyTenantEncryption) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantEncryptionResponseBodyTenantEncryption) GoString() string {
	return s.String()
}

func (s *ModifyTenantEncryptionResponseBodyTenantEncryption) SetEncryptionType(v string) *ModifyTenantEncryptionResponseBodyTenantEncryption {
	s.EncryptionType = &v
	return s
}

func (s *ModifyTenantEncryptionResponseBodyTenantEncryption) SetInstanceId(v string) *ModifyTenantEncryptionResponseBodyTenantEncryption {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantEncryptionResponseBodyTenantEncryption) SetTenantId(v string) *ModifyTenantEncryptionResponseBodyTenantEncryption {
	s.TenantId = &v
	return s
}

type ModifyTenantEncryptionResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTenantEncryptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTenantEncryptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantEncryptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyTenantEncryptionResponse) SetHeaders(v map[string]*string) *ModifyTenantEncryptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyTenantEncryptionResponse) SetStatusCode(v int32) *ModifyTenantEncryptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTenantEncryptionResponse) SetBody(v *ModifyTenantEncryptionResponseBody) *ModifyTenantEncryptionResponse {
	s.Body = v
	return s
}

type ModifyTenantPrimaryZoneRequest struct {
	// The primary zone of the tenant.
	// It is one of the zones in which the cluster is deployed.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// ```
	// http(s)://[Endpoint]/?Action=ModifyTenantPrimaryZone
	// &TenantId=ob2mr3oae0****
	// &InstanceId=ob317v4uif****
	// &PrimaryZone=cn-hangzhou-h
	// &Common request parameters
	// ```
	MasterIntranetAddressZone *string `json:"MasterIntranetAddressZone,omitempty" xml:"MasterIntranetAddressZone,omitempty"`
	// The ID of the vSwitch.
	PrimaryZone            *string `json:"PrimaryZone,omitempty" xml:"PrimaryZone,omitempty"`
	TenantEndpointDirectId *string `json:"TenantEndpointDirectId,omitempty" xml:"TenantEndpointDirectId,omitempty"`
	TenantEndpointId       *string `json:"TenantEndpointId,omitempty" xml:"TenantEndpointId,omitempty"`
	// The return result of the request.
	TenantId            *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UserDirectVSwitchId *string `json:"UserDirectVSwitchId,omitempty" xml:"UserDirectVSwitchId,omitempty"`
	// The request ID.
	UserVSwitchId *string `json:"UserVSwitchId,omitempty" xml:"UserVSwitchId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ModifyTenantPrimaryZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantPrimaryZoneRequest) GoString() string {
	return s.String()
}

func (s *ModifyTenantPrimaryZoneRequest) SetInstanceId(v string) *ModifyTenantPrimaryZoneRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantPrimaryZoneRequest) SetMasterIntranetAddressZone(v string) *ModifyTenantPrimaryZoneRequest {
	s.MasterIntranetAddressZone = &v
	return s
}

func (s *ModifyTenantPrimaryZoneRequest) SetPrimaryZone(v string) *ModifyTenantPrimaryZoneRequest {
	s.PrimaryZone = &v
	return s
}

func (s *ModifyTenantPrimaryZoneRequest) SetTenantEndpointDirectId(v string) *ModifyTenantPrimaryZoneRequest {
	s.TenantEndpointDirectId = &v
	return s
}

func (s *ModifyTenantPrimaryZoneRequest) SetTenantEndpointId(v string) *ModifyTenantPrimaryZoneRequest {
	s.TenantEndpointId = &v
	return s
}

func (s *ModifyTenantPrimaryZoneRequest) SetTenantId(v string) *ModifyTenantPrimaryZoneRequest {
	s.TenantId = &v
	return s
}

func (s *ModifyTenantPrimaryZoneRequest) SetUserDirectVSwitchId(v string) *ModifyTenantPrimaryZoneRequest {
	s.UserDirectVSwitchId = &v
	return s
}

func (s *ModifyTenantPrimaryZoneRequest) SetUserVSwitchId(v string) *ModifyTenantPrimaryZoneRequest {
	s.UserVSwitchId = &v
	return s
}

func (s *ModifyTenantPrimaryZoneRequest) SetVpcId(v string) *ModifyTenantPrimaryZoneRequest {
	s.VpcId = &v
	return s
}

type ModifyTenantPrimaryZoneResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyTenantPrimaryZoneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantPrimaryZoneResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTenantPrimaryZoneResponseBody) SetRequestId(v string) *ModifyTenantPrimaryZoneResponseBody {
	s.RequestId = &v
	return s
}

type ModifyTenantPrimaryZoneResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTenantPrimaryZoneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTenantPrimaryZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantPrimaryZoneResponse) GoString() string {
	return s.String()
}

func (s *ModifyTenantPrimaryZoneResponse) SetHeaders(v map[string]*string) *ModifyTenantPrimaryZoneResponse {
	s.Headers = v
	return s
}

func (s *ModifyTenantPrimaryZoneResponse) SetStatusCode(v int32) *ModifyTenantPrimaryZoneResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTenantPrimaryZoneResponse) SetBody(v *ModifyTenantPrimaryZoneResponseBody) *ModifyTenantPrimaryZoneResponse {
	s.Body = v
	return s
}

type ModifyTenantResourceRequest struct {
	// The information about the CPU resources of the tenant.
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The size of the log disk allocated to the tenant, in GB.
	LogDisk *int64 `json:"LogDisk,omitempty" xml:"LogDisk,omitempty"`
	// The memory size of the tenant, in GB.
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// Specifies to create a read-only zone. Separate the names of multiple zones with commas (,).
	ReadOnlyZoneList *string `json:"ReadOnlyZoneList,omitempty" xml:"ReadOnlyZoneList,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ModifyTenantResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantResourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyTenantResourceRequest) SetCpu(v int32) *ModifyTenantResourceRequest {
	s.Cpu = &v
	return s
}

func (s *ModifyTenantResourceRequest) SetInstanceId(v string) *ModifyTenantResourceRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantResourceRequest) SetLogDisk(v int64) *ModifyTenantResourceRequest {
	s.LogDisk = &v
	return s
}

func (s *ModifyTenantResourceRequest) SetMemory(v int32) *ModifyTenantResourceRequest {
	s.Memory = &v
	return s
}

func (s *ModifyTenantResourceRequest) SetReadOnlyZoneList(v string) *ModifyTenantResourceRequest {
	s.ReadOnlyZoneList = &v
	return s
}

func (s *ModifyTenantResourceRequest) SetTenantId(v string) *ModifyTenantResourceRequest {
	s.TenantId = &v
	return s
}

type ModifyTenantResourceResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ModifyTenantResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantResourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTenantResourceResponseBody) SetRequestId(v string) *ModifyTenantResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTenantResourceResponseBody) SetTenantId(v string) *ModifyTenantResourceResponseBody {
	s.TenantId = &v
	return s
}

type ModifyTenantResourceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTenantResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTenantResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantResourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyTenantResourceResponse) SetHeaders(v map[string]*string) *ModifyTenantResourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyTenantResourceResponse) SetStatusCode(v int32) *ModifyTenantResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTenantResourceResponse) SetBody(v *ModifyTenantResourceResponseBody) *ModifyTenantResourceResponse {
	s.Body = v
	return s
}

type ModifyTenantSecurityIpGroupRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The group name of the whitelist group of IP addresses.
	//
	// It starts with lowercase letters and ends with lowercase letters or numbers. It can only contain lowercase letters, numbers, and underscores, and should be 2~32 characters in length.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	// The list of IP addresses in the whitelist group.
	//
	// It is a JSON array. Each object in the array is an IP address or a CIDR block. You can have up to 40 whitelists.
	SecurityIps *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ModifyTenantSecurityIpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantSecurityIpGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyTenantSecurityIpGroupRequest) SetInstanceId(v string) *ModifyTenantSecurityIpGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantSecurityIpGroupRequest) SetSecurityIpGroupName(v string) *ModifyTenantSecurityIpGroupRequest {
	s.SecurityIpGroupName = &v
	return s
}

func (s *ModifyTenantSecurityIpGroupRequest) SetSecurityIps(v string) *ModifyTenantSecurityIpGroupRequest {
	s.SecurityIps = &v
	return s
}

func (s *ModifyTenantSecurityIpGroupRequest) SetTenantId(v string) *ModifyTenantSecurityIpGroupRequest {
	s.TenantId = &v
	return s
}

type ModifyTenantSecurityIpGroupResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information of the IP address whitelist group.
	SecurityIpGroup *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup `json:"SecurityIpGroup,omitempty" xml:"SecurityIpGroup,omitempty" type:"Struct"`
}

func (s ModifyTenantSecurityIpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantSecurityIpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTenantSecurityIpGroupResponseBody) SetRequestId(v string) *ModifyTenantSecurityIpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTenantSecurityIpGroupResponseBody) SetSecurityIpGroup(v *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup) *ModifyTenantSecurityIpGroupResponseBody {
	s.SecurityIpGroup = v
	return s
}

type ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the whitelist group.
	SecurityIpGroupName *string `json:"SecurityIpGroupName,omitempty" xml:"SecurityIpGroupName,omitempty"`
	// The list of IP addresses in the IP address whitelist group.
	//
	// It is a string separated by commas, and each object is an IP address or a CIDR block.
	SecurityIps *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup) GoString() string {
	return s.String()
}

func (s *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup) SetInstanceId(v string) *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup) SetSecurityIpGroupName(v string) *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.SecurityIpGroupName = &v
	return s
}

func (s *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup) SetSecurityIps(v string) *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.SecurityIps = &v
	return s
}

func (s *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup) SetTenantId(v string) *ModifyTenantSecurityIpGroupResponseBodySecurityIpGroup {
	s.TenantId = &v
	return s
}

type ModifyTenantSecurityIpGroupResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTenantSecurityIpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTenantSecurityIpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantSecurityIpGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyTenantSecurityIpGroupResponse) SetHeaders(v map[string]*string) *ModifyTenantSecurityIpGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyTenantSecurityIpGroupResponse) SetStatusCode(v int32) *ModifyTenantSecurityIpGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTenantSecurityIpGroupResponse) SetBody(v *ModifyTenantSecurityIpGroupResponseBody) *ModifyTenantSecurityIpGroupResponse {
	s.Body = v
	return s
}

type ModifyTenantTagsRequest struct {
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The tags.
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ModifyTenantTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantTagsRequest) GoString() string {
	return s.String()
}

func (s *ModifyTenantTagsRequest) SetInstanceId(v string) *ModifyTenantTagsRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantTagsRequest) SetTags(v string) *ModifyTenantTagsRequest {
	s.Tags = &v
	return s
}

func (s *ModifyTenantTagsRequest) SetTenantId(v string) *ModifyTenantTagsRequest {
	s.TenantId = &v
	return s
}

type ModifyTenantTagsResponseBody struct {
	// The update status of the tags.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyTenantTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTenantTagsResponseBody) SetMessage(v string) *ModifyTenantTagsResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyTenantTagsResponseBody) SetRequestId(v string) *ModifyTenantTagsResponseBody {
	s.RequestId = &v
	return s
}

type ModifyTenantTagsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTenantTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTenantTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantTagsResponse) GoString() string {
	return s.String()
}

func (s *ModifyTenantTagsResponse) SetHeaders(v map[string]*string) *ModifyTenantTagsResponse {
	s.Headers = v
	return s
}

func (s *ModifyTenantTagsResponse) SetStatusCode(v int32) *ModifyTenantTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTenantTagsResponse) SetBody(v *ModifyTenantTagsResponseBody) *ModifyTenantTagsResponse {
	s.Body = v
	return s
}

type ModifyTenantUserDescriptionRequest struct {
	// The operation that you want to perform.
	// Set the value to **ModifyTenantUserDescription**.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the OceanBase cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The description of the database.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ModifyTenantUserDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserDescriptionRequest) SetDescription(v string) *ModifyTenantUserDescriptionRequest {
	s.Description = &v
	return s
}

func (s *ModifyTenantUserDescriptionRequest) SetInstanceId(v string) *ModifyTenantUserDescriptionRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantUserDescriptionRequest) SetTenantId(v string) *ModifyTenantUserDescriptionRequest {
	s.TenantId = &v
	return s
}

func (s *ModifyTenantUserDescriptionRequest) SetUserName(v string) *ModifyTenantUserDescriptionRequest {
	s.UserName = &v
	return s
}

type ModifyTenantUserDescriptionResponseBody struct {
	// You can call this operation to modify the description of a specified account in a tenant.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyTenantUserDescriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserDescriptionResponseBody) SetRequestId(v string) *ModifyTenantUserDescriptionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyTenantUserDescriptionResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTenantUserDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTenantUserDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserDescriptionResponse) SetHeaders(v map[string]*string) *ModifyTenantUserDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyTenantUserDescriptionResponse) SetStatusCode(v int32) *ModifyTenantUserDescriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTenantUserDescriptionResponse) SetBody(v *ModifyTenantUserDescriptionResponseBody) *ModifyTenantUserDescriptionResponse {
	s.Body = v
	return s
}

type ModifyTenantUserPasswordRequest struct {
	// 加密方式。
	EncryptionType *string `json:"EncryptionType,omitempty" xml:"EncryptionType,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// ```
	// http(s)://[Endpoint]/?Action=ModifyTenantUserPassword
	// &UserName=pay_test
	// &TenantId=ob2mr3oae0****
	// &UserPassword=!Aliyun4Oceanbase
	// &InstanceId=ob317v4uif****
	// &Common request parameters
	// ```
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The ID of the OceanBase cluster.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// You can call this operation to change the logon password of a specified account in a tenant.
	UserPassword *string `json:"UserPassword,omitempty" xml:"UserPassword,omitempty"`
}

func (s ModifyTenantUserPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserPasswordRequest) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserPasswordRequest) SetEncryptionType(v string) *ModifyTenantUserPasswordRequest {
	s.EncryptionType = &v
	return s
}

func (s *ModifyTenantUserPasswordRequest) SetInstanceId(v string) *ModifyTenantUserPasswordRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantUserPasswordRequest) SetTenantId(v string) *ModifyTenantUserPasswordRequest {
	s.TenantId = &v
	return s
}

func (s *ModifyTenantUserPasswordRequest) SetUserName(v string) *ModifyTenantUserPasswordRequest {
	s.UserName = &v
	return s
}

func (s *ModifyTenantUserPasswordRequest) SetUserPassword(v string) *ModifyTenantUserPasswordRequest {
	s.UserPassword = &v
	return s
}

type ModifyTenantUserPasswordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyTenantUserPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserPasswordResponseBody) SetRequestId(v string) *ModifyTenantUserPasswordResponseBody {
	s.RequestId = &v
	return s
}

type ModifyTenantUserPasswordResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTenantUserPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTenantUserPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserPasswordResponse) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserPasswordResponse) SetHeaders(v map[string]*string) *ModifyTenantUserPasswordResponse {
	s.Headers = v
	return s
}

func (s *ModifyTenantUserPasswordResponse) SetStatusCode(v int32) *ModifyTenantUserPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTenantUserPasswordResponse) SetBody(v *ModifyTenantUserPasswordResponseBody) *ModifyTenantUserPasswordResponse {
	s.Body = v
	return s
}

type ModifyTenantUserRolesRequest struct {
	// The type of the privilege modification operation.
	// Valid values:
	// update: updates all privileges. This is the default value.
	// add: adds a privilege.
	// delete: deletes a privilege.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the table.
	ModifyType *string `json:"ModifyType,omitempty" xml:"ModifyType,omitempty"`
	// The operation that you want to perform.
	// Set the value to **ModifyTenantUserRoles**.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The role of the database account.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The type of the account. Valid values:
	// - Admin: the super administrator account.
	// - Normal: a general account.
	UserRole *string `json:"UserRole,omitempty" xml:"UserRole,omitempty"`
}

func (s ModifyTenantUserRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserRolesRequest) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserRolesRequest) SetInstanceId(v string) *ModifyTenantUserRolesRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantUserRolesRequest) SetModifyType(v string) *ModifyTenantUserRolesRequest {
	s.ModifyType = &v
	return s
}

func (s *ModifyTenantUserRolesRequest) SetTenantId(v string) *ModifyTenantUserRolesRequest {
	s.TenantId = &v
	return s
}

func (s *ModifyTenantUserRolesRequest) SetUserName(v string) *ModifyTenantUserRolesRequest {
	s.UserName = &v
	return s
}

func (s *ModifyTenantUserRolesRequest) SetUserRole(v string) *ModifyTenantUserRolesRequest {
	s.UserRole = &v
	return s
}

type ModifyTenantUserRolesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the tenant.
	TenantUser *ModifyTenantUserRolesResponseBodyTenantUser `json:"TenantUser,omitempty" xml:"TenantUser,omitempty" type:"Struct"`
}

func (s ModifyTenantUserRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserRolesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserRolesResponseBody) SetRequestId(v string) *ModifyTenantUserRolesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTenantUserRolesResponseBody) SetTenantUser(v *ModifyTenantUserRolesResponseBodyTenantUser) *ModifyTenantUserRolesResponseBody {
	s.TenantUser = v
	return s
}

type ModifyTenantUserRolesResponseBodyTenantUser struct {
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The name of the database (MySQL mode) or schema (Oracle mode).
	UserRole []*ModifyTenantUserRolesResponseBodyTenantUserUserRole `json:"UserRole,omitempty" xml:"UserRole,omitempty" type:"Repeated"`
}

func (s ModifyTenantUserRolesResponseBodyTenantUser) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserRolesResponseBodyTenantUser) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserRolesResponseBodyTenantUser) SetTenantId(v string) *ModifyTenantUserRolesResponseBodyTenantUser {
	s.TenantId = &v
	return s
}

func (s *ModifyTenantUserRolesResponseBodyTenantUser) SetUserName(v string) *ModifyTenantUserRolesResponseBodyTenantUser {
	s.UserName = &v
	return s
}

func (s *ModifyTenantUserRolesResponseBodyTenantUser) SetUserRole(v []*ModifyTenantUserRolesResponseBodyTenantUserUserRole) *ModifyTenantUserRolesResponseBodyTenantUser {
	s.UserRole = v
	return s
}

type ModifyTenantUserRolesResponseBodyTenantUserUserRole struct {
	// ```
	// http(s)://[Endpoint]/?Action=ModifyTenantUserRoles
	// &UserName=pay_test
	// &TenantId=ob2mr3oae0****
	// &UserRole=[{"Database":"20210824160559","Role":"readwrite"}]
	// &InstanceId=ob317v4uif****
	// &ModifyType=update
	// &Common request parameters
	// ```
	Database  *string `json:"Database,omitempty" xml:"Database,omitempty"`
	IsSuccess *bool   `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// You can call this operation to modify the database privileges of a specified account in a tenant.
	Role  *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Table *string `json:"Table,omitempty" xml:"Table,omitempty"`
}

func (s ModifyTenantUserRolesResponseBodyTenantUserUserRole) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserRolesResponseBodyTenantUserUserRole) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserRolesResponseBodyTenantUserUserRole) SetDatabase(v string) *ModifyTenantUserRolesResponseBodyTenantUserUserRole {
	s.Database = &v
	return s
}

func (s *ModifyTenantUserRolesResponseBodyTenantUserUserRole) SetIsSuccess(v bool) *ModifyTenantUserRolesResponseBodyTenantUserUserRole {
	s.IsSuccess = &v
	return s
}

func (s *ModifyTenantUserRolesResponseBodyTenantUserUserRole) SetRole(v string) *ModifyTenantUserRolesResponseBodyTenantUserUserRole {
	s.Role = &v
	return s
}

func (s *ModifyTenantUserRolesResponseBodyTenantUserUserRole) SetTable(v string) *ModifyTenantUserRolesResponseBodyTenantUserUserRole {
	s.Table = &v
	return s
}

type ModifyTenantUserRolesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTenantUserRolesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTenantUserRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserRolesResponse) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserRolesResponse) SetHeaders(v map[string]*string) *ModifyTenantUserRolesResponse {
	s.Headers = v
	return s
}

func (s *ModifyTenantUserRolesResponse) SetStatusCode(v int32) *ModifyTenantUserRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTenantUserRolesResponse) SetBody(v *ModifyTenantUserRolesResponseBody) *ModifyTenantUserRolesResponse {
	s.Body = v
	return s
}

type ModifyTenantUserStatusRequest struct {
	// The operation that you want to perform.
	// Set the value to **ModifyTenantUserStatus**.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the tenant.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The list of database accounts in the tenant.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The status of the database account. Valid values:
	// - Locked: The account is locked.
	// - Online: The account is unlocked.
	UserStatus *string `json:"UserStatus,omitempty" xml:"UserStatus,omitempty"`
}

func (s ModifyTenantUserStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserStatusRequest) SetInstanceId(v string) *ModifyTenantUserStatusRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyTenantUserStatusRequest) SetTenantId(v string) *ModifyTenantUserStatusRequest {
	s.TenantId = &v
	return s
}

func (s *ModifyTenantUserStatusRequest) SetUserName(v string) *ModifyTenantUserStatusRequest {
	s.UserName = &v
	return s
}

func (s *ModifyTenantUserStatusRequest) SetUserStatus(v string) *ModifyTenantUserStatusRequest {
	s.UserStatus = &v
	return s
}

type ModifyTenantUserStatusResponseBody struct {
	// Example 1
	RequestId  *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TenantUser []*ModifyTenantUserStatusResponseBodyTenantUser `json:"TenantUser,omitempty" xml:"TenantUser,omitempty" type:"Repeated"`
}

func (s ModifyTenantUserStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserStatusResponseBody) SetRequestId(v string) *ModifyTenantUserStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTenantUserStatusResponseBody) SetTenantUser(v []*ModifyTenantUserStatusResponseBodyTenantUser) *ModifyTenantUserStatusResponseBody {
	s.TenantUser = v
	return s
}

type ModifyTenantUserStatusResponseBodyTenantUser struct {
	TenantId   *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UserName   *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	UserStatus *string `json:"UserStatus,omitempty" xml:"UserStatus,omitempty"`
}

func (s ModifyTenantUserStatusResponseBodyTenantUser) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserStatusResponseBodyTenantUser) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserStatusResponseBodyTenantUser) SetTenantId(v string) *ModifyTenantUserStatusResponseBodyTenantUser {
	s.TenantId = &v
	return s
}

func (s *ModifyTenantUserStatusResponseBodyTenantUser) SetUserName(v string) *ModifyTenantUserStatusResponseBodyTenantUser {
	s.UserName = &v
	return s
}

func (s *ModifyTenantUserStatusResponseBodyTenantUser) SetUserStatus(v string) *ModifyTenantUserStatusResponseBodyTenantUser {
	s.UserStatus = &v
	return s
}

type ModifyTenantUserStatusResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTenantUserStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTenantUserStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTenantUserStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyTenantUserStatusResponse) SetHeaders(v map[string]*string) *ModifyTenantUserStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyTenantUserStatusResponse) SetStatusCode(v int32) *ModifyTenantUserStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTenantUserStatusResponse) SetBody(v *ModifyTenantUserStatusResponseBody) *ModifyTenantUserStatusResponse {
	s.Body = v
	return s
}

type ReleaseOmsOpenAPIProjectRequest struct {
	// The total count, which takes effect in a pagination query.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Contact the administrator.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The error level. Valid values: CRITICAL, ERROR, and WARN.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Indicates whether the call is successful.
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s ReleaseOmsOpenAPIProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseOmsOpenAPIProjectRequest) GoString() string {
	return s.String()
}

func (s *ReleaseOmsOpenAPIProjectRequest) SetPageNumber(v int32) *ReleaseOmsOpenAPIProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectRequest) SetPageSize(v int32) *ReleaseOmsOpenAPIProjectRequest {
	s.PageSize = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectRequest) SetProjectId(v string) *ReleaseOmsOpenAPIProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectRequest) SetWorkerGradeId(v string) *ReleaseOmsOpenAPIProjectRequest {
	s.WorkerGradeId = &v
	return s
}

type ReleaseOmsOpenAPIProjectResponseBody struct {
	// You can call this operation to release a data synchronization project.
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// Indicates whether the project is released.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost *string `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	// The suggestions (new).
	ErrorDetail *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	// A system error occurred.
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The page number, which takes effect in a pagination query.
	Success    *bool  `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ReleaseOmsOpenAPIProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseOmsOpenAPIProjectResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetAdvice(v string) *ReleaseOmsOpenAPIProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetCode(v string) *ReleaseOmsOpenAPIProjectResponseBody {
	s.Code = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetCost(v string) *ReleaseOmsOpenAPIProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetData(v bool) *ReleaseOmsOpenAPIProjectResponseBody {
	s.Data = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetErrorDetail(v *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail) *ReleaseOmsOpenAPIProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetMessage(v string) *ReleaseOmsOpenAPIProjectResponseBody {
	s.Message = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetPageNumber(v int32) *ReleaseOmsOpenAPIProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetPageSize(v int32) *ReleaseOmsOpenAPIProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetRequestId(v string) *ReleaseOmsOpenAPIProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetSuccess(v bool) *ReleaseOmsOpenAPIProjectResponseBody {
	s.Success = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBody) SetTotalCount(v int64) *ReleaseOmsOpenAPIProjectResponseBody {
	s.TotalCount = &v
	return s
}

type ReleaseOmsOpenAPIProjectResponseBodyErrorDetail struct {
	// The operation that you want to perform. Set the value to **ReleaseOmsOpenAPIProject**.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error description (old).
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The error code (new).
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number, which takes effect in a pagination query.
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s ReleaseOmsOpenAPIProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ReleaseOmsOpenAPIProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail) SetCode(v string) *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail) SetLevel(v string) *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail) SetMessage(v string) *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail) SetProposal(v string) *ReleaseOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type ReleaseOmsOpenAPIProjectResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseOmsOpenAPIProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseOmsOpenAPIProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseOmsOpenAPIProjectResponse) GoString() string {
	return s.String()
}

func (s *ReleaseOmsOpenAPIProjectResponse) SetHeaders(v map[string]*string) *ReleaseOmsOpenAPIProjectResponse {
	s.Headers = v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponse) SetStatusCode(v int32) *ReleaseOmsOpenAPIProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseOmsOpenAPIProjectResponse) SetBody(v *ReleaseOmsOpenAPIProjectResponseBody) *ReleaseOmsOpenAPIProjectResponse {
	s.Body = v
	return s
}

type ReleaseProjectRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ReleaseProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseProjectRequest) GoString() string {
	return s.String()
}

func (s *ReleaseProjectRequest) SetId(v string) *ReleaseProjectRequest {
	s.Id = &v
	return s
}

type ReleaseProjectResponseBody struct {
	Advice      *string                                `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        interface{}                            `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *ReleaseProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ReleaseProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseProjectResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseProjectResponseBody) SetAdvice(v string) *ReleaseProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *ReleaseProjectResponseBody) SetCode(v string) *ReleaseProjectResponseBody {
	s.Code = &v
	return s
}

func (s *ReleaseProjectResponseBody) SetCost(v string) *ReleaseProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *ReleaseProjectResponseBody) SetData(v interface{}) *ReleaseProjectResponseBody {
	s.Data = v
	return s
}

func (s *ReleaseProjectResponseBody) SetErrorDetail(v *ReleaseProjectResponseBodyErrorDetail) *ReleaseProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ReleaseProjectResponseBody) SetMessage(v string) *ReleaseProjectResponseBody {
	s.Message = &v
	return s
}

func (s *ReleaseProjectResponseBody) SetPageNumber(v int32) *ReleaseProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ReleaseProjectResponseBody) SetPageSize(v int32) *ReleaseProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *ReleaseProjectResponseBody) SetRequestId(v string) *ReleaseProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReleaseProjectResponseBody) SetSuccess(v bool) *ReleaseProjectResponseBody {
	s.Success = &v
	return s
}

func (s *ReleaseProjectResponseBody) SetTotalCount(v int64) *ReleaseProjectResponseBody {
	s.TotalCount = &v
	return s
}

type ReleaseProjectResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ReleaseProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ReleaseProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetCode(v string) *ReleaseProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *ReleaseProjectResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetLevel(v string) *ReleaseProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetMessage(v string) *ReleaseProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *ReleaseProjectResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetMessageMcmsKey(v string) *ReleaseProjectResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetProposal(v string) *ReleaseProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *ReleaseProjectResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetProposalMcmsKey(v string) *ReleaseProjectResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetReason(v string) *ReleaseProjectResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *ReleaseProjectResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetReasonMcmsKey(v string) *ReleaseProjectResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ReleaseProjectResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *ReleaseProjectResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ReleaseProjectResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseProjectResponse) GoString() string {
	return s.String()
}

func (s *ReleaseProjectResponse) SetHeaders(v map[string]*string) *ReleaseProjectResponse {
	s.Headers = v
	return s
}

func (s *ReleaseProjectResponse) SetStatusCode(v int32) *ReleaseProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseProjectResponse) SetBody(v *ReleaseProjectResponseBody) *ReleaseProjectResponse {
	s.Body = v
	return s
}

type ReleaseWorkerInstanceRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ReleaseWorkerInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseWorkerInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleaseWorkerInstanceRequest) SetId(v string) *ReleaseWorkerInstanceRequest {
	s.Id = &v
	return s
}

type ReleaseWorkerInstanceResponseBody struct {
	Advice      *string                                       `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                       `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *string                                       `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *ReleaseWorkerInstanceResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ReleaseWorkerInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseWorkerInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseWorkerInstanceResponseBody) SetAdvice(v string) *ReleaseWorkerInstanceResponseBody {
	s.Advice = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetCode(v string) *ReleaseWorkerInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetCost(v string) *ReleaseWorkerInstanceResponseBody {
	s.Cost = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetData(v string) *ReleaseWorkerInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetErrorDetail(v *ReleaseWorkerInstanceResponseBodyErrorDetail) *ReleaseWorkerInstanceResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetMessage(v string) *ReleaseWorkerInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetPageNumber(v int32) *ReleaseWorkerInstanceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetPageSize(v int32) *ReleaseWorkerInstanceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetRequestId(v string) *ReleaseWorkerInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetSuccess(v bool) *ReleaseWorkerInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBody) SetTotalCount(v int64) *ReleaseWorkerInstanceResponseBody {
	s.TotalCount = &v
	return s
}

type ReleaseWorkerInstanceResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ReleaseWorkerInstanceResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ReleaseWorkerInstanceResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetCode(v string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetLevel(v string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetMessage(v string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetMessageMcmsKey(v string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetProposal(v string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetProposalMcmsKey(v string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetReason(v string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetReasonMcmsKey(v string) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ReleaseWorkerInstanceResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *ReleaseWorkerInstanceResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ReleaseWorkerInstanceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseWorkerInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseWorkerInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseWorkerInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseWorkerInstanceResponse) SetHeaders(v map[string]*string) *ReleaseWorkerInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleaseWorkerInstanceResponse) SetStatusCode(v int32) *ReleaseWorkerInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseWorkerInstanceResponse) SetBody(v *ReleaseWorkerInstanceResponseBody) *ReleaseWorkerInstanceResponse {
	s.Body = v
	return s
}

type ResetOmsOpenAPIProjectRequest struct {
	// The total count, which takes effect in a pagination query.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Contact the administrator.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The error level. Valid values: CRITICAL, ERROR, and WARN.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Indicates whether the call is successful.
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s ResetOmsOpenAPIProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetOmsOpenAPIProjectRequest) GoString() string {
	return s.String()
}

func (s *ResetOmsOpenAPIProjectRequest) SetPageNumber(v int32) *ResetOmsOpenAPIProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *ResetOmsOpenAPIProjectRequest) SetPageSize(v int32) *ResetOmsOpenAPIProjectRequest {
	s.PageSize = &v
	return s
}

func (s *ResetOmsOpenAPIProjectRequest) SetProjectId(v string) *ResetOmsOpenAPIProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *ResetOmsOpenAPIProjectRequest) SetWorkerGradeId(v string) *ResetOmsOpenAPIProjectRequest {
	s.WorkerGradeId = &v
	return s
}

type ResetOmsOpenAPIProjectResponseBody struct {
	// You can call this operation to reset a data synchronization project.
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// Indicates whether the resetting is successful.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost *string `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	// The suggestions (new).
	ErrorDetail *ResetOmsOpenAPIProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	// A system error occurred.
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The page number, which takes effect in a pagination query.
	Success    *bool  `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ResetOmsOpenAPIProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetOmsOpenAPIProjectResponseBody) GoString() string {
	return s.String()
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetAdvice(v string) *ResetOmsOpenAPIProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetCode(v string) *ResetOmsOpenAPIProjectResponseBody {
	s.Code = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetCost(v string) *ResetOmsOpenAPIProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetData(v bool) *ResetOmsOpenAPIProjectResponseBody {
	s.Data = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetErrorDetail(v *ResetOmsOpenAPIProjectResponseBodyErrorDetail) *ResetOmsOpenAPIProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetMessage(v string) *ResetOmsOpenAPIProjectResponseBody {
	s.Message = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetPageNumber(v int32) *ResetOmsOpenAPIProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetPageSize(v int32) *ResetOmsOpenAPIProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetRequestId(v string) *ResetOmsOpenAPIProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetSuccess(v bool) *ResetOmsOpenAPIProjectResponseBody {
	s.Success = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBody) SetTotalCount(v int64) *ResetOmsOpenAPIProjectResponseBody {
	s.TotalCount = &v
	return s
}

type ResetOmsOpenAPIProjectResponseBodyErrorDetail struct {
	// The operation that you want to perform. Set the value to **ResetOmsOpenAPIProject**.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error description (old).
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The error code (new).
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number, which takes effect in a pagination query.
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s ResetOmsOpenAPIProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ResetOmsOpenAPIProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ResetOmsOpenAPIProjectResponseBodyErrorDetail) SetCode(v string) *ResetOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBodyErrorDetail) SetLevel(v string) *ResetOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBodyErrorDetail) SetMessage(v string) *ResetOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponseBodyErrorDetail) SetProposal(v string) *ResetOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type ResetOmsOpenAPIProjectResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetOmsOpenAPIProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetOmsOpenAPIProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetOmsOpenAPIProjectResponse) GoString() string {
	return s.String()
}

func (s *ResetOmsOpenAPIProjectResponse) SetHeaders(v map[string]*string) *ResetOmsOpenAPIProjectResponse {
	s.Headers = v
	return s
}

func (s *ResetOmsOpenAPIProjectResponse) SetStatusCode(v int32) *ResetOmsOpenAPIProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetOmsOpenAPIProjectResponse) SetBody(v *ResetOmsOpenAPIProjectResponseBody) *ResetOmsOpenAPIProjectResponse {
	s.Body = v
	return s
}

type ResumeOmsOpenAPIProjectRequest struct {
	// Contact the administrator.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Indicates whether the call is successful.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Contact the administrator.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The suggestions (old).
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s ResumeOmsOpenAPIProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeOmsOpenAPIProjectRequest) GoString() string {
	return s.String()
}

func (s *ResumeOmsOpenAPIProjectRequest) SetPageNumber(v int32) *ResumeOmsOpenAPIProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectRequest) SetPageSize(v int32) *ResumeOmsOpenAPIProjectRequest {
	s.PageSize = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectRequest) SetProjectId(v string) *ResumeOmsOpenAPIProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectRequest) SetWorkerGradeId(v string) *ResumeOmsOpenAPIProjectRequest {
	s.WorkerGradeId = &v
	return s
}

type ResumeOmsOpenAPIProjectResponseBody struct {
	// The request ID.
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// The page number, which takes effect in a pagination query.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost *string `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	// The page number, which takes effect in a pagination query.
	ErrorDetail *ResumeOmsOpenAPIProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	// The error details.
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Example 1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The error level. Valid values: CRITICAL, ERROR, and WARN.
	Success    *bool  `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ResumeOmsOpenAPIProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeOmsOpenAPIProjectResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetAdvice(v string) *ResumeOmsOpenAPIProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetCode(v string) *ResumeOmsOpenAPIProjectResponseBody {
	s.Code = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetCost(v string) *ResumeOmsOpenAPIProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetData(v bool) *ResumeOmsOpenAPIProjectResponseBody {
	s.Data = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetErrorDetail(v *ResumeOmsOpenAPIProjectResponseBodyErrorDetail) *ResumeOmsOpenAPIProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetMessage(v string) *ResumeOmsOpenAPIProjectResponseBody {
	s.Message = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetPageNumber(v int32) *ResumeOmsOpenAPIProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetPageSize(v int32) *ResumeOmsOpenAPIProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetRequestId(v string) *ResumeOmsOpenAPIProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetSuccess(v bool) *ResumeOmsOpenAPIProjectResponseBody {
	s.Success = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBody) SetTotalCount(v int64) *ResumeOmsOpenAPIProjectResponseBody {
	s.TotalCount = &v
	return s
}

type ResumeOmsOpenAPIProjectResponseBodyErrorDetail struct {
	// The suggestions (new).
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The operation that you want to perform. Set the value to **ResumeOmsOpenAPIProject**.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The error description (old).
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The error code (new).
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s ResumeOmsOpenAPIProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ResumeOmsOpenAPIProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ResumeOmsOpenAPIProjectResponseBodyErrorDetail) SetCode(v string) *ResumeOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBodyErrorDetail) SetLevel(v string) *ResumeOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBodyErrorDetail) SetMessage(v string) *ResumeOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponseBodyErrorDetail) SetProposal(v string) *ResumeOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type ResumeOmsOpenAPIProjectResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeOmsOpenAPIProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeOmsOpenAPIProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeOmsOpenAPIProjectResponse) GoString() string {
	return s.String()
}

func (s *ResumeOmsOpenAPIProjectResponse) SetHeaders(v map[string]*string) *ResumeOmsOpenAPIProjectResponse {
	s.Headers = v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponse) SetStatusCode(v int32) *ResumeOmsOpenAPIProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeOmsOpenAPIProjectResponse) SetBody(v *ResumeOmsOpenAPIProjectResponseBody) *ResumeOmsOpenAPIProjectResponse {
	s.Body = v
	return s
}

type ResumeProjectRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ResumeProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeProjectRequest) GoString() string {
	return s.String()
}

func (s *ResumeProjectRequest) SetId(v string) *ResumeProjectRequest {
	s.Id = &v
	return s
}

type ResumeProjectResponseBody struct {
	Advice      *string                               `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                               `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        interface{}                           `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *ResumeProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ResumeProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeProjectResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeProjectResponseBody) SetAdvice(v string) *ResumeProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *ResumeProjectResponseBody) SetCode(v string) *ResumeProjectResponseBody {
	s.Code = &v
	return s
}

func (s *ResumeProjectResponseBody) SetCost(v string) *ResumeProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *ResumeProjectResponseBody) SetData(v interface{}) *ResumeProjectResponseBody {
	s.Data = v
	return s
}

func (s *ResumeProjectResponseBody) SetErrorDetail(v *ResumeProjectResponseBodyErrorDetail) *ResumeProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *ResumeProjectResponseBody) SetMessage(v string) *ResumeProjectResponseBody {
	s.Message = &v
	return s
}

func (s *ResumeProjectResponseBody) SetPageNumber(v int32) *ResumeProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ResumeProjectResponseBody) SetPageSize(v int32) *ResumeProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *ResumeProjectResponseBody) SetRequestId(v string) *ResumeProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeProjectResponseBody) SetSuccess(v bool) *ResumeProjectResponseBody {
	s.Success = &v
	return s
}

func (s *ResumeProjectResponseBody) SetTotalCount(v int64) *ResumeProjectResponseBody {
	s.TotalCount = &v
	return s
}

type ResumeProjectResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s ResumeProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s ResumeProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *ResumeProjectResponseBodyErrorDetail) SetCode(v string) *ResumeProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *ResumeProjectResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetLevel(v string) *ResumeProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetMessage(v string) *ResumeProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *ResumeProjectResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetMessageMcmsKey(v string) *ResumeProjectResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetProposal(v string) *ResumeProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *ResumeProjectResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetProposalMcmsKey(v string) *ResumeProjectResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetReason(v string) *ResumeProjectResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *ResumeProjectResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetReasonMcmsKey(v string) *ResumeProjectResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *ResumeProjectResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *ResumeProjectResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type ResumeProjectResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeProjectResponse) GoString() string {
	return s.String()
}

func (s *ResumeProjectResponse) SetHeaders(v map[string]*string) *ResumeProjectResponse {
	s.Headers = v
	return s
}

func (s *ResumeProjectResponse) SetStatusCode(v int32) *ResumeProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeProjectResponse) SetBody(v *ResumeProjectResponseBody) *ResumeProjectResponse {
	s.Body = v
	return s
}

type RetryProjectModifyRecordsRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s RetryProjectModifyRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryProjectModifyRecordsRequest) GoString() string {
	return s.String()
}

func (s *RetryProjectModifyRecordsRequest) SetId(v string) *RetryProjectModifyRecordsRequest {
	s.Id = &v
	return s
}

type RetryProjectModifyRecordsResponseBody struct {
	Advice      *string                                           `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                           `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        interface{}                                       `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *RetryProjectModifyRecordsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s RetryProjectModifyRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RetryProjectModifyRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *RetryProjectModifyRecordsResponseBody) SetAdvice(v string) *RetryProjectModifyRecordsResponseBody {
	s.Advice = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetCode(v string) *RetryProjectModifyRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetCost(v string) *RetryProjectModifyRecordsResponseBody {
	s.Cost = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetData(v interface{}) *RetryProjectModifyRecordsResponseBody {
	s.Data = v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetErrorDetail(v *RetryProjectModifyRecordsResponseBodyErrorDetail) *RetryProjectModifyRecordsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetMessage(v string) *RetryProjectModifyRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetPageNumber(v int32) *RetryProjectModifyRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetPageSize(v int32) *RetryProjectModifyRecordsResponseBody {
	s.PageSize = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetRequestId(v string) *RetryProjectModifyRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetSuccess(v bool) *RetryProjectModifyRecordsResponseBody {
	s.Success = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBody) SetTotalCount(v int64) *RetryProjectModifyRecordsResponseBody {
	s.TotalCount = &v
	return s
}

type RetryProjectModifyRecordsResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s RetryProjectModifyRecordsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s RetryProjectModifyRecordsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetCode(v string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetLevel(v string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetMessage(v string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetMessageMcmsKey(v string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetProposal(v string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetProposalMcmsKey(v string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetReason(v string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetReasonMcmsKey(v string) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *RetryProjectModifyRecordsResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *RetryProjectModifyRecordsResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type RetryProjectModifyRecordsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RetryProjectModifyRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RetryProjectModifyRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryProjectModifyRecordsResponse) GoString() string {
	return s.String()
}

func (s *RetryProjectModifyRecordsResponse) SetHeaders(v map[string]*string) *RetryProjectModifyRecordsResponse {
	s.Headers = v
	return s
}

func (s *RetryProjectModifyRecordsResponse) SetStatusCode(v int32) *RetryProjectModifyRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *RetryProjectModifyRecordsResponse) SetBody(v *RetryProjectModifyRecordsResponseBody) *RetryProjectModifyRecordsResponse {
	s.Body = v
	return s
}

type SearchOmsOpenAPIMonitorMetricRequest struct {
	// Alibaba Cloud provides SDKs in different languages to help you quickly integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call APIs. In this way, you do not need to sign for verification.
	BeginTime *int64 `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	// It is an Alibaba Cloud asset management and configuration tool, with which you can manage multiple Alibaba Cloud products and services by using commands. It is easy to use and a good helper in migration to cloud.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Contact the administrator.
	MaxPointNum *int64 `json:"MaxPointNum,omitempty" xml:"MaxPointNum,omitempty"`
	// The business data returned.
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The information about the object.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// A millisecond-level timestamp.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The value corresponding to the time.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The name of the metric.
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s SearchOmsOpenAPIMonitorMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIMonitorMetricRequest) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIMonitorMetricRequest) SetBeginTime(v int64) *SearchOmsOpenAPIMonitorMetricRequest {
	s.BeginTime = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricRequest) SetEndTime(v int64) *SearchOmsOpenAPIMonitorMetricRequest {
	s.EndTime = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricRequest) SetMaxPointNum(v int64) *SearchOmsOpenAPIMonitorMetricRequest {
	s.MaxPointNum = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricRequest) SetMetric(v string) *SearchOmsOpenAPIMonitorMetricRequest {
	s.Metric = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricRequest) SetPageNumber(v int32) *SearchOmsOpenAPIMonitorMetricRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricRequest) SetPageSize(v int32) *SearchOmsOpenAPIMonitorMetricRequest {
	s.PageSize = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricRequest) SetProjectId(v string) *SearchOmsOpenAPIMonitorMetricRequest {
	s.ProjectId = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricRequest) SetWorkerGradeId(v string) *SearchOmsOpenAPIMonitorMetricRequest {
	s.WorkerGradeId = &v
	return s
}

type SearchOmsOpenAPIMonitorMetricResponseBody struct {
	// The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// The business data returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	Cost *string                                          `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data []*SearchOmsOpenAPIMonitorMetricResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// A system error occurred.
	ErrorDetail *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	// The suggestions (old).
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The error code (new).
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page number, which takes effect in a pagination query.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The time spent in processing the request, in seconds.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total count, which takes effect in a pagination query.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The error details.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchOmsOpenAPIMonitorMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIMonitorMetricResponseBody) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetAdvice(v string) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.Advice = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetCode(v string) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.Code = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetCost(v string) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.Cost = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetData(v []*SearchOmsOpenAPIMonitorMetricResponseBodyData) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.Data = v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetErrorDetail(v *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetMessage(v string) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.Message = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetPageNumber(v int32) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetPageSize(v int32) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetRequestId(v string) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetSuccess(v bool) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.Success = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBody) SetTotalCount(v int64) *SearchOmsOpenAPIMonitorMetricResponseBody {
	s.TotalCount = &v
	return s
}

type SearchOmsOpenAPIMonitorMetricResponseBodyData struct {
	// connector data point
	DataPoints []*SearchOmsOpenAPIMonitorMetricResponseBodyDataDataPoints `json:"DataPoints,omitempty" xml:"DataPoints,omitempty" type:"Repeated"`
	Metric     *string                                                    `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// metric tags
	Tags map[string]*string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s SearchOmsOpenAPIMonitorMetricResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIMonitorMetricResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBodyData) SetDataPoints(v []*SearchOmsOpenAPIMonitorMetricResponseBodyDataDataPoints) *SearchOmsOpenAPIMonitorMetricResponseBodyData {
	s.DataPoints = v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBodyData) SetMetric(v string) *SearchOmsOpenAPIMonitorMetricResponseBodyData {
	s.Metric = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBodyData) SetTags(v map[string]*string) *SearchOmsOpenAPIMonitorMetricResponseBodyData {
	s.Tags = v
	return s
}

type SearchOmsOpenAPIMonitorMetricResponseBodyDataDataPoints struct {
	Timestamp *int64   `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Value     *float64 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SearchOmsOpenAPIMonitorMetricResponseBodyDataDataPoints) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIMonitorMetricResponseBodyDataDataPoints) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBodyDataDataPoints) SetTimestamp(v int64) *SearchOmsOpenAPIMonitorMetricResponseBodyDataDataPoints {
	s.Timestamp = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBodyDataDataPoints) SetValue(v float64) *SearchOmsOpenAPIMonitorMetricResponseBodyDataDataPoints {
	s.Value = &v
	return s
}

type SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail struct {
	// The information about the object.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error code (old).
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The ID of the project to query.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The error description (new).
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail) SetCode(v string) *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail) SetLevel(v string) *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail) SetMessage(v string) *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail) SetProposal(v string) *SearchOmsOpenAPIMonitorMetricResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type SearchOmsOpenAPIMonitorMetricResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchOmsOpenAPIMonitorMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchOmsOpenAPIMonitorMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIMonitorMetricResponse) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIMonitorMetricResponse) SetHeaders(v map[string]*string) *SearchOmsOpenAPIMonitorMetricResponse {
	s.Headers = v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponse) SetStatusCode(v int32) *SearchOmsOpenAPIMonitorMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchOmsOpenAPIMonitorMetricResponse) SetBody(v *SearchOmsOpenAPIMonitorMetricResponseBody) *SearchOmsOpenAPIMonitorMetricResponse {
	s.Body = v
	return s
}

type SearchOmsOpenAPIProjectsRequest struct {
	// The types of destination data sources.
	DestDbTypes []*string `json:"DestDbTypes,omitempty" xml:"DestDbTypes,omitempty" type:"Repeated"`
	// The list of labels.
	LabelIds []*string `json:"LabelIds,omitempty" xml:"LabelIds,omitempty" type:"Repeated"`
	// The page number, which takes effect in a pagination query.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page size, which takes effect in a pagination query.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keyword for fuzzy search. A fuzzy search is performed based on the project ID and name.
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The types of source data sources.
	SourceDbTypes []*string `json:"SourceDbTypes,omitempty" xml:"SourceDbTypes,omitempty" type:"Repeated"`
	// The list of project statuses.
	StatusList []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
	// The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s SearchOmsOpenAPIProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsRequest) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsRequest) SetDestDbTypes(v []*string) *SearchOmsOpenAPIProjectsRequest {
	s.DestDbTypes = v
	return s
}

func (s *SearchOmsOpenAPIProjectsRequest) SetLabelIds(v []*string) *SearchOmsOpenAPIProjectsRequest {
	s.LabelIds = v
	return s
}

func (s *SearchOmsOpenAPIProjectsRequest) SetPageNumber(v int32) *SearchOmsOpenAPIProjectsRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsRequest) SetPageSize(v int32) *SearchOmsOpenAPIProjectsRequest {
	s.PageSize = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsRequest) SetSearchKey(v string) *SearchOmsOpenAPIProjectsRequest {
	s.SearchKey = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsRequest) SetSourceDbTypes(v []*string) *SearchOmsOpenAPIProjectsRequest {
	s.SourceDbTypes = v
	return s
}

func (s *SearchOmsOpenAPIProjectsRequest) SetStatusList(v []*string) *SearchOmsOpenAPIProjectsRequest {
	s.StatusList = v
	return s
}

func (s *SearchOmsOpenAPIProjectsRequest) SetWorkerGradeId(v string) *SearchOmsOpenAPIProjectsRequest {
	s.WorkerGradeId = &v
	return s
}

type SearchOmsOpenAPIProjectsShrinkRequest struct {
	// The types of destination data sources.
	DestDbTypesShrink *string `json:"DestDbTypes,omitempty" xml:"DestDbTypes,omitempty"`
	// The list of labels.
	LabelIdsShrink *string `json:"LabelIds,omitempty" xml:"LabelIds,omitempty"`
	// The page number, which takes effect in a pagination query.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page size, which takes effect in a pagination query.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keyword for fuzzy search. A fuzzy search is performed based on the project ID and name.
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The types of source data sources.
	SourceDbTypesShrink *string `json:"SourceDbTypes,omitempty" xml:"SourceDbTypes,omitempty"`
	// The list of project statuses.
	StatusListShrink *string `json:"StatusList,omitempty" xml:"StatusList,omitempty"`
	// The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s SearchOmsOpenAPIProjectsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsShrinkRequest) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsShrinkRequest) SetDestDbTypesShrink(v string) *SearchOmsOpenAPIProjectsShrinkRequest {
	s.DestDbTypesShrink = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsShrinkRequest) SetLabelIdsShrink(v string) *SearchOmsOpenAPIProjectsShrinkRequest {
	s.LabelIdsShrink = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsShrinkRequest) SetPageNumber(v int32) *SearchOmsOpenAPIProjectsShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsShrinkRequest) SetPageSize(v int32) *SearchOmsOpenAPIProjectsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsShrinkRequest) SetSearchKey(v string) *SearchOmsOpenAPIProjectsShrinkRequest {
	s.SearchKey = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsShrinkRequest) SetSourceDbTypesShrink(v string) *SearchOmsOpenAPIProjectsShrinkRequest {
	s.SourceDbTypesShrink = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsShrinkRequest) SetStatusListShrink(v string) *SearchOmsOpenAPIProjectsShrinkRequest {
	s.StatusListShrink = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsShrinkRequest) SetWorkerGradeId(v string) *SearchOmsOpenAPIProjectsShrinkRequest {
	s.WorkerGradeId = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBody struct {
	// The suggestions (old).
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// The error code (old).
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time spent in processing the request, in seconds.
	Cost *string `json:"Cost,omitempty" xml:"Cost,omitempty"`
	// The business data returned.
	Data []*SearchOmsOpenAPIProjectsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The error details.
	ErrorDetail *SearchOmsOpenAPIProjectsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	// The error description (old).
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number, which takes effect in a pagination query.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page size, which takes effect in a pagination query.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total count, which takes effect in a pagination query.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetAdvice(v string) *SearchOmsOpenAPIProjectsResponseBody {
	s.Advice = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetCode(v string) *SearchOmsOpenAPIProjectsResponseBody {
	s.Code = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetCost(v string) *SearchOmsOpenAPIProjectsResponseBody {
	s.Cost = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetData(v []*SearchOmsOpenAPIProjectsResponseBodyData) *SearchOmsOpenAPIProjectsResponseBody {
	s.Data = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetErrorDetail(v *SearchOmsOpenAPIProjectsResponseBodyErrorDetail) *SearchOmsOpenAPIProjectsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetMessage(v string) *SearchOmsOpenAPIProjectsResponseBody {
	s.Message = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetPageNumber(v int32) *SearchOmsOpenAPIProjectsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetPageSize(v int32) *SearchOmsOpenAPIProjectsResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetRequestId(v string) *SearchOmsOpenAPIProjectsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetSuccess(v bool) *SearchOmsOpenAPIProjectsResponseBody {
	s.Success = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBody) SetTotalCount(v int64) *SearchOmsOpenAPIProjectsResponseBody {
	s.TotalCount = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyData struct {
	// The business system identifier, which is optional and is a specific field of the Post message.
	BusinessName *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	// The settings of the destination data source.
	DestConfig *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig `json:"DestConfig,omitempty" xml:"DestConfig,omitempty" type:"Struct"`
	// A collection of label IDs.
	Labels []*SearchOmsOpenAPIProjectsResponseBodyDataLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The project ID.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The name of the project.
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	// The project owner.
	ProjectOwner *string `json:"ProjectOwner,omitempty" xml:"ProjectOwner,omitempty"`
	// The settings of the source data source.
	SourceConfig *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty" type:"Struct"`
	// The detailed project steps.
	Steps []*SearchOmsOpenAPIProjectsResponseBodyDataSteps `json:"Steps,omitempty" xml:"Steps,omitempty" type:"Repeated"`
	// The mappings for the synchronization objects.
	TransferMapping *SearchOmsOpenAPIProjectsResponseBodyDataTransferMapping `json:"TransferMapping,omitempty" xml:"TransferMapping,omitempty" type:"Struct"`
	// The settings of synchronization steps
	TransferStepConfig *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig `json:"TransferStepConfig,omitempty" xml:"TransferStepConfig,omitempty" type:"Struct"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetBusinessName(v string) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.BusinessName = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetDestConfig(v *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.DestConfig = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetLabels(v []*SearchOmsOpenAPIProjectsResponseBodyDataLabels) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.Labels = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetProjectId(v string) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetProjectName(v string) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetProjectOwner(v string) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.ProjectOwner = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetSourceConfig(v *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.SourceConfig = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetSteps(v []*SearchOmsOpenAPIProjectsResponseBodyDataSteps) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.Steps = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetTransferMapping(v *SearchOmsOpenAPIProjectsResponseBodyDataTransferMapping) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.TransferMapping = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyData) SetTransferStepConfig(v *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig) *SearchOmsOpenAPIProjectsResponseBodyData {
	s.TransferStepConfig = v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataDestConfig struct {
	// Indicates whether message tracing is enabled when the destination data source is RocketMQ.
	EnableMsgTrace *bool `json:"EnableMsgTrace,omitempty" xml:"EnableMsgTrace,omitempty"`
	// The ID of the data source.
	EndpointId *string `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	// The type of the data source. Valid values: MYSQL, MARIADB, OB_MYSQL, OB_MYSQL_CE, OB_ORACLE, ORACLE, DB2_LUW, KAFKA, ROCKETMQ, DATAHUB, SYBASE, LOGPROXY, ADB, DBP_OP_ROUTE, DMS, IDB, and TIDB.
	EndpointType *string `json:"EndpointType,omitempty" xml:"EndpointType,omitempty"`
	// The tag of the Post message when the destination data source is RocketMQ.
	MsgTags *string `json:"MsgTags,omitempty" xml:"MsgTags,omitempty"`
	// The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, and RocketMQ, and the partitioning mode is set to ONE.
	Partition *int32 `json:"Partition,omitempty" xml:"Partition,omitempty"`
	// The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.
	PartitionMode *string `json:"PartitionMode,omitempty" xml:"PartitionMode,omitempty"`
	// The producer group of the Post message when the destination data source is RocketMQ.
	ProducerGroup *string `json:"ProducerGroup,omitempty" xml:"ProducerGroup,omitempty"`
	// The timeout period in seconds for a single Post message when the destination data source is RocketMQ.
	SendMsgTimeout *int64 `json:"SendMsgTimeout,omitempty" xml:"SendMsgTimeout,omitempty"`
	// Indicates whether message sequencing is enabled when the destination data source is DataHub.
	SequenceEnable *bool `json:"SequenceEnable,omitempty" xml:"SequenceEnable,omitempty"`
	// The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.
	SequenceStartTimestamp *int64 `json:"SequenceStartTimestamp,omitempty" xml:"SequenceStartTimestamp,omitempty"`
	// The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.
	SerializerType *string `json:"SerializerType,omitempty" xml:"SerializerType,omitempty"`
	// The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.
	TopicType *string `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetEnableMsgTrace(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.EnableMsgTrace = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetEndpointId(v string) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.EndpointId = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetEndpointType(v string) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.EndpointType = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetMsgTags(v string) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.MsgTags = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetPartition(v int32) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.Partition = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetPartitionMode(v string) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.PartitionMode = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetProducerGroup(v string) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.ProducerGroup = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetSendMsgTimeout(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.SendMsgTimeout = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetSequenceEnable(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.SequenceEnable = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetSequenceStartTimestamp(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.SequenceStartTimestamp = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetSerializerType(v string) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.SerializerType = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig) SetTopicType(v string) *SearchOmsOpenAPIProjectsResponseBodyDataDestConfig {
	s.TopicType = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataLabels struct {
	// The number of projects that use this label.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The creator. This parameter value is returned only when you log on as the administrator.
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The ID of a label.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the label.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataLabels) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataLabels) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataLabels) SetCount(v int32) *SearchOmsOpenAPIProjectsResponseBodyDataLabels {
	s.Count = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataLabels) SetCreator(v string) *SearchOmsOpenAPIProjectsResponseBodyDataLabels {
	s.Creator = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataLabels) SetId(v string) *SearchOmsOpenAPIProjectsResponseBodyDataLabels {
	s.Id = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataLabels) SetName(v string) *SearchOmsOpenAPIProjectsResponseBodyDataLabels {
	s.Name = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig struct {
	// Indicates whether message tracing is enabled when the destination data source is RocketMQ.
	EnableMsgTrace *bool `json:"EnableMsgTrace,omitempty" xml:"EnableMsgTrace,omitempty"`
	// The ID of the data source.
	EndpointId *string `json:"EndpointId,omitempty" xml:"EndpointId,omitempty"`
	// The type of the data source. Valid values: `MYSQL`, `MARIADB`, `OB_MYSQL`, `OB_MYSQL_CE`, `OB_ORACLE`, `ORACLE`, `DB2_LUW`, `KAFKA`, `ROCKETMQ`, `DATAHUB`, `SYBASE`, `LOGPROXY`, `ADB`, `DBP_OP_ROUTE`, `DMS`, `IDB`, and `TIDB`.
	EndpointType *string `json:"EndpointType,omitempty" xml:"EndpointType,omitempty"`
	// The tag of the Post message when the destination data source is RocketMQ.
	MsgTags *string `json:"MsgTags,omitempty" xml:"MsgTags,omitempty"`
	// The partitioned index, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ, and the partitioning mode is set to ONE.
	Partition *int32 `json:"Partition,omitempty" xml:"Partition,omitempty"`
	// The partitioning mode, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: ONE, HASH, and TABLE.
	PartitionMode *string `json:"PartitionMode,omitempty" xml:"PartitionMode,omitempty"`
	// The producer group of the Post message when the destination data source is RocketMQ.
	ProducerGroup *string `json:"ProducerGroup,omitempty" xml:"ProducerGroup,omitempty"`
	// The timeout period in seconds for a single Post message when the destination data source is RocketMQ.
	SendMsgTimeout *int64 `json:"SendMsgTimeout,omitempty" xml:"SendMsgTimeout,omitempty"`
	// Indicates whether message sequencing is enabled when the destination data source is DataHub.
	SequenceEnable *bool `json:"SequenceEnable,omitempty" xml:"SequenceEnable,omitempty"`
	// The start time of the sequence, which must be specified if the destination data source is DataHub and message sequencing is enabled. The value is a timestamp in seconds.
	SequenceStartTimestamp *int64 `json:"SequenceStartTimestamp,omitempty" xml:"SequenceStartTimestamp,omitempty"`
	// The text serialization type, which must be specified if the destination data source is a message queue system, such as Kafka, DataHub, or RocketMQ. Valid values: Default, DefaultExtendColumnType, Canal, Dataworks, and SharePlex.
	SerializerType *string `json:"SerializerType,omitempty" xml:"SerializerType,omitempty"`
	// The type of the topic to which the Post message belongs when the destination data source is DataHub. Valid values: Tuple and Blob.
	TopicType *string `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetEnableMsgTrace(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.EnableMsgTrace = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetEndpointId(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.EndpointId = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetEndpointType(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.EndpointType = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetMsgTags(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.MsgTags = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetPartition(v int32) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.Partition = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetPartitionMode(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.PartitionMode = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetProducerGroup(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.ProducerGroup = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetSendMsgTimeout(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.SendMsgTimeout = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetSequenceEnable(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.SequenceEnable = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetSequenceStartTimestamp(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.SequenceStartTimestamp = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetSerializerType(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.SerializerType = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig) SetTopicType(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSourceConfig {
	s.TopicType = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataSteps struct {
	// The estimated time remained.
	EstimatedRemainingSeconds *int64 `json:"EstimatedRemainingSeconds,omitempty" xml:"EstimatedRemainingSeconds,omitempty"`
	// The additional information. The value is a JSON string.
	ExtraInfo *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty" type:"Struct"`
	// The end time, in the format of "2020-05-22T17:04:18".
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// Indicates whether the current step must be confirmed by the user, rather than scheduled in the backend.
	Interactive *bool `json:"Interactive,omitempty" xml:"Interactive,omitempty"`
	// The start time, in the format of "2020-05-22T17:04:18".
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The description of the step, for example, schema migration, full migration, full verification, incremental log pull, incremental synchronization, or incremental verification.
	StepDescription *string `json:"StepDescription,omitempty" xml:"StepDescription,omitempty"`
	// The step details. The value is a JSON string.
	StepInfo *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo `json:"StepInfo,omitempty" xml:"StepInfo,omitempty" type:"Struct"`
	// The step name. Valid values: struct_migration, full_migration, full_validation, incr_log_pull, incr_sync/incr_validation, PRE_CHECK, PREPARE, STRUCT_MIGRATION, INDEX_MIGRATION, STRUCT_SYNC, FULL_MIGRATION, APP_SWITCH, REVERSE_INCR_SYNC, FULL_VALIDATION, INCR_LOG_PULL, INCR_SYNC, INCR_VALIDATION, SYNC_PREPARE, SYNC_INCR_LOG_PULL, CONNECTOR_FULL_SYNC, or CONNECTOR_INCR_SYNC.
	StepName *string `json:"StepName,omitempty" xml:"StepName,omitempty"`
	// The sequence of steps.
	StepOrder *int32 `json:"StepOrder,omitempty" xml:"StepOrder,omitempty"`
	// The step progress.
	StepProgress *int32 `json:"StepProgress,omitempty" xml:"StepProgress,omitempty"`
	// The step status. Valid values: INIT, RUNNING, FAILED, FINISHED, SUSPEND, and MONITORING. The value MONITORING indicates the continuous monitoring of incremental synchronization and incremental verification.
	StepStatus *string `json:"StepStatus,omitempty" xml:"StepStatus,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataSteps) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataSteps) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetEstimatedRemainingSeconds(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.EstimatedRemainingSeconds = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetExtraInfo(v *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.ExtraInfo = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetFinishTime(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.FinishTime = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetInteractive(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.Interactive = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetStartTime(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.StartTime = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetStepDescription(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.StepDescription = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetStepInfo(v *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.StepInfo = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetStepName(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.StepName = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetStepOrder(v int32) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.StepOrder = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetStepProgress(v int32) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.StepProgress = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataSteps) SetStepStatus(v string) *SearchOmsOpenAPIProjectsResponseBodyDataSteps {
	s.StepStatus = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo struct {
	// The error code, such as AUTHENTICATION_ERROR, PARAM_ERROR, PARAM_ERROR_MESSAGE, NOT_IMPLEMENTED_ERROR, SHARD_COLUMNS_CONFLICT_MESSAGE, FAILED_PARSE_TOKEN_MESSAGE, CONNECT_CHECK_ERROR, NOT_SUPPORT_ERROR, CE_NOT_SUPPORT_ERROR, NOT_FOUND_ERROR, SHARDING_COLUMN_NOT_INCLUDED_ERROR, INNER_ERROR, DB_QUERY_ERROR, DATAHUB_QUERY_ERROR, USER_LACK_SYS_PRIV_ERROR, USER_LACK_TABLE_PRIV_ERROR, RM_API_ERROR, RM_TASK_ERROR, CM_API_ERROR, CM_API_NOT_SUCCESS, BAGUALU_API_ERROR, IDB_API_ERROR, SUPERVISOR_API_ERROR, OCP_API_ERROR, OCP_SERVICE_ERROR, OCP_QUERY_VERSION_FAILED, OCP_VERSION_INCORRECT_ERROR, OCP_VERSION_NOT_SUPPORTED_ERROR, OCP_API_USER_PASSWORD_INCORRECT_ERROR, OBSCHEMA_ERROR, EXECUTOR_THREAD_POOL_BUSY, NO_TABLE_SELECTED, NO_VIEW_SELECTED, SOURCE_CRAWLER_START_FAILED, SOURCE_CRAWLER_START_FAILED_DATA_EXPIRED, SOURCE_CRAWLER_START_TIMEOUT, DEST_WRITER_START_FAILED, WRITER_UNKNOWN_STATUS, DRC_TOPIC_EXISTS_ERROR, TOPIC_EMPTY_ERROR, REACH_WRITER_LIMIT_ERROR, FOUND_NO_FEASIBLE_STORE_ERROR, TOO_MANY_STORES_FOR_SUBTOPIC, TIMEOUT_EXCEPTION, KIPP_API_ERROR, KIPP_API_RESOURCE_NOT_FOUND, KIPP_API_INVALID_PARAM, KIPP_API_UNKNOWN_ERROR, KIPP_API_INTERNAL_ERROR, KIPP_API_SERVICE_UNAVAILABLE, OMS_AGENT_API_ERROR, KMS_API_ERROR, OMS_ENCRYPT_API_ERROR, OMS_DECRYPT_API_ERROR, ALIYUN_SDK_ERROR, YAOCHI_API_ERROR, RESOURCE_WITHOUT_STOCK_ERROR, RESOURCE_NO_AVAILABLE_ZONE, CM_SDK_ERROR, MIGRATION_PROJECT_STEP_PRECHECK_FAILED, PRE_CHECK_ERROR, FAILURES_CORRECT_ERROR, EXECUTE_DDL_FAILURE, EXECUTE_DDL_UNSUPPORTED_OR_FAILURE, STRUCT_RECORD_DDL_NOT_FOUND, STRUCT_RECORD_INDEX_NOT_FOUND, STRUCT_RECORD_NOT_FOUND, STRUCT_RECORD_NOT_FOUND_IN_DBCAT, SCHEMA_OBJECT_TYPE_NOT_SUPPORT_ERROR, POLAR_MYSQL_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_NETWORK_TYPE_NOT_SUPPORT_ERROR, RDS_VPC_NETWORK_NOT_SUPPORT_ERROR, DB_TYPE_NOT_SUPPORT_ERROR, SYNC_TYPE_NOT_SUPPORT_ERROR, SLAVE_OPERATION_STEP_NOT_SUPPORT_ERROR, BYTE_USED_TYPE_NOT_SUPPORT_ERROR, MANY_TO_ONE_SCHEMA_TABLE_REVERSE_INCR_NOT_SUPPORT_ERROR, DUPLICATE_SCHEMA_TABLE_ERROR, OMS_STEP_NOT_SUPPORT_ERROR, ORACLE_DATABASE_ROLE_NOT_SUPPORT_ERROR, OLD_PRE_CHECK_NOT_SUPPORT_ERROR, SCHEMA_ONE_TO_MANY_NOT_SUPPORT_ERROR, PROJECT_NOT_FOUND_ERROR, ENDPOINT_NOT_FOUND_ERROR, ENDPOINT_NAME_ALREADY_EXIST_ERROR, ENDPOINT_QUERY_ERROR, ENDPOINT_SQL_QUERY_ERROR, PROJECT_NAME_ALREADY_EXIST_ERROR, CHECKER_NOT_FOUND_ERROR, CHECKER_FAILED_ERROR, CHECKER_STATUS_UNEXPECTED_ERROR, CHECKER_NO_TASK_TYPE_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR, WORKER_INSTANCE_ALLOCATING_ERROR, LOG_SERVICE_TOPIC_NOT_FOUND_ERROR, CLUSTER_NOT_FOUND_ERROR, TENANT_NOT_FOUND_ERROR, DATABASE_NOT_FOUND_ERROR, TABLE_NOT_FOUND_ERROR, COLUMN_NOT_FOUND_ERROR, TABLE_META_NOT_FOUND_ERROR, SYBASE_CHARSET_NOT_FOUND_ERROR, OCP_NOT_FOUND_ERROR, REGION_NOT_FOUND_ERROR, OCP_ALREADY_EXIST_ERROR, ALARM_CHANNEL_NAME_ALREADY_EXIST_ERROR, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_RESPONSE, SEND_MARKDOWN_TEXT_TO_WEBHOOK_FAILED_EXCEPTION_STATUS, LABEL_ALREADY_EXIST_ERROR, LABEL_NOT_EXIST_ERROR, OCP_ALREADY_USED_ERROR, REGION_INFO_INCONSISTENT_ERROR, OCP_NAME_EMPTY_ERROR, MASTER_SLAVE_ENDPOINT_NAME_INCONSISTENT_ERROR, LOG_FILE_NOT_FOUND_ERROR, OPERATION_NOT_ALLOWED_ERROR, PROJECT_OPERATION_NOT_ALLOWED_ERROR, PROJECT_RELEASE_FAILED, STRUCT_MIGRATION_RETRY_NOT_ALLOWED_ERROR, WORKER_INSTANCE_OPERATION_NOT_ALLOWED_ERROR, USER_OPERATION_NOT_ALLOWED_ERROR, OCP_NAME_OR_REGION_NOT_ALLOWED_UPDATE, UPDATE_CONFIG_WITH_NEWLINE_NOT_ALLOWED, EXIST_UNRELEASED_PROJECT_ERROR, EXIST_UNRELEASED_TOPIC_ERROR, LABEL_CREATE_NOT_ALLOWED_ERROR, LABEL_UPDATE_NOT_ALLOWED_ERROR, LABEL_DELETE_NOT_ALLOWED_ERROR, TOPIC_NAME_INVALID_ERROR, INVALID_STATUS_ERROR, INVALID_CSV_HEAD_ERROR, INVALID_CSV_BODY_ERROR, DUPLICATE_SCHEMA_TABLE_SETTING_ERROR, PROJECT_INVALID_STATUS_ERROR, PROJECT_INVALID_CONNECTOR_COUNT_ERROR, WORKER_INSTANCE_INVALID_STATUS_ERROR, LOG_SERVICE_INVALID_STATUS_ERROR, STEP_INVALID_STATUS_ERROR, UPDATE_ALLOW_DEST_TABLE_NOT_EMPTY_NOT_ALLOWED_ERROR, EXIST_INCONSISTENCY_ERROR, OMS_SWITCH_SUBSTEP_FAILED_ERROR, ENDPOINT_ID_INVALID_ERROR, DB_QUERY_VERSION_EMPTY_ERROR, ENDPOINT_NAME_INVALID_ERROR, ENDPOINT_SCHEMA_NOT_ALLOWED_ERROR, ENDPOINT_SCHEMA_CHAR_NOT_ALLOWED_ERROR, NAME_HAS_SPACE_EXCEPTION, CONFIG_CONVERT_VALUE_ERROR, CONFIG_VALUE_EXCEEDS_LIMIT_ERROR, CONFIG_KEY_NOT_FOUND_KEY_ERROR, CONFIG_VALUE_NOT_EMPTY_ERROR, SCHEMA_HAS_CONVERT_INFO, TIME_SERIES_QUERY_SERVICE_ERROR, ETL_VERIFY_ERROR, ETL_SYNTAX_UNSUPPORTED, ETL_FIELD_NOTFOUND, ETL_FAILED_PARSE_SQL, ETL_VAL_TYPE_ERROR, NOT_SUPPORT_GENERATE_COLUMNS, NOT_SUPPORT_UPDATE_ETL, LOCK_FAILED, OMS_USER_EXIST_ERROR, OMS_USER_NOT_FOUND_ERROR, OMS_USER_NAME_LENGTH_CONSTRAINT, OMS_USER_PASSWORD_ERROR, USER_NAME_OR_PASSWORD_ERROR, OMS_USER_PASSWORD_VALIDATION_ERROR, OMS_USER_PASSWORD_DEFAULT_ERROR, OMS_USER_PERMISSION_DENIED_ERROR, OMS_USER_EDIT_ADMIN_ROLE_INFO_PERMISSION_DENIED_ERROR, OMS_USER_ILLEGAL_DELETED_ERROR, CONNECTOR_TASK_NOT_FOUND_ERROR, CONNECTOR_TASK_NUM_LIMIT_ERROR, CONNECTOR_TASK_DELETE_ERROR, METRIC_SERVICE_ERROR, SYNC_PROJECT_TYPE_INVALID_ERROR, SYNC_SHARDING_COLUMNS_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_INVALID_ERROR, SYNC_PROJECT_PRODUCER_GROUP_LIMIT_EXCEEDS_ERROR, SYNC_PROJECT_COMPLEMENT_CONFIG_ERROR, META_SCHEMA_CREATE_FAILED, RESUME_STEP_FAILED, SCHEMA_INCONSISTENCY, SCHEMA_CASCADE_MAPPING_NOT_SUPPORT_ERROR, SCHEMA_NOT_EXISTED, SCHEMA_EXISTED, SCHEMA_NOT_EXIST, BLACK_LIST_MATCH_ALL, BLACK_LIST_CONTAIN_NON_WHITE_SCHEMA, BLACK_WHITE_LIST_PARAM_INVALID_ERROR, OPERATOR_ERROR, OPERATOR_DIMENSION_NOT_SUPPORT, OPERATOR_PULL_LOG_ERROR, OPERATOR_UPDATE_CONFIG_NOT_SUPPORT, KAFKA_CREATE_TOPIC_ERROR, KAFKA_QUERY_TOPIC_ERROR, KAFKA_BUILD_PROPERTIES_ERROR, ROCKETMQ_CREATE_TOPIC_ERROR, ROCKETMQ_QUERY_TOPIC_ERROR, SYNC_OBJECT_EMPTY_ERROR, WRITER_NUMBER_NOT_UNIQUE, WRITER_NOT_ACTIVE, PROJECT_NAME_DUPLICATE_ERROR, EMPTY_FAILED_STRUCT_MIGRATION_TABLES_ERROR, LOGIC_TABLE_NOT_SUPPORT_UPDATE_OBJECT_ERROR, LOGIC_REQUEST_ERROR, LOGIC_DTO_BUILD_ERROR, UNEXPECTED_REMOTE_API_RESULT, OCEANBASE_USER_UNEXPECTED, STORE_CREATE_FAILED_ERROR, STORE_START_FAILED, STORE_NOT_PULL_LOG_ERROR, ALL_HOSTS_STATUS_ERROR, WORKER_ECS_NOT_FOUND_ERROR, WORKER_ECS_NOT_FOUND_FOR_USER_ERROR, WORKER_POD_NOT_FOUND_ERROR, WORKER_POD_NOT_FOUND_FOR_USER_ERROR, WORKER_INSTANCE_NOT_FOUND_ERROR_V2, and WORKER_INSTANCE_NOT_FOUND_FOR_USER_ERROR.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error details.
	ErrorDetails []*SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	// The error message.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The error related parameters.
	ErrorParam map[string]*string `json:"ErrorParam,omitempty" xml:"ErrorParam,omitempty"`
	// The time when the error occurred.
	FailedTime *string `json:"FailedTime,omitempty" xml:"FailedTime,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo) SetErrorCode(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo {
	s.ErrorCode = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo) SetErrorDetails(v []*SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails) *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo {
	s.ErrorDetails = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo) SetErrorMsg(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo {
	s.ErrorMsg = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo) SetErrorParam(v map[string]*string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo {
	s.ErrorParam = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo) SetFailedTime(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfo {
	s.FailedTime = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails struct {
	// The error code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Valid values: CRITICAL, ERROR, and WARN.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The error message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The suggestions.
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetCode(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.Code = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetLevel(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.Level = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetMessage(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.Message = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails) SetProposal(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsExtraInfoErrorDetails {
	s.Proposal = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo struct {
	// The estimated total number of rows.
	Capacity *int64 `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	// The checkpoint. The value is a unix timestamp in seconds.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The full synchronization progress.
	ConnectorFullProgressOverview *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview `json:"ConnectorFullProgressOverview,omitempty" xml:"ConnectorFullProgressOverview,omitempty" type:"Struct"`
	// The resource deployment ID.
	DeployId *string `json:"DeployId,omitempty" xml:"DeployId,omitempty"`
	// The read/write throughput of the destination data source, in bytes per second.
	DstIops *int64 `json:"DstIops,omitempty" xml:"DstIops,omitempty"`
	// The read/write RPS of the destination data source.
	DstRps *int64 `json:"DstRps,omitempty" xml:"DstRps,omitempty"`
	// The read/write RPS baseline of the destination data source.
	DstRpsRef *int64 `json:"DstRpsRef,omitempty" xml:"DstRpsRef,omitempty"`
	// The read/write RT per record of the destination data source, in ms.
	DstRt *int64 `json:"DstRt,omitempty" xml:"DstRt,omitempty"`
	// The read/write RT baseline of the destination data source.
	DstRtRef *int64 `json:"DstRtRef,omitempty" xml:"DstRtRef,omitempty"`
	// The checkpoint collection time. The value is a unix timestamp in seconds.
	Gmt *int64 `json:"Gmt,omitempty" xml:"Gmt,omitempty"`
	// The amount of inconsistent data found during full verification.
	Inconsistencies *int64 `json:"Inconsistencies,omitempty" xml:"Inconsistencies,omitempty"`
	// The checkpoint in incremental synchronization. The value is a unix timestamp in seconds.
	IncrTimestampCheckpoint *int64 `json:"IncrTimestampCheckpoint,omitempty" xml:"IncrTimestampCheckpoint,omitempty"`
	// The ID of the current job of the step.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The number of migrated rows.
	ProcessedRecords *int64 `json:"ProcessedRecords,omitempty" xml:"ProcessedRecords,omitempty"`
	// A sub-status that indicates whether this step is skipped.
	Skipped *bool `json:"Skipped,omitempty" xml:"Skipped,omitempty"`
	// The read throughput of the source data source, in bytes per second.
	SrcIops *int64 `json:"SrcIops,omitempty" xml:"SrcIops,omitempty"`
	// The read throughput baseline of the source data source.
	SrcIopsRef *int64 `json:"SrcIopsRef,omitempty" xml:"SrcIopsRef,omitempty"`
	// The read requests per second (RPS) of the source data source.
	SrcRps *int64 `json:"SrcRps,omitempty" xml:"SrcRps,omitempty"`
	// The read RPS baseline of the source data source.
	SrcRpsRef *int64 `json:"SrcRpsRef,omitempty" xml:"SrcRpsRef,omitempty"`
	// The read response time (RT) per record of the source data source, in ms.
	SrcRt *int64 `json:"SrcRt,omitempty" xml:"SrcRt,omitempty"`
	// The read RT baseline of the source data source.
	SrcRtRef *int64 `json:"SrcRtRef,omitempty" xml:"SrcRtRef,omitempty"`
	// A sub-status that indicates whether the checker has completed full verification.
	Validated *bool `json:"Validated,omitempty" xml:"Validated,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetCapacity(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.Capacity = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetCheckpoint(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.Checkpoint = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetConnectorFullProgressOverview(v *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.ConnectorFullProgressOverview = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetDeployId(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.DeployId = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetDstIops(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.DstIops = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetDstRps(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.DstRps = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetDstRpsRef(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.DstRpsRef = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetDstRt(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.DstRt = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetDstRtRef(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.DstRtRef = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetGmt(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.Gmt = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetInconsistencies(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.Inconsistencies = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetIncrTimestampCheckpoint(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.IncrTimestampCheckpoint = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetJobId(v string) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.JobId = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetProcessedRecords(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.ProcessedRecords = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetSkipped(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.Skipped = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetSrcIops(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.SrcIops = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetSrcIopsRef(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.SrcIopsRef = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetSrcRps(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.SrcRps = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetSrcRpsRef(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.SrcRpsRef = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetSrcRt(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.SrcRt = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetSrcRtRef(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.SrcRtRef = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo) SetValidated(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfo {
	s.Validated = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview struct {
	// The estimated maximum time remained, in seconds.
	EstimatedRemainingTimeOfSec *int64 `json:"EstimatedRemainingTimeOfSec,omitempty" xml:"EstimatedRemainingTimeOfSec,omitempty"`
	// The estimated amount of data to migrate.
	EstimatedTotalCount *int64 `json:"EstimatedTotalCount,omitempty" xml:"EstimatedTotalCount,omitempty"`
	// The amount of data migrated.
	FinishedCount *int64 `json:"FinishedCount,omitempty" xml:"FinishedCount,omitempty"`
	// finishedCount / estimatedTotalCount
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview) SetEstimatedRemainingTimeOfSec(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview {
	s.EstimatedRemainingTimeOfSec = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview) SetEstimatedTotalCount(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview {
	s.EstimatedTotalCount = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview) SetFinishedCount(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview {
	s.FinishedCount = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview) SetProgress(v int32) *SearchOmsOpenAPIProjectsResponseBodyDataStepsStepInfoConnectorFullProgressOverview {
	s.Progress = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataTransferMapping struct {
	// The table mapping in the source data source, which is a conventional mapping scheme and takes effect only when Mode is set to NORMAL.
	Databases []*SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// The mapping type. Valid values: \"NORMAL\" and \"WHITE_AND_BLACK_LIST\".
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferMapping) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferMapping) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMapping) SetDatabases(v []*SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMapping {
	s.Databases = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMapping) SetMode(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMapping {
	s.Mode = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases struct {
	// The ID of the database. This parameter takes effect when the source data source is IDB.
	DatabaseId *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	// The name of the database.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The mapped-to database. This parameter takes effect when the destination data source is a database.
	MappedName *string `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	// The settings for the target table objects in the current database.
	Tables []*SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The mapped-to tenant. This parameter takes effect when the source data source is OceanBase Database.
	TenantName *string `json:"TenantName,omitempty" xml:"TenantName,omitempty"`
	// DATABASE, TABLE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases) SetDatabaseId(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases {
	s.DatabaseId = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases) SetDatabaseName(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases {
	s.DatabaseName = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases) SetMappedName(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases {
	s.MappedName = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases) SetTables(v []*SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases {
	s.Tables = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases) SetTenantName(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases {
	s.TenantName = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases) SetType(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabases {
	s.Type = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables struct {
	// The schema of the ADB table. If the destination data source is ADB, you need to configure additional information for schema synchronization.
	AdbTableSchema *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema `json:"AdbTableSchema,omitempty" xml:"AdbTableSchema,omitempty" type:"Struct"`
	// The list of filter columns, which are the columns to be synchronized.
	FilterColumns []*string `json:"FilterColumns,omitempty" xml:"FilterColumns,omitempty" type:"Repeated"`
	// The name of the mapped-to table or topic. If the destination data source is a database, this parameter specifies the name of the mapped-to table. If the destination data source is a message queue system, this parameter specifies the name of the mapped-to topic.
	MappedName *string `json:"MappedName,omitempty" xml:"MappedName,omitempty"`
	// The list of sharding key columns. This parameter applies to scenarios where the destination data source is a message queue system.
	ShardColumns []*string `json:"ShardColumns,omitempty" xml:"ShardColumns,omitempty" type:"Repeated"`
	// The ID of the table. This parameter takes effect when the source data source is IDB.
	TableId *string `json:"TableId,omitempty" xml:"TableId,omitempty"`
	// The name of the table.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// DATABASE, TABLE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The row filter conditions.
	WhereClause *string `json:"WhereClause,omitempty" xml:"WhereClause,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) SetAdbTableSchema(v *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables {
	s.AdbTableSchema = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) SetFilterColumns(v []*string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables {
	s.FilterColumns = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) SetMappedName(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables {
	s.MappedName = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) SetShardColumns(v []*string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables {
	s.ShardColumns = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) SetTableId(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables {
	s.TableId = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) SetTableName(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables {
	s.TableName = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) SetType(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables {
	s.Type = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables) SetWhereClause(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTables {
	s.WhereClause = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema struct {
	// The list of distribution key columns.
	DistributedKeys []*string `json:"DistributedKeys,omitempty" xml:"DistributedKeys,omitempty" type:"Repeated"`
	// The lifecycle of the table.
	PartitionLifeCycle *int32 `json:"PartitionLifeCycle,omitempty" xml:"PartitionLifeCycle,omitempty"`
	// The partitioning expression.
	PartitionStatement *string `json:"PartitionStatement,omitempty" xml:"PartitionStatement,omitempty"`
	// The list of primary key columns.
	PrimaryKeys []*string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty" type:"Repeated"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetDistributedKeys(v []*string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.DistributedKeys = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetPartitionLifeCycle(v int32) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionLifeCycle = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetPartitionStatement(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.PartitionStatement = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema) SetPrimaryKeys(v []*string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferMappingDatabasesTablesAdbTableSchema {
	s.PrimaryKeys = v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig struct {
	// Indicates whether full migration is enabled.
	EnableFullSync *bool `json:"EnableFullSync,omitempty" xml:"EnableFullSync,omitempty"`
	// Indicates whether incremental synchronization is enabled.
	EnableIncrSync *bool `json:"EnableIncrSync,omitempty" xml:"EnableIncrSync,omitempty"`
	// Indicates whether schema synchronization is enabled.
	EnableStructSync *bool `json:"EnableStructSync,omitempty" xml:"EnableStructSync,omitempty"`
	// The settings of incremental synchronization steps.
	IncrSyncStepTransferConfig *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig `json:"IncrSyncStepTransferConfig,omitempty" xml:"IncrSyncStepTransferConfig,omitempty" type:"Struct"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig) SetEnableFullSync(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig {
	s.EnableFullSync = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig) SetEnableIncrSync(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig {
	s.EnableIncrSync = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig) SetEnableStructSync(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig {
	s.EnableStructSync = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig) SetIncrSyncStepTransferConfig(v *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfig {
	s.IncrSyncStepTransferConfig = v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig struct {
	// The list of data types of incremental data synchronized in incremental synchronization.
	RecordTypeList []*string `json:"RecordTypeList,omitempty" xml:"RecordTypeList,omitempty" type:"Repeated"`
	// The start time for incremental synchronization. The value is a timestamp in seconds.
	StartTimestamp *int64 `json:"StartTimestamp,omitempty" xml:"StartTimestamp,omitempty"`
	// The retention time of logs when incremental synchronization is enabled and the incremental log pull component is Store.
	StoreLogKeptHour *int64 `json:"StoreLogKeptHour,omitempty" xml:"StoreLogKeptHour,omitempty"`
	// Indicates whether intra-transaction sequencing is enabled when incremental synchronization is enabled and the incremental log pull component is Store.
	StoreTransactionEnabled *bool `json:"StoreTransactionEnabled,omitempty" xml:"StoreTransactionEnabled,omitempty"`
	// STRUCT, FULL, INCR
	TransferStepType *string `json:"TransferStepType,omitempty" xml:"TransferStepType,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetRecordTypeList(v []*string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.RecordTypeList = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetStartTimestamp(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.StartTimestamp = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetStoreLogKeptHour(v int64) *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.StoreLogKeptHour = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetStoreTransactionEnabled(v bool) *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.StoreTransactionEnabled = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig) SetTransferStepType(v string) *SearchOmsOpenAPIProjectsResponseBodyDataTransferStepConfigIncrSyncStepTransferConfig {
	s.TransferStepType = &v
	return s
}

type SearchOmsOpenAPIProjectsResponseBodyErrorDetail struct {
	// The error code (new).
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error level. Valid values: CRITICAL, ERROR, and WARN.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The error description (new).
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The suggestions (new).
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponseBodyErrorDetail) SetCode(v string) *SearchOmsOpenAPIProjectsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyErrorDetail) SetLevel(v string) *SearchOmsOpenAPIProjectsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyErrorDetail) SetMessage(v string) *SearchOmsOpenAPIProjectsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponseBodyErrorDetail) SetProposal(v string) *SearchOmsOpenAPIProjectsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type SearchOmsOpenAPIProjectsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchOmsOpenAPIProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchOmsOpenAPIProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchOmsOpenAPIProjectsResponse) GoString() string {
	return s.String()
}

func (s *SearchOmsOpenAPIProjectsResponse) SetHeaders(v map[string]*string) *SearchOmsOpenAPIProjectsResponse {
	s.Headers = v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponse) SetStatusCode(v int32) *SearchOmsOpenAPIProjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchOmsOpenAPIProjectsResponse) SetBody(v *SearchOmsOpenAPIProjectsResponseBody) *SearchOmsOpenAPIProjectsResponse {
	s.Body = v
	return s
}

type StartOmsOpenAPIProjectRequest struct {
	// Contact the administrator.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The page number, which takes effect in a pagination query.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The total count, which takes effect in a pagination query.
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s StartOmsOpenAPIProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s StartOmsOpenAPIProjectRequest) GoString() string {
	return s.String()
}

func (s *StartOmsOpenAPIProjectRequest) SetPageNumber(v int32) *StartOmsOpenAPIProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *StartOmsOpenAPIProjectRequest) SetPageSize(v int32) *StartOmsOpenAPIProjectRequest {
	s.PageSize = &v
	return s
}

func (s *StartOmsOpenAPIProjectRequest) SetProjectId(v string) *StartOmsOpenAPIProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *StartOmsOpenAPIProjectRequest) SetWorkerGradeId(v string) *StartOmsOpenAPIProjectRequest {
	s.WorkerGradeId = &v
	return s
}

type StartOmsOpenAPIProjectResponseBody struct {
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// The request ID.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost *string `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	// The operation that you want to perform. Set the value to **StartOmsOpenAPIProject**.
	ErrorDetail *StartOmsOpenAPIProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The suggestions (new).
	Success    *bool  `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s StartOmsOpenAPIProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartOmsOpenAPIProjectResponseBody) GoString() string {
	return s.String()
}

func (s *StartOmsOpenAPIProjectResponseBody) SetAdvice(v string) *StartOmsOpenAPIProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetCode(v string) *StartOmsOpenAPIProjectResponseBody {
	s.Code = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetCost(v string) *StartOmsOpenAPIProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetData(v bool) *StartOmsOpenAPIProjectResponseBody {
	s.Data = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetErrorDetail(v *StartOmsOpenAPIProjectResponseBodyErrorDetail) *StartOmsOpenAPIProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetMessage(v string) *StartOmsOpenAPIProjectResponseBody {
	s.Message = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetPageNumber(v int32) *StartOmsOpenAPIProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetPageSize(v int32) *StartOmsOpenAPIProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetRequestId(v string) *StartOmsOpenAPIProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetSuccess(v bool) *StartOmsOpenAPIProjectResponseBody {
	s.Success = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBody) SetTotalCount(v int64) *StartOmsOpenAPIProjectResponseBody {
	s.TotalCount = &v
	return s
}

type StartOmsOpenAPIProjectResponseBodyErrorDetail struct {
	// The error description (old).
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error code (new).
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The page number, which takes effect in a pagination query.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The error details.
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s StartOmsOpenAPIProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s StartOmsOpenAPIProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *StartOmsOpenAPIProjectResponseBodyErrorDetail) SetCode(v string) *StartOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBodyErrorDetail) SetLevel(v string) *StartOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBodyErrorDetail) SetMessage(v string) *StartOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponseBodyErrorDetail) SetProposal(v string) *StartOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type StartOmsOpenAPIProjectResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartOmsOpenAPIProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartOmsOpenAPIProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s StartOmsOpenAPIProjectResponse) GoString() string {
	return s.String()
}

func (s *StartOmsOpenAPIProjectResponse) SetHeaders(v map[string]*string) *StartOmsOpenAPIProjectResponse {
	s.Headers = v
	return s
}

func (s *StartOmsOpenAPIProjectResponse) SetStatusCode(v int32) *StartOmsOpenAPIProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *StartOmsOpenAPIProjectResponse) SetBody(v *StartOmsOpenAPIProjectResponseBody) *StartOmsOpenAPIProjectResponse {
	s.Body = v
	return s
}

type StartProjectRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s StartProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s StartProjectRequest) GoString() string {
	return s.String()
}

func (s *StartProjectRequest) SetId(v string) *StartProjectRequest {
	s.Id = &v
	return s
}

type StartProjectResponseBody struct {
	Advice      *string                              `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                              `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *string                              `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *StartProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s StartProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartProjectResponseBody) GoString() string {
	return s.String()
}

func (s *StartProjectResponseBody) SetAdvice(v string) *StartProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *StartProjectResponseBody) SetCode(v string) *StartProjectResponseBody {
	s.Code = &v
	return s
}

func (s *StartProjectResponseBody) SetCost(v string) *StartProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *StartProjectResponseBody) SetData(v string) *StartProjectResponseBody {
	s.Data = &v
	return s
}

func (s *StartProjectResponseBody) SetErrorDetail(v *StartProjectResponseBodyErrorDetail) *StartProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *StartProjectResponseBody) SetMessage(v string) *StartProjectResponseBody {
	s.Message = &v
	return s
}

func (s *StartProjectResponseBody) SetPageNumber(v int32) *StartProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *StartProjectResponseBody) SetPageSize(v int32) *StartProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *StartProjectResponseBody) SetRequestId(v string) *StartProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartProjectResponseBody) SetSuccess(v bool) *StartProjectResponseBody {
	s.Success = &v
	return s
}

func (s *StartProjectResponseBody) SetTotalCount(v int64) *StartProjectResponseBody {
	s.TotalCount = &v
	return s
}

type StartProjectResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s StartProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s StartProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *StartProjectResponseBodyErrorDetail) SetCode(v string) *StartProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *StartProjectResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetLevel(v string) *StartProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetMessage(v string) *StartProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *StartProjectResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetMessageMcmsKey(v string) *StartProjectResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetProposal(v string) *StartProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *StartProjectResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetProposalMcmsKey(v string) *StartProjectResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetReason(v string) *StartProjectResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *StartProjectResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetReasonMcmsKey(v string) *StartProjectResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *StartProjectResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *StartProjectResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type StartProjectResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s StartProjectResponse) GoString() string {
	return s.String()
}

func (s *StartProjectResponse) SetHeaders(v map[string]*string) *StartProjectResponse {
	s.Headers = v
	return s
}

func (s *StartProjectResponse) SetStatusCode(v int32) *StartProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *StartProjectResponse) SetBody(v *StartProjectResponseBody) *StartProjectResponse {
	s.Body = v
	return s
}

type StartProjectsByLabelRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s StartProjectsByLabelRequest) String() string {
	return tea.Prettify(s)
}

func (s StartProjectsByLabelRequest) GoString() string {
	return s.String()
}

func (s *StartProjectsByLabelRequest) SetId(v string) *StartProjectsByLabelRequest {
	s.Id = &v
	return s
}

type StartProjectsByLabelResponseBody struct {
	Advice      *string                                      `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                      `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *StartProjectsByLabelResponseBodyData        `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorDetail *StartProjectsByLabelResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s StartProjectsByLabelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartProjectsByLabelResponseBody) GoString() string {
	return s.String()
}

func (s *StartProjectsByLabelResponseBody) SetAdvice(v string) *StartProjectsByLabelResponseBody {
	s.Advice = &v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetCode(v string) *StartProjectsByLabelResponseBody {
	s.Code = &v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetCost(v string) *StartProjectsByLabelResponseBody {
	s.Cost = &v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetData(v *StartProjectsByLabelResponseBodyData) *StartProjectsByLabelResponseBody {
	s.Data = v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetErrorDetail(v *StartProjectsByLabelResponseBodyErrorDetail) *StartProjectsByLabelResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetMessage(v string) *StartProjectsByLabelResponseBody {
	s.Message = &v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetPageNumber(v int32) *StartProjectsByLabelResponseBody {
	s.PageNumber = &v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetPageSize(v int32) *StartProjectsByLabelResponseBody {
	s.PageSize = &v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetRequestId(v string) *StartProjectsByLabelResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetSuccess(v bool) *StartProjectsByLabelResponseBody {
	s.Success = &v
	return s
}

func (s *StartProjectsByLabelResponseBody) SetTotalCount(v int64) *StartProjectsByLabelResponseBody {
	s.TotalCount = &v
	return s
}

type StartProjectsByLabelResponseBodyData struct {
	FailedProjectIds  []*string `json:"FailedProjectIds,omitempty" xml:"FailedProjectIds,omitempty" type:"Repeated"`
	SucceedProjectIds []*string `json:"SucceedProjectIds,omitempty" xml:"SucceedProjectIds,omitempty" type:"Repeated"`
	Total             *int32    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s StartProjectsByLabelResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StartProjectsByLabelResponseBodyData) GoString() string {
	return s.String()
}

func (s *StartProjectsByLabelResponseBodyData) SetFailedProjectIds(v []*string) *StartProjectsByLabelResponseBodyData {
	s.FailedProjectIds = v
	return s
}

func (s *StartProjectsByLabelResponseBodyData) SetSucceedProjectIds(v []*string) *StartProjectsByLabelResponseBodyData {
	s.SucceedProjectIds = v
	return s
}

func (s *StartProjectsByLabelResponseBodyData) SetTotal(v int32) *StartProjectsByLabelResponseBodyData {
	s.Total = &v
	return s
}

type StartProjectsByLabelResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s StartProjectsByLabelResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s StartProjectsByLabelResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetCode(v string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *StartProjectsByLabelResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetLevel(v string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetMessage(v string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetMessageMcmsKey(v string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetProposal(v string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetProposalMcmsKey(v string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetReason(v string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetReasonMcmsKey(v string) *StartProjectsByLabelResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *StartProjectsByLabelResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *StartProjectsByLabelResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type StartProjectsByLabelResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartProjectsByLabelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartProjectsByLabelResponse) String() string {
	return tea.Prettify(s)
}

func (s StartProjectsByLabelResponse) GoString() string {
	return s.String()
}

func (s *StartProjectsByLabelResponse) SetHeaders(v map[string]*string) *StartProjectsByLabelResponse {
	s.Headers = v
	return s
}

func (s *StartProjectsByLabelResponse) SetStatusCode(v int32) *StartProjectsByLabelResponse {
	s.StatusCode = &v
	return s
}

func (s *StartProjectsByLabelResponse) SetBody(v *StartProjectsByLabelResponseBody) *StartProjectsByLabelResponse {
	s.Body = v
	return s
}

type StopOmsOpenAPIProjectRequest struct {
	// The suggestions (old).
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Contact the administrator.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total count, which takes effect in a pagination query.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Alibaba Cloud CLI
	WorkerGradeId *string `json:"WorkerGradeId,omitempty" xml:"WorkerGradeId,omitempty"`
}

func (s StopOmsOpenAPIProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s StopOmsOpenAPIProjectRequest) GoString() string {
	return s.String()
}

func (s *StopOmsOpenAPIProjectRequest) SetPageNumber(v int32) *StopOmsOpenAPIProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *StopOmsOpenAPIProjectRequest) SetPageSize(v int32) *StopOmsOpenAPIProjectRequest {
	s.PageSize = &v
	return s
}

func (s *StopOmsOpenAPIProjectRequest) SetProjectId(v string) *StopOmsOpenAPIProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *StopOmsOpenAPIProjectRequest) SetWorkerGradeId(v string) *StopOmsOpenAPIProjectRequest {
	s.WorkerGradeId = &v
	return s
}

type StopOmsOpenAPIProjectResponseBody struct {
	// Indicates whether the project is paused.
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// The page size, which takes effect in a pagination query.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost *string `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	// A system error occurred.
	ErrorDetail *StopOmsOpenAPIProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	// The page size, which takes effect in a pagination query.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Pause a data synchronization project
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// A system error occurred.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the migration instance. Generally, if you want to create a project on a public cloud, you must first purchase a migration instance.
	Success    *bool  `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s StopOmsOpenAPIProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopOmsOpenAPIProjectResponseBody) GoString() string {
	return s.String()
}

func (s *StopOmsOpenAPIProjectResponseBody) SetAdvice(v string) *StopOmsOpenAPIProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetCode(v string) *StopOmsOpenAPIProjectResponseBody {
	s.Code = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetCost(v string) *StopOmsOpenAPIProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetData(v bool) *StopOmsOpenAPIProjectResponseBody {
	s.Data = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetErrorDetail(v *StopOmsOpenAPIProjectResponseBodyErrorDetail) *StopOmsOpenAPIProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetMessage(v string) *StopOmsOpenAPIProjectResponseBody {
	s.Message = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetPageNumber(v int32) *StopOmsOpenAPIProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetPageSize(v int32) *StopOmsOpenAPIProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetRequestId(v string) *StopOmsOpenAPIProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetSuccess(v bool) *StopOmsOpenAPIProjectResponseBody {
	s.Success = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBody) SetTotalCount(v int64) *StopOmsOpenAPIProjectResponseBody {
	s.TotalCount = &v
	return s
}

type StopOmsOpenAPIProjectResponseBodyErrorDetail struct {
	// The time spent in processing the request, in seconds.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error code (old).
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The project ID.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The error description (new).
	Proposal *string `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
}

func (s StopOmsOpenAPIProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s StopOmsOpenAPIProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *StopOmsOpenAPIProjectResponseBodyErrorDetail) SetCode(v string) *StopOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBodyErrorDetail) SetLevel(v string) *StopOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBodyErrorDetail) SetMessage(v string) *StopOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponseBodyErrorDetail) SetProposal(v string) *StopOmsOpenAPIProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

type StopOmsOpenAPIProjectResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopOmsOpenAPIProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopOmsOpenAPIProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s StopOmsOpenAPIProjectResponse) GoString() string {
	return s.String()
}

func (s *StopOmsOpenAPIProjectResponse) SetHeaders(v map[string]*string) *StopOmsOpenAPIProjectResponse {
	s.Headers = v
	return s
}

func (s *StopOmsOpenAPIProjectResponse) SetStatusCode(v int32) *StopOmsOpenAPIProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *StopOmsOpenAPIProjectResponse) SetBody(v *StopOmsOpenAPIProjectResponseBody) *StopOmsOpenAPIProjectResponse {
	s.Body = v
	return s
}

type StopProjectRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s StopProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s StopProjectRequest) GoString() string {
	return s.String()
}

func (s *StopProjectRequest) SetId(v string) *StopProjectRequest {
	s.Id = &v
	return s
}

type StopProjectResponseBody struct {
	Advice      *string                             `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                             `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *string                             `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *StopProjectResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s StopProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopProjectResponseBody) GoString() string {
	return s.String()
}

func (s *StopProjectResponseBody) SetAdvice(v string) *StopProjectResponseBody {
	s.Advice = &v
	return s
}

func (s *StopProjectResponseBody) SetCode(v string) *StopProjectResponseBody {
	s.Code = &v
	return s
}

func (s *StopProjectResponseBody) SetCost(v string) *StopProjectResponseBody {
	s.Cost = &v
	return s
}

func (s *StopProjectResponseBody) SetData(v string) *StopProjectResponseBody {
	s.Data = &v
	return s
}

func (s *StopProjectResponseBody) SetErrorDetail(v *StopProjectResponseBodyErrorDetail) *StopProjectResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *StopProjectResponseBody) SetMessage(v string) *StopProjectResponseBody {
	s.Message = &v
	return s
}

func (s *StopProjectResponseBody) SetPageNumber(v int32) *StopProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *StopProjectResponseBody) SetPageSize(v int32) *StopProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *StopProjectResponseBody) SetRequestId(v string) *StopProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopProjectResponseBody) SetSuccess(v bool) *StopProjectResponseBody {
	s.Success = &v
	return s
}

func (s *StopProjectResponseBody) SetTotalCount(v int64) *StopProjectResponseBody {
	s.TotalCount = &v
	return s
}

type StopProjectResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s StopProjectResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s StopProjectResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *StopProjectResponseBodyErrorDetail) SetCode(v string) *StopProjectResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *StopProjectResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetLevel(v string) *StopProjectResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetMessage(v string) *StopProjectResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *StopProjectResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetMessageMcmsKey(v string) *StopProjectResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetProposal(v string) *StopProjectResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *StopProjectResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetProposalMcmsKey(v string) *StopProjectResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetReason(v string) *StopProjectResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *StopProjectResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetReasonMcmsKey(v string) *StopProjectResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *StopProjectResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *StopProjectResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type StopProjectResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s StopProjectResponse) GoString() string {
	return s.String()
}

func (s *StopProjectResponse) SetHeaders(v map[string]*string) *StopProjectResponse {
	s.Headers = v
	return s
}

func (s *StopProjectResponse) SetStatusCode(v int32) *StopProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *StopProjectResponse) SetBody(v *StopProjectResponseBody) *StopProjectResponse {
	s.Body = v
	return s
}

type StopProjectModifyRecordsRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s StopProjectModifyRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s StopProjectModifyRecordsRequest) GoString() string {
	return s.String()
}

func (s *StopProjectModifyRecordsRequest) SetId(v string) *StopProjectModifyRecordsRequest {
	s.Id = &v
	return s
}

type StopProjectModifyRecordsResponseBody struct {
	Advice      *string                                          `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                          `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        interface{}                                      `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorDetail *StopProjectModifyRecordsResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s StopProjectModifyRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopProjectModifyRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *StopProjectModifyRecordsResponseBody) SetAdvice(v string) *StopProjectModifyRecordsResponseBody {
	s.Advice = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetCode(v string) *StopProjectModifyRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetCost(v string) *StopProjectModifyRecordsResponseBody {
	s.Cost = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetData(v interface{}) *StopProjectModifyRecordsResponseBody {
	s.Data = v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetErrorDetail(v *StopProjectModifyRecordsResponseBodyErrorDetail) *StopProjectModifyRecordsResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetMessage(v string) *StopProjectModifyRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetPageNumber(v int32) *StopProjectModifyRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetPageSize(v int32) *StopProjectModifyRecordsResponseBody {
	s.PageSize = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetRequestId(v string) *StopProjectModifyRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetSuccess(v bool) *StopProjectModifyRecordsResponseBody {
	s.Success = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBody) SetTotalCount(v int64) *StopProjectModifyRecordsResponseBody {
	s.TotalCount = &v
	return s
}

type StopProjectModifyRecordsResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s StopProjectModifyRecordsResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s StopProjectModifyRecordsResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetCode(v string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetLevel(v string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetMessage(v string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetMessageMcmsKey(v string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetProposal(v string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetProposalMcmsKey(v string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetReason(v string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetReasonMcmsKey(v string) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *StopProjectModifyRecordsResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *StopProjectModifyRecordsResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type StopProjectModifyRecordsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopProjectModifyRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopProjectModifyRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s StopProjectModifyRecordsResponse) GoString() string {
	return s.String()
}

func (s *StopProjectModifyRecordsResponse) SetHeaders(v map[string]*string) *StopProjectModifyRecordsResponse {
	s.Headers = v
	return s
}

func (s *StopProjectModifyRecordsResponse) SetStatusCode(v int32) *StopProjectModifyRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *StopProjectModifyRecordsResponse) SetBody(v *StopProjectModifyRecordsResponseBody) *StopProjectModifyRecordsResponse {
	s.Body = v
	return s
}

type StopProjectsByLabelRequest struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s StopProjectsByLabelRequest) String() string {
	return tea.Prettify(s)
}

func (s StopProjectsByLabelRequest) GoString() string {
	return s.String()
}

func (s *StopProjectsByLabelRequest) SetId(v string) *StopProjectsByLabelRequest {
	s.Id = &v
	return s
}

type StopProjectsByLabelResponseBody struct {
	Advice      *string                                     `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code        *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Cost        *string                                     `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Data        *StopProjectsByLabelResponseBodyData        `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorDetail *StopProjectsByLabelResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Struct"`
	Message     *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber  *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s StopProjectsByLabelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopProjectsByLabelResponseBody) GoString() string {
	return s.String()
}

func (s *StopProjectsByLabelResponseBody) SetAdvice(v string) *StopProjectsByLabelResponseBody {
	s.Advice = &v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetCode(v string) *StopProjectsByLabelResponseBody {
	s.Code = &v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetCost(v string) *StopProjectsByLabelResponseBody {
	s.Cost = &v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetData(v *StopProjectsByLabelResponseBodyData) *StopProjectsByLabelResponseBody {
	s.Data = v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetErrorDetail(v *StopProjectsByLabelResponseBodyErrorDetail) *StopProjectsByLabelResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetMessage(v string) *StopProjectsByLabelResponseBody {
	s.Message = &v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetPageNumber(v int32) *StopProjectsByLabelResponseBody {
	s.PageNumber = &v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetPageSize(v int32) *StopProjectsByLabelResponseBody {
	s.PageSize = &v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetRequestId(v string) *StopProjectsByLabelResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetSuccess(v bool) *StopProjectsByLabelResponseBody {
	s.Success = &v
	return s
}

func (s *StopProjectsByLabelResponseBody) SetTotalCount(v int64) *StopProjectsByLabelResponseBody {
	s.TotalCount = &v
	return s
}

type StopProjectsByLabelResponseBodyData struct {
	FailedProjectIds  []*string `json:"FailedProjectIds,omitempty" xml:"FailedProjectIds,omitempty" type:"Repeated"`
	SucceedProjectIds []*string `json:"SucceedProjectIds,omitempty" xml:"SucceedProjectIds,omitempty" type:"Repeated"`
	Total             *int32    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s StopProjectsByLabelResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StopProjectsByLabelResponseBodyData) GoString() string {
	return s.String()
}

func (s *StopProjectsByLabelResponseBodyData) SetFailedProjectIds(v []*string) *StopProjectsByLabelResponseBodyData {
	s.FailedProjectIds = v
	return s
}

func (s *StopProjectsByLabelResponseBodyData) SetSucceedProjectIds(v []*string) *StopProjectsByLabelResponseBodyData {
	s.SucceedProjectIds = v
	return s
}

func (s *StopProjectsByLabelResponseBodyData) SetTotal(v int32) *StopProjectsByLabelResponseBodyData {
	s.Total = &v
	return s
}

type StopProjectsByLabelResponseBodyErrorDetail struct {
	Code                *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	ExtraContext        map[string]interface{} `json:"ExtraContext,omitempty" xml:"ExtraContext,omitempty"`
	Level               *string                `json:"Level,omitempty" xml:"Level,omitempty"`
	Message             *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	MessageMcmsContext  map[string]*string     `json:"MessageMcmsContext,omitempty" xml:"MessageMcmsContext,omitempty"`
	MessageMcmsKey      *string                `json:"MessageMcmsKey,omitempty" xml:"MessageMcmsKey,omitempty"`
	Proposal            *string                `json:"Proposal,omitempty" xml:"Proposal,omitempty"`
	ProposalMcmsContext map[string]*string     `json:"ProposalMcmsContext,omitempty" xml:"ProposalMcmsContext,omitempty"`
	ProposalMcmsKey     *string                `json:"ProposalMcmsKey,omitempty" xml:"ProposalMcmsKey,omitempty"`
	Reason              *string                `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ReasonMcmsContext   map[string]*string     `json:"ReasonMcmsContext,omitempty" xml:"ReasonMcmsContext,omitempty"`
	ReasonMcmsKey       *string                `json:"ReasonMcmsKey,omitempty" xml:"ReasonMcmsKey,omitempty"`
	UpstreamErrorDetail interface{}            `json:"UpstreamErrorDetail,omitempty" xml:"UpstreamErrorDetail,omitempty"`
}

func (s StopProjectsByLabelResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s StopProjectsByLabelResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetCode(v string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.Code = &v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetExtraContext(v map[string]interface{}) *StopProjectsByLabelResponseBodyErrorDetail {
	s.ExtraContext = v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetLevel(v string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.Level = &v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetMessage(v string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.Message = &v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetMessageMcmsContext(v map[string]*string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.MessageMcmsContext = v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetMessageMcmsKey(v string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.MessageMcmsKey = &v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetProposal(v string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.Proposal = &v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetProposalMcmsContext(v map[string]*string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.ProposalMcmsContext = v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetProposalMcmsKey(v string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.ProposalMcmsKey = &v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetReason(v string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.Reason = &v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetReasonMcmsContext(v map[string]*string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.ReasonMcmsContext = v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetReasonMcmsKey(v string) *StopProjectsByLabelResponseBodyErrorDetail {
	s.ReasonMcmsKey = &v
	return s
}

func (s *StopProjectsByLabelResponseBodyErrorDetail) SetUpstreamErrorDetail(v interface{}) *StopProjectsByLabelResponseBodyErrorDetail {
	s.UpstreamErrorDetail = v
	return s
}

type StopProjectsByLabelResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopProjectsByLabelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopProjectsByLabelResponse) String() string {
	return tea.Prettify(s)
}

func (s StopProjectsByLabelResponse) GoString() string {
	return s.String()
}

func (s *StopProjectsByLabelResponse) SetHeaders(v map[string]*string) *StopProjectsByLabelResponse {
	s.Headers = v
	return s
}

func (s *StopProjectsByLabelResponse) SetStatusCode(v int32) *StopProjectsByLabelResponse {
	s.StatusCode = &v
	return s
}

func (s *StopProjectsByLabelResponse) SetBody(v *StopProjectsByLabelResponseBody) *StopProjectsByLabelResponse {
	s.Body = v
	return s
}

type SwitchoverInstanceRequest struct {
	// Whether to force the switchover.
	// - true: Force the switchover.
	// - false: Do not force the switchover.
	Forced *bool `json:"Forced,omitempty" xml:"Forced,omitempty"`
	// The instance ID of the primary/standby instance. You can set the default value to the instance ID of the instance to be switched to the primary instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The instance ID of the instance to be switched to the primary instance.
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
}

func (s SwitchoverInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchoverInstanceRequest) GoString() string {
	return s.String()
}

func (s *SwitchoverInstanceRequest) SetForced(v bool) *SwitchoverInstanceRequest {
	s.Forced = &v
	return s
}

func (s *SwitchoverInstanceRequest) SetInstanceId(v string) *SwitchoverInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *SwitchoverInstanceRequest) SetTargetInstanceId(v string) *SwitchoverInstanceRequest {
	s.TargetInstanceId = &v
	return s
}

type SwitchoverInstanceResponseBody struct {
	// The list of data for the switchover.
	Data *SwitchoverInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SwitchoverInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchoverInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchoverInstanceResponseBody) SetData(v *SwitchoverInstanceResponseBodyData) *SwitchoverInstanceResponseBody {
	s.Data = v
	return s
}

func (s *SwitchoverInstanceResponseBody) SetRequestId(v string) *SwitchoverInstanceResponseBody {
	s.RequestId = &v
	return s
}

type SwitchoverInstanceResponseBodyData struct {
	// The message of the switchover.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Whether the switchover is successful.
	// - true: the switchover succeeded.
	// - false: the switchover failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SwitchoverInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SwitchoverInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *SwitchoverInstanceResponseBodyData) SetMessage(v string) *SwitchoverInstanceResponseBodyData {
	s.Message = &v
	return s
}

func (s *SwitchoverInstanceResponseBodyData) SetSuccess(v bool) *SwitchoverInstanceResponseBodyData {
	s.Success = &v
	return s
}

type SwitchoverInstanceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchoverInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchoverInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchoverInstanceResponse) GoString() string {
	return s.String()
}

func (s *SwitchoverInstanceResponse) SetHeaders(v map[string]*string) *SwitchoverInstanceResponse {
	s.Headers = v
	return s
}

func (s *SwitchoverInstanceResponse) SetStatusCode(v int32) *SwitchoverInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchoverInstanceResponse) SetBody(v *SwitchoverInstanceResponseBody) *SwitchoverInstanceResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("oceanbasepro"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelProjectModifyRecordWithOptions(request *CancelProjectModifyRecordRequest, runtime *util.RuntimeOptions) (_result *CancelProjectModifyRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelProjectModifyRecord"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelProjectModifyRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelProjectModifyRecord(request *CancelProjectModifyRecordRequest) (_result *CancelProjectModifyRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelProjectModifyRecordResponse{}
	_body, _err := client.CancelProjectModifyRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBackupSetDownloadLinkWithOptions(request *CreateBackupSetDownloadLinkRequest, runtime *util.RuntimeOptions) (_result *CreateBackupSetDownloadLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupSetId)) {
		body["BackupSetId"] = request.BackupSetId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBackupSetDownloadLink"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBackupSetDownloadLinkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBackupSetDownloadLink(request *CreateBackupSetDownloadLinkRequest) (_result *CreateBackupSetDownloadLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackupSetDownloadLinkResponse{}
	_body, _err := client.CreateBackupSetDownloadLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDatabaseWithOptions(request *CreateDatabaseRequest, runtime *util.RuntimeOptions) (_result *CreateDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Collation)) {
		body["Collation"] = request.Collation
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		body["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Encoding)) {
		body["Encoding"] = request.Encoding
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDatabase"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDatabaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDatabase(request *CreateDatabaseRequest) (_result *CreateDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatabaseResponse{}
	_body, _err := client.CreateDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		body["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenewPeriod)) {
		body["AutoRenewPeriod"] = request.AutoRenewPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		body["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DiskSize)) {
		body["DiskSize"] = request.DiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.DiskType)) {
		body["DiskType"] = request.DiskType
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		body["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceClass)) {
		body["InstanceClass"] = request.InstanceClass
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		body["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.IsolationOptimization)) {
		body["IsolationOptimization"] = request.IsolationOptimization
	}

	if !tea.BoolValue(util.IsUnset(request.ObVersion)) {
		body["ObVersion"] = request.ObVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		body["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		body["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryInstance)) {
		body["PrimaryInstance"] = request.PrimaryInstance
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryRegion)) {
		body["PrimaryRegion"] = request.PrimaryRegion
	}

	if !tea.BoolValue(util.IsUnset(request.ReplicaMode)) {
		body["ReplicaMode"] = request.ReplicaMode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		body["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Series)) {
		body["Series"] = request.Series
	}

	if !tea.BoolValue(util.IsUnset(request.Zones)) {
		body["Zones"] = request.Zones
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstance"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLabelWithOptions(request *CreateLabelRequest, runtime *util.RuntimeOptions) (_result *CreateLabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLabel"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLabelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLabel(request *CreateLabelRequest) (_result *CreateLabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLabelResponse{}
	_body, _err := client.CreateLabelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMySqlDataSourceWithOptions(request *CreateMySqlDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateMySqlDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DgInstanceId)) {
		body["DgInstanceId"] = request.DgInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		body["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		body["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Schema)) {
		body["Schema"] = request.Schema
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		body["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMySqlDataSource"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMySqlDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMySqlDataSource(request *CreateMySqlDataSourceRequest) (_result *CreateMySqlDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMySqlDataSourceResponse{}
	_body, _err := client.CreateMySqlDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOceanBaseDataSourceWithOptions(request *CreateOceanBaseDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateOceanBaseDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cluster)) {
		body["Cluster"] = request.Cluster
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigUrl)) {
		body["ConfigUrl"] = request.ConfigUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DrcPassword)) {
		body["DrcPassword"] = request.DrcPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DrcUserName)) {
		body["DrcUserName"] = request.DrcUserName
	}

	if !tea.BoolValue(util.IsUnset(request.InnerDrcPassword)) {
		body["InnerDrcPassword"] = request.InnerDrcPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		body["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.LogProxyIp)) {
		body["LogProxyIp"] = request.LogProxyIp
	}

	if !tea.BoolValue(util.IsUnset(request.LogProxyPort)) {
		body["LogProxyPort"] = request.LogProxyPort
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		body["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Tenant)) {
		body["Tenant"] = request.Tenant
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		body["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOceanBaseDataSource"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOceanBaseDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOceanBaseDataSource(request *CreateOceanBaseDataSourceRequest) (_result *CreateOceanBaseDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOceanBaseDataSourceResponse{}
	_body, _err := client.CreateOceanBaseDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * To call this operation, you must add the IP address of the OceanBase Migration Service (OMS) server to the whitelist of the Alibaba Cloud database instance, the security rules of the ECS instance, or the security settings of your self-managed database (usually the firewall of your self-managed database) to ensure that OMS can successfully access your database instance. To obtain the IP address of the OMS server, go to the OMS data source management page in the OMS console.
 *
 * @param request CreateOmsMysqlDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOmsMysqlDataSourceResponse
 */
func (client *Client) CreateOmsMysqlDataSourceWithOptions(request *CreateOmsMysqlDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateOmsMysqlDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DgDatabaseId)) {
		body["DgDatabaseId"] = request.DgDatabaseId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		body["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		body["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Schema)) {
		body["Schema"] = request.Schema
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		body["Username"] = request.Username
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		body["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOmsMysqlDataSource"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOmsMysqlDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * To call this operation, you must add the IP address of the OceanBase Migration Service (OMS) server to the whitelist of the Alibaba Cloud database instance, the security rules of the ECS instance, or the security settings of your self-managed database (usually the firewall of your self-managed database) to ensure that OMS can successfully access your database instance. To obtain the IP address of the OMS server, go to the OMS data source management page in the OMS console.
 *
 * @param request CreateOmsMysqlDataSourceRequest
 * @return CreateOmsMysqlDataSourceResponse
 */
func (client *Client) CreateOmsMysqlDataSource(request *CreateOmsMysqlDataSourceRequest) (_result *CreateOmsMysqlDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOmsMysqlDataSourceResponse{}
	_body, _err := client.CreateOmsMysqlDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOmsOpenAPIProjectWithOptions(tmpReq *CreateOmsOpenAPIProjectRequest, runtime *util.RuntimeOptions) (_result *CreateOmsOpenAPIProjectResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateOmsOpenAPIProjectShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestConfig)) {
		request.DestConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestConfig, tea.String("DestConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.LabelIds)) {
		request.LabelIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.LabelIds, tea.String("LabelIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SourceConfig)) {
		request.SourceConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SourceConfig, tea.String("SourceConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TransferMapping)) {
		request.TransferMappingShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TransferMapping, tea.String("TransferMapping"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TransferStepConfig)) {
		request.TransferStepConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TransferStepConfig, tea.String("TransferStepConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessName)) {
		body["BusinessName"] = request.BusinessName
	}

	if !tea.BoolValue(util.IsUnset(request.DestConfigShrink)) {
		body["DestConfig"] = request.DestConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LabelIdsShrink)) {
		body["LabelIds"] = request.LabelIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceConfigShrink)) {
		body["SourceConfig"] = request.SourceConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TransferMappingShrink)) {
		body["TransferMapping"] = request.TransferMappingShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TransferStepConfigShrink)) {
		body["TransferStepConfig"] = request.TransferStepConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOmsOpenAPIProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOmsOpenAPIProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOmsOpenAPIProject(request *CreateOmsOpenAPIProjectRequest) (_result *CreateOmsOpenAPIProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOmsOpenAPIProjectResponse{}
	_body, _err := client.CreateOmsOpenAPIProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProjectWithOptions(tmpReq *CreateProjectRequest, runtime *util.RuntimeOptions) (_result *CreateProjectResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateProjectShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CommonTransferConfig)) {
		request.CommonTransferConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CommonTransferConfig, tea.String("CommonTransferConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.FullTransferConfig)) {
		request.FullTransferConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FullTransferConfig, tea.String("FullTransferConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.IncrTransferConfig)) {
		request.IncrTransferConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.IncrTransferConfig, tea.String("IncrTransferConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.LabelIds)) {
		request.LabelIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.LabelIds, tea.String("LabelIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.StructTransferConfig)) {
		request.StructTransferConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StructTransferConfig, tea.String("StructTransferConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TransferMapping)) {
		request.TransferMappingShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TransferMapping, tea.String("TransferMapping"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommonTransferConfigShrink)) {
		body["CommonTransferConfig"] = request.CommonTransferConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EnableFullTransfer)) {
		body["EnableFullTransfer"] = request.EnableFullTransfer
	}

	if !tea.BoolValue(util.IsUnset(request.EnableFullVerify)) {
		body["EnableFullVerify"] = request.EnableFullVerify
	}

	if !tea.BoolValue(util.IsUnset(request.EnableIncrTransfer)) {
		body["EnableIncrTransfer"] = request.EnableIncrTransfer
	}

	if !tea.BoolValue(util.IsUnset(request.EnableReverseIncrTransfer)) {
		body["EnableReverseIncrTransfer"] = request.EnableReverseIncrTransfer
	}

	if !tea.BoolValue(util.IsUnset(request.EnableStructTransfer)) {
		body["EnableStructTransfer"] = request.EnableStructTransfer
	}

	if !tea.BoolValue(util.IsUnset(request.FullTransferConfigShrink)) {
		body["FullTransferConfig"] = request.FullTransferConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IncrTransferConfigShrink)) {
		body["IncrTransferConfig"] = request.IncrTransferConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LabelIdsShrink)) {
		body["LabelIds"] = request.LabelIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		body["OssKey"] = request.OssKey
	}

	if !tea.BoolValue(util.IsUnset(request.SinkEndpointId)) {
		body["SinkEndpointId"] = request.SinkEndpointId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointId)) {
		body["SourceEndpointId"] = request.SourceEndpointId
	}

	if !tea.BoolValue(util.IsUnset(request.StructTransferConfigShrink)) {
		body["StructTransferConfig"] = request.StructTransferConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TransferMappingShrink)) {
		body["TransferMapping"] = request.TransferMappingShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UseOss)) {
		body["UseOss"] = request.UseOss
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProject(request *CreateProjectRequest) (_result *CreateProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProjectResponse{}
	_body, _err := client.CreateProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProjectModifyRecordsWithOptions(tmpReq *CreateProjectModifyRecordsRequest, runtime *util.RuntimeOptions) (_result *CreateProjectModifyRecordsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateProjectModifyRecordsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Databases)) {
		request.DatabasesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Databases, tea.String("Databases"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabasesShrink)) {
		body["Databases"] = request.DatabasesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProjectModifyRecords"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProjectModifyRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProjectModifyRecords(request *CreateProjectModifyRecordsRequest) (_result *CreateProjectModifyRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProjectModifyRecordsResponse{}
	_body, _err := client.CreateProjectModifyRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRdsPostgreSQLDataSourceWithOptions(request *CreateRdsPostgreSQLDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateRdsPostgreSQLDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		body["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRdsPostgreSQLDataSource"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRdsPostgreSQLDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRdsPostgreSQLDataSource(request *CreateRdsPostgreSQLDataSourceRequest) (_result *CreateRdsPostgreSQLDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRdsPostgreSQLDataSourceResponse{}
	_body, _err := client.CreateRdsPostgreSQLDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSecurityIpGroupWithOptions(request *CreateSecurityIpGroupRequest, runtime *util.RuntimeOptions) (_result *CreateSecurityIpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIpGroupName)) {
		body["SecurityIpGroupName"] = request.SecurityIpGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIps)) {
		body["SecurityIps"] = request.SecurityIps
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSecurityIpGroup"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSecurityIpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSecurityIpGroup(request *CreateSecurityIpGroupRequest) (_result *CreateSecurityIpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSecurityIpGroupResponse{}
	_body, _err := client.CreateSecurityIpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTenantWithOptions(request *CreateTenantRequest, runtime *util.RuntimeOptions) (_result *CreateTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Charset)) {
		body["Charset"] = request.Charset
	}

	if !tea.BoolValue(util.IsUnset(request.Cpu)) {
		body["Cpu"] = request.Cpu
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LogDisk)) {
		body["LogDisk"] = request.LogDisk
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		body["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryZone)) {
		body["PrimaryZone"] = request.PrimaryZone
	}

	if !tea.BoolValue(util.IsUnset(request.ReadOnlyZoneList)) {
		body["ReadOnlyZoneList"] = request.ReadOnlyZoneList
	}

	if !tea.BoolValue(util.IsUnset(request.TenantMode)) {
		body["TenantMode"] = request.TenantMode
	}

	if !tea.BoolValue(util.IsUnset(request.TenantName)) {
		body["TenantName"] = request.TenantName
	}

	if !tea.BoolValue(util.IsUnset(request.TimeZone)) {
		body["TimeZone"] = request.TimeZone
	}

	if !tea.BoolValue(util.IsUnset(request.UnitNum)) {
		body["UnitNum"] = request.UnitNum
	}

	if !tea.BoolValue(util.IsUnset(request.UserVSwitchId)) {
		body["UserVSwitchId"] = request.UserVSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.UserVpcId)) {
		body["UserVpcId"] = request.UserVpcId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTenant"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTenantResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTenant(request *CreateTenantRequest) (_result *CreateTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTenantResponse{}
	_body, _err := client.CreateTenantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTenantReadOnlyConnectionWithOptions(request *CreateTenantReadOnlyConnectionRequest, runtime *util.RuntimeOptions) (_result *CreateTenantReadOnlyConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		body["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		body["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		body["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTenantReadOnlyConnection"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTenantReadOnlyConnectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTenantReadOnlyConnection(request *CreateTenantReadOnlyConnectionRequest) (_result *CreateTenantReadOnlyConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTenantReadOnlyConnectionResponse{}
	_body, _err := client.CreateTenantReadOnlyConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTenantSecurityIpGroupWithOptions(request *CreateTenantSecurityIpGroupRequest, runtime *util.RuntimeOptions) (_result *CreateTenantSecurityIpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIpGroupName)) {
		body["SecurityIpGroupName"] = request.SecurityIpGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIps)) {
		body["SecurityIps"] = request.SecurityIps
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTenantSecurityIpGroup"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTenantSecurityIpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTenantSecurityIpGroup(request *CreateTenantSecurityIpGroupRequest) (_result *CreateTenantSecurityIpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTenantSecurityIpGroupResponse{}
	_body, _err := client.CreateTenantSecurityIpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTenantUserWithOptions(request *CreateTenantUserRequest, runtime *util.RuntimeOptions) (_result *CreateTenantUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptionType)) {
		body["EncryptionType"] = request.EncryptionType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Roles)) {
		body["Roles"] = request.Roles
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.UserPassword)) {
		body["UserPassword"] = request.UserPassword
	}

	if !tea.BoolValue(util.IsUnset(request.UserType)) {
		body["UserType"] = request.UserType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTenantUser"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTenantUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTenantUser(request *CreateTenantUserRequest) (_result *CreateTenantUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTenantUserResponse{}
	_body, _err := client.CreateTenantUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDataSourceWithOptions(request *DeleteDataSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataSource"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDataSource(request *DeleteDataSourceRequest) (_result *DeleteDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.DeleteDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDatabasesWithOptions(request *DeleteDatabasesRequest, runtime *util.RuntimeOptions) (_result *DeleteDatabasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseNames)) {
		body["DatabaseNames"] = request.DatabaseNames
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDatabases"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDatabasesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDatabases(request *DeleteDatabasesRequest) (_result *DeleteDatabasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatabasesResponse{}
	_body, _err := client.DeleteDatabasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, ensure that the following requirements are met:
 * - The cluster is in the Running state.
 * - The cluster is a primary cluster and the billing method is pay-as-you-go.
 *
 * @param request DeleteInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteInstancesResponse
 */
func (client *Client) DeleteInstancesWithOptions(request *DeleteInstancesRequest, runtime *util.RuntimeOptions) (_result *DeleteInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupRetainMode)) {
		body["BackupRetainMode"] = request.BackupRetainMode
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		body["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		body["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInstances"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, ensure that the following requirements are met:
 * - The cluster is in the Running state.
 * - The cluster is a primary cluster and the billing method is pay-as-you-go.
 *
 * @param request DeleteInstancesRequest
 * @return DeleteInstancesResponse
 */
func (client *Client) DeleteInstances(request *DeleteInstancesRequest) (_result *DeleteInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstancesResponse{}
	_body, _err := client.DeleteInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteOmsOpenAPIProjectWithOptions(request *DeleteOmsOpenAPIProjectRequest, runtime *util.RuntimeOptions) (_result *DeleteOmsOpenAPIProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteOmsOpenAPIProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteOmsOpenAPIProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteOmsOpenAPIProject(request *DeleteOmsOpenAPIProjectRequest) (_result *DeleteOmsOpenAPIProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteOmsOpenAPIProjectResponse{}
	_body, _err := client.DeleteOmsOpenAPIProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProjectWithOptions(request *DeleteProjectRequest, runtime *util.RuntimeOptions) (_result *DeleteProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProject(request *DeleteProjectRequest) (_result *DeleteProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProjectResponse{}
	_body, _err := client.DeleteProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSecurityIpGroupWithOptions(request *DeleteSecurityIpGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteSecurityIpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIpGroupName)) {
		body["SecurityIpGroupName"] = request.SecurityIpGroupName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSecurityIpGroup"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSecurityIpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSecurityIpGroup(request *DeleteSecurityIpGroupRequest) (_result *DeleteSecurityIpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSecurityIpGroupResponse{}
	_body, _err := client.DeleteSecurityIpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTenantSecurityIpGroupWithOptions(request *DeleteTenantSecurityIpGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteTenantSecurityIpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIpGroupName)) {
		body["SecurityIpGroupName"] = request.SecurityIpGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTenantSecurityIpGroup"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTenantSecurityIpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTenantSecurityIpGroup(request *DeleteTenantSecurityIpGroupRequest) (_result *DeleteTenantSecurityIpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTenantSecurityIpGroupResponse{}
	_body, _err := client.DeleteTenantSecurityIpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTenantUsersWithOptions(request *DeleteTenantUsersRequest, runtime *util.RuntimeOptions) (_result *DeleteTenantUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Users)) {
		body["Users"] = request.Users
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTenantUsers"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTenantUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTenantUsers(request *DeleteTenantUsersRequest) (_result *DeleteTenantUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTenantUsersResponse{}
	_body, _err := client.DeleteTenantUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTenantsWithOptions(request *DeleteTenantsRequest, runtime *util.RuntimeOptions) (_result *DeleteTenantsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantIds)) {
		body["TenantIds"] = request.TenantIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTenants"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTenantsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTenants(request *DeleteTenantsRequest) (_result *DeleteTenantsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTenantsResponse{}
	_body, _err := client.DeleteTenantsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAnomalySQLListWithOptions(tmpReq *DescribeAnomalySQLListRequest, runtime *util.RuntimeOptions) (_result *DescribeAnomalySQLListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeAnomalySQLListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.FilterCondition)) {
		request.FilterConditionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FilterCondition, tea.String("FilterCondition"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		body["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FilterConditionShrink)) {
		body["FilterCondition"] = request.FilterConditionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIp)) {
		body["NodeIp"] = request.NodeIp
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SQLId)) {
		body["SQLId"] = request.SQLId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeyWord)) {
		body["SearchKeyWord"] = request.SearchKeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.SearchParameter)) {
		body["SearchParameter"] = request.SearchParameter
	}

	if !tea.BoolValue(util.IsUnset(request.SearchRule)) {
		body["SearchRule"] = request.SearchRule
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		body["SearchValue"] = request.SearchValue
	}

	if !tea.BoolValue(util.IsUnset(request.SortColumn)) {
		body["SortColumn"] = request.SortColumn
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		body["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAnomalySQLList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAnomalySQLListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAnomalySQLList(request *DescribeAnomalySQLListRequest) (_result *DescribeAnomalySQLListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAnomalySQLListResponse{}
	_body, _err := client.DescribeAnomalySQLListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableCpuResourceWithOptions(request *DescribeAvailableCpuResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableCpuResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyType)) {
		body["ModifyType"] = request.ModifyType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvailableCpuResource"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAvailableCpuResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableCpuResource(request *DescribeAvailableCpuResourceRequest) (_result *DescribeAvailableCpuResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableCpuResourceResponse{}
	_body, _err := client.DescribeAvailableCpuResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableMemResourceWithOptions(request *DescribeAvailableMemResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableMemResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CpuNum)) {
		body["CpuNum"] = request.CpuNum
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UnitNum)) {
		body["UnitNum"] = request.UnitNum
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvailableMemResource"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAvailableMemResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableMemResource(request *DescribeAvailableMemResourceRequest) (_result *DescribeAvailableMemResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableMemResourceResponse{}
	_body, _err := client.DescribeAvailableMemResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableSpecWithOptions(request *DescribeAvailableSpecRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	if !tea.BoolValue(util.IsUnset(request.UpgradeType)) {
		body["UpgradeType"] = request.UpgradeType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvailableSpec"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAvailableSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableSpec(request *DescribeAvailableSpecRequest) (_result *DescribeAvailableSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableSpecResponse{}
	_body, _err := client.DescribeAvailableSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableZoneWithOptions(request *DescribeAvailableZoneRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeployType)) {
		body["DeployType"] = request.DeployType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		body["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.ObVersion)) {
		body["ObVersion"] = request.ObVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Series)) {
		body["Series"] = request.Series
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvailableZone"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAvailableZoneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableZone(request *DescribeAvailableZoneRequest) (_result *DescribeAvailableZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableZoneResponse{}
	_body, _err := client.DescribeAvailableZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupSetDownloadLinkWithOptions(request *DescribeBackupSetDownloadLinkRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupSetDownloadLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DownloadTaskId)) {
		body["DownloadTaskId"] = request.DownloadTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackupSetDownloadLink"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackupSetDownloadLinkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupSetDownloadLink(request *DescribeBackupSetDownloadLinkRequest) (_result *DescribeBackupSetDownloadLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupSetDownloadLinkResponse{}
	_body, _err := client.DescribeBackupSetDownloadLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCharsetWithOptions(request *DescribeCharsetRequest, runtime *util.RuntimeOptions) (_result *DescribeCharsetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Series)) {
		body["Series"] = request.Series
	}

	if !tea.BoolValue(util.IsUnset(request.TenantMode)) {
		body["TenantMode"] = request.TenantMode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCharset"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCharsetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCharset(request *DescribeCharsetRequest) (_result *DescribeCharsetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCharsetResponse{}
	_body, _err := client.DescribeCharsetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDataBackupSetWithOptions(request *DescribeDataBackupSetRequest, runtime *util.RuntimeOptions) (_result *DescribeDataBackupSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupObjectType)) {
		body["BackupObjectType"] = request.BackupObjectType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataBackupSet"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataBackupSetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDataBackupSet(request *DescribeDataBackupSetRequest) (_result *DescribeDataBackupSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataBackupSetResponse{}
	_body, _err := client.DescribeDataBackupSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDatabasesWithOptions(request *DescribeDatabasesRequest, runtime *util.RuntimeOptions) (_result *DescribeDatabasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		body["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		body["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WithTables)) {
		body["WithTables"] = request.WithTables
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDatabases"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDatabasesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDatabases(request *DescribeDatabasesRequest) (_result *DescribeDatabasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatabasesResponse{}
	_body, _err := client.DescribeDatabasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceWithOptions(request *DescribeInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstance"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstance(request *DescribeInstanceRequest) (_result *DescribeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceResponse{}
	_body, _err := client.DescribeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceCreatableZoneWithOptions(request *DescribeInstanceCreatableZoneRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceCreatableZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceCreatableZone"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceCreatableZoneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceCreatableZone(request *DescribeInstanceCreatableZoneRequest) (_result *DescribeInstanceCreatableZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceCreatableZoneResponse{}
	_body, _err := client.DescribeInstanceCreatableZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceSSLWithOptions(request *DescribeInstanceSSLRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceSSLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceSSL"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceSSLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceSSL(request *DescribeInstanceSSLRequest) (_result *DescribeInstanceSSLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceSSLResponse{}
	_body, _err := client.DescribeInstanceSSLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceSecurityConfigsWithOptions(request *DescribeInstanceSecurityConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceSecurityConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		body["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceSecurityConfigs"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceSecurityConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceSecurityConfigs(request *DescribeInstanceSecurityConfigsRequest) (_result *DescribeInstanceSecurityConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceSecurityConfigsResponse{}
	_body, _err := client.DescribeInstanceSecurityConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTagsWithOptions(request *DescribeInstanceTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		body["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		body["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceTags"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTags(request *DescribeInstanceTagsRequest) (_result *DescribeInstanceTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTagsResponse{}
	_body, _err := client.DescribeInstanceTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTenantModesWithOptions(request *DescribeInstanceTenantModesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTenantModesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceTenantModes"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceTenantModesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTenantModes(request *DescribeInstanceTenantModesRequest) (_result *DescribeInstanceTenantModesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTenantModesResponse{}
	_body, _err := client.DescribeInstanceTenantModesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTopologyWithOptions(request *DescribeInstanceTopologyRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceTopology"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceTopologyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTopology(request *DescribeInstanceTopologyRequest) (_result *DescribeInstanceTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTopologyResponse{}
	_body, _err := client.DescribeInstanceTopologyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstancesWithOptions(request *DescribeInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		body["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		body["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		body["SearchKey"] = request.SearchKey
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstances"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstances(request *DescribeInstancesRequest) (_result *DescribeInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DescribeInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMetricsDataWithOptions(request *DescribeMetricsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupByLabels)) {
		query["GroupByLabels"] = request.GroupByLabels
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Labels)) {
		query["Labels"] = request.Labels
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		query["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.SortMetricKey)) {
		query["SortMetricKey"] = request.SortMetricKey
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		query["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ReplicaType)) {
		body["ReplicaType"] = request.ReplicaType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricsData"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMetricsData(request *DescribeMetricsDataRequest) (_result *DescribeMetricsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricsDataResponse{}
	_body, _err := client.DescribeMetricsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNodeMetricsWithOptions(request *DescribeNodeMetricsRequest, runtime *util.RuntimeOptions) (_result *DescribeNodeMetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		body["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIdList)) {
		body["NodeIdList"] = request.NodeIdList
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		body["NodeName"] = request.NodeName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNodeMetrics"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNodeMetricsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNodeMetrics(request *DescribeNodeMetricsRequest) (_result *DescribeNodeMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNodeMetricsResponse{}
	_body, _err := client.DescribeNodeMetricsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOasAnomalySQLListWithOptions(request *DescribeOasAnomalySQLListRequest, runtime *util.RuntimeOptions) (_result *DescribeOasAnomalySQLListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		body["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicSql)) {
		body["DynamicSql"] = request.DynamicSql
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FilterCondition)) {
		body["FilterCondition"] = request.FilterCondition
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MergeDynamicSql)) {
		body["MergeDynamicSql"] = request.MergeDynamicSql
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIp)) {
		body["NodeIp"] = request.NodeIp
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeyWord)) {
		body["SearchKeyWord"] = request.SearchKeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.SearchParam)) {
		body["SearchParam"] = request.SearchParam
	}

	if !tea.BoolValue(util.IsUnset(request.SearchRule)) {
		body["SearchRule"] = request.SearchRule
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		body["SearchValue"] = request.SearchValue
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlTextLength)) {
		body["SqlTextLength"] = request.SqlTextLength
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOasAnomalySQLList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOasAnomalySQLListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOasAnomalySQLList(request *DescribeOasAnomalySQLListRequest) (_result *DescribeOasAnomalySQLListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOasAnomalySQLListResponse{}
	_body, _err := client.DescribeOasAnomalySQLListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOasSQLDetailsWithOptions(request *DescribeOasSQLDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeOasSQLDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicSql)) {
		body["DynamicSql"] = request.DynamicSql
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOasSQLDetails"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOasSQLDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOasSQLDetails(request *DescribeOasSQLDetailsRequest) (_result *DescribeOasSQLDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOasSQLDetailsResponse{}
	_body, _err := client.DescribeOasSQLDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOasSQLHistoryListWithOptions(request *DescribeOasSQLHistoryListRequest, runtime *util.RuntimeOptions) (_result *DescribeOasSQLHistoryListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		body["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicSql)) {
		body["DynamicSql"] = request.DynamicSql
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIp)) {
		body["NodeIp"] = request.NodeIp
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOasSQLHistoryList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOasSQLHistoryListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOasSQLHistoryList(request *DescribeOasSQLHistoryListRequest) (_result *DescribeOasSQLHistoryListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOasSQLHistoryListResponse{}
	_body, _err := client.DescribeOasSQLHistoryListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOasSQLPlansWithOptions(request *DescribeOasSQLPlansRequest, runtime *util.RuntimeOptions) (_result *DescribeOasSQLPlansResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		body["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicSql)) {
		body["DynamicSql"] = request.DynamicSql
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOasSQLPlans"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOasSQLPlansResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOasSQLPlans(request *DescribeOasSQLPlansRequest) (_result *DescribeOasSQLPlansResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOasSQLPlansResponse{}
	_body, _err := client.DescribeOasSQLPlansWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOasSlowSQLListWithOptions(request *DescribeOasSlowSQLListRequest, runtime *util.RuntimeOptions) (_result *DescribeOasSlowSQLListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		body["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicSql)) {
		body["DynamicSql"] = request.DynamicSql
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FilterCondition)) {
		body["FilterCondition"] = request.FilterCondition
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MergeDynamicSql)) {
		body["MergeDynamicSql"] = request.MergeDynamicSql
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIp)) {
		body["NodeIp"] = request.NodeIp
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeyWord)) {
		body["SearchKeyWord"] = request.SearchKeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.SearchParam)) {
		body["SearchParam"] = request.SearchParam
	}

	if !tea.BoolValue(util.IsUnset(request.SearchRule)) {
		body["SearchRule"] = request.SearchRule
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		body["SearchValue"] = request.SearchValue
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlTextLength)) {
		body["SqlTextLength"] = request.SqlTextLength
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOasSlowSQLList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOasSlowSQLListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOasSlowSQLList(request *DescribeOasSlowSQLListRequest) (_result *DescribeOasSlowSQLListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOasSlowSQLListResponse{}
	_body, _err := client.DescribeOasSlowSQLListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOasTopSQLListWithOptions(request *DescribeOasTopSQLListRequest, runtime *util.RuntimeOptions) (_result *DescribeOasTopSQLListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		body["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicSql)) {
		body["DynamicSql"] = request.DynamicSql
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FilterCondition)) {
		body["FilterCondition"] = request.FilterCondition
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MergeDynamicSql)) {
		body["MergeDynamicSql"] = request.MergeDynamicSql
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIp)) {
		body["NodeIp"] = request.NodeIp
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeyWord)) {
		body["SearchKeyWord"] = request.SearchKeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.SearchParam)) {
		body["SearchParam"] = request.SearchParam
	}

	if !tea.BoolValue(util.IsUnset(request.SearchRule)) {
		body["SearchRule"] = request.SearchRule
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		body["SearchValue"] = request.SearchValue
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlTextLength)) {
		body["SqlTextLength"] = request.SqlTextLength
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOasTopSQLList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOasTopSQLListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOasTopSQLList(request *DescribeOasTopSQLListRequest) (_result *DescribeOasTopSQLListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOasTopSQLListResponse{}
	_body, _err := client.DescribeOasTopSQLListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOmsOpenAPIProjectWithOptions(request *DescribeOmsOpenAPIProjectRequest, runtime *util.RuntimeOptions) (_result *DescribeOmsOpenAPIProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOmsOpenAPIProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOmsOpenAPIProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOmsOpenAPIProject(request *DescribeOmsOpenAPIProjectRequest) (_result *DescribeOmsOpenAPIProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOmsOpenAPIProjectResponse{}
	_body, _err := client.DescribeOmsOpenAPIProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOmsOpenAPIProjectStepsWithOptions(request *DescribeOmsOpenAPIProjectStepsRequest, runtime *util.RuntimeOptions) (_result *DescribeOmsOpenAPIProjectStepsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOmsOpenAPIProjectSteps"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOmsOpenAPIProjectStepsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOmsOpenAPIProjectSteps(request *DescribeOmsOpenAPIProjectStepsRequest) (_result *DescribeOmsOpenAPIProjectStepsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOmsOpenAPIProjectStepsResponse{}
	_body, _err := client.DescribeOmsOpenAPIProjectStepsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOutlineBindingWithOptions(request *DescribeOutlineBindingRequest, runtime *util.RuntimeOptions) (_result *DescribeOutlineBindingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		body["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsConcurrentLimit)) {
		body["IsConcurrentLimit"] = request.IsConcurrentLimit
	}

	if !tea.BoolValue(util.IsUnset(request.SQLId)) {
		body["SQLId"] = request.SQLId
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		body["TableName"] = request.TableName
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOutlineBinding"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOutlineBindingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOutlineBinding(request *DescribeOutlineBindingRequest) (_result *DescribeOutlineBindingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOutlineBindingResponse{}
	_body, _err := client.DescribeOutlineBindingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParametersWithOptions(request *DescribeParametersRequest, runtime *util.RuntimeOptions) (_result *DescribeParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dimension)) {
		body["Dimension"] = request.Dimension
	}

	if !tea.BoolValue(util.IsUnset(request.DimensionValue)) {
		body["DimensionValue"] = request.DimensionValue
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeParameters"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeParametersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParameters(request *DescribeParametersRequest) (_result *DescribeParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParametersResponse{}
	_body, _err := client.DescribeParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParametersHistoryWithOptions(request *DescribeParametersHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeParametersHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dimension)) {
		body["Dimension"] = request.Dimension
	}

	if !tea.BoolValue(util.IsUnset(request.DimensionValue)) {
		body["DimensionValue"] = request.DimensionValue
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeParametersHistory"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeParametersHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParametersHistory(request *DescribeParametersHistoryRequest) (_result *DescribeParametersHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParametersHistoryResponse{}
	_body, _err := client.DescribeParametersHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeProjectWithOptions(request *DescribeProjectRequest, runtime *util.RuntimeOptions) (_result *DescribeProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeProject(request *DescribeProjectRequest) (_result *DescribeProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProjectResponse{}
	_body, _err := client.DescribeProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeProjectComponentsWithOptions(request *DescribeProjectComponentsRequest, runtime *util.RuntimeOptions) (_result *DescribeProjectComponentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProjectComponents"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProjectComponentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeProjectComponents(request *DescribeProjectComponentsRequest) (_result *DescribeProjectComponentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProjectComponentsResponse{}
	_body, _err := client.DescribeProjectComponentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeProjectProgressWithOptions(request *DescribeProjectProgressRequest, runtime *util.RuntimeOptions) (_result *DescribeProjectProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProjectProgress"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProjectProgressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeProjectProgress(request *DescribeProjectProgressRequest) (_result *DescribeProjectProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProjectProgressResponse{}
	_body, _err := client.DescribeProjectProgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeProjectStepMetricWithOptions(request *DescribeProjectStepMetricRequest, runtime *util.RuntimeOptions) (_result *DescribeProjectStepMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Aggregator)) {
		body["Aggregator"] = request.Aggregator
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTimestamp)) {
		body["BeginTimestamp"] = request.BeginTimestamp
	}

	if !tea.BoolValue(util.IsUnset(request.EndTimestamp)) {
		body["EndTimestamp"] = request.EndTimestamp
	}

	if !tea.BoolValue(util.IsUnset(request.MaxPointNum)) {
		body["MaxPointNum"] = request.MaxPointNum
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		body["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.StepName)) {
		body["StepName"] = request.StepName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProjectStepMetric"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProjectStepMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeProjectStepMetric(request *DescribeProjectStepMetricRequest) (_result *DescribeProjectStepMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProjectStepMetricResponse{}
	_body, _err := client.DescribeProjectStepMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeProjectStepsWithOptions(request *DescribeProjectStepsRequest, runtime *util.RuntimeOptions) (_result *DescribeProjectStepsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProjectSteps"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProjectStepsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeProjectSteps(request *DescribeProjectStepsRequest) (_result *DescribeProjectStepsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProjectStepsResponse{}
	_body, _err := client.DescribeProjectStepsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRecommendIndexWithOptions(request *DescribeRecommendIndexRequest, runtime *util.RuntimeOptions) (_result *DescribeRecommendIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SQLId)) {
		body["SQLId"] = request.SQLId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRecommendIndex"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRecommendIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRecommendIndex(request *DescribeRecommendIndexRequest) (_result *DescribeRecommendIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecommendIndexResponse{}
	_body, _err := client.DescribeRecommendIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLDetailsWithOptions(request *DescribeSQLDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SQLId)) {
		body["SQLId"] = request.SQLId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSQLDetails"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSQLDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLDetails(request *DescribeSQLDetailsRequest) (_result *DescribeSQLDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLDetailsResponse{}
	_body, _err := client.DescribeSQLDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLHistoryListWithOptions(request *DescribeSQLHistoryListRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLHistoryListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SQLId)) {
		body["SQLId"] = request.SQLId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSQLHistoryList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSQLHistoryListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLHistoryList(request *DescribeSQLHistoryListRequest) (_result *DescribeSQLHistoryListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLHistoryListResponse{}
	_body, _err := client.DescribeSQLHistoryListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLPlansWithOptions(request *DescribeSQLPlansRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLPlansResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SQLId)) {
		body["SQLId"] = request.SQLId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSQLPlans"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSQLPlansResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLPlans(request *DescribeSQLPlansRequest) (_result *DescribeSQLPlansResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLPlansResponse{}
	_body, _err := client.DescribeSQLPlansWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLSamplesWithOptions(request *DescribeSQLSamplesRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLSamplesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSQLSamples"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSQLSamplesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLSamples(request *DescribeSQLSamplesRequest) (_result *DescribeSQLSamplesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLSamplesResponse{}
	_body, _err := client.DescribeSQLSamplesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSampleSqlRawTextsWithOptions(request *DescribeSampleSqlRawTextsRequest, runtime *util.RuntimeOptions) (_result *DescribeSampleSqlRawTextsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		body["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.TraceId)) {
		body["TraceId"] = request.TraceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSampleSqlRawTexts"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSampleSqlRawTextsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSampleSqlRawTexts(request *DescribeSampleSqlRawTextsRequest) (_result *DescribeSampleSqlRawTextsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSampleSqlRawTextsResponse{}
	_body, _err := client.DescribeSampleSqlRawTextsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityIpGroupsWithOptions(request *DescribeSecurityIpGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityIpGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecurityIpGroups"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSecurityIpGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityIpGroups(request *DescribeSecurityIpGroupsRequest) (_result *DescribeSecurityIpGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityIpGroupsResponse{}
	_body, _err := client.DescribeSecurityIpGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSlowSQLHistoryListWithOptions(request *DescribeSlowSQLHistoryListRequest, runtime *util.RuntimeOptions) (_result *DescribeSlowSQLHistoryListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SQLId)) {
		body["SQLId"] = request.SQLId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSlowSQLHistoryList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSlowSQLHistoryListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSlowSQLHistoryList(request *DescribeSlowSQLHistoryListRequest) (_result *DescribeSlowSQLHistoryListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSlowSQLHistoryListResponse{}
	_body, _err := client.DescribeSlowSQLHistoryListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSlowSQLListWithOptions(tmpReq *DescribeSlowSQLListRequest, runtime *util.RuntimeOptions) (_result *DescribeSlowSQLListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeSlowSQLListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.FilterCondition)) {
		request.FilterConditionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FilterCondition, tea.String("FilterCondition"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FilterConditionShrink)) {
		body["FilterCondition"] = request.FilterConditionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIp)) {
		body["NodeIp"] = request.NodeIp
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SQLId)) {
		body["SQLId"] = request.SQLId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeyWord)) {
		body["SearchKeyWord"] = request.SearchKeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.SearchParameter)) {
		body["SearchParameter"] = request.SearchParameter
	}

	if !tea.BoolValue(util.IsUnset(request.SearchRule)) {
		body["SearchRule"] = request.SearchRule
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		body["SearchValue"] = request.SearchValue
	}

	if !tea.BoolValue(util.IsUnset(request.SortColumn)) {
		body["SortColumn"] = request.SortColumn
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		body["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSlowSQLList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSlowSQLListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSlowSQLList(request *DescribeSlowSQLListRequest) (_result *DescribeSlowSQLListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSlowSQLListResponse{}
	_body, _err := client.DescribeSlowSQLListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantWithOptions(request *DescribeTenantRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenant"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenant(request *DescribeTenantRequest) (_result *DescribeTenantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantResponse{}
	_body, _err := client.DescribeTenantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantEncryptionWithOptions(request *DescribeTenantEncryptionRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantEncryptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantName)) {
		body["TenantName"] = request.TenantName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenantEncryption"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantEncryptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenantEncryption(request *DescribeTenantEncryptionRequest) (_result *DescribeTenantEncryptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantEncryptionResponse{}
	_body, _err := client.DescribeTenantEncryptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantMetricsWithOptions(request *DescribeTenantMetricsRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantMetricsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		body["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantIdList)) {
		body["TenantIdList"] = request.TenantIdList
	}

	if !tea.BoolValue(util.IsUnset(request.TenantName)) {
		body["TenantName"] = request.TenantName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenantMetrics"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantMetricsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenantMetrics(request *DescribeTenantMetricsRequest) (_result *DescribeTenantMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantMetricsResponse{}
	_body, _err := client.DescribeTenantMetricsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantSecurityConfigsWithOptions(request *DescribeTenantSecurityConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantSecurityConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		body["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenantSecurityConfigs"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantSecurityConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenantSecurityConfigs(request *DescribeTenantSecurityConfigsRequest) (_result *DescribeTenantSecurityConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantSecurityConfigsResponse{}
	_body, _err := client.DescribeTenantSecurityConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantSecurityIpGroupsWithOptions(request *DescribeTenantSecurityIpGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantSecurityIpGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenantSecurityIpGroups"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantSecurityIpGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenantSecurityIpGroups(request *DescribeTenantSecurityIpGroupsRequest) (_result *DescribeTenantSecurityIpGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantSecurityIpGroupsResponse{}
	_body, _err := client.DescribeTenantSecurityIpGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantTagsWithOptions(request *DescribeTenantTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		body["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TenantIds)) {
		body["TenantIds"] = request.TenantIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenantTags"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenantTags(request *DescribeTenantTagsRequest) (_result *DescribeTenantTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantTagsResponse{}
	_body, _err := client.DescribeTenantTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantUserRolesWithOptions(request *DescribeTenantUserRolesRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantUserRolesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenantUserRoles"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantUserRolesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenantUserRoles(request *DescribeTenantUserRolesRequest) (_result *DescribeTenantUserRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantUserRolesResponse{}
	_body, _err := client.DescribeTenantUserRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantUsersWithOptions(request *DescribeTenantUsersRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		body["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenantUsers"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenantUsers(request *DescribeTenantUsersRequest) (_result *DescribeTenantUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantUsersResponse{}
	_body, _err := client.DescribeTenantUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantZonesReadWithOptions(request *DescribeTenantZonesReadRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantZonesReadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenantZonesRead"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantZonesReadResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenantZonesRead(request *DescribeTenantZonesReadRequest) (_result *DescribeTenantZonesReadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantZonesReadResponse{}
	_body, _err := client.DescribeTenantZonesReadWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTenantsWithOptions(request *DescribeTenantsRequest, runtime *util.RuntimeOptions) (_result *DescribeTenantsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		body["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantName)) {
		body["TenantName"] = request.TenantName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTenants"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTenantsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTenants(request *DescribeTenantsRequest) (_result *DescribeTenantsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTenantsResponse{}
	_body, _err := client.DescribeTenantsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTimeZonesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeTimeZonesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeTimeZones"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTimeZonesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTimeZones() (_result *DescribeTimeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTimeZonesResponse{}
	_body, _err := client.DescribeTimeZonesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTopSQLListWithOptions(tmpReq *DescribeTopSQLListRequest, runtime *util.RuntimeOptions) (_result *DescribeTopSQLListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeTopSQLListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.FilterCondition)) {
		request.FilterConditionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FilterCondition, tea.String("FilterCondition"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		body["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FilterConditionShrink)) {
		body["FilterCondition"] = request.FilterConditionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIp)) {
		body["NodeIp"] = request.NodeIp
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SQLId)) {
		body["SQLId"] = request.SQLId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeyWord)) {
		body["SearchKeyWord"] = request.SearchKeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.SearchParameter)) {
		body["SearchParameter"] = request.SearchParameter
	}

	if !tea.BoolValue(util.IsUnset(request.SearchRule)) {
		body["SearchRule"] = request.SearchRule
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		body["SearchValue"] = request.SearchValue
	}

	if !tea.BoolValue(util.IsUnset(request.SortColumn)) {
		body["SortColumn"] = request.SortColumn
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		body["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTopSQLList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTopSQLListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTopSQLList(request *DescribeTopSQLListRequest) (_result *DescribeTopSQLListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTopSQLListResponse{}
	_body, _err := client.DescribeTopSQLListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeZonesWithOptions(request *DescribeZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeployType)) {
		body["DeployType"] = request.DeployType
	}

	if !tea.BoolValue(util.IsUnset(request.Series)) {
		body["Series"] = request.Series
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeZones"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeZonesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeZones(request *DescribeZonesRequest) (_result *DescribeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DescribeZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUploadOssUrlWithOptions(request *GetUploadOssUrlRequest, runtime *util.RuntimeOptions) (_result *GetUploadOssUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EffectiveTimeMinutes)) {
		body["EffectiveTimeMinutes"] = request.EffectiveTimeMinutes
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUploadOssUrl"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUploadOssUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUploadOssUrl(request *GetUploadOssUrlRequest) (_result *GetUploadOssUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUploadOssUrlResponse{}
	_body, _err := client.GetUploadOssUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) KillProcessListWithOptions(request *KillProcessListRequest, runtime *util.RuntimeOptions) (_result *KillProcessListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionList)) {
		body["SessionList"] = request.SessionList
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("KillProcessList"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &KillProcessListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) KillProcessList(request *KillProcessListRequest) (_result *KillProcessListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &KillProcessListResponse{}
	_body, _err := client.KillProcessListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAllLabelsWithOptions(runtime *util.RuntimeOptions) (_result *ListAllLabelsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListAllLabels"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAllLabelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAllLabels() (_result *ListAllLabelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAllLabelsResponse{}
	_body, _err := client.ListAllLabelsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataSourceWithOptions(tmpReq *ListDataSourceRequest, runtime *util.RuntimeOptions) (_result *ListDataSourceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDataSourceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Types)) {
		request.TypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Types, tea.String("Types"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Order)) {
		body["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		body["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.SortField)) {
		body["SortField"] = request.SortField
	}

	if !tea.BoolValue(util.IsUnset(request.TypesShrink)) {
		body["Types"] = request.TypesShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataSource"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataSource(request *ListDataSourceRequest) (_result *ListDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataSourceResponse{}
	_body, _err := client.ListDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProjectFullVerifyResultWithOptions(tmpReq *ListProjectFullVerifyResultRequest, runtime *util.RuntimeOptions) (_result *ListProjectFullVerifyResultResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListProjectFullVerifyResultShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestSchemas)) {
		request.DestSchemasShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestSchemas, tea.String("DestSchemas"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SourceSchemas)) {
		request.SourceSchemasShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SourceSchemas, tea.String("SourceSchemas"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestSchemasShrink)) {
		body["DestSchemas"] = request.DestSchemasShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceSchemasShrink)) {
		body["SourceSchemas"] = request.SourceSchemasShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectFullVerifyResult"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectFullVerifyResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProjectFullVerifyResult(request *ListProjectFullVerifyResultRequest) (_result *ListProjectFullVerifyResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectFullVerifyResultResponse{}
	_body, _err := client.ListProjectFullVerifyResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProjectModifyRecordsWithOptions(request *ListProjectModifyRecordsRequest, runtime *util.RuntimeOptions) (_result *ListProjectModifyRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectModifyRecords"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectModifyRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProjectModifyRecords(request *ListProjectModifyRecordsRequest) (_result *ListProjectModifyRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectModifyRecordsResponse{}
	_body, _err := client.ListProjectModifyRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProjectsWithOptions(tmpReq *ListProjectsRequest, runtime *util.RuntimeOptions) (_result *ListProjectsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListProjectsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.LabelIds)) {
		request.LabelIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.LabelIds, tea.String("LabelIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SinkEndpointTypes)) {
		request.SinkEndpointTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SinkEndpointTypes, tea.String("SinkEndpointTypes"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SourceEndpointTypes)) {
		request.SourceEndpointTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SourceEndpointTypes, tea.String("SourceEndpointTypes"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Status)) {
		request.StatusShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Status, tea.String("Status"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LabelIdsShrink)) {
		body["LabelIds"] = request.LabelIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		body["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		body["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.SinkEndpointTypesShrink)) {
		body["SinkEndpointTypes"] = request.SinkEndpointTypesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SortField)) {
		body["SortField"] = request.SortField
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointTypesShrink)) {
		body["SourceEndpointTypes"] = request.SourceEndpointTypesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StatusShrink)) {
		body["Status"] = request.StatusShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.VisibleSubProject)) {
		body["VisibleSubProject"] = request.VisibleSubProject
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjects"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProjects(request *ListProjectsRequest) (_result *ListProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectsResponse{}
	_body, _err := client.ListProjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListWorkerInstancesWithOptions(tmpReq *ListWorkerInstancesRequest, runtime *util.RuntimeOptions) (_result *ListWorkerInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListWorkerInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Specs)) {
		request.SpecsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Specs, tea.String("Specs"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestType)) {
		body["DestType"] = request.DestType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		body["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyBindable)) {
		body["OnlyBindable"] = request.OnlyBindable
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		body["SourceType"] = request.SourceType
	}

	if !tea.BoolValue(util.IsUnset(request.SpecsShrink)) {
		body["Specs"] = request.SpecsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkerInstances"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkerInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListWorkerInstances(request *ListWorkerInstancesRequest) (_result *ListWorkerInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListWorkerInstancesResponse{}
	_body, _err := client.ListWorkerInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDatabaseDescriptionWithOptions(request *ModifyDatabaseDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyDatabaseDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		body["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDatabaseDescription"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDatabaseDescriptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDatabaseDescription(request *ModifyDatabaseDescriptionRequest) (_result *ModifyDatabaseDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDatabaseDescriptionResponse{}
	_body, _err := client.ModifyDatabaseDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDatabaseUserRolesWithOptions(request *ModifyDatabaseUserRolesRequest, runtime *util.RuntimeOptions) (_result *ModifyDatabaseUserRolesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		body["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Users)) {
		body["Users"] = request.Users
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDatabaseUserRoles"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDatabaseUserRolesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDatabaseUserRoles(request *ModifyDatabaseUserRolesRequest) (_result *ModifyDatabaseUserRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDatabaseUserRolesResponse{}
	_body, _err := client.ModifyDatabaseUserRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceNameWithOptions(request *ModifyInstanceNameRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		body["InstanceName"] = request.InstanceName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceName"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceName(request *ModifyInstanceNameRequest) (_result *ModifyInstanceNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceNameResponse{}
	_body, _err := client.ModifyInstanceNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceNodeNumWithOptions(request *ModifyInstanceNodeNumRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceNodeNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		body["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeNum)) {
		body["NodeNum"] = request.NodeNum
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceNodeNum"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceNodeNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceNodeNum(request *ModifyInstanceNodeNumRequest) (_result *ModifyInstanceNodeNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceNodeNumResponse{}
	_body, _err := client.ModifyInstanceNodeNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceSpecWithOptions(request *ModifyInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskSize)) {
		body["DiskSize"] = request.DiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.DiskType)) {
		body["DiskType"] = request.DiskType
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		body["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceClass)) {
		body["InstanceClass"] = request.InstanceClass
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceSpec"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceSpec(request *ModifyInstanceSpecRequest) (_result *ModifyInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.ModifyInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceTagsWithOptions(request *ModifyInstanceTagsRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		body["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceTags"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceTags(request *ModifyInstanceTagsRequest) (_result *ModifyInstanceTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceTagsResponse{}
	_body, _err := client.ModifyInstanceTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceTemporaryCapacityWithOptions(request *ModifyInstanceTemporaryCapacityRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceTemporaryCapacityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		body["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.DiskSize)) {
		body["DiskSize"] = request.DiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceTemporaryCapacity"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceTemporaryCapacityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceTemporaryCapacity(request *ModifyInstanceTemporaryCapacityRequest) (_result *ModifyInstanceTemporaryCapacityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceTemporaryCapacityResponse{}
	_body, _err := client.ModifyInstanceTemporaryCapacityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyParametersWithOptions(request *ModifyParametersRequest, runtime *util.RuntimeOptions) (_result *ModifyParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dimension)) {
		body["Dimension"] = request.Dimension
	}

	if !tea.BoolValue(util.IsUnset(request.DimensionValue)) {
		body["DimensionValue"] = request.DimensionValue
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Parameters)) {
		body["Parameters"] = request.Parameters
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyParameters"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyParametersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyParameters(request *ModifyParametersRequest) (_result *ModifyParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyParametersResponse{}
	_body, _err := client.ModifyParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityIpsWithOptions(request *ModifySecurityIpsRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIpGroupName)) {
		body["SecurityIpGroupName"] = request.SecurityIpGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIps)) {
		body["SecurityIps"] = request.SecurityIps
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySecurityIps"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySecurityIpsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityIps(request *ModifySecurityIpsRequest) (_result *ModifySecurityIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityIpsResponse{}
	_body, _err := client.ModifySecurityIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTenantEncryptionWithOptions(request *ModifyTenantEncryptionRequest, runtime *util.RuntimeOptions) (_result *ModifyTenantEncryptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EncryptionKeyId)) {
		body["EncryptionKeyId"] = request.EncryptionKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptionType)) {
		body["EncryptionType"] = request.EncryptionType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTenantEncryption"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTenantEncryptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTenantEncryption(request *ModifyTenantEncryptionRequest) (_result *ModifyTenantEncryptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTenantEncryptionResponse{}
	_body, _err := client.ModifyTenantEncryptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTenantPrimaryZoneWithOptions(request *ModifyTenantPrimaryZoneRequest, runtime *util.RuntimeOptions) (_result *ModifyTenantPrimaryZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MasterIntranetAddressZone)) {
		body["MasterIntranetAddressZone"] = request.MasterIntranetAddressZone
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryZone)) {
		body["PrimaryZone"] = request.PrimaryZone
	}

	if !tea.BoolValue(util.IsUnset(request.TenantEndpointDirectId)) {
		body["TenantEndpointDirectId"] = request.TenantEndpointDirectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantEndpointId)) {
		body["TenantEndpointId"] = request.TenantEndpointId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UserDirectVSwitchId)) {
		body["UserDirectVSwitchId"] = request.UserDirectVSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.UserVSwitchId)) {
		body["UserVSwitchId"] = request.UserVSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		body["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTenantPrimaryZone"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTenantPrimaryZoneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTenantPrimaryZone(request *ModifyTenantPrimaryZoneRequest) (_result *ModifyTenantPrimaryZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTenantPrimaryZoneResponse{}
	_body, _err := client.ModifyTenantPrimaryZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTenantResourceWithOptions(request *ModifyTenantResourceRequest, runtime *util.RuntimeOptions) (_result *ModifyTenantResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cpu)) {
		body["Cpu"] = request.Cpu
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LogDisk)) {
		body["LogDisk"] = request.LogDisk
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		body["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.ReadOnlyZoneList)) {
		body["ReadOnlyZoneList"] = request.ReadOnlyZoneList
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTenantResource"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTenantResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTenantResource(request *ModifyTenantResourceRequest) (_result *ModifyTenantResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTenantResourceResponse{}
	_body, _err := client.ModifyTenantResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTenantSecurityIpGroupWithOptions(request *ModifyTenantSecurityIpGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyTenantSecurityIpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIpGroupName)) {
		body["SecurityIpGroupName"] = request.SecurityIpGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityIps)) {
		body["SecurityIps"] = request.SecurityIps
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTenantSecurityIpGroup"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTenantSecurityIpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTenantSecurityIpGroup(request *ModifyTenantSecurityIpGroupRequest) (_result *ModifyTenantSecurityIpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTenantSecurityIpGroupResponse{}
	_body, _err := client.ModifyTenantSecurityIpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTenantTagsWithOptions(request *ModifyTenantTagsRequest, runtime *util.RuntimeOptions) (_result *ModifyTenantTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		body["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTenantTags"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTenantTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTenantTags(request *ModifyTenantTagsRequest) (_result *ModifyTenantTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTenantTagsResponse{}
	_body, _err := client.ModifyTenantTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTenantUserDescriptionWithOptions(request *ModifyTenantUserDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyTenantUserDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTenantUserDescription"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTenantUserDescriptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTenantUserDescription(request *ModifyTenantUserDescriptionRequest) (_result *ModifyTenantUserDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTenantUserDescriptionResponse{}
	_body, _err := client.ModifyTenantUserDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTenantUserPasswordWithOptions(request *ModifyTenantUserPasswordRequest, runtime *util.RuntimeOptions) (_result *ModifyTenantUserPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EncryptionType)) {
		body["EncryptionType"] = request.EncryptionType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.UserPassword)) {
		body["UserPassword"] = request.UserPassword
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTenantUserPassword"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTenantUserPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTenantUserPassword(request *ModifyTenantUserPasswordRequest) (_result *ModifyTenantUserPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTenantUserPasswordResponse{}
	_body, _err := client.ModifyTenantUserPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTenantUserRolesWithOptions(request *ModifyTenantUserRolesRequest, runtime *util.RuntimeOptions) (_result *ModifyTenantUserRolesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyType)) {
		body["ModifyType"] = request.ModifyType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.UserRole)) {
		body["UserRole"] = request.UserRole
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTenantUserRoles"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTenantUserRolesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTenantUserRoles(request *ModifyTenantUserRolesRequest) (_result *ModifyTenantUserRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTenantUserRolesResponse{}
	_body, _err := client.ModifyTenantUserRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTenantUserStatusWithOptions(request *ModifyTenantUserStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyTenantUserStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.UserStatus)) {
		body["UserStatus"] = request.UserStatus
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTenantUserStatus"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTenantUserStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTenantUserStatus(request *ModifyTenantUserStatusRequest) (_result *ModifyTenantUserStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTenantUserStatusResponse{}
	_body, _err := client.ModifyTenantUserStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseOmsOpenAPIProjectWithOptions(request *ReleaseOmsOpenAPIProjectRequest, runtime *util.RuntimeOptions) (_result *ReleaseOmsOpenAPIProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseOmsOpenAPIProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseOmsOpenAPIProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseOmsOpenAPIProject(request *ReleaseOmsOpenAPIProjectRequest) (_result *ReleaseOmsOpenAPIProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseOmsOpenAPIProjectResponse{}
	_body, _err := client.ReleaseOmsOpenAPIProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseProjectWithOptions(request *ReleaseProjectRequest, runtime *util.RuntimeOptions) (_result *ReleaseProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseProject(request *ReleaseProjectRequest) (_result *ReleaseProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseProjectResponse{}
	_body, _err := client.ReleaseProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseWorkerInstanceWithOptions(request *ReleaseWorkerInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleaseWorkerInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseWorkerInstance"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseWorkerInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseWorkerInstance(request *ReleaseWorkerInstanceRequest) (_result *ReleaseWorkerInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseWorkerInstanceResponse{}
	_body, _err := client.ReleaseWorkerInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetOmsOpenAPIProjectWithOptions(request *ResetOmsOpenAPIProjectRequest, runtime *util.RuntimeOptions) (_result *ResetOmsOpenAPIProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetOmsOpenAPIProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetOmsOpenAPIProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetOmsOpenAPIProject(request *ResetOmsOpenAPIProjectRequest) (_result *ResetOmsOpenAPIProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetOmsOpenAPIProjectResponse{}
	_body, _err := client.ResetOmsOpenAPIProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResumeOmsOpenAPIProjectWithOptions(request *ResumeOmsOpenAPIProjectRequest, runtime *util.RuntimeOptions) (_result *ResumeOmsOpenAPIProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeOmsOpenAPIProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeOmsOpenAPIProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResumeOmsOpenAPIProject(request *ResumeOmsOpenAPIProjectRequest) (_result *ResumeOmsOpenAPIProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeOmsOpenAPIProjectResponse{}
	_body, _err := client.ResumeOmsOpenAPIProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResumeProjectWithOptions(request *ResumeProjectRequest, runtime *util.RuntimeOptions) (_result *ResumeProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResumeProject(request *ResumeProjectRequest) (_result *ResumeProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeProjectResponse{}
	_body, _err := client.ResumeProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RetryProjectModifyRecordsWithOptions(request *RetryProjectModifyRecordsRequest, runtime *util.RuntimeOptions) (_result *RetryProjectModifyRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RetryProjectModifyRecords"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RetryProjectModifyRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RetryProjectModifyRecords(request *RetryProjectModifyRecordsRequest) (_result *RetryProjectModifyRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RetryProjectModifyRecordsResponse{}
	_body, _err := client.RetryProjectModifyRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchOmsOpenAPIMonitorMetricWithOptions(request *SearchOmsOpenAPIMonitorMetricRequest, runtime *util.RuntimeOptions) (_result *SearchOmsOpenAPIMonitorMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		body["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxPointNum)) {
		body["MaxPointNum"] = request.MaxPointNum
	}

	if !tea.BoolValue(util.IsUnset(request.Metric)) {
		body["Metric"] = request.Metric
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchOmsOpenAPIMonitorMetric"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchOmsOpenAPIMonitorMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchOmsOpenAPIMonitorMetric(request *SearchOmsOpenAPIMonitorMetricRequest) (_result *SearchOmsOpenAPIMonitorMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchOmsOpenAPIMonitorMetricResponse{}
	_body, _err := client.SearchOmsOpenAPIMonitorMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchOmsOpenAPIProjectsWithOptions(tmpReq *SearchOmsOpenAPIProjectsRequest, runtime *util.RuntimeOptions) (_result *SearchOmsOpenAPIProjectsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SearchOmsOpenAPIProjectsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestDbTypes)) {
		request.DestDbTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestDbTypes, tea.String("DestDbTypes"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.LabelIds)) {
		request.LabelIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.LabelIds, tea.String("LabelIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SourceDbTypes)) {
		request.SourceDbTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SourceDbTypes, tea.String("SourceDbTypes"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.StatusList)) {
		request.StatusListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StatusList, tea.String("StatusList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestDbTypesShrink)) {
		body["DestDbTypes"] = request.DestDbTypesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LabelIdsShrink)) {
		body["LabelIds"] = request.LabelIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		body["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.SourceDbTypesShrink)) {
		body["SourceDbTypes"] = request.SourceDbTypesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StatusListShrink)) {
		body["StatusList"] = request.StatusListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchOmsOpenAPIProjects"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchOmsOpenAPIProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchOmsOpenAPIProjects(request *SearchOmsOpenAPIProjectsRequest) (_result *SearchOmsOpenAPIProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchOmsOpenAPIProjectsResponse{}
	_body, _err := client.SearchOmsOpenAPIProjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartOmsOpenAPIProjectWithOptions(request *StartOmsOpenAPIProjectRequest, runtime *util.RuntimeOptions) (_result *StartOmsOpenAPIProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartOmsOpenAPIProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartOmsOpenAPIProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartOmsOpenAPIProject(request *StartOmsOpenAPIProjectRequest) (_result *StartOmsOpenAPIProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartOmsOpenAPIProjectResponse{}
	_body, _err := client.StartOmsOpenAPIProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartProjectWithOptions(request *StartProjectRequest, runtime *util.RuntimeOptions) (_result *StartProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartProject(request *StartProjectRequest) (_result *StartProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartProjectResponse{}
	_body, _err := client.StartProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartProjectsByLabelWithOptions(request *StartProjectsByLabelRequest, runtime *util.RuntimeOptions) (_result *StartProjectsByLabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartProjectsByLabel"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartProjectsByLabelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartProjectsByLabel(request *StartProjectsByLabelRequest) (_result *StartProjectsByLabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartProjectsByLabelResponse{}
	_body, _err := client.StartProjectsByLabelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopOmsOpenAPIProjectWithOptions(request *StopOmsOpenAPIProjectRequest, runtime *util.RuntimeOptions) (_result *StopOmsOpenAPIProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkerGradeId)) {
		body["WorkerGradeId"] = request.WorkerGradeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopOmsOpenAPIProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopOmsOpenAPIProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopOmsOpenAPIProject(request *StopOmsOpenAPIProjectRequest) (_result *StopOmsOpenAPIProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopOmsOpenAPIProjectResponse{}
	_body, _err := client.StopOmsOpenAPIProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopProjectWithOptions(request *StopProjectRequest, runtime *util.RuntimeOptions) (_result *StopProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopProject"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopProject(request *StopProjectRequest) (_result *StopProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopProjectResponse{}
	_body, _err := client.StopProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopProjectModifyRecordsWithOptions(request *StopProjectModifyRecordsRequest, runtime *util.RuntimeOptions) (_result *StopProjectModifyRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopProjectModifyRecords"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopProjectModifyRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopProjectModifyRecords(request *StopProjectModifyRecordsRequest) (_result *StopProjectModifyRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopProjectModifyRecordsResponse{}
	_body, _err := client.StopProjectModifyRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopProjectsByLabelWithOptions(request *StopProjectsByLabelRequest, runtime *util.RuntimeOptions) (_result *StopProjectsByLabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopProjectsByLabel"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopProjectsByLabelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopProjectsByLabel(request *StopProjectsByLabelRequest) (_result *StopProjectsByLabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopProjectsByLabelResponse{}
	_body, _err := client.StopProjectsByLabelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchoverInstanceWithOptions(request *SwitchoverInstanceRequest, runtime *util.RuntimeOptions) (_result *SwitchoverInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Forced)) {
		body["Forced"] = request.Forced
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetInstanceId)) {
		body["TargetInstanceId"] = request.TargetInstanceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchoverInstance"),
		Version:     tea.String("2019-09-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchoverInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchoverInstance(request *SwitchoverInstanceRequest) (_result *SwitchoverInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchoverInstanceResponse{}
	_body, _err := client.SwitchoverInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
