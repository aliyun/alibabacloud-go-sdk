// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iCreateOnlineEvalTaskRequest interface {
	dara.Model
	String() string
	GoString() string
	SetBody(v *CreateOnlineEvalTaskRequestBody) *CreateOnlineEvalTaskRequest
	GetBody() *CreateOnlineEvalTaskRequestBody
}

type CreateOnlineEvalTaskRequest struct {
	// The request data.
	Body *CreateOnlineEvalTaskRequestBody `json:"body,omitempty" xml:"body,omitempty" type:"Struct"`
}

func (s CreateOnlineEvalTaskRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateOnlineEvalTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateOnlineEvalTaskRequest) GetBody() *CreateOnlineEvalTaskRequestBody {
	return s.Body
}

func (s *CreateOnlineEvalTaskRequest) SetBody(v *CreateOnlineEvalTaskRequestBody) *CreateOnlineEvalTaskRequest {
	s.Body = v
	return s
}

func (s *CreateOnlineEvalTaskRequest) Validate() error {
	return dara.Validate(s)
}

type CreateOnlineEvalTaskRequestBody struct {
	// The name of the user application in the trace data.
	//
	// example:
	//
	// my-best-llm-app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The description of the task.
	//
	// example:
	//
	// April to June data assessment
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The end time of the trace data, in UTC format.
	//
	// example:
	//
	// 2025-06-05 14:00:01
	//
	// 2025-06-05
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This configuration structure defines the JSON paths needed to extract specific values from trace data in JSON format. EvaluationConfig defines these JSON paths.
	EvaluationConfig *EvaluationConfig `json:"EvaluationConfig,omitempty" xml:"EvaluationConfig,omitempty"`
	// The evaluation task must search for a certain amount of trace data generated by the user application as input data for the evaluation. This list defines the search filter conditions.
	Filters []*CreateOnlineEvalTaskRequestBodyFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The access configuration structure of the model used in the evaluation.
	ModelConfig *ModelConfig `json:"ModelConfig,omitempty" xml:"ModelConfig,omitempty"`
	// The evaluation task must search for a certain amount of trace data generated by the user application as input data for the evaluation. This is the width of the time window for each search of input data.
	//
	// example:
	//
	// 9
	SamplingFrequencyMinutes *int32 `json:"SamplingFrequencyMinutes,omitempty" xml:"SamplingFrequencyMinutes,omitempty"`
	// The percentage of data found in a time window that truly serves as evaluation input data. For example, 100 indicates that all data searched is used as evaluation input. 20 indicates that 20% of the found data is randomly selected as evaluation input.
	//
	// example:
	//
	// 50
	SamplingRatio *int32 `json:"SamplingRatio,omitempty" xml:"SamplingRatio,omitempty"`
	// The start time of the trace data, in UTC format.
	//
	// example:
	//
	// 2025-04-05 14:00:01
	//
	// 2025-04-05
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The task name.
	//
	// example:
	//
	// my-llm-app-eval-task-1
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s CreateOnlineEvalTaskRequestBody) String() string {
	return dara.Prettify(s)
}

func (s CreateOnlineEvalTaskRequestBody) GoString() string {
	return s.String()
}

func (s *CreateOnlineEvalTaskRequestBody) GetAppName() *string {
	return s.AppName
}

func (s *CreateOnlineEvalTaskRequestBody) GetDescription() *string {
	return s.Description
}

func (s *CreateOnlineEvalTaskRequestBody) GetEndTime() *string {
	return s.EndTime
}

func (s *CreateOnlineEvalTaskRequestBody) GetEvaluationConfig() *EvaluationConfig {
	return s.EvaluationConfig
}

func (s *CreateOnlineEvalTaskRequestBody) GetFilters() []*CreateOnlineEvalTaskRequestBodyFilters {
	return s.Filters
}

func (s *CreateOnlineEvalTaskRequestBody) GetModelConfig() *ModelConfig {
	return s.ModelConfig
}

func (s *CreateOnlineEvalTaskRequestBody) GetSamplingFrequencyMinutes() *int32 {
	return s.SamplingFrequencyMinutes
}

func (s *CreateOnlineEvalTaskRequestBody) GetSamplingRatio() *int32 {
	return s.SamplingRatio
}

func (s *CreateOnlineEvalTaskRequestBody) GetStartTime() *string {
	return s.StartTime
}

func (s *CreateOnlineEvalTaskRequestBody) GetTaskName() *string {
	return s.TaskName
}

func (s *CreateOnlineEvalTaskRequestBody) SetAppName(v string) *CreateOnlineEvalTaskRequestBody {
	s.AppName = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) SetDescription(v string) *CreateOnlineEvalTaskRequestBody {
	s.Description = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) SetEndTime(v string) *CreateOnlineEvalTaskRequestBody {
	s.EndTime = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) SetEvaluationConfig(v *EvaluationConfig) *CreateOnlineEvalTaskRequestBody {
	s.EvaluationConfig = v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) SetFilters(v []*CreateOnlineEvalTaskRequestBodyFilters) *CreateOnlineEvalTaskRequestBody {
	s.Filters = v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) SetModelConfig(v *ModelConfig) *CreateOnlineEvalTaskRequestBody {
	s.ModelConfig = v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) SetSamplingFrequencyMinutes(v int32) *CreateOnlineEvalTaskRequestBody {
	s.SamplingFrequencyMinutes = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) SetSamplingRatio(v int32) *CreateOnlineEvalTaskRequestBody {
	s.SamplingRatio = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) SetStartTime(v string) *CreateOnlineEvalTaskRequestBody {
	s.StartTime = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) SetTaskName(v string) *CreateOnlineEvalTaskRequestBody {
	s.TaskName = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBody) Validate() error {
	return dara.Validate(s)
}

type CreateOnlineEvalTaskRequestBodyFilters struct {
	// The key of the filter condition.
	//
	// Valid values:
	//
	// 	- Status
	//
	// 	- SpanName
	//
	// 	- Input
	//
	// 	- TraceType
	//
	// 	- SpanType
	//
	// 	- ServiceName
	//
	// 	- Output
	//
	// 	- TraceName
	//
	// 	- ServiceId
	//
	// example:
	//
	// ServiceId
	//
	// ServiceName
	//
	// Input
	//
	// Output
	//
	// Status
	//
	// TraceType
	//
	// SpanType
	//
	// TraceName
	//
	// SpanName
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The matching operator of the filter condition.
	//
	// Valid values:
	//
	// 	- Contains
	//
	// 	- \\=
	//
	// 	- StartsWith
	//
	// example:
	//
	// =
	//
	// StartsWith
	//
	// Contains
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The value of the filter condition.
	//
	// example:
	//
	// foo
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOnlineEvalTaskRequestBodyFilters) String() string {
	return dara.Prettify(s)
}

func (s CreateOnlineEvalTaskRequestBodyFilters) GoString() string {
	return s.String()
}

func (s *CreateOnlineEvalTaskRequestBodyFilters) GetKey() *string {
	return s.Key
}

func (s *CreateOnlineEvalTaskRequestBodyFilters) GetOperator() *string {
	return s.Operator
}

func (s *CreateOnlineEvalTaskRequestBodyFilters) GetValue() *string {
	return s.Value
}

func (s *CreateOnlineEvalTaskRequestBodyFilters) SetKey(v string) *CreateOnlineEvalTaskRequestBodyFilters {
	s.Key = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBodyFilters) SetOperator(v string) *CreateOnlineEvalTaskRequestBodyFilters {
	s.Operator = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBodyFilters) SetValue(v string) *CreateOnlineEvalTaskRequestBodyFilters {
	s.Value = &v
	return s
}

func (s *CreateOnlineEvalTaskRequestBodyFilters) Validate() error {
	return dara.Validate(s)
}
